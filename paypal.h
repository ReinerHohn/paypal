// Reminder: Modify typemap.dat to customize the header file generated by wsdl2h
/* paypal.h
   Generated by wsdl2h 2.8.55 from https://www.sandbox.paypal.com/wsdl/PayPalSvc.wsdl and typemap.dat
   2017-10-31 23:04:26 GMT

   DO NOT INCLUDE THIS FILE DIRECTLY INTO YOUR PROJECT BUILDS
   USE THE soapcpp2-GENERATED SOURCE CODE FILES FOR YOUR PROJECT BUILDS

gSOAP XML Web services tools
Copyright (C) 2000-2017, Robert van Engelen, Genivia Inc. All Rights Reserved.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

/** @page page_notes Notes

@note HINTS:
 - Run soapcpp2 on paypal.h to generate the SOAP/XML processing logic.
   Use soapcpp2 -I to specify paths for #import
   Use soapcpp2 -j to generate improved proxy and server classes.
   Use soapcpp2 -r to generate a report.
 - Use wsdl2h -c and -s to generate pure C code or C++ code without STL.
 - Use 'typemap.dat' to control namespace bindings and type mappings.
   It is strongly recommended to customize the names of the namespace prefixes
   generated by wsdl2h. To do so, modify the prefix bindings in the Namespaces
   section below and add the modified lines to 'typemap.dat' to rerun wsdl2h.
 - Run Doxygen (www.doxygen.org) on this file to generate documentation.
 - Use wsdl2h -R to generate REST operations.
 - Use wsdl2h -nname to use name as the base namespace prefix instead of 'ns'.
 - Use wsdl2h -Nname for service prefix and produce multiple service bindings
 - Use wsdl2h -d to enable DOM support for xsd:anyType.
 - Use wsdl2h -g to auto-generate readers and writers for root elements.
 - Use wsdl2h -b to auto-generate bi-directional operations (duplex ops).
 - Use wsdl2h -U to map XML names to C++ Unicode identifiers instead of _xNNNN.
 - Use wsdl2h -u to disable the generation of unions.
 - Struct/class members serialized as XML attributes are annotated with a '@'.
 - Struct/class members that have a special role are annotated with a '$'.

@warning
   DO NOT INCLUDE THIS ANNOTATED FILE DIRECTLY IN YOUR PROJECT SOURCE CODE.
   USE THE FILES GENERATED BY soapcpp2 FOR YOUR PROJECT'S SOURCE CODE:
   THE soapStub.h FILE CONTAINS THIS CONTENT WITHOUT ANNOTATIONS.

@copyright LICENSE:
@verbatim
--------------------------------------------------------------------------------
gSOAP XML Web services tools
Copyright (C) 2000-2017, Robert van Engelen, Genivia Inc. All Rights Reserved.
The wsdl2h tool and its generated software are released under the GPL.
This software is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
GPL license.

This program is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public License as published by the Free Software
Foundation; either version 2 of the License, or (at your option) any later
version.

This program is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE. See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with
this program; if not, write to the Free Software Foundation, Inc., 59 Temple
Place, Suite 330, Boston, MA 02111-1307 USA

Author contact information:
engelen@genivia.com / engelen@acm.org

This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial-use license is available from Genivia, Inc., contact@genivia.com
--------------------------------------------------------------------------------
@endverbatim

*/


//gsoapopt c++,w

/******************************************************************************\
 *                                                                            *
 * Definitions                                                                *
 *   urn:ebay:api:PayPalAPI                                                   *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * $CONTAINER                                                                 *
 *   std::vector                                                              *
 *                                                                            *
\******************************************************************************/

#include <vector>
template <class T> class std::vector;

/******************************************************************************\
 *                                                                            *
 * Import                                                                     *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Namespaces                                                          *
 *                                                                            *
\******************************************************************************/


/* NOTE:

It is strongly recommended to customize the names of the namespace prefixes
generated by wsdl2h. To do so, modify the prefix bindings below and add the
modified lines to typemap.dat to rerun wsdl2h:

ns1 = "urn:ebay:api:PayPalAPI"
ns2 = "urn:ebay:apis:CoreComponentTypes"
ns3 = "urn:ebay:apis:eBLBaseComponents"
ns4 = "urn:ebay:apis:EnhancedDataTypes"

*/

#define SOAP_NAMESPACE_OF_ns1	"urn:ebay:api:PayPalAPI"
//gsoap ns1   schema namespace:	urn:ebay:api:PayPalAPI
//gsoap ns1   schema elementForm:	qualified
//gsoap ns1   schema attributeForm:	unqualified

#define SOAP_NAMESPACE_OF_ns2	"urn:ebay:apis:CoreComponentTypes"
//gsoap ns2   schema namespace:	urn:ebay:apis:CoreComponentTypes
//gsoap ns2   schema elementForm:	qualified
//gsoap ns2   schema attributeForm:	unqualified

/// <PRE><BLOCKQUOTE>
///   This file defines re-useable base and aggregate components of the eBay Business Lanaguage (eBL) that would be used to compose message payloads for eBay APIs.
/// </BLOCKQUOTE></PRE>
#define SOAP_NAMESPACE_OF_ns3	"urn:ebay:apis:eBLBaseComponents"
//gsoap ns3   schema namespace:	urn:ebay:apis:eBLBaseComponents
//gsoap ns3   schema elementForm:	qualified
//gsoap ns3   schema attributeForm:	unqualified

#define SOAP_NAMESPACE_OF_ns4	"urn:ebay:apis:EnhancedDataTypes"
//gsoap ns4   schema namespace:	urn:ebay:apis:EnhancedDataTypes
//gsoap ns4   schema elementForm:	qualified
//gsoap ns4   schema attributeForm:	unqualified

/******************************************************************************\
 *                                                                            *
 * Built-in Schema Types and Top-Level Elements and Attributes                *
 *                                                                            *
\******************************************************************************/

/// Built-in XSD type "xs:duration".
#import "custom/chrono_duration.h"

/// Primitive built-in type "xs:anyURI".
typedef std::string xsd__anyURI;

/// Primitive built-in type "xs:decimal".
typedef std::string xsd__decimal;

/// Primitive built-in type "xs:integer".
typedef std::string xsd__integer;

/// Primitive built-in type "xs:token".
typedef std::string xsd__token;


/******************************************************************************\
 *                                                                            *
 * Forward Declarations                                                       *
 *                                                                            *
\******************************************************************************/


//  Forward declaration of class ns1__InstallmentDetailsType.
class ns1__InstallmentDetailsType;

//  Forward declaration of class ns1__OptionSelectionDetailsType.
class ns1__OptionSelectionDetailsType;

//  Forward declaration of class ns1__OptionDetailsType.
class ns1__OptionDetailsType;

//  Forward declaration of class ns1__BMCreateButtonRequestType.
class ns1__BMCreateButtonRequestType;

//  Forward declaration of class ns1__BMCreateButtonResponseType.
class ns1__BMCreateButtonResponseType;

//  Forward declaration of class ns1__BMUpdateButtonRequestType.
class ns1__BMUpdateButtonRequestType;

//  Forward declaration of class ns1__BMUpdateButtonResponseType.
class ns1__BMUpdateButtonResponseType;

//  Forward declaration of class ns1__BMManageButtonStatusRequestType.
class ns1__BMManageButtonStatusRequestType;

//  Forward declaration of class ns1__BMManageButtonStatusResponseType.
class ns1__BMManageButtonStatusResponseType;

//  Forward declaration of class ns1__BMGetButtonDetailsRequestType.
class ns1__BMGetButtonDetailsRequestType;

//  Forward declaration of class ns1__BMGetButtonDetailsResponseType.
class ns1__BMGetButtonDetailsResponseType;

//  Forward declaration of class ns1__BMSetInventoryRequestType.
class ns1__BMSetInventoryRequestType;

//  Forward declaration of class ns1__BMSetInventoryResponseType.
class ns1__BMSetInventoryResponseType;

//  Forward declaration of class ns1__BMGetInventoryRequestType.
class ns1__BMGetInventoryRequestType;

//  Forward declaration of class ns1__BMGetInventoryResponseType.
class ns1__BMGetInventoryResponseType;

//  Forward declaration of class ns1__BMButtonSearchRequestType.
class ns1__BMButtonSearchRequestType;

//  Forward declaration of class ns1__BMButtonSearchResponseType.
class ns1__BMButtonSearchResponseType;

//  Forward declaration of class ns1__RefundTransactionRequestType.
class ns1__RefundTransactionRequestType;

//  Forward declaration of class ns1__RefundTransactionResponseType.
class ns1__RefundTransactionResponseType;

//  Forward declaration of class ns1__InitiateRecoupRequestType.
class ns1__InitiateRecoupRequestType;

//  Forward declaration of class ns1__InitiateRecoupResponseType.
class ns1__InitiateRecoupResponseType;

//  Forward declaration of class ns1__CompleteRecoupRequestType.
class ns1__CompleteRecoupRequestType;

//  Forward declaration of class ns1__CompleteRecoupResponseType.
class ns1__CompleteRecoupResponseType;

//  Forward declaration of class ns1__CancelRecoupRequestType.
class ns1__CancelRecoupRequestType;

//  Forward declaration of class ns1__CancelRecoupResponseType.
class ns1__CancelRecoupResponseType;

//  Forward declaration of class ns1__GetTransactionDetailsRequestType.
class ns1__GetTransactionDetailsRequestType;

//  Forward declaration of class ns1__GetTransactionDetailsResponseType.
class ns1__GetTransactionDetailsResponseType;

//  Forward declaration of class ns1__BillUserRequestType.
class ns1__BillUserRequestType;

//  Forward declaration of class ns1__BillUserResponseType.
class ns1__BillUserResponseType;

//  Forward declaration of class ns1__TransactionSearchRequestType.
class ns1__TransactionSearchRequestType;

//  Forward declaration of class ns1__TransactionSearchResponseType.
class ns1__TransactionSearchResponseType;

//  Forward declaration of class ns1__MassPayRequestType.
class ns1__MassPayRequestType;

//  Forward declaration of class ns1__MassPayResponseType.
class ns1__MassPayResponseType;

//  Forward declaration of class ns1__MassPayRequestItemType.
class ns1__MassPayRequestItemType;

//  Forward declaration of class ns1__BAUpdateRequestType.
class ns1__BAUpdateRequestType;

//  Forward declaration of class ns1__BAUpdateResponseType.
class ns1__BAUpdateResponseType;

//  Forward declaration of class ns1__AddressVerifyRequestType.
class ns1__AddressVerifyRequestType;

//  Forward declaration of class ns1__AddressVerifyResponseType.
class ns1__AddressVerifyResponseType;

//  Forward declaration of class ns1__EnterBoardingRequestType.
class ns1__EnterBoardingRequestType;

//  Forward declaration of class ns1__EnterBoardingResponseType.
class ns1__EnterBoardingResponseType;

//  Forward declaration of class ns1__GetBoardingDetailsRequestType.
class ns1__GetBoardingDetailsRequestType;

//  Forward declaration of class ns1__GetBoardingDetailsResponseType.
class ns1__GetBoardingDetailsResponseType;

//  Forward declaration of class ns1__SetAuthFlowParamRequestType.
class ns1__SetAuthFlowParamRequestType;

//  Forward declaration of class ns1__SetAuthFlowParamResponseType.
class ns1__SetAuthFlowParamResponseType;

//  Forward declaration of class ns1__GetAuthDetailsRequestType.
class ns1__GetAuthDetailsRequestType;

//  Forward declaration of class ns1__GetAuthDetailsResponseType.
class ns1__GetAuthDetailsResponseType;

//  Forward declaration of class ns1__SetAccessPermissionsRequestType.
class ns1__SetAccessPermissionsRequestType;

//  Forward declaration of class ns1__SetAccessPermissionsResponseType.
class ns1__SetAccessPermissionsResponseType;

//  Forward declaration of class ns1__UpdateAccessPermissionsRequestType.
class ns1__UpdateAccessPermissionsRequestType;

//  Forward declaration of class ns1__UpdateAccessPermissionsResponseType.
class ns1__UpdateAccessPermissionsResponseType;

//  Forward declaration of class ns1__GetAccessPermissionDetailsRequestType.
class ns1__GetAccessPermissionDetailsRequestType;

//  Forward declaration of class ns1__GetAccessPermissionDetailsResponseType.
class ns1__GetAccessPermissionDetailsResponseType;

//  Forward declaration of class ns1__GetIncentiveEvaluationRequestType.
class ns1__GetIncentiveEvaluationRequestType;

//  Forward declaration of class ns1__GetIncentiveEvaluationResponseType.
class ns1__GetIncentiveEvaluationResponseType;

//  Forward declaration of class ns1__SetExpressCheckoutRequestType.
class ns1__SetExpressCheckoutRequestType;

//  Forward declaration of class ns1__SetExpressCheckoutResponseType.
class ns1__SetExpressCheckoutResponseType;

//  Forward declaration of class ns1__ExecuteCheckoutOperationsRequestType.
class ns1__ExecuteCheckoutOperationsRequestType;

//  Forward declaration of class ns1__ExecuteCheckoutOperationsResponseType.
class ns1__ExecuteCheckoutOperationsResponseType;

//  Forward declaration of class ns1__GetExpressCheckoutDetailsRequestType.
class ns1__GetExpressCheckoutDetailsRequestType;

//  Forward declaration of class ns1__GetExpressCheckoutDetailsResponseType.
class ns1__GetExpressCheckoutDetailsResponseType;

//  Forward declaration of class ns1__DoExpressCheckoutPaymentRequestType.
class ns1__DoExpressCheckoutPaymentRequestType;

//  Forward declaration of class ns1__DoExpressCheckoutPaymentResponseType.
class ns1__DoExpressCheckoutPaymentResponseType;

//  Forward declaration of class ns1__DoUATPExpressCheckoutPaymentRequestType.
class ns1__DoUATPExpressCheckoutPaymentRequestType;

//  Forward declaration of class ns1__DoUATPExpressCheckoutPaymentResponseType.
class ns1__DoUATPExpressCheckoutPaymentResponseType;

//  Forward declaration of class ns1__ManagePendingTransactionStatusRequestType.
class ns1__ManagePendingTransactionStatusRequestType;

//  Forward declaration of class ns1__ManagePendingTransactionStatusResponseType.
class ns1__ManagePendingTransactionStatusResponseType;

//  Forward declaration of class ns1__DoDirectPaymentRequestType.
class ns1__DoDirectPaymentRequestType;

//  Forward declaration of class ns1__DoDirectPaymentResponseType.
class ns1__DoDirectPaymentResponseType;

//  Forward declaration of class ns1__DoCancelRequestType.
class ns1__DoCancelRequestType;

//  Forward declaration of class ns1__DoCancelResponseType.
class ns1__DoCancelResponseType;

//  Forward declaration of class ns1__DoCaptureRequestType.
class ns1__DoCaptureRequestType;

//  Forward declaration of class ns1__DoCaptureResponseType.
class ns1__DoCaptureResponseType;

//  Forward declaration of class ns1__DoReauthorizationRequestType.
class ns1__DoReauthorizationRequestType;

//  Forward declaration of class ns1__DoReauthorizationResponseType.
class ns1__DoReauthorizationResponseType;

//  Forward declaration of class ns1__DoVoidRequestType.
class ns1__DoVoidRequestType;

//  Forward declaration of class ns1__DoVoidResponseType.
class ns1__DoVoidResponseType;

//  Forward declaration of class ns1__DoAuthorizationRequestType.
class ns1__DoAuthorizationRequestType;

//  Forward declaration of class ns1__DoAuthorizationResponseType.
class ns1__DoAuthorizationResponseType;

//  Forward declaration of class ns1__UpdateAuthorizationRequestType.
class ns1__UpdateAuthorizationRequestType;

//  Forward declaration of class ns1__UpdateAuthorizationResponseType.
class ns1__UpdateAuthorizationResponseType;

//  Forward declaration of class ns1__DoUATPAuthorizationRequestType.
class ns1__DoUATPAuthorizationRequestType;

//  Forward declaration of class ns1__DoUATPAuthorizationResponseType.
class ns1__DoUATPAuthorizationResponseType;

//  Forward declaration of class ns1__CreateMobilePaymentRequestType.
class ns1__CreateMobilePaymentRequestType;

//  Forward declaration of class ns1__CreateMobilePaymentResponseType.
class ns1__CreateMobilePaymentResponseType;

//  Forward declaration of class ns1__GetMobileStatusRequestType.
class ns1__GetMobileStatusRequestType;

//  Forward declaration of class ns1__GetMobileStatusResponseType.
class ns1__GetMobileStatusResponseType;

//  Forward declaration of class ns1__SetMobileCheckoutRequestType.
class ns1__SetMobileCheckoutRequestType;

//  Forward declaration of class ns1__SetMobileCheckoutResponseType.
class ns1__SetMobileCheckoutResponseType;

//  Forward declaration of class ns1__DoMobileCheckoutPaymentRequestType.
class ns1__DoMobileCheckoutPaymentRequestType;

//  Forward declaration of class ns1__DoMobileCheckoutPaymentResponseType.
class ns1__DoMobileCheckoutPaymentResponseType;

//  Forward declaration of class ns1__GetBalanceRequestType.
class ns1__GetBalanceRequestType;

//  Forward declaration of class ns1__GetBalanceResponseType.
class ns1__GetBalanceResponseType;

//  Forward declaration of class ns1__SetCustomerBillingAgreementRequestType.
class ns1__SetCustomerBillingAgreementRequestType;

//  Forward declaration of class ns1__SetCustomerBillingAgreementResponseType.
class ns1__SetCustomerBillingAgreementResponseType;

//  Forward declaration of class ns1__GetBillingAgreementCustomerDetailsRequestType.
class ns1__GetBillingAgreementCustomerDetailsRequestType;

//  Forward declaration of class ns1__GetBillingAgreementCustomerDetailsResponseType.
class ns1__GetBillingAgreementCustomerDetailsResponseType;

//  Forward declaration of class ns1__CreateBillingAgreementRequestType.
class ns1__CreateBillingAgreementRequestType;

//  Forward declaration of class ns1__CreateBillingAgreementResponseType.
class ns1__CreateBillingAgreementResponseType;

//  Forward declaration of class ns1__DoReferenceTransactionRequestType.
class ns1__DoReferenceTransactionRequestType;

//  Forward declaration of class ns1__DoReferenceTransactionResponseType.
class ns1__DoReferenceTransactionResponseType;

//  Forward declaration of class ns1__DoNonReferencedCreditRequestType.
class ns1__DoNonReferencedCreditRequestType;

//  Forward declaration of class ns1__DoNonReferencedCreditResponseType.
class ns1__DoNonReferencedCreditResponseType;

//  Forward declaration of class ns1__CreateRecurringPaymentsProfileRequestType.
class ns1__CreateRecurringPaymentsProfileRequestType;

//  Forward declaration of class ns1__CreateRecurringPaymentsProfileResponseType.
class ns1__CreateRecurringPaymentsProfileResponseType;

//  Forward declaration of class ns1__GetRecurringPaymentsProfileDetailsRequestType.
class ns1__GetRecurringPaymentsProfileDetailsRequestType;

//  Forward declaration of class ns1__GetRecurringPaymentsProfileDetailsResponseType.
class ns1__GetRecurringPaymentsProfileDetailsResponseType;

//  Forward declaration of class ns1__ManageRecurringPaymentsProfileStatusRequestType.
class ns1__ManageRecurringPaymentsProfileStatusRequestType;

//  Forward declaration of class ns1__ManageRecurringPaymentsProfileStatusResponseType.
class ns1__ManageRecurringPaymentsProfileStatusResponseType;

//  Forward declaration of class ns1__BillOutstandingAmountRequestType.
class ns1__BillOutstandingAmountRequestType;

//  Forward declaration of class ns1__BillOutstandingAmountResponseType.
class ns1__BillOutstandingAmountResponseType;

//  Forward declaration of class ns1__UpdateRecurringPaymentsProfileRequestType.
class ns1__UpdateRecurringPaymentsProfileRequestType;

//  Forward declaration of class ns1__UpdateRecurringPaymentsProfileResponseType.
class ns1__UpdateRecurringPaymentsProfileResponseType;

//  Forward declaration of class ns1__GetPalDetailsRequestType.
class ns1__GetPalDetailsRequestType;

//  Forward declaration of class ns1__GetPalDetailsResponseType.
class ns1__GetPalDetailsResponseType;

//  Forward declaration of class ns1__ReverseTransactionRequestType.
class ns1__ReverseTransactionRequestType;

//  Forward declaration of class ns1__ReverseTransactionResponseType.
class ns1__ReverseTransactionResponseType;

//  Forward declaration of class ns1__ExternalRememberMeOptOutRequestType.
class ns1__ExternalRememberMeOptOutRequestType;

//  Forward declaration of class ns1__ExternalRememberMeOptOutResponseType.
class ns1__ExternalRememberMeOptOutResponseType;

//  Forward declaration of class _ns1__BMCreateButtonReq.
class _ns1__BMCreateButtonReq;

//  Forward declaration of class _ns1__BMUpdateButtonReq.
class _ns1__BMUpdateButtonReq;

//  Forward declaration of class _ns1__BMManageButtonStatusReq.
class _ns1__BMManageButtonStatusReq;

//  Forward declaration of class _ns1__BMGetButtonDetailsReq.
class _ns1__BMGetButtonDetailsReq;

//  Forward declaration of class _ns1__BMSetInventoryReq.
class _ns1__BMSetInventoryReq;

//  Forward declaration of class _ns1__BMGetInventoryReq.
class _ns1__BMGetInventoryReq;

//  Forward declaration of class _ns1__BMButtonSearchReq.
class _ns1__BMButtonSearchReq;

//  Forward declaration of class _ns1__RefundTransactionReq.
class _ns1__RefundTransactionReq;

//  Forward declaration of class _ns1__InitiateRecoupReq.
class _ns1__InitiateRecoupReq;

//  Forward declaration of class _ns1__CompleteRecoupReq.
class _ns1__CompleteRecoupReq;

//  Forward declaration of class _ns1__CancelRecoupReq.
class _ns1__CancelRecoupReq;

//  Forward declaration of class _ns1__GetTransactionDetailsReq.
class _ns1__GetTransactionDetailsReq;

//  Forward declaration of class _ns1__BillUserReq.
class _ns1__BillUserReq;

//  Forward declaration of class _ns1__TransactionSearchReq.
class _ns1__TransactionSearchReq;

//  Forward declaration of class _ns1__MassPayReq.
class _ns1__MassPayReq;

//  Forward declaration of class _ns1__BillAgreementUpdateReq.
class _ns1__BillAgreementUpdateReq;

//  Forward declaration of class _ns1__AddressVerifyReq.
class _ns1__AddressVerifyReq;

//  Forward declaration of class _ns1__EnterBoardingReq.
class _ns1__EnterBoardingReq;

//  Forward declaration of class _ns1__GetBoardingDetailsReq.
class _ns1__GetBoardingDetailsReq;

//  Forward declaration of class _ns1__SetAuthFlowParamReq.
class _ns1__SetAuthFlowParamReq;

//  Forward declaration of class _ns1__GetAuthDetailsReq.
class _ns1__GetAuthDetailsReq;

//  Forward declaration of class _ns1__SetAccessPermissionsReq.
class _ns1__SetAccessPermissionsReq;

//  Forward declaration of class _ns1__UpdateAccessPermissionsReq.
class _ns1__UpdateAccessPermissionsReq;

//  Forward declaration of class _ns1__GetAccessPermissionDetailsReq.
class _ns1__GetAccessPermissionDetailsReq;

//  Forward declaration of class _ns1__GetIncentiveEvaluationReq.
class _ns1__GetIncentiveEvaluationReq;

//  Forward declaration of class _ns1__SetExpressCheckoutReq.
class _ns1__SetExpressCheckoutReq;

//  Forward declaration of class _ns1__ExecuteCheckoutOperationsReq.
class _ns1__ExecuteCheckoutOperationsReq;

//  Forward declaration of class _ns1__GetExpressCheckoutDetailsReq.
class _ns1__GetExpressCheckoutDetailsReq;

//  Forward declaration of class _ns1__DoExpressCheckoutPaymentReq.
class _ns1__DoExpressCheckoutPaymentReq;

//  Forward declaration of class _ns1__DoUATPExpressCheckoutPaymentReq.
class _ns1__DoUATPExpressCheckoutPaymentReq;

//  Forward declaration of class _ns1__ManagePendingTransactionStatusReq.
class _ns1__ManagePendingTransactionStatusReq;

//  Forward declaration of class _ns1__DoDirectPaymentReq.
class _ns1__DoDirectPaymentReq;

//  Forward declaration of class _ns1__DoCancelReq.
class _ns1__DoCancelReq;

//  Forward declaration of class _ns1__DoCaptureReq.
class _ns1__DoCaptureReq;

//  Forward declaration of class _ns1__DoReauthorizationReq.
class _ns1__DoReauthorizationReq;

//  Forward declaration of class _ns1__DoVoidReq.
class _ns1__DoVoidReq;

//  Forward declaration of class _ns1__DoAuthorizationReq.
class _ns1__DoAuthorizationReq;

//  Forward declaration of class _ns1__UpdateAuthorizationReq.
class _ns1__UpdateAuthorizationReq;

//  Forward declaration of class _ns1__DoUATPAuthorizationReq.
class _ns1__DoUATPAuthorizationReq;

//  Forward declaration of class _ns1__CreateMobilePaymentReq.
class _ns1__CreateMobilePaymentReq;

//  Forward declaration of class _ns1__GetMobileStatusReq.
class _ns1__GetMobileStatusReq;

//  Forward declaration of class _ns1__SetMobileCheckoutReq.
class _ns1__SetMobileCheckoutReq;

//  Forward declaration of class _ns1__DoMobileCheckoutPaymentReq.
class _ns1__DoMobileCheckoutPaymentReq;

//  Forward declaration of class _ns1__GetBalanceReq.
class _ns1__GetBalanceReq;

//  Forward declaration of class _ns1__SetCustomerBillingAgreementReq.
class _ns1__SetCustomerBillingAgreementReq;

//  Forward declaration of class _ns1__GetBillingAgreementCustomerDetailsReq.
class _ns1__GetBillingAgreementCustomerDetailsReq;

//  Forward declaration of class _ns1__CreateBillingAgreementReq.
class _ns1__CreateBillingAgreementReq;

//  Forward declaration of class _ns1__DoReferenceTransactionReq.
class _ns1__DoReferenceTransactionReq;

//  Forward declaration of class _ns1__DoNonReferencedCreditReq.
class _ns1__DoNonReferencedCreditReq;

//  Forward declaration of class _ns1__CreateRecurringPaymentsProfileReq.
class _ns1__CreateRecurringPaymentsProfileReq;

//  Forward declaration of class _ns1__GetRecurringPaymentsProfileDetailsReq.
class _ns1__GetRecurringPaymentsProfileDetailsReq;

//  Forward declaration of class _ns1__ManageRecurringPaymentsProfileStatusReq.
class _ns1__ManageRecurringPaymentsProfileStatusReq;

//  Forward declaration of class _ns1__BillOutstandingAmountReq.
class _ns1__BillOutstandingAmountReq;

//  Forward declaration of class _ns1__UpdateRecurringPaymentsProfileReq.
class _ns1__UpdateRecurringPaymentsProfileReq;

//  Forward declaration of class _ns1__GetPalDetailsReq.
class _ns1__GetPalDetailsReq;

//  Forward declaration of class _ns1__ReverseTransactionReq.
class _ns1__ReverseTransactionReq;

//  Forward declaration of class _ns1__ExternalRememberMeOptOutReq.
class _ns1__ExternalRememberMeOptOutReq;

//  Forward declaration of class ns2__AmountType.
class ns2__AmountType;

//  Forward declaration of class ns2__BasicAmountType.
class ns2__BasicAmountType;

//  Forward declaration of class ns2__MeasureType.
class ns2__MeasureType;

//  Forward declaration of class ns2__QuantityType.
class ns2__QuantityType;

//  Forward declaration of class ns3__AccountEntryType.
class ns3__AccountEntryType;

//  Forward declaration of class ns3__AdditionalAccountType.
class ns3__AdditionalAccountType;

//  Forward declaration of class ns3__PromotedItemType.
class ns3__PromotedItemType;

//  Forward declaration of class ns3__CrossPromotionsType.
class ns3__CrossPromotionsType;

//  Forward declaration of class ns3__AccountSummaryType.
class ns3__AccountSummaryType;

//  Forward declaration of class ns3__BuyerType.
class ns3__BuyerType;

//  Forward declaration of class ns3__SellerType.
class ns3__SellerType;

//  Forward declaration of class ns3__FeeType.
class ns3__FeeType;

//  Forward declaration of class ns3__FeesType.
class ns3__FeesType;

//  Forward declaration of class ns3__ShippingCarrierDetailsType.
class ns3__ShippingCarrierDetailsType;

//  Forward declaration of class ns3__CalculatedShippingRateType.
class ns3__CalculatedShippingRateType;

//  Forward declaration of class ns3__FlatShippingRateType.
class ns3__FlatShippingRateType;

//  Forward declaration of class ns3__SalesTaxType.
class ns3__SalesTaxType;

//  Forward declaration of class ns3__ShippingDetailsType.
class ns3__ShippingDetailsType;

//  Forward declaration of class ns3__SiteHostedPictureType.
class ns3__SiteHostedPictureType;

//  Forward declaration of class ns3__VendorHostedPictureType.
class ns3__VendorHostedPictureType;

//  Forward declaration of class ns3__ValType.
class ns3__ValType;

//  Forward declaration of class ns3__AttributeType.
class ns3__AttributeType;

//  Forward declaration of class ns3__AttributeSetType.
class ns3__AttributeSetType;

//  Forward declaration of class ns3__ListOfAttributeSetType.
class ns3__ListOfAttributeSetType;

//  Forward declaration of class ns3__CategoryType.
class ns3__CategoryType;

//  Forward declaration of class ns3__StorefrontType.
class ns3__StorefrontType;

//  Forward declaration of class ns3__ListingDesignerType.
class ns3__ListingDesignerType;

//  Forward declaration of class ns3__CharityType.
class ns3__CharityType;

//  Forward declaration of class ns3__SellingStatusType.
class ns3__SellingStatusType;

//  Forward declaration of class ns3__ReviseStatusType.
class ns3__ReviseStatusType;

//  Forward declaration of class ns3__ListingDetailsType.
class ns3__ListingDetailsType;

//  Forward declaration of class ns3__ItemType.
class ns3__ItemType;

//  Forward declaration of class ns3__TransactionsType.
class ns3__TransactionsType;

//  Forward declaration of class ns3__TransactionType.
class ns3__TransactionType;

//  Forward declaration of class ns3__PaymentMeansType.
class ns3__PaymentMeansType;

//  Forward declaration of class ns3__PaymentType.
class ns3__PaymentType;

//  Forward declaration of class ns3__TransactionStatusType.
class ns3__TransactionStatusType;

//  Forward declaration of class ns3__UserType.
class ns3__UserType;

//  Forward declaration of class ns3__VATDetailsType.
class ns3__VATDetailsType;

//  Forward declaration of class ns3__SchedulingInfoType.
class ns3__SchedulingInfoType;

//  Forward declaration of class ns3__ItemArrayType.
class ns3__ItemArrayType;

//  Forward declaration of class ns3__CategoryArrayType.
class ns3__CategoryArrayType;

//  Forward declaration of class ns3__PaginationType.
class ns3__PaginationType;

//  Forward declaration of class ns3__ModifiedFieldType.
class ns3__ModifiedFieldType;

//  Forward declaration of class ns3__PaginationResultType.
class ns3__PaginationResultType;

//  Forward declaration of class ns3__ErrorParameterType.
class ns3__ErrorParameterType;

//  Forward declaration of class ns3__ErrorType.
class ns3__ErrorType;

//  Forward declaration of class ns3__FaultDetailsType.
class ns3__FaultDetailsType;

//  Forward declaration of class ns3__AbstractRequestType.
class ns3__AbstractRequestType;

//  Forward declaration of class ns3__AbstractResponseType.
class ns3__AbstractResponseType;

//  Forward declaration of class ns3__PhoneNumberType.
class ns3__PhoneNumberType;

//  Forward declaration of class ns3__AddressType.
class ns3__AddressType;

//  Forward declaration of class ns3__PersonNameType.
class ns3__PersonNameType;

//  Forward declaration of class ns3__IncentiveAppliedToType.
class ns3__IncentiveAppliedToType;

//  Forward declaration of class ns3__IncentiveDetailType.
class ns3__IncentiveDetailType;

//  Forward declaration of class ns3__IncentiveItemType.
class ns3__IncentiveItemType;

//  Forward declaration of class ns3__IncentiveBucketType.
class ns3__IncentiveBucketType;

//  Forward declaration of class ns3__IncentiveRequestDetailsType.
class ns3__IncentiveRequestDetailsType;

//  Forward declaration of class ns3__GetIncentiveEvaluationRequestDetailsType.
class ns3__GetIncentiveEvaluationRequestDetailsType;

//  Forward declaration of class ns3__GetIncentiveEvaluationResponseDetailsType.
class ns3__GetIncentiveEvaluationResponseDetailsType;

//  Forward declaration of class ns3__SetExpressCheckoutRequestDetailsType.
class ns3__SetExpressCheckoutRequestDetailsType;

//  Forward declaration of class ns3__ExecuteCheckoutOperationsRequestDetailsType.
class ns3__ExecuteCheckoutOperationsRequestDetailsType;

//  Forward declaration of class ns3__SetDataRequestType.
class ns3__SetDataRequestType;

//  Forward declaration of class ns3__AuthorizationRequestType.
class ns3__AuthorizationRequestType;

//  Forward declaration of class ns3__BillingApprovalDetailsType.
class ns3__BillingApprovalDetailsType;

//  Forward declaration of class ns3__InfoSharingDirectivesType.
class ns3__InfoSharingDirectivesType;

//  Forward declaration of class ns3__OrderDetailsType.
class ns3__OrderDetailsType;

//  Forward declaration of class ns3__PaymentDirectivesType.
class ns3__PaymentDirectivesType;

//  Forward declaration of class ns3__BuyerDetailType.
class ns3__BuyerDetailType;

//  Forward declaration of class ns3__IdentificationInfoType.
class ns3__IdentificationInfoType;

//  Forward declaration of class ns3__MobileIDInfoType.
class ns3__MobileIDInfoType;

//  Forward declaration of class ns3__RememberMeIDInfoType.
class ns3__RememberMeIDInfoType;

//  Forward declaration of class ns3__IdentityTokenInfoType.
class ns3__IdentityTokenInfoType;

//  Forward declaration of class ns3__FundingSourceDetailsType.
class ns3__FundingSourceDetailsType;

//  Forward declaration of class ns3__BillingAgreementDetailsType.
class ns3__BillingAgreementDetailsType;

//  Forward declaration of class ns3__GetExpressCheckoutDetailsResponseDetailsType.
class ns3__GetExpressCheckoutDetailsResponseDetailsType;

//  Forward declaration of class ns3__ExecuteCheckoutOperationsResponseDetailsType.
class ns3__ExecuteCheckoutOperationsResponseDetailsType;

//  Forward declaration of class ns3__SetDataResponseType.
class ns3__SetDataResponseType;

//  Forward declaration of class ns3__AuthorizationResponseType.
class ns3__AuthorizationResponseType;

//  Forward declaration of class ns3__DoExpressCheckoutPaymentRequestDetailsType.
class ns3__DoExpressCheckoutPaymentRequestDetailsType;

//  Forward declaration of class ns3__DoExpressCheckoutPaymentResponseDetailsType.
class ns3__DoExpressCheckoutPaymentResponseDetailsType;

//  Forward declaration of class ns3__DoCaptureResponseDetailsType.
class ns3__DoCaptureResponseDetailsType;

//  Forward declaration of class ns3__DoDirectPaymentRequestDetailsType.
class ns3__DoDirectPaymentRequestDetailsType;

//  Forward declaration of class ns3__CreateMobilePaymentRequestDetailsType.
class ns3__CreateMobilePaymentRequestDetailsType;

//  Forward declaration of class ns3__GetMobileStatusRequestDetailsType.
class ns3__GetMobileStatusRequestDetailsType;

//  Forward declaration of class ns3__SetAuthFlowParamRequestDetailsType.
class ns3__SetAuthFlowParamRequestDetailsType;

//  Forward declaration of class ns3__GetAuthDetailsResponseDetailsType.
class ns3__GetAuthDetailsResponseDetailsType;

//  Forward declaration of class ns3__SetAccessPermissionsRequestDetailsType.
class ns3__SetAccessPermissionsRequestDetailsType;

//  Forward declaration of class ns3__GetAccessPermissionDetailsResponseDetailsType.
class ns3__GetAccessPermissionDetailsResponseDetailsType;

//  Forward declaration of class ns3__BAUpdateResponseDetailsType.
class ns3__BAUpdateResponseDetailsType;

//  Forward declaration of class ns3__MerchantPullPaymentResponseType.
class ns3__MerchantPullPaymentResponseType;

//  Forward declaration of class ns3__MerchantPullInfoType.
class ns3__MerchantPullInfoType;

//  Forward declaration of class ns3__PaymentTransactionSearchResultType.
class ns3__PaymentTransactionSearchResultType;

//  Forward declaration of class ns3__ShippingInfoType.
class ns3__ShippingInfoType;

//  Forward declaration of class ns3__TaxInfoType.
class ns3__TaxInfoType;

//  Forward declaration of class ns3__MerchantPullPaymentType.
class ns3__MerchantPullPaymentType;

//  Forward declaration of class ns3__PaymentTransactionType.
class ns3__PaymentTransactionType;

//  Forward declaration of class ns3__ReceiverInfoType.
class ns3__ReceiverInfoType;

//  Forward declaration of class ns3__PayerInfoType.
class ns3__PayerInfoType;

//  Forward declaration of class ns3__PayeeInfoType.
class ns3__PayeeInfoType;

//  Forward declaration of class ns3__InstrumentDetailsType.
class ns3__InstrumentDetailsType;

//  Forward declaration of class ns3__BMLOfferInfoType.
class ns3__BMLOfferInfoType;

//  Forward declaration of class ns3__OfferDetailsType.
class ns3__OfferDetailsType;

//  Forward declaration of class ns3__PaymentInfoType.
class ns3__PaymentInfoType;

//  Forward declaration of class ns3__SubscriptionTermsType.
class ns3__SubscriptionTermsType;

//  Forward declaration of class ns3__SubscriptionInfoType.
class ns3__SubscriptionInfoType;

//  Forward declaration of class ns3__AuctionInfoType.
class ns3__AuctionInfoType;

//  Forward declaration of class ns3__OptionType.
class ns3__OptionType;

//  Forward declaration of class ns3__EbayItemPaymentDetailsItemType.
class ns3__EbayItemPaymentDetailsItemType;

//  Forward declaration of class ns3__PaymentDetailsItemType.
class ns3__PaymentDetailsItemType;

//  Forward declaration of class ns3__PaymentItemType.
class ns3__PaymentItemType;

//  Forward declaration of class ns3__PaymentItemInfoType.
class ns3__PaymentItemInfoType;

//  Forward declaration of class ns3__OfferCouponInfoType.
class ns3__OfferCouponInfoType;

//  Forward declaration of class ns3__PaymentDetailsType.
class ns3__PaymentDetailsType;

//  Forward declaration of class ns3__IncentiveDetailsType.
class ns3__IncentiveDetailsType;

//  Forward declaration of class ns3__IncentiveAppliedDetailsType.
class ns3__IncentiveAppliedDetailsType;

//  Forward declaration of class ns3__SellerDetailsType.
class ns3__SellerDetailsType;

//  Forward declaration of class ns3__OtherPaymentMethodDetailsType.
class ns3__OtherPaymentMethodDetailsType;

//  Forward declaration of class ns3__BuyerDetailsType.
class ns3__BuyerDetailsType;

//  Forward declaration of class ns3__TaxIdDetailsType.
class ns3__TaxIdDetailsType;

//  Forward declaration of class ns3__ThreeDSecureRequestType.
class ns3__ThreeDSecureRequestType;

//  Forward declaration of class ns3__ThreeDSecureResponseType.
class ns3__ThreeDSecureResponseType;

//  Forward declaration of class ns3__ThreeDSecureInfoType.
class ns3__ThreeDSecureInfoType;

//  Forward declaration of class ns3__CreditCardDetailsType.
class ns3__CreditCardDetailsType;

//  Forward declaration of class ns3__ShippingOptionType.
class ns3__ShippingOptionType;

//  Forward declaration of class ns3__UserSelectedOptionType.
class ns3__UserSelectedOptionType;

//  Forward declaration of class ns3__CreditCardNumberTypeType.
class ns3__CreditCardNumberTypeType;

//  Forward declaration of class ns3__ReferenceCreditCardDetailsType.
class ns3__ReferenceCreditCardDetailsType;

//  Forward declaration of class ns3__CustomSecurityHeaderType.
class ns3__CustomSecurityHeaderType;

//  Forward declaration of class ns3__UserIdPasswordType.
class ns3__UserIdPasswordType;

//  Forward declaration of class ns3__SetCustomerBillingAgreementRequestDetailsType.
class ns3__SetCustomerBillingAgreementRequestDetailsType;

//  Forward declaration of class ns3__GetBillingAgreementCustomerDetailsResponseDetailsType.
class ns3__GetBillingAgreementCustomerDetailsResponseDetailsType;

//  Forward declaration of class ns3__DeviceDetailsType.
class ns3__DeviceDetailsType;

//  Forward declaration of class ns3__SenderDetailsType.
class ns3__SenderDetailsType;

//  Forward declaration of class ns3__DoReferenceTransactionRequestDetailsType.
class ns3__DoReferenceTransactionRequestDetailsType;

//  Forward declaration of class ns3__DoReferenceTransactionResponseDetailsType.
class ns3__DoReferenceTransactionResponseDetailsType;

//  Forward declaration of class ns3__DoNonReferencedCreditRequestDetailsType.
class ns3__DoNonReferencedCreditRequestDetailsType;

//  Forward declaration of class ns3__DoNonReferencedCreditResponseDetailsType.
class ns3__DoNonReferencedCreditResponseDetailsType;

//  Forward declaration of class ns3__EnterBoardingRequestDetailsType.
class ns3__EnterBoardingRequestDetailsType;

//  Forward declaration of class ns3__BusinessInfoType.
class ns3__BusinessInfoType;

//  Forward declaration of class ns3__BusinessOwnerInfoType.
class ns3__BusinessOwnerInfoType;

//  Forward declaration of class ns3__BankAccountDetailsType.
class ns3__BankAccountDetailsType;

//  Forward declaration of class ns3__GetBoardingDetailsResponseDetailsType.
class ns3__GetBoardingDetailsResponseDetailsType;

//  Forward declaration of class ns3__APICredentialsType.
class ns3__APICredentialsType;

//  Forward declaration of class ns3__SetMobileCheckoutRequestDetailsType.
class ns3__SetMobileCheckoutRequestDetailsType;

//  Forward declaration of class ns3__DoMobileCheckoutPaymentResponseDetailsType.
class ns3__DoMobileCheckoutPaymentResponseDetailsType;

//  Forward declaration of class ns3__SetEbayMobileCheckoutRequestDetailsType.
class ns3__SetEbayMobileCheckoutRequestDetailsType;

//  Forward declaration of class ns3__UATPDetailsType.
class ns3__UATPDetailsType;

//  Forward declaration of class ns3__RecurringPaymentsSummaryType.
class ns3__RecurringPaymentsSummaryType;

//  Forward declaration of class ns3__ActivationDetailsType.
class ns3__ActivationDetailsType;

//  Forward declaration of class ns3__BillingPeriodDetailsType.
class ns3__BillingPeriodDetailsType;

//  Forward declaration of class ns3__BillingPeriodDetailsType_USCOREUpdate.
class ns3__BillingPeriodDetailsType_USCOREUpdate;

//  Forward declaration of class ns3__ScheduleDetailsType.
class ns3__ScheduleDetailsType;

//  Forward declaration of class ns3__RecurringPaymentsProfileDetailsType.
class ns3__RecurringPaymentsProfileDetailsType;

//  Forward declaration of class ns3__CreateRecurringPaymentsProfileRequestDetailsType.
class ns3__CreateRecurringPaymentsProfileRequestDetailsType;

//  Forward declaration of class ns3__CreateRecurringPaymentsProfileResponseDetailsType.
class ns3__CreateRecurringPaymentsProfileResponseDetailsType;

//  Forward declaration of class ns3__GetRecurringPaymentsProfileDetailsResponseDetailsType.
class ns3__GetRecurringPaymentsProfileDetailsResponseDetailsType;

//  Forward declaration of class ns3__ManageRecurringPaymentsProfileStatusRequestDetailsType.
class ns3__ManageRecurringPaymentsProfileStatusRequestDetailsType;

//  Forward declaration of class ns3__ManageRecurringPaymentsProfileStatusResponseDetailsType.
class ns3__ManageRecurringPaymentsProfileStatusResponseDetailsType;

//  Forward declaration of class ns3__BillOutstandingAmountRequestDetailsType.
class ns3__BillOutstandingAmountRequestDetailsType;

//  Forward declaration of class ns3__BillOutstandingAmountResponseDetailsType.
class ns3__BillOutstandingAmountResponseDetailsType;

//  Forward declaration of class ns3__UpdateRecurringPaymentsProfileRequestDetailsType.
class ns3__UpdateRecurringPaymentsProfileRequestDetailsType;

//  Forward declaration of class ns3__UpdateRecurringPaymentsProfileResponseDetailsType.
class ns3__UpdateRecurringPaymentsProfileResponseDetailsType;

//  Forward declaration of class ns3__RiskFilterDetailsType.
class ns3__RiskFilterDetailsType;

//  Forward declaration of class ns3__RiskFilterListType.
class ns3__RiskFilterListType;

//  Forward declaration of class ns3__FMFDetailsType.
class ns3__FMFDetailsType;

//  Forward declaration of class ns3__EnhancedDataType.
class ns3__EnhancedDataType;

//  Forward declaration of class ns3__AirlineItineraryType.
class ns3__AirlineItineraryType;

//  Forward declaration of class ns3__FlightDetailsType.
class ns3__FlightDetailsType;

//  Forward declaration of class ns3__AuthorizationInfoType.
class ns3__AuthorizationInfoType;

//  Forward declaration of class ns3__OptionTrackingDetailsType.
class ns3__OptionTrackingDetailsType;

//  Forward declaration of class ns3__ItemTrackingDetailsType.
class ns3__ItemTrackingDetailsType;

//  Forward declaration of class ns3__ButtonSearchResultType.
class ns3__ButtonSearchResultType;

//  Forward declaration of class ns3__ReverseTransactionRequestDetailsType.
class ns3__ReverseTransactionRequestDetailsType;

//  Forward declaration of class ns3__ReverseTransactionResponseDetailsType.
class ns3__ReverseTransactionResponseDetailsType;

//  Forward declaration of class ns3__IncentiveInfoType.
class ns3__IncentiveInfoType;

//  Forward declaration of class ns3__IncentiveApplyIndicationType.
class ns3__IncentiveApplyIndicationType;

//  Forward declaration of class ns3__PaymentRequestInfoType.
class ns3__PaymentRequestInfoType;

//  Forward declaration of class ns3__ExternalRememberMeOwnerDetailsType.
class ns3__ExternalRememberMeOwnerDetailsType;

//  Forward declaration of class ns3__ExternalRememberMeOptInDetailsType.
class ns3__ExternalRememberMeOptInDetailsType;

//  Forward declaration of class ns3__FlowControlDetailsType.
class ns3__FlowControlDetailsType;

//  Forward declaration of class ns3__ExternalRememberMeStatusDetailsType.
class ns3__ExternalRememberMeStatusDetailsType;

//  Forward declaration of class ns3__RefreshTokenStatusDetailsType.
class ns3__RefreshTokenStatusDetailsType;

//  Forward declaration of class ns3__DisplayControlDetailsType.
class ns3__DisplayControlDetailsType;

//  Forward declaration of class ns3__ExternalPartnerTrackingDetailsType.
class ns3__ExternalPartnerTrackingDetailsType;

//  Forward declaration of class ns3__MerchantStoreDetailsType.
class ns3__MerchantStoreDetailsType;

//  Forward declaration of class ns3__AdditionalFeeType.
class ns3__AdditionalFeeType;

//  Forward declaration of class ns3__DiscountType.
class ns3__DiscountType;

//  Forward declaration of class ns3__InvoiceItemType.
class ns3__InvoiceItemType;

//  Forward declaration of class ns3__RefundInfoType.
class ns3__RefundInfoType;

//  Forward declaration of class ns3__CoupledBucketsType.
class ns3__CoupledBucketsType;

//  Forward declaration of class ns3__CoupledPaymentInfoType.
class ns3__CoupledPaymentInfoType;

//  Forward declaration of class ns3__TupleType.
class ns3__TupleType;

//  Forward declaration of class ns3__MerchantDataType.
class ns3__MerchantDataType;

//  Forward declaration of class ns3__WalletItemsType.
class ns3__WalletItemsType;

//  Forward declaration of class ns3__DiscountInfoType.
class ns3__DiscountInfoType;

//  Forward declaration of class ns4__EnhancedCheckoutDataType.
class ns4__EnhancedCheckoutDataType;

//  Forward declaration of class ns4__EnhancedPaymentDataType.
class ns4__EnhancedPaymentDataType;

//  Forward declaration of class ns4__EnhancedPaymentInfoType.
class ns4__EnhancedPaymentInfoType;

//  Forward declaration of class ns4__EnhancedItemDataType.
class ns4__EnhancedItemDataType;

//  Forward declaration of class ns4__EnhancedInitiateRecoupRequestDetailsType.
class ns4__EnhancedInitiateRecoupRequestDetailsType;

//  Forward declaration of class ns4__EnhancedCompleteRecoupRequestDetailsType.
class ns4__EnhancedCompleteRecoupRequestDetailsType;

//  Forward declaration of class ns4__EnhancedCompleteRecoupResponseDetailsType.
class ns4__EnhancedCompleteRecoupResponseDetailsType;

//  Forward declaration of class ns4__EnhancedCancelRecoupRequestDetailsType.
class ns4__EnhancedCancelRecoupRequestDetailsType;

//  Forward declaration of class ns4__EnhancedPayerInfoType.
class ns4__EnhancedPayerInfoType;


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   urn:ebay:api:PayPalAPI                                                   *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   urn:ebay:apis:CoreComponentTypes                                         *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   urn:ebay:apis:eBLBaseComponents                                          *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   urn:ebay:apis:EnhancedDataTypes                                          *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   urn:ebay:apis:CoreComponentTypes                                         *
 *                                                                            *
\******************************************************************************/

/// @brief "urn:ebay:apis:CoreComponentTypes":UUIDType is a simpleType restriction of XSD type xs:string.
///
/// <PRE><BLOCKQUOTE>
///   Specifies a universally unique identifier. The UUID can only contain digits from 0-9 and letters from A-F. The UUID must be 32 characters long. For example, 1FB02B2-9D27-3acb-ABA2-9D539C374228
/// </BLOCKQUOTE></PRE>
/// Length of this content is 36.
typedef std::string ns2__UUIDType 36 : 36;


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   urn:ebay:apis:eBLBaseComponents                                          *
 *                                                                            *
\******************************************************************************/

/// @brief "urn:ebay:apis:eBLBaseComponents":AccountStateCodeType is a simpleType restriction of XSD type xs:token.
///
/// <PRE><BLOCKQUOTE>
///   AccountStateCodeType
///   These are the possible codes to describe the state of an account of an eBay user.
/// </BLOCKQUOTE></PRE>
/// @note The enum values are prefixed with "ns3__AccountStateCodeType__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns3__AccountStateCodeType
{
/// <PRE><BLOCKQUOTE>
///   Amex
/// </BLOCKQUOTE></PRE>
	ns3__AccountStateCodeType__Active,	///< xs:token value="Active"
/// <PRE><BLOCKQUOTE>
///   Visa
/// </BLOCKQUOTE></PRE>
	ns3__AccountStateCodeType__Pending,	///< xs:token value="Pending"
/// <PRE><BLOCKQUOTE>
///   Mastercard
/// </BLOCKQUOTE></PRE>
	ns3__AccountStateCodeType__Inactive,	///< xs:token value="Inactive"
/// <PRE><BLOCKQUOTE>
///   Reserved for internal or future use.
/// </BLOCKQUOTE></PRE>
	ns3__AccountStateCodeType__CustomCode,	///< xs:token value="CustomCode"
};

/// @brief "urn:ebay:apis:eBLBaseComponents":AckCodeType is a simpleType restriction of XSD type xs:token.
///
/// <PRE><BLOCKQUOTE>
///   AckCodeType
///   This code identifies the acknowledgement code types that could be used to communicate the status of processing a (request) message to an application. This code would be used as part of a response message that contains an application level acknowledgement element.
/// </BLOCKQUOTE></PRE>
/// @note The enum values are prefixed with "ns3__AckCodeType__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns3__AckCodeType
{
/// <PRE><BLOCKQUOTE>
///   Request processing succeeded.
/// </BLOCKQUOTE></PRE>
	ns3__AckCodeType__Success,	///< xs:token value="Success"
/// <PRE><BLOCKQUOTE>
///   Request processing failed.
/// </BLOCKQUOTE></PRE>
	ns3__AckCodeType__Failure,	///< xs:token value="Failure"
/// <PRE><BLOCKQUOTE>
///   Request processing completed with warning information
///   being included in the response message.
/// </BLOCKQUOTE></PRE>
	ns3__AckCodeType__Warning,	///< xs:token value="Warning"
/// <PRE><BLOCKQUOTE>
///   Request processing completed successful with some
///   with some warning information that could be useful for
///   the requesting application to process and/or record.
/// </BLOCKQUOTE></PRE>
	ns3__AckCodeType__SuccessWithWarning,	///< xs:token value="SuccessWithWarning"
/// <PRE><BLOCKQUOTE>
///   Request processing failed with some error and warnining
///   information that requesting application should process to
///   determine cause(s) of failure.
/// </BLOCKQUOTE></PRE>
	ns3__AckCodeType__FailureWithWarning,	///< xs:token value="FailureWithWarning"
/// <PRE><BLOCKQUOTE>
///   Request processing completed with Partial Success.
/// </BLOCKQUOTE></PRE>
	ns3__AckCodeType__PartialSuccess,	///< xs:token value="PartialSuccess"
/// <PRE><BLOCKQUOTE>
///   Reserved for internal or future use.
/// </BLOCKQUOTE></PRE>
	ns3__AckCodeType__CustomCode,	///< xs:token value="CustomCode"
};

/// @brief "urn:ebay:apis:eBLBaseComponents":AddressOwnerCodeType is a simpleType restriction of XSD type xs:token.
///
/// <PRE><BLOCKQUOTE>
///   AddressOwnerCodeType
///   This code identifies the AddressOwner code types which indicates
///   who owns the user'a address.
/// </BLOCKQUOTE></PRE>
/// @note The enum values are prefixed with "ns3__AddressOwnerCodeType__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns3__AddressOwnerCodeType
{
/// <PRE><BLOCKQUOTE>
///   PayPal owns address.
/// </BLOCKQUOTE></PRE>
	ns3__AddressOwnerCodeType__PayPal,	///< xs:token value="PayPal"
/// <PRE><BLOCKQUOTE>
///   eBay owns address.
/// </BLOCKQUOTE></PRE>
	ns3__AddressOwnerCodeType__eBay,	///< xs:token value="eBay"
/// <PRE><BLOCKQUOTE>
///   Reserved for internal or future use.
/// </BLOCKQUOTE></PRE>
	ns3__AddressOwnerCodeType__CustomCode,	///< xs:token value="CustomCode"
};

/// @brief "urn:ebay:apis:eBLBaseComponents":AuctionTypeCodeType is a simpleType restriction of XSD type xs:token.
///
/// <PRE><BLOCKQUOTE>
///   AuctionTypeCodeType - Type declaration to be used by other schema's. This includes codes indicating the
///   type of auction for the listed item.
/// </BLOCKQUOTE></PRE>
/// @note The enum values are prefixed with "ns3__AuctionTypeCodeType__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns3__AuctionTypeCodeType
{
/// <PRE><BLOCKQUOTE>
///   Unknown auction type
/// </BLOCKQUOTE></PRE>
	ns3__AuctionTypeCodeType__Unknown,	///< xs:token value="Unknown"
/// <PRE><BLOCKQUOTE>
///   Chinese auction
/// </BLOCKQUOTE></PRE>
	ns3__AuctionTypeCodeType__Chinese,	///< xs:token value="Chinese"
/// <PRE><BLOCKQUOTE>
///   Dutch auction
/// </BLOCKQUOTE></PRE>
	ns3__AuctionTypeCodeType__Dutch,	///< xs:token value="Dutch"
/// <PRE><BLOCKQUOTE>
///   Live Auctions-type auction
/// </BLOCKQUOTE></PRE>
	ns3__AuctionTypeCodeType__Live,	///< xs:token value="Live"
/// <PRE><BLOCKQUOTE>
///   Ad type auction
/// </BLOCKQUOTE></PRE>
	ns3__AuctionTypeCodeType__Ad_x0020type,	///< xs:token value="Ad type"
/// <PRE><BLOCKQUOTE>
///   Stores Fixed-price auction (US only)
/// </BLOCKQUOTE></PRE>
	ns3__AuctionTypeCodeType__Stores_x0020Fixed_price,	///< xs:token value="Stores Fixed-price"
/// <PRE><BLOCKQUOTE>
///   Personal Offer auction
/// </BLOCKQUOTE></PRE>
	ns3__AuctionTypeCodeType__Personal_x0020Offer,	///< xs:token value="Personal Offer"
/// <PRE><BLOCKQUOTE>
///   Fixed Price item ("BIN only").
/// </BLOCKQUOTE></PRE>
	ns3__AuctionTypeCodeType__Fixed_x0020Price_x0020Item,	///< xs:token value="Fixed Price Item"
/// <PRE><BLOCKQUOTE>
///   Reserved for internal or future use.
/// </BLOCKQUOTE></PRE>
	ns3__AuctionTypeCodeType__CustomCode,	///< xs:token value="CustomCode"
};

/// @brief "urn:ebay:apis:eBLBaseComponents":BalanceCodeType is a simpleType restriction of XSD type xs:token.
///
/// <PRE><BLOCKQUOTE>
///   BalanceCodeType
///   This code identifies the types of balances in an account, e.g., a PayPal account.
/// </BLOCKQUOTE></PRE>
/// @note The enum values are prefixed with "ns3__BalanceCodeType__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns3__BalanceCodeType
{
/// <PRE><BLOCKQUOTE>
///   Custom Code
/// </BLOCKQUOTE></PRE>
	ns3__BalanceCodeType__Other,	///< xs:token value="Other"
/// <PRE><BLOCKQUOTE>
///   Reserved for internal or future use.
/// </BLOCKQUOTE></PRE>
	ns3__BalanceCodeType__CustomCode,	///< xs:token value="CustomCode"
};

/// @brief "urn:ebay:apis:eBLBaseComponents":BuyerPaymentMethodCodeType is a simpleType restriction of XSD type xs:token.
///
/// <PRE><BLOCKQUOTE>
///   BuyerPaymentMethodCodeType - Type declaration to be used by other schema. The includes the codes for payment methods used by buyers to pay sellers.
/// </BLOCKQUOTE></PRE>
/// @note The enum values are prefixed with "ns3__BuyerPaymentMethodCodeType__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns3__BuyerPaymentMethodCodeType
{
/// <PRE><BLOCKQUOTE>
///   No payment method specified
/// </BLOCKQUOTE></PRE>
	ns3__BuyerPaymentMethodCodeType__None,	///< xs:token value="None"
/// <PRE><BLOCKQUOTE>
///   Money order/cashiers check
/// </BLOCKQUOTE></PRE>
	ns3__BuyerPaymentMethodCodeType__MOCC,	///< xs:token value="MOCC"
/// <PRE><BLOCKQUOTE>
///   American Express
/// </BLOCKQUOTE></PRE>
	ns3__BuyerPaymentMethodCodeType__AmEx,	///< xs:token value="AmEx"
/// <PRE><BLOCKQUOTE>
///   Payment See Description
/// </BLOCKQUOTE></PRE>
	ns3__BuyerPaymentMethodCodeType__PaymentSeeDescription,	///< xs:token value="PaymentSeeDescription"
/// <PRE><BLOCKQUOTE>
///   American Express
/// </BLOCKQUOTE></PRE>
	ns3__BuyerPaymentMethodCodeType__CCAccepted,	///< xs:token value="CCAccepted"
/// <PRE><BLOCKQUOTE>
///   Personal check
/// </BLOCKQUOTE></PRE>
	ns3__BuyerPaymentMethodCodeType__PersonalCheck,	///< xs:token value="PersonalCheck"
/// <PRE><BLOCKQUOTE>
///   COD
/// </BLOCKQUOTE></PRE>
	ns3__BuyerPaymentMethodCodeType__COD,	///< xs:token value="COD"
/// <PRE><BLOCKQUOTE>
///   Visa/Mastercard
/// </BLOCKQUOTE></PRE>
	ns3__BuyerPaymentMethodCodeType__VisaMC,	///< xs:token value="VisaMC"
/// <PRE><BLOCKQUOTE>
///   Other forms of payment.
///   Some custom method is accepted by seller as payment method in the transaction. For Motors vehicle items, this field refers to the Deposit payment method.
/// </BLOCKQUOTE></PRE>
	ns3__BuyerPaymentMethodCodeType__Other,	///< xs:token value="Other"
/// <PRE><BLOCKQUOTE>
///   PayPal
/// </BLOCKQUOTE></PRE>
	ns3__BuyerPaymentMethodCodeType__PayPal,	///< xs:token value="PayPal"
/// <PRE><BLOCKQUOTE>
///   Discover
/// </BLOCKQUOTE></PRE>
	ns3__BuyerPaymentMethodCodeType__Discover,	///< xs:token value="Discover"
/// <PRE><BLOCKQUOTE>
///   Payment on delivery acceptable payment term.
/// </BLOCKQUOTE></PRE>
	ns3__BuyerPaymentMethodCodeType__CashOnPickup,	///< xs:token value="CashOnPickup"
/// <PRE><BLOCKQUOTE>
///   Direct transfer of money acceptable payment term.
/// </BLOCKQUOTE></PRE>
	ns3__BuyerPaymentMethodCodeType__MoneyXferAccepted,	///< xs:token value="MoneyXferAccepted"
/// <PRE><BLOCKQUOTE>
///   If the seller has bank account information on file, and MoneyXferAcceptedinCheckout = true, then the bank account information will be displayed in Checkout. Applicable to German site only.
/// </BLOCKQUOTE></PRE>
	ns3__BuyerPaymentMethodCodeType__MoneyXferAcceptedinCheckout,	///< xs:token value="MoneyXferAcceptedinCheckout"
/// <PRE><BLOCKQUOTE>
///   Online Escrow paid for by seller.
/// </BLOCKQUOTE></PRE>
	ns3__BuyerPaymentMethodCodeType__OtherOnlinePayments,	///< xs:token value="OtherOnlinePayments"
/// <PRE><BLOCKQUOTE>
///   Reserved for internal or future use.
/// </BLOCKQUOTE></PRE>
	ns3__BuyerPaymentMethodCodeType__CustomCode,	///< xs:token value="CustomCode"
};

/// @brief "urn:ebay:apis:eBLBaseComponents":BuyerProtectionCodeType is a simpleType restriction of XSD type xs:token.
///
/// <PRE><BLOCKQUOTE>
///   BuyerProtectionCodeType
/// </BLOCKQUOTE></PRE>
/// @note The enum values are prefixed with "ns3__BuyerProtectionCodeType__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns3__BuyerProtectionCodeType
{
/// <PRE><BLOCKQUOTE>
///   Item is ineligible (e.g., category not applicable).
/// </BLOCKQUOTE></PRE>
	ns3__BuyerProtectionCodeType__ItemIneligible,	///< xs:token value="ItemIneligible"
/// <PRE><BLOCKQUOTE>
///   Item is eligible per standard criteria.
/// </BLOCKQUOTE></PRE>
	ns3__BuyerProtectionCodeType__ItemEligible,	///< xs:token value="ItemEligible"
/// <PRE><BLOCKQUOTE>
///   Item marked ineligible per special criteria (e.g., seller's account closed).
/// </BLOCKQUOTE></PRE>
	ns3__BuyerProtectionCodeType__ItemMarkedIneligible,	///< xs:token value="ItemMarkedIneligible"
/// <PRE><BLOCKQUOTE>
///   Item marked eligible per other criteria.
/// </BLOCKQUOTE></PRE>
	ns3__BuyerProtectionCodeType__ItemMarkedEligible,	///< xs:token value="ItemMarkedEligible"
/// <PRE><BLOCKQUOTE>
///   Reserved for internal or future use.
/// </BLOCKQUOTE></PRE>
	ns3__BuyerProtectionCodeType__CustomCode,	///< xs:token value="CustomCode"
};

/// @brief "urn:ebay:apis:eBLBaseComponents":CheckoutStatusCodeType is a simpleType restriction of XSD type xs:token.
///
/// <PRE><BLOCKQUOTE>
///   CheckoutStatusCodeType
/// </BLOCKQUOTE></PRE>
/// @note The enum values are prefixed with "ns3__CheckoutStatusCodeType__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns3__CheckoutStatusCodeType
{
/// <PRE><BLOCKQUOTE>
///   Checkout complete.
/// </BLOCKQUOTE></PRE>
	ns3__CheckoutStatusCodeType__CheckoutComplete,	///< xs:token value="CheckoutComplete"
/// <PRE><BLOCKQUOTE>
///   Checkout incomplete. No details specified.
/// </BLOCKQUOTE></PRE>
	ns3__CheckoutStatusCodeType__CheckoutIncomplete,	///< xs:token value="CheckoutIncomplete"
/// <PRE><BLOCKQUOTE>
///   Buyer requests total.
/// </BLOCKQUOTE></PRE>
	ns3__CheckoutStatusCodeType__BuyerRequestsTotal,	///< xs:token value="BuyerRequestsTotal"
/// <PRE><BLOCKQUOTE>
///   Seller responded to buyer's request.
/// </BLOCKQUOTE></PRE>
	ns3__CheckoutStatusCodeType__SellerResponded,	///< xs:token value="SellerResponded"
/// <PRE><BLOCKQUOTE>
///   Reserved for internal or future use.
/// </BLOCKQUOTE></PRE>
	ns3__CheckoutStatusCodeType__CustomCode,	///< xs:token value="CustomCode"
};

/// @brief "urn:ebay:apis:eBLBaseComponents":CountryCodeType is a simpleType restriction of XSD type xs:token.
///
/// <PRE><BLOCKQUOTE>
///   CountryCodeType
///   This code list module defines the enumerated types
///   of standard 2-letter ISO 3166 country codes. This codelist
///   contains some additional country code not defined in
///   the ISO 3166 country code set.
/// </BLOCKQUOTE></PRE>
/// @note The enum values are prefixed with "ns3__CountryCodeType__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns3__CountryCodeType
{
	ns3__CountryCodeType__AF,	///< xs:token value="AF"
	ns3__CountryCodeType__AL,	///< xs:token value="AL"
	ns3__CountryCodeType__DZ,	///< xs:token value="DZ"
	ns3__CountryCodeType__AS,	///< xs:token value="AS"
	ns3__CountryCodeType__AD,	///< xs:token value="AD"
	ns3__CountryCodeType__AO,	///< xs:token value="AO"
	ns3__CountryCodeType__AI,	///< xs:token value="AI"
	ns3__CountryCodeType__AQ,	///< xs:token value="AQ"
	ns3__CountryCodeType__AG,	///< xs:token value="AG"
	ns3__CountryCodeType__AR,	///< xs:token value="AR"
	ns3__CountryCodeType__AM,	///< xs:token value="AM"
	ns3__CountryCodeType__AW,	///< xs:token value="AW"
	ns3__CountryCodeType__AU,	///< xs:token value="AU"
	ns3__CountryCodeType__AT,	///< xs:token value="AT"
	ns3__CountryCodeType__AZ,	///< xs:token value="AZ"
	ns3__CountryCodeType__BS,	///< xs:token value="BS"
	ns3__CountryCodeType__BH,	///< xs:token value="BH"
	ns3__CountryCodeType__BD,	///< xs:token value="BD"
	ns3__CountryCodeType__BB,	///< xs:token value="BB"
	ns3__CountryCodeType__BY,	///< xs:token value="BY"
	ns3__CountryCodeType__BE,	///< xs:token value="BE"
	ns3__CountryCodeType__BZ,	///< xs:token value="BZ"
	ns3__CountryCodeType__BJ,	///< xs:token value="BJ"
	ns3__CountryCodeType__BM,	///< xs:token value="BM"
	ns3__CountryCodeType__BT,	///< xs:token value="BT"
	ns3__CountryCodeType__BO,	///< xs:token value="BO"
	ns3__CountryCodeType__BA,	///< xs:token value="BA"
	ns3__CountryCodeType__BW,	///< xs:token value="BW"
	ns3__CountryCodeType__BV,	///< xs:token value="BV"
	ns3__CountryCodeType__BR,	///< xs:token value="BR"
	ns3__CountryCodeType__IO,	///< xs:token value="IO"
	ns3__CountryCodeType__BN,	///< xs:token value="BN"
	ns3__CountryCodeType__BG,	///< xs:token value="BG"
	ns3__CountryCodeType__BF,	///< xs:token value="BF"
	ns3__CountryCodeType__BI,	///< xs:token value="BI"
	ns3__CountryCodeType__KH,	///< xs:token value="KH"
	ns3__CountryCodeType__CM,	///< xs:token value="CM"
	ns3__CountryCodeType__CA,	///< xs:token value="CA"
	ns3__CountryCodeType__CV,	///< xs:token value="CV"
	ns3__CountryCodeType__KY,	///< xs:token value="KY"
	ns3__CountryCodeType__CF,	///< xs:token value="CF"
	ns3__CountryCodeType__TD,	///< xs:token value="TD"
	ns3__CountryCodeType__CL,	///< xs:token value="CL"
	ns3__CountryCodeType__C2,	///< xs:token value="C2"
	ns3__CountryCodeType__CN,	///< xs:token value="CN"
	ns3__CountryCodeType__CX,	///< xs:token value="CX"
	ns3__CountryCodeType__CC,	///< xs:token value="CC"
	ns3__CountryCodeType__CO,	///< xs:token value="CO"
	ns3__CountryCodeType__KM,	///< xs:token value="KM"
	ns3__CountryCodeType__CG,	///< xs:token value="CG"
	ns3__CountryCodeType__CD,	///< xs:token value="CD"
	ns3__CountryCodeType__CK,	///< xs:token value="CK"
	ns3__CountryCodeType__CR,	///< xs:token value="CR"
	ns3__CountryCodeType__CI,	///< xs:token value="CI"
	ns3__CountryCodeType__HR,	///< xs:token value="HR"
	ns3__CountryCodeType__CU,	///< xs:token value="CU"
	ns3__CountryCodeType__CY,	///< xs:token value="CY"
	ns3__CountryCodeType__CZ,	///< xs:token value="CZ"
	ns3__CountryCodeType__DK,	///< xs:token value="DK"
	ns3__CountryCodeType__DJ,	///< xs:token value="DJ"
	ns3__CountryCodeType__DM,	///< xs:token value="DM"
	ns3__CountryCodeType__DO,	///< xs:token value="DO"
	ns3__CountryCodeType__TP,	///< xs:token value="TP"
	ns3__CountryCodeType__EC,	///< xs:token value="EC"
	ns3__CountryCodeType__EG,	///< xs:token value="EG"
	ns3__CountryCodeType__SV,	///< xs:token value="SV"
	ns3__CountryCodeType__GQ,	///< xs:token value="GQ"
	ns3__CountryCodeType__ER,	///< xs:token value="ER"
	ns3__CountryCodeType__EE,	///< xs:token value="EE"
	ns3__CountryCodeType__ET,	///< xs:token value="ET"
	ns3__CountryCodeType__FK,	///< xs:token value="FK"
	ns3__CountryCodeType__FO,	///< xs:token value="FO"
	ns3__CountryCodeType__FJ,	///< xs:token value="FJ"
	ns3__CountryCodeType__FI,	///< xs:token value="FI"
	ns3__CountryCodeType__FR,	///< xs:token value="FR"
	ns3__CountryCodeType__GF,	///< xs:token value="GF"
	ns3__CountryCodeType__PF,	///< xs:token value="PF"
	ns3__CountryCodeType__TF,	///< xs:token value="TF"
	ns3__CountryCodeType__GA,	///< xs:token value="GA"
	ns3__CountryCodeType__GM,	///< xs:token value="GM"
	ns3__CountryCodeType__GE,	///< xs:token value="GE"
	ns3__CountryCodeType__DE,	///< xs:token value="DE"
	ns3__CountryCodeType__GH,	///< xs:token value="GH"
	ns3__CountryCodeType__GI,	///< xs:token value="GI"
	ns3__CountryCodeType__GR,	///< xs:token value="GR"
	ns3__CountryCodeType__GL,	///< xs:token value="GL"
	ns3__CountryCodeType__GD,	///< xs:token value="GD"
	ns3__CountryCodeType__GP,	///< xs:token value="GP"
	ns3__CountryCodeType__GU,	///< xs:token value="GU"
	ns3__CountryCodeType__GT,	///< xs:token value="GT"
	ns3__CountryCodeType__GN,	///< xs:token value="GN"
	ns3__CountryCodeType__GW,	///< xs:token value="GW"
	ns3__CountryCodeType__GY,	///< xs:token value="GY"
	ns3__CountryCodeType__HT,	///< xs:token value="HT"
	ns3__CountryCodeType__HM,	///< xs:token value="HM"
	ns3__CountryCodeType__VA,	///< xs:token value="VA"
	ns3__CountryCodeType__HN,	///< xs:token value="HN"
	ns3__CountryCodeType__HK,	///< xs:token value="HK"
	ns3__CountryCodeType__HU,	///< xs:token value="HU"
	ns3__CountryCodeType__IS,	///< xs:token value="IS"
	ns3__CountryCodeType__IN,	///< xs:token value="IN"
	ns3__CountryCodeType__ID,	///< xs:token value="ID"
	ns3__CountryCodeType__IR,	///< xs:token value="IR"
	ns3__CountryCodeType__IQ,	///< xs:token value="IQ"
	ns3__CountryCodeType__IE,	///< xs:token value="IE"
	ns3__CountryCodeType__IL,	///< xs:token value="IL"
	ns3__CountryCodeType__IT,	///< xs:token value="IT"
	ns3__CountryCodeType__JM,	///< xs:token value="JM"
	ns3__CountryCodeType__JP,	///< xs:token value="JP"
	ns3__CountryCodeType__JO,	///< xs:token value="JO"
	ns3__CountryCodeType__KZ,	///< xs:token value="KZ"
	ns3__CountryCodeType__KE,	///< xs:token value="KE"
	ns3__CountryCodeType__KI,	///< xs:token value="KI"
	ns3__CountryCodeType__KP,	///< xs:token value="KP"
	ns3__CountryCodeType__KR,	///< xs:token value="KR"
	ns3__CountryCodeType__KW,	///< xs:token value="KW"
	ns3__CountryCodeType__KG,	///< xs:token value="KG"
	ns3__CountryCodeType__LA,	///< xs:token value="LA"
	ns3__CountryCodeType__LV,	///< xs:token value="LV"
	ns3__CountryCodeType__LB,	///< xs:token value="LB"
	ns3__CountryCodeType__LS,	///< xs:token value="LS"
	ns3__CountryCodeType__LR,	///< xs:token value="LR"
	ns3__CountryCodeType__LY,	///< xs:token value="LY"
	ns3__CountryCodeType__LI,	///< xs:token value="LI"
	ns3__CountryCodeType__LT,	///< xs:token value="LT"
	ns3__CountryCodeType__LU,	///< xs:token value="LU"
	ns3__CountryCodeType__MO,	///< xs:token value="MO"
	ns3__CountryCodeType__MK,	///< xs:token value="MK"
	ns3__CountryCodeType__MG,	///< xs:token value="MG"
	ns3__CountryCodeType__MW,	///< xs:token value="MW"
	ns3__CountryCodeType__MY,	///< xs:token value="MY"
	ns3__CountryCodeType__MV,	///< xs:token value="MV"
	ns3__CountryCodeType__ML,	///< xs:token value="ML"
	ns3__CountryCodeType__MT,	///< xs:token value="MT"
	ns3__CountryCodeType__MH,	///< xs:token value="MH"
	ns3__CountryCodeType__MQ,	///< xs:token value="MQ"
	ns3__CountryCodeType__MR,	///< xs:token value="MR"
	ns3__CountryCodeType__MU,	///< xs:token value="MU"
	ns3__CountryCodeType__YT,	///< xs:token value="YT"
	ns3__CountryCodeType__MX,	///< xs:token value="MX"
	ns3__CountryCodeType__FM,	///< xs:token value="FM"
	ns3__CountryCodeType__MD,	///< xs:token value="MD"
	ns3__CountryCodeType__MC,	///< xs:token value="MC"
	ns3__CountryCodeType__MN,	///< xs:token value="MN"
	ns3__CountryCodeType__MS,	///< xs:token value="MS"
	ns3__CountryCodeType__MA,	///< xs:token value="MA"
	ns3__CountryCodeType__MZ,	///< xs:token value="MZ"
	ns3__CountryCodeType__MM,	///< xs:token value="MM"
	ns3__CountryCodeType__NA,	///< xs:token value="NA"
	ns3__CountryCodeType__NR,	///< xs:token value="NR"
	ns3__CountryCodeType__NP,	///< xs:token value="NP"
	ns3__CountryCodeType__NL,	///< xs:token value="NL"
	ns3__CountryCodeType__AN,	///< xs:token value="AN"
	ns3__CountryCodeType__NC,	///< xs:token value="NC"
	ns3__CountryCodeType__NZ,	///< xs:token value="NZ"
	ns3__CountryCodeType__NI,	///< xs:token value="NI"
	ns3__CountryCodeType__NE,	///< xs:token value="NE"
	ns3__CountryCodeType__NG,	///< xs:token value="NG"
	ns3__CountryCodeType__NU,	///< xs:token value="NU"
	ns3__CountryCodeType__NF,	///< xs:token value="NF"
	ns3__CountryCodeType__MP,	///< xs:token value="MP"
	ns3__CountryCodeType__NO,	///< xs:token value="NO"
	ns3__CountryCodeType__OM,	///< xs:token value="OM"
	ns3__CountryCodeType__PK,	///< xs:token value="PK"
	ns3__CountryCodeType__PW,	///< xs:token value="PW"
	ns3__CountryCodeType__PS,	///< xs:token value="PS"
	ns3__CountryCodeType__PA,	///< xs:token value="PA"
	ns3__CountryCodeType__PG,	///< xs:token value="PG"
	ns3__CountryCodeType__PY,	///< xs:token value="PY"
	ns3__CountryCodeType__PE,	///< xs:token value="PE"
	ns3__CountryCodeType__PH,	///< xs:token value="PH"
	ns3__CountryCodeType__PN,	///< xs:token value="PN"
	ns3__CountryCodeType__PL,	///< xs:token value="PL"
	ns3__CountryCodeType__PT,	///< xs:token value="PT"
	ns3__CountryCodeType__PR,	///< xs:token value="PR"
	ns3__CountryCodeType__QA,	///< xs:token value="QA"
	ns3__CountryCodeType__RE,	///< xs:token value="RE"
	ns3__CountryCodeType__RO,	///< xs:token value="RO"
	ns3__CountryCodeType__RU,	///< xs:token value="RU"
	ns3__CountryCodeType__RW,	///< xs:token value="RW"
	ns3__CountryCodeType__SH,	///< xs:token value="SH"
	ns3__CountryCodeType__KN,	///< xs:token value="KN"
	ns3__CountryCodeType__LC,	///< xs:token value="LC"
	ns3__CountryCodeType__PM,	///< xs:token value="PM"
	ns3__CountryCodeType__VC,	///< xs:token value="VC"
	ns3__CountryCodeType__WS,	///< xs:token value="WS"
	ns3__CountryCodeType__SM,	///< xs:token value="SM"
	ns3__CountryCodeType__ST,	///< xs:token value="ST"
	ns3__CountryCodeType__SA,	///< xs:token value="SA"
	ns3__CountryCodeType__SN,	///< xs:token value="SN"
	ns3__CountryCodeType__SC,	///< xs:token value="SC"
	ns3__CountryCodeType__SL,	///< xs:token value="SL"
	ns3__CountryCodeType__SG,	///< xs:token value="SG"
	ns3__CountryCodeType__SK,	///< xs:token value="SK"
	ns3__CountryCodeType__SI,	///< xs:token value="SI"
	ns3__CountryCodeType__SB,	///< xs:token value="SB"
	ns3__CountryCodeType__SO,	///< xs:token value="SO"
	ns3__CountryCodeType__ZA,	///< xs:token value="ZA"
	ns3__CountryCodeType__GS,	///< xs:token value="GS"
	ns3__CountryCodeType__ES,	///< xs:token value="ES"
	ns3__CountryCodeType__LK,	///< xs:token value="LK"
	ns3__CountryCodeType__SD,	///< xs:token value="SD"
	ns3__CountryCodeType__SR,	///< xs:token value="SR"
	ns3__CountryCodeType__SJ,	///< xs:token value="SJ"
	ns3__CountryCodeType__SZ,	///< xs:token value="SZ"
	ns3__CountryCodeType__SE,	///< xs:token value="SE"
	ns3__CountryCodeType__CH,	///< xs:token value="CH"
	ns3__CountryCodeType__SY,	///< xs:token value="SY"
	ns3__CountryCodeType__TW,	///< xs:token value="TW"
	ns3__CountryCodeType__TJ,	///< xs:token value="TJ"
	ns3__CountryCodeType__TZ,	///< xs:token value="TZ"
	ns3__CountryCodeType__TH,	///< xs:token value="TH"
	ns3__CountryCodeType__TG,	///< xs:token value="TG"
	ns3__CountryCodeType__TK,	///< xs:token value="TK"
	ns3__CountryCodeType__TO,	///< xs:token value="TO"
	ns3__CountryCodeType__TT,	///< xs:token value="TT"
	ns3__CountryCodeType__TN,	///< xs:token value="TN"
	ns3__CountryCodeType__TR,	///< xs:token value="TR"
	ns3__CountryCodeType__TM,	///< xs:token value="TM"
	ns3__CountryCodeType__TC,	///< xs:token value="TC"
	ns3__CountryCodeType__TV,	///< xs:token value="TV"
	ns3__CountryCodeType__UG,	///< xs:token value="UG"
	ns3__CountryCodeType__UA,	///< xs:token value="UA"
	ns3__CountryCodeType__AE,	///< xs:token value="AE"
	ns3__CountryCodeType__GB,	///< xs:token value="GB"
	ns3__CountryCodeType__US,	///< xs:token value="US"
	ns3__CountryCodeType__UM,	///< xs:token value="UM"
	ns3__CountryCodeType__UY,	///< xs:token value="UY"
	ns3__CountryCodeType__UZ,	///< xs:token value="UZ"
	ns3__CountryCodeType__VU,	///< xs:token value="VU"
	ns3__CountryCodeType__VE,	///< xs:token value="VE"
	ns3__CountryCodeType__VN,	///< xs:token value="VN"
	ns3__CountryCodeType__VG,	///< xs:token value="VG"
	ns3__CountryCodeType__VI,	///< xs:token value="VI"
	ns3__CountryCodeType__WF,	///< xs:token value="WF"
	ns3__CountryCodeType__EH,	///< xs:token value="EH"
	ns3__CountryCodeType__YE,	///< xs:token value="YE"
	ns3__CountryCodeType__YU,	///< xs:token value="YU"
	ns3__CountryCodeType__ZM,	///< xs:token value="ZM"
	ns3__CountryCodeType__ZW,	///< xs:token value="ZW"
/// <PRE><BLOCKQUOTE>
///   NOTE: APO/FPO was defined in eBay list previously but they are not defined in ISO 3166. This country will remain on eBay country code list for backward compatibility.
/// </BLOCKQUOTE></PRE>
	ns3__CountryCodeType__AA,	///< xs:token value="AA"
/// <PRE><BLOCKQUOTE>
///   NOTE: Guernsey was defined in eBay list previously but they are not defined in ISO 3166. This country will remain on eBay country list for backward compatibility.
/// </BLOCKQUOTE></PRE>
	ns3__CountryCodeType__QM,	///< xs:token value="QM"
/// <PRE><BLOCKQUOTE>
///   NOTE: Jan Mayen was defined in eBay list previously but they are not defined in ISO 3166. This country will remain on eBay country list for backward compatibility.
/// </BLOCKQUOTE></PRE>
	ns3__CountryCodeType__QN,	///< xs:token value="QN"
/// <PRE><BLOCKQUOTE>
///   NOTE: Jersey was defined in eBay list previously but they are not defined in ISO 3166. This country will remain on eBay country list for backward compatibility.
/// </BLOCKQUOTE></PRE>
	ns3__CountryCodeType__QO,	///< xs:token value="QO"
/// <PRE><BLOCKQUOTE>
///   NOTE: Tahiti was defined in eBay list previously but they are not defined in ISO 3166. This country will remain on eBay country list for backward compatibility.
/// </BLOCKQUOTE></PRE>
	ns3__CountryCodeType__QP,	///< xs:token value="QP"
/// <PRE><BLOCKQUOTE>
///   NOTE: Serbia and Montenegro was not defined in the list previously
///   but now an ISO 3166 code has been defined. As of 41.0 this
///   country is supported in PayPal PRO.
/// </BLOCKQUOTE></PRE>
	ns3__CountryCodeType__CS,	///< xs:token value="CS"
/// <PRE><BLOCKQUOTE>
///   Reserved for internal or future use.
/// </BLOCKQUOTE></PRE>
	ns3__CountryCodeType__CustomCode,	///< xs:token value="CustomCode"
	ns3__CountryCodeType__GG,	///< xs:token value="GG"
	ns3__CountryCodeType__IM,	///< xs:token value="IM"
	ns3__CountryCodeType__JE,	///< xs:token value="JE"
	ns3__CountryCodeType__TL,	///< xs:token value="TL"
/// <PRE><BLOCKQUOTE>
///   Republic of Serbia.
/// </BLOCKQUOTE></PRE>
	ns3__CountryCodeType__RS,	///< xs:token value="RS"
/// <PRE><BLOCKQUOTE>
///   Montenegro.
/// </BLOCKQUOTE></PRE>
	ns3__CountryCodeType__ME,	///< xs:token value="ME"
};

/// @brief "urn:ebay:apis:eBLBaseComponents":CurrencyCodeType is a simpleType restriction of XSD type xs:token.
///
/// <PRE><BLOCKQUOTE>
///   ISO 4217 standard 3-letter currency code. <br/>
///   <br/>
///   The following currencies are supported by PayPal.
///   <table>
///   <th>Code</th>
///   <th>Currency<th/>Maximum Transaction Amount</th>
///   <tr>
///   <td>AUD</td>
///   <td>Australian Dollar </td>
///   <td>12,500 AUD</td>
///   </tr>
///   <tr>
///   <td>CAD</td>
///   <td>Canadian Dollar<td/>12,500 CAD</td>
///   </tr>
///   <tr>
///   <td>EUR</td>
///   <td>Euro</td>
///   <td> 8,000 EUR</td>
///   </tr>
///   <tr>
///   <td>GBP</td>
///   <td>Pound Sterling</td>
///   <td> 5,500 GBP</td>
///   </tr>
///   <tr>
///   <td>JPY</td>
///   <td>Japanese Yen</td>
///   <td>1,000,000 JPY</td>
///   </tr>
///   <tr>
///   <td>USD</td>
///   <td> U.S. Dollar</td>
///   <td>10,000 USD</td>
///   </tr>
///   <tr>
///   <td>CHF</td>
///   <td> Czech Koruna</td>
///   <td>70,000 CHF</td>
///   </tr>
///   <tr>
///   <td>SEK</td>
///   <td> Swedish Krona</td>
///   <td>3,50,000 SEK</td>
///   </tr>
///   <tr>
///   <td>NOK</td>
///   <td> Norwegian Krone</td>
///   <td>4,00,000 NOK</td>
///   </tr>
///   <tr>
///   <td>DKK</td>
///   <td> Danish Krone</td>
///   <td>3,00,000 DKK</td>
///   </tr>
///   <tr>
///   <td>PLN</td>
///   <td> Poland Zloty</td>
///   <td>1,60,000 PLN</td>
///   </tr>
///   <tr>
///   <td>HUF</td>
///   <td> Hungary Forint</td>
///   <td>110,00,000 HUF</td>
///   </tr>
///   <tr>
///   <td>SGD</td>
///   <td> Singapore Dollar</td>
///   <td>80,000 SGD</td>
///   </tr>
///   <tr>
///   <td>HKD</td>
///   <td> HongKong Dollar</td>
///   <td>3,80,000 HKD</td>
///   </tr>
///   <tr>
///   <td>NZD</td>
///   <td> New Zealand Dollar</td>
///   <td>77,000 NZD</td>
///   </tr>
///   <tr>
///   <td>CZK</td>
///   <td> Czech Koruna</td>
///   <td>1,20,000 CZK</td>
///   </tr>
///   </table>
/// </BLOCKQUOTE></PRE>
/// @note The enum values are prefixed with "ns3__CurrencyCodeType__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns3__CurrencyCodeType
{
	ns3__CurrencyCodeType__AFA,	///< xs:token value="AFA"
	ns3__CurrencyCodeType__ALL,	///< xs:token value="ALL"
	ns3__CurrencyCodeType__DZD,	///< xs:token value="DZD"
	ns3__CurrencyCodeType__ADP,	///< xs:token value="ADP"
	ns3__CurrencyCodeType__AOA,	///< xs:token value="AOA"
	ns3__CurrencyCodeType__ARS,	///< xs:token value="ARS"
	ns3__CurrencyCodeType__AMD,	///< xs:token value="AMD"
	ns3__CurrencyCodeType__AWG,	///< xs:token value="AWG"
	ns3__CurrencyCodeType__AZM,	///< xs:token value="AZM"
	ns3__CurrencyCodeType__BSD,	///< xs:token value="BSD"
	ns3__CurrencyCodeType__BHD,	///< xs:token value="BHD"
	ns3__CurrencyCodeType__BDT,	///< xs:token value="BDT"
	ns3__CurrencyCodeType__BBD,	///< xs:token value="BBD"
	ns3__CurrencyCodeType__BYR,	///< xs:token value="BYR"
	ns3__CurrencyCodeType__BZD,	///< xs:token value="BZD"
	ns3__CurrencyCodeType__BMD,	///< xs:token value="BMD"
	ns3__CurrencyCodeType__BTN,	///< xs:token value="BTN"
	ns3__CurrencyCodeType__INR,	///< xs:token value="INR"
	ns3__CurrencyCodeType__BOV,	///< xs:token value="BOV"
	ns3__CurrencyCodeType__BOB,	///< xs:token value="BOB"
	ns3__CurrencyCodeType__BAM,	///< xs:token value="BAM"
	ns3__CurrencyCodeType__BWP,	///< xs:token value="BWP"
	ns3__CurrencyCodeType__BRL,	///< xs:token value="BRL"
	ns3__CurrencyCodeType__BND,	///< xs:token value="BND"
	ns3__CurrencyCodeType__BGL,	///< xs:token value="BGL"
	ns3__CurrencyCodeType__BGN,	///< xs:token value="BGN"
	ns3__CurrencyCodeType__BIF,	///< xs:token value="BIF"
	ns3__CurrencyCodeType__KHR,	///< xs:token value="KHR"
	ns3__CurrencyCodeType__CAD,	///< xs:token value="CAD"
	ns3__CurrencyCodeType__CVE,	///< xs:token value="CVE"
	ns3__CurrencyCodeType__KYD,	///< xs:token value="KYD"
	ns3__CurrencyCodeType__XAF,	///< xs:token value="XAF"
	ns3__CurrencyCodeType__CLF,	///< xs:token value="CLF"
	ns3__CurrencyCodeType__CLP,	///< xs:token value="CLP"
	ns3__CurrencyCodeType__CNY,	///< xs:token value="CNY"
	ns3__CurrencyCodeType__COP,	///< xs:token value="COP"
	ns3__CurrencyCodeType__KMF,	///< xs:token value="KMF"
	ns3__CurrencyCodeType__CDF,	///< xs:token value="CDF"
	ns3__CurrencyCodeType__CRC,	///< xs:token value="CRC"
	ns3__CurrencyCodeType__HRK,	///< xs:token value="HRK"
	ns3__CurrencyCodeType__CUP,	///< xs:token value="CUP"
	ns3__CurrencyCodeType__CYP,	///< xs:token value="CYP"
	ns3__CurrencyCodeType__CZK,	///< xs:token value="CZK"
	ns3__CurrencyCodeType__DKK,	///< xs:token value="DKK"
	ns3__CurrencyCodeType__DJF,	///< xs:token value="DJF"
	ns3__CurrencyCodeType__DOP,	///< xs:token value="DOP"
	ns3__CurrencyCodeType__TPE,	///< xs:token value="TPE"
	ns3__CurrencyCodeType__ECV,	///< xs:token value="ECV"
	ns3__CurrencyCodeType__ECS,	///< xs:token value="ECS"
	ns3__CurrencyCodeType__EGP,	///< xs:token value="EGP"
	ns3__CurrencyCodeType__SVC,	///< xs:token value="SVC"
	ns3__CurrencyCodeType__ERN,	///< xs:token value="ERN"
	ns3__CurrencyCodeType__EEK,	///< xs:token value="EEK"
	ns3__CurrencyCodeType__ETB,	///< xs:token value="ETB"
	ns3__CurrencyCodeType__FKP,	///< xs:token value="FKP"
	ns3__CurrencyCodeType__FJD,	///< xs:token value="FJD"
	ns3__CurrencyCodeType__GMD,	///< xs:token value="GMD"
	ns3__CurrencyCodeType__GEL,	///< xs:token value="GEL"
	ns3__CurrencyCodeType__GHC,	///< xs:token value="GHC"
	ns3__CurrencyCodeType__GIP,	///< xs:token value="GIP"
	ns3__CurrencyCodeType__GTQ,	///< xs:token value="GTQ"
	ns3__CurrencyCodeType__GNF,	///< xs:token value="GNF"
	ns3__CurrencyCodeType__GWP,	///< xs:token value="GWP"
	ns3__CurrencyCodeType__GYD,	///< xs:token value="GYD"
	ns3__CurrencyCodeType__HTG,	///< xs:token value="HTG"
	ns3__CurrencyCodeType__HNL,	///< xs:token value="HNL"
	ns3__CurrencyCodeType__HKD,	///< xs:token value="HKD"
	ns3__CurrencyCodeType__HUF,	///< xs:token value="HUF"
	ns3__CurrencyCodeType__ISK,	///< xs:token value="ISK"
	ns3__CurrencyCodeType__IDR,	///< xs:token value="IDR"
	ns3__CurrencyCodeType__IRR,	///< xs:token value="IRR"
	ns3__CurrencyCodeType__IQD,	///< xs:token value="IQD"
	ns3__CurrencyCodeType__ILS,	///< xs:token value="ILS"
	ns3__CurrencyCodeType__JMD,	///< xs:token value="JMD"
	ns3__CurrencyCodeType__JPY,	///< xs:token value="JPY"
	ns3__CurrencyCodeType__JOD,	///< xs:token value="JOD"
	ns3__CurrencyCodeType__KZT,	///< xs:token value="KZT"
	ns3__CurrencyCodeType__KES,	///< xs:token value="KES"
	ns3__CurrencyCodeType__AUD,	///< xs:token value="AUD"
	ns3__CurrencyCodeType__KPW,	///< xs:token value="KPW"
	ns3__CurrencyCodeType__KRW,	///< xs:token value="KRW"
	ns3__CurrencyCodeType__KWD,	///< xs:token value="KWD"
	ns3__CurrencyCodeType__KGS,	///< xs:token value="KGS"
	ns3__CurrencyCodeType__LAK,	///< xs:token value="LAK"
	ns3__CurrencyCodeType__LVL,	///< xs:token value="LVL"
	ns3__CurrencyCodeType__LBP,	///< xs:token value="LBP"
	ns3__CurrencyCodeType__LSL,	///< xs:token value="LSL"
	ns3__CurrencyCodeType__LRD,	///< xs:token value="LRD"
	ns3__CurrencyCodeType__LYD,	///< xs:token value="LYD"
	ns3__CurrencyCodeType__CHF,	///< xs:token value="CHF"
	ns3__CurrencyCodeType__LTL,	///< xs:token value="LTL"
	ns3__CurrencyCodeType__MOP,	///< xs:token value="MOP"
	ns3__CurrencyCodeType__MKD,	///< xs:token value="MKD"
	ns3__CurrencyCodeType__MGF,	///< xs:token value="MGF"
	ns3__CurrencyCodeType__MWK,	///< xs:token value="MWK"
	ns3__CurrencyCodeType__MYR,	///< xs:token value="MYR"
	ns3__CurrencyCodeType__MVR,	///< xs:token value="MVR"
	ns3__CurrencyCodeType__MTL,	///< xs:token value="MTL"
	ns3__CurrencyCodeType__EUR,	///< xs:token value="EUR"
	ns3__CurrencyCodeType__MRO,	///< xs:token value="MRO"
	ns3__CurrencyCodeType__MUR,	///< xs:token value="MUR"
	ns3__CurrencyCodeType__MXN,	///< xs:token value="MXN"
	ns3__CurrencyCodeType__MXV,	///< xs:token value="MXV"
	ns3__CurrencyCodeType__MDL,	///< xs:token value="MDL"
	ns3__CurrencyCodeType__MNT,	///< xs:token value="MNT"
	ns3__CurrencyCodeType__XCD,	///< xs:token value="XCD"
	ns3__CurrencyCodeType__MZM,	///< xs:token value="MZM"
	ns3__CurrencyCodeType__MMK,	///< xs:token value="MMK"
	ns3__CurrencyCodeType__ZAR,	///< xs:token value="ZAR"
	ns3__CurrencyCodeType__NAD,	///< xs:token value="NAD"
	ns3__CurrencyCodeType__NPR,	///< xs:token value="NPR"
	ns3__CurrencyCodeType__ANG,	///< xs:token value="ANG"
	ns3__CurrencyCodeType__XPF,	///< xs:token value="XPF"
	ns3__CurrencyCodeType__NZD,	///< xs:token value="NZD"
	ns3__CurrencyCodeType__NIO,	///< xs:token value="NIO"
	ns3__CurrencyCodeType__NGN,	///< xs:token value="NGN"
	ns3__CurrencyCodeType__NOK,	///< xs:token value="NOK"
	ns3__CurrencyCodeType__OMR,	///< xs:token value="OMR"
	ns3__CurrencyCodeType__PKR,	///< xs:token value="PKR"
	ns3__CurrencyCodeType__PAB,	///< xs:token value="PAB"
	ns3__CurrencyCodeType__PGK,	///< xs:token value="PGK"
	ns3__CurrencyCodeType__PYG,	///< xs:token value="PYG"
	ns3__CurrencyCodeType__PEN,	///< xs:token value="PEN"
	ns3__CurrencyCodeType__PHP,	///< xs:token value="PHP"
	ns3__CurrencyCodeType__PLN,	///< xs:token value="PLN"
	ns3__CurrencyCodeType__USD,	///< xs:token value="USD"
	ns3__CurrencyCodeType__QAR,	///< xs:token value="QAR"
	ns3__CurrencyCodeType__ROL,	///< xs:token value="ROL"
	ns3__CurrencyCodeType__RUB,	///< xs:token value="RUB"
	ns3__CurrencyCodeType__RUR,	///< xs:token value="RUR"
	ns3__CurrencyCodeType__RWF,	///< xs:token value="RWF"
	ns3__CurrencyCodeType__SHP,	///< xs:token value="SHP"
	ns3__CurrencyCodeType__WST,	///< xs:token value="WST"
	ns3__CurrencyCodeType__STD,	///< xs:token value="STD"
	ns3__CurrencyCodeType__SAR,	///< xs:token value="SAR"
	ns3__CurrencyCodeType__SCR,	///< xs:token value="SCR"
	ns3__CurrencyCodeType__SLL,	///< xs:token value="SLL"
	ns3__CurrencyCodeType__SGD,	///< xs:token value="SGD"
	ns3__CurrencyCodeType__SKK,	///< xs:token value="SKK"
	ns3__CurrencyCodeType__SIT,	///< xs:token value="SIT"
	ns3__CurrencyCodeType__SBD,	///< xs:token value="SBD"
	ns3__CurrencyCodeType__SOS,	///< xs:token value="SOS"
	ns3__CurrencyCodeType__LKR,	///< xs:token value="LKR"
	ns3__CurrencyCodeType__SDD,	///< xs:token value="SDD"
	ns3__CurrencyCodeType__SRG,	///< xs:token value="SRG"
	ns3__CurrencyCodeType__SZL,	///< xs:token value="SZL"
	ns3__CurrencyCodeType__SEK,	///< xs:token value="SEK"
	ns3__CurrencyCodeType__SYP,	///< xs:token value="SYP"
	ns3__CurrencyCodeType__TWD,	///< xs:token value="TWD"
	ns3__CurrencyCodeType__TJS,	///< xs:token value="TJS"
	ns3__CurrencyCodeType__TZS,	///< xs:token value="TZS"
	ns3__CurrencyCodeType__THB,	///< xs:token value="THB"
	ns3__CurrencyCodeType__XOF,	///< xs:token value="XOF"
	ns3__CurrencyCodeType__TOP,	///< xs:token value="TOP"
	ns3__CurrencyCodeType__TTD,	///< xs:token value="TTD"
	ns3__CurrencyCodeType__TND,	///< xs:token value="TND"
	ns3__CurrencyCodeType__TRY,	///< xs:token value="TRY"
	ns3__CurrencyCodeType__TMM,	///< xs:token value="TMM"
	ns3__CurrencyCodeType__UGX,	///< xs:token value="UGX"
	ns3__CurrencyCodeType__UAH,	///< xs:token value="UAH"
	ns3__CurrencyCodeType__AED,	///< xs:token value="AED"
	ns3__CurrencyCodeType__GBP,	///< xs:token value="GBP"
	ns3__CurrencyCodeType__USS,	///< xs:token value="USS"
	ns3__CurrencyCodeType__USN,	///< xs:token value="USN"
	ns3__CurrencyCodeType__UYU,	///< xs:token value="UYU"
	ns3__CurrencyCodeType__UZS,	///< xs:token value="UZS"
	ns3__CurrencyCodeType__VUV,	///< xs:token value="VUV"
	ns3__CurrencyCodeType__VEB,	///< xs:token value="VEB"
	ns3__CurrencyCodeType__VND,	///< xs:token value="VND"
	ns3__CurrencyCodeType__MAD,	///< xs:token value="MAD"
	ns3__CurrencyCodeType__YER,	///< xs:token value="YER"
	ns3__CurrencyCodeType__YUM,	///< xs:token value="YUM"
	ns3__CurrencyCodeType__ZMK,	///< xs:token value="ZMK"
	ns3__CurrencyCodeType__ZWD,	///< xs:token value="ZWD"
/// <PRE><BLOCKQUOTE>
///   Reserved for internal or future use.
/// </BLOCKQUOTE></PRE>
	ns3__CurrencyCodeType__CustomCode,	///< xs:token value="CustomCode"
};

/// @brief "urn:ebay:apis:eBLBaseComponents":DepositTypeCodeType is a simpleType restriction of XSD type xs:token.
///
/// <PRE><BLOCKQUOTE>
///   DepositTypeCodeType - Type declaration to be used by other schema's.
///   This code identifies the DepositType codes used to specify deposit
///   types for Motors items. If the ietm listed is not a Motors item, then always
///   return DepositType value to be "None".
/// </BLOCKQUOTE></PRE>
/// @note The enum values are prefixed with "ns3__DepositTypeCodeType__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns3__DepositTypeCodeType
{
/// <PRE><BLOCKQUOTE>
///   None
/// </BLOCKQUOTE></PRE>
	ns3__DepositTypeCodeType__None,	///< xs:token value="None"
/// <PRE><BLOCKQUOTE>
///   Other Method
/// </BLOCKQUOTE></PRE>
	ns3__DepositTypeCodeType__OtherMethod,	///< xs:token value="OtherMethod"
/// <PRE><BLOCKQUOTE>
///   Fast Deposit.
/// </BLOCKQUOTE></PRE>
	ns3__DepositTypeCodeType__FastDeposit,	///< xs:token value="FastDeposit"
/// <PRE><BLOCKQUOTE>
///   Reserved for internal or future use.
/// </BLOCKQUOTE></PRE>
	ns3__DepositTypeCodeType__CustomCode,	///< xs:token value="CustomCode"
};

/// @brief "urn:ebay:apis:eBLBaseComponents":DetailLevelCodeType is a simpleType restriction of XSD type xs:token.
///
/// <PRE><BLOCKQUOTE>
///   DetailLevelCodeType
/// </BLOCKQUOTE></PRE>
/// @note The enum values are prefixed with "ns3__DetailLevelCodeType__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns3__DetailLevelCodeType
{
/// <PRE><BLOCKQUOTE>
///   Return in response message all detail levels.
/// </BLOCKQUOTE></PRE>
	ns3__DetailLevelCodeType__ReturnAll,	///< xs:token value="ReturnAll"
/// <PRE><BLOCKQUOTE>
///   Return item description.
/// </BLOCKQUOTE></PRE>
	ns3__DetailLevelCodeType__ItemReturnDescription,	///< xs:token value="ItemReturnDescription"
/// <PRE><BLOCKQUOTE>
///   Return attributes as part of the item.
/// </BLOCKQUOTE></PRE>
	ns3__DetailLevelCodeType__ItemReturnAttributes,	///< xs:token value="ItemReturnAttributes"
};

/// @brief "urn:ebay:apis:eBLBaseComponents":IncentiveSiteAppliedOnType is a simpleType restriction of XSD type xs:token.
///
/// <PRE><BLOCKQUOTE>
///   This defines if the incentive is applied on Ebay or PayPal.
/// </BLOCKQUOTE></PRE>
/// @note The enum values are prefixed with "ns3__IncentiveSiteAppliedOnType__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns3__IncentiveSiteAppliedOnType
{
	ns3__IncentiveSiteAppliedOnType__INCENTIVE_SITE_APPLIED_ON_UNKNOWN,	///< xs:token value="INCENTIVE-SITE-APPLIED-ON-UNKNOWN"
	ns3__IncentiveSiteAppliedOnType__INCENTIVE_SITE_APPLIED_ON_MERCHANT,	///< xs:token value="INCENTIVE-SITE-APPLIED-ON-MERCHANT"
	ns3__IncentiveSiteAppliedOnType__INCENTIVE_SITE_APPLIED_ON_PAYPAL,	///< xs:token value="INCENTIVE-SITE-APPLIED-ON-PAYPAL"
};

/// @brief "urn:ebay:apis:eBLBaseComponents":IncentiveAppliedStatusType is a simpleType restriction of XSD type xs:token.
///
/// <PRE><BLOCKQUOTE>
///   This defines if the incentive is applied successfully or not.
/// </BLOCKQUOTE></PRE>
/// @note The enum values are prefixed with "ns3__IncentiveAppliedStatusType__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns3__IncentiveAppliedStatusType
{
	ns3__IncentiveAppliedStatusType__INCENTIVE_APPLIED_STATUS_SUCCESS,	///< xs:token value="INCENTIVE-APPLIED-STATUS-SUCCESS"
	ns3__IncentiveAppliedStatusType__INCENTIVE_APPLIED_STATUS_ERROR,	///< xs:token value="INCENTIVE-APPLIED-STATUS-ERROR"
};

/// @brief "urn:ebay:apis:eBLBaseComponents":ItemIDType is a simpleType restriction of XSD type xs:string.
///
/// <PRE><BLOCKQUOTE>
///   Represents the unique identifier for an item. To be used to specify the
///   elements that represents an ItemID.
/// </BLOCKQUOTE></PRE>
typedef std::string ns3__ItemIDType;

/// @brief "urn:ebay:apis:eBLBaseComponents":PaymentReasonType is a simpleType restriction of XSD type xs:token.
///
/// <PRE><BLOCKQUOTE>
///   PaymentReasonType
///   This is the Payment Reason type (used by DoRT and SetEC for Refund of PI transaction, eBay return shipment, external dispute)
/// </BLOCKQUOTE></PRE>
/// @note The enum values are prefixed with "ns3__PaymentReasonType__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns3__PaymentReasonType
{
	ns3__PaymentReasonType__None,	///< xs:token value="None"
	ns3__PaymentReasonType__Refund,	///< xs:token value="Refund"
/// <PRE><BLOCKQUOTE>
///   Identifies a BA flow for return shipment
/// </BLOCKQUOTE></PRE>
	ns3__PaymentReasonType__ReturnShipment,	///< xs:token value="ReturnShipment"
};

/// @brief "urn:ebay:apis:eBLBaseComponents":UserIDType is a simpleType restriction of XSD type xs:string.
///
/// Length of this content is 0 to 127.
typedef std::string ns3__UserIDType : 127;

/// @brief "urn:ebay:apis:eBLBaseComponents":EscrowCodeType is a simpleType restriction of XSD type xs:token.
///
/// <PRE><BLOCKQUOTE>
///   EscrowCodeType
///   These are the possible codes to describe Escrow options.
/// </BLOCKQUOTE></PRE>
/// @note The enum values are prefixed with "ns3__EscrowCodeType__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns3__EscrowCodeType
{
/// <PRE><BLOCKQUOTE>
///   By Buyer
/// </BLOCKQUOTE></PRE>
	ns3__EscrowCodeType__ByBuyer,	///< xs:token value="ByBuyer"
/// <PRE><BLOCKQUOTE>
///   By Seller.
/// </BLOCKQUOTE></PRE>
	ns3__EscrowCodeType__BySeller,	///< xs:token value="BySeller"
/// <PRE><BLOCKQUOTE>
///   None.
/// </BLOCKQUOTE></PRE>
	ns3__EscrowCodeType__None,	///< xs:token value="None"
/// <PRE><BLOCKQUOTE>
///   Reserved for internal or future use.
/// </BLOCKQUOTE></PRE>
	ns3__EscrowCodeType__CustomCode,	///< xs:token value="CustomCode"
};

/// @brief "urn:ebay:apis:eBLBaseComponents":FeedbackRatingStarCodeType is a simpleType restriction of XSD type xs:token.
///
/// <PRE><BLOCKQUOTE>
///   FeedbackRatingStarCodeType
/// </BLOCKQUOTE></PRE>
/// @note The enum values are prefixed with "ns3__FeedbackRatingStarCodeType__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns3__FeedbackRatingStarCodeType
{
/// <PRE><BLOCKQUOTE>
///   No graphic displayed
/// </BLOCKQUOTE></PRE>
	ns3__FeedbackRatingStarCodeType__None,	///< xs:token value="None"
/// <PRE><BLOCKQUOTE>
///   Yellow Star
/// </BLOCKQUOTE></PRE>
	ns3__FeedbackRatingStarCodeType__Yellow,	///< xs:token value="Yellow"
/// <PRE><BLOCKQUOTE>
///   Turquoise Star
/// </BLOCKQUOTE></PRE>
	ns3__FeedbackRatingStarCodeType__Turquoise,	///< xs:token value="Turquoise"
/// <PRE><BLOCKQUOTE>
///   Purple Star
/// </BLOCKQUOTE></PRE>
	ns3__FeedbackRatingStarCodeType__Purple,	///< xs:token value="Purple"
/// <PRE><BLOCKQUOTE>
///   Red Star
/// </BLOCKQUOTE></PRE>
	ns3__FeedbackRatingStarCodeType__Red,	///< xs:token value="Red"
/// <PRE><BLOCKQUOTE>
///   Green Star
/// </BLOCKQUOTE></PRE>
	ns3__FeedbackRatingStarCodeType__Green,	///< xs:token value="Green"
/// <PRE><BLOCKQUOTE>
///   Yellow Shooting Star
/// </BLOCKQUOTE></PRE>
	ns3__FeedbackRatingStarCodeType__YellowShooting,	///< xs:token value="YellowShooting"
/// <PRE><BLOCKQUOTE>
///   Turquoise Shooting Star
/// </BLOCKQUOTE></PRE>
	ns3__FeedbackRatingStarCodeType__TurquoiseShooting,	///< xs:token value="TurquoiseShooting"
/// <PRE><BLOCKQUOTE>
///   Purple Shooting Star
/// </BLOCKQUOTE></PRE>
	ns3__FeedbackRatingStarCodeType__PurpleShooting,	///< xs:token value="PurpleShooting"
/// <PRE><BLOCKQUOTE>
///   Red Shooting Star
/// </BLOCKQUOTE></PRE>
	ns3__FeedbackRatingStarCodeType__RedShooting,	///< xs:token value="RedShooting"
/// <PRE><BLOCKQUOTE>
///   Blue Star
/// </BLOCKQUOTE></PRE>
	ns3__FeedbackRatingStarCodeType__Blue,	///< xs:token value="Blue"
/// <PRE><BLOCKQUOTE>
///   Reserved for internal or future use.
/// </BLOCKQUOTE></PRE>
	ns3__FeedbackRatingStarCodeType__CustomCode,	///< xs:token value="CustomCode"
};

/// @brief "urn:ebay:apis:eBLBaseComponents":GalleryTypeCodeType is a simpleType restriction of XSD type xs:token.
///
/// <PRE><BLOCKQUOTE>
///   GalleryTypeCodeType
///   Specifies the codes for various properties of an item.
/// </BLOCKQUOTE></PRE>
/// @note The enum values are prefixed with "ns3__GalleryTypeCodeType__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns3__GalleryTypeCodeType
{
/// <PRE><BLOCKQUOTE>
///   Indicates whether it is a featured item.
/// </BLOCKQUOTE></PRE>
	ns3__GalleryTypeCodeType__Featured,	///< xs:token value="Featured"
/// <PRE><BLOCKQUOTE>
///   Include in the gallery.
/// </BLOCKQUOTE></PRE>
	ns3__GalleryTypeCodeType__Gallery,	///< xs:token value="Gallery"
/// <PRE><BLOCKQUOTE>
///   Reserved for internal or future use.
/// </BLOCKQUOTE></PRE>
	ns3__GalleryTypeCodeType__CustomCode,	///< xs:token value="CustomCode"
};

/// @brief "urn:ebay:apis:eBLBaseComponents":GeneralPaymentMethodCodeType is a simpleType restriction of XSD type xs:token.
///
/// <PRE><BLOCKQUOTE>
///   GeneralPaymentMethodCodeType - Type declaration to be used by other schema. This code identifies the general types of payment means, e.g., used by payment service provider applications.
/// </BLOCKQUOTE></PRE>
/// @note The enum values are prefixed with "ns3__GeneralPaymentMethodCodeType__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns3__GeneralPaymentMethodCodeType
{
/// <PRE><BLOCKQUOTE>
///   Custom Code
/// </BLOCKQUOTE></PRE>
	ns3__GeneralPaymentMethodCodeType__Other,	///< xs:token value="Other"
/// <PRE><BLOCKQUOTE>
///   Electronic check.
/// </BLOCKQUOTE></PRE>
	ns3__GeneralPaymentMethodCodeType__Echeck,	///< xs:token value="Echeck"
/// <PRE><BLOCKQUOTE>
///   ACH.
/// </BLOCKQUOTE></PRE>
	ns3__GeneralPaymentMethodCodeType__ACH,	///< xs:token value="ACH"
/// <PRE><BLOCKQUOTE>
///   Credit-card.
/// </BLOCKQUOTE></PRE>
	ns3__GeneralPaymentMethodCodeType__Creditcard,	///< xs:token value="Creditcard"
/// <PRE><BLOCKQUOTE>
///   Pay balance.
/// </BLOCKQUOTE></PRE>
	ns3__GeneralPaymentMethodCodeType__PayPalBalance,	///< xs:token value="PayPalBalance"
/// <PRE><BLOCKQUOTE>
///   Reserved for internal or future use.
/// </BLOCKQUOTE></PRE>
	ns3__GeneralPaymentMethodCodeType__CustomCode,	///< xs:token value="CustomCode"
};

/// @brief "urn:ebay:apis:eBLBaseComponents":GiftServicesCodeType is a simpleType restriction of XSD type xs:token.
///
/// <PRE><BLOCKQUOTE>
///   GiftServicesCodeType - Type declaration to be used by other schema's.
///   Specifies the codes for the various Gift Services offered by sellers. If any of the Gift Services are offered by the seller, the generic gift icon should be used to display the item:
///   http://pics.ebay.com/aw/pics/gift/gift.gif
/// </BLOCKQUOTE></PRE>
/// @note The enum values are prefixed with "ns3__GiftServicesCodeType__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns3__GiftServicesCodeType
{
/// <PRE><BLOCKQUOTE>
///   indicates that the seller is offering to ship the item via an express shipping method as described in the item description.
/// </BLOCKQUOTE></PRE>
	ns3__GiftServicesCodeType__GiftExpressShipping,	///< xs:token value="GiftExpressShipping"
/// <PRE><BLOCKQUOTE>
///   indicates that the seller is offering to ship to the gift recipient, not the buyer, when payment clears.
/// </BLOCKQUOTE></PRE>
	ns3__GiftServicesCodeType__GiftShipToRecipient,	///< xs:token value="GiftShipToRecipient"
/// <PRE><BLOCKQUOTE>
///   indicates that the seller is offering to wrap the item (and optionally include a card) as described in the item description.
/// </BLOCKQUOTE></PRE>
	ns3__GiftServicesCodeType__GiftWrap,	///< xs:token value="GiftWrap"
/// <PRE><BLOCKQUOTE>
///   Reserved for internal or future use.
/// </BLOCKQUOTE></PRE>
	ns3__GiftServicesCodeType__CustomCode,	///< xs:token value="CustomCode"
};

/// @brief "urn:ebay:apis:eBLBaseComponents":HitCounterCodeType is a simpleType restriction of XSD type xs:token.
///
/// <PRE><BLOCKQUOTE>
///   HitCounterCodeType
///   This code identifies the HitCounter codes used to specify whether a hit counter is used for the item's listing page and, if so, what type.
/// </BLOCKQUOTE></PRE>
/// @note The enum values are prefixed with "ns3__HitCounterCodeType__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns3__HitCounterCodeType
{
/// <PRE><BLOCKQUOTE>
///   No hit counter
/// </BLOCKQUOTE></PRE>
	ns3__HitCounterCodeType__NoHitCounter,	///< xs:token value="NoHitCounter"
/// <PRE><BLOCKQUOTE>
///   Honesty Style Hit Counter
/// </BLOCKQUOTE></PRE>
	ns3__HitCounterCodeType__HonestyStyle,	///< xs:token value="HonestyStyle"
/// <PRE><BLOCKQUOTE>
///   Green LED counter.
/// </BLOCKQUOTE></PRE>
	ns3__HitCounterCodeType__GreenLED,	///< xs:token value="GreenLED"
/// <PRE><BLOCKQUOTE>
///   Hidden counter.
/// </BLOCKQUOTE></PRE>
	ns3__HitCounterCodeType__Hidden,	///< xs:token value="Hidden"
/// <PRE><BLOCKQUOTE>
///   Reserved for internal or future use.
/// </BLOCKQUOTE></PRE>
	ns3__HitCounterCodeType__CustomCode,	///< xs:token value="CustomCode"
};

/// @brief "urn:ebay:apis:eBLBaseComponents":InsuranceOptionCodeType is a simpleType restriction of XSD type xs:token.
///
/// <PRE><BLOCKQUOTE>
///   InsuranceOptionCodeType
///   These are the possible codes to describe insurance option as part of shipping
///   service.
/// </BLOCKQUOTE></PRE>
/// @note The enum values are prefixed with "ns3__InsuranceOptionCodeType__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns3__InsuranceOptionCodeType
{
/// <PRE><BLOCKQUOTE>
///   Insurance optional.
/// </BLOCKQUOTE></PRE>
	ns3__InsuranceOptionCodeType__Optional,	///< xs:token value="Optional"
/// <PRE><BLOCKQUOTE>
///   Insurance required.
/// </BLOCKQUOTE></PRE>
	ns3__InsuranceOptionCodeType__Required,	///< xs:token value="Required"
/// <PRE><BLOCKQUOTE>
///   Insurance not offered.
/// </BLOCKQUOTE></PRE>
	ns3__InsuranceOptionCodeType__NotOffered,	///< xs:token value="NotOffered"
/// <PRE><BLOCKQUOTE>
///   Insurance included in Shipping and Handling costs.
/// </BLOCKQUOTE></PRE>
	ns3__InsuranceOptionCodeType__IncludedInShippingHandling,	///< xs:token value="IncludedInShippingHandling"
/// <PRE><BLOCKQUOTE>
///   Reserved for internal or future use.
/// </BLOCKQUOTE></PRE>
	ns3__InsuranceOptionCodeType__CustomCode,	///< xs:token value="CustomCode"
};

/// @brief "urn:ebay:apis:eBLBaseComponents":ListingDurationCodeType is a simpleType restriction of XSD type xs:token.
///
/// <PRE><BLOCKQUOTE>
///   ListingDurationCodeType
///   These are the possible codes to describe the number of days the auction will be active. Must be one of the values 3, 5, 7, or 10 for auction and basic Fixed-Price (Type 9) listings. Must be 30, 60, 90, 120, or GTC for Stores Fixed-Price (Type 7) listings. Specify GTC for the Good 'Til Cancel feature (eBay Stores items only).
/// </BLOCKQUOTE></PRE>
/// @note The enum values are prefixed with "ns3__ListingDurationCodeType__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns3__ListingDurationCodeType
{
/// <PRE><BLOCKQUOTE>
///   1 Day
/// </BLOCKQUOTE></PRE>
	ns3__ListingDurationCodeType__Days_USCORE1,	///< xs:token value="Days_1"
/// <PRE><BLOCKQUOTE>
///   3 Days
/// </BLOCKQUOTE></PRE>
	ns3__ListingDurationCodeType__Days_USCORE3,	///< xs:token value="Days_3"
/// <PRE><BLOCKQUOTE>
///   5 Days
/// </BLOCKQUOTE></PRE>
	ns3__ListingDurationCodeType__Days_USCORE5,	///< xs:token value="Days_5"
/// <PRE><BLOCKQUOTE>
///   7 Days
/// </BLOCKQUOTE></PRE>
	ns3__ListingDurationCodeType__Days_USCORE7,	///< xs:token value="Days_7"
/// <PRE><BLOCKQUOTE>
///   10 Days
/// </BLOCKQUOTE></PRE>
	ns3__ListingDurationCodeType__Days_USCORE10,	///< xs:token value="Days_10"
/// <PRE><BLOCKQUOTE>
///   30 Days
/// </BLOCKQUOTE></PRE>
	ns3__ListingDurationCodeType__Days_USCORE30,	///< xs:token value="Days_30"
/// <PRE><BLOCKQUOTE>
///   60 Days
/// </BLOCKQUOTE></PRE>
	ns3__ListingDurationCodeType__Days_USCORE60,	///< xs:token value="Days_60"
/// <PRE><BLOCKQUOTE>
///   90 Days
/// </BLOCKQUOTE></PRE>
	ns3__ListingDurationCodeType__Days_USCORE90,	///< xs:token value="Days_90"
/// <PRE><BLOCKQUOTE>
///   120 Days
/// </BLOCKQUOTE></PRE>
	ns3__ListingDurationCodeType__Days_USCORE120,	///< xs:token value="Days_120"
/// <PRE><BLOCKQUOTE>
///   GTC
/// </BLOCKQUOTE></PRE>
	ns3__ListingDurationCodeType__GTC,	///< xs:token value="GTC"
/// <PRE><BLOCKQUOTE>
///   Reserved for internal or future use.
/// </BLOCKQUOTE></PRE>
	ns3__ListingDurationCodeType__CustomCode,	///< xs:token value="CustomCode"
};

/// @brief "urn:ebay:apis:eBLBaseComponents":ListingEnhancementsCodeType is a simpleType restriction of XSD type xs:token.
///
/// <PRE><BLOCKQUOTE>
///   ListingEnhancementsCodeType
///   Specifies the codes for various properties of an item.
/// </BLOCKQUOTE></PRE>
/// @note The enum values are prefixed with "ns3__ListingEnhancementsCodeType__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns3__ListingEnhancementsCodeType
{
/// <PRE><BLOCKQUOTE>
///   Indicates whether an item will be displayed with a border that will go around the item (e.g., for category-based search result page or store search that brings up multiple items) to differentiate it from the rest of list.
/// </BLOCKQUOTE></PRE>
	ns3__ListingEnhancementsCodeType__Border,	///< xs:token value="Border"
/// <PRE><BLOCKQUOTE>
///   Indicates whether the bolding option was used.
/// </BLOCKQUOTE></PRE>
	ns3__ListingEnhancementsCodeType__BoldTitle,	///< xs:token value="BoldTitle"
/// <PRE><BLOCKQUOTE>
///   Indicates whether it is a featured item.
/// </BLOCKQUOTE></PRE>
	ns3__ListingEnhancementsCodeType__Featured,	///< xs:token value="Featured"
/// <PRE><BLOCKQUOTE>
///   Indicates item's listing is highlighted.
/// </BLOCKQUOTE></PRE>
	ns3__ListingEnhancementsCodeType__Highlight,	///< xs:token value="Highlight"
/// <PRE><BLOCKQUOTE>
///   Indicates item's listing is home page featured.
/// </BLOCKQUOTE></PRE>
	ns3__ListingEnhancementsCodeType__HomePageFeatured,	///< xs:token value="HomePageFeatured"
/// <PRE><BLOCKQUOTE>
///   Reserved for internal or future use.
/// </BLOCKQUOTE></PRE>
	ns3__ListingEnhancementsCodeType__CustomCode,	///< xs:token value="CustomCode"
};

/// @brief "urn:ebay:apis:eBLBaseComponents":ListingTypeCodeType is a simpleType restriction of XSD type xs:token.
///
/// <PRE><BLOCKQUOTE>
///   ListingTypeCodeType - Type declaration to be used by other schema. This includes codes indicating the
///   type of auction for the listed item.
/// </BLOCKQUOTE></PRE>
/// @note The enum values are prefixed with "ns3__ListingTypeCodeType__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns3__ListingTypeCodeType
{
/// <PRE><BLOCKQUOTE>
///   Unknown Listing Type
/// </BLOCKQUOTE></PRE>
	ns3__ListingTypeCodeType__Unknown,	///< xs:token value="Unknown"
/// <PRE><BLOCKQUOTE>
///   Chinese auction
/// </BLOCKQUOTE></PRE>
	ns3__ListingTypeCodeType__Chinese,	///< xs:token value="Chinese"
/// <PRE><BLOCKQUOTE>
///   Dutch auction
/// </BLOCKQUOTE></PRE>
	ns3__ListingTypeCodeType__Dutch,	///< xs:token value="Dutch"
/// <PRE><BLOCKQUOTE>
///   Live Auctions-type auction
/// </BLOCKQUOTE></PRE>
	ns3__ListingTypeCodeType__Live,	///< xs:token value="Live"
/// <PRE><BLOCKQUOTE>
///   Ad type auction
/// </BLOCKQUOTE></PRE>
	ns3__ListingTypeCodeType__AdType,	///< xs:token value="AdType"
/// <PRE><BLOCKQUOTE>
///   Stores Fixed-price auction (US only)
/// </BLOCKQUOTE></PRE>
	ns3__ListingTypeCodeType__StoresFixedPrice,	///< xs:token value="StoresFixedPrice"
/// <PRE><BLOCKQUOTE>
///   Personal Offer auction
/// </BLOCKQUOTE></PRE>
	ns3__ListingTypeCodeType__PersonalOffer,	///< xs:token value="PersonalOffer"
/// <PRE><BLOCKQUOTE>
///   Fixed Price item ("BIN only").
/// </BLOCKQUOTE></PRE>
	ns3__ListingTypeCodeType__FixedPriceItem,	///< xs:token value="FixedPriceItem"
/// <PRE><BLOCKQUOTE>
///   Reserved for internal or future use.
/// </BLOCKQUOTE></PRE>
	ns3__ListingTypeCodeType__CustomCode,	///< xs:token value="CustomCode"
};

/// @brief "urn:ebay:apis:eBLBaseComponents":MerchandizingPrefCodeType is a simpleType restriction of XSD type xs:token.
///
/// <PRE><BLOCKQUOTE>
///   MerchandizingPrefCodeType
/// </BLOCKQUOTE></PRE>
/// @note The enum values are prefixed with "ns3__MerchandizingPrefCodeType__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns3__MerchandizingPrefCodeType
{
/// <PRE><BLOCKQUOTE>
///   OptIn
/// </BLOCKQUOTE></PRE>
	ns3__MerchandizingPrefCodeType__OptIn,	///< xs:token value="OptIn"
/// <PRE><BLOCKQUOTE>
///   OptOut
/// </BLOCKQUOTE></PRE>
	ns3__MerchandizingPrefCodeType__OptOut,	///< xs:token value="OptOut"
/// <PRE><BLOCKQUOTE>
///   Reserved for internal or future use.
/// </BLOCKQUOTE></PRE>
	ns3__MerchandizingPrefCodeType__CustomCode,	///< xs:token value="CustomCode"
};

/// @brief "urn:ebay:apis:eBLBaseComponents":ModifyCodeType is a simpleType restriction of XSD type xs:token.
///
/// <PRE><BLOCKQUOTE>
///   ModifyCodeType
///   This code identifies the types of modification you can make on an object.
///   account.
/// </BLOCKQUOTE></PRE>
/// @note The enum values are prefixed with "ns3__ModifyCodeType__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns3__ModifyCodeType
{
/// <PRE><BLOCKQUOTE>
///   Indicate filed is to be dropped.
/// </BLOCKQUOTE></PRE>
	ns3__ModifyCodeType__Dropped,	///< xs:token value="Dropped"
/// <PRE><BLOCKQUOTE>
///   Indicate filed is to be modified.
/// </BLOCKQUOTE></PRE>
	ns3__ModifyCodeType__Modify,	///< xs:token value="Modify"
/// <PRE><BLOCKQUOTE>
///   Reserved for internal or future use.
/// </BLOCKQUOTE></PRE>
	ns3__ModifyCodeType__CustomCode,	///< xs:token value="CustomCode"
};

/// @brief "urn:ebay:apis:eBLBaseComponents":PhotoDisplayCodeType is a simpleType restriction of XSD type xs:token.
///
/// <PRE><BLOCKQUOTE>
///   PhotoDisplayCodeType
///   These are types of display for photos used for PhotoHosting slide show.
/// </BLOCKQUOTE></PRE>
/// @note The enum values are prefixed with "ns3__PhotoDisplayCodeType__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns3__PhotoDisplayCodeType
{
/// <PRE><BLOCKQUOTE>
///   No special Picture Services features.
/// </BLOCKQUOTE></PRE>
	ns3__PhotoDisplayCodeType__None,	///< xs:token value="None"
/// <PRE><BLOCKQUOTE>
///   Slideshow of multiple pictures.
/// </BLOCKQUOTE></PRE>
	ns3__PhotoDisplayCodeType__SlideShow,	///< xs:token value="SlideShow"
/// <PRE><BLOCKQUOTE>
///   Super-size format picture.
/// </BLOCKQUOTE></PRE>
	ns3__PhotoDisplayCodeType__SuperSize,	///< xs:token value="SuperSize"
/// <PRE><BLOCKQUOTE>
///   Picture Pack.
/// </BLOCKQUOTE></PRE>
	ns3__PhotoDisplayCodeType__PicturePack,	///< xs:token value="PicturePack"
/// <PRE><BLOCKQUOTE>
///   Reserved for internal or future use.
/// </BLOCKQUOTE></PRE>
	ns3__PhotoDisplayCodeType__CustomCode,	///< xs:token value="CustomCode"
};

/// @brief "urn:ebay:apis:eBLBaseComponents":PromotionItemPriceTypeCodeType is a simpleType restriction of XSD type xs:token.
///
/// <PRE><BLOCKQUOTE>
///   Cross Promotion Method.
/// </BLOCKQUOTE></PRE>
/// @note The enum values are prefixed with "ns3__PromotionItemPriceTypeCodeType__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns3__PromotionItemPriceTypeCodeType
{
/// <PRE><BLOCKQUOTE>
///   Auction Item
/// </BLOCKQUOTE></PRE>
	ns3__PromotionItemPriceTypeCodeType__AuctionPrice,	///< xs:token value="AuctionPrice"
/// <PRE><BLOCKQUOTE>
///   Buy It Now
/// </BLOCKQUOTE></PRE>
	ns3__PromotionItemPriceTypeCodeType__BuyItNowPrice,	///< xs:token value="BuyItNowPrice"
/// <PRE><BLOCKQUOTE>
///   Reserved. Do not use.
/// </BLOCKQUOTE></PRE>
	ns3__PromotionItemPriceTypeCodeType__CustomCode,	///< xs:token value="CustomCode"
};

/// @brief "urn:ebay:apis:eBLBaseComponents":PromotionItemSelectionCodeType is a simpleType restriction of XSD type xs:token.
///
/// <PRE><BLOCKQUOTE>
///   Cross Promotion Method.
/// </BLOCKQUOTE></PRE>
/// @note The enum values are prefixed with "ns3__PromotionItemSelectionCodeType__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns3__PromotionItemSelectionCodeType
{
/// <PRE><BLOCKQUOTE>
///   Manual Selection
/// </BLOCKQUOTE></PRE>
	ns3__PromotionItemSelectionCodeType__Manual,	///< xs:token value="Manual"
/// <PRE><BLOCKQUOTE>
///   Automatic Selection
/// </BLOCKQUOTE></PRE>
	ns3__PromotionItemSelectionCodeType__Automatic,	///< xs:token value="Automatic"
/// <PRE><BLOCKQUOTE>
///   Reserved. Do not use.
/// </BLOCKQUOTE></PRE>
	ns3__PromotionItemSelectionCodeType__CustomCode,	///< xs:token value="CustomCode"
};

/// @brief "urn:ebay:apis:eBLBaseComponents":PromotionMethodCodeType is a simpleType restriction of XSD type xs:token.
///
/// <PRE><BLOCKQUOTE>
///   Cross Promotion Method.
/// </BLOCKQUOTE></PRE>
/// @note The enum values are prefixed with "ns3__PromotionMethodCodeType__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns3__PromotionMethodCodeType
{
/// <PRE><BLOCKQUOTE>
///   Cross Sell
/// </BLOCKQUOTE></PRE>
	ns3__PromotionMethodCodeType__CrossSell,	///< xs:token value="CrossSell"
/// <PRE><BLOCKQUOTE>
///   Up Sell
/// </BLOCKQUOTE></PRE>
	ns3__PromotionMethodCodeType__UpSell,	///< xs:token value="UpSell"
/// <PRE><BLOCKQUOTE>
///   Reserved. Do not use.
/// </BLOCKQUOTE></PRE>
	ns3__PromotionMethodCodeType__CustomCode,	///< xs:token value="CustomCode"
};

/// @brief "urn:ebay:apis:eBLBaseComponents":PromotionSchemeCodeType is a simpleType restriction of XSD type xs:token.
///
/// <PRE><BLOCKQUOTE>
///   Cross Promotion Context Promotion Scheme.
/// </BLOCKQUOTE></PRE>
/// @note The enum values are prefixed with "ns3__PromotionSchemeCodeType__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns3__PromotionSchemeCodeType
{
/// <PRE><BLOCKQUOTE>
///   Item to Item Promotional Scheme
/// </BLOCKQUOTE></PRE>
	ns3__PromotionSchemeCodeType__ItemToItem,	///< xs:token value="ItemToItem"
/// <PRE><BLOCKQUOTE>
///   Item to Item Store Scheme
/// </BLOCKQUOTE></PRE>
	ns3__PromotionSchemeCodeType__ItemToStoreCat,	///< xs:token value="ItemToStoreCat"
/// <PRE><BLOCKQUOTE>
///   Store to Store Scheme
/// </BLOCKQUOTE></PRE>
	ns3__PromotionSchemeCodeType__StoreToStoreCat,	///< xs:token value="StoreToStoreCat"
/// <PRE><BLOCKQUOTE>
///   Reserved. Do not use.
/// </BLOCKQUOTE></PRE>
	ns3__PromotionSchemeCodeType__CustomCode,	///< xs:token value="CustomCode"
};

/// @brief "urn:ebay:apis:eBLBaseComponents":PurchasePurposeTypeCodeType is a simpleType restriction of XSD type xs:token.
///
/// <PRE><BLOCKQUOTE>
///   PurchasePurposeTypeCodeType - Type declaration to be used by other schema. This code identifies the purpose of purchases, e.g., by a PayPal application.
/// </BLOCKQUOTE></PRE>
/// @note The enum values are prefixed with "ns3__PurchasePurposeTypeCodeType__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns3__PurchasePurposeTypeCodeType
{
/// <PRE><BLOCKQUOTE>
///   Custom Code
/// </BLOCKQUOTE></PRE>
	ns3__PurchasePurposeTypeCodeType__Other,	///< xs:token value="Other"

/// </BLOCKQUOTE></PRE>
	ns3__PurchasePurposeTypeCodeType__BuyNowItem,	///< xs:token value="BuyNowItem"

/// </BLOCKQUOTE></PRE>
	ns3__PurchasePurposeTypeCodeType__ShoppingCart,	///< xs:token value="ShoppingCart"

/// </BLOCKQUOTE></PRE>
	ns3__PurchasePurposeTypeCodeType__AuctionItem,	///< xs:token value="AuctionItem"

/// </BLOCKQUOTE></PRE>
	ns3__PurchasePurposeTypeCodeType__GiftCertificates,	///< xs:token value="GiftCertificates"

/// </BLOCKQUOTE></PRE>
	ns3__PurchasePurposeTypeCodeType__Subscription,	///< xs:token value="Subscription"

/// </BLOCKQUOTE></PRE>
	ns3__PurchasePurposeTypeCodeType__Donation,	///< xs:token value="Donation"

/// </BLOCKQUOTE></PRE>
	ns3__PurchasePurposeTypeCodeType__eBayBilling,	///< xs:token value="eBayBilling"
/// <PRE><BLOCKQUOTE>
///   Reserved for internal or future use.
/// </BLOCKQUOTE></PRE>
	ns3__PurchasePurposeTypeCodeType__CustomCode,	///< xs:token value="CustomCode"
};

/// @brief "urn:ebay:apis:eBLBaseComponents":SellerLevelCodeType is a simpleType restriction of XSD type xs:token.
///
/// <PRE><BLOCKQUOTE>
///   SellerLevelCodeType
/// </BLOCKQUOTE></PRE>
/// @note The enum values are prefixed with "ns3__SellerLevelCodeType__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns3__SellerLevelCodeType
{
/// <PRE><BLOCKQUOTE>
///   Bronze
/// </BLOCKQUOTE></PRE>
	ns3__SellerLevelCodeType__Bronze,	///< xs:token value="Bronze"
/// <PRE><BLOCKQUOTE>
///   Silver
/// </BLOCKQUOTE></PRE>
	ns3__SellerLevelCodeType__Silver,	///< xs:token value="Silver"
/// <PRE><BLOCKQUOTE>
///   Gold
/// </BLOCKQUOTE></PRE>
	ns3__SellerLevelCodeType__Gold,	///< xs:token value="Gold"
/// <PRE><BLOCKQUOTE>
///   Platinum
/// </BLOCKQUOTE></PRE>
	ns3__SellerLevelCodeType__Platinum,	///< xs:token value="Platinum"
/// <PRE><BLOCKQUOTE>
///   Titanium
/// </BLOCKQUOTE></PRE>
	ns3__SellerLevelCodeType__Titanium,	///< xs:token value="Titanium"
/// <PRE><BLOCKQUOTE>
///   None
/// </BLOCKQUOTE></PRE>
	ns3__SellerLevelCodeType__None,	///< xs:token value="None"
/// <PRE><BLOCKQUOTE>
///   Reserved for internal or future use.
/// </BLOCKQUOTE></PRE>
	ns3__SellerLevelCodeType__CustomCode,	///< xs:token value="CustomCode"
};

/// @brief "urn:ebay:apis:eBLBaseComponents":SellerPaymentMethodCodeType is a simpleType restriction of XSD type xs:token.
///
/// <PRE><BLOCKQUOTE>
///   SellerPaymentMethodCodeType
///   These are payment methods that sellers can use to pay eBay.
/// </BLOCKQUOTE></PRE>
/// @note The enum values are prefixed with "ns3__SellerPaymentMethodCodeType__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns3__SellerPaymentMethodCodeType
{
/// <PRE><BLOCKQUOTE>
///   No payment method specified - some other payment method.
/// </BLOCKQUOTE></PRE>
	ns3__SellerPaymentMethodCodeType__Other,	///< xs:token value="Other"
/// <PRE><BLOCKQUOTE>
///   Amex
/// </BLOCKQUOTE></PRE>
	ns3__SellerPaymentMethodCodeType__Amex,	///< xs:token value="Amex"
/// <PRE><BLOCKQUOTE>
///   Visa
/// </BLOCKQUOTE></PRE>
	ns3__SellerPaymentMethodCodeType__Visa,	///< xs:token value="Visa"
/// <PRE><BLOCKQUOTE>
///   Mastercard
/// </BLOCKQUOTE></PRE>
	ns3__SellerPaymentMethodCodeType__Mastercard,	///< xs:token value="Mastercard"
/// <PRE><BLOCKQUOTE>
///   Discover
/// </BLOCKQUOTE></PRE>
	ns3__SellerPaymentMethodCodeType__Discover,	///< xs:token value="Discover"
/// <PRE><BLOCKQUOTE>
///   JCB
/// </BLOCKQUOTE></PRE>
	ns3__SellerPaymentMethodCodeType__JCB,	///< xs:token value="JCB"
/// <PRE><BLOCKQUOTE>
///   Diners
/// </BLOCKQUOTE></PRE>
	ns3__SellerPaymentMethodCodeType__Diners,	///< xs:token value="Diners"
/// <PRE><BLOCKQUOTE>
///   Reserved for internal or future use.
/// </BLOCKQUOTE></PRE>
	ns3__SellerPaymentMethodCodeType__CustomCode,	///< xs:token value="CustomCode"
};

/// @brief "urn:ebay:apis:eBLBaseComponents":SeverityCodeType is a simpleType restriction of XSD type xs:token.
///
/// <PRE><BLOCKQUOTE>
///   SeverityCodeType
///   This code identifies the Severity code types in terms of whether
///   there is an API-level error or warning that needs to be communicated
///   to the client.
/// </BLOCKQUOTE></PRE>
/// @note The enum values are prefixed with "ns3__SeverityCodeType__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns3__SeverityCodeType
{
/// <PRE><BLOCKQUOTE>
///   Warning or informational error.
/// </BLOCKQUOTE></PRE>
	ns3__SeverityCodeType__Warning,	///< xs:token value="Warning"
/// <PRE><BLOCKQUOTE>
///   Application-level error.
/// </BLOCKQUOTE></PRE>
	ns3__SeverityCodeType__Error,	///< xs:token value="Error"
/// <PRE><BLOCKQUOTE>
///   Partial Success.
/// </BLOCKQUOTE></PRE>
	ns3__SeverityCodeType__PartialSuccess,	///< xs:token value="PartialSuccess"
/// <PRE><BLOCKQUOTE>
///   Reserved for internal or future use.
/// </BLOCKQUOTE></PRE>
	ns3__SeverityCodeType__CustomCode,	///< xs:token value="CustomCode"
};

/// @brief "urn:ebay:apis:eBLBaseComponents":ShippingOptionCodeType is a simpleType restriction of XSD type xs:token.
///
/// <PRE><BLOCKQUOTE>
///   ShippingOptionCodeType
///   These are the possible codes to describe shipping options in terms
///   of where the seller is willing to ship the item.
/// </BLOCKQUOTE></PRE>
/// @note The enum values are prefixed with "ns3__ShippingOptionCodeType__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns3__ShippingOptionCodeType
{
/// <PRE><BLOCKQUOTE>
///   Site only.
/// </BLOCKQUOTE></PRE>
	ns3__ShippingOptionCodeType__SiteOnly,	///< xs:token value="SiteOnly"
/// <PRE><BLOCKQUOTE>
///   WorldWide.
/// </BLOCKQUOTE></PRE>
	ns3__ShippingOptionCodeType__WorldWide,	///< xs:token value="WorldWide"
/// <PRE><BLOCKQUOTE>
///   SitePlusRegions.
/// </BLOCKQUOTE></PRE>
	ns3__ShippingOptionCodeType__SitePlusRegions,	///< xs:token value="SitePlusRegions"
/// <PRE><BLOCKQUOTE>
///   WillNotShip.
/// </BLOCKQUOTE></PRE>
	ns3__ShippingOptionCodeType__WillNotShip,	///< xs:token value="WillNotShip"
/// <PRE><BLOCKQUOTE>
///   Reserved for internal or future use.
/// </BLOCKQUOTE></PRE>
	ns3__ShippingOptionCodeType__CustomCode,	///< xs:token value="CustomCode"
};

/// @brief "urn:ebay:apis:eBLBaseComponents":ShippingPackageCodeType is a simpleType restriction of XSD type xs:token.
///
/// <PRE><BLOCKQUOTE>
///   ShippingPackageCodeType
///   These are the possible codes to describe shipping package options.
/// </BLOCKQUOTE></PRE>
/// @note The enum values are prefixed with "ns3__ShippingPackageCodeType__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns3__ShippingPackageCodeType
{
/// <PRE><BLOCKQUOTE>
///   None.
/// </BLOCKQUOTE></PRE>
	ns3__ShippingPackageCodeType__None,	///< xs:token value="None"
/// <PRE><BLOCKQUOTE>
///   Letter.
/// </BLOCKQUOTE></PRE>
	ns3__ShippingPackageCodeType__Letter,	///< xs:token value="Letter"
/// <PRE><BLOCKQUOTE>
///   LargeEnvelope
/// </BLOCKQUOTE></PRE>
	ns3__ShippingPackageCodeType__LargeEnvelope,	///< xs:token value="LargeEnvelope"
/// <PRE><BLOCKQUOTE>
///   USPS Large Package/Oversize 1
/// </BLOCKQUOTE></PRE>
	ns3__ShippingPackageCodeType__USPSLargePack,	///< xs:token value="USPSLargePack"
/// <PRE><BLOCKQUOTE>
///   Very Large Package/Oversize 2
/// </BLOCKQUOTE></PRE>
	ns3__ShippingPackageCodeType__VeryLargePack,	///< xs:token value="VeryLargePack"
/// <PRE><BLOCKQUOTE>
///   UPS Letter
/// </BLOCKQUOTE></PRE>
	ns3__ShippingPackageCodeType__UPSLetter,	///< xs:token value="UPSLetter"
/// <PRE><BLOCKQUOTE>
///   USPS Flat Rate Envelope
/// </BLOCKQUOTE></PRE>
	ns3__ShippingPackageCodeType__USPSFlatRateEnvelope,	///< xs:token value="USPSFlatRateEnvelope"
/// <PRE><BLOCKQUOTE>
///   Package/thick envelope
/// </BLOCKQUOTE></PRE>
	ns3__ShippingPackageCodeType__PackageThickEnvelope,	///< xs:token value="PackageThickEnvelope"
/// <PRE><BLOCKQUOTE>
///   Reserved for internal or future use.
/// </BLOCKQUOTE></PRE>
	ns3__ShippingPackageCodeType__CustomCode,	///< xs:token value="CustomCode"
};

/// @brief "urn:ebay:apis:eBLBaseComponents":ShippingRatesTypeCodeType is a simpleType restriction of XSD type xs:token.
///
/// <PRE><BLOCKQUOTE>
///   ShippingRatesTypeCodeType - Type declaration to be used by other schema. The includes the codes for shipping types
///   supported by sellers to transport items sold to buyers.
/// </BLOCKQUOTE></PRE>
/// @note The enum values are prefixed with "ns3__ShippingRatesTypeCodeType__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns3__ShippingRatesTypeCodeType
{
/// <PRE><BLOCKQUOTE>
///   Flat shipping rate.
/// </BLOCKQUOTE></PRE>
	ns3__ShippingRatesTypeCodeType__Flat,	///< xs:token value="Flat"
/// <PRE><BLOCKQUOTE>
///   Calculated shipping rate.
/// </BLOCKQUOTE></PRE>
	ns3__ShippingRatesTypeCodeType__Calculated,	///< xs:token value="Calculated"
/// <PRE><BLOCKQUOTE>
///   Reserved for internal or future use.
/// </BLOCKQUOTE></PRE>
	ns3__ShippingRatesTypeCodeType__CustomCode,	///< xs:token value="CustomCode"
};

/// @brief "urn:ebay:apis:eBLBaseComponents":ShippingRegionCodeType is a simpleType restriction of XSD type xs:token.
///
/// <PRE><BLOCKQUOTE>
///   ShippingRegion CodeType
///   This code list module defines the enumerated types of regions for shipping items (i.e., a seller may support shipment of an item).
/// </BLOCKQUOTE></PRE>
/// @note The enum values are prefixed with "ns3__ShippingRegionCodeType__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns3__ShippingRegionCodeType
{
/// <PRE><BLOCKQUOTE>
///   Africa
/// </BLOCKQUOTE></PRE>
	ns3__ShippingRegionCodeType__Africa,	///< xs:token value="Africa"
/// <PRE><BLOCKQUOTE>
///   Asia
/// </BLOCKQUOTE></PRE>
	ns3__ShippingRegionCodeType__Asia,	///< xs:token value="Asia"
/// <PRE><BLOCKQUOTE>
///   Carribbean
/// </BLOCKQUOTE></PRE>
	ns3__ShippingRegionCodeType__Caribbean,	///< xs:token value="Caribbean"
/// <PRE><BLOCKQUOTE>
///   Europe
/// </BLOCKQUOTE></PRE>
	ns3__ShippingRegionCodeType__Europe,	///< xs:token value="Europe"
/// <PRE><BLOCKQUOTE>
///   LatinAmerica
/// </BLOCKQUOTE></PRE>
	ns3__ShippingRegionCodeType__LatinAmerica,	///< xs:token value="LatinAmerica"
/// <PRE><BLOCKQUOTE>
///   MiddleEast
/// </BLOCKQUOTE></PRE>
	ns3__ShippingRegionCodeType__MiddleEast,	///< xs:token value="MiddleEast"
/// <PRE><BLOCKQUOTE>
///   NorthAmerica
/// </BLOCKQUOTE></PRE>
	ns3__ShippingRegionCodeType__NorthAmerica,	///< xs:token value="NorthAmerica"
/// <PRE><BLOCKQUOTE>
///   Oceania (i.e., Pacific region other than Asia)
/// </BLOCKQUOTE></PRE>
	ns3__ShippingRegionCodeType__Oceania,	///< xs:token value="Oceania"
/// <PRE><BLOCKQUOTE>
///   SouthAmerica
/// </BLOCKQUOTE></PRE>
	ns3__ShippingRegionCodeType__SouthAmerica,	///< xs:token value="SouthAmerica"
/// <PRE><BLOCKQUOTE>
///   Reserved for internal or future use.
/// </BLOCKQUOTE></PRE>
	ns3__ShippingRegionCodeType__CustomCode,	///< xs:token value="CustomCode"
};

/// @brief "urn:ebay:apis:eBLBaseComponents":ShippingServiceCodeType is a simpleType restriction of XSD type xs:token.
///
/// <PRE><BLOCKQUOTE>
///   ShippingServiceCodeType
///   These are the possible codes to describe insurance option as part of shipping
///   service.
/// </BLOCKQUOTE></PRE>
/// @note The enum values are prefixed with "ns3__ShippingServiceCodeType__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns3__ShippingServiceCodeType
{
/// <PRE><BLOCKQUOTE>
///   UPS Ground
/// </BLOCKQUOTE></PRE>
	ns3__ShippingServiceCodeType__UPSGround,	///< xs:token value="UPSGround"
/// <PRE><BLOCKQUOTE>
///   UPS 3rd Day
/// </BLOCKQUOTE></PRE>
	ns3__ShippingServiceCodeType__UPS3rdDay,	///< xs:token value="UPS3rdDay"
/// <PRE><BLOCKQUOTE>
///   UPS 2nd Day
/// </BLOCKQUOTE></PRE>
	ns3__ShippingServiceCodeType__UPS2ndDay,	///< xs:token value="UPS2ndDay"
/// <PRE><BLOCKQUOTE>
///   UPS Next Day.
/// </BLOCKQUOTE></PRE>
	ns3__ShippingServiceCodeType__UPSNextDay,	///< xs:token value="UPSNextDay"
/// <PRE><BLOCKQUOTE>
///   USPS Priority.
/// </BLOCKQUOTE></PRE>
	ns3__ShippingServiceCodeType__USPSPriority,	///< xs:token value="USPSPriority"
/// <PRE><BLOCKQUOTE>
///   USPS Parcel.
/// </BLOCKQUOTE></PRE>
	ns3__ShippingServiceCodeType__USPSParcel,	///< xs:token value="USPSParcel"
/// <PRE><BLOCKQUOTE>
///   USPS Media.
/// </BLOCKQUOTE></PRE>
	ns3__ShippingServiceCodeType__USPSMedia,	///< xs:token value="USPSMedia"
/// <PRE><BLOCKQUOTE>
///   USPS First Class
/// </BLOCKQUOTE></PRE>
	ns3__ShippingServiceCodeType__USPSFirstClass,	///< xs:token value="USPSFirstClass"
/// <PRE><BLOCKQUOTE>
///   ShippingMethodStandard - used by merchant tool only
/// </BLOCKQUOTE></PRE>
	ns3__ShippingServiceCodeType__ShippingMethodStandard,	///< xs:token value="ShippingMethodStandard"
/// <PRE><BLOCKQUOTE>
///   ShippingMethodExpress- used by merchant tool only
/// </BLOCKQUOTE></PRE>
	ns3__ShippingServiceCodeType__ShippingMethodExpress,	///< xs:token value="ShippingMethodExpress"
/// <PRE><BLOCKQUOTE>
///   ShippingMethodNextDay- used by merchant tool only
/// </BLOCKQUOTE></PRE>
	ns3__ShippingServiceCodeType__ShippingMethodNextDay,	///< xs:token value="ShippingMethodNextDay"
/// <PRE><BLOCKQUOTE>
///   USPS Express Mail
/// </BLOCKQUOTE></PRE>
	ns3__ShippingServiceCodeType__USPSExpressMail,	///< xs:token value="USPSExpressMail"
/// <PRE><BLOCKQUOTE>
///   USPS Ground
/// </BLOCKQUOTE></PRE>
	ns3__ShippingServiceCodeType__USPSGround,	///< xs:token value="USPSGround"
/// <PRE><BLOCKQUOTE>
///   Download.
/// </BLOCKQUOTE></PRE>
	ns3__ShippingServiceCodeType__Download,	///< xs:token value="Download"
/// <PRE><BLOCKQUOTE>
///   Will Call Or Pick Up.
/// </BLOCKQUOTE></PRE>
	ns3__ShippingServiceCodeType__WillCall_USCOREOr_USCOREPickup,	///< xs:token value="WillCall_Or_Pickup"
/// <PRE><BLOCKQUOTE>
///   Reserved for internal or future use.
/// </BLOCKQUOTE></PRE>
	ns3__ShippingServiceCodeType__CustomCode,	///< xs:token value="CustomCode"
};

/// @brief "urn:ebay:apis:eBLBaseComponents":ShippingTermsCodeType is a simpleType restriction of XSD type xs:token.
///
/// <PRE><BLOCKQUOTE>
///   ShippingTermsCodeType - Type declaration to be used by other schema's.
///   Shipping terms code describes who pays for the shipping of an item.
///   These are the standard shipping terms, i.e., terms of delivery of an item.
/// </BLOCKQUOTE></PRE>
/// @note The enum values are prefixed with "ns3__ShippingTermsCodeType__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns3__ShippingTermsCodeType
{
/// <PRE><BLOCKQUOTE>
///   Seller pays all shipping costs.
/// </BLOCKQUOTE></PRE>
	ns3__ShippingTermsCodeType__SellerPays,	///< xs:token value="SellerPays"
/// <PRE><BLOCKQUOTE>
///   Buyer pays all shipping costs.
/// </BLOCKQUOTE></PRE>
	ns3__ShippingTermsCodeType__BuyerPays,	///< xs:token value="BuyerPays"
/// <PRE><BLOCKQUOTE>
///   Reserved for internal or future use.
/// </BLOCKQUOTE></PRE>
	ns3__ShippingTermsCodeType__CustomCode,	///< xs:token value="CustomCode"
};

/// @brief "urn:ebay:apis:eBLBaseComponents":SiteCodeType is a simpleType restriction of XSD type xs:token.
///
/// <PRE><BLOCKQUOTE>
///   SiteCodeType
///   These are site codes that buyers and sellers can use to identify their sites.
/// </BLOCKQUOTE></PRE>
/// @note The enum values are prefixed with "ns3__SiteCodeType__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns3__SiteCodeType
{
/// <PRE><BLOCKQUOTE>
///   USA
/// </BLOCKQUOTE></PRE>
	ns3__SiteCodeType__US,	///< xs:token value="US"
/// <PRE><BLOCKQUOTE>
///   Canada
/// </BLOCKQUOTE></PRE>
	ns3__SiteCodeType__Canada,	///< xs:token value="Canada"
/// <PRE><BLOCKQUOTE>
///   United Kingdom
/// </BLOCKQUOTE></PRE>
	ns3__SiteCodeType__UK,	///< xs:token value="UK"
/// <PRE><BLOCKQUOTE>
///   Australia
/// </BLOCKQUOTE></PRE>
	ns3__SiteCodeType__Australia,	///< xs:token value="Australia"
/// <PRE><BLOCKQUOTE>
///   Austria
/// </BLOCKQUOTE></PRE>
	ns3__SiteCodeType__Austria,	///< xs:token value="Austria"
/// <PRE><BLOCKQUOTE>
///   Belgium (French)
/// </BLOCKQUOTE></PRE>
	ns3__SiteCodeType__Belgium_USCOREFrench,	///< xs:token value="Belgium_French"
/// <PRE><BLOCKQUOTE>
///   France
/// </BLOCKQUOTE></PRE>
	ns3__SiteCodeType__France,	///< xs:token value="France"
/// <PRE><BLOCKQUOTE>
///   Germany
/// </BLOCKQUOTE></PRE>
	ns3__SiteCodeType__Germany,	///< xs:token value="Germany"
/// <PRE><BLOCKQUOTE>
///   Italy
/// </BLOCKQUOTE></PRE>
	ns3__SiteCodeType__Italy,	///< xs:token value="Italy"
/// <PRE><BLOCKQUOTE>
///   Belgium (Dutch)
/// </BLOCKQUOTE></PRE>
	ns3__SiteCodeType__Belgium_USCOREDutch,	///< xs:token value="Belgium_Dutch"
/// <PRE><BLOCKQUOTE>
///   Netherlands
/// </BLOCKQUOTE></PRE>
	ns3__SiteCodeType__Netherlands,	///< xs:token value="Netherlands"
/// <PRE><BLOCKQUOTE>
///   Spain
/// </BLOCKQUOTE></PRE>
	ns3__SiteCodeType__Spain,	///< xs:token value="Spain"
/// <PRE><BLOCKQUOTE>
///   Switzerland
/// </BLOCKQUOTE></PRE>
	ns3__SiteCodeType__Switzerland,	///< xs:token value="Switzerland"
/// <PRE><BLOCKQUOTE>
///   Taiwan
/// </BLOCKQUOTE></PRE>
	ns3__SiteCodeType__Taiwan,	///< xs:token value="Taiwan"
/// <PRE><BLOCKQUOTE>
///   eBay Motors
/// </BLOCKQUOTE></PRE>
	ns3__SiteCodeType__eBayMotors,	///< xs:token value="eBayMotors"
/// <PRE><BLOCKQUOTE>
///   Hong Kong
/// </BLOCKQUOTE></PRE>
	ns3__SiteCodeType__HongKong,	///< xs:token value="HongKong"
/// <PRE><BLOCKQUOTE>
///   Singapore
/// </BLOCKQUOTE></PRE>
	ns3__SiteCodeType__Singapore,	///< xs:token value="Singapore"
/// <PRE><BLOCKQUOTE>
///   Reserved for internal or future use.
/// </BLOCKQUOTE></PRE>
	ns3__SiteCodeType__CustomCode,	///< xs:token value="CustomCode"
};

/// @brief "urn:ebay:apis:eBLBaseComponents":StoreVisibilityStatusType is a simpleType restriction of XSD type xs:token.
///
/// <PRE><BLOCKQUOTE>
///   This is to validate input if store should be visible/invisible in the store locator.
///   If Merchant wants a store to be ENABLED, input should be "E".
///   If Merchant wants a store to be DISABLED, input should be "D".
///   If Merchant is not giving any input, it will be taken as "DISABLED"
/// </BLOCKQUOTE></PRE>
/// @note The enum values are prefixed with "ns3__StoreVisibilityStatusType__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns3__StoreVisibilityStatusType
{
	ns3__StoreVisibilityStatusType__DISABLE,	///< xs:token value="DISABLE"
	ns3__StoreVisibilityStatusType__ENABLE,	///< xs:token value="ENABLE"
};

/// @brief "urn:ebay:apis:eBLBaseComponents":UnitCodeType is a simpleType restriction of XSD type xs:token.
///
/// <PRE><BLOCKQUOTE>
///   UnitCodeType
/// </BLOCKQUOTE></PRE>
/// @note The enum values are prefixed with "ns3__UnitCodeType__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns3__UnitCodeType
{
/// <PRE><BLOCKQUOTE>
///   Kilogram.
/// </BLOCKQUOTE></PRE>
	ns3__UnitCodeType__kg,	///< xs:token value="kg"
/// <PRE><BLOCKQUOTE>
///   Pounds.
/// </BLOCKQUOTE></PRE>
	ns3__UnitCodeType__lbs,	///< xs:token value="lbs"
/// <PRE><BLOCKQUOTE>
///   Ounces
/// </BLOCKQUOTE></PRE>
	ns3__UnitCodeType__oz,	///< xs:token value="oz"
/// <PRE><BLOCKQUOTE>
///   Centimeter.
/// </BLOCKQUOTE></PRE>
	ns3__UnitCodeType__cm,	///< xs:token value="cm"
/// <PRE><BLOCKQUOTE>
///   Inches.
/// </BLOCKQUOTE></PRE>
	ns3__UnitCodeType__inches,	///< xs:token value="inches"
/// <PRE><BLOCKQUOTE>
///   Feet.
/// </BLOCKQUOTE></PRE>
	ns3__UnitCodeType__ft,	///< xs:token value="ft"
/// <PRE><BLOCKQUOTE>
///   Reserved for internal or future use.
/// </BLOCKQUOTE></PRE>
	ns3__UnitCodeType__CustomCode,	///< xs:token value="CustomCode"
};

/// @brief "urn:ebay:apis:eBLBaseComponents":UserStatusCodeType is a simpleType restriction of XSD type xs:token.
///
/// <PRE><BLOCKQUOTE>
///   UserStatusCodeType
/// </BLOCKQUOTE></PRE>
/// @note The enum values are prefixed with "ns3__UserStatusCodeType__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns3__UserStatusCodeType
{
/// <PRE><BLOCKQUOTE>
///   User properties have never been set. This value should seldom, if ever, be returned and typically represents a problem.
/// </BLOCKQUOTE></PRE>
	ns3__UserStatusCodeType__Unknown,	///< xs:token value="Unknown"
/// <PRE><BLOCKQUOTE>
///   User has been suspended from selling and buying, such as for violations of eBay terms or agreement.
/// </BLOCKQUOTE></PRE>
	ns3__UserStatusCodeType__Suspended,	///< xs:token value="Suspended"
/// <PRE><BLOCKQUOTE>
///   User has completed online registration and has properly responded to confirmation email. Most users should fall in this category.
/// </BLOCKQUOTE></PRE>
	ns3__UserStatusCodeType__Confirmed,	///< xs:token value="Confirmed"
/// <PRE><BLOCKQUOTE>
///   User has completed online registration, but has either not responded to confirmation email or has not yet been sent the confirmation email. .
/// </BLOCKQUOTE></PRE>
	ns3__UserStatusCodeType__Unconfirmed,	///< xs:token value="Unconfirmed"
/// <PRE><BLOCKQUOTE>
///   Registered users of AuctionWeb (pre-eBay) who never re-registered on eBay.
/// </BLOCKQUOTE></PRE>
	ns3__UserStatusCodeType__Ghost,	///< xs:token value="Ghost"
/// <PRE><BLOCKQUOTE>
///   Temporary user record state indicating the record is in the process of being changed by eBay. Query user information again to get new status.
/// </BLOCKQUOTE></PRE>
	ns3__UserStatusCodeType__InMaintenance,	///< xs:token value="InMaintenance"
/// <PRE><BLOCKQUOTE>
///   Records for the specified user have been deleted.
/// </BLOCKQUOTE></PRE>
	ns3__UserStatusCodeType__Deleted,	///< xs:token value="Deleted"
/// <PRE><BLOCKQUOTE>
///   User has completed registration and confirmation, but is pending a verification of credit card information.
/// </BLOCKQUOTE></PRE>
	ns3__UserStatusCodeType__CreditCardVerify,	///< xs:token value="CreditCardVerify"
/// <PRE><BLOCKQUOTE>
///   User's account is on hold, such as for non-payment of amounts due eBay. User cannot sell or buy items.
/// </BLOCKQUOTE></PRE>
	ns3__UserStatusCodeType__AccountOnHold,	///< xs:token value="AccountOnHold"
/// <PRE><BLOCKQUOTE>
///   User record has been merged with another account record for the same user.
/// </BLOCKQUOTE></PRE>
	ns3__UserStatusCodeType__Merged,	///< xs:token value="Merged"
/// <PRE><BLOCKQUOTE>
///   User has completed online registration and has been sent the confirmation email, but has not yet responded to the confirmation email.
/// </BLOCKQUOTE></PRE>
	ns3__UserStatusCodeType__RegistrationCodeMailOut,	///< xs:token value="RegistrationCodeMailOut"
/// <PRE><BLOCKQUOTE>
///   User has been scheduled for account closure (typically when a user has requested to have their account closed.) A user in this state should not be considered an active user.
/// </BLOCKQUOTE></PRE>
	ns3__UserStatusCodeType__TermPending,	///< xs:token value="TermPending"
/// <PRE><BLOCKQUOTE>
///   User has completed the registration for Half.com and opted to automatically also be registered with eBay, but the registration confirmation is still pending.
/// </BLOCKQUOTE></PRE>
	ns3__UserStatusCodeType__UnconfirmedHalfOptIn,	///< xs:token value="UnconfirmedHalfOptIn"
/// <PRE><BLOCKQUOTE>
///   User has completed the registration for Half.com and opted to automatically also be registered with eBay, but the verification of credit card information is still pending.
/// </BLOCKQUOTE></PRE>
	ns3__UserStatusCodeType__CreditCardVerifyHalfOptIn,	///< xs:token value="CreditCardVerifyHalfOptIn"
/// <PRE><BLOCKQUOTE>
///   Passport User. User has completed the registration process, but the registration confirmation is still pending.
/// </BLOCKQUOTE></PRE>
	ns3__UserStatusCodeType__UnconfirmedPassport,	///< xs:token value="UnconfirmedPassport"
/// <PRE><BLOCKQUOTE>
///   Passport User Requiring Credit Card Verification. User has completed the registration process with credit card verification, but the registration confirmation is still pending.
/// </BLOCKQUOTE></PRE>
	ns3__UserStatusCodeType__CreditCardVerifyPassport,	///< xs:token value="CreditCardVerifyPassport"
/// <PRE><BLOCKQUOTE>
///   Half.com User. User has completed the registration for Half.com and opted to automatically also be registered with eBay, but the registration confirmation is still pending.
/// </BLOCKQUOTE></PRE>
	ns3__UserStatusCodeType__UnconfirmedExpress,	///< xs:token value="UnconfirmedExpress"
/// <PRE><BLOCKQUOTE>
///   Reserved for internal or future use.
/// </BLOCKQUOTE></PRE>
	ns3__UserStatusCodeType__CustomCode,	///< xs:token value="CustomCode"
};

/// @brief "urn:ebay:apis:eBLBaseComponents":VATStatusCodeType is a simpleType restriction of XSD type xs:token.
///
/// <PRE><BLOCKQUOTE>
///   VATStatusCodeType
/// </BLOCKQUOTE></PRE>
/// @note The enum values are prefixed with "ns3__VATStatusCodeType__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns3__VATStatusCodeType
{
/// <PRE><BLOCKQUOTE>
///   No VAT Tax
/// </BLOCKQUOTE></PRE>
	ns3__VATStatusCodeType__NoVATTax,	///< xs:token value="NoVATTax"
/// <PRE><BLOCKQUOTE>
///   VAT Tax
/// </BLOCKQUOTE></PRE>
	ns3__VATStatusCodeType__VATTax,	///< xs:token value="VATTax"
/// <PRE><BLOCKQUOTE>
///   VAT Exempt
/// </BLOCKQUOTE></PRE>
	ns3__VATStatusCodeType__VATExempt,	///< xs:token value="VATExempt"
/// <PRE><BLOCKQUOTE>
///   Reserved for internal or future use.
/// </BLOCKQUOTE></PRE>
	ns3__VATStatusCodeType__CustomCode,	///< xs:token value="CustomCode"
};

/// @brief "urn:ebay:apis:eBLBaseComponents":CreditCardTypeType is a simpleType restriction of XSD type xs:token.
///
/// <PRE><BLOCKQUOTE>
///   Type declaration to be used by other schemas.
///   This is the credit card type
/// </BLOCKQUOTE></PRE>
/// @note The enum values are prefixed with "ns3__CreditCardTypeType__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns3__CreditCardTypeType
{
	ns3__CreditCardTypeType__Visa,	///< xs:token value="Visa"
	ns3__CreditCardTypeType__MasterCard,	///< xs:token value="MasterCard"
	ns3__CreditCardTypeType__Discover,	///< xs:token value="Discover"
	ns3__CreditCardTypeType__Amex,	///< xs:token value="Amex"
	ns3__CreditCardTypeType__Switch,	///< xs:token value="Switch"
	ns3__CreditCardTypeType__Solo,	///< xs:token value="Solo"
	ns3__CreditCardTypeType__Maestro,	///< xs:token value="Maestro"
};

/// @brief "urn:ebay:apis:eBLBaseComponents":NameType is a simpleType restriction of XSD type xs:string.
///
/// Length of this content is 0 to 25.
typedef std::string ns3__NameType : 25;

/// @brief "urn:ebay:apis:eBLBaseComponents":SalutationType is a simpleType restriction of XSD type xs:string.
///
/// Length of this content is 0 to 20.
typedef std::string ns3__SalutationType : 20;

/// @brief "urn:ebay:apis:eBLBaseComponents":SuffixType is a simpleType restriction of XSD type xs:string.
///
/// Length of this content is 0 to 12.
typedef std::string ns3__SuffixType : 12;

/// @brief "urn:ebay:apis:eBLBaseComponents":TransactionId is a simpleType restriction of XSD type xs:string.
///
/// <PRE><BLOCKQUOTE>
///   TransactionId - Type for a PayPal Transaction ID.
/// </BLOCKQUOTE></PRE>
typedef std::string ns3__TransactionId;

/// @brief "urn:ebay:apis:eBLBaseComponents":AuthorizationId is a simpleType restriction of XSD type xs:string.
///
/// <PRE><BLOCKQUOTE>
///   AuthorizationId - Type for a PayPal Authorization ID.
/// </BLOCKQUOTE></PRE>
typedef std::string ns3__AuthorizationId;

/// @brief "urn:ebay:apis:eBLBaseComponents":MerchantPullIDType is a simpleType restriction of XSD type xs:string.
///
typedef std::string ns3__MerchantPullIDType;

/// @brief "urn:ebay:apis:eBLBaseComponents":EmailAddressType is a simpleType restriction of XSD type xs:string.
///
typedef std::string ns3__EmailAddressType;

/// @brief "urn:ebay:apis:eBLBaseComponents":ExpressCheckoutTokenType is a simpleType restriction of XSD type xs:string.
///
typedef std::string ns3__ExpressCheckoutTokenType;

/// @brief "urn:ebay:apis:eBLBaseComponents":AuthFlowTokenType is a simpleType restriction of XSD type xs:string.
///
typedef std::string ns3__AuthFlowTokenType;

/// @brief "urn:ebay:apis:eBLBaseComponents":LanguageCodeType is a simpleType restriction of XSD type xs:string.
///
typedef std::string ns3__LanguageCodeType;

/// @brief "urn:ebay:apis:eBLBaseComponents":PaymentNotificationServiceCodeType is a simpleType restriction of XSD type xs:token.
///
/// <PRE><BLOCKQUOTE>
///   PaymentNotificationService For SetPaymentStatus API, this value should always be eBayCN.
/// </BLOCKQUOTE></PRE>
/// @note The enum values are prefixed with "ns3__PaymentNotificationServiceCodeType__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns3__PaymentNotificationServiceCodeType
{
	ns3__PaymentNotificationServiceCodeType__eBayCN,	///< xs:token value="eBayCN"
};

/// @brief "urn:ebay:apis:eBLBaseComponents":OrderID is a simpleType restriction of XSD type xs:string.
///
typedef std::string ns3__OrderID;

/// @brief "urn:ebay:apis:eBLBaseComponents":BankIDCodeType is a simpleType restriction of XSD type xs:token.
///
/// <PRE><BLOCKQUOTE>
///   BankID The various banks supported for China postbacks.
/// </BLOCKQUOTE></PRE>
/// @note The enum values are prefixed with "ns3__BankIDCodeType__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns3__BankIDCodeType
{
	ns3__BankIDCodeType__CMB,	///< xs:token value="CMB"
	ns3__BankIDCodeType__ICBC,	///< xs:token value="ICBC"
	ns3__BankIDCodeType__CCB,	///< xs:token value="CCB"
	ns3__BankIDCodeType__ChinaPay,	///< xs:token value="ChinaPay"
};

/// @brief "urn:ebay:apis:eBLBaseComponents":PaymentStatusIDCodeType is a simpleType restriction of XSD type xs:integer.
///
/// <PRE><BLOCKQUOTE>
///   PaymentStatus The payment statuses supported for China postbacks.
///   0 - None
///   1 - Success
///   2 - Pending or Suspicious
///   3 - Failure
/// </BLOCKQUOTE></PRE>
/// Value range is 0 to 3.
typedef xsd__integer ns3__PaymentStatusIDCodeType /* from 0 (inclusive) @warning: could not determine if this type is numeric */ /* to 3 (inclusive) @warning: could not determine if this type is numeric */;

/// @brief "urn:ebay:apis:eBLBaseComponents":RefundType is a simpleType restriction of XSD type xs:token.
///
/// <PRE><BLOCKQUOTE>
///   RefundType - Type declaration to be used by other schema. This code identifies the types of refund transactions supported.
/// </BLOCKQUOTE></PRE>
/// @note The enum values are prefixed with "ns3__RefundType__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns3__RefundType
{

/// </BLOCKQUOTE></PRE>
	ns3__RefundType__Other,	///< xs:token value="Other"
/// <PRE><BLOCKQUOTE>
///   Full Refund
/// </BLOCKQUOTE></PRE>
	ns3__RefundType__Full,	///< xs:token value="Full"
/// <PRE><BLOCKQUOTE>
///   Partial Refund
/// </BLOCKQUOTE></PRE>
	ns3__RefundType__Partial,	///< xs:token value="Partial"
/// <PRE><BLOCKQUOTE>
///   External Dispute
/// </BLOCKQUOTE></PRE>
	ns3__RefundType__ExternalDispute,	///< xs:token value="ExternalDispute"
};

/// @brief "urn:ebay:apis:eBLBaseComponents":UnitOfMeasure is a simpleType restriction of XSD type xs:token.
///
/// <PRE><BLOCKQUOTE>
///   Based on NRF-ARTS Specification for Units of Measure
/// </BLOCKQUOTE></PRE>
/// @note The enum values are prefixed with "ns3__UnitOfMeasure__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns3__UnitOfMeasure
{
/// <PRE><BLOCKQUOTE>
///   Each
/// </BLOCKQUOTE></PRE>
	ns3__UnitOfMeasure__EA,	///< xs:token value="EA"
/// <PRE><BLOCKQUOTE>
///   Hours
/// </BLOCKQUOTE></PRE>
	ns3__UnitOfMeasure__Hours,	///< xs:token value="Hours"
/// <PRE><BLOCKQUOTE>
///   Days
/// </BLOCKQUOTE></PRE>
	ns3__UnitOfMeasure__Days,	///< xs:token value="Days"
/// <PRE><BLOCKQUOTE>
///   Seconds
/// </BLOCKQUOTE></PRE>
	ns3__UnitOfMeasure__Seconds,	///< xs:token value="Seconds"
/// <PRE><BLOCKQUOTE>
///   Crate of 12 bottles of beer
/// </BLOCKQUOTE></PRE>
	ns3__UnitOfMeasure__CrateOf12,	///< xs:token value="CrateOf12"
/// <PRE><BLOCKQUOTE>
///   6Pack
/// </BLOCKQUOTE></PRE>
	ns3__UnitOfMeasure__6Pack,	///< xs:token value="6Pack"
/// <PRE><BLOCKQUOTE>
///   Gallon (UK)
/// </BLOCKQUOTE></PRE>
	ns3__UnitOfMeasure__GLI,	///< xs:token value="GLI"
/// <PRE><BLOCKQUOTE>
///   Gallon (US)
/// </BLOCKQUOTE></PRE>
	ns3__UnitOfMeasure__GLL,	///< xs:token value="GLL"
/// <PRE><BLOCKQUOTE>
///   Litre
/// </BLOCKQUOTE></PRE>
	ns3__UnitOfMeasure__LTR,	///< xs:token value="LTR"
/// <PRE><BLOCKQUOTE>
///   Inch
/// </BLOCKQUOTE></PRE>
	ns3__UnitOfMeasure__INH,	///< xs:token value="INH"
/// <PRE><BLOCKQUOTE>
///   Foot
/// </BLOCKQUOTE></PRE>
	ns3__UnitOfMeasure__FOT,	///< xs:token value="FOT"
/// <PRE><BLOCKQUOTE>
///   Millimeter
/// </BLOCKQUOTE></PRE>
	ns3__UnitOfMeasure__MMT,	///< xs:token value="MMT"
/// <PRE><BLOCKQUOTE>
///   Centimeter
/// </BLOCKQUOTE></PRE>
	ns3__UnitOfMeasure__CMQ,	///< xs:token value="CMQ"
/// <PRE><BLOCKQUOTE>
///   Meter
/// </BLOCKQUOTE></PRE>
	ns3__UnitOfMeasure__MTR,	///< xs:token value="MTR"
/// <PRE><BLOCKQUOTE>
///   Square Meter
/// </BLOCKQUOTE></PRE>
	ns3__UnitOfMeasure__MTK,	///< xs:token value="MTK"
/// <PRE><BLOCKQUOTE>
///   Cubic Meter
/// </BLOCKQUOTE></PRE>
	ns3__UnitOfMeasure__MTQ,	///< xs:token value="MTQ"
/// <PRE><BLOCKQUOTE>
///   Gram
/// </BLOCKQUOTE></PRE>
	ns3__UnitOfMeasure__GRM,	///< xs:token value="GRM"
/// <PRE><BLOCKQUOTE>
///   Kilogram
/// </BLOCKQUOTE></PRE>
	ns3__UnitOfMeasure__KGM,	///< xs:token value="KGM"
/// <PRE><BLOCKQUOTE>
///   Kilogram
/// </BLOCKQUOTE></PRE>
	ns3__UnitOfMeasure__KG,	///< xs:token value="KG"
/// <PRE><BLOCKQUOTE>
///   Pound
/// </BLOCKQUOTE></PRE>
	ns3__UnitOfMeasure__LBR,	///< xs:token value="LBR"
/// <PRE><BLOCKQUOTE>
///   Annual
/// </BLOCKQUOTE></PRE>
	ns3__UnitOfMeasure__ANN,	///< xs:token value="ANN"
/// <PRE><BLOCKQUOTE>
///   Degree Celcius
/// </BLOCKQUOTE></PRE>
	ns3__UnitOfMeasure__CEL,	///< xs:token value="CEL"
/// <PRE><BLOCKQUOTE>
///   Degree Fahrenheit
/// </BLOCKQUOTE></PRE>
	ns3__UnitOfMeasure__FAH,	///< xs:token value="FAH"
/// <PRE><BLOCKQUOTE>
///   RESERVED
/// </BLOCKQUOTE></PRE>
	ns3__UnitOfMeasure__RESERVED,	///< xs:token value="RESERVED"
};

/// @brief "urn:ebay:apis:eBLBaseComponents":RedeemedOfferType is a simpleType restriction of XSD type xs:token.
///
/// @note The enum values are prefixed with "ns3__RedeemedOfferType__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns3__RedeemedOfferType
{
	ns3__RedeemedOfferType__MERCHANT_USCORECOUPON,	///< xs:token value="MERCHANT_COUPON"
	ns3__RedeemedOfferType__LOYALTY_USCORECARD,	///< xs:token value="LOYALTY_CARD"
	ns3__RedeemedOfferType__MANUFACTURER_USCORECOUPON,	///< xs:token value="MANUFACTURER_COUPON"
	ns3__RedeemedOfferType__RESERVED,	///< xs:token value="RESERVED"
};

/// @brief "urn:ebay:apis:eBLBaseComponents":APIType is a simpleType restriction of XSD type xs:token.
///
/// <PRE><BLOCKQUOTE>
///   Supported API Types for DoCancel operation
/// </BLOCKQUOTE></PRE>
/// @note The enum values are prefixed with "ns3__APIType__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns3__APIType
{
/// <PRE><BLOCKQUOTE>
///   POS CHECKOUT AUTHORIZATION
/// </BLOCKQUOTE></PRE>
	ns3__APIType__CHECKOUT_USCOREAUTHORIZATION,	///< xs:token value="CHECKOUT_AUTHORIZATION"
/// <PRE><BLOCKQUOTE>
///   POS CHECKOUT SALE
/// </BLOCKQUOTE></PRE>
	ns3__APIType__CHECKOUT_USCORESALE,	///< xs:token value="CHECKOUT_SALE"
/// <PRE><BLOCKQUOTE>
///   REFUND TRANSACTION
/// </BLOCKQUOTE></PRE>
	ns3__APIType__REFUND_USCORETRANSACTION,	///< xs:token value="REFUND_TRANSACTION"
};

/// @brief "urn:ebay:apis:eBLBaseComponents":IncentiveRequestCodeType is a simpleType restriction of XSD type xs:token.
///
/// <PRE><BLOCKQUOTE>
///   IncentiveRequestType This identifies the type of request for the API call. The type of request may be used to determine whether the request is for evaluating incentives in pre-checkout or in-checkout phase.
/// </BLOCKQUOTE></PRE>
/// @note The enum values are prefixed with "ns3__IncentiveRequestCodeType__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns3__IncentiveRequestCodeType
{
	ns3__IncentiveRequestCodeType__InCheckout,	///< xs:token value="InCheckout"
	ns3__IncentiveRequestCodeType__PreCheckout,	///< xs:token value="PreCheckout"
};

/// @brief "urn:ebay:apis:eBLBaseComponents":IncentiveRequestDetailLevelCodeType is a simpleType restriction of XSD type xs:token.
///
/// <PRE><BLOCKQUOTE>
///   IncentiveRequestDetailLevelType This identifies the granularity of information requested by the client application. This information will be used to define the contents and details of the response.
/// </BLOCKQUOTE></PRE>
/// @note The enum values are prefixed with "ns3__IncentiveRequestDetailLevelCodeType__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns3__IncentiveRequestDetailLevelCodeType
{
	ns3__IncentiveRequestDetailLevelCodeType__Aggregated,	///< xs:token value="Aggregated"
	ns3__IncentiveRequestDetailLevelCodeType__Detail,	///< xs:token value="Detail"
};

/// @brief "urn:ebay:apis:eBLBaseComponents":IncentiveTypeCodeType is a simpleType restriction of XSD type xs:token.
///
/// <PRE><BLOCKQUOTE>
///   IncentiveType This identifies the type of INCENTIVE for the redemption code.
/// </BLOCKQUOTE></PRE>
/// @note The enum values are prefixed with "ns3__IncentiveTypeCodeType__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns3__IncentiveTypeCodeType
{
	ns3__IncentiveTypeCodeType__Coupon,	///< xs:token value="Coupon"
	ns3__IncentiveTypeCodeType__eBayGiftCertificate,	///< xs:token value="eBayGiftCertificate"
	ns3__IncentiveTypeCodeType__eBayGiftCard,	///< xs:token value="eBayGiftCard"
	ns3__IncentiveTypeCodeType__PayPalRewardVoucher,	///< xs:token value="PayPalRewardVoucher"
	ns3__IncentiveTypeCodeType__MerchantGiftCertificate,	///< xs:token value="MerchantGiftCertificate"
	ns3__IncentiveTypeCodeType__eBayRewardVoucher,	///< xs:token value="eBayRewardVoucher"
};

/// @brief "urn:ebay:apis:eBLBaseComponents":UserChannelCodeType is a simpleType restriction of XSD type xs:token.
///
/// <PRE><BLOCKQUOTE>
///   It defines the enumerated types of the user channels defined in biz/User/value_object/Channel.oml<br/>
/// </BLOCKQUOTE></PRE>
/// @note The enum values are prefixed with "ns3__UserChannelCodeType__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns3__UserChannelCodeType
{
	ns3__UserChannelCodeType__WEB,	///< xs:token value="WEB"
	ns3__UserChannelCodeType__MOBILE,	///< xs:token value="MOBILE"
	ns3__UserChannelCodeType__POS,	///< xs:token value="POS"
	ns3__UserChannelCodeType__KIOSK,	///< xs:token value="KIOSK"
	ns3__UserChannelCodeType__IHSTB,	///< xs:token value="IHSTB"
	ns3__UserChannelCodeType__IVR,	///< xs:token value="IVR"
	ns3__UserChannelCodeType__ADMIN,	///< xs:token value="ADMIN"
	ns3__UserChannelCodeType__CSOPS,	///< xs:token value="CSOPS"
};

/// @brief "urn:ebay:apis:eBLBaseComponents":PaymentTransactionCodeType is a simpleType restriction of XSD type xs:token.
///
/// <PRE><BLOCKQUOTE>
///   PaymentTransactionCodeType This is the type of a PayPal of which matches the output from IPN
/// </BLOCKQUOTE></PRE>
/// @note The enum values are prefixed with "ns3__PaymentTransactionCodeType__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns3__PaymentTransactionCodeType
{
	ns3__PaymentTransactionCodeType__none,	///< xs:token value="none"
	ns3__PaymentTransactionCodeType__web_accept,	///< xs:token value="web-accept"
	ns3__PaymentTransactionCodeType__cart,	///< xs:token value="cart"
	ns3__PaymentTransactionCodeType__send_money,	///< xs:token value="send-money"
	ns3__PaymentTransactionCodeType__subscr_failed,	///< xs:token value="subscr-failed"
	ns3__PaymentTransactionCodeType__subscr_cancel,	///< xs:token value="subscr-cancel"
	ns3__PaymentTransactionCodeType__subscr_payment,	///< xs:token value="subscr-payment"
	ns3__PaymentTransactionCodeType__subscr_signup,	///< xs:token value="subscr-signup"
	ns3__PaymentTransactionCodeType__subscr_eot,	///< xs:token value="subscr-eot"
	ns3__PaymentTransactionCodeType__subscr_modify,	///< xs:token value="subscr-modify"
	ns3__PaymentTransactionCodeType__mercht_pmt,	///< xs:token value="mercht-pmt"
	ns3__PaymentTransactionCodeType__mass_pay,	///< xs:token value="mass-pay"
	ns3__PaymentTransactionCodeType__virtual_terminal,	///< xs:token value="virtual-terminal"
	ns3__PaymentTransactionCodeType__integral_evolution,	///< xs:token value="integral-evolution"
	ns3__PaymentTransactionCodeType__express_checkout,	///< xs:token value="express-checkout"
	ns3__PaymentTransactionCodeType__pro_hosted,	///< xs:token value="pro-hosted"
	ns3__PaymentTransactionCodeType__pro_api,	///< xs:token value="pro-api"
	ns3__PaymentTransactionCodeType__credit,	///< xs:token value="credit"
};

/// @brief "urn:ebay:apis:eBLBaseComponents":PaymentStatusCodeType is a simpleType restriction of XSD type xs:token.
///
/// <PRE><BLOCKQUOTE>
///   PaymentStatusCodeType This is the status of a PayPal Payment which matches the output from IPN
/// </BLOCKQUOTE></PRE>
/// @note The enum values are prefixed with "ns3__PaymentStatusCodeType__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns3__PaymentStatusCodeType
{
	ns3__PaymentStatusCodeType__None,	///< xs:token value="None"
	ns3__PaymentStatusCodeType__Completed,	///< xs:token value="Completed"
	ns3__PaymentStatusCodeType__Failed,	///< xs:token value="Failed"
	ns3__PaymentStatusCodeType__Pending,	///< xs:token value="Pending"
	ns3__PaymentStatusCodeType__Denied,	///< xs:token value="Denied"
	ns3__PaymentStatusCodeType__Refunded,	///< xs:token value="Refunded"
	ns3__PaymentStatusCodeType__Reversed,	///< xs:token value="Reversed"
	ns3__PaymentStatusCodeType__Canceled_Reversal,	///< xs:token value="Canceled-Reversal"
	ns3__PaymentStatusCodeType__Processed,	///< xs:token value="Processed"
	ns3__PaymentStatusCodeType__Partially_Refunded,	///< xs:token value="Partially-Refunded"
	ns3__PaymentStatusCodeType__Voided,	///< xs:token value="Voided"
	ns3__PaymentStatusCodeType__Expired,	///< xs:token value="Expired"
	ns3__PaymentStatusCodeType__In_Progress,	///< xs:token value="In-Progress"
	ns3__PaymentStatusCodeType__Created,	///< xs:token value="Created"
	ns3__PaymentStatusCodeType__Completed_Funds_Held,	///< xs:token value="Completed-Funds-Held"
	ns3__PaymentStatusCodeType__Instant,	///< xs:token value="Instant"
	ns3__PaymentStatusCodeType__Delayed,	///< xs:token value="Delayed"
};

/// @brief "urn:ebay:apis:eBLBaseComponents":AddressStatusCodeType is a simpleType restriction of XSD type xs:token.
///
/// <PRE><BLOCKQUOTE>
///   AddressStatusCodeType This is the PayPal address status
/// </BLOCKQUOTE></PRE>
/// @note The enum values are prefixed with "ns3__AddressStatusCodeType__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns3__AddressStatusCodeType
{
	ns3__AddressStatusCodeType__None,	///< xs:token value="None"
	ns3__AddressStatusCodeType__Confirmed,	///< xs:token value="Confirmed"
	ns3__AddressStatusCodeType__Unconfirmed,	///< xs:token value="Unconfirmed"
};

/// @brief "urn:ebay:apis:eBLBaseComponents":AddressNormalizationStatusCodeType is a simpleType restriction of XSD type xs:token.
///
/// <PRE><BLOCKQUOTE>
///   Normalization Status of the Address
/// </BLOCKQUOTE></PRE>
/// @note The enum values are prefixed with "ns3__AddressNormalizationStatusCodeType__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns3__AddressNormalizationStatusCodeType
{
	ns3__AddressNormalizationStatusCodeType__None,	///< xs:token value="None"
	ns3__AddressNormalizationStatusCodeType__Normalized,	///< xs:token value="Normalized"
	ns3__AddressNormalizationStatusCodeType__Unnormalized,	///< xs:token value="Unnormalized"
	ns3__AddressNormalizationStatusCodeType__UserPreferred,	///< xs:token value="UserPreferred"
};

/// @brief "urn:ebay:apis:eBLBaseComponents":PaymentActionCodeType is a simpleType restriction of XSD type xs:token.
///
/// <PRE><BLOCKQUOTE>
///   PaymentDetailsCodeType This is the PayPal payment details type (used by DCC and Express Checkout)
/// </BLOCKQUOTE></PRE>
/// @note The enum values are prefixed with "ns3__PaymentActionCodeType__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns3__PaymentActionCodeType
{
	ns3__PaymentActionCodeType__None,	///< xs:token value="None"
	ns3__PaymentActionCodeType__Authorization,	///< xs:token value="Authorization"
	ns3__PaymentActionCodeType__Sale,	///< xs:token value="Sale"
	ns3__PaymentActionCodeType__Order,	///< xs:token value="Order"
};

/// @brief "urn:ebay:apis:eBLBaseComponents":FMFPendingTransactionActionType is a simpleType restriction of XSD type xs:token.
///
/// <PRE><BLOCKQUOTE>
///   This is various actions that a merchant can take on a FMF Pending Transaction.
/// </BLOCKQUOTE></PRE>
/// @note The enum values are prefixed with "ns3__FMFPendingTransactionActionType__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns3__FMFPendingTransactionActionType
{
	ns3__FMFPendingTransactionActionType__Accept,	///< xs:token value="Accept"
	ns3__FMFPendingTransactionActionType__Deny,	///< xs:token value="Deny"
};

/// @brief "urn:ebay:apis:eBLBaseComponents":ChannelType is a simpleType restriction of XSD type xs:token.
///
/// <PRE><BLOCKQUOTE>
///   ChannelType - Type declaration to be used by other schemas.
///   This is the PayPal Channel type (used by Express Checkout)
/// </BLOCKQUOTE></PRE>
/// @note The enum values are prefixed with "ns3__ChannelType__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns3__ChannelType
{
	ns3__ChannelType__Merchant,	///< xs:token value="Merchant"
	ns3__ChannelType__eBayItem,	///< xs:token value="eBayItem"
};

/// @brief "urn:ebay:apis:eBLBaseComponents":TotalType is a simpleType restriction of XSD type xs:token.
///
/// <PRE><BLOCKQUOTE>
///   TotalType - Type declaration for the label to be displayed
///   in MiniCart for UX.
/// </BLOCKQUOTE></PRE>
/// @note The enum values are prefixed with "ns3__TotalType__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns3__TotalType
{
	ns3__TotalType__Total,	///< xs:token value="Total"
	ns3__TotalType__EstimatedTotal,	///< xs:token value="EstimatedTotal"
};

/// @brief "urn:ebay:apis:eBLBaseComponents":SolutionTypeType is a simpleType restriction of XSD type xs:token.
///
/// <PRE><BLOCKQUOTE>
///   SolutionTypeType This is the PayPal payment Solution details type (used by Express Checkout)
/// </BLOCKQUOTE></PRE>
/// @note The enum values are prefixed with "ns3__SolutionTypeType__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns3__SolutionTypeType
{
	ns3__SolutionTypeType__Mark,	///< xs:token value="Mark"
	ns3__SolutionTypeType__Sole,	///< xs:token value="Sole"
};

/// @brief "urn:ebay:apis:eBLBaseComponents":AllowedPaymentMethodType is a simpleType restriction of XSD type xs:token.
///
/// <PRE><BLOCKQUOTE>
///   AllowedPaymentMethodType
///   This is the payment Solution merchant needs to specify for Autopay (used by Express Checkout)
///   <br/>Optional
///   <br/>Default indicates that its merchant supports all funding source
///   <br/>InstantPaymentOnly indicates that its merchant only supports instant payment
///   <br/>AnyFundingSource allow all funding methods to be chosen by the buyer irrespective of merchant's profile setting
///   <br/>InstantFundingSource allow only instant funding methods, block echeck, meft, elevecheck. This will override any merchant profile setting
/// </BLOCKQUOTE></PRE>
/// @note The enum values are prefixed with "ns3__AllowedPaymentMethodType__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns3__AllowedPaymentMethodType
{
	ns3__AllowedPaymentMethodType__Default,	///< xs:token value="Default"
	ns3__AllowedPaymentMethodType__InstantPaymentOnly,	///< xs:token value="InstantPaymentOnly"
	ns3__AllowedPaymentMethodType__AnyFundingSource,	///< xs:token value="AnyFundingSource"
	ns3__AllowedPaymentMethodType__InstantFundingSource,	///< xs:token value="InstantFundingSource"
};

/// @brief "urn:ebay:apis:eBLBaseComponents":LandingPageType is a simpleType restriction of XSD type xs:token.
///
/// <PRE><BLOCKQUOTE>
///   LandingPageType This is the PayPal payment Landing Page details type (used by Express Checkout)
/// </BLOCKQUOTE></PRE>
/// @note The enum values are prefixed with "ns3__LandingPageType__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns3__LandingPageType
{
	ns3__LandingPageType__None,	///< xs:token value="None"
	ns3__LandingPageType__Login,	///< xs:token value="Login"
	ns3__LandingPageType__Billing,	///< xs:token value="Billing"
};

/// @brief "urn:ebay:apis:eBLBaseComponents":BillingCodeType is a simpleType restriction of XSD type xs:token.
///

/// </BLOCKQUOTE></PRE>
/// @note The enum values are prefixed with "ns3__BillingCodeType__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns3__BillingCodeType
{
	ns3__BillingCodeType__None,	///< xs:token value="None"
	ns3__BillingCodeType__MerchantInitiatedBilling,	///< xs:token value="MerchantInitiatedBilling"
	ns3__BillingCodeType__RecurringPayments,	///< xs:token value="RecurringPayments"
	ns3__BillingCodeType__MerchantInitiatedBillingSingleAgreement,	///< xs:token value="MerchantInitiatedBillingSingleAgreement"
	ns3__BillingCodeType__ChannelInitiatedBilling,	///< xs:token value="ChannelInitiatedBilling"
};

/// @brief "urn:ebay:apis:eBLBaseComponents":ApprovalTypeType is a simpleType restriction of XSD type xs:token.
///

/// </BLOCKQUOTE></PRE>
/// @note The enum values are prefixed with "ns3__ApprovalTypeType__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns3__ApprovalTypeType
{
	ns3__ApprovalTypeType__BillingAgreement,	///< xs:token value="BillingAgreement"
	ns3__ApprovalTypeType__Profile,	///< xs:token value="Profile"
};

/// @brief "urn:ebay:apis:eBLBaseComponents":ApprovalSubTypeType is a simpleType restriction of XSD type xs:token.
///

/// </BLOCKQUOTE></PRE>
/// @note The enum values are prefixed with "ns3__ApprovalSubTypeType__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns3__ApprovalSubTypeType
{
	ns3__ApprovalSubTypeType__None,	///< xs:token value="None"
	ns3__ApprovalSubTypeType__MerchantInitiatedBilling,	///< xs:token value="MerchantInitiatedBilling"
	ns3__ApprovalSubTypeType__MerchantInitiatedBillingSingleAgreement,	///< xs:token value="MerchantInitiatedBillingSingleAgreement"
	ns3__ApprovalSubTypeType__ChannelInitiatedBilling,	///< xs:token value="ChannelInitiatedBilling"
};

/// @brief "urn:ebay:apis:eBLBaseComponents":PendingStatusCodeType is a simpleType restriction of XSD type xs:token.
///
/// <PRE><BLOCKQUOTE>
///   PendingStatusCodeType The pending status for a PayPal Payment transaction which matches the output from IPN
/// </BLOCKQUOTE></PRE>
/// @note The enum values are prefixed with "ns3__PendingStatusCodeType__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns3__PendingStatusCodeType
{
	ns3__PendingStatusCodeType__none,	///< xs:token value="none"
	ns3__PendingStatusCodeType__echeck,	///< xs:token value="echeck"
	ns3__PendingStatusCodeType__intl,	///< xs:token value="intl"
	ns3__PendingStatusCodeType__verify,	///< xs:token value="verify"
	ns3__PendingStatusCodeType__address,	///< xs:token value="address"
	ns3__PendingStatusCodeType__unilateral,	///< xs:token value="unilateral"
	ns3__PendingStatusCodeType__other,	///< xs:token value="other"
	ns3__PendingStatusCodeType__upgrade,	///< xs:token value="upgrade"
	ns3__PendingStatusCodeType__multi_currency,	///< xs:token value="multi-currency"
	ns3__PendingStatusCodeType__authorization,	///< xs:token value="authorization"
	ns3__PendingStatusCodeType__order,	///< xs:token value="order"
	ns3__PendingStatusCodeType__payment_review,	///< xs:token value="payment-review"
	ns3__PendingStatusCodeType__regulatory_review,	///< xs:token value="regulatory-review"
	ns3__PendingStatusCodeType__delayed_disbursement,	///< xs:token value="delayed-disbursement"
};

/// @brief "urn:ebay:apis:eBLBaseComponents":ReceiverInfoCodeType is a simpleType restriction of XSD type xs:token.
///
/// <PRE><BLOCKQUOTE>
///   ReceiverInfoCodeType Payee identifier type for MassPay API
/// </BLOCKQUOTE></PRE>
/// @note The enum values are prefixed with "ns3__ReceiverInfoCodeType__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns3__ReceiverInfoCodeType
{
	ns3__ReceiverInfoCodeType__EmailAddress,	///< xs:token value="EmailAddress"
	ns3__ReceiverInfoCodeType__UserID,	///< xs:token value="UserID"
	ns3__ReceiverInfoCodeType__PhoneNumber,	///< xs:token value="PhoneNumber"
};

/// @brief "urn:ebay:apis:eBLBaseComponents":ReversalReasonCodeType is a simpleType restriction of XSD type xs:token.
///
/// <PRE><BLOCKQUOTE>
///   ReversalReasonCodeType Reason for a reversal on a PayPal transaction which matches the output from IPN
/// </BLOCKQUOTE></PRE>
/// @note The enum values are prefixed with "ns3__ReversalReasonCodeType__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns3__ReversalReasonCodeType
{
	ns3__ReversalReasonCodeType__none,	///< xs:token value="none"
	ns3__ReversalReasonCodeType__chargeback,	///< xs:token value="chargeback"
	ns3__ReversalReasonCodeType__guarantee,	///< xs:token value="guarantee"
	ns3__ReversalReasonCodeType__buyer_complaint,	///< xs:token value="buyer-complaint"
	ns3__ReversalReasonCodeType__refund,	///< xs:token value="refund"
	ns3__ReversalReasonCodeType__other,	///< xs:token value="other"
};

/// @brief "urn:ebay:apis:eBLBaseComponents":POSTransactionCodeType is a simpleType restriction of XSD type xs:token.
///
/// <PRE><BLOCKQUOTE>
///   POSTransactionCodeType
///   POS Transaction Code Type. F for Forced Post Transaction and S for Single Call Checkout
/// </BLOCKQUOTE></PRE>
/// @note The enum values are prefixed with "ns3__POSTransactionCodeType__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns3__POSTransactionCodeType
{
	ns3__POSTransactionCodeType__F = 'F',	///< xs:token value="F"
	ns3__POSTransactionCodeType__S = 'S',	///< xs:token value="S"
};

/// @brief "urn:ebay:apis:eBLBaseComponents":PaymentCodeType is a simpleType restriction of XSD type xs:token.
///
/// <PRE><BLOCKQUOTE>
///   PaymentCodeType This is the type of PayPal payment which matches the output from IPN.
/// </BLOCKQUOTE></PRE>
/// @note The enum values are prefixed with "ns3__PaymentCodeType__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns3__PaymentCodeType
{
	ns3__PaymentCodeType__none,	///< xs:token value="none"
	ns3__PaymentCodeType__echeck,	///< xs:token value="echeck"
	ns3__PaymentCodeType__instant,	///< xs:token value="instant"
};

/// @brief "urn:ebay:apis:eBLBaseComponents":RefundSourceCodeType is a simpleType restriction of XSD type xs:token.
///
/// <PRE><BLOCKQUOTE>
///   RefundSourceCodeType
///   This is the type of PayPal funding source that can be used for auto refund.
///   any - Means Merchant doesn't have any preference. PayPal can use any available funding source (Balance or eCheck)
///   default - Means merchant's preferred funding source as configured in his profile. (Balance or eCheck)
///   instant - Only Balance
///   echeck - Merchant prefers echeck. If PayPal balance can cover the refund amount, we will use PayPal balance. (balance or eCheck)
/// </BLOCKQUOTE></PRE>
/// @note The enum values are prefixed with "ns3__RefundSourceCodeType__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns3__RefundSourceCodeType
{
	ns3__RefundSourceCodeType__any,	///< xs:token value="any"
	ns3__RefundSourceCodeType__default_,	///< xs:token value="default"
	ns3__RefundSourceCodeType__instant,	///< xs:token value="instant"
	ns3__RefundSourceCodeType__echeck,	///< xs:token value="echeck"
};

/// @brief "urn:ebay:apis:eBLBaseComponents":PayPalUserStatusCodeType is a simpleType restriction of XSD type xs:token.
///
/// <PRE><BLOCKQUOTE>
///   PayPalUserStatusCodeType PayPal status of a user Address
/// </BLOCKQUOTE></PRE>
/// @note The enum values are prefixed with "ns3__PayPalUserStatusCodeType__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns3__PayPalUserStatusCodeType
{
	ns3__PayPalUserStatusCodeType__verified,	///< xs:token value="verified"
	ns3__PayPalUserStatusCodeType__unverified,	///< xs:token value="unverified"
};

/// @brief "urn:ebay:apis:eBLBaseComponents":MerchantPullPaymentCodeType is a simpleType restriction of XSD type xs:token.
///
/// <PRE><BLOCKQUOTE>
///   MerchantPullPaymentCodeType Type of Payment to be initiated by the merchant
/// </BLOCKQUOTE></PRE>
/// @note The enum values are prefixed with "ns3__MerchantPullPaymentCodeType__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns3__MerchantPullPaymentCodeType
{
	ns3__MerchantPullPaymentCodeType__Any,	///< xs:token value="Any"
	ns3__MerchantPullPaymentCodeType__InstantOnly,	///< xs:token value="InstantOnly"
	ns3__MerchantPullPaymentCodeType__EcheckOnly,	///< xs:token value="EcheckOnly"
};

/// @brief "urn:ebay:apis:eBLBaseComponents":MerchantPullStatusCodeType is a simpleType restriction of XSD type xs:token.
///
/// <PRE><BLOCKQUOTE>
///   MerchantPullStatusCodeType Status of the merchant pull
/// </BLOCKQUOTE></PRE>
/// @note The enum values are prefixed with "ns3__MerchantPullStatusCodeType__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns3__MerchantPullStatusCodeType
{
	ns3__MerchantPullStatusCodeType__Active,	///< xs:token value="Active"
	ns3__MerchantPullStatusCodeType__Canceled,	///< xs:token value="Canceled"
};

/// @brief "urn:ebay:apis:eBLBaseComponents":PaymentTransactionStatusCodeType is a simpleType restriction of XSD type xs:token.
///
/// <PRE><BLOCKQUOTE>
///   PaymentTransactionStatusCodeType The status of the PayPal payment.
/// </BLOCKQUOTE></PRE>
/// @note The enum values are prefixed with "ns3__PaymentTransactionStatusCodeType__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns3__PaymentTransactionStatusCodeType
{
	ns3__PaymentTransactionStatusCodeType__Pending,	///< xs:token value="Pending"
	ns3__PaymentTransactionStatusCodeType__Processing,	///< xs:token value="Processing"
	ns3__PaymentTransactionStatusCodeType__Success,	///< xs:token value="Success"
	ns3__PaymentTransactionStatusCodeType__Denied,	///< xs:token value="Denied"
	ns3__PaymentTransactionStatusCodeType__Reversed,	///< xs:token value="Reversed"
};

/// @brief "urn:ebay:apis:eBLBaseComponents":PaymentTransactionClassCodeType is a simpleType restriction of XSD type xs:token.
///
/// <PRE><BLOCKQUOTE>
///   PaymentTransactionClassCodeType The Type of PayPal payment.
/// </BLOCKQUOTE></PRE>
/// @note The enum values are prefixed with "ns3__PaymentTransactionClassCodeType__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns3__PaymentTransactionClassCodeType
{
	ns3__PaymentTransactionClassCodeType__All,	///< xs:token value="All"
	ns3__PaymentTransactionClassCodeType__Sent,	///< xs:token value="Sent"
	ns3__PaymentTransactionClassCodeType__Received,	///< xs:token value="Received"
	ns3__PaymentTransactionClassCodeType__MassPay,	///< xs:token value="MassPay"
	ns3__PaymentTransactionClassCodeType__MoneyRequest,	///< xs:token value="MoneyRequest"
	ns3__PaymentTransactionClassCodeType__FundsAdded,	///< xs:token value="FundsAdded"
	ns3__PaymentTransactionClassCodeType__FundsWithdrawn,	///< xs:token value="FundsWithdrawn"
	ns3__PaymentTransactionClassCodeType__PayPalDebitCard,	///< xs:token value="PayPalDebitCard"
	ns3__PaymentTransactionClassCodeType__Referral,	///< xs:token value="Referral"
	ns3__PaymentTransactionClassCodeType__Fee,	///< xs:token value="Fee"
	ns3__PaymentTransactionClassCodeType__Subscription,	///< xs:token value="Subscription"
	ns3__PaymentTransactionClassCodeType__Dividend,	///< xs:token value="Dividend"
	ns3__PaymentTransactionClassCodeType__Billpay,	///< xs:token value="Billpay"
	ns3__PaymentTransactionClassCodeType__Refund,	///< xs:token value="Refund"
	ns3__PaymentTransactionClassCodeType__CurrencyConversions,	///< xs:token value="CurrencyConversions"
	ns3__PaymentTransactionClassCodeType__BalanceTransfer,	///< xs:token value="BalanceTransfer"
	ns3__PaymentTransactionClassCodeType__Reversal,	///< xs:token value="Reversal"
	ns3__PaymentTransactionClassCodeType__Shipping,	///< xs:token value="Shipping"
	ns3__PaymentTransactionClassCodeType__BalanceAffecting,	///< xs:token value="BalanceAffecting"
	ns3__PaymentTransactionClassCodeType__ECheck,	///< xs:token value="ECheck"
	ns3__PaymentTransactionClassCodeType__ForcedPostTransaction,	///< xs:token value="ForcedPostTransaction"
	ns3__PaymentTransactionClassCodeType__NonReferencedRefunds,	///< xs:token value="NonReferencedRefunds"
};

/// @brief "urn:ebay:apis:eBLBaseComponents":MatchStatusCodeType is a simpleType restriction of XSD type xs:token.
///
/// <PRE><BLOCKQUOTE>
///   MatchStatusCodeType This is the PayPal (street/zip) match code
/// </BLOCKQUOTE></PRE>
/// @note The enum values are prefixed with "ns3__MatchStatusCodeType__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns3__MatchStatusCodeType
{
	ns3__MatchStatusCodeType__None,	///< xs:token value="None"
	ns3__MatchStatusCodeType__Matched,	///< xs:token value="Matched"
	ns3__MatchStatusCodeType__Unmatched,	///< xs:token value="Unmatched"
};

/// @brief "urn:ebay:apis:eBLBaseComponents":CompleteCodeType is a simpleType restriction of XSD type xs:token.
///
/// <PRE><BLOCKQUOTE>
///   CompleteCodeType This is the PayPal DoCapture CompleteType code
/// </BLOCKQUOTE></PRE>
/// @note The enum values are prefixed with "ns3__CompleteCodeType__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns3__CompleteCodeType
{
	ns3__CompleteCodeType__NotComplete,	///< xs:token value="NotComplete"
	ns3__CompleteCodeType__Complete,	///< xs:token value="Complete"
};

/// @brief "urn:ebay:apis:eBLBaseComponents":TransactionEntityType is a simpleType restriction of XSD type xs:token.
///
/// <PRE><BLOCKQUOTE>
///   TransactionEntityType This is the PayPal DoAuthorization TransactionEntityType code
/// </BLOCKQUOTE></PRE>
/// @note The enum values are prefixed with "ns3__TransactionEntityType__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns3__TransactionEntityType
{
	ns3__TransactionEntityType__None,	///< xs:token value="None"
	ns3__TransactionEntityType__Auth,	///< xs:token value="Auth"
	ns3__TransactionEntityType__Reauth,	///< xs:token value="Reauth"
	ns3__TransactionEntityType__Order,	///< xs:token value="Order"
	ns3__TransactionEntityType__Payment,	///< xs:token value="Payment"
};

/// @brief "urn:ebay:apis:eBLBaseComponents":MobileRecipientCodeType is a simpleType restriction of XSD type xs:token.
///
/// <PRE><BLOCKQUOTE>
///   MobileRecipientCodeType These are the accepted types of recipients for mobile-originated transactions
/// </BLOCKQUOTE></PRE>
/// @note The enum values are prefixed with "ns3__MobileRecipientCodeType__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns3__MobileRecipientCodeType
{
	ns3__MobileRecipientCodeType__PhoneNumber,	///< xs:token value="PhoneNumber"
	ns3__MobileRecipientCodeType__EmailAddress,	///< xs:token value="EmailAddress"
};

/// @brief "urn:ebay:apis:eBLBaseComponents":MobilePaymentCodeType is a simpleType restriction of XSD type xs:token.
///
/// <PRE><BLOCKQUOTE>
///   MobilePaymentCodeType These are the accepted types of mobile payments
/// </BLOCKQUOTE></PRE>
/// @note The enum values are prefixed with "ns3__MobilePaymentCodeType__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns3__MobilePaymentCodeType
{
	ns3__MobilePaymentCodeType__P2P,	///< xs:token value="P2P"
	ns3__MobilePaymentCodeType__HardGoods,	///< xs:token value="HardGoods"
	ns3__MobilePaymentCodeType__Donation,	///< xs:token value="Donation"
	ns3__MobilePaymentCodeType__TopUp,	///< xs:token value="TopUp"
};

/// @brief "urn:ebay:apis:eBLBaseComponents":MarketingCategoryType is a simpleType restriction of XSD type xs:token.
///
/// <PRE><BLOCKQUOTE>
///   MarketingCategoryType
/// </BLOCKQUOTE></PRE>
/// @note The enum values are prefixed with "ns3__MarketingCategoryType__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns3__MarketingCategoryType
{
	ns3__MarketingCategoryType__Marketing_Category_Default,	///< xs:token value="Marketing-Category-Default"
	ns3__MarketingCategoryType__Marketing_Category1,	///< xs:token value="Marketing-Category1"
	ns3__MarketingCategoryType__Marketing_Category2,	///< xs:token value="Marketing-Category2"
	ns3__MarketingCategoryType__Marketing_Category3,	///< xs:token value="Marketing-Category3"
	ns3__MarketingCategoryType__Marketing_Category4,	///< xs:token value="Marketing-Category4"
	ns3__MarketingCategoryType__Marketing_Category5,	///< xs:token value="Marketing-Category5"
	ns3__MarketingCategoryType__Marketing_Category6,	///< xs:token value="Marketing-Category6"
	ns3__MarketingCategoryType__Marketing_Category7,	///< xs:token value="Marketing-Category7"
	ns3__MarketingCategoryType__Marketing_Category8,	///< xs:token value="Marketing-Category8"
	ns3__MarketingCategoryType__Marketing_Category9,	///< xs:token value="Marketing-Category9"
	ns3__MarketingCategoryType__Marketing_Category10,	///< xs:token value="Marketing-Category10"
	ns3__MarketingCategoryType__Marketing_Category11,	///< xs:token value="Marketing-Category11"
	ns3__MarketingCategoryType__Marketing_Category12,	///< xs:token value="Marketing-Category12"
	ns3__MarketingCategoryType__Marketing_Category13,	///< xs:token value="Marketing-Category13"
	ns3__MarketingCategoryType__Marketing_Category14,	///< xs:token value="Marketing-Category14"
	ns3__MarketingCategoryType__Marketing_Category15,	///< xs:token value="Marketing-Category15"
	ns3__MarketingCategoryType__Marketing_Category16,	///< xs:token value="Marketing-Category16"
	ns3__MarketingCategoryType__Marketing_Category17,	///< xs:token value="Marketing-Category17"
	ns3__MarketingCategoryType__Marketing_Category18,	///< xs:token value="Marketing-Category18"
	ns3__MarketingCategoryType__Marketing_Category19,	///< xs:token value="Marketing-Category19"
	ns3__MarketingCategoryType__Marketing_Category20,	///< xs:token value="Marketing-Category20"
};

/// @brief "urn:ebay:apis:eBLBaseComponents":BusinessTypeType is a simpleType restriction of XSD type xs:token.
///
/// <PRE><BLOCKQUOTE>
///   BusinessTypeType
/// </BLOCKQUOTE></PRE>
/// @note The enum values are prefixed with "ns3__BusinessTypeType__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns3__BusinessTypeType
{
	ns3__BusinessTypeType__Unknown,	///< xs:token value="Unknown"
	ns3__BusinessTypeType__Individual,	///< xs:token value="Individual"
	ns3__BusinessTypeType__Proprietorship,	///< xs:token value="Proprietorship"
	ns3__BusinessTypeType__Partnership,	///< xs:token value="Partnership"
	ns3__BusinessTypeType__Corporation,	///< xs:token value="Corporation"
	ns3__BusinessTypeType__Nonprofit,	///< xs:token value="Nonprofit"
	ns3__BusinessTypeType__Government,	///< xs:token value="Government"
};

/// @brief "urn:ebay:apis:eBLBaseComponents":BusinessCategoryType is a simpleType restriction of XSD type xs:token.
///
/// <PRE><BLOCKQUOTE>
///   BusinessCategoryType
/// </BLOCKQUOTE></PRE>
/// @note The enum values are prefixed with "ns3__BusinessCategoryType__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns3__BusinessCategoryType
{
	ns3__BusinessCategoryType__Category_Unspecified,	///< xs:token value="Category-Unspecified"
	ns3__BusinessCategoryType__Antiques,	///< xs:token value="Antiques"
	ns3__BusinessCategoryType__Arts,	///< xs:token value="Arts"
	ns3__BusinessCategoryType__Automotive,	///< xs:token value="Automotive"
	ns3__BusinessCategoryType__Beauty,	///< xs:token value="Beauty"
	ns3__BusinessCategoryType__Books,	///< xs:token value="Books"
	ns3__BusinessCategoryType__Business,	///< xs:token value="Business"
	ns3__BusinessCategoryType__Cameras_and_Photography,	///< xs:token value="Cameras-and-Photography"
	ns3__BusinessCategoryType__Clothing,	///< xs:token value="Clothing"
	ns3__BusinessCategoryType__Collectibles,	///< xs:token value="Collectibles"
	ns3__BusinessCategoryType__Computer_Hardware_and_Software,	///< xs:token value="Computer-Hardware-and-Software"
	ns3__BusinessCategoryType__Culture_and_Religion,	///< xs:token value="Culture-and-Religion"
	ns3__BusinessCategoryType__Electronics_and_Telecom,	///< xs:token value="Electronics-and-Telecom"
	ns3__BusinessCategoryType__Entertainment,	///< xs:token value="Entertainment"
	ns3__BusinessCategoryType__Entertainment_Memorabilia,	///< xs:token value="Entertainment-Memorabilia"
	ns3__BusinessCategoryType__Food_Drink_and_Nutrition,	///< xs:token value="Food-Drink-and-Nutrition"
	ns3__BusinessCategoryType__Gifts_and_Flowers,	///< xs:token value="Gifts-and-Flowers"
	ns3__BusinessCategoryType__Hobbies_Toys_and_Games,	///< xs:token value="Hobbies-Toys-and-Games"
	ns3__BusinessCategoryType__Home_and_Garden,	///< xs:token value="Home-and-Garden"
	ns3__BusinessCategoryType__Internet_and_Network_Services,	///< xs:token value="Internet-and-Network-Services"
	ns3__BusinessCategoryType__Media_and_Entertainment,	///< xs:token value="Media-and-Entertainment"
	ns3__BusinessCategoryType__Medical_and_Pharmaceutical,	///< xs:token value="Medical-and-Pharmaceutical"
	ns3__BusinessCategoryType__Money_Service_Businesses,	///< xs:token value="Money-Service-Businesses"
	ns3__BusinessCategoryType__Non_Profit_Political_and_Religion,	///< xs:token value="Non-Profit-Political-and-Religion"
	ns3__BusinessCategoryType__Not_Elsewhere_Classified,	///< xs:token value="Not-Elsewhere-Classified"
	ns3__BusinessCategoryType__Pets_and_Animals,	///< xs:token value="Pets-and-Animals"
	ns3__BusinessCategoryType__Real_Estate,	///< xs:token value="Real-Estate"
	ns3__BusinessCategoryType__Services,	///< xs:token value="Services"
	ns3__BusinessCategoryType__Sports_and_Recreation,	///< xs:token value="Sports-and-Recreation"
	ns3__BusinessCategoryType__Travel,	///< xs:token value="Travel"
	ns3__BusinessCategoryType__Other_Categories,	///< xs:token value="Other-Categories"
};

/// @brief "urn:ebay:apis:eBLBaseComponents":BusinessSubCategoryType is a simpleType restriction of XSD type xs:token.
///
/// <PRE><BLOCKQUOTE>
///   BusinessSubCategoryType
/// </BLOCKQUOTE></PRE>
/// @note The enum values are prefixed with "ns3__BusinessSubCategoryType__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns3__BusinessSubCategoryType
{
	ns3__BusinessSubCategoryType__SubCategory_Unspecified,	///< xs:token value="SubCategory-Unspecified"
	ns3__BusinessSubCategoryType__ANTIQUES_General,	///< xs:token value="ANTIQUES-General"
	ns3__BusinessSubCategoryType__ANTIQUES_Antiquities,	///< xs:token value="ANTIQUES-Antiquities"
	ns3__BusinessSubCategoryType__ANTIQUES_Decorative,	///< xs:token value="ANTIQUES-Decorative"
	ns3__BusinessSubCategoryType__ANTIQUES_Books_Manuscripts,	///< xs:token value="ANTIQUES-Books-Manuscripts"
	ns3__BusinessSubCategoryType__ANTIQUES_Furniture,	///< xs:token value="ANTIQUES-Furniture"
	ns3__BusinessSubCategoryType__ANTIQUES_Glass,	///< xs:token value="ANTIQUES-Glass"
	ns3__BusinessSubCategoryType__ANTIQUES_RugsCarpets,	///< xs:token value="ANTIQUES-RugsCarpets"
	ns3__BusinessSubCategoryType__ANTIQUES_Pottery,	///< xs:token value="ANTIQUES-Pottery"
	ns3__BusinessSubCategoryType__ANTIQUES_Cultural,	///< xs:token value="ANTIQUES-Cultural"
	ns3__BusinessSubCategoryType__ANTIQUES_Artifacts_Grave_related_and_Native_American_Crafts,	///< xs:token value="ANTIQUES-Artifacts-Grave-related-and-Native-American-Crafts"
	ns3__BusinessSubCategoryType__ARTSANDCRAFTS_General,	///< xs:token value="ARTSANDCRAFTS-General"
	ns3__BusinessSubCategoryType__ARTSANDCRAFTS_Art_Dealer_and_Galleries,	///< xs:token value="ARTSANDCRAFTS-Art-Dealer-and-Galleries"
	ns3__BusinessSubCategoryType__ARTSANDCRAFTS_Prints,	///< xs:token value="ARTSANDCRAFTS-Prints"
	ns3__BusinessSubCategoryType__ARTSANDCRAFTS_Painting,	///< xs:token value="ARTSANDCRAFTS-Painting"
	ns3__BusinessSubCategoryType__ARTSANDCRAFTS_Photography,	///< xs:token value="ARTSANDCRAFTS-Photography"
	ns3__BusinessSubCategoryType__ARTSANDCRAFTS_Reproductions,	///< xs:token value="ARTSANDCRAFTS-Reproductions"
	ns3__BusinessSubCategoryType__ARTSANDCRAFTS_Sculptures,	///< xs:token value="ARTSANDCRAFTS-Sculptures"
	ns3__BusinessSubCategoryType__ARTSANDCRAFTS_Woodworking,	///< xs:token value="ARTSANDCRAFTS-Woodworking"
	ns3__BusinessSubCategoryType__ARTSANDCRAFTS_Art_and_Craft_Supplies,	///< xs:token value="ARTSANDCRAFTS-Art-and-Craft-Supplies"
	ns3__BusinessSubCategoryType__ARTSANDCRAFTS_Fabrics_and_Sewing,	///< xs:token value="ARTSANDCRAFTS-Fabrics-and-Sewing"
	ns3__BusinessSubCategoryType__ARTSANDCRAFTS_Quilting,	///< xs:token value="ARTSANDCRAFTS-Quilting"
	ns3__BusinessSubCategoryType__ARTSANDCRAFTS_Scrapbooking,	///< xs:token value="ARTSANDCRAFTS-Scrapbooking"
	ns3__BusinessSubCategoryType__AUTOMOTIVE_General,	///< xs:token value="AUTOMOTIVE-General"
	ns3__BusinessSubCategoryType__AUTOMOTIVE_Autos,	///< xs:token value="AUTOMOTIVE-Autos"
	ns3__BusinessSubCategoryType__AUTOMOTIVE_Aviation,	///< xs:token value="AUTOMOTIVE-Aviation"
	ns3__BusinessSubCategoryType__AUTOMOTIVE_Motorcycles,	///< xs:token value="AUTOMOTIVE-Motorcycles"
	ns3__BusinessSubCategoryType__AUTOMOTIVE_Parts_and_Supplies,	///< xs:token value="AUTOMOTIVE-Parts-and-Supplies"
	ns3__BusinessSubCategoryType__AUTOMOTIVE_Services,	///< xs:token value="AUTOMOTIVE-Services"
	ns3__BusinessSubCategoryType__AUTOMOTIVE_Vintage_and_Collectible_Vehicles,	///< xs:token value="AUTOMOTIVE-Vintage-and-Collectible-Vehicles"
	ns3__BusinessSubCategoryType__BEAUTY_General,	///< xs:token value="BEAUTY-General"
	ns3__BusinessSubCategoryType__BEAUTY_Body_Care_Personal_Hygiene,	///< xs:token value="BEAUTY-Body-Care-Personal-Hygiene"
	ns3__BusinessSubCategoryType__BEAUTY_Fragrances_and_Perfumes,	///< xs:token value="BEAUTY-Fragrances-and-Perfumes"
	ns3__BusinessSubCategoryType__BEAUTY_Makeup,	///< xs:token value="BEAUTY-Makeup"
	ns3__BusinessSubCategoryType__BOOKS_General,	///< xs:token value="BOOKS-General"
	ns3__BusinessSubCategoryType__BOOKS_Audio_Books,	///< xs:token value="BOOKS-Audio-Books"
	ns3__BusinessSubCategoryType__BOOKS_Children_Books,	///< xs:token value="BOOKS-Children-Books"
	ns3__BusinessSubCategoryType__BOOKS_Computer_Books,	///< xs:token value="BOOKS-Computer-Books"
	ns3__BusinessSubCategoryType__BOOKS_Educational_and_Textbooks,	///< xs:token value="BOOKS-Educational-and-Textbooks"
	ns3__BusinessSubCategoryType__BOOKS_Magazines,	///< xs:token value="BOOKS-Magazines"
	ns3__BusinessSubCategoryType__BOOKS_Fiction_and_Literature,	///< xs:token value="BOOKS-Fiction-and-Literature"
	ns3__BusinessSubCategoryType__BOOKS_NonFiction,	///< xs:token value="BOOKS-NonFiction"
	ns3__BusinessSubCategoryType__BOOKS_Vintage_and_Collectibles,	///< xs:token value="BOOKS-Vintage-and-Collectibles"
	ns3__BusinessSubCategoryType__BUSINESS_General,	///< xs:token value="BUSINESS-General"
	ns3__BusinessSubCategoryType__BUSINESS_Agricultural,	///< xs:token value="BUSINESS-Agricultural"
	ns3__BusinessSubCategoryType__BUSINESS_Construction,	///< xs:token value="BUSINESS-Construction"
	ns3__BusinessSubCategoryType__BUSINESS_Educational,	///< xs:token value="BUSINESS-Educational"
	ns3__BusinessSubCategoryType__BUSINESS_Industrial,	///< xs:token value="BUSINESS-Industrial"
	ns3__BusinessSubCategoryType__BUSINESS_Office_Supplies_and_Equipment,	///< xs:token value="BUSINESS-Office-Supplies-and-Equipment"
	ns3__BusinessSubCategoryType__BUSINESS_GeneralServices,	///< xs:token value="BUSINESS-GeneralServices"
	ns3__BusinessSubCategoryType__BUSINESS_Advertising,	///< xs:token value="BUSINESS-Advertising"
	ns3__BusinessSubCategoryType__BUSINESS_Employment,	///< xs:token value="BUSINESS-Employment"
	ns3__BusinessSubCategoryType__BUSINESS_Marketing,	///< xs:token value="BUSINESS-Marketing"
	ns3__BusinessSubCategoryType__BUSINESS_Meeting_Planners,	///< xs:token value="BUSINESS-Meeting-Planners"
	ns3__BusinessSubCategoryType__BUSINESS_Messaging_and_Paging_Services,	///< xs:token value="BUSINESS-Messaging-and-Paging-Services"
	ns3__BusinessSubCategoryType__BUSINESS_Seminars,	///< xs:token value="BUSINESS-Seminars"
	ns3__BusinessSubCategoryType__BUSINESS_Publishing,	///< xs:token value="BUSINESS-Publishing"
	ns3__BusinessSubCategoryType__BUSINESS_Shipping_and_Packaging,	///< xs:token value="BUSINESS-Shipping-and-Packaging"
	ns3__BusinessSubCategoryType__BUSINESS_Wholesale,	///< xs:token value="BUSINESS-Wholesale"
	ns3__BusinessSubCategoryType__BUSINESS_Industrial_Solvents,	///< xs:token value="BUSINESS-Industrial-Solvents"
	ns3__BusinessSubCategoryType__CAMERASANDPHOTOGRAPHY_General,	///< xs:token value="CAMERASANDPHOTOGRAPHY-General"
	ns3__BusinessSubCategoryType__CAMERASANDPHOTOGRAPHY_Accessories,	///< xs:token value="CAMERASANDPHOTOGRAPHY-Accessories"
	ns3__BusinessSubCategoryType__CAMERASANDPHOTOGRAPHY_Cameras,	///< xs:token value="CAMERASANDPHOTOGRAPHY-Cameras"
	ns3__BusinessSubCategoryType__CAMERASANDPHOTOGRAPHY_Video_Equipment,	///< xs:token value="CAMERASANDPHOTOGRAPHY-Video-Equipment"
	ns3__BusinessSubCategoryType__CAMERASANDPHOTOGRAPHY_Film,	///< xs:token value="CAMERASANDPHOTOGRAPHY-Film"
	ns3__BusinessSubCategoryType__CAMERASANDPHOTOGRAPHY_Supplies,	///< xs:token value="CAMERASANDPHOTOGRAPHY-Supplies"
	ns3__BusinessSubCategoryType__CLOTHING_Accessories,	///< xs:token value="CLOTHING-Accessories"
	ns3__BusinessSubCategoryType__CLOTHING_Babies_Clothing_and_Supplies,	///< xs:token value="CLOTHING-Babies-Clothing-and-Supplies"
	ns3__BusinessSubCategoryType__CLOTHING_Childrens_Clothing,	///< xs:token value="CLOTHING-Childrens-Clothing"
	ns3__BusinessSubCategoryType__CLOTHING_Mens_Clothing,	///< xs:token value="CLOTHING-Mens-Clothing"
	ns3__BusinessSubCategoryType__CLOTHING_Shoes,	///< xs:token value="CLOTHING-Shoes"
	ns3__BusinessSubCategoryType__CLOTHING_Wedding_Clothing,	///< xs:token value="CLOTHING-Wedding-Clothing"
	ns3__BusinessSubCategoryType__CLOTHING_Womens_Clothing,	///< xs:token value="CLOTHING-Womens-Clothing"
	ns3__BusinessSubCategoryType__CLOTHING_General,	///< xs:token value="CLOTHING-General"
	ns3__BusinessSubCategoryType__CLOTHING_Jewelry,	///< xs:token value="CLOTHING-Jewelry"
	ns3__BusinessSubCategoryType__CLOTHING_Watches_and_Clocks,	///< xs:token value="CLOTHING-Watches-and-Clocks"
	ns3__BusinessSubCategoryType__CLOTHING_Rings,	///< xs:token value="CLOTHING-Rings"
	ns3__BusinessSubCategoryType__COLLECTIBLES_General,	///< xs:token value="COLLECTIBLES-General"
	ns3__BusinessSubCategoryType__COLLECTIBLES_Advertising,	///< xs:token value="COLLECTIBLES-Advertising"
	ns3__BusinessSubCategoryType__COLLECTIBLES_Animals,	///< xs:token value="COLLECTIBLES-Animals"
	ns3__BusinessSubCategoryType__COLLECTIBLES_Animation,	///< xs:token value="COLLECTIBLES-Animation"
	ns3__BusinessSubCategoryType__COLLECTIBLES_Coin_Operated_Banks_and_Casinos,	///< xs:token value="COLLECTIBLES-Coin-Operated-Banks-and-Casinos"
	ns3__BusinessSubCategoryType__COLLECTIBLES_Coins_and_Paper_Money,	///< xs:token value="COLLECTIBLES-Coins-and-Paper-Money"
	ns3__BusinessSubCategoryType__COLLECTIBLES_Comics,	///< xs:token value="COLLECTIBLES-Comics"
	ns3__BusinessSubCategoryType__COLLECTIBLES_Decorative,	///< xs:token value="COLLECTIBLES-Decorative"
	ns3__BusinessSubCategoryType__COLLECTIBLES_Disneyana,	///< xs:token value="COLLECTIBLES-Disneyana"
	ns3__BusinessSubCategoryType__COLLECTIBLES_Holiday,	///< xs:token value="COLLECTIBLES-Holiday"
	ns3__BusinessSubCategoryType__COLLECTIBLES_Knives_and_Swords,	///< xs:token value="COLLECTIBLES-Knives-and-Swords"
	ns3__BusinessSubCategoryType__COLLECTIBLES_Militaria,	///< xs:token value="COLLECTIBLES-Militaria"
	ns3__BusinessSubCategoryType__COLLECTIBLES_Postcards_and_Paper,	///< xs:token value="COLLECTIBLES-Postcards-and-Paper"
	ns3__BusinessSubCategoryType__COLLECTIBLES_Stamps,	///< xs:token value="COLLECTIBLES-Stamps"
	ns3__BusinessSubCategoryType__COMPUTERHARDWAREANDSOFTWARE_General,	///< xs:token value="COMPUTERHARDWAREANDSOFTWARE-General"
	ns3__BusinessSubCategoryType__COMPUTERHARDWAREANDSOFTWARE_Desktop_PCs,	///< xs:token value="COMPUTERHARDWAREANDSOFTWARE-Desktop-PCs"
	ns3__BusinessSubCategoryType__COMPUTERHARDWAREANDSOFTWARE_Monitors,	///< xs:token value="COMPUTERHARDWAREANDSOFTWARE-Monitors"
	ns3__BusinessSubCategoryType__COMPUTERHARDWAREANDSOFTWARE_Hardware,	///< xs:token value="COMPUTERHARDWAREANDSOFTWARE-Hardware"
	ns3__BusinessSubCategoryType__COMPUTERHARDWAREANDSOFTWARE_Peripherals,	///< xs:token value="COMPUTERHARDWAREANDSOFTWARE-Peripherals"
	ns3__BusinessSubCategoryType__COMPUTERHARDWAREANDSOFTWARE_Laptops_Notebooks_PDAs,	///< xs:token value="COMPUTERHARDWAREANDSOFTWARE-Laptops-Notebooks-PDAs"
	ns3__BusinessSubCategoryType__COMPUTERHARDWAREANDSOFTWARE_Networking_Equipment,	///< xs:token value="COMPUTERHARDWAREANDSOFTWARE-Networking-Equipment"
	ns3__BusinessSubCategoryType__COMPUTERHARDWAREANDSOFTWARE_Parts_and_Accessories,	///< xs:token value="COMPUTERHARDWAREANDSOFTWARE-Parts-and-Accessories"
	ns3__BusinessSubCategoryType__COMPUTERHARDWAREANDSOFTWARE_GeneralSoftware,	///< xs:token value="COMPUTERHARDWAREANDSOFTWARE-GeneralSoftware"
	ns3__BusinessSubCategoryType__COMPUTERHARDWAREANDSOFTWARE_Oem_Software,	///< xs:token value="COMPUTERHARDWAREANDSOFTWARE-Oem-Software"
	ns3__BusinessSubCategoryType__COMPUTERHARDWAREANDSOFTWARE_Academic_Software,	///< xs:token value="COMPUTERHARDWAREANDSOFTWARE-Academic-Software"
	ns3__BusinessSubCategoryType__COMPUTERHARDWAREANDSOFTWARE_Beta_Software,	///< xs:token value="COMPUTERHARDWAREANDSOFTWARE-Beta-Software"
	ns3__BusinessSubCategoryType__COMPUTERHARDWAREANDSOFTWARE_Game_Software,	///< xs:token value="COMPUTERHARDWAREANDSOFTWARE-Game-Software"
	ns3__BusinessSubCategoryType__COMPUTERHARDWAREANDSOFTWARE_Data_Processing_Svc,	///< xs:token value="COMPUTERHARDWAREANDSOFTWARE-Data-Processing-Svc"
	ns3__BusinessSubCategoryType__CULTUREANDRELIGION_General,	///< xs:token value="CULTUREANDRELIGION-General"
	ns3__BusinessSubCategoryType__CULTUREANDRELIGION_Christianity,	///< xs:token value="CULTUREANDRELIGION-Christianity"
	ns3__BusinessSubCategoryType__CULTUREANDRELIGION_Metaphysical,	///< xs:token value="CULTUREANDRELIGION-Metaphysical"
	ns3__BusinessSubCategoryType__CULTUREANDRELIGION_New_Age,	///< xs:token value="CULTUREANDRELIGION-New-Age"
	ns3__BusinessSubCategoryType__CULTUREANDRELIGION_Organizations,	///< xs:token value="CULTUREANDRELIGION-Organizations"
	ns3__BusinessSubCategoryType__CULTUREANDRELIGION_Other_Faiths,	///< xs:token value="CULTUREANDRELIGION-Other-Faiths"
	ns3__BusinessSubCategoryType__CULTUREANDRELIGION_Collectibles,	///< xs:token value="CULTUREANDRELIGION-Collectibles"
	ns3__BusinessSubCategoryType__ELECTRONICSANDTELECOM_GeneralTelecom,	///< xs:token value="ELECTRONICSANDTELECOM-GeneralTelecom"
	ns3__BusinessSubCategoryType__ELECTRONICSANDTELECOM_Cell_Phones_and_Pagers,	///< xs:token value="ELECTRONICSANDTELECOM-Cell-Phones-and-Pagers"
	ns3__BusinessSubCategoryType__ELECTRONICSANDTELECOM_Telephone_Cards,	///< xs:token value="ELECTRONICSANDTELECOM-Telephone-Cards"
	ns3__BusinessSubCategoryType__ELECTRONICSANDTELECOM_Telephone_Equipment,	///< xs:token value="ELECTRONICSANDTELECOM-Telephone-Equipment"
	ns3__BusinessSubCategoryType__ELECTRONICSANDTELECOM_Telephone_Services,	///< xs:token value="ELECTRONICSANDTELECOM-Telephone-Services"
	ns3__BusinessSubCategoryType__ELECTRONICSANDTELECOM_GeneralElectronics,	///< xs:token value="ELECTRONICSANDTELECOM-GeneralElectronics"
	ns3__BusinessSubCategoryType__ELECTRONICSANDTELECOM_Car_Audio_and_Electronics,	///< xs:token value="ELECTRONICSANDTELECOM-Car-Audio-and-Electronics"
	ns3__BusinessSubCategoryType__ELECTRONICSANDTELECOM_Home_Electronics,	///< xs:token value="ELECTRONICSANDTELECOM-Home-Electronics"
	ns3__BusinessSubCategoryType__ELECTRONICSANDTELECOM_Home_Audio,	///< xs:token value="ELECTRONICSANDTELECOM-Home-Audio"
	ns3__BusinessSubCategoryType__ELECTRONICSANDTELECOM_Gadgets_and_other_electronics,	///< xs:token value="ELECTRONICSANDTELECOM-Gadgets-and-other-electronics"
	ns3__BusinessSubCategoryType__ELECTRONICSANDTELECOM_Batteries,	///< xs:token value="ELECTRONICSANDTELECOM-Batteries"
	ns3__BusinessSubCategoryType__ELECTRONICSANDTELECOM_ScannersRadios,	///< xs:token value="ELECTRONICSANDTELECOM-ScannersRadios"
	ns3__BusinessSubCategoryType__ELECTRONICSANDTELECOM_Radar_Dectors,	///< xs:token value="ELECTRONICSANDTELECOM-Radar-Dectors"
	ns3__BusinessSubCategoryType__ELECTRONICSANDTELECOM_Radar_Jamming_Devices,	///< xs:token value="ELECTRONICSANDTELECOM-Radar-Jamming-Devices"
	ns3__BusinessSubCategoryType__ELECTRONICSANDTELECOM_Satellite_and_Cable_TV_Descramblers,	///< xs:token value="ELECTRONICSANDTELECOM-Satellite-and-Cable-TV-Descramblers"
	ns3__BusinessSubCategoryType__ELECTRONICSANDTELECOM_Surveillance_Equipment,	///< xs:token value="ELECTRONICSANDTELECOM-Surveillance-Equipment"
	ns3__BusinessSubCategoryType__ENTERTAINMENT_General,	///< xs:token value="ENTERTAINMENT-General"
	ns3__BusinessSubCategoryType__ENTERTAINMENT_Movies,	///< xs:token value="ENTERTAINMENT-Movies"
	ns3__BusinessSubCategoryType__ENTERTAINMENT_Music,	///< xs:token value="ENTERTAINMENT-Music"
	ns3__BusinessSubCategoryType__ENTERTAINMENT_Concerts,	///< xs:token value="ENTERTAINMENT-Concerts"
	ns3__BusinessSubCategoryType__ENTERTAINMENT_Theater,	///< xs:token value="ENTERTAINMENT-Theater"
	ns3__BusinessSubCategoryType__ENTERTAINMENT_Bootleg_Recordings,	///< xs:token value="ENTERTAINMENT-Bootleg-Recordings"
	ns3__BusinessSubCategoryType__ENTERTAINMENT_Promotional_Items,	///< xs:token value="ENTERTAINMENT-Promotional-Items"
	ns3__BusinessSubCategoryType__ENTERTAINMENTMEMORABILIA_General,	///< xs:token value="ENTERTAINMENTMEMORABILIA-General"
	ns3__BusinessSubCategoryType__ENTERTAINMENTMEMORABILIA_Autographs,	///< xs:token value="ENTERTAINMENTMEMORABILIA-Autographs"
	ns3__BusinessSubCategoryType__ENTERTAINMENTMEMORABILIA_Limited_Editions,	///< xs:token value="ENTERTAINMENTMEMORABILIA-Limited-Editions"
	ns3__BusinessSubCategoryType__ENTERTAINMENTMEMORABILIA_Movie,	///< xs:token value="ENTERTAINMENTMEMORABILIA-Movie"
	ns3__BusinessSubCategoryType__ENTERTAINMENTMEMORABILIA_Music,	///< xs:token value="ENTERTAINMENTMEMORABILIA-Music"
	ns3__BusinessSubCategoryType__ENTERTAINMENTMEMORABILIA_Novelties,	///< xs:token value="ENTERTAINMENTMEMORABILIA-Novelties"
	ns3__BusinessSubCategoryType__ENTERTAINMENTMEMORABILIA_Photos,	///< xs:token value="ENTERTAINMENTMEMORABILIA-Photos"
	ns3__BusinessSubCategoryType__ENTERTAINMENTMEMORABILIA_Posters,	///< xs:token value="ENTERTAINMENTMEMORABILIA-Posters"
	ns3__BusinessSubCategoryType__ENTERTAINMENTMEMORABILIA_Sports_and_Fan_Shop,	///< xs:token value="ENTERTAINMENTMEMORABILIA-Sports-and-Fan-Shop"
	ns3__BusinessSubCategoryType__ENTERTAINMENTMEMORABILIA_Science_Fiction,	///< xs:token value="ENTERTAINMENTMEMORABILIA-Science-Fiction"
	ns3__BusinessSubCategoryType__FOODDRINKANDNUTRITION_General,	///< xs:token value="FOODDRINKANDNUTRITION-General"
	ns3__BusinessSubCategoryType__FOODDRINKANDNUTRITION_Coffee_and_Tea,	///< xs:token value="FOODDRINKANDNUTRITION-Coffee-and-Tea"
	ns3__BusinessSubCategoryType__FOODDRINKANDNUTRITION_Food_Products,	///< xs:token value="FOODDRINKANDNUTRITION-Food-Products"
	ns3__BusinessSubCategoryType__FOODDRINKANDNUTRITION_Gourmet_Items,	///< xs:token value="FOODDRINKANDNUTRITION-Gourmet-Items"
	ns3__BusinessSubCategoryType__FOODDRINKANDNUTRITION_Health_and_Nutrition,	///< xs:token value="FOODDRINKANDNUTRITION-Health-and-Nutrition"
	ns3__BusinessSubCategoryType__FOODDRINKANDNUTRITION_Services,	///< xs:token value="FOODDRINKANDNUTRITION-Services"
	ns3__BusinessSubCategoryType__FOODDRINKANDNUTRITION_Vitamins_and_Supplements,	///< xs:token value="FOODDRINKANDNUTRITION-Vitamins-and-Supplements"
	ns3__BusinessSubCategoryType__FOODDRINKANDNUTRITION_Weight_Management_and_Health_Products,	///< xs:token value="FOODDRINKANDNUTRITION-Weight-Management-and-Health-Products"
	ns3__BusinessSubCategoryType__FOODDRINKANDNUTRITION_Restaurant,	///< xs:token value="FOODDRINKANDNUTRITION-Restaurant"
	ns3__BusinessSubCategoryType__FOODDRINKANDNUTRITION_Tobacco_and_Cigars,	///< xs:token value="FOODDRINKANDNUTRITION-Tobacco-and-Cigars"
	ns3__BusinessSubCategoryType__FOODDRINKANDNUTRITION_Alcoholic_Beverages,	///< xs:token value="FOODDRINKANDNUTRITION-Alcoholic-Beverages"
	ns3__BusinessSubCategoryType__GIFTSANDFLOWERS_General,	///< xs:token value="GIFTSANDFLOWERS-General"
	ns3__BusinessSubCategoryType__GIFTSANDFLOWERS_Flowers,	///< xs:token value="GIFTSANDFLOWERS-Flowers"
	ns3__BusinessSubCategoryType__GIFTSANDFLOWERS_Greeting_Cards,	///< xs:token value="GIFTSANDFLOWERS-Greeting-Cards"
	ns3__BusinessSubCategoryType__GIFTSANDFLOWERS_Humorous_Gifts_and_Novelties,	///< xs:token value="GIFTSANDFLOWERS-Humorous-Gifts-and-Novelties"
	ns3__BusinessSubCategoryType__GIFTSANDFLOWERS_Personalized_Gifts,	///< xs:token value="GIFTSANDFLOWERS-Personalized-Gifts"
	ns3__BusinessSubCategoryType__GIFTSANDFLOWERS_Products,	///< xs:token value="GIFTSANDFLOWERS-Products"
	ns3__BusinessSubCategoryType__GIFTSANDFLOWERS_Services,	///< xs:token value="GIFTSANDFLOWERS-Services"
	ns3__BusinessSubCategoryType__HOBBIESTOYSANDGAMES_General,	///< xs:token value="HOBBIESTOYSANDGAMES-General"
	ns3__BusinessSubCategoryType__HOBBIESTOYSANDGAMES_Action_Figures,	///< xs:token value="HOBBIESTOYSANDGAMES-Action-Figures"
	ns3__BusinessSubCategoryType__HOBBIESTOYSANDGAMES_Bean_Babies,	///< xs:token value="HOBBIESTOYSANDGAMES-Bean-Babies"
	ns3__BusinessSubCategoryType__HOBBIESTOYSANDGAMES_Barbies,	///< xs:token value="HOBBIESTOYSANDGAMES-Barbies"
	ns3__BusinessSubCategoryType__HOBBIESTOYSANDGAMES_Bears,	///< xs:token value="HOBBIESTOYSANDGAMES-Bears"
	ns3__BusinessSubCategoryType__HOBBIESTOYSANDGAMES_Dolls,	///< xs:token value="HOBBIESTOYSANDGAMES-Dolls"
	ns3__BusinessSubCategoryType__HOBBIESTOYSANDGAMES_Games,	///< xs:token value="HOBBIESTOYSANDGAMES-Games"
	ns3__BusinessSubCategoryType__HOBBIESTOYSANDGAMES_Model_Kits,	///< xs:token value="HOBBIESTOYSANDGAMES-Model-Kits"
	ns3__BusinessSubCategoryType__HOBBIESTOYSANDGAMES_Diecast_Toys_Vehicles,	///< xs:token value="HOBBIESTOYSANDGAMES-Diecast-Toys-Vehicles"
	ns3__BusinessSubCategoryType__HOBBIESTOYSANDGAMES_Video_Games_and_Systems,	///< xs:token value="HOBBIESTOYSANDGAMES-Video-Games-and-Systems"
	ns3__BusinessSubCategoryType__HOBBIESTOYSANDGAMES_Vintage_and_Antique_Toys,	///< xs:token value="HOBBIESTOYSANDGAMES-Vintage-and-Antique-Toys"
	ns3__BusinessSubCategoryType__HOBBIESTOYSANDGAMES_BackupUnreleased_Games,	///< xs:token value="HOBBIESTOYSANDGAMES-BackupUnreleased-Games"
	ns3__BusinessSubCategoryType__HOBBIESTOYSANDGAMES_Game_copying_hardwaresoftware,	///< xs:token value="HOBBIESTOYSANDGAMES-Game-copying-hardwaresoftware"
	ns3__BusinessSubCategoryType__HOBBIESTOYSANDGAMES_Mod_Chips,	///< xs:token value="HOBBIESTOYSANDGAMES-Mod-Chips"
	ns3__BusinessSubCategoryType__HOMEANDGARDEN_General,	///< xs:token value="HOMEANDGARDEN-General"
	ns3__BusinessSubCategoryType__HOMEANDGARDEN_Appliances,	///< xs:token value="HOMEANDGARDEN-Appliances"
	ns3__BusinessSubCategoryType__HOMEANDGARDEN_Bed_and_Bath,	///< xs:token value="HOMEANDGARDEN-Bed-and-Bath"
	ns3__BusinessSubCategoryType__HOMEANDGARDEN_Furnishing_and_Decorating,	///< xs:token value="HOMEANDGARDEN-Furnishing-and-Decorating"
	ns3__BusinessSubCategoryType__HOMEANDGARDEN_Garden_Supplies,	///< xs:token value="HOMEANDGARDEN-Garden-Supplies"
	ns3__BusinessSubCategoryType__HOMEANDGARDEN_Hardware_and_Tools,	///< xs:token value="HOMEANDGARDEN-Hardware-and-Tools"
	ns3__BusinessSubCategoryType__HOMEANDGARDEN_Household_Goods,	///< xs:token value="HOMEANDGARDEN-Household-Goods"
	ns3__BusinessSubCategoryType__HOMEANDGARDEN_Kitchenware,	///< xs:token value="HOMEANDGARDEN-Kitchenware"
	ns3__BusinessSubCategoryType__HOMEANDGARDEN_Rugs_and_Carpets,	///< xs:token value="HOMEANDGARDEN-Rugs-and-Carpets"
	ns3__BusinessSubCategoryType__HOMEANDGARDEN_Security_and_Home_Defense,	///< xs:token value="HOMEANDGARDEN-Security-and-Home-Defense"
	ns3__BusinessSubCategoryType__HOMEANDGARDEN_Plants_and_Seeds,	///< xs:token value="HOMEANDGARDEN-Plants-and-Seeds"
	ns3__BusinessSubCategoryType__INTERNETANDNETWORKSERVICES_General,	///< xs:token value="INTERNETANDNETWORKSERVICES-General"
	ns3__BusinessSubCategoryType__INTERNETANDNETWORKSERVICES_Bulletin_board,	///< xs:token value="INTERNETANDNETWORKSERVICES-Bulletin-board"
	ns3__BusinessSubCategoryType__INTERNETANDNETWORKSERVICES_online_services,	///< xs:token value="INTERNETANDNETWORKSERVICES-online-services"
	ns3__BusinessSubCategoryType__INTERNETANDNETWORKSERVICES_Auction_management_tools,	///< xs:token value="INTERNETANDNETWORKSERVICES-Auction-management-tools"
	ns3__BusinessSubCategoryType__INTERNETANDNETWORKSERVICES_ecommerce_development,	///< xs:token value="INTERNETANDNETWORKSERVICES-ecommerce-development"
	ns3__BusinessSubCategoryType__INTERNETANDNETWORKSERVICES_training_services,	///< xs:token value="INTERNETANDNETWORKSERVICES-training-services"
	ns3__BusinessSubCategoryType__INTERNETANDNETWORKSERVICES_Online_Malls,	///< xs:token value="INTERNETANDNETWORKSERVICES-Online-Malls"
	ns3__BusinessSubCategoryType__INTERNETANDNETWORKSERVICES_Web_hosting_and_design,	///< xs:token value="INTERNETANDNETWORKSERVICES-Web-hosting-and-design"
	ns3__BusinessSubCategoryType__MEDIAANDENTERTAINMENT_General,	///< xs:token value="MEDIAANDENTERTAINMENT-General"
	ns3__BusinessSubCategoryType__MEDIAANDENTERTAINMENT_Concerts,	///< xs:token value="MEDIAANDENTERTAINMENT-Concerts"
	ns3__BusinessSubCategoryType__MEDIAANDENTERTAINMENT_Theater,	///< xs:token value="MEDIAANDENTERTAINMENT-Theater"
	ns3__BusinessSubCategoryType__MEDICALANDPHARMACEUTICAL_General,	///< xs:token value="MEDICALANDPHARMACEUTICAL-General"
	ns3__BusinessSubCategoryType__MEDICALANDPHARMACEUTICAL_Medical,	///< xs:token value="MEDICALANDPHARMACEUTICAL-Medical"
	ns3__BusinessSubCategoryType__MEDICALANDPHARMACEUTICAL_Dental,	///< xs:token value="MEDICALANDPHARMACEUTICAL-Dental"
	ns3__BusinessSubCategoryType__MEDICALANDPHARMACEUTICAL_Opthamalic,	///< xs:token value="MEDICALANDPHARMACEUTICAL-Opthamalic"
	ns3__BusinessSubCategoryType__MEDICALANDPHARMACEUTICAL_Prescription_Drugs,	///< xs:token value="MEDICALANDPHARMACEUTICAL-Prescription-Drugs"
	ns3__BusinessSubCategoryType__MEDICALANDPHARMACEUTICAL_Devices,	///< xs:token value="MEDICALANDPHARMACEUTICAL-Devices"
	ns3__BusinessSubCategoryType__MONEYSERVICEBUSINESSES_General,	///< xs:token value="MONEYSERVICEBUSINESSES-General"
	ns3__BusinessSubCategoryType__MONEYSERVICEBUSINESSES_Remittance,	///< xs:token value="MONEYSERVICEBUSINESSES-Remittance"
	ns3__BusinessSubCategoryType__MONEYSERVICEBUSINESSES_Wire_Transfer,	///< xs:token value="MONEYSERVICEBUSINESSES-Wire-Transfer"
	ns3__BusinessSubCategoryType__MONEYSERVICEBUSINESSES_Money_Orders,	///< xs:token value="MONEYSERVICEBUSINESSES-Money-Orders"
	ns3__BusinessSubCategoryType__MONEYSERVICEBUSINESSES_Electronic_Cash,	///< xs:token value="MONEYSERVICEBUSINESSES-Electronic-Cash"
	ns3__BusinessSubCategoryType__MONEYSERVICEBUSINESSES_Currency_DealerExchange,	///< xs:token value="MONEYSERVICEBUSINESSES-Currency-DealerExchange"
	ns3__BusinessSubCategoryType__MONEYSERVICEBUSINESSES_Check_Cashier,	///< xs:token value="MONEYSERVICEBUSINESSES-Check-Cashier"
	ns3__BusinessSubCategoryType__MONEYSERVICEBUSINESSES_Travelers_Checks,	///< xs:token value="MONEYSERVICEBUSINESSES-Travelers-Checks"
	ns3__BusinessSubCategoryType__MONEYSERVICEBUSINESSES_Stored_Value_Cards,	///< xs:token value="MONEYSERVICEBUSINESSES-Stored-Value-Cards"
	ns3__BusinessSubCategoryType__NONPROFITPOLITICALANDRELIGION_General,	///< xs:token value="NONPROFITPOLITICALANDRELIGION-General"
	ns3__BusinessSubCategoryType__NONPROFITPOLITICALANDRELIGION_Charities,	///< xs:token value="NONPROFITPOLITICALANDRELIGION-Charities"
	ns3__BusinessSubCategoryType__NONPROFITPOLITICALANDRELIGION_Political,	///< xs:token value="NONPROFITPOLITICALANDRELIGION-Political"
	ns3__BusinessSubCategoryType__NONPROFITPOLITICALANDRELIGION_Religious,	///< xs:token value="NONPROFITPOLITICALANDRELIGION-Religious"
	ns3__BusinessSubCategoryType__PETSANDANIMALS_General,	///< xs:token value="PETSANDANIMALS-General"
	ns3__BusinessSubCategoryType__PETSANDANIMALS_Supplies_and_Toys,	///< xs:token value="PETSANDANIMALS-Supplies-and-Toys"
	ns3__BusinessSubCategoryType__PETSANDANIMALS_Wildlife_Products,	///< xs:token value="PETSANDANIMALS-Wildlife-Products"
	ns3__BusinessSubCategoryType__REALESTATE_General,	///< xs:token value="REALESTATE-General"
	ns3__BusinessSubCategoryType__REALESTATE_Commercial,	///< xs:token value="REALESTATE-Commercial"
	ns3__BusinessSubCategoryType__REALESTATE_Residential,	///< xs:token value="REALESTATE-Residential"
	ns3__BusinessSubCategoryType__REALESTATE_Time_Shares,	///< xs:token value="REALESTATE-Time-Shares"
	ns3__BusinessSubCategoryType__SERVICES_GeneralGovernment,	///< xs:token value="SERVICES-GeneralGovernment"
	ns3__BusinessSubCategoryType__SERVICES_Legal,	///< xs:token value="SERVICES-Legal"
	ns3__BusinessSubCategoryType__SERVICES_Medical,	///< xs:token value="SERVICES-Medical"
	ns3__BusinessSubCategoryType__SERVICES_Dental,	///< xs:token value="SERVICES-Dental"
	ns3__BusinessSubCategoryType__SERVICES_Vision,	///< xs:token value="SERVICES-Vision"
	ns3__BusinessSubCategoryType__SERVICES_General,	///< xs:token value="SERVICES-General"
	ns3__BusinessSubCategoryType__SERVICES_Child_Care_Services,	///< xs:token value="SERVICES-Child-Care-Services"
	ns3__BusinessSubCategoryType__SERVICES_Consulting,	///< xs:token value="SERVICES-Consulting"
	ns3__BusinessSubCategoryType__SERVICES_ImportingExporting,	///< xs:token value="SERVICES-ImportingExporting"
	ns3__BusinessSubCategoryType__SERVICES_InsuranceDirect,	///< xs:token value="SERVICES-InsuranceDirect"
	ns3__BusinessSubCategoryType__SERVICES_Financial_Services,	///< xs:token value="SERVICES-Financial-Services"
	ns3__BusinessSubCategoryType__SERVICES_Graphic_and_Commercial_Design,	///< xs:token value="SERVICES-Graphic-and-Commercial-Design"
	ns3__BusinessSubCategoryType__SERVICES_Landscaping,	///< xs:token value="SERVICES-Landscaping"
	ns3__BusinessSubCategoryType__SERVICES_Locksmith,	///< xs:token value="SERVICES-Locksmith"
	ns3__BusinessSubCategoryType__SERVICES_Online_Dating,	///< xs:token value="SERVICES-Online-Dating"
	ns3__BusinessSubCategoryType__SERVICES_Event_and_Wedding_Planning,	///< xs:token value="SERVICES-Event-and-Wedding-Planning"
	ns3__BusinessSubCategoryType__SERVICES_Schools_and_Colleges,	///< xs:token value="SERVICES-Schools-and-Colleges"
	ns3__BusinessSubCategoryType__SERVICES_Entertainment,	///< xs:token value="SERVICES-Entertainment"
	ns3__BusinessSubCategoryType__SERVICES_Aggregators,	///< xs:token value="SERVICES-Aggregators"
	ns3__BusinessSubCategoryType__SPORTSANDRECREATION_General,	///< xs:token value="SPORTSANDRECREATION-General"
	ns3__BusinessSubCategoryType__SPORTSANDRECREATION_Bicycles_and_Accessories,	///< xs:token value="SPORTSANDRECREATION-Bicycles-and-Accessories"
	ns3__BusinessSubCategoryType__SPORTSANDRECREATION_Boating_Sailing_and_Accessories,	///< xs:token value="SPORTSANDRECREATION-Boating-Sailing-and-Accessories"
	ns3__BusinessSubCategoryType__SPORTSANDRECREATION_Camping_and_Survival,	///< xs:token value="SPORTSANDRECREATION-Camping-and-Survival"
	ns3__BusinessSubCategoryType__SPORTSANDRECREATION_Exercise_Equipment,	///< xs:token value="SPORTSANDRECREATION-Exercise-Equipment"
	ns3__BusinessSubCategoryType__SPORTSANDRECREATION_Fishing,	///< xs:token value="SPORTSANDRECREATION-Fishing"
	ns3__BusinessSubCategoryType__SPORTSANDRECREATION_Golf,	///< xs:token value="SPORTSANDRECREATION-Golf"
	ns3__BusinessSubCategoryType__SPORTSANDRECREATION_Hunting,	///< xs:token value="SPORTSANDRECREATION-Hunting"
	ns3__BusinessSubCategoryType__SPORTSANDRECREATION_Paintball,	///< xs:token value="SPORTSANDRECREATION-Paintball"
	ns3__BusinessSubCategoryType__SPORTSANDRECREATION_Sporting_Goods,	///< xs:token value="SPORTSANDRECREATION-Sporting-Goods"
	ns3__BusinessSubCategoryType__SPORTSANDRECREATION_Swimming_Pools_and_Spas,	///< xs:token value="SPORTSANDRECREATION-Swimming-Pools-and-Spas"
	ns3__BusinessSubCategoryType__TRAVEL_General,	///< xs:token value="TRAVEL-General"
	ns3__BusinessSubCategoryType__TRAVEL_Accommodations,	///< xs:token value="TRAVEL-Accommodations"
	ns3__BusinessSubCategoryType__TRAVEL_Agencies,	///< xs:token value="TRAVEL-Agencies"
	ns3__BusinessSubCategoryType__TRAVEL_Airlines,	///< xs:token value="TRAVEL-Airlines"
	ns3__BusinessSubCategoryType__TRAVEL_Auto_Rentals,	///< xs:token value="TRAVEL-Auto-Rentals"
	ns3__BusinessSubCategoryType__TRAVEL_Cruises,	///< xs:token value="TRAVEL-Cruises"
	ns3__BusinessSubCategoryType__TRAVEL_Other_Transportation,	///< xs:token value="TRAVEL-Other-Transportation"
	ns3__BusinessSubCategoryType__TRAVEL_Services,	///< xs:token value="TRAVEL-Services"
	ns3__BusinessSubCategoryType__TRAVEL_Supplies,	///< xs:token value="TRAVEL-Supplies"
	ns3__BusinessSubCategoryType__TRAVEL_Tours,	///< xs:token value="TRAVEL-Tours"
	ns3__BusinessSubCategoryType__TRAVEL_AirlinesSpirit_Air,	///< xs:token value="TRAVEL-AirlinesSpirit-Air"
	ns3__BusinessSubCategoryType__Other_SubCategories,	///< xs:token value="Other-SubCategories"
};

/// @brief "urn:ebay:apis:eBLBaseComponents":AverageTransactionPriceType is a simpleType restriction of XSD type xs:token.
///
/// <PRE><BLOCKQUOTE>
///   AverageTransactionPriceType
///   <br/>
///   <br/>
///   <table>
///   <tr>
///   <th>Enumeration</th>
///   <th>Meaning</th>
///   </tr>
///   <tr>
///   <td/>
///   <td/>
///   </tr>AverageTransactionPrice-Not-Applicable <tr>
///   <td>AverageTransactionPrice-Range1</td>
///   <td>Less than $25 USD</td>
///   </tr>
///   <tr>
///   <td>AverageTransactionPrice-Range2</td>
///   <td>$25 USD to $50 USD</td>
///   </tr>
///   <tr>
///   <td>AverageTransactionPrice-Range3</td>
///   <td>$50 USD to $100 USD</td>
///   </tr>
///   <tr>
///   <td>AverageTransactionPrice-Range4</td>
///   <td>$100 USD to $250 USD</td>
///   </tr>
///   <tr>
///   <td>AverageTransactionPrice-Range5</td>
///   <td>$250 USD to $500 USD</td>
///   </tr>
///   <tr>
///   <td>AverageTransactionPrice-Range6</td>
///   <td>$500 USD to $1,000 USD</td>
///   </tr>
///   <tr>
///   <td>AverageTransactionPrice-Range7</td>
///   <td> $1,000 USD to $2,000 USD</td>
///   </tr>
///   <tr>
///   <td>AverageTransactionPrice-Range8</td>
///   <td>$2,000 USD to $5,000 USD</td>
///   </tr>
///   <tr>
///   <td>AverageTransactionPrice-Range9</td>
///   <td>$5,000 USD to $10,000 USD</td>
///   </tr>
///   <tr>
///   <td>AverageTransactionPrice-Range10</td>
///   <td>More than $10,000 USD</td>
///   </tr>
///   </table>
/// </BLOCKQUOTE></PRE>
/// @note The enum values are prefixed with "ns3__AverageTransactionPriceType__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns3__AverageTransactionPriceType
{
	ns3__AverageTransactionPriceType__AverageTransactionPrice_Not_Applicable,	///< xs:token value="AverageTransactionPrice-Not-Applicable"
	ns3__AverageTransactionPriceType__AverageTransactionPrice_Range1,	///< xs:token value="AverageTransactionPrice-Range1"
	ns3__AverageTransactionPriceType__AverageTransactionPrice_Range2,	///< xs:token value="AverageTransactionPrice-Range2"
	ns3__AverageTransactionPriceType__AverageTransactionPrice_Range3,	///< xs:token value="AverageTransactionPrice-Range3"
	ns3__AverageTransactionPriceType__AverageTransactionPrice_Range4,	///< xs:token value="AverageTransactionPrice-Range4"
	ns3__AverageTransactionPriceType__AverageTransactionPrice_Range5,	///< xs:token value="AverageTransactionPrice-Range5"
	ns3__AverageTransactionPriceType__AverageTransactionPrice_Range6,	///< xs:token value="AverageTransactionPrice-Range6"
	ns3__AverageTransactionPriceType__AverageTransactionPrice_Range7,	///< xs:token value="AverageTransactionPrice-Range7"
	ns3__AverageTransactionPriceType__AverageTransactionPrice_Range8,	///< xs:token value="AverageTransactionPrice-Range8"
	ns3__AverageTransactionPriceType__AverageTransactionPrice_Range9,	///< xs:token value="AverageTransactionPrice-Range9"
	ns3__AverageTransactionPriceType__AverageTransactionPrice_Range10,	///< xs:token value="AverageTransactionPrice-Range10"
};

/// @brief "urn:ebay:apis:eBLBaseComponents":AverageMonthlyVolumeType is a simpleType restriction of XSD type xs:token.
///
/// <PRE><BLOCKQUOTE>
///   AverageMonthlyVolumeType <table>
///   <tr>
///   <th>Enumeration</th>
///   <th>Meaning</th>
///   </tr>
///   <tr>
///   <td>AverageMonthlyVolume-Not-Applicable</td>
///   <td/>
///   </tr>
///   <tr>
///   <td>AverageMonthlyVolume-Range1</td>
///   <td>Less than $1,000 USD</td>
///   </tr>
///   <tr>
///   <td>AverageMonthlyVolume-Range2</td>
///   <td>$1,000 USD to $5,000 USD</td>
///   </tr>
///   <tr>
///   <td>AverageMonthlyVolume-Range3</td>
///   <td>$5,000 USD to $25,000 USD</td>
///   </tr>
///   <tr>
///   <td>AverageMonthlyVolume-Range4</td>
///   <td>$25,000 USD to $100,000 USD</td>
///   </tr>
///   <tr>
///   <td>AverageMonthlyVolume-Range5</td>
///   <td>$100,000 USD to $1,000,000 USD</td>
///   </tr>
///   <tr>
///   <td>AverageMonthlyVolume-Range6</td>
///   <td>More than $1,000,000 USD</td>
///   </tr>
///   </table>
/// </BLOCKQUOTE></PRE>
/// @note The enum values are prefixed with "ns3__AverageMonthlyVolumeType__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns3__AverageMonthlyVolumeType
{
	ns3__AverageMonthlyVolumeType__AverageMonthlyVolume_Not_Applicable,	///< xs:token value="AverageMonthlyVolume-Not-Applicable"
	ns3__AverageMonthlyVolumeType__AverageMonthlyVolume_Range1,	///< xs:token value="AverageMonthlyVolume-Range1"
	ns3__AverageMonthlyVolumeType__AverageMonthlyVolume_Range2,	///< xs:token value="AverageMonthlyVolume-Range2"
	ns3__AverageMonthlyVolumeType__AverageMonthlyVolume_Range3,	///< xs:token value="AverageMonthlyVolume-Range3"
	ns3__AverageMonthlyVolumeType__AverageMonthlyVolume_Range4,	///< xs:token value="AverageMonthlyVolume-Range4"
	ns3__AverageMonthlyVolumeType__AverageMonthlyVolume_Range5,	///< xs:token value="AverageMonthlyVolume-Range5"
	ns3__AverageMonthlyVolumeType__AverageMonthlyVolume_Range6,	///< xs:token value="AverageMonthlyVolume-Range6"
};

/// @brief "urn:ebay:apis:eBLBaseComponents":SalesVenueType is a simpleType restriction of XSD type xs:token.
///
/// <PRE><BLOCKQUOTE>
///   SalesVenueType
/// </BLOCKQUOTE></PRE>
/// @note The enum values are prefixed with "ns3__SalesVenueType__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns3__SalesVenueType
{
	ns3__SalesVenueType__Venue_Unspecified,	///< xs:token value="Venue-Unspecified"
	ns3__SalesVenueType__eBay,	///< xs:token value="eBay"
	ns3__SalesVenueType__AnotherMarketPlace,	///< xs:token value="AnotherMarketPlace"
	ns3__SalesVenueType__OwnWebsite,	///< xs:token value="OwnWebsite"
	ns3__SalesVenueType__Other,	///< xs:token value="Other"
};

/// @brief "urn:ebay:apis:eBLBaseComponents":PercentageRevenueFromOnlineSalesType is a simpleType restriction of XSD type xs:token.
///
/// <PRE><BLOCKQUOTE>
///   PercentageRevenueFromOnlineSalesType
///   <br/>
///   <br/>
///   <table>
///   <tr>
///   <th>Enumeration</th>
///   <th>Meaning</th>
///   </tr>
///   <tr>
///   <td/>
///   <td/>
///   </tr>PercentageRevenueFromOnlineSales-Not-Applicable <tr>
///   <td>PercentageRevenueFromOnlineSales-Range1</td>
///   <td>Less than 25%</td>
///   </tr>
///   <tr>
///   <td>PercentageRevenueFromOnlineSales-Range2</td>
///   <td>25% to 50%</td>
///   </tr>
///   <tr>
///   <td>PercentageRevenueFromOnlineSales-Range3</td>
///   <td>50% to 75%</td>
///   </tr>
///   <tr>
///   <td>PercentageRevenueFromOnlineSales-Range4</td>
///   <td>75% to 100%</td>
///   </tr>
///   </table>
/// </BLOCKQUOTE></PRE>
/// @note The enum values are prefixed with "ns3__PercentageRevenueFromOnlineSalesType__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns3__PercentageRevenueFromOnlineSalesType
{
	ns3__PercentageRevenueFromOnlineSalesType__PercentageRevenueFromOnlineSales_Not_Applicable,	///< xs:token value="PercentageRevenueFromOnlineSales-Not-Applicable"
	ns3__PercentageRevenueFromOnlineSalesType__PercentageRevenueFromOnlineSales_Range1,	///< xs:token value="PercentageRevenueFromOnlineSales-Range1"
	ns3__PercentageRevenueFromOnlineSalesType__PercentageRevenueFromOnlineSales_Range2,	///< xs:token value="PercentageRevenueFromOnlineSales-Range2"
	ns3__PercentageRevenueFromOnlineSalesType__PercentageRevenueFromOnlineSales_Range3,	///< xs:token value="PercentageRevenueFromOnlineSales-Range3"
	ns3__PercentageRevenueFromOnlineSalesType__PercentageRevenueFromOnlineSales_Range4,	///< xs:token value="PercentageRevenueFromOnlineSales-Range4"
};

/// @brief "urn:ebay:apis:eBLBaseComponents":BankAccountTypeType is a simpleType restriction of XSD type xs:token.
///
/// <PRE><BLOCKQUOTE>
///   BankAccountTypeType
/// </BLOCKQUOTE></PRE>
/// @note The enum values are prefixed with "ns3__BankAccountTypeType__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns3__BankAccountTypeType
{
	ns3__BankAccountTypeType__Checking,	///< xs:token value="Checking"
	ns3__BankAccountTypeType__Savings,	///< xs:token value="Savings"
};

/// @brief "urn:ebay:apis:eBLBaseComponents":EnterBoardingTokenType is a simpleType restriction of XSD type xs:string.
///
typedef std::string ns3__EnterBoardingTokenType;

/// @brief "urn:ebay:apis:eBLBaseComponents":BoardingStatusType is a simpleType restriction of XSD type xs:token.
///
/// <PRE><BLOCKQUOTE>
///   Boarding Status
/// </BLOCKQUOTE></PRE>
/// @note The enum values are prefixed with "ns3__BoardingStatusType__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns3__BoardingStatusType
{
	ns3__BoardingStatusType__Unknown,	///< xs:token value="Unknown"
	ns3__BoardingStatusType__Completed,	///< xs:token value="Completed"
	ns3__BoardingStatusType__Cancelled,	///< xs:token value="Cancelled"
	ns3__BoardingStatusType__Pending,	///< xs:token value="Pending"
};

/// @brief "urn:ebay:apis:eBLBaseComponents":UserWithdrawalLimitTypeType is a simpleType restriction of XSD type xs:token.
///
/// <PRE><BLOCKQUOTE>
///   User Withdrawal Limit Type Type
/// </BLOCKQUOTE></PRE>
/// @note The enum values are prefixed with "ns3__UserWithdrawalLimitTypeType__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns3__UserWithdrawalLimitTypeType
{
	ns3__UserWithdrawalLimitTypeType__Unknown,	///< xs:token value="Unknown"
	ns3__UserWithdrawalLimitTypeType__Limited,	///< xs:token value="Limited"
	ns3__UserWithdrawalLimitTypeType__Unlimited,	///< xs:token value="Unlimited"
};

/// @brief "urn:ebay:apis:eBLBaseComponents":APIAuthenticationType is a simpleType restriction of XSD type xs:token.
///
/// <PRE><BLOCKQUOTE>
///   API Authentication Type
/// </BLOCKQUOTE></PRE>
/// @note The enum values are prefixed with "ns3__APIAuthenticationType__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns3__APIAuthenticationType
{
	ns3__APIAuthenticationType__Auth_None,	///< xs:token value="Auth-None"
	ns3__APIAuthenticationType__Cert,	///< xs:token value="Cert"
	ns3__APIAuthenticationType__Sign,	///< xs:token value="Sign"
};

/// @brief "urn:ebay:apis:eBLBaseComponents":EbayCheckoutType is a simpleType restriction of XSD type xs:token.
///
/// @note The enum values are prefixed with "ns3__EbayCheckoutType__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns3__EbayCheckoutType
{
	ns3__EbayCheckoutType__none,	///< xs:token value="none"
	ns3__EbayCheckoutType__Auction,	///< xs:token value="Auction"
	ns3__EbayCheckoutType__BuyItNow,	///< xs:token value="BuyItNow"
	ns3__EbayCheckoutType__FixedPriceItem,	///< xs:token value="FixedPriceItem"
	ns3__EbayCheckoutType__Autopay,	///< xs:token value="Autopay"
};

/// @brief "urn:ebay:apis:eBLBaseComponents":DyneticClientType is a simpleType restriction of XSD type xs:token.
///
/// @note The enum values are prefixed with "ns3__DyneticClientType__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns3__DyneticClientType
{
	ns3__DyneticClientType__none,	///< xs:token value="none"
	ns3__DyneticClientType__WAP,	///< xs:token value="WAP"
	ns3__DyneticClientType__J2MEClient,	///< xs:token value="J2MEClient"
};

/// @brief "urn:ebay:apis:eBLBaseComponents":RecurringPaymentsProfileStatusType is a simpleType restriction of XSD type xs:token.
///

/// </BLOCKQUOTE></PRE>
/// @note The enum values are prefixed with "ns3__RecurringPaymentsProfileStatusType__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns3__RecurringPaymentsProfileStatusType
{
	ns3__RecurringPaymentsProfileStatusType__ActiveProfile,	///< xs:token value="ActiveProfile"
	ns3__RecurringPaymentsProfileStatusType__PendingProfile,	///< xs:token value="PendingProfile"
	ns3__RecurringPaymentsProfileStatusType__CancelledProfile,	///< xs:token value="CancelledProfile"
	ns3__RecurringPaymentsProfileStatusType__ExpiredProfile,	///< xs:token value="ExpiredProfile"
	ns3__RecurringPaymentsProfileStatusType__SuspendedProfile,	///< xs:token value="SuspendedProfile"
};

/// @brief "urn:ebay:apis:eBLBaseComponents":FailedPaymentActionType is a simpleType restriction of XSD type xs:token.
///

/// </BLOCKQUOTE></PRE>
/// @note The enum values are prefixed with "ns3__FailedPaymentActionType__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns3__FailedPaymentActionType
{
	ns3__FailedPaymentActionType__CancelOnFailure,	///< xs:token value="CancelOnFailure"
	ns3__FailedPaymentActionType__ContinueOnFailure,	///< xs:token value="ContinueOnFailure"
};

/// @brief "urn:ebay:apis:eBLBaseComponents":AutoBillType is a simpleType restriction of XSD type xs:token.
///

/// </BLOCKQUOTE></PRE>
/// @note The enum values are prefixed with "ns3__AutoBillType__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns3__AutoBillType
{
	ns3__AutoBillType__NoAutoBill,	///< xs:token value="NoAutoBill"
	ns3__AutoBillType__AddToNextBilling,	///< xs:token value="AddToNextBilling"
};

/// @brief "urn:ebay:apis:eBLBaseComponents":StatusChangeActionType is a simpleType restriction of XSD type xs:token.
///

/// </BLOCKQUOTE></PRE>
/// @note The enum values are prefixed with "ns3__StatusChangeActionType__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns3__StatusChangeActionType
{
	ns3__StatusChangeActionType__Cancel,	///< xs:token value="Cancel"
	ns3__StatusChangeActionType__Suspend,	///< xs:token value="Suspend"
	ns3__StatusChangeActionType__Reactivate,	///< xs:token value="Reactivate"
};

/// @brief "urn:ebay:apis:eBLBaseComponents":BillingPeriodType is a simpleType restriction of XSD type xs:token.
///

/// </BLOCKQUOTE></PRE>
/// @note The enum values are prefixed with "ns3__BillingPeriodType__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns3__BillingPeriodType
{
	ns3__BillingPeriodType__NoBillingPeriodType,	///< xs:token value="NoBillingPeriodType"
	ns3__BillingPeriodType__Day,	///< xs:token value="Day"
	ns3__BillingPeriodType__Week,	///< xs:token value="Week"
	ns3__BillingPeriodType__SemiMonth,	///< xs:token value="SemiMonth"
	ns3__BillingPeriodType__Month,	///< xs:token value="Month"
	ns3__BillingPeriodType__Year,	///< xs:token value="Year"
};

/// @brief "urn:ebay:apis:eBLBaseComponents":ProductCategoryType is a simpleType restriction of XSD type xs:token.
///

/// </BLOCKQUOTE></PRE>
/// @note The enum values are prefixed with "ns3__ProductCategoryType__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns3__ProductCategoryType
{
/// <PRE><BLOCKQUOTE>
///   Other
/// </BLOCKQUOTE></PRE>
	ns3__ProductCategoryType__Other,	///< xs:token value="Other"
/// <PRE><BLOCKQUOTE>
///   Airlines
/// </BLOCKQUOTE></PRE>
	ns3__ProductCategoryType__Airlines,	///< xs:token value="Airlines"
/// <PRE><BLOCKQUOTE>
///   Antiques
/// </BLOCKQUOTE></PRE>
	ns3__ProductCategoryType__Antiques,	///< xs:token value="Antiques"
/// <PRE><BLOCKQUOTE>
///   Art
/// </BLOCKQUOTE></PRE>
	ns3__ProductCategoryType__Art,	///< xs:token value="Art"
/// <PRE><BLOCKQUOTE>
///   Cameras & Photos
/// </BLOCKQUOTE></PRE>
	ns3__ProductCategoryType__Cameras_USCOREPhotos,	///< xs:token value="Cameras_Photos"
/// <PRE><BLOCKQUOTE>
///   Cars, Boats, Vehicles & Parts
/// </BLOCKQUOTE></PRE>
	ns3__ProductCategoryType__Cars_USCOREBoats_USCOREVehicles_USCOREParts,	///< xs:token value="Cars_Boats_Vehicles_Parts"
/// <PRE><BLOCKQUOTE>
///   Cell Phones & Telecom
/// </BLOCKQUOTE></PRE>
	ns3__ProductCategoryType__CellPhones_USCORETelecom,	///< xs:token value="CellPhones_Telecom"
/// <PRE><BLOCKQUOTE>
///   Coins & Paper Money
/// </BLOCKQUOTE></PRE>
	ns3__ProductCategoryType__Coins_USCOREPaperMoney,	///< xs:token value="Coins_PaperMoney"
/// <PRE><BLOCKQUOTE>
///   Collectibles
/// </BLOCKQUOTE></PRE>
	ns3__ProductCategoryType__Collectibles,	///< xs:token value="Collectibles"
/// <PRE><BLOCKQUOTE>
///   Computers & Networking
/// </BLOCKQUOTE></PRE>
	ns3__ProductCategoryType__Computers_USCORENetworking,	///< xs:token value="Computers_Networking"
/// <PRE><BLOCKQUOTE>
///   Consumer Electronics
/// </BLOCKQUOTE></PRE>
	ns3__ProductCategoryType__ConsumerElectronics,	///< xs:token value="ConsumerElectronics"
/// <PRE><BLOCKQUOTE>
///   Jewelry & Watches
/// </BLOCKQUOTE></PRE>
	ns3__ProductCategoryType__Jewelry_USCOREWatches,	///< xs:token value="Jewelry_Watches"
/// <PRE><BLOCKQUOTE>
///   Musical Instruments
/// </BLOCKQUOTE></PRE>
	ns3__ProductCategoryType__MusicalInstruments,	///< xs:token value="MusicalInstruments"
/// <PRE><BLOCKQUOTE>
///   Real Estate
/// </BLOCKQUOTE></PRE>
	ns3__ProductCategoryType__RealEstate,	///< xs:token value="RealEstate"
/// <PRE><BLOCKQUOTE>
///   Sports Memorabilia, Cards & Fan Shop
/// </BLOCKQUOTE></PRE>
	ns3__ProductCategoryType__SportsMemorabilia_USCORECards_USCOREFanShop,	///< xs:token value="SportsMemorabilia_Cards_FanShop"
/// <PRE><BLOCKQUOTE>
///   Stamps
/// </BLOCKQUOTE></PRE>
	ns3__ProductCategoryType__Stamps,	///< xs:token value="Stamps"
/// <PRE><BLOCKQUOTE>
///   Tickets
/// </BLOCKQUOTE></PRE>
	ns3__ProductCategoryType__Tickets,	///< xs:token value="Tickets"
/// <PRE><BLOCKQUOTE>
///   Travels
/// </BLOCKQUOTE></PRE>
	ns3__ProductCategoryType__Travels,	///< xs:token value="Travels"
/// <PRE><BLOCKQUOTE>
///   Gambling
/// </BLOCKQUOTE></PRE>
	ns3__ProductCategoryType__Gambling,	///< xs:token value="Gambling"
/// <PRE><BLOCKQUOTE>
///   Alcohol
/// </BLOCKQUOTE></PRE>
	ns3__ProductCategoryType__Alcohol,	///< xs:token value="Alcohol"
/// <PRE><BLOCKQUOTE>
///   Tobacco
/// </BLOCKQUOTE></PRE>
	ns3__ProductCategoryType__Tobacco,	///< xs:token value="Tobacco"
/// <PRE><BLOCKQUOTE>
///   Money Transfer
/// </BLOCKQUOTE></PRE>
	ns3__ProductCategoryType__MoneyTransfer,	///< xs:token value="MoneyTransfer"
/// <PRE><BLOCKQUOTE>
///   Software
/// </BLOCKQUOTE></PRE>
	ns3__ProductCategoryType__Software,	///< xs:token value="Software"
};

/// @brief "urn:ebay:apis:eBLBaseComponents":ButtonCodeType is a simpleType restriction of XSD type xs:token.
///
/// <PRE><BLOCKQUOTE>
///   Types of button coding
/// </BLOCKQUOTE></PRE>
/// @note The enum values are prefixed with "ns3__ButtonCodeType__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns3__ButtonCodeType
{
/// <PRE><BLOCKQUOTE>
///   Creates Hosted Button
/// </BLOCKQUOTE></PRE>
	ns3__ButtonCodeType__HOSTED,	///< xs:token value="HOSTED"
/// <PRE><BLOCKQUOTE>
///   Creates Encrypted Button
/// </BLOCKQUOTE></PRE>
	ns3__ButtonCodeType__ENCRYPTED,	///< xs:token value="ENCRYPTED"
/// <PRE><BLOCKQUOTE>
///   Creates Cleartext Button
/// </BLOCKQUOTE></PRE>
	ns3__ButtonCodeType__CLEARTEXT,	///< xs:token value="CLEARTEXT"
/// <PRE><BLOCKQUOTE>
///   Creates Token or temporary Button
/// </BLOCKQUOTE></PRE>
	ns3__ButtonCodeType__TOKEN,	///< xs:token value="TOKEN"
};

/// @brief "urn:ebay:apis:eBLBaseComponents":ButtonTypeType is a simpleType restriction of XSD type xs:token.
///
/// <PRE><BLOCKQUOTE>
///   Types of buttons
/// </BLOCKQUOTE></PRE>
/// @note The enum values are prefixed with "ns3__ButtonTypeType__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns3__ButtonTypeType
{
/// <PRE><BLOCKQUOTE>
///   button type is BUYNOW
/// </BLOCKQUOTE></PRE>
	ns3__ButtonTypeType__BUYNOW,	///< xs:token value="BUYNOW"
/// <PRE><BLOCKQUOTE>
///   button type is CART
/// </BLOCKQUOTE></PRE>
	ns3__ButtonTypeType__CART,	///< xs:token value="CART"
/// <PRE><BLOCKQUOTE>
///   button type is GIFTCERTIFICATE
/// </BLOCKQUOTE></PRE>
	ns3__ButtonTypeType__GIFTCERTIFICATE,	///< xs:token value="GIFTCERTIFICATE"
/// <PRE><BLOCKQUOTE>
///   button type is SUBSCRIBE
/// </BLOCKQUOTE></PRE>
	ns3__ButtonTypeType__SUBSCRIBE,	///< xs:token value="SUBSCRIBE"
/// <PRE><BLOCKQUOTE>
///   button type is DONATE
/// </BLOCKQUOTE></PRE>
	ns3__ButtonTypeType__DONATE,	///< xs:token value="DONATE"
/// <PRE><BLOCKQUOTE>
///   button type is UNSUBSCRIBE
/// </BLOCKQUOTE></PRE>
	ns3__ButtonTypeType__UNSUBSCRIBE,	///< xs:token value="UNSUBSCRIBE"
/// <PRE><BLOCKQUOTE>
///   button type is VIEWCART
/// </BLOCKQUOTE></PRE>
	ns3__ButtonTypeType__VIEWCART,	///< xs:token value="VIEWCART"
/// <PRE><BLOCKQUOTE>
///   button type is PAYMENTPLAN
/// </BLOCKQUOTE></PRE>
	ns3__ButtonTypeType__PAYMENTPLAN,	///< xs:token value="PAYMENTPLAN"
/// <PRE><BLOCKQUOTE>
///   button type is AUTOBILLING
/// </BLOCKQUOTE></PRE>
	ns3__ButtonTypeType__AUTOBILLING,	///< xs:token value="AUTOBILLING"
/// <PRE><BLOCKQUOTE>
///   button type is PAYMENT
/// </BLOCKQUOTE></PRE>
	ns3__ButtonTypeType__PAYMENT,	///< xs:token value="PAYMENT"
};

/// @brief "urn:ebay:apis:eBLBaseComponents":ButtonSubTypeType is a simpleType restriction of XSD type xs:token.
///
/// <PRE><BLOCKQUOTE>
///   Types of button sub types
/// </BLOCKQUOTE></PRE>
/// @note The enum values are prefixed with "ns3__ButtonSubTypeType__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns3__ButtonSubTypeType
{
/// <PRE><BLOCKQUOTE>
///   button subtype is PRODUCTS
/// </BLOCKQUOTE></PRE>
	ns3__ButtonSubTypeType__PRODUCTS,	///< xs:token value="PRODUCTS"
/// <PRE><BLOCKQUOTE>
///   button subtype is SERVICES
/// </BLOCKQUOTE></PRE>
	ns3__ButtonSubTypeType__SERVICES,	///< xs:token value="SERVICES"
};

/// @brief "urn:ebay:apis:eBLBaseComponents":ButtonImageType is a simpleType restriction of XSD type xs:token.
///
/// <PRE><BLOCKQUOTE>
///   Types of button images
/// </BLOCKQUOTE></PRE>
/// @note The enum values are prefixed with "ns3__ButtonImageType__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns3__ButtonImageType
{
/// <PRE><BLOCKQUOTE>
///   button image type is REG
/// </BLOCKQUOTE></PRE>
	ns3__ButtonImageType__REG,	///< xs:token value="REG"
/// <PRE><BLOCKQUOTE>
///   button image type is SML
/// </BLOCKQUOTE></PRE>
	ns3__ButtonImageType__SML,	///< xs:token value="SML"
/// <PRE><BLOCKQUOTE>
///   button image type is CC
/// </BLOCKQUOTE></PRE>
	ns3__ButtonImageType__CC,	///< xs:token value="CC"
};

/// @brief "urn:ebay:apis:eBLBaseComponents":BuyNowTextType is a simpleType restriction of XSD type xs:token.
///
/// <PRE><BLOCKQUOTE>
///   values for buynow button text
/// </BLOCKQUOTE></PRE>
/// @note The enum values are prefixed with "ns3__BuyNowTextType__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns3__BuyNowTextType
{
/// <PRE><BLOCKQUOTE>
///   button wording is BUYNOW
/// </BLOCKQUOTE></PRE>
	ns3__BuyNowTextType__BUYNOW,	///< xs:token value="BUYNOW"
/// <PRE><BLOCKQUOTE>
///   button wording is PAYNOW
/// </BLOCKQUOTE></PRE>
	ns3__BuyNowTextType__PAYNOW,	///< xs:token value="PAYNOW"
};

/// @brief "urn:ebay:apis:eBLBaseComponents":SubscribeTextType is a simpleType restriction of XSD type xs:token.
///
/// <PRE><BLOCKQUOTE>
///   values for subscribe button text
/// </BLOCKQUOTE></PRE>
/// @note The enum values are prefixed with "ns3__SubscribeTextType__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns3__SubscribeTextType
{
/// <PRE><BLOCKQUOTE>
///   button wording is BUYNOW
/// </BLOCKQUOTE></PRE>
	ns3__SubscribeTextType__BUYNOW,	///< xs:token value="BUYNOW"
/// <PRE><BLOCKQUOTE>
///   button wording is SUBSCRIBE
/// </BLOCKQUOTE></PRE>
	ns3__SubscribeTextType__SUBSCRIBE,	///< xs:token value="SUBSCRIBE"
};

/// @brief "urn:ebay:apis:eBLBaseComponents":ButtonStatusType is a simpleType restriction of XSD type xs:token.
///
/// <PRE><BLOCKQUOTE>
///   values for subscribe button text
/// </BLOCKQUOTE></PRE>
/// @note The enum values are prefixed with "ns3__ButtonStatusType__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns3__ButtonStatusType
{
/// <PRE><BLOCKQUOTE>
///   Changes Button Status to DELETE
/// </BLOCKQUOTE></PRE>
	ns3__ButtonStatusType__DELETE,	///< xs:token value="DELETE"
};

/// @brief "urn:ebay:apis:eBLBaseComponents":OptionTypeListType is a simpleType restriction of XSD type xs:token.
///

/// </BLOCKQUOTE></PRE>
/// @note The enum values are prefixed with "ns3__OptionTypeListType__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns3__OptionTypeListType
{
	ns3__OptionTypeListType__NoOptionType,	///< xs:token value="NoOptionType"
	ns3__OptionTypeListType__FULL,	///< xs:token value="FULL"
	ns3__OptionTypeListType__EMI,	///< xs:token value="EMI"
	ns3__OptionTypeListType__VARIABLE,	///< xs:token value="VARIABLE"
};

/// @brief "urn:ebay:apis:eBLBaseComponents":UserSelectedFundingSourceType is a simpleType restriction of XSD type xs:token.
///
/// <PRE><BLOCKQUOTE>
///   UserSelectedFundingSourceType
///   User Selected Funding Source (used by Express Checkout)
/// </BLOCKQUOTE></PRE>
/// @note The enum values are prefixed with "ns3__UserSelectedFundingSourceType__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns3__UserSelectedFundingSourceType
{
	ns3__UserSelectedFundingSourceType__ELV,	///< xs:token value="ELV"
	ns3__UserSelectedFundingSourceType__CreditCard,	///< xs:token value="CreditCard"
	ns3__UserSelectedFundingSourceType__ChinaUnionPay,	///< xs:token value="ChinaUnionPay"
	ns3__UserSelectedFundingSourceType__BML,	///< xs:token value="BML"
	ns3__UserSelectedFundingSourceType__Finance,	///< xs:token value="Finance"
	ns3__UserSelectedFundingSourceType__QIWI,	///< xs:token value="QIWI"
};

/// @brief "urn:ebay:apis:eBLBaseComponents":ItemCategoryType is a simpleType restriction of XSD type xs:token.
///

/// </BLOCKQUOTE></PRE>
/// @note The enum values are prefixed with "ns3__ItemCategoryType__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns3__ItemCategoryType
{
/// <PRE><BLOCKQUOTE>
///   Physical
/// </BLOCKQUOTE></PRE>
	ns3__ItemCategoryType__Physical,	///< xs:token value="Physical"
/// <PRE><BLOCKQUOTE>
///   Digital
/// </BLOCKQUOTE></PRE>
	ns3__ItemCategoryType__Digital,	///< xs:token value="Digital"
};

/// @brief "urn:ebay:apis:eBLBaseComponents":RecurringFlagType is a simpleType restriction of XSD type xs:token.
///

/// </BLOCKQUOTE></PRE>
/// @note The enum values are prefixed with "ns3__RecurringFlagType__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns3__RecurringFlagType
{
	ns3__RecurringFlagType__Y = 'Y',	///< xs:token value="Y"
	ns3__RecurringFlagType__y = 'y',	///< xs:token value="y"
};

/// @brief "urn:ebay:apis:eBLBaseComponents":CoupleType is a simpleType restriction of XSD type xs:token.
///
/// <PRE><BLOCKQUOTE>
///   Defines couple relationship type between buckets
/// </BLOCKQUOTE></PRE>
/// @note The enum values are prefixed with "ns3__CoupleType__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns3__CoupleType
{
/// <PRE><BLOCKQUOTE>
///   The relation between buckets are for lifetime. Any post-transaction action on one affects other as well.
/// </BLOCKQUOTE></PRE>
	ns3__CoupleType__LifeTime,	///< xs:token value="LifeTime"
};

/// @brief "urn:ebay:apis:eBLBaseComponents":PaymentCategoryType is a simpleType restriction of XSD type xs:token.
///
/// <PRE><BLOCKQUOTE>
///   Category of payment like international shipping
/// </BLOCKQUOTE></PRE>
/// @note The enum values are prefixed with "ns3__PaymentCategoryType__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns3__PaymentCategoryType
{
/// <PRE><BLOCKQUOTE>
///   Internalnation Shipping
/// </BLOCKQUOTE></PRE>
	ns3__PaymentCategoryType__InternationalShipping,	///< xs:token value="InternationalShipping"
/// <PRE><BLOCKQUOTE>
///   LocalDelivery
/// </BLOCKQUOTE></PRE>
	ns3__PaymentCategoryType__LocalDelivery,	///< xs:token value="LocalDelivery"
/// <PRE><BLOCKQUOTE>
///   BOPIS
/// </BLOCKQUOTE></PRE>
	ns3__PaymentCategoryType__BOPIS,	///< xs:token value="BOPIS"
/// <PRE><BLOCKQUOTE>
///   PUDO
/// </BLOCKQUOTE></PRE>
	ns3__PaymentCategoryType__PUDO,	///< xs:token value="PUDO"
};

/// @brief "urn:ebay:apis:eBLBaseComponents":LocationType is a simpleType restriction of XSD type xs:token.
///
/// <PRE><BLOCKQUOTE>
///   Location Type
/// </BLOCKQUOTE></PRE>
/// @note The enum values are prefixed with "ns3__LocationType__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns3__LocationType
{
/// <PRE><BLOCKQUOTE>
///   Consumer
/// </BLOCKQUOTE></PRE>
	ns3__LocationType__Consumer,	///< xs:token value="Consumer"
/// <PRE><BLOCKQUOTE>
///   Store
/// </BLOCKQUOTE></PRE>
	ns3__LocationType__Store,	///< xs:token value="Store"
/// <PRE><BLOCKQUOTE>
///   PickupDropOff
/// </BLOCKQUOTE></PRE>
	ns3__LocationType__PickupDropoff,	///< xs:token value="PickupDropoff"
};

/// @brief "urn:ebay:apis:eBLBaseComponents":WalletItemType is a simpleType restriction of XSD type xs:token.
///
/// @note The enum values are prefixed with "ns3__WalletItemType__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns3__WalletItemType
{
	ns3__WalletItemType__MERCHANT_USCORECOUPON,	///< xs:token value="MERCHANT_COUPON"
	ns3__WalletItemType__LOYALTY_USCORECARD,	///< xs:token value="LOYALTY_CARD"
	ns3__WalletItemType__MANUFACTURER_USCORECOUPON,	///< xs:token value="MANUFACTURER_COUPON"
	ns3__WalletItemType__MERCHANT_USCORECLOSED_USCORELOOP_USCOREOFFER,	///< xs:token value="MERCHANT_CLOSED_LOOP_OFFER"
};


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   urn:ebay:apis:EnhancedDataTypes                                          *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   urn:ebay:apis:CoreComponentTypes                                         *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   urn:ebay:apis:eBLBaseComponents                                          *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   urn:ebay:apis:EnhancedDataTypes                                          *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Complex Types and Top-Level Elements                                *
 *   urn:ebay:api:PayPalAPI                                                   *
 *                                                                            *
\******************************************************************************/

/// @brief "urn:ebay:api:PayPalAPI":InstallmentDetailsType is a complexType.
///
/// class ns1__InstallmentDetailsType operations:
/// - ns1__InstallmentDetailsType* soap_new_ns1__InstallmentDetailsType(soap*) allocate and default initialize
/// - ns1__InstallmentDetailsType* soap_new_ns1__InstallmentDetailsType(soap*, int num) allocate array and default initialize values
/// - ns1__InstallmentDetailsType* soap_new_req_ns1__InstallmentDetailsType(soap*, ...) allocate, set required members
/// - ns1__InstallmentDetailsType* soap_new_set_ns1__InstallmentDetailsType(soap*, ...) allocate, set all public members
/// - ns1__InstallmentDetailsType::soap_default(soap*) default initialize members
/// - int soap_read_ns1__InstallmentDetailsType(soap*, ns1__InstallmentDetailsType*) deserialize from a stream
/// - int soap_write_ns1__InstallmentDetailsType(soap*, ns1__InstallmentDetailsType*) serialize to a stream
/// - ns1__InstallmentDetailsType* ns1__InstallmentDetailsType::soap_dup(soap*) returns deep copy of ns1__InstallmentDetailsType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__InstallmentDetailsType::soap_del() deep deletes ns1__InstallmentDetailsType data members, use only after ns1__InstallmentDetailsType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__InstallmentDetailsType
{ public:
/// <PRE><BLOCKQUOTE>
///   Installment Period.
///   <br/>
///   <b>Optional</b>
///   <br/>
/// </BLOCKQUOTE></PRE>
/// Element "BillingPeriod" of XSD type "urn:ebay:apis:eBLBaseComponents":BillingPeriodType.
    enum ns3__BillingPeriodType*         BillingPeriod                  0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Installment Frequency.
///   <br/>
///   <b>Optional</b> <br/>
/// </BLOCKQUOTE></PRE>
/// Element "BillingFrequency" of XSD type xs:int.
    int*                                 BillingFrequency               0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Installment Cycles.
///   <br/>
///   <b>Optional</b> <br/>
/// </BLOCKQUOTE></PRE>
/// Element "TotalBillingCycles" of XSD type xs:int.
    int*                                 TotalBillingCycles             0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Installment Amount.
///   <br/>
///   <b>Optional</b> <br/>
/// </BLOCKQUOTE></PRE>
/// Element "Amount" of XSD type xs:string.
    std::string*                         Amount                         0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Installment Amount.
///   <br/>
///   <b>Optional</b> <br/>
/// </BLOCKQUOTE></PRE>
/// Element "ShippingAmount" of XSD type xs:string.
    std::string*                         ShippingAmount                 0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Installment Amount.
///   <br/>
///   <b>Optional</b> <br/>
/// </BLOCKQUOTE></PRE>
/// Element "TaxAmount" of XSD type xs:string.
    std::string*                         TaxAmount                      0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief "urn:ebay:api:PayPalAPI":OptionSelectionDetailsType is a complexType.
///
/// class ns1__OptionSelectionDetailsType operations:
/// - ns1__OptionSelectionDetailsType* soap_new_ns1__OptionSelectionDetailsType(soap*) allocate and default initialize
/// - ns1__OptionSelectionDetailsType* soap_new_ns1__OptionSelectionDetailsType(soap*, int num) allocate array and default initialize values
/// - ns1__OptionSelectionDetailsType* soap_new_req_ns1__OptionSelectionDetailsType(soap*, ...) allocate, set required members
/// - ns1__OptionSelectionDetailsType* soap_new_set_ns1__OptionSelectionDetailsType(soap*, ...) allocate, set all public members
/// - ns1__OptionSelectionDetailsType::soap_default(soap*) default initialize members
/// - int soap_read_ns1__OptionSelectionDetailsType(soap*, ns1__OptionSelectionDetailsType*) deserialize from a stream
/// - int soap_write_ns1__OptionSelectionDetailsType(soap*, ns1__OptionSelectionDetailsType*) serialize to a stream
/// - ns1__OptionSelectionDetailsType* ns1__OptionSelectionDetailsType::soap_dup(soap*) returns deep copy of ns1__OptionSelectionDetailsType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__OptionSelectionDetailsType::soap_del() deep deletes ns1__OptionSelectionDetailsType data members, use only after ns1__OptionSelectionDetailsType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__OptionSelectionDetailsType
{ public:
/// <PRE><BLOCKQUOTE>
///   Option Selection.
///   <br/>
///   <b>Required</b>
///   <br/>
///   Character length and limitations: 12 single-byte alphanumeric characters
/// </BLOCKQUOTE></PRE>
/// Element "OptionSelection" of XSD type xs:string.
    std::string                          OptionSelection                1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Option Price.
///   <br/>
///   <b>Optional</b> <br/>
/// </BLOCKQUOTE></PRE>
/// Element "Price" of XSD type xs:string.
    std::string*                         Price                          0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Option Type
///   <br/>
///   <b>Optional</b>
///   <br/>
/// </BLOCKQUOTE></PRE>
/// Element "OptionType" of XSD type "urn:ebay:apis:eBLBaseComponents":OptionTypeListType.
    enum ns3__OptionTypeListType*        OptionType                     0;	///< Optional element.
/// Vector of ns1__InstallmentDetailsType* of length 0..10.
    std::vector<ns1__InstallmentDetailsType*> PaymentPeriod                  0:10;	///< Elements.
    struct soap                         *soap                          ;
};

/// @brief "urn:ebay:api:PayPalAPI":OptionDetailsType is a complexType.
///
/// class ns1__OptionDetailsType operations:
/// - ns1__OptionDetailsType* soap_new_ns1__OptionDetailsType(soap*) allocate and default initialize
/// - ns1__OptionDetailsType* soap_new_ns1__OptionDetailsType(soap*, int num) allocate array and default initialize values
/// - ns1__OptionDetailsType* soap_new_req_ns1__OptionDetailsType(soap*, ...) allocate, set required members
/// - ns1__OptionDetailsType* soap_new_set_ns1__OptionDetailsType(soap*, ...) allocate, set all public members
/// - ns1__OptionDetailsType::soap_default(soap*) default initialize members
/// - int soap_read_ns1__OptionDetailsType(soap*, ns1__OptionDetailsType*) deserialize from a stream
/// - int soap_write_ns1__OptionDetailsType(soap*, ns1__OptionDetailsType*) serialize to a stream
/// - ns1__OptionDetailsType* ns1__OptionDetailsType::soap_dup(soap*) returns deep copy of ns1__OptionDetailsType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__OptionDetailsType::soap_del() deep deletes ns1__OptionDetailsType data members, use only after ns1__OptionDetailsType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__OptionDetailsType
{ public:
/// <PRE><BLOCKQUOTE>
///   Option Name.
///   <br/>
///   <b>Optional</b>
///   <br/>
/// </BLOCKQUOTE></PRE>
/// Element "OptionName" of XSD type xs:string.
    std::string                          OptionName                     1;	///< Required element.
/// Vector of ns1__OptionSelectionDetailsType* of length 0..100.
    std::vector<ns1__OptionSelectionDetailsType*> OptionSelectionDetails         0:100;	///< Elements.
    struct soap                         *soap                          ;
};

/// @brief "urn:ebay:api:PayPalAPI":MassPayRequestItemType is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   MassPayRequestItemType
/// </BLOCKQUOTE></PRE>
/// class ns1__MassPayRequestItemType operations:
/// - ns1__MassPayRequestItemType* soap_new_ns1__MassPayRequestItemType(soap*) allocate and default initialize
/// - ns1__MassPayRequestItemType* soap_new_ns1__MassPayRequestItemType(soap*, int num) allocate array and default initialize values
/// - ns1__MassPayRequestItemType* soap_new_req_ns1__MassPayRequestItemType(soap*, ...) allocate, set required members
/// - ns1__MassPayRequestItemType* soap_new_set_ns1__MassPayRequestItemType(soap*, ...) allocate, set all public members
/// - ns1__MassPayRequestItemType::soap_default(soap*) default initialize members
/// - int soap_read_ns1__MassPayRequestItemType(soap*, ns1__MassPayRequestItemType*) deserialize from a stream
/// - int soap_write_ns1__MassPayRequestItemType(soap*, ns1__MassPayRequestItemType*) serialize to a stream
/// - ns1__MassPayRequestItemType* ns1__MassPayRequestItemType::soap_dup(soap*) returns deep copy of ns1__MassPayRequestItemType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__MassPayRequestItemType::soap_del() deep deletes ns1__MassPayRequestItemType data members, use only after ns1__MassPayRequestItemType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__MassPayRequestItemType
{ public:
/// <PRE><BLOCKQUOTE>
///   Email address of recipient. <br/>
///   <br/>
///   <b>Required</b>
///   <br/>
///   <br/>
///   You must specify ReceiverEmail, ReceiverPhone, or ReceiverID, but all MassPayItems in a request must use the same field to specify recipients.
///   <br/>
///   <br/>
///   Character length and limitations: 127 single-byte characters maximum.
/// </BLOCKQUOTE></PRE>
/// Element "ReceiverEmail" of XSD type "urn:ebay:apis:eBLBaseComponents":EmailAddressType.
    ns3__EmailAddressType*               ReceiverEmail                  0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Phone number of recipient. <br/>
///   <br/>
///   <b>Required</b>
///   <br/>
///   <br/>
///   You must specify ReceiverEmail, ReceiverPhone, or ReceiverID, but all MassPayItems in a request must use the same field to specify recipients.
///   <br/>
///   <br/>
/// </BLOCKQUOTE></PRE>
/// Element "ReceiverPhone" of XSD type xs:string.
    std::string*                         ReceiverPhone                  0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Unique PayPal customer account number. This value corresponds to the value of PayerID returned by GetTransactionDetails. <br/>
///   <br/>
///   <b>Required</b>
///   <br/>
///   <br/>
///   You must specify ReceiverEmail, ReceiverPhone, or ReceiverID, but all MassPayItems in a request must use the same field to specify recipients.
///   <br/>
///   <br/>
///   Character length and limitations: 17 single-byte characters maximum.
/// </BLOCKQUOTE></PRE>
/// Element "ReceiverID" of XSD type "urn:ebay:apis:eBLBaseComponents":UserIDType.
    ns3__UserIDType*                     ReceiverID                     0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Payment amount. You must set the currencyID attribute to one of the three-character currency codes for any of the supported PayPal currencies. <br/>
///   <br/>
///   <b>Required</b>
///   <br/>
///   <br/>
///   You cannot mix currencies in a single MassPayRequest. A single request must include items that are of the same currency.
/// </BLOCKQUOTE></PRE>
/// Element "Amount" of XSD type "urn:ebay:apis:CoreComponentTypes":BasicAmountType.
    ns2__BasicAmountType*                Amount                         1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Transaction-specific identification number for tracking in an accounting system. <br/>
///   <br/>
///   Optional
///   <br/>
///   <br/>
///   Character length and limitations: 30 single-byte characters. No whitespace allowed.
/// </BLOCKQUOTE></PRE>
/// Element "UniqueId" of XSD type xs:string.
    std::string*                         UniqueId                       0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Custom note for each recipient. <br/>
///   <br/>
///   Optional
///   <br/>
///   <br/>
///   Character length and limitations: 4,000 single-byte alphanumeric characters
/// </BLOCKQUOTE></PRE>
/// Element "Note" of XSD type xs:string.
    std::string*                         Note                           0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "urn:ebay:api:PayPalAPI":BMCreateButtonReq
/// @brief "urn:ebay:api:PayPalAPI":BMCreateButtonReq is a complexType.
///
/// class _ns1__BMCreateButtonReq operations:
/// - _ns1__BMCreateButtonReq* soap_new__ns1__BMCreateButtonReq(soap*) allocate and default initialize
/// - _ns1__BMCreateButtonReq* soap_new__ns1__BMCreateButtonReq(soap*, int num) allocate array and default initialize values
/// - _ns1__BMCreateButtonReq* soap_new_req__ns1__BMCreateButtonReq(soap*, ...) allocate, set required members
/// - _ns1__BMCreateButtonReq* soap_new_set__ns1__BMCreateButtonReq(soap*, ...) allocate, set all public members
/// - _ns1__BMCreateButtonReq::soap_default(soap*) default initialize members
/// - int soap_read__ns1__BMCreateButtonReq(soap*, _ns1__BMCreateButtonReq*) deserialize from a stream
/// - int soap_write__ns1__BMCreateButtonReq(soap*, _ns1__BMCreateButtonReq*) serialize to a stream
/// - _ns1__BMCreateButtonReq* _ns1__BMCreateButtonReq::soap_dup(soap*) returns deep copy of _ns1__BMCreateButtonReq, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__BMCreateButtonReq::soap_del() deep deletes _ns1__BMCreateButtonReq data members, use only after _ns1__BMCreateButtonReq::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__BMCreateButtonReq
{ public:
/// Element reference "urn:ebay:api:PayPalAPI:""urn:ebay:api:PayPalAPI":BMCreateButtonRequest.
    ns1__BMCreateButtonRequestType*      BMCreateButtonRequest          1;	///< Required element.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "urn:ebay:api:PayPalAPI":BMUpdateButtonReq
/// @brief "urn:ebay:api:PayPalAPI":BMUpdateButtonReq is a complexType.
///
/// class _ns1__BMUpdateButtonReq operations:
/// - _ns1__BMUpdateButtonReq* soap_new__ns1__BMUpdateButtonReq(soap*) allocate and default initialize
/// - _ns1__BMUpdateButtonReq* soap_new__ns1__BMUpdateButtonReq(soap*, int num) allocate array and default initialize values
/// - _ns1__BMUpdateButtonReq* soap_new_req__ns1__BMUpdateButtonReq(soap*, ...) allocate, set required members
/// - _ns1__BMUpdateButtonReq* soap_new_set__ns1__BMUpdateButtonReq(soap*, ...) allocate, set all public members
/// - _ns1__BMUpdateButtonReq::soap_default(soap*) default initialize members
/// - int soap_read__ns1__BMUpdateButtonReq(soap*, _ns1__BMUpdateButtonReq*) deserialize from a stream
/// - int soap_write__ns1__BMUpdateButtonReq(soap*, _ns1__BMUpdateButtonReq*) serialize to a stream
/// - _ns1__BMUpdateButtonReq* _ns1__BMUpdateButtonReq::soap_dup(soap*) returns deep copy of _ns1__BMUpdateButtonReq, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__BMUpdateButtonReq::soap_del() deep deletes _ns1__BMUpdateButtonReq data members, use only after _ns1__BMUpdateButtonReq::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__BMUpdateButtonReq
{ public:
/// Element reference "urn:ebay:api:PayPalAPI:""urn:ebay:api:PayPalAPI":BMUpdateButtonRequest.
    ns1__BMUpdateButtonRequestType*      BMUpdateButtonRequest          1;	///< Required element.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "urn:ebay:api:PayPalAPI":BMManageButtonStatusReq
/// @brief "urn:ebay:api:PayPalAPI":BMManageButtonStatusReq is a complexType.
///
/// class _ns1__BMManageButtonStatusReq operations:
/// - _ns1__BMManageButtonStatusReq* soap_new__ns1__BMManageButtonStatusReq(soap*) allocate and default initialize
/// - _ns1__BMManageButtonStatusReq* soap_new__ns1__BMManageButtonStatusReq(soap*, int num) allocate array and default initialize values
/// - _ns1__BMManageButtonStatusReq* soap_new_req__ns1__BMManageButtonStatusReq(soap*, ...) allocate, set required members
/// - _ns1__BMManageButtonStatusReq* soap_new_set__ns1__BMManageButtonStatusReq(soap*, ...) allocate, set all public members
/// - _ns1__BMManageButtonStatusReq::soap_default(soap*) default initialize members
/// - int soap_read__ns1__BMManageButtonStatusReq(soap*, _ns1__BMManageButtonStatusReq*) deserialize from a stream
/// - int soap_write__ns1__BMManageButtonStatusReq(soap*, _ns1__BMManageButtonStatusReq*) serialize to a stream
/// - _ns1__BMManageButtonStatusReq* _ns1__BMManageButtonStatusReq::soap_dup(soap*) returns deep copy of _ns1__BMManageButtonStatusReq, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__BMManageButtonStatusReq::soap_del() deep deletes _ns1__BMManageButtonStatusReq data members, use only after _ns1__BMManageButtonStatusReq::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__BMManageButtonStatusReq
{ public:
/// Element reference "urn:ebay:api:PayPalAPI:""urn:ebay:api:PayPalAPI":BMManageButtonStatusRequest.
    ns1__BMManageButtonStatusRequestType*  BMManageButtonStatusRequest    1;	///< Required element.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "urn:ebay:api:PayPalAPI":BMGetButtonDetailsReq
/// @brief "urn:ebay:api:PayPalAPI":BMGetButtonDetailsReq is a complexType.
///
/// class _ns1__BMGetButtonDetailsReq operations:
/// - _ns1__BMGetButtonDetailsReq* soap_new__ns1__BMGetButtonDetailsReq(soap*) allocate and default initialize
/// - _ns1__BMGetButtonDetailsReq* soap_new__ns1__BMGetButtonDetailsReq(soap*, int num) allocate array and default initialize values
/// - _ns1__BMGetButtonDetailsReq* soap_new_req__ns1__BMGetButtonDetailsReq(soap*, ...) allocate, set required members
/// - _ns1__BMGetButtonDetailsReq* soap_new_set__ns1__BMGetButtonDetailsReq(soap*, ...) allocate, set all public members
/// - _ns1__BMGetButtonDetailsReq::soap_default(soap*) default initialize members
/// - int soap_read__ns1__BMGetButtonDetailsReq(soap*, _ns1__BMGetButtonDetailsReq*) deserialize from a stream
/// - int soap_write__ns1__BMGetButtonDetailsReq(soap*, _ns1__BMGetButtonDetailsReq*) serialize to a stream
/// - _ns1__BMGetButtonDetailsReq* _ns1__BMGetButtonDetailsReq::soap_dup(soap*) returns deep copy of _ns1__BMGetButtonDetailsReq, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__BMGetButtonDetailsReq::soap_del() deep deletes _ns1__BMGetButtonDetailsReq data members, use only after _ns1__BMGetButtonDetailsReq::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__BMGetButtonDetailsReq
{ public:
/// Element reference "urn:ebay:api:PayPalAPI:""urn:ebay:api:PayPalAPI":BMGetButtonDetailsRequest.
    ns1__BMGetButtonDetailsRequestType*  BMGetButtonDetailsRequest      1;	///< Required element.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "urn:ebay:api:PayPalAPI":BMSetInventoryReq
/// @brief "urn:ebay:api:PayPalAPI":BMSetInventoryReq is a complexType.
///
/// class _ns1__BMSetInventoryReq operations:
/// - _ns1__BMSetInventoryReq* soap_new__ns1__BMSetInventoryReq(soap*) allocate and default initialize
/// - _ns1__BMSetInventoryReq* soap_new__ns1__BMSetInventoryReq(soap*, int num) allocate array and default initialize values
/// - _ns1__BMSetInventoryReq* soap_new_req__ns1__BMSetInventoryReq(soap*, ...) allocate, set required members
/// - _ns1__BMSetInventoryReq* soap_new_set__ns1__BMSetInventoryReq(soap*, ...) allocate, set all public members
/// - _ns1__BMSetInventoryReq::soap_default(soap*) default initialize members
/// - int soap_read__ns1__BMSetInventoryReq(soap*, _ns1__BMSetInventoryReq*) deserialize from a stream
/// - int soap_write__ns1__BMSetInventoryReq(soap*, _ns1__BMSetInventoryReq*) serialize to a stream
/// - _ns1__BMSetInventoryReq* _ns1__BMSetInventoryReq::soap_dup(soap*) returns deep copy of _ns1__BMSetInventoryReq, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__BMSetInventoryReq::soap_del() deep deletes _ns1__BMSetInventoryReq data members, use only after _ns1__BMSetInventoryReq::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__BMSetInventoryReq
{ public:
/// Element reference "urn:ebay:api:PayPalAPI:""urn:ebay:api:PayPalAPI":BMSetInventoryRequest.
    ns1__BMSetInventoryRequestType*      BMSetInventoryRequest          1;	///< Required element.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "urn:ebay:api:PayPalAPI":BMGetInventoryReq
/// @brief "urn:ebay:api:PayPalAPI":BMGetInventoryReq is a complexType.
///
/// class _ns1__BMGetInventoryReq operations:
/// - _ns1__BMGetInventoryReq* soap_new__ns1__BMGetInventoryReq(soap*) allocate and default initialize
/// - _ns1__BMGetInventoryReq* soap_new__ns1__BMGetInventoryReq(soap*, int num) allocate array and default initialize values
/// - _ns1__BMGetInventoryReq* soap_new_req__ns1__BMGetInventoryReq(soap*, ...) allocate, set required members
/// - _ns1__BMGetInventoryReq* soap_new_set__ns1__BMGetInventoryReq(soap*, ...) allocate, set all public members
/// - _ns1__BMGetInventoryReq::soap_default(soap*) default initialize members
/// - int soap_read__ns1__BMGetInventoryReq(soap*, _ns1__BMGetInventoryReq*) deserialize from a stream
/// - int soap_write__ns1__BMGetInventoryReq(soap*, _ns1__BMGetInventoryReq*) serialize to a stream
/// - _ns1__BMGetInventoryReq* _ns1__BMGetInventoryReq::soap_dup(soap*) returns deep copy of _ns1__BMGetInventoryReq, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__BMGetInventoryReq::soap_del() deep deletes _ns1__BMGetInventoryReq data members, use only after _ns1__BMGetInventoryReq::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__BMGetInventoryReq
{ public:
/// Element reference "urn:ebay:api:PayPalAPI:""urn:ebay:api:PayPalAPI":BMGetInventoryRequest.
    ns1__BMGetInventoryRequestType*      BMGetInventoryRequest          1;	///< Required element.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "urn:ebay:api:PayPalAPI":BMButtonSearchReq
/// @brief "urn:ebay:api:PayPalAPI":BMButtonSearchReq is a complexType.
///
/// class _ns1__BMButtonSearchReq operations:
/// - _ns1__BMButtonSearchReq* soap_new__ns1__BMButtonSearchReq(soap*) allocate and default initialize
/// - _ns1__BMButtonSearchReq* soap_new__ns1__BMButtonSearchReq(soap*, int num) allocate array and default initialize values
/// - _ns1__BMButtonSearchReq* soap_new_req__ns1__BMButtonSearchReq(soap*, ...) allocate, set required members
/// - _ns1__BMButtonSearchReq* soap_new_set__ns1__BMButtonSearchReq(soap*, ...) allocate, set all public members
/// - _ns1__BMButtonSearchReq::soap_default(soap*) default initialize members
/// - int soap_read__ns1__BMButtonSearchReq(soap*, _ns1__BMButtonSearchReq*) deserialize from a stream
/// - int soap_write__ns1__BMButtonSearchReq(soap*, _ns1__BMButtonSearchReq*) serialize to a stream
/// - _ns1__BMButtonSearchReq* _ns1__BMButtonSearchReq::soap_dup(soap*) returns deep copy of _ns1__BMButtonSearchReq, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__BMButtonSearchReq::soap_del() deep deletes _ns1__BMButtonSearchReq data members, use only after _ns1__BMButtonSearchReq::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__BMButtonSearchReq
{ public:
/// Element reference "urn:ebay:api:PayPalAPI:""urn:ebay:api:PayPalAPI":BMButtonSearchRequest.
    ns1__BMButtonSearchRequestType*      BMButtonSearchRequest          1;	///< Required element.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "urn:ebay:api:PayPalAPI":RefundTransactionReq
/// @brief "urn:ebay:api:PayPalAPI":RefundTransactionReq is a complexType.
///
/// class _ns1__RefundTransactionReq operations:
/// - _ns1__RefundTransactionReq* soap_new__ns1__RefundTransactionReq(soap*) allocate and default initialize
/// - _ns1__RefundTransactionReq* soap_new__ns1__RefundTransactionReq(soap*, int num) allocate array and default initialize values
/// - _ns1__RefundTransactionReq* soap_new_req__ns1__RefundTransactionReq(soap*, ...) allocate, set required members
/// - _ns1__RefundTransactionReq* soap_new_set__ns1__RefundTransactionReq(soap*, ...) allocate, set all public members
/// - _ns1__RefundTransactionReq::soap_default(soap*) default initialize members
/// - int soap_read__ns1__RefundTransactionReq(soap*, _ns1__RefundTransactionReq*) deserialize from a stream
/// - int soap_write__ns1__RefundTransactionReq(soap*, _ns1__RefundTransactionReq*) serialize to a stream
/// - _ns1__RefundTransactionReq* _ns1__RefundTransactionReq::soap_dup(soap*) returns deep copy of _ns1__RefundTransactionReq, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__RefundTransactionReq::soap_del() deep deletes _ns1__RefundTransactionReq data members, use only after _ns1__RefundTransactionReq::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__RefundTransactionReq
{ public:
/// Element reference "urn:ebay:api:PayPalAPI:""urn:ebay:api:PayPalAPI":RefundTransactionRequest.
    ns1__RefundTransactionRequestType*   RefundTransactionRequest       1;	///< Required element.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "urn:ebay:api:PayPalAPI":InitiateRecoupReq
/// @brief "urn:ebay:api:PayPalAPI":InitiateRecoupReq is a complexType.
///
/// class _ns1__InitiateRecoupReq operations:
/// - _ns1__InitiateRecoupReq* soap_new__ns1__InitiateRecoupReq(soap*) allocate and default initialize
/// - _ns1__InitiateRecoupReq* soap_new__ns1__InitiateRecoupReq(soap*, int num) allocate array and default initialize values
/// - _ns1__InitiateRecoupReq* soap_new_req__ns1__InitiateRecoupReq(soap*, ...) allocate, set required members
/// - _ns1__InitiateRecoupReq* soap_new_set__ns1__InitiateRecoupReq(soap*, ...) allocate, set all public members
/// - _ns1__InitiateRecoupReq::soap_default(soap*) default initialize members
/// - int soap_read__ns1__InitiateRecoupReq(soap*, _ns1__InitiateRecoupReq*) deserialize from a stream
/// - int soap_write__ns1__InitiateRecoupReq(soap*, _ns1__InitiateRecoupReq*) serialize to a stream
/// - _ns1__InitiateRecoupReq* _ns1__InitiateRecoupReq::soap_dup(soap*) returns deep copy of _ns1__InitiateRecoupReq, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__InitiateRecoupReq::soap_del() deep deletes _ns1__InitiateRecoupReq data members, use only after _ns1__InitiateRecoupReq::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__InitiateRecoupReq
{ public:
/// Element reference "urn:ebay:api:PayPalAPI:""urn:ebay:api:PayPalAPI":InitiateRecoupRequest.
    ns1__InitiateRecoupRequestType*      InitiateRecoupRequest          1;	///< Required element.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "urn:ebay:api:PayPalAPI":CompleteRecoupReq
/// @brief "urn:ebay:api:PayPalAPI":CompleteRecoupReq is a complexType.
///
/// class _ns1__CompleteRecoupReq operations:
/// - _ns1__CompleteRecoupReq* soap_new__ns1__CompleteRecoupReq(soap*) allocate and default initialize
/// - _ns1__CompleteRecoupReq* soap_new__ns1__CompleteRecoupReq(soap*, int num) allocate array and default initialize values
/// - _ns1__CompleteRecoupReq* soap_new_req__ns1__CompleteRecoupReq(soap*, ...) allocate, set required members
/// - _ns1__CompleteRecoupReq* soap_new_set__ns1__CompleteRecoupReq(soap*, ...) allocate, set all public members
/// - _ns1__CompleteRecoupReq::soap_default(soap*) default initialize members
/// - int soap_read__ns1__CompleteRecoupReq(soap*, _ns1__CompleteRecoupReq*) deserialize from a stream
/// - int soap_write__ns1__CompleteRecoupReq(soap*, _ns1__CompleteRecoupReq*) serialize to a stream
/// - _ns1__CompleteRecoupReq* _ns1__CompleteRecoupReq::soap_dup(soap*) returns deep copy of _ns1__CompleteRecoupReq, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__CompleteRecoupReq::soap_del() deep deletes _ns1__CompleteRecoupReq data members, use only after _ns1__CompleteRecoupReq::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__CompleteRecoupReq
{ public:
/// Element reference "urn:ebay:api:PayPalAPI:""urn:ebay:api:PayPalAPI":CompleteRecoupRequest.
    ns1__CompleteRecoupRequestType*      CompleteRecoupRequest          1;	///< Required element.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "urn:ebay:api:PayPalAPI":CancelRecoupReq
/// @brief "urn:ebay:api:PayPalAPI":CancelRecoupReq is a complexType.
///
/// class _ns1__CancelRecoupReq operations:
/// - _ns1__CancelRecoupReq* soap_new__ns1__CancelRecoupReq(soap*) allocate and default initialize
/// - _ns1__CancelRecoupReq* soap_new__ns1__CancelRecoupReq(soap*, int num) allocate array and default initialize values
/// - _ns1__CancelRecoupReq* soap_new_req__ns1__CancelRecoupReq(soap*, ...) allocate, set required members
/// - _ns1__CancelRecoupReq* soap_new_set__ns1__CancelRecoupReq(soap*, ...) allocate, set all public members
/// - _ns1__CancelRecoupReq::soap_default(soap*) default initialize members
/// - int soap_read__ns1__CancelRecoupReq(soap*, _ns1__CancelRecoupReq*) deserialize from a stream
/// - int soap_write__ns1__CancelRecoupReq(soap*, _ns1__CancelRecoupReq*) serialize to a stream
/// - _ns1__CancelRecoupReq* _ns1__CancelRecoupReq::soap_dup(soap*) returns deep copy of _ns1__CancelRecoupReq, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__CancelRecoupReq::soap_del() deep deletes _ns1__CancelRecoupReq data members, use only after _ns1__CancelRecoupReq::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__CancelRecoupReq
{ public:
/// Element reference "urn:ebay:api:PayPalAPI:""urn:ebay:api:PayPalAPI":CancelRecoupRequest.
    ns1__CancelRecoupRequestType*        CancelRecoupRequest            1;	///< Required element.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "urn:ebay:api:PayPalAPI":GetTransactionDetailsReq
/// @brief "urn:ebay:api:PayPalAPI":GetTransactionDetailsReq is a complexType.
///
/// class _ns1__GetTransactionDetailsReq operations:
/// - _ns1__GetTransactionDetailsReq* soap_new__ns1__GetTransactionDetailsReq(soap*) allocate and default initialize
/// - _ns1__GetTransactionDetailsReq* soap_new__ns1__GetTransactionDetailsReq(soap*, int num) allocate array and default initialize values
/// - _ns1__GetTransactionDetailsReq* soap_new_req__ns1__GetTransactionDetailsReq(soap*, ...) allocate, set required members
/// - _ns1__GetTransactionDetailsReq* soap_new_set__ns1__GetTransactionDetailsReq(soap*, ...) allocate, set all public members
/// - _ns1__GetTransactionDetailsReq::soap_default(soap*) default initialize members
/// - int soap_read__ns1__GetTransactionDetailsReq(soap*, _ns1__GetTransactionDetailsReq*) deserialize from a stream
/// - int soap_write__ns1__GetTransactionDetailsReq(soap*, _ns1__GetTransactionDetailsReq*) serialize to a stream
/// - _ns1__GetTransactionDetailsReq* _ns1__GetTransactionDetailsReq::soap_dup(soap*) returns deep copy of _ns1__GetTransactionDetailsReq, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__GetTransactionDetailsReq::soap_del() deep deletes _ns1__GetTransactionDetailsReq data members, use only after _ns1__GetTransactionDetailsReq::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__GetTransactionDetailsReq
{ public:
/// Element reference "urn:ebay:api:PayPalAPI:""urn:ebay:api:PayPalAPI":GetTransactionDetailsRequest.
    ns1__GetTransactionDetailsRequestType*  GetTransactionDetailsRequest   1;	///< Required element.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "urn:ebay:api:PayPalAPI":BillUserReq
/// @brief "urn:ebay:api:PayPalAPI":BillUserReq is a complexType.
///
/// class _ns1__BillUserReq operations:
/// - _ns1__BillUserReq* soap_new__ns1__BillUserReq(soap*) allocate and default initialize
/// - _ns1__BillUserReq* soap_new__ns1__BillUserReq(soap*, int num) allocate array and default initialize values
/// - _ns1__BillUserReq* soap_new_req__ns1__BillUserReq(soap*, ...) allocate, set required members
/// - _ns1__BillUserReq* soap_new_set__ns1__BillUserReq(soap*, ...) allocate, set all public members
/// - _ns1__BillUserReq::soap_default(soap*) default initialize members
/// - int soap_read__ns1__BillUserReq(soap*, _ns1__BillUserReq*) deserialize from a stream
/// - int soap_write__ns1__BillUserReq(soap*, _ns1__BillUserReq*) serialize to a stream
/// - _ns1__BillUserReq* _ns1__BillUserReq::soap_dup(soap*) returns deep copy of _ns1__BillUserReq, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__BillUserReq::soap_del() deep deletes _ns1__BillUserReq data members, use only after _ns1__BillUserReq::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__BillUserReq
{ public:
/// Element reference "urn:ebay:api:PayPalAPI:""urn:ebay:api:PayPalAPI":BillUserRequest.
    ns1__BillUserRequestType*            BillUserRequest                1;	///< Required element.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "urn:ebay:api:PayPalAPI":TransactionSearchReq
/// @brief "urn:ebay:api:PayPalAPI":TransactionSearchReq is a complexType.
///
/// class _ns1__TransactionSearchReq operations:
/// - _ns1__TransactionSearchReq* soap_new__ns1__TransactionSearchReq(soap*) allocate and default initialize
/// - _ns1__TransactionSearchReq* soap_new__ns1__TransactionSearchReq(soap*, int num) allocate array and default initialize values
/// - _ns1__TransactionSearchReq* soap_new_req__ns1__TransactionSearchReq(soap*, ...) allocate, set required members
/// - _ns1__TransactionSearchReq* soap_new_set__ns1__TransactionSearchReq(soap*, ...) allocate, set all public members
/// - _ns1__TransactionSearchReq::soap_default(soap*) default initialize members
/// - int soap_read__ns1__TransactionSearchReq(soap*, _ns1__TransactionSearchReq*) deserialize from a stream
/// - int soap_write__ns1__TransactionSearchReq(soap*, _ns1__TransactionSearchReq*) serialize to a stream
/// - _ns1__TransactionSearchReq* _ns1__TransactionSearchReq::soap_dup(soap*) returns deep copy of _ns1__TransactionSearchReq, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__TransactionSearchReq::soap_del() deep deletes _ns1__TransactionSearchReq data members, use only after _ns1__TransactionSearchReq::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__TransactionSearchReq
{ public:
/// Element reference "urn:ebay:api:PayPalAPI:""urn:ebay:api:PayPalAPI":TransactionSearchRequest.
    ns1__TransactionSearchRequestType*   TransactionSearchRequest       1;	///< Required element.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "urn:ebay:api:PayPalAPI":MassPayReq
/// @brief "urn:ebay:api:PayPalAPI":MassPayReq is a complexType.
///
/// class _ns1__MassPayReq operations:
/// - _ns1__MassPayReq* soap_new__ns1__MassPayReq(soap*) allocate and default initialize
/// - _ns1__MassPayReq* soap_new__ns1__MassPayReq(soap*, int num) allocate array and default initialize values
/// - _ns1__MassPayReq* soap_new_req__ns1__MassPayReq(soap*, ...) allocate, set required members
/// - _ns1__MassPayReq* soap_new_set__ns1__MassPayReq(soap*, ...) allocate, set all public members
/// - _ns1__MassPayReq::soap_default(soap*) default initialize members
/// - int soap_read__ns1__MassPayReq(soap*, _ns1__MassPayReq*) deserialize from a stream
/// - int soap_write__ns1__MassPayReq(soap*, _ns1__MassPayReq*) serialize to a stream
/// - _ns1__MassPayReq* _ns1__MassPayReq::soap_dup(soap*) returns deep copy of _ns1__MassPayReq, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__MassPayReq::soap_del() deep deletes _ns1__MassPayReq data members, use only after _ns1__MassPayReq::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__MassPayReq
{ public:
/// Element reference "urn:ebay:api:PayPalAPI:""urn:ebay:api:PayPalAPI":MassPayRequest.
    ns1__MassPayRequestType*             MassPayRequest                 1;	///< Required element.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "urn:ebay:api:PayPalAPI":BillAgreementUpdateReq
/// @brief "urn:ebay:api:PayPalAPI":BillAgreementUpdateReq is a complexType.
///
/// class _ns1__BillAgreementUpdateReq operations:
/// - _ns1__BillAgreementUpdateReq* soap_new__ns1__BillAgreementUpdateReq(soap*) allocate and default initialize
/// - _ns1__BillAgreementUpdateReq* soap_new__ns1__BillAgreementUpdateReq(soap*, int num) allocate array and default initialize values
/// - _ns1__BillAgreementUpdateReq* soap_new_req__ns1__BillAgreementUpdateReq(soap*, ...) allocate, set required members
/// - _ns1__BillAgreementUpdateReq* soap_new_set__ns1__BillAgreementUpdateReq(soap*, ...) allocate, set all public members
/// - _ns1__BillAgreementUpdateReq::soap_default(soap*) default initialize members
/// - int soap_read__ns1__BillAgreementUpdateReq(soap*, _ns1__BillAgreementUpdateReq*) deserialize from a stream
/// - int soap_write__ns1__BillAgreementUpdateReq(soap*, _ns1__BillAgreementUpdateReq*) serialize to a stream
/// - _ns1__BillAgreementUpdateReq* _ns1__BillAgreementUpdateReq::soap_dup(soap*) returns deep copy of _ns1__BillAgreementUpdateReq, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__BillAgreementUpdateReq::soap_del() deep deletes _ns1__BillAgreementUpdateReq data members, use only after _ns1__BillAgreementUpdateReq::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__BillAgreementUpdateReq
{ public:
/// Element reference "urn:ebay:api:PayPalAPI:""urn:ebay:api:PayPalAPI":BAUpdateRequest.
    ns1__BAUpdateRequestType*            BAUpdateRequest                1;	///< Required element.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "urn:ebay:api:PayPalAPI":AddressVerifyReq
/// @brief "urn:ebay:api:PayPalAPI":AddressVerifyReq is a complexType.
///
/// class _ns1__AddressVerifyReq operations:
/// - _ns1__AddressVerifyReq* soap_new__ns1__AddressVerifyReq(soap*) allocate and default initialize
/// - _ns1__AddressVerifyReq* soap_new__ns1__AddressVerifyReq(soap*, int num) allocate array and default initialize values
/// - _ns1__AddressVerifyReq* soap_new_req__ns1__AddressVerifyReq(soap*, ...) allocate, set required members
/// - _ns1__AddressVerifyReq* soap_new_set__ns1__AddressVerifyReq(soap*, ...) allocate, set all public members
/// - _ns1__AddressVerifyReq::soap_default(soap*) default initialize members
/// - int soap_read__ns1__AddressVerifyReq(soap*, _ns1__AddressVerifyReq*) deserialize from a stream
/// - int soap_write__ns1__AddressVerifyReq(soap*, _ns1__AddressVerifyReq*) serialize to a stream
/// - _ns1__AddressVerifyReq* _ns1__AddressVerifyReq::soap_dup(soap*) returns deep copy of _ns1__AddressVerifyReq, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__AddressVerifyReq::soap_del() deep deletes _ns1__AddressVerifyReq data members, use only after _ns1__AddressVerifyReq::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__AddressVerifyReq
{ public:
/// Element reference "urn:ebay:api:PayPalAPI:""urn:ebay:api:PayPalAPI":AddressVerifyRequest.
    ns1__AddressVerifyRequestType*       AddressVerifyRequest           1;	///< Required element.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "urn:ebay:api:PayPalAPI":EnterBoardingReq
/// @brief "urn:ebay:api:PayPalAPI":EnterBoardingReq is a complexType.
///
/// class _ns1__EnterBoardingReq operations:
/// - _ns1__EnterBoardingReq* soap_new__ns1__EnterBoardingReq(soap*) allocate and default initialize
/// - _ns1__EnterBoardingReq* soap_new__ns1__EnterBoardingReq(soap*, int num) allocate array and default initialize values
/// - _ns1__EnterBoardingReq* soap_new_req__ns1__EnterBoardingReq(soap*, ...) allocate, set required members
/// - _ns1__EnterBoardingReq* soap_new_set__ns1__EnterBoardingReq(soap*, ...) allocate, set all public members
/// - _ns1__EnterBoardingReq::soap_default(soap*) default initialize members
/// - int soap_read__ns1__EnterBoardingReq(soap*, _ns1__EnterBoardingReq*) deserialize from a stream
/// - int soap_write__ns1__EnterBoardingReq(soap*, _ns1__EnterBoardingReq*) serialize to a stream
/// - _ns1__EnterBoardingReq* _ns1__EnterBoardingReq::soap_dup(soap*) returns deep copy of _ns1__EnterBoardingReq, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__EnterBoardingReq::soap_del() deep deletes _ns1__EnterBoardingReq data members, use only after _ns1__EnterBoardingReq::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__EnterBoardingReq
{ public:
/// Element reference "urn:ebay:api:PayPalAPI:""urn:ebay:api:PayPalAPI":EnterBoardingRequest.
    ns1__EnterBoardingRequestType*       EnterBoardingRequest           1;	///< Required element.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "urn:ebay:api:PayPalAPI":GetBoardingDetailsReq
/// @brief "urn:ebay:api:PayPalAPI":GetBoardingDetailsReq is a complexType.
///
/// class _ns1__GetBoardingDetailsReq operations:
/// - _ns1__GetBoardingDetailsReq* soap_new__ns1__GetBoardingDetailsReq(soap*) allocate and default initialize
/// - _ns1__GetBoardingDetailsReq* soap_new__ns1__GetBoardingDetailsReq(soap*, int num) allocate array and default initialize values
/// - _ns1__GetBoardingDetailsReq* soap_new_req__ns1__GetBoardingDetailsReq(soap*, ...) allocate, set required members
/// - _ns1__GetBoardingDetailsReq* soap_new_set__ns1__GetBoardingDetailsReq(soap*, ...) allocate, set all public members
/// - _ns1__GetBoardingDetailsReq::soap_default(soap*) default initialize members
/// - int soap_read__ns1__GetBoardingDetailsReq(soap*, _ns1__GetBoardingDetailsReq*) deserialize from a stream
/// - int soap_write__ns1__GetBoardingDetailsReq(soap*, _ns1__GetBoardingDetailsReq*) serialize to a stream
/// - _ns1__GetBoardingDetailsReq* _ns1__GetBoardingDetailsReq::soap_dup(soap*) returns deep copy of _ns1__GetBoardingDetailsReq, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__GetBoardingDetailsReq::soap_del() deep deletes _ns1__GetBoardingDetailsReq data members, use only after _ns1__GetBoardingDetailsReq::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__GetBoardingDetailsReq
{ public:
/// Element reference "urn:ebay:api:PayPalAPI:""urn:ebay:api:PayPalAPI":GetBoardingDetailsRequest.
    ns1__GetBoardingDetailsRequestType*  GetBoardingDetailsRequest      1;	///< Required element.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "urn:ebay:api:PayPalAPI":SetAuthFlowParamReq
/// @brief "urn:ebay:api:PayPalAPI":SetAuthFlowParamReq is a complexType.
///
/// class _ns1__SetAuthFlowParamReq operations:
/// - _ns1__SetAuthFlowParamReq* soap_new__ns1__SetAuthFlowParamReq(soap*) allocate and default initialize
/// - _ns1__SetAuthFlowParamReq* soap_new__ns1__SetAuthFlowParamReq(soap*, int num) allocate array and default initialize values
/// - _ns1__SetAuthFlowParamReq* soap_new_req__ns1__SetAuthFlowParamReq(soap*, ...) allocate, set required members
/// - _ns1__SetAuthFlowParamReq* soap_new_set__ns1__SetAuthFlowParamReq(soap*, ...) allocate, set all public members
/// - _ns1__SetAuthFlowParamReq::soap_default(soap*) default initialize members
/// - int soap_read__ns1__SetAuthFlowParamReq(soap*, _ns1__SetAuthFlowParamReq*) deserialize from a stream
/// - int soap_write__ns1__SetAuthFlowParamReq(soap*, _ns1__SetAuthFlowParamReq*) serialize to a stream
/// - _ns1__SetAuthFlowParamReq* _ns1__SetAuthFlowParamReq::soap_dup(soap*) returns deep copy of _ns1__SetAuthFlowParamReq, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__SetAuthFlowParamReq::soap_del() deep deletes _ns1__SetAuthFlowParamReq data members, use only after _ns1__SetAuthFlowParamReq::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__SetAuthFlowParamReq
{ public:
/// Element reference "urn:ebay:api:PayPalAPI:""urn:ebay:api:PayPalAPI":SetAuthFlowParamRequest.
    ns1__SetAuthFlowParamRequestType*    SetAuthFlowParamRequest        1;	///< Required element.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "urn:ebay:api:PayPalAPI":GetAuthDetailsReq
/// @brief "urn:ebay:api:PayPalAPI":GetAuthDetailsReq is a complexType.
///
/// class _ns1__GetAuthDetailsReq operations:
/// - _ns1__GetAuthDetailsReq* soap_new__ns1__GetAuthDetailsReq(soap*) allocate and default initialize
/// - _ns1__GetAuthDetailsReq* soap_new__ns1__GetAuthDetailsReq(soap*, int num) allocate array and default initialize values
/// - _ns1__GetAuthDetailsReq* soap_new_req__ns1__GetAuthDetailsReq(soap*, ...) allocate, set required members
/// - _ns1__GetAuthDetailsReq* soap_new_set__ns1__GetAuthDetailsReq(soap*, ...) allocate, set all public members
/// - _ns1__GetAuthDetailsReq::soap_default(soap*) default initialize members
/// - int soap_read__ns1__GetAuthDetailsReq(soap*, _ns1__GetAuthDetailsReq*) deserialize from a stream
/// - int soap_write__ns1__GetAuthDetailsReq(soap*, _ns1__GetAuthDetailsReq*) serialize to a stream
/// - _ns1__GetAuthDetailsReq* _ns1__GetAuthDetailsReq::soap_dup(soap*) returns deep copy of _ns1__GetAuthDetailsReq, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__GetAuthDetailsReq::soap_del() deep deletes _ns1__GetAuthDetailsReq data members, use only after _ns1__GetAuthDetailsReq::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__GetAuthDetailsReq
{ public:
/// Element reference "urn:ebay:api:PayPalAPI:""urn:ebay:api:PayPalAPI":GetAuthDetailsRequest.
    ns1__GetAuthDetailsRequestType*      GetAuthDetailsRequest          1;	///< Required element.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "urn:ebay:api:PayPalAPI":SetAccessPermissionsReq
/// @brief "urn:ebay:api:PayPalAPI":SetAccessPermissionsReq is a complexType.
///
/// class _ns1__SetAccessPermissionsReq operations:
/// - _ns1__SetAccessPermissionsReq* soap_new__ns1__SetAccessPermissionsReq(soap*) allocate and default initialize
/// - _ns1__SetAccessPermissionsReq* soap_new__ns1__SetAccessPermissionsReq(soap*, int num) allocate array and default initialize values
/// - _ns1__SetAccessPermissionsReq* soap_new_req__ns1__SetAccessPermissionsReq(soap*, ...) allocate, set required members
/// - _ns1__SetAccessPermissionsReq* soap_new_set__ns1__SetAccessPermissionsReq(soap*, ...) allocate, set all public members
/// - _ns1__SetAccessPermissionsReq::soap_default(soap*) default initialize members
/// - int soap_read__ns1__SetAccessPermissionsReq(soap*, _ns1__SetAccessPermissionsReq*) deserialize from a stream
/// - int soap_write__ns1__SetAccessPermissionsReq(soap*, _ns1__SetAccessPermissionsReq*) serialize to a stream
/// - _ns1__SetAccessPermissionsReq* _ns1__SetAccessPermissionsReq::soap_dup(soap*) returns deep copy of _ns1__SetAccessPermissionsReq, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__SetAccessPermissionsReq::soap_del() deep deletes _ns1__SetAccessPermissionsReq data members, use only after _ns1__SetAccessPermissionsReq::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__SetAccessPermissionsReq
{ public:
/// Element reference "urn:ebay:api:PayPalAPI:""urn:ebay:api:PayPalAPI":SetAccessPermissionsRequest.
    ns1__SetAccessPermissionsRequestType*  SetAccessPermissionsRequest    1;	///< Required element.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "urn:ebay:api:PayPalAPI":UpdateAccessPermissionsReq
/// @brief "urn:ebay:api:PayPalAPI":UpdateAccessPermissionsReq is a complexType.
///
/// class _ns1__UpdateAccessPermissionsReq operations:
/// - _ns1__UpdateAccessPermissionsReq* soap_new__ns1__UpdateAccessPermissionsReq(soap*) allocate and default initialize
/// - _ns1__UpdateAccessPermissionsReq* soap_new__ns1__UpdateAccessPermissionsReq(soap*, int num) allocate array and default initialize values
/// - _ns1__UpdateAccessPermissionsReq* soap_new_req__ns1__UpdateAccessPermissionsReq(soap*, ...) allocate, set required members
/// - _ns1__UpdateAccessPermissionsReq* soap_new_set__ns1__UpdateAccessPermissionsReq(soap*, ...) allocate, set all public members
/// - _ns1__UpdateAccessPermissionsReq::soap_default(soap*) default initialize members
/// - int soap_read__ns1__UpdateAccessPermissionsReq(soap*, _ns1__UpdateAccessPermissionsReq*) deserialize from a stream
/// - int soap_write__ns1__UpdateAccessPermissionsReq(soap*, _ns1__UpdateAccessPermissionsReq*) serialize to a stream
/// - _ns1__UpdateAccessPermissionsReq* _ns1__UpdateAccessPermissionsReq::soap_dup(soap*) returns deep copy of _ns1__UpdateAccessPermissionsReq, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__UpdateAccessPermissionsReq::soap_del() deep deletes _ns1__UpdateAccessPermissionsReq data members, use only after _ns1__UpdateAccessPermissionsReq::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__UpdateAccessPermissionsReq
{ public:
/// Element reference "urn:ebay:api:PayPalAPI:""urn:ebay:api:PayPalAPI":UpdateAccessPermissionsRequest.
    ns1__UpdateAccessPermissionsRequestType*  UpdateAccessPermissionsRequest 1;	///< Required element.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "urn:ebay:api:PayPalAPI":GetAccessPermissionDetailsReq
/// @brief "urn:ebay:api:PayPalAPI":GetAccessPermissionDetailsReq is a complexType.
///
/// class _ns1__GetAccessPermissionDetailsReq operations:
/// - _ns1__GetAccessPermissionDetailsReq* soap_new__ns1__GetAccessPermissionDetailsReq(soap*) allocate and default initialize
/// - _ns1__GetAccessPermissionDetailsReq* soap_new__ns1__GetAccessPermissionDetailsReq(soap*, int num) allocate array and default initialize values
/// - _ns1__GetAccessPermissionDetailsReq* soap_new_req__ns1__GetAccessPermissionDetailsReq(soap*, ...) allocate, set required members
/// - _ns1__GetAccessPermissionDetailsReq* soap_new_set__ns1__GetAccessPermissionDetailsReq(soap*, ...) allocate, set all public members
/// - _ns1__GetAccessPermissionDetailsReq::soap_default(soap*) default initialize members
/// - int soap_read__ns1__GetAccessPermissionDetailsReq(soap*, _ns1__GetAccessPermissionDetailsReq*) deserialize from a stream
/// - int soap_write__ns1__GetAccessPermissionDetailsReq(soap*, _ns1__GetAccessPermissionDetailsReq*) serialize to a stream
/// - _ns1__GetAccessPermissionDetailsReq* _ns1__GetAccessPermissionDetailsReq::soap_dup(soap*) returns deep copy of _ns1__GetAccessPermissionDetailsReq, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__GetAccessPermissionDetailsReq::soap_del() deep deletes _ns1__GetAccessPermissionDetailsReq data members, use only after _ns1__GetAccessPermissionDetailsReq::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__GetAccessPermissionDetailsReq
{ public:
/// Element reference "urn:ebay:api:PayPalAPI:""urn:ebay:api:PayPalAPI":GetAccessPermissionDetailsRequest.
    ns1__GetAccessPermissionDetailsRequestType*  GetAccessPermissionDetailsRequest 1;	///< Required element.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "urn:ebay:api:PayPalAPI":GetIncentiveEvaluationReq
/// @brief "urn:ebay:api:PayPalAPI":GetIncentiveEvaluationReq is a complexType.
///
/// class _ns1__GetIncentiveEvaluationReq operations:
/// - _ns1__GetIncentiveEvaluationReq* soap_new__ns1__GetIncentiveEvaluationReq(soap*) allocate and default initialize
/// - _ns1__GetIncentiveEvaluationReq* soap_new__ns1__GetIncentiveEvaluationReq(soap*, int num) allocate array and default initialize values
/// - _ns1__GetIncentiveEvaluationReq* soap_new_req__ns1__GetIncentiveEvaluationReq(soap*, ...) allocate, set required members
/// - _ns1__GetIncentiveEvaluationReq* soap_new_set__ns1__GetIncentiveEvaluationReq(soap*, ...) allocate, set all public members
/// - _ns1__GetIncentiveEvaluationReq::soap_default(soap*) default initialize members
/// - int soap_read__ns1__GetIncentiveEvaluationReq(soap*, _ns1__GetIncentiveEvaluationReq*) deserialize from a stream
/// - int soap_write__ns1__GetIncentiveEvaluationReq(soap*, _ns1__GetIncentiveEvaluationReq*) serialize to a stream
/// - _ns1__GetIncentiveEvaluationReq* _ns1__GetIncentiveEvaluationReq::soap_dup(soap*) returns deep copy of _ns1__GetIncentiveEvaluationReq, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__GetIncentiveEvaluationReq::soap_del() deep deletes _ns1__GetIncentiveEvaluationReq data members, use only after _ns1__GetIncentiveEvaluationReq::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__GetIncentiveEvaluationReq
{ public:
/// Element reference "urn:ebay:api:PayPalAPI:""urn:ebay:api:PayPalAPI":GetIncentiveEvaluationRequest.
    ns1__GetIncentiveEvaluationRequestType*  GetIncentiveEvaluationRequest  1;	///< Required element.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "urn:ebay:api:PayPalAPI":SetExpressCheckoutReq
/// @brief "urn:ebay:api:PayPalAPI":SetExpressCheckoutReq is a complexType.
///
/// class _ns1__SetExpressCheckoutReq operations:
/// - _ns1__SetExpressCheckoutReq* soap_new__ns1__SetExpressCheckoutReq(soap*) allocate and default initialize
/// - _ns1__SetExpressCheckoutReq* soap_new__ns1__SetExpressCheckoutReq(soap*, int num) allocate array and default initialize values
/// - _ns1__SetExpressCheckoutReq* soap_new_req__ns1__SetExpressCheckoutReq(soap*, ...) allocate, set required members
/// - _ns1__SetExpressCheckoutReq* soap_new_set__ns1__SetExpressCheckoutReq(soap*, ...) allocate, set all public members
/// - _ns1__SetExpressCheckoutReq::soap_default(soap*) default initialize members
/// - int soap_read__ns1__SetExpressCheckoutReq(soap*, _ns1__SetExpressCheckoutReq*) deserialize from a stream
/// - int soap_write__ns1__SetExpressCheckoutReq(soap*, _ns1__SetExpressCheckoutReq*) serialize to a stream
/// - _ns1__SetExpressCheckoutReq* _ns1__SetExpressCheckoutReq::soap_dup(soap*) returns deep copy of _ns1__SetExpressCheckoutReq, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__SetExpressCheckoutReq::soap_del() deep deletes _ns1__SetExpressCheckoutReq data members, use only after _ns1__SetExpressCheckoutReq::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__SetExpressCheckoutReq
{ public:
/// Element reference "urn:ebay:api:PayPalAPI:""urn:ebay:api:PayPalAPI":SetExpressCheckoutRequest.
    ns1__SetExpressCheckoutRequestType*  SetExpressCheckoutRequest      1;	///< Required element.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "urn:ebay:api:PayPalAPI":ExecuteCheckoutOperationsReq
/// @brief "urn:ebay:api:PayPalAPI":ExecuteCheckoutOperationsReq is a complexType.
///
/// class _ns1__ExecuteCheckoutOperationsReq operations:
/// - _ns1__ExecuteCheckoutOperationsReq* soap_new__ns1__ExecuteCheckoutOperationsReq(soap*) allocate and default initialize
/// - _ns1__ExecuteCheckoutOperationsReq* soap_new__ns1__ExecuteCheckoutOperationsReq(soap*, int num) allocate array and default initialize values
/// - _ns1__ExecuteCheckoutOperationsReq* soap_new_req__ns1__ExecuteCheckoutOperationsReq(soap*, ...) allocate, set required members
/// - _ns1__ExecuteCheckoutOperationsReq* soap_new_set__ns1__ExecuteCheckoutOperationsReq(soap*, ...) allocate, set all public members
/// - _ns1__ExecuteCheckoutOperationsReq::soap_default(soap*) default initialize members
/// - int soap_read__ns1__ExecuteCheckoutOperationsReq(soap*, _ns1__ExecuteCheckoutOperationsReq*) deserialize from a stream
/// - int soap_write__ns1__ExecuteCheckoutOperationsReq(soap*, _ns1__ExecuteCheckoutOperationsReq*) serialize to a stream
/// - _ns1__ExecuteCheckoutOperationsReq* _ns1__ExecuteCheckoutOperationsReq::soap_dup(soap*) returns deep copy of _ns1__ExecuteCheckoutOperationsReq, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__ExecuteCheckoutOperationsReq::soap_del() deep deletes _ns1__ExecuteCheckoutOperationsReq data members, use only after _ns1__ExecuteCheckoutOperationsReq::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__ExecuteCheckoutOperationsReq
{ public:
/// Element reference "urn:ebay:api:PayPalAPI:""urn:ebay:api:PayPalAPI":ExecuteCheckoutOperationsRequest.
    ns1__ExecuteCheckoutOperationsRequestType*  ExecuteCheckoutOperationsRequest 1;	///< Required element.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "urn:ebay:api:PayPalAPI":GetExpressCheckoutDetailsReq
/// @brief "urn:ebay:api:PayPalAPI":GetExpressCheckoutDetailsReq is a complexType.
///
/// class _ns1__GetExpressCheckoutDetailsReq operations:
/// - _ns1__GetExpressCheckoutDetailsReq* soap_new__ns1__GetExpressCheckoutDetailsReq(soap*) allocate and default initialize
/// - _ns1__GetExpressCheckoutDetailsReq* soap_new__ns1__GetExpressCheckoutDetailsReq(soap*, int num) allocate array and default initialize values
/// - _ns1__GetExpressCheckoutDetailsReq* soap_new_req__ns1__GetExpressCheckoutDetailsReq(soap*, ...) allocate, set required members
/// - _ns1__GetExpressCheckoutDetailsReq* soap_new_set__ns1__GetExpressCheckoutDetailsReq(soap*, ...) allocate, set all public members
/// - _ns1__GetExpressCheckoutDetailsReq::soap_default(soap*) default initialize members
/// - int soap_read__ns1__GetExpressCheckoutDetailsReq(soap*, _ns1__GetExpressCheckoutDetailsReq*) deserialize from a stream
/// - int soap_write__ns1__GetExpressCheckoutDetailsReq(soap*, _ns1__GetExpressCheckoutDetailsReq*) serialize to a stream
/// - _ns1__GetExpressCheckoutDetailsReq* _ns1__GetExpressCheckoutDetailsReq::soap_dup(soap*) returns deep copy of _ns1__GetExpressCheckoutDetailsReq, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__GetExpressCheckoutDetailsReq::soap_del() deep deletes _ns1__GetExpressCheckoutDetailsReq data members, use only after _ns1__GetExpressCheckoutDetailsReq::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__GetExpressCheckoutDetailsReq
{ public:
/// Element reference "urn:ebay:api:PayPalAPI:""urn:ebay:api:PayPalAPI":GetExpressCheckoutDetailsRequest.
    ns1__GetExpressCheckoutDetailsRequestType*  GetExpressCheckoutDetailsRequest 1;	///< Required element.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "urn:ebay:api:PayPalAPI":DoExpressCheckoutPaymentReq
/// @brief "urn:ebay:api:PayPalAPI":DoExpressCheckoutPaymentReq is a complexType.
///
/// class _ns1__DoExpressCheckoutPaymentReq operations:
/// - _ns1__DoExpressCheckoutPaymentReq* soap_new__ns1__DoExpressCheckoutPaymentReq(soap*) allocate and default initialize
/// - _ns1__DoExpressCheckoutPaymentReq* soap_new__ns1__DoExpressCheckoutPaymentReq(soap*, int num) allocate array and default initialize values
/// - _ns1__DoExpressCheckoutPaymentReq* soap_new_req__ns1__DoExpressCheckoutPaymentReq(soap*, ...) allocate, set required members
/// - _ns1__DoExpressCheckoutPaymentReq* soap_new_set__ns1__DoExpressCheckoutPaymentReq(soap*, ...) allocate, set all public members
/// - _ns1__DoExpressCheckoutPaymentReq::soap_default(soap*) default initialize members
/// - int soap_read__ns1__DoExpressCheckoutPaymentReq(soap*, _ns1__DoExpressCheckoutPaymentReq*) deserialize from a stream
/// - int soap_write__ns1__DoExpressCheckoutPaymentReq(soap*, _ns1__DoExpressCheckoutPaymentReq*) serialize to a stream
/// - _ns1__DoExpressCheckoutPaymentReq* _ns1__DoExpressCheckoutPaymentReq::soap_dup(soap*) returns deep copy of _ns1__DoExpressCheckoutPaymentReq, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__DoExpressCheckoutPaymentReq::soap_del() deep deletes _ns1__DoExpressCheckoutPaymentReq data members, use only after _ns1__DoExpressCheckoutPaymentReq::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__DoExpressCheckoutPaymentReq
{ public:
/// Element reference "urn:ebay:api:PayPalAPI:""urn:ebay:api:PayPalAPI":DoExpressCheckoutPaymentRequest.
    ns1__DoExpressCheckoutPaymentRequestType*  DoExpressCheckoutPaymentRequest 1;	///< Required element.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "urn:ebay:api:PayPalAPI":DoUATPExpressCheckoutPaymentReq
/// @brief "urn:ebay:api:PayPalAPI":DoUATPExpressCheckoutPaymentReq is a complexType.
///
/// class _ns1__DoUATPExpressCheckoutPaymentReq operations:
/// - _ns1__DoUATPExpressCheckoutPaymentReq* soap_new__ns1__DoUATPExpressCheckoutPaymentReq(soap*) allocate and default initialize
/// - _ns1__DoUATPExpressCheckoutPaymentReq* soap_new__ns1__DoUATPExpressCheckoutPaymentReq(soap*, int num) allocate array and default initialize values
/// - _ns1__DoUATPExpressCheckoutPaymentReq* soap_new_req__ns1__DoUATPExpressCheckoutPaymentReq(soap*, ...) allocate, set required members
/// - _ns1__DoUATPExpressCheckoutPaymentReq* soap_new_set__ns1__DoUATPExpressCheckoutPaymentReq(soap*, ...) allocate, set all public members
/// - _ns1__DoUATPExpressCheckoutPaymentReq::soap_default(soap*) default initialize members
/// - int soap_read__ns1__DoUATPExpressCheckoutPaymentReq(soap*, _ns1__DoUATPExpressCheckoutPaymentReq*) deserialize from a stream
/// - int soap_write__ns1__DoUATPExpressCheckoutPaymentReq(soap*, _ns1__DoUATPExpressCheckoutPaymentReq*) serialize to a stream
/// - _ns1__DoUATPExpressCheckoutPaymentReq* _ns1__DoUATPExpressCheckoutPaymentReq::soap_dup(soap*) returns deep copy of _ns1__DoUATPExpressCheckoutPaymentReq, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__DoUATPExpressCheckoutPaymentReq::soap_del() deep deletes _ns1__DoUATPExpressCheckoutPaymentReq data members, use only after _ns1__DoUATPExpressCheckoutPaymentReq::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__DoUATPExpressCheckoutPaymentReq
{ public:
/// Element reference "urn:ebay:api:PayPalAPI:""urn:ebay:api:PayPalAPI":DoUATPExpressCheckoutPaymentRequest.
    ns1__DoUATPExpressCheckoutPaymentRequestType*  DoUATPExpressCheckoutPaymentRequest 1;	///< Required element.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "urn:ebay:api:PayPalAPI":ManagePendingTransactionStatusReq
/// @brief "urn:ebay:api:PayPalAPI":ManagePendingTransactionStatusReq is a complexType.
///
/// class _ns1__ManagePendingTransactionStatusReq operations:
/// - _ns1__ManagePendingTransactionStatusReq* soap_new__ns1__ManagePendingTransactionStatusReq(soap*) allocate and default initialize
/// - _ns1__ManagePendingTransactionStatusReq* soap_new__ns1__ManagePendingTransactionStatusReq(soap*, int num) allocate array and default initialize values
/// - _ns1__ManagePendingTransactionStatusReq* soap_new_req__ns1__ManagePendingTransactionStatusReq(soap*, ...) allocate, set required members
/// - _ns1__ManagePendingTransactionStatusReq* soap_new_set__ns1__ManagePendingTransactionStatusReq(soap*, ...) allocate, set all public members
/// - _ns1__ManagePendingTransactionStatusReq::soap_default(soap*) default initialize members
/// - int soap_read__ns1__ManagePendingTransactionStatusReq(soap*, _ns1__ManagePendingTransactionStatusReq*) deserialize from a stream
/// - int soap_write__ns1__ManagePendingTransactionStatusReq(soap*, _ns1__ManagePendingTransactionStatusReq*) serialize to a stream
/// - _ns1__ManagePendingTransactionStatusReq* _ns1__ManagePendingTransactionStatusReq::soap_dup(soap*) returns deep copy of _ns1__ManagePendingTransactionStatusReq, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__ManagePendingTransactionStatusReq::soap_del() deep deletes _ns1__ManagePendingTransactionStatusReq data members, use only after _ns1__ManagePendingTransactionStatusReq::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__ManagePendingTransactionStatusReq
{ public:
/// Element reference "urn:ebay:api:PayPalAPI:""urn:ebay:api:PayPalAPI":ManagePendingTransactionStatusRequest.
    ns1__ManagePendingTransactionStatusRequestType*  ManagePendingTransactionStatusRequest 1;	///< Required element.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "urn:ebay:api:PayPalAPI":DoDirectPaymentReq
/// @brief "urn:ebay:api:PayPalAPI":DoDirectPaymentReq is a complexType.
///
/// class _ns1__DoDirectPaymentReq operations:
/// - _ns1__DoDirectPaymentReq* soap_new__ns1__DoDirectPaymentReq(soap*) allocate and default initialize
/// - _ns1__DoDirectPaymentReq* soap_new__ns1__DoDirectPaymentReq(soap*, int num) allocate array and default initialize values
/// - _ns1__DoDirectPaymentReq* soap_new_req__ns1__DoDirectPaymentReq(soap*, ...) allocate, set required members
/// - _ns1__DoDirectPaymentReq* soap_new_set__ns1__DoDirectPaymentReq(soap*, ...) allocate, set all public members
/// - _ns1__DoDirectPaymentReq::soap_default(soap*) default initialize members
/// - int soap_read__ns1__DoDirectPaymentReq(soap*, _ns1__DoDirectPaymentReq*) deserialize from a stream
/// - int soap_write__ns1__DoDirectPaymentReq(soap*, _ns1__DoDirectPaymentReq*) serialize to a stream
/// - _ns1__DoDirectPaymentReq* _ns1__DoDirectPaymentReq::soap_dup(soap*) returns deep copy of _ns1__DoDirectPaymentReq, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__DoDirectPaymentReq::soap_del() deep deletes _ns1__DoDirectPaymentReq data members, use only after _ns1__DoDirectPaymentReq::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__DoDirectPaymentReq
{ public:
/// Element reference "urn:ebay:api:PayPalAPI:""urn:ebay:api:PayPalAPI":DoDirectPaymentRequest.
    ns1__DoDirectPaymentRequestType*     DoDirectPaymentRequest         1;	///< Required element.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "urn:ebay:api:PayPalAPI":DoCancelReq
/// @brief "urn:ebay:api:PayPalAPI":DoCancelReq is a complexType.
///
/// class _ns1__DoCancelReq operations:
/// - _ns1__DoCancelReq* soap_new__ns1__DoCancelReq(soap*) allocate and default initialize
/// - _ns1__DoCancelReq* soap_new__ns1__DoCancelReq(soap*, int num) allocate array and default initialize values
/// - _ns1__DoCancelReq* soap_new_req__ns1__DoCancelReq(soap*, ...) allocate, set required members
/// - _ns1__DoCancelReq* soap_new_set__ns1__DoCancelReq(soap*, ...) allocate, set all public members
/// - _ns1__DoCancelReq::soap_default(soap*) default initialize members
/// - int soap_read__ns1__DoCancelReq(soap*, _ns1__DoCancelReq*) deserialize from a stream
/// - int soap_write__ns1__DoCancelReq(soap*, _ns1__DoCancelReq*) serialize to a stream
/// - _ns1__DoCancelReq* _ns1__DoCancelReq::soap_dup(soap*) returns deep copy of _ns1__DoCancelReq, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__DoCancelReq::soap_del() deep deletes _ns1__DoCancelReq data members, use only after _ns1__DoCancelReq::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__DoCancelReq
{ public:
/// Element reference "urn:ebay:api:PayPalAPI:""urn:ebay:api:PayPalAPI":DoCancelRequest.
    ns1__DoCancelRequestType*            DoCancelRequest                1;	///< Required element.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "urn:ebay:api:PayPalAPI":DoCaptureReq
/// @brief "urn:ebay:api:PayPalAPI":DoCaptureReq is a complexType.
///
/// class _ns1__DoCaptureReq operations:
/// - _ns1__DoCaptureReq* soap_new__ns1__DoCaptureReq(soap*) allocate and default initialize
/// - _ns1__DoCaptureReq* soap_new__ns1__DoCaptureReq(soap*, int num) allocate array and default initialize values
/// - _ns1__DoCaptureReq* soap_new_req__ns1__DoCaptureReq(soap*, ...) allocate, set required members
/// - _ns1__DoCaptureReq* soap_new_set__ns1__DoCaptureReq(soap*, ...) allocate, set all public members
/// - _ns1__DoCaptureReq::soap_default(soap*) default initialize members
/// - int soap_read__ns1__DoCaptureReq(soap*, _ns1__DoCaptureReq*) deserialize from a stream
/// - int soap_write__ns1__DoCaptureReq(soap*, _ns1__DoCaptureReq*) serialize to a stream
/// - _ns1__DoCaptureReq* _ns1__DoCaptureReq::soap_dup(soap*) returns deep copy of _ns1__DoCaptureReq, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__DoCaptureReq::soap_del() deep deletes _ns1__DoCaptureReq data members, use only after _ns1__DoCaptureReq::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__DoCaptureReq
{ public:
/// Element reference "urn:ebay:api:PayPalAPI:""urn:ebay:api:PayPalAPI":DoCaptureRequest.
    ns1__DoCaptureRequestType*           DoCaptureRequest               1;	///< Required element.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "urn:ebay:api:PayPalAPI":DoReauthorizationReq
/// @brief "urn:ebay:api:PayPalAPI":DoReauthorizationReq is a complexType.
///
/// class _ns1__DoReauthorizationReq operations:
/// - _ns1__DoReauthorizationReq* soap_new__ns1__DoReauthorizationReq(soap*) allocate and default initialize
/// - _ns1__DoReauthorizationReq* soap_new__ns1__DoReauthorizationReq(soap*, int num) allocate array and default initialize values
/// - _ns1__DoReauthorizationReq* soap_new_req__ns1__DoReauthorizationReq(soap*, ...) allocate, set required members
/// - _ns1__DoReauthorizationReq* soap_new_set__ns1__DoReauthorizationReq(soap*, ...) allocate, set all public members
/// - _ns1__DoReauthorizationReq::soap_default(soap*) default initialize members
/// - int soap_read__ns1__DoReauthorizationReq(soap*, _ns1__DoReauthorizationReq*) deserialize from a stream
/// - int soap_write__ns1__DoReauthorizationReq(soap*, _ns1__DoReauthorizationReq*) serialize to a stream
/// - _ns1__DoReauthorizationReq* _ns1__DoReauthorizationReq::soap_dup(soap*) returns deep copy of _ns1__DoReauthorizationReq, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__DoReauthorizationReq::soap_del() deep deletes _ns1__DoReauthorizationReq data members, use only after _ns1__DoReauthorizationReq::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__DoReauthorizationReq
{ public:
/// Element reference "urn:ebay:api:PayPalAPI:""urn:ebay:api:PayPalAPI":DoReauthorizationRequest.
    ns1__DoReauthorizationRequestType*   DoReauthorizationRequest       1;	///< Required element.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "urn:ebay:api:PayPalAPI":DoVoidReq
/// @brief "urn:ebay:api:PayPalAPI":DoVoidReq is a complexType.
///
/// class _ns1__DoVoidReq operations:
/// - _ns1__DoVoidReq* soap_new__ns1__DoVoidReq(soap*) allocate and default initialize
/// - _ns1__DoVoidReq* soap_new__ns1__DoVoidReq(soap*, int num) allocate array and default initialize values
/// - _ns1__DoVoidReq* soap_new_req__ns1__DoVoidReq(soap*, ...) allocate, set required members
/// - _ns1__DoVoidReq* soap_new_set__ns1__DoVoidReq(soap*, ...) allocate, set all public members
/// - _ns1__DoVoidReq::soap_default(soap*) default initialize members
/// - int soap_read__ns1__DoVoidReq(soap*, _ns1__DoVoidReq*) deserialize from a stream
/// - int soap_write__ns1__DoVoidReq(soap*, _ns1__DoVoidReq*) serialize to a stream
/// - _ns1__DoVoidReq* _ns1__DoVoidReq::soap_dup(soap*) returns deep copy of _ns1__DoVoidReq, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__DoVoidReq::soap_del() deep deletes _ns1__DoVoidReq data members, use only after _ns1__DoVoidReq::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__DoVoidReq
{ public:
/// Element reference "urn:ebay:api:PayPalAPI:""urn:ebay:api:PayPalAPI":DoVoidRequest.
    ns1__DoVoidRequestType*              DoVoidRequest                  1;	///< Required element.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "urn:ebay:api:PayPalAPI":DoAuthorizationReq
/// @brief "urn:ebay:api:PayPalAPI":DoAuthorizationReq is a complexType.
///
/// class _ns1__DoAuthorizationReq operations:
/// - _ns1__DoAuthorizationReq* soap_new__ns1__DoAuthorizationReq(soap*) allocate and default initialize
/// - _ns1__DoAuthorizationReq* soap_new__ns1__DoAuthorizationReq(soap*, int num) allocate array and default initialize values
/// - _ns1__DoAuthorizationReq* soap_new_req__ns1__DoAuthorizationReq(soap*, ...) allocate, set required members
/// - _ns1__DoAuthorizationReq* soap_new_set__ns1__DoAuthorizationReq(soap*, ...) allocate, set all public members
/// - _ns1__DoAuthorizationReq::soap_default(soap*) default initialize members
/// - int soap_read__ns1__DoAuthorizationReq(soap*, _ns1__DoAuthorizationReq*) deserialize from a stream
/// - int soap_write__ns1__DoAuthorizationReq(soap*, _ns1__DoAuthorizationReq*) serialize to a stream
/// - _ns1__DoAuthorizationReq* _ns1__DoAuthorizationReq::soap_dup(soap*) returns deep copy of _ns1__DoAuthorizationReq, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__DoAuthorizationReq::soap_del() deep deletes _ns1__DoAuthorizationReq data members, use only after _ns1__DoAuthorizationReq::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__DoAuthorizationReq
{ public:
/// Element reference "urn:ebay:api:PayPalAPI:""urn:ebay:api:PayPalAPI":DoAuthorizationRequest.
    ns1__DoAuthorizationRequestType*     DoAuthorizationRequest         1;	///< Required element.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "urn:ebay:api:PayPalAPI":UpdateAuthorizationReq
/// @brief "urn:ebay:api:PayPalAPI":UpdateAuthorizationReq is a complexType.
///
/// class _ns1__UpdateAuthorizationReq operations:
/// - _ns1__UpdateAuthorizationReq* soap_new__ns1__UpdateAuthorizationReq(soap*) allocate and default initialize
/// - _ns1__UpdateAuthorizationReq* soap_new__ns1__UpdateAuthorizationReq(soap*, int num) allocate array and default initialize values
/// - _ns1__UpdateAuthorizationReq* soap_new_req__ns1__UpdateAuthorizationReq(soap*, ...) allocate, set required members
/// - _ns1__UpdateAuthorizationReq* soap_new_set__ns1__UpdateAuthorizationReq(soap*, ...) allocate, set all public members
/// - _ns1__UpdateAuthorizationReq::soap_default(soap*) default initialize members
/// - int soap_read__ns1__UpdateAuthorizationReq(soap*, _ns1__UpdateAuthorizationReq*) deserialize from a stream
/// - int soap_write__ns1__UpdateAuthorizationReq(soap*, _ns1__UpdateAuthorizationReq*) serialize to a stream
/// - _ns1__UpdateAuthorizationReq* _ns1__UpdateAuthorizationReq::soap_dup(soap*) returns deep copy of _ns1__UpdateAuthorizationReq, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__UpdateAuthorizationReq::soap_del() deep deletes _ns1__UpdateAuthorizationReq data members, use only after _ns1__UpdateAuthorizationReq::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__UpdateAuthorizationReq
{ public:
/// Element reference "urn:ebay:api:PayPalAPI:""urn:ebay:api:PayPalAPI":UpdateAuthorizationRequest.
    ns1__UpdateAuthorizationRequestType*  UpdateAuthorizationRequest     1;	///< Required element.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "urn:ebay:api:PayPalAPI":DoUATPAuthorizationReq
/// @brief "urn:ebay:api:PayPalAPI":DoUATPAuthorizationReq is a complexType.
///
/// class _ns1__DoUATPAuthorizationReq operations:
/// - _ns1__DoUATPAuthorizationReq* soap_new__ns1__DoUATPAuthorizationReq(soap*) allocate and default initialize
/// - _ns1__DoUATPAuthorizationReq* soap_new__ns1__DoUATPAuthorizationReq(soap*, int num) allocate array and default initialize values
/// - _ns1__DoUATPAuthorizationReq* soap_new_req__ns1__DoUATPAuthorizationReq(soap*, ...) allocate, set required members
/// - _ns1__DoUATPAuthorizationReq* soap_new_set__ns1__DoUATPAuthorizationReq(soap*, ...) allocate, set all public members
/// - _ns1__DoUATPAuthorizationReq::soap_default(soap*) default initialize members
/// - int soap_read__ns1__DoUATPAuthorizationReq(soap*, _ns1__DoUATPAuthorizationReq*) deserialize from a stream
/// - int soap_write__ns1__DoUATPAuthorizationReq(soap*, _ns1__DoUATPAuthorizationReq*) serialize to a stream
/// - _ns1__DoUATPAuthorizationReq* _ns1__DoUATPAuthorizationReq::soap_dup(soap*) returns deep copy of _ns1__DoUATPAuthorizationReq, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__DoUATPAuthorizationReq::soap_del() deep deletes _ns1__DoUATPAuthorizationReq data members, use only after _ns1__DoUATPAuthorizationReq::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__DoUATPAuthorizationReq
{ public:
/// Element reference "urn:ebay:api:PayPalAPI:""urn:ebay:api:PayPalAPI":DoUATPAuthorizationRequest.
    ns1__DoUATPAuthorizationRequestType*  DoUATPAuthorizationRequest     1;	///< Required element.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "urn:ebay:api:PayPalAPI":CreateMobilePaymentReq
/// @brief "urn:ebay:api:PayPalAPI":CreateMobilePaymentReq is a complexType.
///
/// class _ns1__CreateMobilePaymentReq operations:
/// - _ns1__CreateMobilePaymentReq* soap_new__ns1__CreateMobilePaymentReq(soap*) allocate and default initialize
/// - _ns1__CreateMobilePaymentReq* soap_new__ns1__CreateMobilePaymentReq(soap*, int num) allocate array and default initialize values
/// - _ns1__CreateMobilePaymentReq* soap_new_req__ns1__CreateMobilePaymentReq(soap*, ...) allocate, set required members
/// - _ns1__CreateMobilePaymentReq* soap_new_set__ns1__CreateMobilePaymentReq(soap*, ...) allocate, set all public members
/// - _ns1__CreateMobilePaymentReq::soap_default(soap*) default initialize members
/// - int soap_read__ns1__CreateMobilePaymentReq(soap*, _ns1__CreateMobilePaymentReq*) deserialize from a stream
/// - int soap_write__ns1__CreateMobilePaymentReq(soap*, _ns1__CreateMobilePaymentReq*) serialize to a stream
/// - _ns1__CreateMobilePaymentReq* _ns1__CreateMobilePaymentReq::soap_dup(soap*) returns deep copy of _ns1__CreateMobilePaymentReq, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__CreateMobilePaymentReq::soap_del() deep deletes _ns1__CreateMobilePaymentReq data members, use only after _ns1__CreateMobilePaymentReq::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__CreateMobilePaymentReq
{ public:
/// Element reference "urn:ebay:api:PayPalAPI:""urn:ebay:api:PayPalAPI":CreateMobilePaymentRequest.
    ns1__CreateMobilePaymentRequestType*  CreateMobilePaymentRequest     1;	///< Required element.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "urn:ebay:api:PayPalAPI":GetMobileStatusReq
/// @brief "urn:ebay:api:PayPalAPI":GetMobileStatusReq is a complexType.
///
/// class _ns1__GetMobileStatusReq operations:
/// - _ns1__GetMobileStatusReq* soap_new__ns1__GetMobileStatusReq(soap*) allocate and default initialize
/// - _ns1__GetMobileStatusReq* soap_new__ns1__GetMobileStatusReq(soap*, int num) allocate array and default initialize values
/// - _ns1__GetMobileStatusReq* soap_new_req__ns1__GetMobileStatusReq(soap*, ...) allocate, set required members
/// - _ns1__GetMobileStatusReq* soap_new_set__ns1__GetMobileStatusReq(soap*, ...) allocate, set all public members
/// - _ns1__GetMobileStatusReq::soap_default(soap*) default initialize members
/// - int soap_read__ns1__GetMobileStatusReq(soap*, _ns1__GetMobileStatusReq*) deserialize from a stream
/// - int soap_write__ns1__GetMobileStatusReq(soap*, _ns1__GetMobileStatusReq*) serialize to a stream
/// - _ns1__GetMobileStatusReq* _ns1__GetMobileStatusReq::soap_dup(soap*) returns deep copy of _ns1__GetMobileStatusReq, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__GetMobileStatusReq::soap_del() deep deletes _ns1__GetMobileStatusReq data members, use only after _ns1__GetMobileStatusReq::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__GetMobileStatusReq
{ public:
/// Element reference "urn:ebay:api:PayPalAPI:""urn:ebay:api:PayPalAPI":GetMobileStatusRequest.
    ns1__GetMobileStatusRequestType*     GetMobileStatusRequest         1;	///< Required element.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "urn:ebay:api:PayPalAPI":SetMobileCheckoutReq
/// @brief "urn:ebay:api:PayPalAPI":SetMobileCheckoutReq is a complexType.
///
/// class _ns1__SetMobileCheckoutReq operations:
/// - _ns1__SetMobileCheckoutReq* soap_new__ns1__SetMobileCheckoutReq(soap*) allocate and default initialize
/// - _ns1__SetMobileCheckoutReq* soap_new__ns1__SetMobileCheckoutReq(soap*, int num) allocate array and default initialize values
/// - _ns1__SetMobileCheckoutReq* soap_new_req__ns1__SetMobileCheckoutReq(soap*, ...) allocate, set required members
/// - _ns1__SetMobileCheckoutReq* soap_new_set__ns1__SetMobileCheckoutReq(soap*, ...) allocate, set all public members
/// - _ns1__SetMobileCheckoutReq::soap_default(soap*) default initialize members
/// - int soap_read__ns1__SetMobileCheckoutReq(soap*, _ns1__SetMobileCheckoutReq*) deserialize from a stream
/// - int soap_write__ns1__SetMobileCheckoutReq(soap*, _ns1__SetMobileCheckoutReq*) serialize to a stream
/// - _ns1__SetMobileCheckoutReq* _ns1__SetMobileCheckoutReq::soap_dup(soap*) returns deep copy of _ns1__SetMobileCheckoutReq, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__SetMobileCheckoutReq::soap_del() deep deletes _ns1__SetMobileCheckoutReq data members, use only after _ns1__SetMobileCheckoutReq::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__SetMobileCheckoutReq
{ public:
/// Element reference "urn:ebay:api:PayPalAPI:""urn:ebay:api:PayPalAPI":SetMobileCheckoutRequest.
    ns1__SetMobileCheckoutRequestType*   SetMobileCheckoutRequest       1;	///< Required element.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "urn:ebay:api:PayPalAPI":DoMobileCheckoutPaymentReq
/// @brief "urn:ebay:api:PayPalAPI":DoMobileCheckoutPaymentReq is a complexType.
///
/// class _ns1__DoMobileCheckoutPaymentReq operations:
/// - _ns1__DoMobileCheckoutPaymentReq* soap_new__ns1__DoMobileCheckoutPaymentReq(soap*) allocate and default initialize
/// - _ns1__DoMobileCheckoutPaymentReq* soap_new__ns1__DoMobileCheckoutPaymentReq(soap*, int num) allocate array and default initialize values
/// - _ns1__DoMobileCheckoutPaymentReq* soap_new_req__ns1__DoMobileCheckoutPaymentReq(soap*, ...) allocate, set required members
/// - _ns1__DoMobileCheckoutPaymentReq* soap_new_set__ns1__DoMobileCheckoutPaymentReq(soap*, ...) allocate, set all public members
/// - _ns1__DoMobileCheckoutPaymentReq::soap_default(soap*) default initialize members
/// - int soap_read__ns1__DoMobileCheckoutPaymentReq(soap*, _ns1__DoMobileCheckoutPaymentReq*) deserialize from a stream
/// - int soap_write__ns1__DoMobileCheckoutPaymentReq(soap*, _ns1__DoMobileCheckoutPaymentReq*) serialize to a stream
/// - _ns1__DoMobileCheckoutPaymentReq* _ns1__DoMobileCheckoutPaymentReq::soap_dup(soap*) returns deep copy of _ns1__DoMobileCheckoutPaymentReq, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__DoMobileCheckoutPaymentReq::soap_del() deep deletes _ns1__DoMobileCheckoutPaymentReq data members, use only after _ns1__DoMobileCheckoutPaymentReq::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__DoMobileCheckoutPaymentReq
{ public:
/// Element reference "urn:ebay:api:PayPalAPI:""urn:ebay:api:PayPalAPI":DoMobileCheckoutPaymentRequest.
    ns1__DoMobileCheckoutPaymentRequestType*  DoMobileCheckoutPaymentRequest 1;	///< Required element.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "urn:ebay:api:PayPalAPI":GetBalanceReq
/// @brief "urn:ebay:api:PayPalAPI":GetBalanceReq is a complexType.
///
/// class _ns1__GetBalanceReq operations:
/// - _ns1__GetBalanceReq* soap_new__ns1__GetBalanceReq(soap*) allocate and default initialize
/// - _ns1__GetBalanceReq* soap_new__ns1__GetBalanceReq(soap*, int num) allocate array and default initialize values
/// - _ns1__GetBalanceReq* soap_new_req__ns1__GetBalanceReq(soap*, ...) allocate, set required members
/// - _ns1__GetBalanceReq* soap_new_set__ns1__GetBalanceReq(soap*, ...) allocate, set all public members
/// - _ns1__GetBalanceReq::soap_default(soap*) default initialize members
/// - int soap_read__ns1__GetBalanceReq(soap*, _ns1__GetBalanceReq*) deserialize from a stream
/// - int soap_write__ns1__GetBalanceReq(soap*, _ns1__GetBalanceReq*) serialize to a stream
/// - _ns1__GetBalanceReq* _ns1__GetBalanceReq::soap_dup(soap*) returns deep copy of _ns1__GetBalanceReq, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__GetBalanceReq::soap_del() deep deletes _ns1__GetBalanceReq data members, use only after _ns1__GetBalanceReq::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__GetBalanceReq
{ public:
/// Element reference "urn:ebay:api:PayPalAPI:""urn:ebay:api:PayPalAPI":GetBalanceRequest.
    ns1__GetBalanceRequestType*          GetBalanceRequest              1;	///< Required element.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "urn:ebay:api:PayPalAPI":SetCustomerBillingAgreementReq
/// @brief "urn:ebay:api:PayPalAPI":SetCustomerBillingAgreementReq is a complexType.
///
/// class _ns1__SetCustomerBillingAgreementReq operations:
/// - _ns1__SetCustomerBillingAgreementReq* soap_new__ns1__SetCustomerBillingAgreementReq(soap*) allocate and default initialize
/// - _ns1__SetCustomerBillingAgreementReq* soap_new__ns1__SetCustomerBillingAgreementReq(soap*, int num) allocate array and default initialize values
/// - _ns1__SetCustomerBillingAgreementReq* soap_new_req__ns1__SetCustomerBillingAgreementReq(soap*, ...) allocate, set required members
/// - _ns1__SetCustomerBillingAgreementReq* soap_new_set__ns1__SetCustomerBillingAgreementReq(soap*, ...) allocate, set all public members
/// - _ns1__SetCustomerBillingAgreementReq::soap_default(soap*) default initialize members
/// - int soap_read__ns1__SetCustomerBillingAgreementReq(soap*, _ns1__SetCustomerBillingAgreementReq*) deserialize from a stream
/// - int soap_write__ns1__SetCustomerBillingAgreementReq(soap*, _ns1__SetCustomerBillingAgreementReq*) serialize to a stream
/// - _ns1__SetCustomerBillingAgreementReq* _ns1__SetCustomerBillingAgreementReq::soap_dup(soap*) returns deep copy of _ns1__SetCustomerBillingAgreementReq, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__SetCustomerBillingAgreementReq::soap_del() deep deletes _ns1__SetCustomerBillingAgreementReq data members, use only after _ns1__SetCustomerBillingAgreementReq::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__SetCustomerBillingAgreementReq
{ public:
/// Element reference "urn:ebay:api:PayPalAPI:""urn:ebay:api:PayPalAPI":SetCustomerBillingAgreementRequest.
    ns1__SetCustomerBillingAgreementRequestType*  SetCustomerBillingAgreementRequest 1;	///< Required element.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "urn:ebay:api:PayPalAPI":GetBillingAgreementCustomerDetailsReq
/// @brief "urn:ebay:api:PayPalAPI":GetBillingAgreementCustomerDetailsReq is a complexType.
///
/// class _ns1__GetBillingAgreementCustomerDetailsReq operations:
/// - _ns1__GetBillingAgreementCustomerDetailsReq* soap_new__ns1__GetBillingAgreementCustomerDetailsReq(soap*) allocate and default initialize
/// - _ns1__GetBillingAgreementCustomerDetailsReq* soap_new__ns1__GetBillingAgreementCustomerDetailsReq(soap*, int num) allocate array and default initialize values
/// - _ns1__GetBillingAgreementCustomerDetailsReq* soap_new_req__ns1__GetBillingAgreementCustomerDetailsReq(soap*, ...) allocate, set required members
/// - _ns1__GetBillingAgreementCustomerDetailsReq* soap_new_set__ns1__GetBillingAgreementCustomerDetailsReq(soap*, ...) allocate, set all public members
/// - _ns1__GetBillingAgreementCustomerDetailsReq::soap_default(soap*) default initialize members
/// - int soap_read__ns1__GetBillingAgreementCustomerDetailsReq(soap*, _ns1__GetBillingAgreementCustomerDetailsReq*) deserialize from a stream
/// - int soap_write__ns1__GetBillingAgreementCustomerDetailsReq(soap*, _ns1__GetBillingAgreementCustomerDetailsReq*) serialize to a stream
/// - _ns1__GetBillingAgreementCustomerDetailsReq* _ns1__GetBillingAgreementCustomerDetailsReq::soap_dup(soap*) returns deep copy of _ns1__GetBillingAgreementCustomerDetailsReq, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__GetBillingAgreementCustomerDetailsReq::soap_del() deep deletes _ns1__GetBillingAgreementCustomerDetailsReq data members, use only after _ns1__GetBillingAgreementCustomerDetailsReq::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__GetBillingAgreementCustomerDetailsReq
{ public:
/// Element reference "urn:ebay:api:PayPalAPI:""urn:ebay:api:PayPalAPI":GetBillingAgreementCustomerDetailsRequest.
    ns1__GetBillingAgreementCustomerDetailsRequestType*  GetBillingAgreementCustomerDetailsRequest 1;	///< Required element.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "urn:ebay:api:PayPalAPI":CreateBillingAgreementReq
/// @brief "urn:ebay:api:PayPalAPI":CreateBillingAgreementReq is a complexType.
///
/// class _ns1__CreateBillingAgreementReq operations:
/// - _ns1__CreateBillingAgreementReq* soap_new__ns1__CreateBillingAgreementReq(soap*) allocate and default initialize
/// - _ns1__CreateBillingAgreementReq* soap_new__ns1__CreateBillingAgreementReq(soap*, int num) allocate array and default initialize values
/// - _ns1__CreateBillingAgreementReq* soap_new_req__ns1__CreateBillingAgreementReq(soap*, ...) allocate, set required members
/// - _ns1__CreateBillingAgreementReq* soap_new_set__ns1__CreateBillingAgreementReq(soap*, ...) allocate, set all public members
/// - _ns1__CreateBillingAgreementReq::soap_default(soap*) default initialize members
/// - int soap_read__ns1__CreateBillingAgreementReq(soap*, _ns1__CreateBillingAgreementReq*) deserialize from a stream
/// - int soap_write__ns1__CreateBillingAgreementReq(soap*, _ns1__CreateBillingAgreementReq*) serialize to a stream
/// - _ns1__CreateBillingAgreementReq* _ns1__CreateBillingAgreementReq::soap_dup(soap*) returns deep copy of _ns1__CreateBillingAgreementReq, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__CreateBillingAgreementReq::soap_del() deep deletes _ns1__CreateBillingAgreementReq data members, use only after _ns1__CreateBillingAgreementReq::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__CreateBillingAgreementReq
{ public:
/// Element reference "urn:ebay:api:PayPalAPI:""urn:ebay:api:PayPalAPI":CreateBillingAgreementRequest.
    ns1__CreateBillingAgreementRequestType*  CreateBillingAgreementRequest  1;	///< Required element.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "urn:ebay:api:PayPalAPI":DoReferenceTransactionReq
/// @brief "urn:ebay:api:PayPalAPI":DoReferenceTransactionReq is a complexType.
///
/// class _ns1__DoReferenceTransactionReq operations:
/// - _ns1__DoReferenceTransactionReq* soap_new__ns1__DoReferenceTransactionReq(soap*) allocate and default initialize
/// - _ns1__DoReferenceTransactionReq* soap_new__ns1__DoReferenceTransactionReq(soap*, int num) allocate array and default initialize values
/// - _ns1__DoReferenceTransactionReq* soap_new_req__ns1__DoReferenceTransactionReq(soap*, ...) allocate, set required members
/// - _ns1__DoReferenceTransactionReq* soap_new_set__ns1__DoReferenceTransactionReq(soap*, ...) allocate, set all public members
/// - _ns1__DoReferenceTransactionReq::soap_default(soap*) default initialize members
/// - int soap_read__ns1__DoReferenceTransactionReq(soap*, _ns1__DoReferenceTransactionReq*) deserialize from a stream
/// - int soap_write__ns1__DoReferenceTransactionReq(soap*, _ns1__DoReferenceTransactionReq*) serialize to a stream
/// - _ns1__DoReferenceTransactionReq* _ns1__DoReferenceTransactionReq::soap_dup(soap*) returns deep copy of _ns1__DoReferenceTransactionReq, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__DoReferenceTransactionReq::soap_del() deep deletes _ns1__DoReferenceTransactionReq data members, use only after _ns1__DoReferenceTransactionReq::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__DoReferenceTransactionReq
{ public:
/// Element reference "urn:ebay:api:PayPalAPI:""urn:ebay:api:PayPalAPI":DoReferenceTransactionRequest.
    ns1__DoReferenceTransactionRequestType*  DoReferenceTransactionRequest  1;	///< Required element.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "urn:ebay:api:PayPalAPI":DoNonReferencedCreditReq
/// @brief "urn:ebay:api:PayPalAPI":DoNonReferencedCreditReq is a complexType.
///
/// class _ns1__DoNonReferencedCreditReq operations:
/// - _ns1__DoNonReferencedCreditReq* soap_new__ns1__DoNonReferencedCreditReq(soap*) allocate and default initialize
/// - _ns1__DoNonReferencedCreditReq* soap_new__ns1__DoNonReferencedCreditReq(soap*, int num) allocate array and default initialize values
/// - _ns1__DoNonReferencedCreditReq* soap_new_req__ns1__DoNonReferencedCreditReq(soap*, ...) allocate, set required members
/// - _ns1__DoNonReferencedCreditReq* soap_new_set__ns1__DoNonReferencedCreditReq(soap*, ...) allocate, set all public members
/// - _ns1__DoNonReferencedCreditReq::soap_default(soap*) default initialize members
/// - int soap_read__ns1__DoNonReferencedCreditReq(soap*, _ns1__DoNonReferencedCreditReq*) deserialize from a stream
/// - int soap_write__ns1__DoNonReferencedCreditReq(soap*, _ns1__DoNonReferencedCreditReq*) serialize to a stream
/// - _ns1__DoNonReferencedCreditReq* _ns1__DoNonReferencedCreditReq::soap_dup(soap*) returns deep copy of _ns1__DoNonReferencedCreditReq, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__DoNonReferencedCreditReq::soap_del() deep deletes _ns1__DoNonReferencedCreditReq data members, use only after _ns1__DoNonReferencedCreditReq::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__DoNonReferencedCreditReq
{ public:
/// Element reference "urn:ebay:api:PayPalAPI:""urn:ebay:api:PayPalAPI":DoNonReferencedCreditRequest.
    ns1__DoNonReferencedCreditRequestType*  DoNonReferencedCreditRequest   1;	///< Required element.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "urn:ebay:api:PayPalAPI":CreateRecurringPaymentsProfileReq
/// @brief "urn:ebay:api:PayPalAPI":CreateRecurringPaymentsProfileReq is a complexType.
///
/// class _ns1__CreateRecurringPaymentsProfileReq operations:
/// - _ns1__CreateRecurringPaymentsProfileReq* soap_new__ns1__CreateRecurringPaymentsProfileReq(soap*) allocate and default initialize
/// - _ns1__CreateRecurringPaymentsProfileReq* soap_new__ns1__CreateRecurringPaymentsProfileReq(soap*, int num) allocate array and default initialize values
/// - _ns1__CreateRecurringPaymentsProfileReq* soap_new_req__ns1__CreateRecurringPaymentsProfileReq(soap*, ...) allocate, set required members
/// - _ns1__CreateRecurringPaymentsProfileReq* soap_new_set__ns1__CreateRecurringPaymentsProfileReq(soap*, ...) allocate, set all public members
/// - _ns1__CreateRecurringPaymentsProfileReq::soap_default(soap*) default initialize members
/// - int soap_read__ns1__CreateRecurringPaymentsProfileReq(soap*, _ns1__CreateRecurringPaymentsProfileReq*) deserialize from a stream
/// - int soap_write__ns1__CreateRecurringPaymentsProfileReq(soap*, _ns1__CreateRecurringPaymentsProfileReq*) serialize to a stream
/// - _ns1__CreateRecurringPaymentsProfileReq* _ns1__CreateRecurringPaymentsProfileReq::soap_dup(soap*) returns deep copy of _ns1__CreateRecurringPaymentsProfileReq, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__CreateRecurringPaymentsProfileReq::soap_del() deep deletes _ns1__CreateRecurringPaymentsProfileReq data members, use only after _ns1__CreateRecurringPaymentsProfileReq::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__CreateRecurringPaymentsProfileReq
{ public:
/// Element reference "urn:ebay:api:PayPalAPI:""urn:ebay:api:PayPalAPI":CreateRecurringPaymentsProfileRequest.
    ns1__CreateRecurringPaymentsProfileRequestType*  CreateRecurringPaymentsProfileRequest 1;	///< Required element.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "urn:ebay:api:PayPalAPI":GetRecurringPaymentsProfileDetailsReq
/// @brief "urn:ebay:api:PayPalAPI":GetRecurringPaymentsProfileDetailsReq is a complexType.
///
/// class _ns1__GetRecurringPaymentsProfileDetailsReq operations:
/// - _ns1__GetRecurringPaymentsProfileDetailsReq* soap_new__ns1__GetRecurringPaymentsProfileDetailsReq(soap*) allocate and default initialize
/// - _ns1__GetRecurringPaymentsProfileDetailsReq* soap_new__ns1__GetRecurringPaymentsProfileDetailsReq(soap*, int num) allocate array and default initialize values
/// - _ns1__GetRecurringPaymentsProfileDetailsReq* soap_new_req__ns1__GetRecurringPaymentsProfileDetailsReq(soap*, ...) allocate, set required members
/// - _ns1__GetRecurringPaymentsProfileDetailsReq* soap_new_set__ns1__GetRecurringPaymentsProfileDetailsReq(soap*, ...) allocate, set all public members
/// - _ns1__GetRecurringPaymentsProfileDetailsReq::soap_default(soap*) default initialize members
/// - int soap_read__ns1__GetRecurringPaymentsProfileDetailsReq(soap*, _ns1__GetRecurringPaymentsProfileDetailsReq*) deserialize from a stream
/// - int soap_write__ns1__GetRecurringPaymentsProfileDetailsReq(soap*, _ns1__GetRecurringPaymentsProfileDetailsReq*) serialize to a stream
/// - _ns1__GetRecurringPaymentsProfileDetailsReq* _ns1__GetRecurringPaymentsProfileDetailsReq::soap_dup(soap*) returns deep copy of _ns1__GetRecurringPaymentsProfileDetailsReq, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__GetRecurringPaymentsProfileDetailsReq::soap_del() deep deletes _ns1__GetRecurringPaymentsProfileDetailsReq data members, use only after _ns1__GetRecurringPaymentsProfileDetailsReq::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__GetRecurringPaymentsProfileDetailsReq
{ public:
/// Element reference "urn:ebay:api:PayPalAPI:""urn:ebay:api:PayPalAPI":GetRecurringPaymentsProfileDetailsRequest.
    ns1__GetRecurringPaymentsProfileDetailsRequestType*  GetRecurringPaymentsProfileDetailsRequest 1;	///< Required element.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "urn:ebay:api:PayPalAPI":ManageRecurringPaymentsProfileStatusReq
/// @brief "urn:ebay:api:PayPalAPI":ManageRecurringPaymentsProfileStatusReq is a complexType.
///
/// class _ns1__ManageRecurringPaymentsProfileStatusReq operations:
/// - _ns1__ManageRecurringPaymentsProfileStatusReq* soap_new__ns1__ManageRecurringPaymentsProfileStatusReq(soap*) allocate and default initialize
/// - _ns1__ManageRecurringPaymentsProfileStatusReq* soap_new__ns1__ManageRecurringPaymentsProfileStatusReq(soap*, int num) allocate array and default initialize values
/// - _ns1__ManageRecurringPaymentsProfileStatusReq* soap_new_req__ns1__ManageRecurringPaymentsProfileStatusReq(soap*, ...) allocate, set required members
/// - _ns1__ManageRecurringPaymentsProfileStatusReq* soap_new_set__ns1__ManageRecurringPaymentsProfileStatusReq(soap*, ...) allocate, set all public members
/// - _ns1__ManageRecurringPaymentsProfileStatusReq::soap_default(soap*) default initialize members
/// - int soap_read__ns1__ManageRecurringPaymentsProfileStatusReq(soap*, _ns1__ManageRecurringPaymentsProfileStatusReq*) deserialize from a stream
/// - int soap_write__ns1__ManageRecurringPaymentsProfileStatusReq(soap*, _ns1__ManageRecurringPaymentsProfileStatusReq*) serialize to a stream
/// - _ns1__ManageRecurringPaymentsProfileStatusReq* _ns1__ManageRecurringPaymentsProfileStatusReq::soap_dup(soap*) returns deep copy of _ns1__ManageRecurringPaymentsProfileStatusReq, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__ManageRecurringPaymentsProfileStatusReq::soap_del() deep deletes _ns1__ManageRecurringPaymentsProfileStatusReq data members, use only after _ns1__ManageRecurringPaymentsProfileStatusReq::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__ManageRecurringPaymentsProfileStatusReq
{ public:
/// Element reference "urn:ebay:api:PayPalAPI:""urn:ebay:api:PayPalAPI":ManageRecurringPaymentsProfileStatusRequest.
    ns1__ManageRecurringPaymentsProfileStatusRequestType*  ManageRecurringPaymentsProfileStatusRequest 1;	///< Required element.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "urn:ebay:api:PayPalAPI":BillOutstandingAmountReq
/// @brief "urn:ebay:api:PayPalAPI":BillOutstandingAmountReq is a complexType.
///
/// class _ns1__BillOutstandingAmountReq operations:
/// - _ns1__BillOutstandingAmountReq* soap_new__ns1__BillOutstandingAmountReq(soap*) allocate and default initialize
/// - _ns1__BillOutstandingAmountReq* soap_new__ns1__BillOutstandingAmountReq(soap*, int num) allocate array and default initialize values
/// - _ns1__BillOutstandingAmountReq* soap_new_req__ns1__BillOutstandingAmountReq(soap*, ...) allocate, set required members
/// - _ns1__BillOutstandingAmountReq* soap_new_set__ns1__BillOutstandingAmountReq(soap*, ...) allocate, set all public members
/// - _ns1__BillOutstandingAmountReq::soap_default(soap*) default initialize members
/// - int soap_read__ns1__BillOutstandingAmountReq(soap*, _ns1__BillOutstandingAmountReq*) deserialize from a stream
/// - int soap_write__ns1__BillOutstandingAmountReq(soap*, _ns1__BillOutstandingAmountReq*) serialize to a stream
/// - _ns1__BillOutstandingAmountReq* _ns1__BillOutstandingAmountReq::soap_dup(soap*) returns deep copy of _ns1__BillOutstandingAmountReq, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__BillOutstandingAmountReq::soap_del() deep deletes _ns1__BillOutstandingAmountReq data members, use only after _ns1__BillOutstandingAmountReq::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__BillOutstandingAmountReq
{ public:
/// Element reference "urn:ebay:api:PayPalAPI:""urn:ebay:api:PayPalAPI":BillOutstandingAmountRequest.
    ns1__BillOutstandingAmountRequestType*  BillOutstandingAmountRequest   1;	///< Required element.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "urn:ebay:api:PayPalAPI":UpdateRecurringPaymentsProfileReq
/// @brief "urn:ebay:api:PayPalAPI":UpdateRecurringPaymentsProfileReq is a complexType.
///
/// class _ns1__UpdateRecurringPaymentsProfileReq operations:
/// - _ns1__UpdateRecurringPaymentsProfileReq* soap_new__ns1__UpdateRecurringPaymentsProfileReq(soap*) allocate and default initialize
/// - _ns1__UpdateRecurringPaymentsProfileReq* soap_new__ns1__UpdateRecurringPaymentsProfileReq(soap*, int num) allocate array and default initialize values
/// - _ns1__UpdateRecurringPaymentsProfileReq* soap_new_req__ns1__UpdateRecurringPaymentsProfileReq(soap*, ...) allocate, set required members
/// - _ns1__UpdateRecurringPaymentsProfileReq* soap_new_set__ns1__UpdateRecurringPaymentsProfileReq(soap*, ...) allocate, set all public members
/// - _ns1__UpdateRecurringPaymentsProfileReq::soap_default(soap*) default initialize members
/// - int soap_read__ns1__UpdateRecurringPaymentsProfileReq(soap*, _ns1__UpdateRecurringPaymentsProfileReq*) deserialize from a stream
/// - int soap_write__ns1__UpdateRecurringPaymentsProfileReq(soap*, _ns1__UpdateRecurringPaymentsProfileReq*) serialize to a stream
/// - _ns1__UpdateRecurringPaymentsProfileReq* _ns1__UpdateRecurringPaymentsProfileReq::soap_dup(soap*) returns deep copy of _ns1__UpdateRecurringPaymentsProfileReq, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__UpdateRecurringPaymentsProfileReq::soap_del() deep deletes _ns1__UpdateRecurringPaymentsProfileReq data members, use only after _ns1__UpdateRecurringPaymentsProfileReq::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__UpdateRecurringPaymentsProfileReq
{ public:
/// Element reference "urn:ebay:api:PayPalAPI:""urn:ebay:api:PayPalAPI":UpdateRecurringPaymentsProfileRequest.
    ns1__UpdateRecurringPaymentsProfileRequestType*  UpdateRecurringPaymentsProfileRequest 1;	///< Required element.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "urn:ebay:api:PayPalAPI":GetPalDetailsReq
/// @brief "urn:ebay:api:PayPalAPI":GetPalDetailsReq is a complexType.
///
/// class _ns1__GetPalDetailsReq operations:
/// - _ns1__GetPalDetailsReq* soap_new__ns1__GetPalDetailsReq(soap*) allocate and default initialize
/// - _ns1__GetPalDetailsReq* soap_new__ns1__GetPalDetailsReq(soap*, int num) allocate array and default initialize values
/// - _ns1__GetPalDetailsReq* soap_new_req__ns1__GetPalDetailsReq(soap*, ...) allocate, set required members
/// - _ns1__GetPalDetailsReq* soap_new_set__ns1__GetPalDetailsReq(soap*, ...) allocate, set all public members
/// - _ns1__GetPalDetailsReq::soap_default(soap*) default initialize members
/// - int soap_read__ns1__GetPalDetailsReq(soap*, _ns1__GetPalDetailsReq*) deserialize from a stream
/// - int soap_write__ns1__GetPalDetailsReq(soap*, _ns1__GetPalDetailsReq*) serialize to a stream
/// - _ns1__GetPalDetailsReq* _ns1__GetPalDetailsReq::soap_dup(soap*) returns deep copy of _ns1__GetPalDetailsReq, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__GetPalDetailsReq::soap_del() deep deletes _ns1__GetPalDetailsReq data members, use only after _ns1__GetPalDetailsReq::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__GetPalDetailsReq
{ public:
/// Element reference "urn:ebay:api:PayPalAPI:""urn:ebay:api:PayPalAPI":GetPalDetailsRequest.
    ns1__GetPalDetailsRequestType*       GetPalDetailsRequest           1;	///< Required element.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "urn:ebay:api:PayPalAPI":ReverseTransactionReq
/// @brief "urn:ebay:api:PayPalAPI":ReverseTransactionReq is a complexType.
///
/// class _ns1__ReverseTransactionReq operations:
/// - _ns1__ReverseTransactionReq* soap_new__ns1__ReverseTransactionReq(soap*) allocate and default initialize
/// - _ns1__ReverseTransactionReq* soap_new__ns1__ReverseTransactionReq(soap*, int num) allocate array and default initialize values
/// - _ns1__ReverseTransactionReq* soap_new_req__ns1__ReverseTransactionReq(soap*, ...) allocate, set required members
/// - _ns1__ReverseTransactionReq* soap_new_set__ns1__ReverseTransactionReq(soap*, ...) allocate, set all public members
/// - _ns1__ReverseTransactionReq::soap_default(soap*) default initialize members
/// - int soap_read__ns1__ReverseTransactionReq(soap*, _ns1__ReverseTransactionReq*) deserialize from a stream
/// - int soap_write__ns1__ReverseTransactionReq(soap*, _ns1__ReverseTransactionReq*) serialize to a stream
/// - _ns1__ReverseTransactionReq* _ns1__ReverseTransactionReq::soap_dup(soap*) returns deep copy of _ns1__ReverseTransactionReq, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__ReverseTransactionReq::soap_del() deep deletes _ns1__ReverseTransactionReq data members, use only after _ns1__ReverseTransactionReq::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__ReverseTransactionReq
{ public:
/// Element reference "urn:ebay:api:PayPalAPI:""urn:ebay:api:PayPalAPI":ReverseTransactionRequest.
    ns1__ReverseTransactionRequestType*  ReverseTransactionRequest      1;	///< Required element.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "urn:ebay:api:PayPalAPI":ExternalRememberMeOptOutReq
/// @brief "urn:ebay:api:PayPalAPI":ExternalRememberMeOptOutReq is a complexType.
///
/// class _ns1__ExternalRememberMeOptOutReq operations:
/// - _ns1__ExternalRememberMeOptOutReq* soap_new__ns1__ExternalRememberMeOptOutReq(soap*) allocate and default initialize
/// - _ns1__ExternalRememberMeOptOutReq* soap_new__ns1__ExternalRememberMeOptOutReq(soap*, int num) allocate array and default initialize values
/// - _ns1__ExternalRememberMeOptOutReq* soap_new_req__ns1__ExternalRememberMeOptOutReq(soap*, ...) allocate, set required members
/// - _ns1__ExternalRememberMeOptOutReq* soap_new_set__ns1__ExternalRememberMeOptOutReq(soap*, ...) allocate, set all public members
/// - _ns1__ExternalRememberMeOptOutReq::soap_default(soap*) default initialize members
/// - int soap_read__ns1__ExternalRememberMeOptOutReq(soap*, _ns1__ExternalRememberMeOptOutReq*) deserialize from a stream
/// - int soap_write__ns1__ExternalRememberMeOptOutReq(soap*, _ns1__ExternalRememberMeOptOutReq*) serialize to a stream
/// - _ns1__ExternalRememberMeOptOutReq* _ns1__ExternalRememberMeOptOutReq::soap_dup(soap*) returns deep copy of _ns1__ExternalRememberMeOptOutReq, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__ExternalRememberMeOptOutReq::soap_del() deep deletes _ns1__ExternalRememberMeOptOutReq data members, use only after _ns1__ExternalRememberMeOptOutReq::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__ExternalRememberMeOptOutReq
{ public:
/// Element reference "urn:ebay:api:PayPalAPI:""urn:ebay:api:PayPalAPI":ExternalRememberMeOptOutRequest.
    ns1__ExternalRememberMeOptOutRequestType*  ExternalRememberMeOptOutRequest 1;	///< Required element.
    struct soap                         *soap                          ;
};


/******************************************************************************\
 *                                                                            *
 * Schema Complex Types and Top-Level Elements                                *
 *   urn:ebay:apis:CoreComponentTypes                                         *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Complex Types and Top-Level Elements                                *
 *   urn:ebay:apis:eBLBaseComponents                                          *
 *                                                                            *
\******************************************************************************/

/// @brief "urn:ebay:apis:eBLBaseComponents":AccountEntryType is a complexType.
///
/// class ns3__AccountEntryType operations:
/// - ns3__AccountEntryType* soap_new_ns3__AccountEntryType(soap*) allocate and default initialize
/// - ns3__AccountEntryType* soap_new_ns3__AccountEntryType(soap*, int num) allocate array and default initialize values
/// - ns3__AccountEntryType* soap_new_req_ns3__AccountEntryType(soap*, ...) allocate, set required members
/// - ns3__AccountEntryType* soap_new_set_ns3__AccountEntryType(soap*, ...) allocate, set all public members
/// - ns3__AccountEntryType::soap_default(soap*) default initialize members
/// - int soap_read_ns3__AccountEntryType(soap*, ns3__AccountEntryType*) deserialize from a stream
/// - int soap_write_ns3__AccountEntryType(soap*, ns3__AccountEntryType*) serialize to a stream
/// - ns3__AccountEntryType* ns3__AccountEntryType::soap_dup(soap*) returns deep copy of ns3__AccountEntryType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns3__AccountEntryType::soap_del() deep deletes ns3__AccountEntryType data members, use only after ns3__AccountEntryType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns3__AccountEntryType
{ public:
/// <PRE><BLOCKQUOTE>
///   Balance as of a given entry, can be 0.00.
/// </BLOCKQUOTE></PRE>
/// Element reference "urn:ebay:apis:eBLBaseComponents:""urn:ebay:apis:eBLBaseComponents":Balance.
    ns2__AmountType*                     Balance                        1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Credit Amount for a detail entry, can be 0.00.
/// </BLOCKQUOTE></PRE>
/// Element "Credit" of XSD type "urn:ebay:apis:CoreComponentTypes":AmountType.
    ns2__AmountType*                     Credit                         1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Date entry was posted, in GMT.
/// </BLOCKQUOTE></PRE>
/// Element "Date" of XSD type xs:dateTime.
    time_t                               Date                           1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Debit Amount for this detail entry, can be 0.00.
/// </BLOCKQUOTE></PRE>
/// Element "Debit" of XSD type "urn:ebay:apis:CoreComponentTypes":AmountType.
    ns2__AmountType*                     Debit                          1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Item number if transaction is associated with an auction or 0 if no item is associated with an account entry.
/// </BLOCKQUOTE></PRE>
/// Element reference "urn:ebay:apis:eBLBaseComponents:""urn:ebay:apis:eBLBaseComponents":ItemID.
    ns3__ItemIDType                      ItemID                         1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Memo line for an account entry, can be empty string.
/// </BLOCKQUOTE></PRE>
/// Element "Memo" of XSD type xs:string.
    std::string                          Memo                           1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   eBay reference number for an account entry.
/// </BLOCKQUOTE></PRE>
/// Element "RefNumber" of XSD type xs:int.
    int                                  RefNumber                      1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Integer code for account details entry type. This element
///   element specifies an index to a table of explanations for accounting charges.
/// </BLOCKQUOTE></PRE>
/// Element "AccountEntryDetailsType" of XSD type xs:int.
    int                                  AccountEntryDetailsType        1;	///< Required element.
    struct soap                         *soap                          ;
};

/// @brief "urn:ebay:apis:eBLBaseComponents":AdditionalAccountType is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   The AdditionalAccount component represents historical data related to accounts that the user held with a country of residency other than the current one. eBay users can have one active account at a time. For users who change their country of residency and modify their eBay registration to reflect this change, the new country of residence becomes the currently active account. Any account associated with a previous country is treated as an additional account. Because the currency for these additional accounts are different than the active account, each additional account includes an indicator of the currency for that account. Users who never change their country of residence will not have any additional accounts.
/// </BLOCKQUOTE></PRE>
/// class ns3__AdditionalAccountType operations:
/// - ns3__AdditionalAccountType* soap_new_ns3__AdditionalAccountType(soap*) allocate and default initialize
/// - ns3__AdditionalAccountType* soap_new_ns3__AdditionalAccountType(soap*, int num) allocate array and default initialize values
/// - ns3__AdditionalAccountType* soap_new_req_ns3__AdditionalAccountType(soap*, ...) allocate, set required members
/// - ns3__AdditionalAccountType* soap_new_set_ns3__AdditionalAccountType(soap*, ...) allocate, set all public members
/// - ns3__AdditionalAccountType::soap_default(soap*) default initialize members
/// - int soap_read_ns3__AdditionalAccountType(soap*, ns3__AdditionalAccountType*) deserialize from a stream
/// - int soap_write_ns3__AdditionalAccountType(soap*, ns3__AdditionalAccountType*) serialize to a stream
/// - ns3__AdditionalAccountType* ns3__AdditionalAccountType::soap_dup(soap*) returns deep copy of ns3__AdditionalAccountType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns3__AdditionalAccountType::soap_del() deep deletes ns3__AdditionalAccountType data members, use only after ns3__AdditionalAccountType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns3__AdditionalAccountType
{ public:
/// Element reference "urn:ebay:apis:eBLBaseComponents:""urn:ebay:apis:eBLBaseComponents":Balance.
    ns2__AmountType*                     Balance                        1;	///< Required element.
/// Element reference "urn:ebay:apis:eBLBaseComponents:""urn:ebay:apis:eBLBaseComponents":Currency.
    enum ns3__CurrencyCodeType           Currency                       1;	///< Required element.
/// Element reference "urn:ebay:apis:eBLBaseComponents:""urn:ebay:apis:eBLBaseComponents":AccountCode.
    std::string                          AccountCode                    1;	///< Required element.
    struct soap                         *soap                          ;
};

/// @brief "urn:ebay:apis:eBLBaseComponents":PromotedItemType is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   Merchandizing info for an Item. This contains a list of crosssell
///   or upsell items.
/// </BLOCKQUOTE></PRE>
/// class ns3__PromotedItemType operations:
/// - ns3__PromotedItemType* soap_new_ns3__PromotedItemType(soap*) allocate and default initialize
/// - ns3__PromotedItemType* soap_new_ns3__PromotedItemType(soap*, int num) allocate array and default initialize values
/// - ns3__PromotedItemType* soap_new_req_ns3__PromotedItemType(soap*, ...) allocate, set required members
/// - ns3__PromotedItemType* soap_new_set_ns3__PromotedItemType(soap*, ...) allocate, set all public members
/// - ns3__PromotedItemType::soap_default(soap*) default initialize members
/// - int soap_read_ns3__PromotedItemType(soap*, ns3__PromotedItemType*) deserialize from a stream
/// - int soap_write_ns3__PromotedItemType(soap*, ns3__PromotedItemType*) serialize to a stream
/// - ns3__PromotedItemType* ns3__PromotedItemType::soap_dup(soap*) returns deep copy of ns3__PromotedItemType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns3__PromotedItemType::soap_del() deep deletes ns3__PromotedItemType data members, use only after ns3__PromotedItemType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns3__PromotedItemType
{ public:
/// <PRE><BLOCKQUOTE>
///   Item ID for the base item. Based on this item other items are promoted. it is teh only tag that would show up in all calls that use promoted item type. some are not in soap yet, such as get and ser promotion rules
/// </BLOCKQUOTE></PRE>
/// Element "ItemID" of XSD type "urn:ebay:apis:eBLBaseComponents":ItemIDType.
    ns3__ItemIDType                      ItemID                         1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   URL for the picture of the promoted item.
/// </BLOCKQUOTE></PRE>
/// Element "PictureURL" of XSD type xs:string.
    std::string*                         PictureURL                     0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Where to display in the list of items.currentl y even forget and set does not have to be minoccur =0 but if we ever were to do revise promotion tems, it can be omitted
/// </BLOCKQUOTE></PRE>
/// Element "position" of XSD type xs:int.
    int*                                 position                       0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Promotion Price. Price at which the buyer can buy the item now.
/// </BLOCKQUOTE></PRE>
/// Element "PromotionPrice" of XSD type "urn:ebay:apis:CoreComponentTypes":AmountType.
    ns2__AmountType*                     PromotionPrice                 0;	///< Optional element.
/// Element "PromotionPriceType" of XSD type "urn:ebay:apis:eBLBaseComponents":PromotionItemPriceTypeCodeType.
    enum ns3__PromotionItemPriceTypeCodeType*  PromotionPriceType             0;	///< Optional element.
/// Element "SelectionType" of XSD type "urn:ebay:apis:eBLBaseComponents":PromotionItemSelectionCodeType.
    enum ns3__PromotionItemSelectionCodeType*  SelectionType                  0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Item Title for the promoted item.
/// </BLOCKQUOTE></PRE>
/// Element "Title" of XSD type xs:string.
    std::string*                         Title                          0;	///< Optional element.
/// Element "ListingType" of XSD type "urn:ebay:apis:eBLBaseComponents":ListingTypeCodeType.
    enum ns3__ListingTypeCodeType*       ListingType                    0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief "urn:ebay:apis:eBLBaseComponents":CrossPromotionsType is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   Merchandizing info for an Item. This contains a list of crosssell
///   or upsell items.
///   PrimaryScheme, PromotionMethod,SellerId,ItemId, ShippingDiscount
///   do not have be min occur 0
/// </BLOCKQUOTE></PRE>
/// class ns3__CrossPromotionsType operations:
/// - ns3__CrossPromotionsType* soap_new_ns3__CrossPromotionsType(soap*) allocate and default initialize
/// - ns3__CrossPromotionsType* soap_new_ns3__CrossPromotionsType(soap*, int num) allocate array and default initialize values
/// - ns3__CrossPromotionsType* soap_new_req_ns3__CrossPromotionsType(soap*, ...) allocate, set required members
/// - ns3__CrossPromotionsType* soap_new_set_ns3__CrossPromotionsType(soap*, ...) allocate, set all public members
/// - ns3__CrossPromotionsType::soap_default(soap*) default initialize members
/// - int soap_read_ns3__CrossPromotionsType(soap*, ns3__CrossPromotionsType*) deserialize from a stream
/// - int soap_write_ns3__CrossPromotionsType(soap*, ns3__CrossPromotionsType*) serialize to a stream
/// - ns3__CrossPromotionsType* ns3__CrossPromotionsType::soap_dup(soap*) returns deep copy of ns3__CrossPromotionsType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns3__CrossPromotionsType::soap_del() deep deletes ns3__CrossPromotionsType data members, use only after ns3__CrossPromotionsType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns3__CrossPromotionsType
{ public:
/// <PRE><BLOCKQUOTE>
///   Item ID for the base item. Based on this item other items are promoted.
/// </BLOCKQUOTE></PRE>
/// Element "ItemID" of XSD type "urn:ebay:apis:eBLBaseComponents":ItemIDType.
    ns3__ItemIDType                      ItemID                         1;	///< Required element.
/// Element "PrimaryScheme" of XSD type "urn:ebay:apis:eBLBaseComponents":PromotionSchemeCodeType.
    enum ns3__PromotionSchemeCodeType    PrimaryScheme                  1;	///< Required element.
/// Element "PromotionMethod" of XSD type "urn:ebay:apis:eBLBaseComponents":PromotionMethodCodeType.
    enum ns3__PromotionMethodCodeType    PromotionMethod                1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Id of the Seller who is promoting this item.
/// </BLOCKQUOTE></PRE>
/// Element "SellerID" of XSD type xs:string.
    std::string                          SellerID                       1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Shipping Discount offered or not by the seller.
/// </BLOCKQUOTE></PRE>
/// Element "ShippingDiscount" of XSD type xs:boolean.
    bool                                 ShippingDiscount               1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Key of the Seller who is promoting this item.
/// </BLOCKQUOTE></PRE>
/// Element "SellerKey" of XSD type xs:string.
    std::string*                         SellerKey                      0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Store Name for the seller.
/// </BLOCKQUOTE></PRE>
/// Element "StoreName" of XSD type xs:string.
    std::string*                         StoreName                      0;	///< Optional element.
/// Vector of ns3__PromotedItemType* of length 1..unbounded.
    std::vector<ns3__PromotedItemType* > PromotedItem                   1;	///< Elements.
    struct soap                         *soap                          ;
};

/// @brief "urn:ebay:apis:eBLBaseComponents":AccountSummaryType is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   Includes account summary for the user.
/// </BLOCKQUOTE></PRE>
/// class ns3__AccountSummaryType operations:
/// - ns3__AccountSummaryType* soap_new_ns3__AccountSummaryType(soap*) allocate and default initialize
/// - ns3__AccountSummaryType* soap_new_ns3__AccountSummaryType(soap*, int num) allocate array and default initialize values
/// - ns3__AccountSummaryType* soap_new_req_ns3__AccountSummaryType(soap*, ...) allocate, set required members
/// - ns3__AccountSummaryType* soap_new_set_ns3__AccountSummaryType(soap*, ...) allocate, set all public members
/// - ns3__AccountSummaryType::soap_default(soap*) default initialize members
/// - int soap_read_ns3__AccountSummaryType(soap*, ns3__AccountSummaryType*) deserialize from a stream
/// - int soap_write_ns3__AccountSummaryType(soap*, ns3__AccountSummaryType*) serialize to a stream
/// - ns3__AccountSummaryType* ns3__AccountSummaryType::soap_dup(soap*) returns deep copy of ns3__AccountSummaryType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns3__AccountSummaryType::soap_del() deep deletes ns3__AccountSummaryType data members, use only after ns3__AccountSummaryType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns3__AccountSummaryType
{ public:
//  BEGIN CHOICE <xs:choice minOccurs="0" maxOccurs="unbounded">
   $int                                  __size_AccountSummaryType      0;
    class __ns3__union_AccountSummaryType
    {
   $int                                  __union_AccountSummaryType     0;	///< Union _ns3__union_AccountSummaryType selector: set to SOAP_UNION__ns3__union_AccountSummaryType_<fieldname> or 0 to omit
/// Union for choice in ns3__AccountSummaryType.
    union _ns3__union_AccountSummaryType
    {
/// Element "AccountState" of XSD type "urn:ebay:apis:eBLBaseComponents":AccountStateCodeType.
    enum ns3__AccountStateCodeType       AccountState                   0;	///< Optional element.
/// Vector of ns3__AdditionalAccountType* of length 0..unbounded.
    std::vector<ns3__AdditionalAccountType*> *AdditionalAccount              0;	///< Elements.
/// <PRE><BLOCKQUOTE>
///   Number of additional accounts.
/// </BLOCKQUOTE></PRE>
/// Element "AdditionalAccountsCount" of XSD type xs:int.
    int                                  AdditionalAccountsCount        1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Amount past due, 0.00 if not past due.
/// </BLOCKQUOTE></PRE>
/// Element reference "urn:ebay:apis:eBLBaseComponents:""urn:ebay:apis:eBLBaseComponents":AmountPastDue.
    ns2__AmountType*                     AmountPastDue                  0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   First four digits (with remainder Xed-out). This may be an empty string depending upon the value of the payment type for the user account (e.g, if no debit-card specified).
/// </BLOCKQUOTE></PRE>
/// Element "BankAccountInfo" of XSD type xs:string.
    std::string*                         BankAccountInfo                nullptr 1;	///< Required nillable (xsi:nil when NULL) element.
/// <PRE><BLOCKQUOTE>
///   Last time/day BankAccountInfo and/or BankRoutingInfo was modified, in GMT. This may be an empty string depending upon the value of the payment type for the user account (e.g, if no debit-card specified).
/// </BLOCKQUOTE></PRE>
/// Element "BankModifyDate" of XSD type xs:dateTime.
    time_t                               BankModifyDate                 1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Indicates the billing cycle in which eBay sends a billing invoice to the specified user. Possible values:
///   0 = On the last day of the month.
///   15 = On the 15th day of the month.
/// </BLOCKQUOTE></PRE>
/// Element "BillingCycleDate" of XSD type xs:dateTime.
    time_t                               BillingCycleDate               1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Expiration date for the credit card selected as payment method, in GMT. Empty string if no credit card is on file or if account is
///   inactive -- even if there is a credit card on file.
/// </BLOCKQUOTE></PRE>
/// Element "CCExp" of XSD type xs:dateTime.
    time_t                               CCExp                          1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Last four digits of user's credit card selected as payment
///   type. Empty string if no credit is on file. This may be an empty string depending upon the value of the payment type for the user account (e.g, if no debit-card specified).
/// </BLOCKQUOTE></PRE>
/// Element "CCInfo" of XSD type xs:string.
    std::string*                         CCInfo                         nullptr 1;	///< Required nillable (xsi:nil when NULL) element.
/// <PRE><BLOCKQUOTE>
///   Last date credit card or credit card expiration date was modified, in GMT. This may be an empty string depending upon the value of the payment type for the user account (e.g, Empty string if no credit card is on file.
/// </BLOCKQUOTE></PRE>
/// Element "CCModifyDate" of XSD type xs:dateTime.
    time_t                               CCModifyDate                   1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   User's current balance. Can be 0.00, positive, or negative.
/// </BLOCKQUOTE></PRE>
/// Element reference "urn:ebay:apis:eBLBaseComponents:""urn:ebay:apis:eBLBaseComponents":CurrentBalance.
    ns2__AmountType*                     CurrentBalance                 nullptr 1;	///< Required nillable (xsi:nil when NULL) element.
/// <PRE><BLOCKQUOTE>
///   Amount of last payment posted, 0.00 if no payments posted.
/// </BLOCKQUOTE></PRE>
/// Element "LastAmountPaid" of XSD type "urn:ebay:apis:CoreComponentTypes":AmountType.
    ns2__AmountType*                     LastAmountPaid                 nullptr 1;	///< Required nillable (xsi:nil when NULL) element.
/// <PRE><BLOCKQUOTE>
///   Amount of last invoice. 0.00 if account not yet invoiced.
/// </BLOCKQUOTE></PRE>
/// Element "LastInvoiceAmount" of XSD type "urn:ebay:apis:CoreComponentTypes":AmountType.
    ns2__AmountType*                     LastInvoiceAmount              nullptr 1;	///< Required nillable (xsi:nil when NULL) element.
/// <PRE><BLOCKQUOTE>
///   Date of last invoice sent by eBay to the user, in GMT. Empty string if this account has not been invoiced yet.
/// </BLOCKQUOTE></PRE>
/// Element "LastInvoiceDate" of XSD type xs:dateTime.
    time_t                               LastInvoiceDate                1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Date of last payment by specified user to eBay, in GMT. Empty string if no payments posted.
/// </BLOCKQUOTE></PRE>
/// Element "LastPaymentDate" of XSD type xs:dateTime.
    time_t                               LastPaymentDate                1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Indicates whether the account has past due amounts outstanding. Possible values:
///   true = Account is past due.
///   false = Account is current.
/// </BLOCKQUOTE></PRE>
/// Element "PastDue" of XSD type xs:boolean.
    bool                                 PastDue                        1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Indicates the method the specified user selected for paying eBay. The values for PaymentType vary for each SiteID.
/// </BLOCKQUOTE></PRE>
/// Element "PaymentMethod" of XSD type "urn:ebay:apis:eBLBaseComponents":SellerPaymentMethodCodeType.
    enum ns3__SellerPaymentMethodCodeType  PaymentMethod                  1;	///< Required element.
    }                                    union_AccountSummaryType      ;
    }                                   *__union_AccountSummaryType    ;
//  END OF CHOICE
/// @todo This mixed content complexType is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -d for DOM (soap_dom_element) to store mixed content.
    _XML                                 __mixed                       0;	///< Catch mixed content as an xsd:any (an XML string by default).
    struct soap                         *soap                          ;
};

/// @brief "urn:ebay:apis:eBLBaseComponents":BuyerType is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   Information about user used by buying applications
/// </BLOCKQUOTE></PRE>
/// class ns3__BuyerType operations:
/// - ns3__BuyerType* soap_new_ns3__BuyerType(soap*) allocate and default initialize
/// - ns3__BuyerType* soap_new_ns3__BuyerType(soap*, int num) allocate array and default initialize values
/// - ns3__BuyerType* soap_new_req_ns3__BuyerType(soap*, ...) allocate, set required members
/// - ns3__BuyerType* soap_new_set_ns3__BuyerType(soap*, ...) allocate, set all public members
/// - ns3__BuyerType::soap_default(soap*) default initialize members
/// - int soap_read_ns3__BuyerType(soap*, ns3__BuyerType*) deserialize from a stream
/// - int soap_write_ns3__BuyerType(soap*, ns3__BuyerType*) serialize to a stream
/// - ns3__BuyerType* ns3__BuyerType::soap_dup(soap*) returns deep copy of ns3__BuyerType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns3__BuyerType::soap_del() deep deletes ns3__BuyerType data members, use only after ns3__BuyerType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns3__BuyerType
{ public:
/// Element reference "urn:ebay:apis:eBLBaseComponents:""urn:ebay:apis:eBLBaseComponents":ShippingAddress.
    ns3__AddressType*                    ShippingAddress                0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief "urn:ebay:apis:eBLBaseComponents":SellerType is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   Information about user used by selling applications
///   there are number of required elements - they will always show up for seller node
///   there is not such a call to do revise seller info. only added minoccur=0 to elements that will not show up in every type of request/responce
/// </BLOCKQUOTE></PRE>
/// class ns3__SellerType operations:
/// - ns3__SellerType* soap_new_ns3__SellerType(soap*) allocate and default initialize
/// - ns3__SellerType* soap_new_ns3__SellerType(soap*, int num) allocate array and default initialize values
/// - ns3__SellerType* soap_new_req_ns3__SellerType(soap*, ...) allocate, set required members
/// - ns3__SellerType* soap_new_set_ns3__SellerType(soap*, ...) allocate, set all public members
/// - ns3__SellerType::soap_default(soap*) default initialize members
/// - int soap_read_ns3__SellerType(soap*, ns3__SellerType*) deserialize from a stream
/// - int soap_write_ns3__SellerType(soap*, ns3__SellerType*) serialize to a stream
/// - ns3__SellerType* ns3__SellerType::soap_dup(soap*) returns deep copy of ns3__SellerType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns3__SellerType::soap_del() deep deletes ns3__SellerType data members, use only after ns3__SellerType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns3__SellerType
{ public:
/// Element "AllowPaymentEdit" of XSD type xs:boolean.
    bool                                 AllowPaymentEdit               1;	///< Required element.
/// Element "BillingCurrency" of XSD type "urn:ebay:apis:eBLBaseComponents":CurrencyCodeType.
    enum ns3__CurrencyCodeType*          BillingCurrency                0;	///< Optional element.
/// Element reference "urn:ebay:apis:eBLBaseComponents:""urn:ebay:apis:eBLBaseComponents":CheckoutEnabled.
    bool                                 CheckoutEnabled                1;	///< Required element.
/// Element "CIPBankAccountStored" of XSD type xs:boolean.
    bool                                 CIPBankAccountStored           1;	///< Required element.
/// Element "GoodStanding" of XSD type xs:boolean.
    bool                                 GoodStanding                   1;	///< Required element.
/// Element "LiveAuctionAuthorized" of XSD type xs:boolean.
    bool                                 LiveAuctionAuthorized          1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Indicates whether the user has elected to participate as a seller in the Merchandising Manager feature.
/// </BLOCKQUOTE></PRE>
/// Element "MerchandizingPref" of XSD type "urn:ebay:apis:eBLBaseComponents":MerchandizingPrefCodeType.
    enum ns3__MerchandizingPrefCodeType  MerchandizingPref              1;	///< Required element.
/// Element "QualifiesForB2BVAT" of XSD type xs:boolean.
    bool                                 QualifiesForB2BVAT             1;	///< Required element.
/// Element reference "urn:ebay:apis:eBLBaseComponents:""urn:ebay:apis:eBLBaseComponents":SellerLevel.
    enum ns3__SellerLevelCodeType        SellerLevel                    1;	///< Required element.
/// Element reference "urn:ebay:apis:eBLBaseComponents:""urn:ebay:apis:eBLBaseComponents":SellerPaymentAddress.
    ns3__AddressType*                    SellerPaymentAddress           0;	///< Optional element.
/// Element "SchedulingInfo" of XSD type "urn:ebay:apis:eBLBaseComponents":SchedulingInfoType.
    ns3__SchedulingInfoType*             SchedulingInfo                 0;	///< Optional element.
/// Element reference "urn:ebay:apis:eBLBaseComponents:""urn:ebay:apis:eBLBaseComponents":StoreOwner.
    bool                                 StoreOwner                     1;	///< Required element.
/// Element "StoreURL" of XSD type xs:anyURI.
    xsd__anyURI*                         StoreURL                       0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief "urn:ebay:apis:eBLBaseComponents":FeeType is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   Definition of an eBay Fee type.
/// </BLOCKQUOTE></PRE>
/// class ns3__FeeType operations:
/// - ns3__FeeType* soap_new_ns3__FeeType(soap*) allocate and default initialize
/// - ns3__FeeType* soap_new_ns3__FeeType(soap*, int num) allocate array and default initialize values
/// - ns3__FeeType* soap_new_req_ns3__FeeType(soap*, ...) allocate, set required members
/// - ns3__FeeType* soap_new_set_ns3__FeeType(soap*, ...) allocate, set all public members
/// - ns3__FeeType::soap_default(soap*) default initialize members
/// - int soap_read_ns3__FeeType(soap*, ns3__FeeType*) deserialize from a stream
/// - int soap_write_ns3__FeeType(soap*, ns3__FeeType*) serialize to a stream
/// - ns3__FeeType* ns3__FeeType::soap_dup(soap*) returns deep copy of ns3__FeeType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns3__FeeType::soap_del() deep deletes ns3__FeeType data members, use only after ns3__FeeType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns3__FeeType
{ public:
/// Element "Name" of XSD type xs:string.
    std::string*                         Name                           0;	///< Optional element.
/// Element "Fee" of XSD type "urn:ebay:apis:CoreComponentTypes":AmountType.
    ns2__AmountType*                     Fee                            0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief "urn:ebay:apis:eBLBaseComponents":FeesType is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   Following are the current set of eBay fee types
///   AuctionLengthFee
///   BoldFee
///   BuyItNowFee
///   CategoryFeaturedFee
///   FeaturedFee
///   FeaturedGalleryFee
///   FixedPriceDurationFee
///   GalleryFee
///   GiftIconFee
///   HighLightFee
///   InsertionFee
///   ListingDesignerFee
///   ListingFee
///   PhotoDisplayFee
///   PhotoFee
///   ReserveFee
///   SchedulingFee
///   ThirtyDaysAucFee
///   Instances of this type could hold one or more supported types of fee.
/// </BLOCKQUOTE></PRE>
/// class ns3__FeesType operations:
/// - ns3__FeesType* soap_new_ns3__FeesType(soap*) allocate and default initialize
/// - ns3__FeesType* soap_new_ns3__FeesType(soap*, int num) allocate array and default initialize values
/// - ns3__FeesType* soap_new_req_ns3__FeesType(soap*, ...) allocate, set required members
/// - ns3__FeesType* soap_new_set_ns3__FeesType(soap*, ...) allocate, set all public members
/// - ns3__FeesType::soap_default(soap*) default initialize members
/// - int soap_read_ns3__FeesType(soap*, ns3__FeesType*) deserialize from a stream
/// - int soap_write_ns3__FeesType(soap*, ns3__FeesType*) serialize to a stream
/// - ns3__FeesType* ns3__FeesType::soap_dup(soap*) returns deep copy of ns3__FeesType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns3__FeesType::soap_del() deep deletes ns3__FeesType data members, use only after ns3__FeesType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns3__FeesType
{ public:
/// Vector of ns3__FeeType* of length 1..unbounded.
    std::vector<ns3__FeeType*          > Fee                            1;	///< Elements.
    struct soap                         *soap                          ;
};

/// @brief "urn:ebay:apis:eBLBaseComponents":ShippingCarrierDetailsType is a complexType.
///
/// class ns3__ShippingCarrierDetailsType operations:
/// - ns3__ShippingCarrierDetailsType* soap_new_ns3__ShippingCarrierDetailsType(soap*) allocate and default initialize
/// - ns3__ShippingCarrierDetailsType* soap_new_ns3__ShippingCarrierDetailsType(soap*, int num) allocate array and default initialize values
/// - ns3__ShippingCarrierDetailsType* soap_new_req_ns3__ShippingCarrierDetailsType(soap*, ...) allocate, set required members
/// - ns3__ShippingCarrierDetailsType* soap_new_set_ns3__ShippingCarrierDetailsType(soap*, ...) allocate, set all public members
/// - ns3__ShippingCarrierDetailsType::soap_default(soap*) default initialize members
/// - int soap_read_ns3__ShippingCarrierDetailsType(soap*, ns3__ShippingCarrierDetailsType*) deserialize from a stream
/// - int soap_write_ns3__ShippingCarrierDetailsType(soap*, ns3__ShippingCarrierDetailsType*) serialize to a stream
/// - ns3__ShippingCarrierDetailsType* ns3__ShippingCarrierDetailsType::soap_dup(soap*) returns deep copy of ns3__ShippingCarrierDetailsType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns3__ShippingCarrierDetailsType::soap_del() deep deletes ns3__ShippingCarrierDetailsType data members, use only after ns3__ShippingCarrierDetailsType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns3__ShippingCarrierDetailsType
{ public:
/// <PRE><BLOCKQUOTE>
///   Calculated cost of shipping, based on shipping parameters and selected shipping service. Only returned if ShippingType = 2
///   (i.e., calculated shipping rate).
/// </BLOCKQUOTE></PRE>
/// Element "CarrierShippingFee" of XSD type "urn:ebay:apis:CoreComponentTypes":AmountType.
    ns2__AmountType*                     CarrierShippingFee             0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Amount of insurance. Applicable if ShippingType is
///   Flat shipping rate orCalculated shipping rate.
/// </BLOCKQUOTE></PRE>
/// Element reference "urn:ebay:apis:eBLBaseComponents:""urn:ebay:apis:eBLBaseComponents":InsuranceFee.
    ns2__AmountType*                     InsuranceFee                   0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Indicates whether insurance fee is required. Possible values:
///   Insurance not offered.
///   Insurance optional.
///   Insurance required. Insurance included in Shipping and Handling costs.
///   Applicable if ShippingType is Flat shipping rate or Calculated shipping rate.
/// </BLOCKQUOTE></PRE>
/// Element reference "urn:ebay:apis:eBLBaseComponents:""urn:ebay:apis:eBLBaseComponents":InsuranceOption.
    enum ns3__InsuranceOptionCodeType*   InsuranceOption                0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Optional fees a seller might assess for the shipping of the item.
/// </BLOCKQUOTE></PRE>
/// Element "PackagingHandlingCosts" of XSD type "urn:ebay:apis:CoreComponentTypes":AmountType.
    ns2__AmountType*                     PackagingHandlingCosts         0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Describes any error message associated with the attempt to calculate shipping rates. If there was no error, returns "No Error" (without the quotation marks).
/// </BLOCKQUOTE></PRE>
/// Element "ShippingRateErrorMessage" of XSD type xs:string.
    std::string*                         ShippingRateErrorMessage       0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   is unique identified of shipping carrier, without this element the whole node makes no sence
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Shipping carrier for the item. Possible values are:
///   UPS Ground
///   UPS 3rd Day
///   UPS 2nd Day
///   UPS Next Day
///   USPS Priority
///   USPS Parcel
///   USPS Media
///   USPS First Class
/// </BLOCKQUOTE></PRE>
/// Element reference "urn:ebay:apis:eBLBaseComponents:""urn:ebay:apis:eBLBaseComponents":ShippingService.
    enum ns3__ShippingServiceCodeType    ShippingService                1;	///< Required element.
    struct soap                         *soap                          ;
};

/// @brief "urn:ebay:apis:eBLBaseComponents":CalculatedShippingRateType is a complexType.
///
/// class ns3__CalculatedShippingRateType operations:
/// - ns3__CalculatedShippingRateType* soap_new_ns3__CalculatedShippingRateType(soap*) allocate and default initialize
/// - ns3__CalculatedShippingRateType* soap_new_ns3__CalculatedShippingRateType(soap*, int num) allocate array and default initialize values
/// - ns3__CalculatedShippingRateType* soap_new_req_ns3__CalculatedShippingRateType(soap*, ...) allocate, set required members
/// - ns3__CalculatedShippingRateType* soap_new_set_ns3__CalculatedShippingRateType(soap*, ...) allocate, set all public members
/// - ns3__CalculatedShippingRateType::soap_default(soap*) default initialize members
/// - int soap_read_ns3__CalculatedShippingRateType(soap*, ns3__CalculatedShippingRateType*) deserialize from a stream
/// - int soap_write_ns3__CalculatedShippingRateType(soap*, ns3__CalculatedShippingRateType*) serialize to a stream
/// - ns3__CalculatedShippingRateType* ns3__CalculatedShippingRateType::soap_dup(soap*) returns deep copy of ns3__CalculatedShippingRateType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns3__CalculatedShippingRateType::soap_del() deep deletes ns3__CalculatedShippingRateType data members, use only after ns3__CalculatedShippingRateType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns3__CalculatedShippingRateType
{ public:
/// <PRE><BLOCKQUOTE>
///   Potal/zip code from where package will be shipped.
/// </BLOCKQUOTE></PRE>
/// Element "OriginatingPostalCode" of XSD type xs:string.
    std::string*                         OriginatingPostalCode          0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Indicates an item that cannot go through the stamping machine at the shipping service office (a value of True) and requires special or fragile handling. Only returned if ShippingType = 2.
/// </BLOCKQUOTE></PRE>
/// Element "ShippingIrregular" of XSD type xs:boolean.
    bool*                                ShippingIrregular              0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   contains information about shipping fees per each shipping service chosen by the seller
/// </BLOCKQUOTE></PRE>
/// Vector of ns3__ShippingCarrierDetailsType* of length 0..unbounded.
    std::vector<ns3__ShippingCarrierDetailsType*> CarrierDetails                 0;	///< Elements.
/// <PRE><BLOCKQUOTE>
///   May need to be moved into details - wait for George! The size of the package to be shipped. Possible values are:
///   None
///   Letter
///   Large envelope
///   USPS flat rate envelope
///   Package/thick envelope
///   USPS large package/oversize 1
///   Very large package/oversize 2
///   UPS Letter
/// </BLOCKQUOTE></PRE>
/// Element "ShippingPackage" of XSD type "urn:ebay:apis:eBLBaseComponents":ShippingPackageCodeType.
    enum ns3__ShippingPackageCodeType*   ShippingPackage                0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Shipping weight unit of measure (major). If unit of weight is kilogram (i.e., metric system) this would be the exact weight value in kilogram (i.e., complete decimal number, e.g., 2.23 kg). Only returned if ShippingType is 2.
/// </BLOCKQUOTE></PRE>
/// Element "WeightMajor" of XSD type "urn:ebay:apis:CoreComponentTypes":MeasureType.
    ns2__MeasureType*                    WeightMajor                    0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Shipping weight unit of measure (minor). If unit of weight is in pounds and/or
///   ounces, this would be the exact weight value in ounces (i.e., complete decimal number, e.g., 8.2 or 8.0 ounces). Only returned if ShippingType is 2.
/// </BLOCKQUOTE></PRE>
/// Element "WeightMinor" of XSD type "urn:ebay:apis:CoreComponentTypes":MeasureType.
    ns2__MeasureType*                    WeightMinor                    0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief "urn:ebay:apis:eBLBaseComponents":FlatShippingRateType is a complexType.
///
/// class ns3__FlatShippingRateType operations:
/// - ns3__FlatShippingRateType* soap_new_ns3__FlatShippingRateType(soap*) allocate and default initialize
/// - ns3__FlatShippingRateType* soap_new_ns3__FlatShippingRateType(soap*, int num) allocate array and default initialize values
/// - ns3__FlatShippingRateType* soap_new_req_ns3__FlatShippingRateType(soap*, ...) allocate, set required members
/// - ns3__FlatShippingRateType* soap_new_set_ns3__FlatShippingRateType(soap*, ...) allocate, set all public members
/// - ns3__FlatShippingRateType::soap_default(soap*) default initialize members
/// - int soap_read_ns3__FlatShippingRateType(soap*, ns3__FlatShippingRateType*) deserialize from a stream
/// - int soap_write_ns3__FlatShippingRateType(soap*, ns3__FlatShippingRateType*) serialize to a stream
/// - ns3__FlatShippingRateType* ns3__FlatShippingRateType::soap_dup(soap*) returns deep copy of ns3__FlatShippingRateType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns3__FlatShippingRateType::soap_del() deep deletes ns3__FlatShippingRateType data members, use only after ns3__FlatShippingRateType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns3__FlatShippingRateType
{ public:
/// <PRE><BLOCKQUOTE>
///   Any additional shipping costs for the item.
/// </BLOCKQUOTE></PRE>
/// Element "AdditionalShippingCosts" of XSD type "urn:ebay:apis:CoreComponentTypes":AmountType.
    ns2__AmountType*                     AdditionalShippingCosts        0;	///< Optional element.
/// Element "FlatShippingHandlingCosts" of XSD type "urn:ebay:apis:CoreComponentTypes":AmountType.
    ns2__AmountType*                     FlatShippingHandlingCosts      0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Amount of insurance. Applicable if ShippingType is
///   Flat shipping rate orCalculated shipping rate.
/// </BLOCKQUOTE></PRE>
/// Element reference "urn:ebay:apis:eBLBaseComponents:""urn:ebay:apis:eBLBaseComponents":InsuranceFee.
    ns2__AmountType*                     InsuranceFee                   0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Indicates whether insurance fee is required. Possible values:
///   Insurance not offered.
///   Insurance optional.
///   Insurance required. Insurance included in Shipping and Handling costs.
///   Applicable if ShippingType is Flat shipping rate or Calculated shipping rate.
/// </BLOCKQUOTE></PRE>
/// Element reference "urn:ebay:apis:eBLBaseComponents:""urn:ebay:apis:eBLBaseComponents":InsuranceOption.
    enum ns3__InsuranceOptionCodeType*   InsuranceOption                0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Shipping carrier for the item. Possible values are:
///   UPS Ground
///   UPS 3rd Day
///   UPS 2nd Day
///   UPS Next Day
///   USPS Priority
///   USPS Parcel
///   USPS Media
///   USPS First Class
/// </BLOCKQUOTE></PRE>
/// Element reference "urn:ebay:apis:eBLBaseComponents:""urn:ebay:apis:eBLBaseComponents":ShippingService.
    enum ns3__ShippingServiceCodeType*   ShippingService                0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief "urn:ebay:apis:eBLBaseComponents":SalesTaxType is a complexType.
///
/// class ns3__SalesTaxType operations:
/// - ns3__SalesTaxType* soap_new_ns3__SalesTaxType(soap*) allocate and default initialize
/// - ns3__SalesTaxType* soap_new_ns3__SalesTaxType(soap*, int num) allocate array and default initialize values
/// - ns3__SalesTaxType* soap_new_req_ns3__SalesTaxType(soap*, ...) allocate, set required members
/// - ns3__SalesTaxType* soap_new_set_ns3__SalesTaxType(soap*, ...) allocate, set all public members
/// - ns3__SalesTaxType::soap_default(soap*) default initialize members
/// - int soap_read_ns3__SalesTaxType(soap*, ns3__SalesTaxType*) deserialize from a stream
/// - int soap_write_ns3__SalesTaxType(soap*, ns3__SalesTaxType*) serialize to a stream
/// - ns3__SalesTaxType* ns3__SalesTaxType::soap_dup(soap*) returns deep copy of ns3__SalesTaxType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns3__SalesTaxType::soap_del() deep deletes ns3__SalesTaxType data members, use only after ns3__SalesTaxType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns3__SalesTaxType
{ public:
/// <PRE><BLOCKQUOTE>
///   Amount of the sales tax to be collected for the transaction. Sales tax is only for US.
/// </BLOCKQUOTE></PRE>
/// Element "SalesTaxPercent" of XSD type xs:float.
    float*                               SalesTaxPercent                0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Sales tax for the transaction, expressed as a percentage. Should be empty for items listed on international sites (hence, this is US-only element).
/// </BLOCKQUOTE></PRE>
/// Element "SalesTaxState" of XSD type xs:string.
    std::string*                         SalesTaxState                  0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Indicates whether shipping is included in the tax. Applicable if ShippingType = 1 or 2. This element is used for US-only.
/// </BLOCKQUOTE></PRE>
/// Element "ShippingIncludedInTax" of XSD type xs:boolean.
    bool*                                ShippingIncludedInTax          0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief "urn:ebay:apis:eBLBaseComponents":ShippingDetailsType is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   Specifies the shipping payment details.
/// </BLOCKQUOTE></PRE>
/// class ns3__ShippingDetailsType operations:
/// - ns3__ShippingDetailsType* soap_new_ns3__ShippingDetailsType(soap*) allocate and default initialize
/// - ns3__ShippingDetailsType* soap_new_ns3__ShippingDetailsType(soap*, int num) allocate array and default initialize values
/// - ns3__ShippingDetailsType* soap_new_req_ns3__ShippingDetailsType(soap*, ...) allocate, set required members
/// - ns3__ShippingDetailsType* soap_new_set_ns3__ShippingDetailsType(soap*, ...) allocate, set all public members
/// - ns3__ShippingDetailsType::soap_default(soap*) default initialize members
/// - int soap_read_ns3__ShippingDetailsType(soap*, ns3__ShippingDetailsType*) deserialize from a stream
/// - int soap_write_ns3__ShippingDetailsType(soap*, ns3__ShippingDetailsType*) serialize to a stream
/// - ns3__ShippingDetailsType* ns3__ShippingDetailsType::soap_dup(soap*) returns deep copy of ns3__ShippingDetailsType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns3__ShippingDetailsType::soap_del() deep deletes ns3__ShippingDetailsType data members, use only after ns3__ShippingDetailsType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns3__ShippingDetailsType
{ public:
/// <PRE><BLOCKQUOTE>
///   Indicates whether the buyer edited the payment amount.
/// </BLOCKQUOTE></PRE>
/// Element "AllowPaymentEdit" of XSD type xs:boolean.
    bool*                                AllowPaymentEdit               0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Calculated shipping rate details. If present, then the calculated shipping rate option was used.
/// </BLOCKQUOTE></PRE>
/// Element "CalculatedShippingRate" of XSD type "urn:ebay:apis:eBLBaseComponents":CalculatedShippingRateType.
    ns3__CalculatedShippingRateType*     CalculatedShippingRate         0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Indicates whether the payment instructions are included (e.g., for updating the
///   details of a transaction).
/// </BLOCKQUOTE></PRE>
/// Element "ChangePaymentInstructions" of XSD type xs:boolean.
    bool*                                ChangePaymentInstructions      0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Flat shipping rate details. If present, then the flat shipping rate option was used.
/// </BLOCKQUOTE></PRE>
/// Vector of ns3__FlatShippingRateType* of length 0..unbounded.
    std::vector<ns3__FlatShippingRateType*> FlatShippingRate               0;	///< Elements.
/// <PRE><BLOCKQUOTE>
///   Total cost of insurance for the transaction.
/// </BLOCKQUOTE></PRE>
/// Element "InsuranceTotal" of XSD type "urn:ebay:apis:CoreComponentTypes":AmountType.
    ns2__AmountType*                     InsuranceTotal                 0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Indicates whether buyer selected to have insurance.
/// </BLOCKQUOTE></PRE>
/// Element "InsuranceWanted" of XSD type xs:boolean.
    bool*                                InsuranceWanted                0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Payment instuctions.
/// </BLOCKQUOTE></PRE>
/// Element "PaymentInstructions" of XSD type xs:string.
    std::string*                         PaymentInstructions            0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Sales tax details. Sales tax applicable for only US sites.
///   For non-US sites this sub-element should not be used.
/// </BLOCKQUOTE></PRE>
/// Element "SalesTax" of XSD type "urn:ebay:apis:eBLBaseComponents":SalesTaxType.
    ns3__SalesTaxType*                   SalesTax                       0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Postal/Zip code from where the seller will ship the item.
/// </BLOCKQUOTE></PRE>
/// Element "SellerPostalCode" of XSD type xs:string.
    std::string*                         SellerPostalCode               0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief "urn:ebay:apis:eBLBaseComponents":SiteHostedPictureType is a complexType.
///
/// class ns3__SiteHostedPictureType operations:
/// - ns3__SiteHostedPictureType* soap_new_ns3__SiteHostedPictureType(soap*) allocate and default initialize
/// - ns3__SiteHostedPictureType* soap_new_ns3__SiteHostedPictureType(soap*, int num) allocate array and default initialize values
/// - ns3__SiteHostedPictureType* soap_new_req_ns3__SiteHostedPictureType(soap*, ...) allocate, set required members
/// - ns3__SiteHostedPictureType* soap_new_set_ns3__SiteHostedPictureType(soap*, ...) allocate, set all public members
/// - ns3__SiteHostedPictureType::soap_default(soap*) default initialize members
/// - int soap_read_ns3__SiteHostedPictureType(soap*, ns3__SiteHostedPictureType*) deserialize from a stream
/// - int soap_write_ns3__SiteHostedPictureType(soap*, ns3__SiteHostedPictureType*) serialize to a stream
/// - ns3__SiteHostedPictureType* ns3__SiteHostedPictureType::soap_dup(soap*) returns deep copy of ns3__SiteHostedPictureType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns3__SiteHostedPictureType::soap_del() deep deletes ns3__SiteHostedPictureType data members, use only after ns3__SiteHostedPictureType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns3__SiteHostedPictureType
{ public:
/// <PRE><BLOCKQUOTE>
///   URLs for item picture that are stored/hosted at eBay site.
/// </BLOCKQUOTE></PRE>
/// Vector of xsd__anyURI of length 0..6.
    std::vector<xsd__anyURI            > PictureURL                     0:6;	///< Elements.
/// <PRE><BLOCKQUOTE>
///   Type of display for photos used for PhotoHosting slide show. Here are display options:
///   None = No special Picture Services features.
///   SlideShow = Slideshow of multiple pictures.
///   SuperSize = Super-size format picture.
///   PicturePack = Picture Pack.
///   Default is 'None'.
/// </BLOCKQUOTE></PRE>
/// Element "PhotoDisplay" of XSD type "urn:ebay:apis:eBLBaseComponents":PhotoDisplayCodeType.
    enum ns3__PhotoDisplayCodeType*      PhotoDisplay                   0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   This will be either "Featured" or "Gallery".
/// </BLOCKQUOTE></PRE>
/// Element "GalleryType" of XSD type "urn:ebay:apis:eBLBaseComponents":GalleryTypeCodeType.
    enum ns3__GalleryTypeCodeType*       GalleryType                    0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief "urn:ebay:apis:eBLBaseComponents":VendorHostedPictureType is a complexType.
///
/// class ns3__VendorHostedPictureType operations:
/// - ns3__VendorHostedPictureType* soap_new_ns3__VendorHostedPictureType(soap*) allocate and default initialize
/// - ns3__VendorHostedPictureType* soap_new_ns3__VendorHostedPictureType(soap*, int num) allocate array and default initialize values
/// - ns3__VendorHostedPictureType* soap_new_req_ns3__VendorHostedPictureType(soap*, ...) allocate, set required members
/// - ns3__VendorHostedPictureType* soap_new_set_ns3__VendorHostedPictureType(soap*, ...) allocate, set all public members
/// - ns3__VendorHostedPictureType::soap_default(soap*) default initialize members
/// - int soap_read_ns3__VendorHostedPictureType(soap*, ns3__VendorHostedPictureType*) deserialize from a stream
/// - int soap_write_ns3__VendorHostedPictureType(soap*, ns3__VendorHostedPictureType*) serialize to a stream
/// - ns3__VendorHostedPictureType* ns3__VendorHostedPictureType::soap_dup(soap*) returns deep copy of ns3__VendorHostedPictureType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns3__VendorHostedPictureType::soap_del() deep deletes ns3__VendorHostedPictureType data members, use only after ns3__VendorHostedPictureType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns3__VendorHostedPictureType
{ public:
/// <PRE><BLOCKQUOTE>
///   URLs for item picture that are stored/hosted at eBay site.
/// </BLOCKQUOTE></PRE>
/// Element "PictureURL" of XSD type xs:anyURI.
    xsd__anyURI*                         PictureURL                     0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   URL for a picture for the gallery. If the GalleryFeatured argument is true, a value must be supplied for either the GalleryURL or the PictureURL argument. In either case:
///   (a) If a URL is provided for only PictureURL, it is used as the Gallery thumbnail. (b) If a URL is provided for both GalleryURL and PictureURL, then the picture indicated in GalleryURL is used as the thumbnail. The image used for the Gallery thumbnail (specified in the GalleryURL or PictureURL argument) must be in one of the graphics formats JPEG, BMP, TIF, or GIF.
/// </BLOCKQUOTE></PRE>
/// Element "GalleryURL" of XSD type xs:anyURI.
    xsd__anyURI*                         GalleryURL                     0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   This will be either "Featured" or "Gallery".
/// </BLOCKQUOTE></PRE>
/// Element "GalleryType" of XSD type "urn:ebay:apis:eBLBaseComponents":GalleryTypeCodeType.
    enum ns3__GalleryTypeCodeType*       GalleryType                    0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief "urn:ebay:apis:eBLBaseComponents":ValType is a complexType.
///
/// class ns3__ValType operations:
/// - ns3__ValType* soap_new_ns3__ValType(soap*) allocate and default initialize
/// - ns3__ValType* soap_new_ns3__ValType(soap*, int num) allocate array and default initialize values
/// - ns3__ValType* soap_new_req_ns3__ValType(soap*, ...) allocate, set required members
/// - ns3__ValType* soap_new_set_ns3__ValType(soap*, ...) allocate, set all public members
/// - ns3__ValType::soap_default(soap*) default initialize members
/// - int soap_read_ns3__ValType(soap*, ns3__ValType*) deserialize from a stream
/// - int soap_write_ns3__ValType(soap*, ns3__ValType*) serialize to a stream
/// - ns3__ValType* ns3__ValType::soap_dup(soap*) returns deep copy of ns3__ValType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns3__ValType::soap_del() deep deletes ns3__ValType data members, use only after ns3__ValType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns3__ValType
{ public:
/// Element "ValueLiteral" of XSD type xs:string.
    std::string                          ValueLiteral                   1;	///< Required element.
/// Attribute "ValueID" of XSD type xs:string.
   @std::string*                         ValueID                        0;	///< Optional attribute.
    struct soap                         *soap                          ;
};

/// @brief "urn:ebay:apis:eBLBaseComponents":AttributeType is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   Specific physical attribute of an item.
/// </BLOCKQUOTE></PRE>
/// class ns3__AttributeType operations:
/// - ns3__AttributeType* soap_new_ns3__AttributeType(soap*) allocate and default initialize
/// - ns3__AttributeType* soap_new_ns3__AttributeType(soap*, int num) allocate array and default initialize values
/// - ns3__AttributeType* soap_new_req_ns3__AttributeType(soap*, ...) allocate, set required members
/// - ns3__AttributeType* soap_new_set_ns3__AttributeType(soap*, ...) allocate, set all public members
/// - ns3__AttributeType::soap_default(soap*) default initialize members
/// - int soap_read_ns3__AttributeType(soap*, ns3__AttributeType*) deserialize from a stream
/// - int soap_write_ns3__AttributeType(soap*, ns3__AttributeType*) serialize to a stream
/// - ns3__AttributeType* ns3__AttributeType::soap_dup(soap*) returns deep copy of ns3__AttributeType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns3__AttributeType::soap_del() deep deletes ns3__AttributeType data members, use only after ns3__AttributeType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns3__AttributeType
{ public:
/// <PRE><BLOCKQUOTE>
///   ValueList of the Attribute being described by the AttributeID.
/// </BLOCKQUOTE></PRE>
/// Vector of ns3__ValType* of length 1..unbounded.
    std::vector<ns3__ValType*          > Value                          1;	///< Elements.
/// <PRE><BLOCKQUOTE>
///   Constant name of the attribute that identifies a physical attribute within a set of characteristics that describe something in a formalised way.
/// </BLOCKQUOTE></PRE>
/// Attribute "AttributeID" of XSD type xs:string.
   @std::string*                         AttributeID                    0;	///< Optional attribute.
    struct soap                         *soap                          ;
};

/// @brief "urn:ebay:apis:eBLBaseComponents":AttributeSetType is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   AttributeSet.
/// </BLOCKQUOTE></PRE>
/// class ns3__AttributeSetType operations:
/// - ns3__AttributeSetType* soap_new_ns3__AttributeSetType(soap*) allocate and default initialize
/// - ns3__AttributeSetType* soap_new_ns3__AttributeSetType(soap*, int num) allocate array and default initialize values
/// - ns3__AttributeSetType* soap_new_req_ns3__AttributeSetType(soap*, ...) allocate, set required members
/// - ns3__AttributeSetType* soap_new_set_ns3__AttributeSetType(soap*, ...) allocate, set all public members
/// - ns3__AttributeSetType::soap_default(soap*) default initialize members
/// - int soap_read_ns3__AttributeSetType(soap*, ns3__AttributeSetType*) deserialize from a stream
/// - int soap_write_ns3__AttributeSetType(soap*, ns3__AttributeSetType*) serialize to a stream
/// - ns3__AttributeSetType* ns3__AttributeSetType::soap_dup(soap*) returns deep copy of ns3__AttributeSetType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns3__AttributeSetType::soap_del() deep deletes ns3__AttributeSetType data members, use only after ns3__AttributeSetType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns3__AttributeSetType
{ public:
/// Vector of ns3__AttributeType* of length 1..unbounded.
    std::vector<ns3__AttributeType*    > Attribute                      1;	///< Elements.
/// Attribute "AttributeSetID" of XSD type xs:string.
   @std::string*                         AttributeSetID                 0;	///< Optional attribute.
    struct soap                         *soap                          ;
};

/// @brief "urn:ebay:apis:eBLBaseComponents":ListOfAttributeSetType is a complexType.
///
/// class ns3__ListOfAttributeSetType operations:
/// - ns3__ListOfAttributeSetType* soap_new_ns3__ListOfAttributeSetType(soap*) allocate and default initialize
/// - ns3__ListOfAttributeSetType* soap_new_ns3__ListOfAttributeSetType(soap*, int num) allocate array and default initialize values
/// - ns3__ListOfAttributeSetType* soap_new_req_ns3__ListOfAttributeSetType(soap*, ...) allocate, set required members
/// - ns3__ListOfAttributeSetType* soap_new_set_ns3__ListOfAttributeSetType(soap*, ...) allocate, set all public members
/// - ns3__ListOfAttributeSetType::soap_default(soap*) default initialize members
/// - int soap_read_ns3__ListOfAttributeSetType(soap*, ns3__ListOfAttributeSetType*) deserialize from a stream
/// - int soap_write_ns3__ListOfAttributeSetType(soap*, ns3__ListOfAttributeSetType*) serialize to a stream
/// - ns3__ListOfAttributeSetType* ns3__ListOfAttributeSetType::soap_dup(soap*) returns deep copy of ns3__ListOfAttributeSetType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns3__ListOfAttributeSetType::soap_del() deep deletes ns3__ListOfAttributeSetType data members, use only after ns3__ListOfAttributeSetType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns3__ListOfAttributeSetType
{ public:
/// Vector of ns3__AttributeSetType* of length 1..unbounded.
    std::vector<ns3__AttributeSetType* > AttributeSet                   1;	///< Elements.
    struct soap                         *soap                          ;
};

/// @brief "urn:ebay:apis:eBLBaseComponents":CategoryType is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   Container for data on the primary category of listing.
/// </BLOCKQUOTE></PRE>
/// class ns3__CategoryType operations:
/// - ns3__CategoryType* soap_new_ns3__CategoryType(soap*) allocate and default initialize
/// - ns3__CategoryType* soap_new_ns3__CategoryType(soap*, int num) allocate array and default initialize values
/// - ns3__CategoryType* soap_new_req_ns3__CategoryType(soap*, ...) allocate, set required members
/// - ns3__CategoryType* soap_new_set_ns3__CategoryType(soap*, ...) allocate, set all public members
/// - ns3__CategoryType::soap_default(soap*) default initialize members
/// - int soap_read_ns3__CategoryType(soap*, ns3__CategoryType*) deserialize from a stream
/// - int soap_write_ns3__CategoryType(soap*, ns3__CategoryType*) serialize to a stream
/// - ns3__CategoryType* ns3__CategoryType::soap_dup(soap*) returns deep copy of ns3__CategoryType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns3__CategoryType::soap_del() deep deletes ns3__CategoryType data members, use only after ns3__CategoryType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns3__CategoryType
{ public:
/// Element "AutoPayEnabled" of XSD type xs:boolean.
    bool*                                AutoPayEnabled                 0;	///< Optional element.
/// Element "B2BVATEnabled" of XSD type xs:boolean.
    bool*                                B2BVATEnabled                  0;	///< Optional element.
/// Element "CatalogEnabled" of XSD type xs:boolean.
    bool*                                CatalogEnabled                 0;	///< Optional element.
/// Element "CategoryID" of XSD type xs:string.
    std::string                          CategoryID                     1;	///< Required element.
/// Element "CategoryLevel" of XSD type xs:int.
    int*                                 CategoryLevel                  0;	///< Optional element.
/// Element "CategoryName" of XSD type xs:string.
    std::string*                         CategoryName                   0;	///< Optional element.
/// Vector of std::string of length 0..unbounded.
    std::vector<std::string            > CategoryParentID               0;	///< Elements.
/// Vector of std::string of length 0..unbounded.
    std::vector<std::string            > CategoryParentName             0;	///< Elements.
/// <PRE><BLOCKQUOTE>
///   CSIDList is not present if Attributes enabled.
/// </BLOCKQUOTE></PRE>
/// Vector of std::string of length 0..unbounded.
    std::vector<std::string            > CSIDList                       0;	///< Elements.
/// Element "Expired" of XSD type xs:boolean.
    bool*                                Expired                        0;	///< Optional element.
/// Element "IntlAutosFixedCat" of XSD type xs:boolean.
    bool*                                IntlAutosFixedCat              0;	///< Optional element.
/// Element "LeafCategory" of XSD type xs:boolean.
    bool*                                LeafCategory                   0;	///< Optional element.
/// Element "Virtual" of XSD type xs:boolean.
    bool*                                Virtual                        0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief "urn:ebay:apis:eBLBaseComponents":StorefrontType is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   Contains the eBay Stores-specific item attributes department number and store location. StorefrontInfo is shown for any item that belongs to an eBay Store owner, regardless of whether it is fixed price or auction type. Returned as null for international fixed price items.
/// </BLOCKQUOTE></PRE>
/// class ns3__StorefrontType operations:
/// - ns3__StorefrontType* soap_new_ns3__StorefrontType(soap*) allocate and default initialize
/// - ns3__StorefrontType* soap_new_ns3__StorefrontType(soap*, int num) allocate array and default initialize values
/// - ns3__StorefrontType* soap_new_req_ns3__StorefrontType(soap*, ...) allocate, set required members
/// - ns3__StorefrontType* soap_new_set_ns3__StorefrontType(soap*, ...) allocate, set all public members
/// - ns3__StorefrontType::soap_default(soap*) default initialize members
/// - int soap_read_ns3__StorefrontType(soap*, ns3__StorefrontType*) deserialize from a stream
/// - int soap_write_ns3__StorefrontType(soap*, ns3__StorefrontType*) serialize to a stream
/// - ns3__StorefrontType* ns3__StorefrontType::soap_dup(soap*) returns deep copy of ns3__StorefrontType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns3__StorefrontType::soap_del() deep deletes ns3__StorefrontType data members, use only after ns3__StorefrontType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns3__StorefrontType
{ public:
/// <PRE><BLOCKQUOTE>
///   assumed this type is specific to add/get/revise item, then each StorefrontType nust have category id, for store details this node makes no sense to use
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Custom categories for subdividing the items within an eBay Store. Store owners can create up to 12 custom categories for their stores. (One Store category cannot be customized and retains the value of "Other") If specified, must be number between 0 and 12.
///   0=Not an eBay Store item
///   1=Other
///   2=Category 1
///   3=Category 2
///   ...
///   11=Category 10
///   12=Category 11
///   Returned as null for international fixed priced item.
/// </BLOCKQUOTE></PRE>
/// Element reference "urn:ebay:apis:eBLBaseComponents:""urn:ebay:apis:eBLBaseComponents":StoreCategoryID.
    int                                  StoreCategoryID                1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   in case or revise item for example - to change store category (department) you do not need to change store URL, so it will notbe in request
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   URL pointing to the seller's eBay Store page. Returned as null for International Fixed Price items. This URL follows the format below, where "####" is replaced by the seller's eBay Stores ID (that uniquely identifies the eBay Store).
///   http://www.ebaystores.com/id=####
/// </BLOCKQUOTE></PRE>
/// Element reference "urn:ebay:apis:eBLBaseComponents:""urn:ebay:apis:eBLBaseComponents":StoreURL.
    xsd__anyURI*                         StoreURL                       0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief "urn:ebay:apis:eBLBaseComponents":ListingDesignerType is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   Identifies the Layout and the Theme template associated with the item. in case of revision - all data can be min occur = 0
/// </BLOCKQUOTE></PRE>
/// class ns3__ListingDesignerType operations:
/// - ns3__ListingDesignerType* soap_new_ns3__ListingDesignerType(soap*) allocate and default initialize
/// - ns3__ListingDesignerType* soap_new_ns3__ListingDesignerType(soap*, int num) allocate array and default initialize values
/// - ns3__ListingDesignerType* soap_new_req_ns3__ListingDesignerType(soap*, ...) allocate, set required members
/// - ns3__ListingDesignerType* soap_new_set_ns3__ListingDesignerType(soap*, ...) allocate, set all public members
/// - ns3__ListingDesignerType::soap_default(soap*) default initialize members
/// - int soap_read_ns3__ListingDesignerType(soap*, ns3__ListingDesignerType*) deserialize from a stream
/// - int soap_write_ns3__ListingDesignerType(soap*, ns3__ListingDesignerType*) serialize to a stream
/// - ns3__ListingDesignerType* ns3__ListingDesignerType::soap_dup(soap*) returns deep copy of ns3__ListingDesignerType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns3__ListingDesignerType::soap_del() deep deletes ns3__ListingDesignerType data members, use only after ns3__ListingDesignerType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns3__ListingDesignerType
{ public:
/// <PRE><BLOCKQUOTE>
///   Identifies the Layout template associated with the item.
/// </BLOCKQUOTE></PRE>
/// Element "LayoutID" of XSD type xs:int.
    int*                                 LayoutID                       0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   A value of true for OptimalPictureSize indicates that the picture URL will be enlarged to fit description of the item.
/// </BLOCKQUOTE></PRE>
/// Element "OptimalPictureSize" of XSD type xs:boolean.
    bool*                                OptimalPictureSize             0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Identifies the Theme template associated with the item.
/// </BLOCKQUOTE></PRE>
/// Element "ThemeID" of XSD type xs:int.
    int*                                 ThemeID                        0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief "urn:ebay:apis:eBLBaseComponents":CharityType is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   Contains information about a Charity listing.in case of revision - all data can be min occur = 0
/// </BLOCKQUOTE></PRE>
/// class ns3__CharityType operations:
/// - ns3__CharityType* soap_new_ns3__CharityType(soap*) allocate and default initialize
/// - ns3__CharityType* soap_new_ns3__CharityType(soap*, int num) allocate array and default initialize values
/// - ns3__CharityType* soap_new_req_ns3__CharityType(soap*, ...) allocate, set required members
/// - ns3__CharityType* soap_new_set_ns3__CharityType(soap*, ...) allocate, set all public members
/// - ns3__CharityType::soap_default(soap*) default initialize members
/// - int soap_read_ns3__CharityType(soap*, ns3__CharityType*) deserialize from a stream
/// - int soap_write_ns3__CharityType(soap*, ns3__CharityType*) serialize to a stream
/// - ns3__CharityType* ns3__CharityType::soap_dup(soap*) returns deep copy of ns3__CharityType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns3__CharityType::soap_del() deep deletes ns3__CharityType data members, use only after ns3__CharityType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns3__CharityType
{ public:
/// Element "CharityName" of XSD type xs:string.
    std::string*                         CharityName                    0;	///< Optional element.
/// Element "CharityNumber" of XSD type xs:int.
    int*                                 CharityNumber                  0;	///< Optional element.
/// Element "DonationPercent" of XSD type xs:float.
    float*                               DonationPercent                0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief "urn:ebay:apis:eBLBaseComponents":SellingStatusType is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   Contains the listed items price details which consists of
///   following information: BuyItNowPrice, ConvertedBuyItNowPrice,
///   ConvertedPrice, ConvertedStartPrice, CurrentPrice, MinimumToBid, ReservePrice, and StartPrice. need to take in account get seller events when defining minoccurs = 0
/// </BLOCKQUOTE></PRE>
/// class ns3__SellingStatusType operations:
/// - ns3__SellingStatusType* soap_new_ns3__SellingStatusType(soap*) allocate and default initialize
/// - ns3__SellingStatusType* soap_new_ns3__SellingStatusType(soap*, int num) allocate array and default initialize values
/// - ns3__SellingStatusType* soap_new_req_ns3__SellingStatusType(soap*, ...) allocate, set required members
/// - ns3__SellingStatusType* soap_new_set_ns3__SellingStatusType(soap*, ...) allocate, set all public members
/// - ns3__SellingStatusType::soap_default(soap*) default initialize members
/// - int soap_read_ns3__SellingStatusType(soap*, ns3__SellingStatusType*) deserialize from a stream
/// - int soap_write_ns3__SellingStatusType(soap*, ns3__SellingStatusType*) serialize to a stream
/// - ns3__SellingStatusType* ns3__SellingStatusType::soap_dup(soap*) returns deep copy of ns3__SellingStatusType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns3__SellingStatusType::soap_del() deep deletes ns3__SellingStatusType data members, use only after ns3__SellingStatusType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns3__SellingStatusType
{ public:
/// <PRE><BLOCKQUOTE>
///   Number of bids placed so far against the item. Not
///   returned for International Fixed Price items.
/// </BLOCKQUOTE></PRE>
/// Element "BidCount" of XSD type xs:int.
    int*                                 BidCount                       0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Smallest amount a bid must be above the current high bid. Not returned International Fixed Price items.
/// </BLOCKQUOTE></PRE>
/// Element "BidIncrement" of XSD type "urn:ebay:apis:CoreComponentTypes":AmountType.
    ns2__AmountType*                     BidIncrement                   0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Converted current price of listed item.
/// </BLOCKQUOTE></PRE>
/// Element "ConvertedCurrentPrice" of XSD type "urn:ebay:apis:CoreComponentTypes":AmountType.
    ns2__AmountType*                     ConvertedCurrentPrice          0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   For auction-format listings, current minimum asking price or the current highest bid for the item if bids have been placed. Shows minimum bid if no bids have been placed against the item. This field does not reflect the actual current price of the item if it's a Type=7 or Type=9 (Fixed Price) item and the price has been revised. (See StartPrice for revised asking price.)
/// </BLOCKQUOTE></PRE>
/// Element "CurrentPrice" of XSD type "urn:ebay:apis:CoreComponentTypes":AmountType.
    ns2__AmountType*                     CurrentPrice                   1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Contains one User node representing the current high bidder. GetItem returns a high bidder for auctions that have ended and have a winning bidder. For Fixed Price listings, in-progress auctions, or auction items that received no bids, GetItem returns a HighBidder node with empty tags.
/// </BLOCKQUOTE></PRE>
/// Element reference "urn:ebay:apis:eBLBaseComponents:""urn:ebay:apis:eBLBaseComponents":HighBidder.
    ns3__UserType*                       HighBidder                     0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Applicable to ad-format items only. Indicates how many leads to potential buyers are associated with this item. For other item types (other than ad-format items), returns
///   a value of 0 (zero).
/// </BLOCKQUOTE></PRE>
/// Element "LeadCount" of XSD type xs:int.
    int*                                 LeadCount                      0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Minimum acceptable bid for the item. Not returned for International Fixed Price items.
/// </BLOCKQUOTE></PRE>
/// Element "MinimumToBid" of XSD type "urn:ebay:apis:CoreComponentTypes":AmountType.
    ns2__AmountType*                     MinimumToBid                   0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Number of items purchased so far. (Subtract from the value
///   returned in the Quantity field to calculate the number of items
///   remaining.)
/// </BLOCKQUOTE></PRE>
/// Element "QuantitySold" of XSD type xs:int.
    int                                  QuantitySold                   1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Returns true if the reserve price was met or no reserve
///   price was specified.
/// </BLOCKQUOTE></PRE>
/// Element "ReserveMet" of XSD type xs:boolean.
    bool*                                ReserveMet                     0;	///< Optional element.
/// Element "SecondChanceEligible" of XSD type xs:boolean.
    bool*                                SecondChanceEligible           0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief "urn:ebay:apis:eBLBaseComponents":ReviseStatusType is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   Contains the revise status information details (e.g., item properties information). ths node contains system set data only - always output and always all data. no minccurs needed,
///   except for motors specific data, since it wil lnot be retruned for non motors items
/// </BLOCKQUOTE></PRE>
/// class ns3__ReviseStatusType operations:
/// - ns3__ReviseStatusType* soap_new_ns3__ReviseStatusType(soap*) allocate and default initialize
/// - ns3__ReviseStatusType* soap_new_ns3__ReviseStatusType(soap*, int num) allocate array and default initialize values
/// - ns3__ReviseStatusType* soap_new_req_ns3__ReviseStatusType(soap*, ...) allocate, set required members
/// - ns3__ReviseStatusType* soap_new_set_ns3__ReviseStatusType(soap*, ...) allocate, set all public members
/// - ns3__ReviseStatusType::soap_default(soap*) default initialize members
/// - int soap_read_ns3__ReviseStatusType(soap*, ns3__ReviseStatusType*) deserialize from a stream
/// - int soap_write_ns3__ReviseStatusType(soap*, ns3__ReviseStatusType*) serialize to a stream
/// - ns3__ReviseStatusType* ns3__ReviseStatusType::soap_dup(soap*) returns deep copy of ns3__ReviseStatusType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns3__ReviseStatusType::soap_del() deep deletes ns3__ReviseStatusType data members, use only after ns3__ReviseStatusType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns3__ReviseStatusType
{ public:
/// <PRE><BLOCKQUOTE>
///   Indicates whether the item was revised since the auction started.
/// </BLOCKQUOTE></PRE>
/// Element "ItemRevised" of XSD type xs:boolean.
    bool                                 ItemRevised                    1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   If true, indicates that a Buy It Now Price was added for
///   the item. Only returned for Motors items.
/// </BLOCKQUOTE></PRE>
/// Element "BuyItNowAdded" of XSD type xs:boolean.
    bool*                                BuyItNowAdded                  0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Replaces BinLowered as of API version 305. If true,
///   indicates that the Buy It Now Price was lowered for the
///   item. Only returned for Motors items.
/// </BLOCKQUOTE></PRE>
/// Element "BuyItNowLowered" of XSD type xs:boolean.
    bool*                                BuyItNowLowered                0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   If true, indicates that the Reserve Price was lowered for
///   the item. Only returned for Motors items.
/// </BLOCKQUOTE></PRE>
/// Element "ReserveLowered" of XSD type xs:boolean.
    bool*                                ReserveLowered                 0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   If true, indicates that the Reserve Price was removed
///   from the item. Only returned for eBay Motors items.
/// </BLOCKQUOTE></PRE>
/// Element "ReserveRemoved" of XSD type xs:boolean.
    bool*                                ReserveRemoved                 0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief "urn:ebay:apis:eBLBaseComponents":ListingDetailsType is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   Contains the listed item details which consists of following information: .
/// </BLOCKQUOTE></PRE>
/// class ns3__ListingDetailsType operations:
/// - ns3__ListingDetailsType* soap_new_ns3__ListingDetailsType(soap*) allocate and default initialize
/// - ns3__ListingDetailsType* soap_new_ns3__ListingDetailsType(soap*, int num) allocate array and default initialize values
/// - ns3__ListingDetailsType* soap_new_req_ns3__ListingDetailsType(soap*, ...) allocate, set required members
/// - ns3__ListingDetailsType* soap_new_set_ns3__ListingDetailsType(soap*, ...) allocate, set all public members
/// - ns3__ListingDetailsType::soap_default(soap*) default initialize members
/// - int soap_read_ns3__ListingDetailsType(soap*, ns3__ListingDetailsType*) deserialize from a stream
/// - int soap_write_ns3__ListingDetailsType(soap*, ns3__ListingDetailsType*) serialize to a stream
/// - ns3__ListingDetailsType* ns3__ListingDetailsType::soap_dup(soap*) returns deep copy of ns3__ListingDetailsType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns3__ListingDetailsType::soap_del() deep deletes ns3__ListingDetailsType data members, use only after ns3__ListingDetailsType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns3__ListingDetailsType
{ public:

/// </BLOCKQUOTE></PRE>
/// Element "Adult" of XSD type xs:boolean.
    bool*                                Adult                          0;	///< Optional element.

/// </BLOCKQUOTE></PRE>
/// Element "BindingAuction" of XSD type xs:boolean.
    bool*                                BindingAuction                 0;	///< Optional element.

/// </BLOCKQUOTE></PRE>
/// Element "CheckoutEnabled" of XSD type xs:boolean.
    bool*                                CheckoutEnabled                0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Converted value of the BuyItNowPrice in the currency indicated by SiteCurrency. This value must be refreshed every 24 hours to pick up the current conversion rates.
/// </BLOCKQUOTE></PRE>
/// Element "ConvertedBuyItNowPrice" of XSD type "urn:ebay:apis:CoreComponentTypes":AmountType.
    ns2__AmountType*                     ConvertedBuyItNowPrice         0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Converted value of the StartPrice field in the currency indicated by SiteCurrency. This value must be refreshed every 24 hours to pick up the current conversion rates.
/// </BLOCKQUOTE></PRE>
/// Element "ConvertedStartPrice" of XSD type "urn:ebay:apis:CoreComponentTypes":AmountType.
    ns2__AmountType*                     ConvertedStartPrice            0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Indicates the converted reserve price for a reserve auction. Returned only if DetailLevel = 4. ReservePrice is only returned for auctions with a reserve price where the user calling GetItem is the item's seller. Returned as null for International Fixed Price items. For more information on reserve price auctions, see http://pages.ebay.com/help/basics/f-format.html#1.
/// </BLOCKQUOTE></PRE>
/// Element "ConvertedReservePrice" of XSD type "urn:ebay:apis:CoreComponentTypes":AmountType.
    ns2__AmountType*                     ConvertedReservePrice          0;	///< Optional element.

/// </BLOCKQUOTE></PRE>
/// Element "HasReservePrice" of XSD type xs:boolean.
    bool*                                HasReservePrice                0;	///< Optional element.

/// </BLOCKQUOTE></PRE>
/// Element "RegionName" of XSD type xs:string.
    std::string*                         RegionName                     0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Indicates the new ItemID for a relisted item. When an item is relisted, the old (expired) listing is annotated with the new (relist) ItemID. This field only appears when the old listing is retrieved.
/// </BLOCKQUOTE></PRE>
/// Element "RelistedItemID" of XSD type "urn:ebay:apis:eBLBaseComponents":ItemIDType.
    ns3__ItemIDType*                     RelistedItemID                 0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   The ItemID for the original listing (i.e., OriginalItemID specific to Second Chance Offer items).
/// </BLOCKQUOTE></PRE>
/// Element "SecondChanceOriginalItemID" of XSD type "urn:ebay:apis:eBLBaseComponents":ItemIDType.
    ns3__ItemIDType*                     SecondChanceOriginalItemID     0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Time stamp for the start of the listing (in GMT). For regular items, StartTime is not sent in at listing time.
/// </BLOCKQUOTE></PRE>
/// Element "StartTime" of XSD type xs:dateTime.
    time_t*                              StartTime                      0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Time stamp for the end of the listing (in GMT).
/// </BLOCKQUOTE></PRE>
/// Element "EndTime" of XSD type xs:dateTime.
    time_t*                              EndTime                        0;	///< Optional element.

/// </BLOCKQUOTE></PRE>
/// Element "ViewItemURL" of XSD type xs:anyURI.
    xsd__anyURI*                         ViewItemURL                    0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief "urn:ebay:apis:eBLBaseComponents":ItemType is a complexType.
///
/// class ns3__ItemType operations:
/// - ns3__ItemType* soap_new_ns3__ItemType(soap*) allocate and default initialize
/// - ns3__ItemType* soap_new_ns3__ItemType(soap*, int num) allocate array and default initialize values
/// - ns3__ItemType* soap_new_req_ns3__ItemType(soap*, ...) allocate, set required members
/// - ns3__ItemType* soap_new_set_ns3__ItemType(soap*, ...) allocate, set all public members
/// - ns3__ItemType::soap_default(soap*) default initialize members
/// - int soap_read_ns3__ItemType(soap*, ns3__ItemType*) deserialize from a stream
/// - int soap_write_ns3__ItemType(soap*, ns3__ItemType*) serialize to a stream
/// - ns3__ItemType* ns3__ItemType::soap_dup(soap*) returns deep copy of ns3__ItemType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns3__ItemType::soap_del() deep deletes ns3__ItemType data members, use only after ns3__ItemType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns3__ItemType
{ public:
/// <PRE><BLOCKQUOTE>
///   Returns custom, application-specific data associated with the item. The data in this field is stored with the item in the items table at eBay, but is not used in any way by eBay. Use ApplicationData to store such special information as a part or SKU number. Maximum 32 characters in length.
/// </BLOCKQUOTE></PRE>
/// Element "ApplicationData" of XSD type xs:string.
    std::string*                         ApplicationData                0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Carries one or more instances of the AttributeSet in a list.
/// </BLOCKQUOTE></PRE>
/// Element "ListOfAttributeSets" of XSD type "urn:ebay:apis:eBLBaseComponents":ListOfAttributeSetType.
    ns3__ListOfAttributeSetType*         ListOfAttributeSets            0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   If true (1), indicates that the seller requested immediate payment for the item. False (0) if immediate payment was not requested. (Does not indicate whether the item is still a candidate for puchase via immediate payment.) Only applicable for items listed on US and UK sites in categories that support immediate payment, when seller has a Premier or Business PayPal account.
/// </BLOCKQUOTE></PRE>
/// Element "AutoPay" of XSD type xs:boolean.
    bool*                                AutoPay                        0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Indicates the status of the item's eligibility for the Buyer Protection Program. Possible values:
///   ItemIneligible - Item is ineligible (e.g., category not applicable)
///   ItemEligible - Item is eligible per standard criteria ItemMarkedIneligible - Item marked ineligible per special criteria (e.g., seller's account closed)
///   ItemMarkedIneligible - Item marked elegible per other criteria
///   Applicable for items listed to the US site and for the Parts and Accessories category (6028) or Everything Else category (10368) (or their subcategories) on the eBay Motors site.
/// </BLOCKQUOTE></PRE>
/// Element "BuyerProtection" of XSD type "urn:ebay:apis:eBLBaseComponents":BuyerProtectionCodeType.
    enum ns3__BuyerProtectionCodeType*   BuyerProtection                0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Amount a Buyer would need to bid to take advantage of the Buy It Now feature. Not applicable to Fixed-Price items (Type = 7 or 9) or AdFormat-type listings. For Fixed-Price items, see StartPrice instead.
/// </BLOCKQUOTE></PRE>
/// Element "BuyItNowPrice" of XSD type "urn:ebay:apis:CoreComponentTypes":AmountType.
    ns2__AmountType*                     BuyItNowPrice                  0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Charity listing container.
/// </BLOCKQUOTE></PRE>
/// Element "Charity" of XSD type "urn:ebay:apis:eBLBaseComponents":CharityType.
    ns3__CharityType*                    Charity                        0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   2-letter ISO 3166 Country Code.
/// </BLOCKQUOTE></PRE>
/// Element reference "urn:ebay:apis:eBLBaseComponents:""urn:ebay:apis:eBLBaseComponents":Country.
    enum ns3__CountryCodeType*           Country                        0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   CrossPromotions container, if applicable shows promoted items
/// </BLOCKQUOTE></PRE>
/// Element "CrossPromotion" of XSD type "urn:ebay:apis:eBLBaseComponents":CrossPromotionsType.
    ns3__CrossPromotionsType*            CrossPromotion                 0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   3-letter ISO Currency Code.
/// </BLOCKQUOTE></PRE>
/// Element reference "urn:ebay:apis:eBLBaseComponents:""urn:ebay:apis:eBLBaseComponents":Currency.
    enum ns3__CurrencyCodeType*          Currency                       0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Item Description.
/// </BLOCKQUOTE></PRE>
/// Element "Description" of XSD type xs:string.
    std::string*                         Description                    0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Online Escrow paid for by buyer or seller. Cannot use with real estate auctions. Escrow is recommended for for transactions over $500. Escrow service, available via Escrow.com, protects both buyer and seller by acting as a trusted third-party during the transaction and managing the payment process
///   from start to finish. Also, if escrow by seller option used,
///   then for Motors, this means that Escrow will be negotiated at the end of the auction.
/// </BLOCKQUOTE></PRE>
/// Element "Escrow" of XSD type "urn:ebay:apis:eBLBaseComponents":EscrowCodeType.
    enum ns3__EscrowCodeType*            Escrow                         0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   If set, a generic gift icon displays in the listing's Title. GiftIcon must be set to to be able to use GiftServices options (e.g., GiftExpressShipping, GiftShipToRecipient, or GiftWrap).
/// </BLOCKQUOTE></PRE>
/// Element "GiftIcon" of XSD type xs:int.
    int*                                 GiftIcon                       0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Gift service options offered by the seller of the listed item.
/// </BLOCKQUOTE></PRE>
/// Vector of enum ns3__GiftServicesCodeType of length 0..unbounded.
    std::vector<enum ns3__GiftServicesCodeType> GiftServices                   0;	///< Elements.
/// <PRE><BLOCKQUOTE>
///   Optional hit counter for the item's listing page. Possible values are:
///   "NoHitCounter" "HonestyStyle" "GreenLED" "Hidden"
/// </BLOCKQUOTE></PRE>
/// Element "HitCounter" of XSD type "urn:ebay:apis:eBLBaseComponents":HitCounterCodeType.
    enum ns3__HitCounterCodeType*        HitCounter                     0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   The ID that uniquely identifies the item listing.
/// </BLOCKQUOTE></PRE>
/// Element reference "urn:ebay:apis:eBLBaseComponents:""urn:ebay:apis:eBLBaseComponents":ItemID.
    ns3__ItemIDType*                     ItemID                         0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Includes listing details in terms of start and end time of listing (in GMT) as well as other details (e.g., orginal item for second chance,
///   converted start price, etc.).
/// </BLOCKQUOTE></PRE>
/// Element "ListingDetails" of XSD type "urn:ebay:apis:eBLBaseComponents":ListingDetailsType.
    ns3__ListingDetailsType*             ListingDetails                 0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   When an item is first listed (using AddItem), a Layout template or a Theme template (or both) can be assigned to the item. A Layout template is assigned to a new item by specifying the Layout template ID (in the AddItem input argument LayoutID). Similarly, a Theme template is assigned to the item using the ThemeID argument.
/// </BLOCKQUOTE></PRE>
/// Element "ListingDesigner" of XSD type "urn:ebay:apis:eBLBaseComponents":ListingDesignerType.
    ns3__ListingDesignerType*            ListingDesigner                0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Describes the number of days the auction will be active.
/// </BLOCKQUOTE></PRE>
/// Element reference "urn:ebay:apis:eBLBaseComponents:""urn:ebay:apis:eBLBaseComponents":ListingDuration.
    enum ns3__ListingDurationCodeType*   ListingDuration                0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Describes the types of enhancment supported
///   for the item's listing.
/// </BLOCKQUOTE></PRE>
/// Vector of enum ns3__ListingEnhancementsCodeType of length 0..unbounded.
    std::vector<enum ns3__ListingEnhancementsCodeType> ListingEnhancement             0;	///< Elements.
/// <PRE><BLOCKQUOTE>
///   Describes the type of listing for the item a seller has chosen (e.g., Chinese, Dutch, FixedPrice, etc.).
/// </BLOCKQUOTE></PRE>
/// Element "ListingType" of XSD type "urn:ebay:apis:eBLBaseComponents":ListingTypeCodeType.
    enum ns3__ListingTypeCodeType*       ListingType                    0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Indicates the geographical location of the item.
/// </BLOCKQUOTE></PRE>
/// Element "Location" of XSD type xs:string.
    std::string*                         Location                       0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Needed for add item only for partners.
/// </BLOCKQUOTE></PRE>
/// Element "PartnerCode" of XSD type xs:string.
    std::string*                         PartnerCode                    0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Needed for add item only for partners.
/// </BLOCKQUOTE></PRE>
/// Element "PartnerName" of XSD type xs:string.
    std::string*                         PartnerName                    0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   List of payment methods accepted by a seller from a buyer for a (checkout) transaction.
/// </BLOCKQUOTE></PRE>
/// Vector of enum ns3__BuyerPaymentMethodCodeType element refs of length 0..unbounded.
    std::vector<enum ns3__BuyerPaymentMethodCodeType> PaymentMethods                 0;	///< Elements.
/// <PRE><BLOCKQUOTE>
///   Valid PayPal e-mail address if seller has chosen PayPal as a payment method for the listed item.
/// </BLOCKQUOTE></PRE>
/// Element "PayPalEmailAddress" of XSD type xs:string.
    std::string*                         PayPalEmailAddress             0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Container for data on the primary category of listing.
/// </BLOCKQUOTE></PRE>
/// Element "PrimaryCategory" of XSD type "urn:ebay:apis:eBLBaseComponents":CategoryType.
    ns3__CategoryType*                   PrimaryCategory                0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Private auction. Not applicable to Fixed Price items.
/// </BLOCKQUOTE></PRE>
/// Element "PrivateListing" of XSD type xs:boolean.
    bool*                                PrivateListing                 0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Number of items being sold in the auction.
/// </BLOCKQUOTE></PRE>
/// Element "Quantity" of XSD type xs:int.
    int*                                 Quantity                       0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Region where the item is listed. See Region Table for values. If the item is listed with a Region of 0 (zero), then this return field denotes no region association with the item, meaning that it is not listing the item regionally.
/// </BLOCKQUOTE></PRE>
/// Element reference "urn:ebay:apis:eBLBaseComponents:""urn:ebay:apis:eBLBaseComponents":RegionID.
    std::string*                         RegionID                       0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   If true, creates a link from the old listing for the item to the new relist page, which accommodates users who might still look for the item under its old item ID. Also adds the relist ID to the old listing's record in the eBay database, which can be returned by calling GetItem for the old ItemId. If your application creates the listing page for the user, you need to add the relist link option to your application for your users.
/// </BLOCKQUOTE></PRE>
/// Element "RelistLink" of XSD type xs:boolean.
    bool*                                RelistLink                     0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Indicates the reserve price for a reserve auction. Returned only if DetailLevel = 4. ReservePrice is only returned for auctions with a reserve price where the user calling GetItem is the item's seller. Returned as null for International Fixed Price items. For more information on reserve price auctions, see http://pages.ebay.com/help/basics/f-format.html#1.
/// </BLOCKQUOTE></PRE>
/// Element "ReservePrice" of XSD type "urn:ebay:apis:CoreComponentTypes":AmountType.
    ns2__AmountType*                     ReservePrice                   0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Revise Status contains information about the item being
///   revised.
/// </BLOCKQUOTE></PRE>
/// Element reference "urn:ebay:apis:eBLBaseComponents:""urn:ebay:apis:eBLBaseComponents":ReviseStatus.
    ns3__ReviseStatusType*               ReviseStatus                   0;	///< Optional element.
/// Element "ScheduleTime" of XSD type xs:dateTime.
    time_t*                              ScheduleTime                   0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Container for data on the secondary category of listing. Secondary category is optional.
/// </BLOCKQUOTE></PRE>
/// Element "SecondaryCategory" of XSD type "urn:ebay:apis:eBLBaseComponents":CategoryType.
    ns3__CategoryType*                   SecondaryCategory              0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Item picture information for pictures hosted at eBay site.
/// </BLOCKQUOTE></PRE>
/// Element "SiteHostedPicture" of XSD type "urn:ebay:apis:eBLBaseComponents":SiteHostedPictureType.
    ns3__SiteHostedPictureType*          SiteHostedPicture              0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Seller user.
/// </BLOCKQUOTE></PRE>
/// Element reference "urn:ebay:apis:eBLBaseComponents:""urn:ebay:apis:eBLBaseComponents":Seller.
    ns3__UserType*                       Seller                         0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Container for for selling status information (e.g., BidCount,
///   BidIncrement, HighBidder, MinimimumToBid, etc).
/// </BLOCKQUOTE></PRE>
/// Element reference "urn:ebay:apis:eBLBaseComponents:""urn:ebay:apis:eBLBaseComponents":SellingStatus.
    ns3__SellingStatusType*              SellingStatus                  0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Specifies where the seller is willing to ship the item. Default "SiteOnly". Valid values are: SiteOnly (the default)
///   WorldWide
///   SitePlusRegions
///   WillNotShip
///   If SitePlusRegions is selected, then at least one regions argument (ShipToNorthAmerica, ShipToEurope, etc.) must also be set.
/// </BLOCKQUOTE></PRE>
/// Element "ShippingOption" of XSD type "urn:ebay:apis:eBLBaseComponents":ShippingOptionCodeType.
    enum ns3__ShippingOptionCodeType*    ShippingOption                 0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Contains the shipping payment related information for the listed item.
/// </BLOCKQUOTE></PRE>
/// Element reference "urn:ebay:apis:eBLBaseComponents:""urn:ebay:apis:eBLBaseComponents":ShippingDetails.
    ns3__ShippingDetailsType*            ShippingDetails                0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Regions that seller will ship to.
/// </BLOCKQUOTE></PRE>
/// Vector of enum ns3__ShippingRegionCodeType element refs of length 0..unbounded.
    std::vector<enum ns3__ShippingRegionCodeType> ShippingRegions                0;	///< Elements.
/// <PRE><BLOCKQUOTE>
///   Describes who pays for the delivery of an item (e.g., buyer or seller).
/// </BLOCKQUOTE></PRE>
/// Element "ShippingTerms" of XSD type "urn:ebay:apis:eBLBaseComponents":ShippingTermsCodeType.
    enum ns3__ShippingTermsCodeType*     ShippingTerms                  0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   eBay site on which item is listed.
/// </BLOCKQUOTE></PRE>
/// Element reference "urn:ebay:apis:eBLBaseComponents:""urn:ebay:apis:eBLBaseComponents":Site.
    enum ns3__SiteCodeType*              Site                           0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Starting price for the item. For Type=7 or Type=9 (Fixed Price) items, if the item price (MinimumBid) is revised, this field returns the new price.
/// </BLOCKQUOTE></PRE>
/// Element "StartPrice" of XSD type "urn:ebay:apis:CoreComponentTypes":AmountType.
    ns2__AmountType*                     StartPrice                     0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Storefront is shown for any item that belongs to an eBay Store owner, regardless of whether it is fixed price or auction type. Not returned for International Fixed Price items.
/// </BLOCKQUOTE></PRE>
/// Element "Storefront" of XSD type "urn:ebay:apis:eBLBaseComponents":StorefrontType.
    ns3__StorefrontType*                 Storefront                     0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Subtitle to use in addition to the title. Provides more keywords when buyers search in titles and descriptions.
/// </BLOCKQUOTE></PRE>
/// Element "SubTitle" of XSD type xs:string.
    std::string*                         SubTitle                       0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Time until the the end of the listing (e.g., the amount of time left in an active auction).
/// </BLOCKQUOTE></PRE>
/// Element "TimeLeft" of XSD type xs:duration.
    xsd__duration*                       TimeLeft                       0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Name of the item as it appears for auctions.
/// </BLOCKQUOTE></PRE>
/// Element "Title" of XSD type xs:string.
    std::string*                         Title                          0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Universally unique constraint tag. The UUID is unique to a category.
/// </BLOCKQUOTE></PRE>
/// Element reference "urn:ebay:apis:eBLBaseComponents:""urn:ebay:apis:eBLBaseComponents":UUID.
    ns2__UUIDType*                       UUID                           0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   VAT info container.
/// </BLOCKQUOTE></PRE>
/// Element "VATDetails" of XSD type "urn:ebay:apis:eBLBaseComponents":VATDetailsType.
    ns3__VATDetailsType*                 VATDetails                     0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Item picture information for pictures hosted at vendor (i.e., remote) site.
/// </BLOCKQUOTE></PRE>
/// Element "VendorHostedPicture" of XSD type "urn:ebay:apis:eBLBaseComponents":VendorHostedPictureType.
    ns3__VendorHostedPictureType*        VendorHostedPicture            0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief "urn:ebay:apis:eBLBaseComponents":TransactionsType is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   Contains information about multiple individual transations.
/// </BLOCKQUOTE></PRE>
/// class ns3__TransactionsType operations:
/// - ns3__TransactionsType* soap_new_ns3__TransactionsType(soap*) allocate and default initialize
/// - ns3__TransactionsType* soap_new_ns3__TransactionsType(soap*, int num) allocate array and default initialize values
/// - ns3__TransactionsType* soap_new_req_ns3__TransactionsType(soap*, ...) allocate, set required members
/// - ns3__TransactionsType* soap_new_set_ns3__TransactionsType(soap*, ...) allocate, set all public members
/// - ns3__TransactionsType::soap_default(soap*) default initialize members
/// - int soap_read_ns3__TransactionsType(soap*, ns3__TransactionsType*) deserialize from a stream
/// - int soap_write_ns3__TransactionsType(soap*, ns3__TransactionsType*) serialize to a stream
/// - ns3__TransactionsType* ns3__TransactionsType::soap_dup(soap*) returns deep copy of ns3__TransactionsType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns3__TransactionsType::soap_del() deep deletes ns3__TransactionsType data members, use only after ns3__TransactionsType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns3__TransactionsType
{ public:
/// Vector of ns3__TransactionType* element refs of length 1..unbounded.
    std::vector<ns3__TransactionType*  > Transaction                    1;	///< Elements.
    struct soap                         *soap                          ;
};

/// @brief "urn:ebay:apis:eBLBaseComponents":TransactionType is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   Contains information about a single transaction. A transaction contains information about the sale of a particular item. The system creates a transaction when a buyer has made a purchase (Fixed Price items) or is the winning bidder (BIN and auction items). A listing can be associated with one or more transactions in these cases:
///   Multi-Item Fixed Price Listings
///   Dutch Auction Listings
///   A listing is associated with a single transaction in these cases:
///   Single-Item Fixed Price Listings
///   Single-Item Auction Listings
/// </BLOCKQUOTE></PRE>
/// class ns3__TransactionType operations:
/// - ns3__TransactionType* soap_new_ns3__TransactionType(soap*) allocate and default initialize
/// - ns3__TransactionType* soap_new_ns3__TransactionType(soap*, int num) allocate array and default initialize values
/// - ns3__TransactionType* soap_new_req_ns3__TransactionType(soap*, ...) allocate, set required members
/// - ns3__TransactionType* soap_new_set_ns3__TransactionType(soap*, ...) allocate, set all public members
/// - ns3__TransactionType::soap_default(soap*) default initialize members
/// - int soap_read_ns3__TransactionType(soap*, ns3__TransactionType*) deserialize from a stream
/// - int soap_write_ns3__TransactionType(soap*, ns3__TransactionType*) serialize to a stream
/// - ns3__TransactionType* ns3__TransactionType::soap_dup(soap*) returns deep copy of ns3__TransactionType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns3__TransactionType::soap_del() deep deletes ns3__TransactionType data members, use only after ns3__TransactionType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns3__TransactionType
{ public:
/// <PRE><BLOCKQUOTE>
///   The amount the buyer paid for the item or agreed to pay, depending on how far into the checkout process the item is. If the seller allowed the buyer to change the item total, the buyer is able to change the total until the time that the transaction's status moves to Complete. Determine whether the buyer changed the amount by calling GetSellerTransactions or GetSellerTransactions and comparing the AmountPaid value to what the seller expected. For Motors items, AmountPaid is the amount paid by the buyer for the deposit.
/// </BLOCKQUOTE></PRE>
/// Element reference "urn:ebay:apis:eBLBaseComponents:""urn:ebay:apis:eBLBaseComponents":AmountPaid.
    ns2__AmountType*                     AmountPaid                     0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Container for buyer data.
/// </BLOCKQUOTE></PRE>
/// Element "Buyer" of XSD type "urn:ebay:apis:eBLBaseComponents":UserType.
    ns3__UserType*                       Buyer                          0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Includes shipping payment data.
/// </BLOCKQUOTE></PRE>
/// Element reference "urn:ebay:apis:eBLBaseComponents:""urn:ebay:apis:eBLBaseComponents":ShippingDetails.
    ns3__ShippingDetailsType*            ShippingDetails                0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Value returned in the Transaction/AmountPaid element, converted to the currency indicated by SiteCurrency.
/// </BLOCKQUOTE></PRE>
/// Element "ConvertedAmountPaid" of XSD type "urn:ebay:apis:CoreComponentTypes":AmountType.
    ns2__AmountType*                     ConvertedAmountPaid            0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Value returned in the Transaction/TransactionPrice element, converted to the currency indicated by SiteCurrency.
/// </BLOCKQUOTE></PRE>
/// Element "ConvertedTransactionPrice" of XSD type "urn:ebay:apis:CoreComponentTypes":AmountType.
    ns2__AmountType*                     ConvertedTransactionPrice      0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   For fixed-price, Stores, and BIN items indicates when the purchase (or BIN) occurred. For all other item types indicates when the transaction was created (the time when checkout was initiated).
/// </BLOCKQUOTE></PRE>
/// Element "CreatedDate" of XSD type xs:dateTime.
    time_t*                              CreatedDate                    0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Deposit type for Motors items. If item is not a Motors item, then returns a DepositType of None. Possible values:
///   None
///   Other Method
///   Fast Deposit
/// </BLOCKQUOTE></PRE>
/// Element "DepositType" of XSD type "urn:ebay:apis:eBLBaseComponents":DepositTypeCodeType.
    enum ns3__DepositTypeCodeType*       DepositType                    0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Item info associated with the transaction.
/// </BLOCKQUOTE></PRE>
/// Element "Item" of XSD type "urn:ebay:apis:eBLBaseComponents":ItemType.
    ns3__ItemType*                       Item                           0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Contains the number of individual items the buyer purchased in the transaction.
/// </BLOCKQUOTE></PRE>
/// Element "QuantityPurchased" of XSD type xs:int.
    int*                                 QuantityPurchased              0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Shipping cost totals shown to user (for both flat and calculated rates).
/// </BLOCKQUOTE></PRE>
/// Element "ShippingHandlingTotal" of XSD type "urn:ebay:apis:CoreComponentTypes":AmountType.
    ns2__AmountType*                     ShippingHandlingTotal          0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Container node for transaction status data.
/// </BLOCKQUOTE></PRE>
/// Element "Status" of XSD type "urn:ebay:apis:eBLBaseComponents":TransactionStatusType.
    ns3__TransactionStatusType*          Status                         0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Unique identifier for a transaction. Returns 0 when Type=1 (Chinese auction). Typically, an ItemID and a TransactionID uniquely identify a checkout transaction.
/// </BLOCKQUOTE></PRE>
/// Element reference "urn:ebay:apis:eBLBaseComponents:""urn:ebay:apis:eBLBaseComponents":TransactionID.
    std::string*                         TransactionID                  0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Unique identifier for an authorization.
/// </BLOCKQUOTE></PRE>
/// Element reference "urn:ebay:apis:eBLBaseComponents:""urn:ebay:apis:eBLBaseComponents":AuthorizationID.
    std::string*                         AuthorizationID                0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Price of the item, before shipping and sales tax. For Motors, TransactionPrice is the deposit amount.
/// </BLOCKQUOTE></PRE>
/// Element "TransactionPrice" of XSD type "urn:ebay:apis:CoreComponentTypes":AmountType.
    ns2__AmountType*                     TransactionPrice               0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   VAT rate for the item, if the item price includes the VAT rate. Specify the VATPercent if you want include the net price in addition to the gross price in the listing. VAT rates vary depending on the item and on the user's country of residence; therefore a business seller is responsible for entering the correct VAT rate (it will not be calculated by eBay).
/// </BLOCKQUOTE></PRE>
/// Element "VATPercent" of XSD type xs:decimal.
    xsd__decimal*                        VATPercent                     0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief "urn:ebay:apis:eBLBaseComponents":PaymentMeansType is a complexType.
///
/// class ns3__PaymentMeansType operations:
/// - ns3__PaymentMeansType* soap_new_ns3__PaymentMeansType(soap*) allocate and default initialize
/// - ns3__PaymentMeansType* soap_new_ns3__PaymentMeansType(soap*, int num) allocate array and default initialize values
/// - ns3__PaymentMeansType* soap_new_req_ns3__PaymentMeansType(soap*, ...) allocate, set required members
/// - ns3__PaymentMeansType* soap_new_set_ns3__PaymentMeansType(soap*, ...) allocate, set all public members
/// - ns3__PaymentMeansType::soap_default(soap*) default initialize members
/// - int soap_read_ns3__PaymentMeansType(soap*, ns3__PaymentMeansType*) deserialize from a stream
/// - int soap_write_ns3__PaymentMeansType(soap*, ns3__PaymentMeansType*) serialize to a stream
/// - ns3__PaymentMeansType* ns3__PaymentMeansType::soap_dup(soap*) returns deep copy of ns3__PaymentMeansType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns3__PaymentMeansType::soap_del() deep deletes ns3__PaymentMeansType data members, use only after ns3__PaymentMeansType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns3__PaymentMeansType
{ public:
/// Element "TypeCodeID" of XSD type "urn:ebay:apis:eBLBaseComponents":SellerPaymentMethodCodeType.
    enum ns3__SellerPaymentMethodCodeType  TypeCodeID                     1;	///< Required element.
    struct soap                         *soap                          ;
};

/// @brief "urn:ebay:apis:eBLBaseComponents":PaymentType is a complexType.
///
/// class ns3__PaymentType operations:
/// - ns3__PaymentType* soap_new_ns3__PaymentType(soap*) allocate and default initialize
/// - ns3__PaymentType* soap_new_ns3__PaymentType(soap*, int num) allocate array and default initialize values
/// - ns3__PaymentType* soap_new_req_ns3__PaymentType(soap*, ...) allocate, set required members
/// - ns3__PaymentType* soap_new_set_ns3__PaymentType(soap*, ...) allocate, set all public members
/// - ns3__PaymentType::soap_default(soap*) default initialize members
/// - int soap_read_ns3__PaymentType(soap*, ns3__PaymentType*) deserialize from a stream
/// - int soap_write_ns3__PaymentType(soap*, ns3__PaymentType*) serialize to a stream
/// - ns3__PaymentType* ns3__PaymentType::soap_dup(soap*) returns deep copy of ns3__PaymentType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns3__PaymentType::soap_del() deep deletes ns3__PaymentType data members, use only after ns3__PaymentType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns3__PaymentType
{ public:
/// Element "PaymentMeans" of XSD type "urn:ebay:apis:eBLBaseComponents":PaymentMeansType.
    ns3__PaymentMeansType*               PaymentMeans                   1;	///< Required element.
    struct soap                         *soap                          ;
};

/// @brief "urn:ebay:apis:eBLBaseComponents":TransactionStatusType is a complexType.
///
/// class ns3__TransactionStatusType operations:
/// - ns3__TransactionStatusType* soap_new_ns3__TransactionStatusType(soap*) allocate and default initialize
/// - ns3__TransactionStatusType* soap_new_ns3__TransactionStatusType(soap*, int num) allocate array and default initialize values
/// - ns3__TransactionStatusType* soap_new_req_ns3__TransactionStatusType(soap*, ...) allocate, set required members
/// - ns3__TransactionStatusType* soap_new_set_ns3__TransactionStatusType(soap*, ...) allocate, set all public members
/// - ns3__TransactionStatusType::soap_default(soap*) default initialize members
/// - int soap_read_ns3__TransactionStatusType(soap*, ns3__TransactionStatusType*) deserialize from a stream
/// - int soap_write_ns3__TransactionStatusType(soap*, ns3__TransactionStatusType*) serialize to a stream
/// - ns3__TransactionStatusType* ns3__TransactionStatusType::soap_dup(soap*) returns deep copy of ns3__TransactionStatusType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns3__TransactionStatusType::soap_del() deep deletes ns3__TransactionStatusType data members, use only after ns3__TransactionStatusType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns3__TransactionStatusType
{ public:
/// <PRE><BLOCKQUOTE>
///   Indicates the success or failure of an eBay Online Payment for the transaction. If the payment failed, the value returned indicates the reason for the failure. Possible values:
///   0 = No payment failure.
///   3 = Buyer's eCheck bounced.
///   4 = Buyer's credit card failed.
///   5 = Buyer failed payment as reported by seller.
///   7 = Payment from buyer to seller is in PayPal process, but has not yet been completed.
/// </BLOCKQUOTE></PRE>
/// Element "eBayPaymentStatus" of XSD type xs:int.
    int*                                 eBayPaymentStatus              0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Indicates the current state of the checkout process for the transaction. Possible values:
///   0 = Checkout complete.
///   1 = Checkout incomplete. No details specified.
///   2 = Buyer requests total.
///   3 = Seller responded to buyer's request.
/// </BLOCKQUOTE></PRE>
/// Element "IncompleteState" of XSD type xs:int.
    int*                                 IncompleteState                0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Indicates last date and time checkout status or incomplete state was updated (in GMT).
/// </BLOCKQUOTE></PRE>
/// Element "LastTimeModified" of XSD type xs:dateTime.
    time_t*                              LastTimeModified               0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Payment method used by the buyer. (See BuyerPaymentCodeList/Type).
/// </BLOCKQUOTE></PRE>
/// Element "PaymentMethodUsed" of XSD type "urn:ebay:apis:eBLBaseComponents":BuyerPaymentMethodCodeType.
    enum ns3__BuyerPaymentMethodCodeType*  PaymentMethodUsed              0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Indicates whether the transaction process complete or incomplete. Possible values:
///   1 = Incomplete
///   2 = Complete
/// </BLOCKQUOTE></PRE>
/// Element "StatusIs" of XSD type xs:int.
    int*                                 StatusIs                       0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief "urn:ebay:apis:eBLBaseComponents":UserType is a complexType.
///
/// class ns3__UserType operations:
/// - ns3__UserType* soap_new_ns3__UserType(soap*) allocate and default initialize
/// - ns3__UserType* soap_new_ns3__UserType(soap*, int num) allocate array and default initialize values
/// - ns3__UserType* soap_new_req_ns3__UserType(soap*, ...) allocate, set required members
/// - ns3__UserType* soap_new_set_ns3__UserType(soap*, ...) allocate, set all public members
/// - ns3__UserType::soap_default(soap*) default initialize members
/// - int soap_read_ns3__UserType(soap*, ns3__UserType*) deserialize from a stream
/// - int soap_write_ns3__UserType(soap*, ns3__UserType*) serialize to a stream
/// - ns3__UserType* ns3__UserType::soap_dup(soap*) returns deep copy of ns3__UserType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns3__UserType::soap_del() deep deletes ns3__UserType data members, use only after ns3__UserType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns3__UserType
{ public:
/// Element "AboutMePage" of XSD type xs:boolean.
    bool*                                AboutMePage                    0;	///< Optional element.
/// Element "EAISToken" of XSD type xs:string.
    std::string*                         EAISToken                      0;	///< Optional element.
/// Element reference "urn:ebay:apis:eBLBaseComponents:""urn:ebay:apis:eBLBaseComponents":Email.
    std::string                          Email                          1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Feedback scores are a quantitative expression of the desirability of dealing with that person as a Buyer or a Seller in auction transactions. Each auction transaction can result in one feedback entry for a given user (the Buyer can leave one feedback about the Seller and the Seller can leave one feedback about the Buyer). That one feedback can be positive, negative, or neutral. The aggregated feedback counts for a particular user represent that user's overall feedback score (referred to as a "feedback rating" on the eBay site). This rating is commonly expressed as the eBay Feedback score
///   for the user.
/// </BLOCKQUOTE></PRE>
/// Element reference "urn:ebay:apis:eBLBaseComponents:""urn:ebay:apis:eBLBaseComponents":FeedbackScore.
    int*                                 FeedbackScore                  0;	///< Optional element.
/// Element "FeedbackPrivate" of XSD type xs:boolean.
    bool*                                FeedbackPrivate                0;	///< Optional element.
/// Element "FeedbackRatingStar" of XSD type "urn:ebay:apis:eBLBaseComponents":FeedbackRatingStarCodeType.
    enum ns3__FeedbackRatingStarCodeType*  FeedbackRatingStar             0;	///< Optional element.
/// Element "IDVerified" of XSD type xs:boolean.
    bool*                                IDVerified                     0;	///< Optional element.
/// Element "NewUser" of XSD type xs:boolean.
    bool*                                NewUser                        0;	///< Optional element.
/// Element reference "urn:ebay:apis:eBLBaseComponents:""urn:ebay:apis:eBLBaseComponents":RegistrationAddress.
    ns3__AddressType*                    RegistrationAddress            0;	///< Optional element.
/// Element "RegistrationDate" of XSD type xs:dateTime.
    time_t*                              RegistrationDate               0;	///< Optional element.
/// Element reference "urn:ebay:apis:eBLBaseComponents:""urn:ebay:apis:eBLBaseComponents":Site.
    enum ns3__SiteCodeType*              Site                           0;	///< Optional element.
/// Element "Status" of XSD type "urn:ebay:apis:eBLBaseComponents":UserStatusCodeType.
    enum ns3__UserStatusCodeType*        Status                         0;	///< Optional element.
/// Element reference "urn:ebay:apis:eBLBaseComponents:""urn:ebay:apis:eBLBaseComponents":UserID.
    ns3__UserIDType*                     UserID                         0;	///< Optional element.
/// Element "UserIDChanged" of XSD type xs:boolean.
    bool*                                UserIDChanged                  0;	///< Optional element.
/// Element "UserIDLastChanged" of XSD type xs:dateTime.
    time_t*                              UserIDLastChanged              0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   If present, indicates whether or not the user is subject to VAT. Users who have registered with eBay as VAT-exempt are not subject to VAT. See Value-Added Tax (VAT). Not returned for users whose country of residence is outside the EU. Possible values for the user's status:
///   2 = Residence in an EU country but user registered as VAT-exempt
///   3 = Residence in an EU country and user not registered as VAT-exempt
/// </BLOCKQUOTE></PRE>
/// Element "VATStatus" of XSD type "urn:ebay:apis:eBLBaseComponents":VATStatusCodeType.
    enum ns3__VATStatusCodeType*         VATStatus                      0;	///< Optional element.
/// Element "BuyerInfo" of XSD type "urn:ebay:apis:eBLBaseComponents":BuyerType.
    ns3__BuyerType*                      BuyerInfo                      0;	///< Optional element.
/// Element "SellerInfo" of XSD type "urn:ebay:apis:eBLBaseComponents":SellerType.
    ns3__SellerType*                     SellerInfo                     0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief "urn:ebay:apis:eBLBaseComponents":VATDetailsType is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   Contains information required To list a business item.
///   BusinessSeller - only for add item, the RestrictedToBusiness and VATPercent for both get and add,
///   for revise all must be optional
/// </BLOCKQUOTE></PRE>
/// class ns3__VATDetailsType operations:
/// - ns3__VATDetailsType* soap_new_ns3__VATDetailsType(soap*) allocate and default initialize
/// - ns3__VATDetailsType* soap_new_ns3__VATDetailsType(soap*, int num) allocate array and default initialize values
/// - ns3__VATDetailsType* soap_new_req_ns3__VATDetailsType(soap*, ...) allocate, set required members
/// - ns3__VATDetailsType* soap_new_set_ns3__VATDetailsType(soap*, ...) allocate, set all public members
/// - ns3__VATDetailsType::soap_default(soap*) default initialize members
/// - int soap_read_ns3__VATDetailsType(soap*, ns3__VATDetailsType*) deserialize from a stream
/// - int soap_write_ns3__VATDetailsType(soap*, ns3__VATDetailsType*) serialize to a stream
/// - ns3__VATDetailsType* ns3__VATDetailsType::soap_dup(soap*) returns deep copy of ns3__VATDetailsType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns3__VATDetailsType::soap_del() deep deletes ns3__VATDetailsType data members, use only after ns3__VATDetailsType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns3__VATDetailsType
{ public:
/// Element "BusinessSeller" of XSD type xs:boolean.
    bool*                                BusinessSeller                 0;	///< Optional element.
/// Element "RestrictedToBusiness" of XSD type xs:boolean.
    bool*                                RestrictedToBusiness           0;	///< Optional element.
/// Element "VATPercent" of XSD type xs:float.
    float*                               VATPercent                     0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief "urn:ebay:apis:eBLBaseComponents":SchedulingInfoType is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   Contains information for Scheduling limits for the user. All dtails must be present,unless we will have revise call one day,
///   just in case we might let's make min occur = 0
/// </BLOCKQUOTE></PRE>
/// class ns3__SchedulingInfoType operations:
/// - ns3__SchedulingInfoType* soap_new_ns3__SchedulingInfoType(soap*) allocate and default initialize
/// - ns3__SchedulingInfoType* soap_new_ns3__SchedulingInfoType(soap*, int num) allocate array and default initialize values
/// - ns3__SchedulingInfoType* soap_new_req_ns3__SchedulingInfoType(soap*, ...) allocate, set required members
/// - ns3__SchedulingInfoType* soap_new_set_ns3__SchedulingInfoType(soap*, ...) allocate, set all public members
/// - ns3__SchedulingInfoType::soap_default(soap*) default initialize members
/// - int soap_read_ns3__SchedulingInfoType(soap*, ns3__SchedulingInfoType*) deserialize from a stream
/// - int soap_write_ns3__SchedulingInfoType(soap*, ns3__SchedulingInfoType*) serialize to a stream
/// - ns3__SchedulingInfoType* ns3__SchedulingInfoType::soap_dup(soap*) returns deep copy of ns3__SchedulingInfoType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns3__SchedulingInfoType::soap_del() deep deletes ns3__SchedulingInfoType data members, use only after ns3__SchedulingInfoType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns3__SchedulingInfoType
{ public:
/// Element "MaxScheduledMinutes" of XSD type xs:int.
    int*                                 MaxScheduledMinutes            0;	///< Optional element.
/// Element "MinScheduledMinutes" of XSD type xs:int.
    int*                                 MinScheduledMinutes            0;	///< Optional element.
/// Element "MaxScheduledItems" of XSD type xs:int.
    int*                                 MaxScheduledItems              0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief "urn:ebay:apis:eBLBaseComponents":ItemArrayType is a complexType.
///
/// class ns3__ItemArrayType operations:
/// - ns3__ItemArrayType* soap_new_ns3__ItemArrayType(soap*) allocate and default initialize
/// - ns3__ItemArrayType* soap_new_ns3__ItemArrayType(soap*, int num) allocate array and default initialize values
/// - ns3__ItemArrayType* soap_new_req_ns3__ItemArrayType(soap*, ...) allocate, set required members
/// - ns3__ItemArrayType* soap_new_set_ns3__ItemArrayType(soap*, ...) allocate, set all public members
/// - ns3__ItemArrayType::soap_default(soap*) default initialize members
/// - int soap_read_ns3__ItemArrayType(soap*, ns3__ItemArrayType*) deserialize from a stream
/// - int soap_write_ns3__ItemArrayType(soap*, ns3__ItemArrayType*) serialize to a stream
/// - ns3__ItemArrayType* ns3__ItemArrayType::soap_dup(soap*) returns deep copy of ns3__ItemArrayType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns3__ItemArrayType::soap_del() deep deletes ns3__ItemArrayType data members, use only after ns3__ItemArrayType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns3__ItemArrayType
{ public:
/// Vector of ns3__ItemType* element refs of length 0..unbounded.
    std::vector<ns3__ItemType*         > Item                           0;	///< Elements.
    struct soap                         *soap                          ;
};

/// @brief "urn:ebay:apis:eBLBaseComponents":CategoryArrayType is a complexType.
///
/// class ns3__CategoryArrayType operations:
/// - ns3__CategoryArrayType* soap_new_ns3__CategoryArrayType(soap*) allocate and default initialize
/// - ns3__CategoryArrayType* soap_new_ns3__CategoryArrayType(soap*, int num) allocate array and default initialize values
/// - ns3__CategoryArrayType* soap_new_req_ns3__CategoryArrayType(soap*, ...) allocate, set required members
/// - ns3__CategoryArrayType* soap_new_set_ns3__CategoryArrayType(soap*, ...) allocate, set all public members
/// - ns3__CategoryArrayType::soap_default(soap*) default initialize members
/// - int soap_read_ns3__CategoryArrayType(soap*, ns3__CategoryArrayType*) deserialize from a stream
/// - int soap_write_ns3__CategoryArrayType(soap*, ns3__CategoryArrayType*) serialize to a stream
/// - ns3__CategoryArrayType* ns3__CategoryArrayType::soap_dup(soap*) returns deep copy of ns3__CategoryArrayType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns3__CategoryArrayType::soap_del() deep deletes ns3__CategoryArrayType data members, use only after ns3__CategoryArrayType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns3__CategoryArrayType
{ public:
/// Vector of ns3__CategoryType* element refs of length 0..unbounded.
    std::vector<ns3__CategoryType*     > Category                       0;	///< Elements.
    struct soap                         *soap                          ;
};

/// @brief "urn:ebay:apis:eBLBaseComponents":PaginationType is a complexType.
///
/// class ns3__PaginationType operations:
/// - ns3__PaginationType* soap_new_ns3__PaginationType(soap*) allocate and default initialize
/// - ns3__PaginationType* soap_new_ns3__PaginationType(soap*, int num) allocate array and default initialize values
/// - ns3__PaginationType* soap_new_req_ns3__PaginationType(soap*, ...) allocate, set required members
/// - ns3__PaginationType* soap_new_set_ns3__PaginationType(soap*, ...) allocate, set all public members
/// - ns3__PaginationType::soap_default(soap*) default initialize members
/// - int soap_read_ns3__PaginationType(soap*, ns3__PaginationType*) deserialize from a stream
/// - int soap_write_ns3__PaginationType(soap*, ns3__PaginationType*) serialize to a stream
/// - ns3__PaginationType* ns3__PaginationType::soap_dup(soap*) returns deep copy of ns3__PaginationType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns3__PaginationType::soap_del() deep deletes ns3__PaginationType data members, use only after ns3__PaginationType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns3__PaginationType
{ public:
/// Element "EntriesPerPage" of XSD type xs:int.
    int*                                 EntriesPerPage                 0;	///< Optional element.
/// Element "PageNumber" of XSD type xs:int.
    int*                                 PageNumber                     0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief "urn:ebay:apis:eBLBaseComponents":ModifiedFieldType is a complexType.
///
/// class ns3__ModifiedFieldType operations:
/// - ns3__ModifiedFieldType* soap_new_ns3__ModifiedFieldType(soap*) allocate and default initialize
/// - ns3__ModifiedFieldType* soap_new_ns3__ModifiedFieldType(soap*, int num) allocate array and default initialize values
/// - ns3__ModifiedFieldType* soap_new_req_ns3__ModifiedFieldType(soap*, ...) allocate, set required members
/// - ns3__ModifiedFieldType* soap_new_set_ns3__ModifiedFieldType(soap*, ...) allocate, set all public members
/// - ns3__ModifiedFieldType::soap_default(soap*) default initialize members
/// - int soap_read_ns3__ModifiedFieldType(soap*, ns3__ModifiedFieldType*) deserialize from a stream
/// - int soap_write_ns3__ModifiedFieldType(soap*, ns3__ModifiedFieldType*) serialize to a stream
/// - ns3__ModifiedFieldType* ns3__ModifiedFieldType::soap_dup(soap*) returns deep copy of ns3__ModifiedFieldType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns3__ModifiedFieldType::soap_del() deep deletes ns3__ModifiedFieldType data members, use only after ns3__ModifiedFieldType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns3__ModifiedFieldType
{ public:
/// Element "Field" of XSD type xs:string.
    std::string*                         Field                          0;	///< Optional element.
/// Element "ModifyType" of XSD type "urn:ebay:apis:eBLBaseComponents":ModifyCodeType.
    enum ns3__ModifyCodeType*            ModifyType                     0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief "urn:ebay:apis:eBLBaseComponents":PaginationResultType is a complexType.
///
/// class ns3__PaginationResultType operations:
/// - ns3__PaginationResultType* soap_new_ns3__PaginationResultType(soap*) allocate and default initialize
/// - ns3__PaginationResultType* soap_new_ns3__PaginationResultType(soap*, int num) allocate array and default initialize values
/// - ns3__PaginationResultType* soap_new_req_ns3__PaginationResultType(soap*, ...) allocate, set required members
/// - ns3__PaginationResultType* soap_new_set_ns3__PaginationResultType(soap*, ...) allocate, set all public members
/// - ns3__PaginationResultType::soap_default(soap*) default initialize members
/// - int soap_read_ns3__PaginationResultType(soap*, ns3__PaginationResultType*) deserialize from a stream
/// - int soap_write_ns3__PaginationResultType(soap*, ns3__PaginationResultType*) serialize to a stream
/// - ns3__PaginationResultType* ns3__PaginationResultType::soap_dup(soap*) returns deep copy of ns3__PaginationResultType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns3__PaginationResultType::soap_del() deep deletes ns3__PaginationResultType data members, use only after ns3__PaginationResultType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns3__PaginationResultType
{ public:
/// Element "TotalNumberOfPages" of XSD type xs:int.
    int*                                 TotalNumberOfPages             0;	///< Optional element.
/// Element "TotalNumberOfEntries" of XSD type xs:int.
    int*                                 TotalNumberOfEntries           0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief "urn:ebay:apis:eBLBaseComponents":ErrorParameterType is a complexType.
///
/// class ns3__ErrorParameterType operations:
/// - ns3__ErrorParameterType* soap_new_ns3__ErrorParameterType(soap*) allocate and default initialize
/// - ns3__ErrorParameterType* soap_new_ns3__ErrorParameterType(soap*, int num) allocate array and default initialize values
/// - ns3__ErrorParameterType* soap_new_req_ns3__ErrorParameterType(soap*, ...) allocate, set required members
/// - ns3__ErrorParameterType* soap_new_set_ns3__ErrorParameterType(soap*, ...) allocate, set all public members
/// - ns3__ErrorParameterType::soap_default(soap*) default initialize members
/// - int soap_read_ns3__ErrorParameterType(soap*, ns3__ErrorParameterType*) deserialize from a stream
/// - int soap_write_ns3__ErrorParameterType(soap*, ns3__ErrorParameterType*) serialize to a stream
/// - ns3__ErrorParameterType* ns3__ErrorParameterType::soap_dup(soap*) returns deep copy of ns3__ErrorParameterType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns3__ErrorParameterType::soap_del() deep deletes ns3__ErrorParameterType data members, use only after ns3__ErrorParameterType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns3__ErrorParameterType
{ public:
/// <PRE><BLOCKQUOTE>
///   Value of the application-specific error parameter.
/// </BLOCKQUOTE></PRE>
/// Element "Value" of XSD type xs:string.
    std::string                          Value                          1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Specifies application-specific error parameter name.
/// </BLOCKQUOTE></PRE>
/// Attribute "ParamID" of XSD type xs:string.
   @std::string*                         ParamID                        0;	///< Optional attribute.
    struct soap                         *soap                          ;
};

/// @brief "urn:ebay:apis:eBLBaseComponents":ErrorType is a complexType.
///
/// class ns3__ErrorType operations:
/// - ns3__ErrorType* soap_new_ns3__ErrorType(soap*) allocate and default initialize
/// - ns3__ErrorType* soap_new_ns3__ErrorType(soap*, int num) allocate array and default initialize values
/// - ns3__ErrorType* soap_new_req_ns3__ErrorType(soap*, ...) allocate, set required members
/// - ns3__ErrorType* soap_new_set_ns3__ErrorType(soap*, ...) allocate, set all public members
/// - ns3__ErrorType::soap_default(soap*) default initialize members
/// - int soap_read_ns3__ErrorType(soap*, ns3__ErrorType*) deserialize from a stream
/// - int soap_write_ns3__ErrorType(soap*, ns3__ErrorType*) serialize to a stream
/// - ns3__ErrorType* ns3__ErrorType::soap_dup(soap*) returns deep copy of ns3__ErrorType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns3__ErrorType::soap_del() deep deletes ns3__ErrorType data members, use only after ns3__ErrorType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns3__ErrorType
{ public:
/// Element "ShortMessage" of XSD type xs:string.
    std::string                          ShortMessage                   1;	///< Required element.
/// Element "LongMessage" of XSD type xs:string.
    std::string*                         LongMessage                    0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Error code can be used by a receiving application to debugging a response message. These codes will need to be uniquely defined for each application.
/// </BLOCKQUOTE></PRE>
/// Element "ErrorCode" of XSD type xs:token.
    xsd__token                           ErrorCode                      1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   SeverityCode indicates whether the error is an application
///   level error or if it is informational error, i.e., warning.
/// </BLOCKQUOTE></PRE>
/// Element "SeverityCode" of XSD type "urn:ebay:apis:eBLBaseComponents":SeverityCodeType.
    enum ns3__SeverityCodeType           SeverityCode                   1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   This optional element may carry additional application-specific error variables that indicate specific information about the error condition particularly in the cases where there are multiple instances of the ErrorType which require additional context.
/// </BLOCKQUOTE></PRE>
/// Vector of ns3__ErrorParameterType* of length 0..unbounded.
    std::vector<ns3__ErrorParameterType*> ErrorParameters                0;	///< Elements.
    struct soap                         *soap                          ;
};

/// @brief "urn:ebay:apis:eBLBaseComponents":FaultDetailsType is a complexType.
///
/// class ns3__FaultDetailsType operations:
/// - ns3__FaultDetailsType* soap_new_ns3__FaultDetailsType(soap*) allocate and default initialize
/// - ns3__FaultDetailsType* soap_new_ns3__FaultDetailsType(soap*, int num) allocate array and default initialize values
/// - ns3__FaultDetailsType* soap_new_req_ns3__FaultDetailsType(soap*, ...) allocate, set required members
/// - ns3__FaultDetailsType* soap_new_set_ns3__FaultDetailsType(soap*, ...) allocate, set all public members
/// - ns3__FaultDetailsType::soap_default(soap*) default initialize members
/// - int soap_read_ns3__FaultDetailsType(soap*, ns3__FaultDetailsType*) deserialize from a stream
/// - int soap_write_ns3__FaultDetailsType(soap*, ns3__FaultDetailsType*) serialize to a stream
/// - ns3__FaultDetailsType* ns3__FaultDetailsType::soap_dup(soap*) returns deep copy of ns3__FaultDetailsType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns3__FaultDetailsType::soap_del() deep deletes ns3__FaultDetailsType data members, use only after ns3__FaultDetailsType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns3__FaultDetailsType
{ public:
/// <PRE><BLOCKQUOTE>
///   Error code can be used by a receiving application to debugging a SOAP response message that contain one or more SOAP Fault detail objects, i.e., fault detail sub-elements. These codes will need to be uniquely defined for each fault scenario.
/// </BLOCKQUOTE></PRE>
/// Element "ErrorCode" of XSD type xs:string.
    std::string                          ErrorCode                      1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Severity indicates whether the error is a serious fault
///   or if it is informational error, i.e., warning.
/// </BLOCKQUOTE></PRE>
/// Element "Severity" of XSD type xs:string.
    std::string                          Severity                       1;	///< Required element.
/// Element "DetailedMessage" of XSD type xs:string.
    std::string*                         DetailedMessage                0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief "urn:ebay:apis:eBLBaseComponents":AbstractRequestType is an abstract complexType.
///
/// <PRE><BLOCKQUOTE>
///   Base type definition of request payload that can carry any type of payload content with optional versioning information and detail level
///   requirements.
/// </BLOCKQUOTE></PRE>
/// class ns3__AbstractRequestType operations:
/// - ns3__AbstractRequestType* soap_new_ns3__AbstractRequestType(soap*) allocate and default initialize
/// - ns3__AbstractRequestType* soap_new_ns3__AbstractRequestType(soap*, int num) allocate array and default initialize values
/// - ns3__AbstractRequestType* soap_new_req_ns3__AbstractRequestType(soap*, ...) allocate, set required members
/// - ns3__AbstractRequestType* soap_new_set_ns3__AbstractRequestType(soap*, ...) allocate, set all public members
/// - ns3__AbstractRequestType::soap_default(soap*) default initialize members
/// - int soap_read_ns3__AbstractRequestType(soap*, ns3__AbstractRequestType*) deserialize from a stream
/// - int soap_write_ns3__AbstractRequestType(soap*, ns3__AbstractRequestType*) serialize to a stream
/// - ns3__AbstractRequestType* ns3__AbstractRequestType::soap_dup(soap*) returns deep copy of ns3__AbstractRequestType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns3__AbstractRequestType::soap_del() deep deletes ns3__AbstractRequestType data members, use only after ns3__AbstractRequestType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns3__AbstractRequestType
{ public:
/// <PRE><BLOCKQUOTE>
///   This specifies the required detail level that is needed by a client application pertaining to
///   a particular data component (e.g., Item, Transaction, etc.). The detail level is specified in
///   the DetailLevelCodeType which has all the enumerated values of the detail level for each component.
/// </BLOCKQUOTE></PRE>
/// Vector of enum ns3__DetailLevelCodeType of length 0..unbounded.
    std::vector<enum ns3__DetailLevelCodeType> DetailLevel                    0;	///< Elements.
/// <PRE><BLOCKQUOTE>
///   This should be the standard RFC 3066 language identification tag, e.g., en_US.
/// </BLOCKQUOTE></PRE>
/// Element "ErrorLanguage" of XSD type xs:string.
    std::string*                         ErrorLanguage                  0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   This refers to the version of the request payload schema.
/// </BLOCKQUOTE></PRE>
/// Element "Version" of XSD type xs:string.
    std::string                          Version                        1;	///< Required element.
/// @todo <any namespace="##local" minOccurs="0">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
    _XML                                 __any                         0;	///< Catch any element content in XML string.
    struct soap                         *soap                          ;
};

/// @brief "urn:ebay:apis:eBLBaseComponents":AbstractResponseType is an abstract complexType.
///
/// <PRE><BLOCKQUOTE>
///   Base type definition of a response payload that can carry any type of payload content with following optional elements:
///   - timestamp of response message, - application level acknowledgement, and - application-level errors and warnings.
/// </BLOCKQUOTE></PRE>
/// class ns3__AbstractResponseType operations:
/// - ns3__AbstractResponseType* soap_new_ns3__AbstractResponseType(soap*) allocate and default initialize
/// - ns3__AbstractResponseType* soap_new_ns3__AbstractResponseType(soap*, int num) allocate array and default initialize values
/// - ns3__AbstractResponseType* soap_new_req_ns3__AbstractResponseType(soap*, ...) allocate, set required members
/// - ns3__AbstractResponseType* soap_new_set_ns3__AbstractResponseType(soap*, ...) allocate, set all public members
/// - ns3__AbstractResponseType::soap_default(soap*) default initialize members
/// - int soap_read_ns3__AbstractResponseType(soap*, ns3__AbstractResponseType*) deserialize from a stream
/// - int soap_write_ns3__AbstractResponseType(soap*, ns3__AbstractResponseType*) serialize to a stream
/// - ns3__AbstractResponseType* ns3__AbstractResponseType::soap_dup(soap*) returns deep copy of ns3__AbstractResponseType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns3__AbstractResponseType::soap_del() deep deletes ns3__AbstractResponseType data members, use only after ns3__AbstractResponseType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns3__AbstractResponseType
{ public:
/// <PRE><BLOCKQUOTE>
///   This value represents the date and time (GMT) when the response was generated by a service provider (as a result of processing of a request).
/// </BLOCKQUOTE></PRE>
/// Element "Timestamp" of XSD type xs:dateTime.
    time_t*                              Timestamp                      0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Application level acknowledgement code.
/// </BLOCKQUOTE></PRE>
/// Element "Ack" of XSD type "urn:ebay:apis:eBLBaseComponents":AckCodeType.
    enum ns3__AckCodeType                Ack                            1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   CorrelationID may be used optionally with an application level acknowledgement.
/// </BLOCKQUOTE></PRE>
/// Element "CorrelationID" of XSD type xs:string.
    std::string*                         CorrelationID                  0;	///< Optional element.
/// Vector of ns3__ErrorType* of length 0..unbounded.
    std::vector<ns3__ErrorType*        > Errors                         0;	///< Elements.
/// <PRE><BLOCKQUOTE>
///   This refers to the version of the response payload schema.
/// </BLOCKQUOTE></PRE>
/// Element "Version" of XSD type xs:string.
    std::string                          Version                        1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   This refers to the specific software build that was used in the deployment for processing the request and generating the response.
/// </BLOCKQUOTE></PRE>
/// Element "Build" of XSD type xs:string.
    std::string                          Build                          1;	///< Required element.
/// @todo <any namespace="##local" minOccurs="0">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
    _XML                                 __any                         0;	///< Catch any element content in XML string.
    struct soap                         *soap                          ;
};

/// @brief "urn:ebay:apis:eBLBaseComponents":PhoneNumberType is a complexType.
///
/// class ns3__PhoneNumberType operations:
/// - ns3__PhoneNumberType* soap_new_ns3__PhoneNumberType(soap*) allocate and default initialize
/// - ns3__PhoneNumberType* soap_new_ns3__PhoneNumberType(soap*, int num) allocate array and default initialize values
/// - ns3__PhoneNumberType* soap_new_req_ns3__PhoneNumberType(soap*, ...) allocate, set required members
/// - ns3__PhoneNumberType* soap_new_set_ns3__PhoneNumberType(soap*, ...) allocate, set all public members
/// - ns3__PhoneNumberType::soap_default(soap*) default initialize members
/// - int soap_read_ns3__PhoneNumberType(soap*, ns3__PhoneNumberType*) deserialize from a stream
/// - int soap_write_ns3__PhoneNumberType(soap*, ns3__PhoneNumberType*) serialize to a stream
/// - ns3__PhoneNumberType* ns3__PhoneNumberType::soap_dup(soap*) returns deep copy of ns3__PhoneNumberType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns3__PhoneNumberType::soap_del() deep deletes ns3__PhoneNumberType data members, use only after ns3__PhoneNumberType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns3__PhoneNumberType
{ public:
/// <PRE><BLOCKQUOTE>
///   Country code associated with this phone number.
/// </BLOCKQUOTE></PRE>
/// Element "CountryCode" of XSD type xs:string.
    std::string*                         CountryCode                    0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Phone number associated with this phone.
/// </BLOCKQUOTE></PRE>
/// Element "PhoneNumber" of XSD type xs:string.
    std::string*                         PhoneNumber                    0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Extension associated with this phone number.
/// </BLOCKQUOTE></PRE>
/// Element "Extension" of XSD type xs:string.
    std::string*                         Extension                      0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief "urn:ebay:apis:eBLBaseComponents":AddressType is a complexType.
///
/// class ns3__AddressType operations:
/// - ns3__AddressType* soap_new_ns3__AddressType(soap*) allocate and default initialize
/// - ns3__AddressType* soap_new_ns3__AddressType(soap*, int num) allocate array and default initialize values
/// - ns3__AddressType* soap_new_req_ns3__AddressType(soap*, ...) allocate, set required members
/// - ns3__AddressType* soap_new_set_ns3__AddressType(soap*, ...) allocate, set all public members
/// - ns3__AddressType::soap_default(soap*) default initialize members
/// - int soap_read_ns3__AddressType(soap*, ns3__AddressType*) deserialize from a stream
/// - int soap_write_ns3__AddressType(soap*, ns3__AddressType*) serialize to a stream
/// - ns3__AddressType* ns3__AddressType::soap_dup(soap*) returns deep copy of ns3__AddressType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns3__AddressType::soap_del() deep deletes ns3__AddressType data members, use only after ns3__AddressType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns3__AddressType
{ public:
/// <PRE><BLOCKQUOTE>
///   Person's name associated with this address. <br/>Character length and limitations: 32 single-byte alphanumeric characters
/// </BLOCKQUOTE></PRE>
/// Element "Name" of XSD type xs:string.
    std::string*                         Name                           0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   First street address. <br/>Character length and limitations: 300 single-byte alphanumeric characters
/// </BLOCKQUOTE></PRE>
/// Element "Street1" of XSD type xs:string.
    std::string*                         Street1                        0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Second street address. <br/>Character length and limitations: 300 single-byte alphanumeric characters
/// </BLOCKQUOTE></PRE>
/// Element "Street2" of XSD type xs:string.
    std::string*                         Street2                        0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Name of city. <br/>Character length and limitations: 120 single-byte alphanumeric characters
/// </BLOCKQUOTE></PRE>
/// Element "CityName" of XSD type xs:string.
    std::string*                         CityName                       0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   State or province. <br/>Character length and limitations: 120 single-byte alphanumeric characters
///   <br/>
///   <br/>
///   For Canada and the USA, StateOrProvince must be the standard 2-character abbreviation of a state or province.
///   <br/>
///   <br/>
///   <b>Canadian Provinces</b>
///   <table>
///   <tr>
///   <td>Alberta</td>
///   <td>AB </td>
///   </tr>
///   <tr>
///   <td>British_Columbia</td>
///   <td>BC</td>
///   </tr>
///   <tr>
///   <td>Manitoba</td>
///   <td>MB</td>
///   </tr>
///   <tr>
///   <td>New_Brunswick</td>
///   <td>NB</td>
///   </tr>
///   <tr>
///   <td>Newfoundland</td>
///   <td>NF</td>
///   </tr>
///   <tr>
///   <td>Northwest_Territories</td>
///   <td>NT</td>
///   </tr>
///   <tr>
///   <td>Nova_Scotia</td>
///   <td>NS </td>
///   </tr>
///   <tr>
///   <td>Nunavut</td>
///   <td>NU</td>
///   </tr>
///   <tr>
///   <td>Ontario</td>
///   <td>ON</td>
///   </tr>
///   <tr>
///   <td>Prince_Edward_Island</td>
///   <td>PE</td>
///   </tr>
///   <tr>
///   <td>Quebec</td>
///   <td>QC</td>
///   </tr>
///   <tr>
///   <td>Saskatchewan</td>
///   <td>SK</td>
///   </tr>
///   <tr>
///   <td>Yukon</td>
///   <td>YK</td>
///   </tr>
///   </table>
///   <br/>
///   <br/>
///   <b>United States</b>
///   <table>
///   <tr>
///   <td>Alabama</td>
///   <td/>
///   </tr> AL <tr>
///   <td>Alaska</td>
///   <td>AK</td>
///   </tr>
///   <tr>
///   <td>American_Samoa</td>
///   <td>AS</td>
///   </tr>
///   <tr>
///   <td>Arizona</td>
///   <td>AZ</td>
///   </tr>
///   <tr>
///   <td>Arkansas</td>
///   <td>AR</td>
///   </tr>
///   <tr>
///   <td>California</td>
///   <td>CA</td>
///   </tr>
///   <tr>
///   <td>Colorado</td>
///   <td>CO</td>
///   </tr>
///   <tr>
///   <td>Connecticut</td>
///   <td>CT</td>
///   </tr>
///   <tr>
///   <td>Delaware</td>
///   <td>DE</td>
///   </tr>
///   <tr>
///   <td>District_Of_Columbia</td>
///   <td>DC</td>
///   </tr>
///   <tr>
///   <td>Federated_States_Of_Micronesia</td>
///   <td>FM</td>
///   </tr>
///   <tr>
///   <td>Florida</td>
///   <td>FL</td>
///   </tr>
///   <tr>
///   <td>Georgia</td>
///   <td>GA</td>
///   </tr>
///   <tr>
///   <td>Guam</td>
///   <td>GU</td>
///   </tr>
///   <tr>
///   <td>Hawaii</td>
///   <td>HI</td>
///   </tr>
///   <tr>
///   <td>Idaho</td>
///   <td>ID </td>
///   </tr>
///   <tr>
///   <td>Illinois</td>
///   <td>IL</td>
///   </tr>
///   <tr>
///   <td>Indiana</td>
///   <td>IN</td>
///   </tr>
///   <tr>
///   <td>Iowa</td>
///   <td>IA</td>
///   </tr>
///   <tr>
///   <td>Kansas</td>
///   <td>KS</td>
///   </tr>
///   <tr>
///   <td>Kentucky</td>
///   <td>KY</td>
///   </tr>
///   <tr>
///   <td>Louisiana</td>
///   <td>LA</td>
///   </tr>
///   <tr>
///   <td>Maine</td>
///   <td>ME</td>
///   </tr>
///   <tr>
///   <td>Marshall_Islands</td>
///   <td>MH</td>
///   </tr>
///   <tr>
///   <td>Maryland</td>
///   <td>MD</td>
///   </tr>
///   <tr>
///   <td>Massachusetts</td>
///   <td>MA</td>
///   </tr>
///   <tr>
///   <td>Michigan</td>
///   <td>MI</td>
///   </tr>
///   <tr>
///   <td>Minnesota</td>
///   <td>MN</td>
///   </tr>
///   <tr>
///   <td>Mississippi</td>
///   <td>MS</td>
///   </tr>
///   <tr>
///   <td>Missouri</td>
///   <td>MO</td>
///   </tr>
///   <tr>
///   <td>Montana</td>
///   <td>MT</td>
///   </tr>
///   <tr>
///   <td>Nebraska</td>
///   <td>NE</td>
///   </tr>
///   <tr>
///   <td>Nevada</td>
///   <td>NV</td>
///   </tr>
///   <tr>
///   <td>New_Hampshire</td>
///   <td>NH</td>
///   </tr>
///   <tr>
///   <td>New_Jersey</td>
///   <td>NJ</td>
///   </tr>
///   <tr>
///   <td>New_Mexico</td>
///   <td>NM</td>
///   </tr>
///   <tr>
///   <td>New_York</td>
///   <td>NY</td>
///   </tr>
///   <tr>
///   <td>North_Carolina</td>
///   <td>NC</td>
///   </tr>
///   <tr>
///   <td>North_Dakota</td>
///   <td>ND</td>
///   </tr>
///   <tr>
///   <td>Northern_Mariana_Islands</td>
///   <td>MP</td>
///   </tr>
///   <tr>
///   <td>Ohio</td>
///   <td>OH </td>
///   </tr>
///   <tr>
///   <td>Oklahoma</td>
///   <td>OK</td>
///   </tr>
///   <tr>
///   <td>Oregon</td>
///   <td>OR</td>
///   </tr>
///   <tr>
///   <td>Palau</td>
///   <td>PW</td>
///   </tr>
///   <tr>
///   <td>Pennsylvania</td>
///   <td>PA</td>
///   </tr>
///   <tr>
///   <td>Puerto_Rico</td>
///   <td>PR</td>
///   </tr>
///   <tr>
///   <td>Rhode_Island</td>
///   <td>RI</td>
///   </tr>
///   <tr>
///   <td>South_Carolina</td>
///   <td>SC</td>
///   </tr>
///   <tr>
///   <td>South_Dakota</td>
///   <td>SD</td>
///   </tr>
///   <tr>
///   <td>Tennessee</td>
///   <td>TN </td>
///   </tr>
///   <tr>
///   <td>Texas</td>
///   <td>TX</td>
///   </tr>
///   <tr>
///   <td>Utah</td>
///   <td>UT</td>
///   </tr>
///   <tr>
///   <td>Vermont</td>
///   <td>VT</td>
///   </tr>
///   <tr>
///   <td>Virgin_Islands</td>
///   <td>VI</td>
///   </tr>
///   <tr>
///   <td>Virginia</td>
///   <td>VA</td>
///   </tr>
///   <tr>
///   <td>Washington</td>
///   <td>WA</td>
///   </tr>
///   <tr>
///   <td>West_Virginia</td>
///   <td>WV</td>
///   </tr>
///   <tr>
///   <td>Wisconsin</td>
///   <td>WI</td>
///   </tr>
///   <tr>
///   <td>Wyoming</td>
///   <td>WY</td>
///   </tr>
///   <tr>
///   <td>Armed_Forces_Americas</td>
///   <td>AA</td>
///   </tr>
///   <tr>
///   <td>Armed_Forces</td>
///   <td>AE</td>
///   </tr>
///   <tr>
///   <td>Armed_Forces_Pacific</td>
///   <td>AP</td>
///   </tr>
///   </table>
/// </BLOCKQUOTE></PRE>
/// Element "StateOrProvince" of XSD type xs:string.
    std::string*                         StateOrProvince                0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   ISO 3166 standard country code
///   <br/>Character limit: Two single-byte characters.
/// </BLOCKQUOTE></PRE>
/// Element reference "urn:ebay:apis:eBLBaseComponents:""urn:ebay:apis:eBLBaseComponents":Country.
    enum ns3__CountryCodeType*           Country                        0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   IMPORTANT: Do not set this element for SetExpressCheckout, DoExpressCheckoutPayment, DoDirectPayment, CreateRecurringPaymentsProfile or UpdateRecurringPaymentsProfile.
///   <br/>
///   <br/>
///   This element should only be used in response elements and typically
///   should not be used in creating request messages which specify the name of a country using the Country element (which refers to a
///   2-letter country code).
/// </BLOCKQUOTE></PRE>
/// Element reference "urn:ebay:apis:eBLBaseComponents:""urn:ebay:apis:eBLBaseComponents":CountryName.
    std::string*                         CountryName                    0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Telephone number associated with this address
/// </BLOCKQUOTE></PRE>
/// Element "Phone" of XSD type xs:string.
    std::string*                         Phone                          0;	///< Optional element.
/// Element "PostalCode" of XSD type xs:string.
    std::string*                         PostalCode                     0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   IMPORTANT: Do not set this element for SetExpressCheckout, DoExpressCheckoutPayment, DoDirectPayment, CreateRecurringPaymentsProfile, or UpdateRecurringPaymentsProfile.
/// </BLOCKQUOTE></PRE>
/// Element "AddressID" of XSD type xs:string.
    std::string*                         AddressID                      0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   IMPORTANT: Do not set this element for SetExpressCheckout, DoExpressCheckoutPayment, DoDirectPayment, CreateRecurringPaymentsProfile or UpdateRecurringPaymentsProfile.
/// </BLOCKQUOTE></PRE>
/// Element "AddressOwner" of XSD type "urn:ebay:apis:eBLBaseComponents":AddressOwnerCodeType.
    enum ns3__AddressOwnerCodeType*      AddressOwner                   0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   IMPORTANT: Do not set this element for SetExpressCheckout, DoExpressCheckoutPayment, DoDirectPayment, CreateRecurringPaymentsProfile or UpdateRecurringPaymentsProfile.
/// </BLOCKQUOTE></PRE>
/// Element "ExternalAddressID" of XSD type xs:string.
    std::string*                         ExternalAddressID              0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   IMPORTANT: Do not set this element for SetExpressCheckout, DoExpressCheckoutPayment, DoDirectPayment, CreateRecurringPaymentsProfile or UpdateRecurringPaymentsProfile.
///   <br/>
///   <br/>
///   Only applicable to SellerPaymentAddress today. Seller's international name that is associated with the payment address.
/// </BLOCKQUOTE></PRE>
/// Element "InternationalName" of XSD type xs:string.
    std::string*                         InternationalName              0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   IMPORTANT: Do not set this element for SetExpressCheckout, DoExpressCheckoutPayment, DoDirectPayment, CreateRecurringPaymentsProfile or UpdateRecurringPaymentsProfile.
///   <br/>
///   <br/>
///   Only applicable to SellerPaymentAddress today. International state and city for the seller's payment address.
/// </BLOCKQUOTE></PRE>
/// Element "InternationalStateAndCity" of XSD type xs:string.
    std::string*                         InternationalStateAndCity      0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   IMPORTANT: Do not set this element for SetExpressCheckout, DoExpressCheckoutPayment, DoDirectPayment, CreateRecurringPaymentsProfile or UpdateRecurringPaymentsProfile.
///   <br/>
///   <br/>
///   Only applicable to SellerPaymentAddress today. Seller's international street address that is associated with the payment address.
/// </BLOCKQUOTE></PRE>
/// Element "InternationalStreet" of XSD type xs:string.
    std::string*                         InternationalStreet            0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Status of the address on file with PayPal.
///   <br/>
///   <br/> IMPORTANT: Do not set this element for SetExpressCheckout, DoExpressCheckoutPayment, DoDirectPayment, CreateRecurringPaymentsProfile or UpdateRecurringPaymentsProfile.
///   <br/>
///   <br/>
/// </BLOCKQUOTE></PRE>
/// Element "AddressStatus" of XSD type "urn:ebay:apis:eBLBaseComponents":AddressStatusCodeType.
    enum ns3__AddressStatusCodeType*     AddressStatus                  0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Returns Normalization Status of the Address. Possible values are Normalized, Unnormalized, and None.
/// </BLOCKQUOTE></PRE>
/// Element "AddressNormalizationStatus" of XSD type "urn:ebay:apis:eBLBaseComponents":AddressNormalizationStatusCodeType.
    enum ns3__AddressNormalizationStatusCodeType*  AddressNormalizationStatus     0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief "urn:ebay:apis:eBLBaseComponents":PersonNameType is a complexType.
///
/// class ns3__PersonNameType operations:
/// - ns3__PersonNameType* soap_new_ns3__PersonNameType(soap*) allocate and default initialize
/// - ns3__PersonNameType* soap_new_ns3__PersonNameType(soap*, int num) allocate array and default initialize values
/// - ns3__PersonNameType* soap_new_req_ns3__PersonNameType(soap*, ...) allocate, set required members
/// - ns3__PersonNameType* soap_new_set_ns3__PersonNameType(soap*, ...) allocate, set all public members
/// - ns3__PersonNameType::soap_default(soap*) default initialize members
/// - int soap_read_ns3__PersonNameType(soap*, ns3__PersonNameType*) deserialize from a stream
/// - int soap_write_ns3__PersonNameType(soap*, ns3__PersonNameType*) serialize to a stream
/// - ns3__PersonNameType* ns3__PersonNameType::soap_dup(soap*) returns deep copy of ns3__PersonNameType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns3__PersonNameType::soap_del() deep deletes ns3__PersonNameType data members, use only after ns3__PersonNameType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns3__PersonNameType
{ public:
/// Element "Salutation" of XSD type "urn:ebay:apis:eBLBaseComponents":SalutationType.
    ns3__SalutationType*                 Salutation                     0;	///< Optional element.
/// Element "FirstName" of XSD type "urn:ebay:apis:eBLBaseComponents":NameType.
    ns3__NameType*                       FirstName                      0;	///< Optional element.
/// Element "MiddleName" of XSD type "urn:ebay:apis:eBLBaseComponents":NameType.
    ns3__NameType*                       MiddleName                     0;	///< Optional element.
/// Element "LastName" of XSD type "urn:ebay:apis:eBLBaseComponents":NameType.
    ns3__NameType*                       LastName                       0;	///< Optional element.
/// Element "Suffix" of XSD type "urn:ebay:apis:eBLBaseComponents":SuffixType.
    ns3__SuffixType*                     Suffix                         0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief "urn:ebay:apis:eBLBaseComponents":IncentiveAppliedToType is a complexType.
///
/// class ns3__IncentiveAppliedToType operations:
/// - ns3__IncentiveAppliedToType* soap_new_ns3__IncentiveAppliedToType(soap*) allocate and default initialize
/// - ns3__IncentiveAppliedToType* soap_new_ns3__IncentiveAppliedToType(soap*, int num) allocate array and default initialize values
/// - ns3__IncentiveAppliedToType* soap_new_req_ns3__IncentiveAppliedToType(soap*, ...) allocate, set required members
/// - ns3__IncentiveAppliedToType* soap_new_set_ns3__IncentiveAppliedToType(soap*, ...) allocate, set all public members
/// - ns3__IncentiveAppliedToType::soap_default(soap*) default initialize members
/// - int soap_read_ns3__IncentiveAppliedToType(soap*, ns3__IncentiveAppliedToType*) deserialize from a stream
/// - int soap_write_ns3__IncentiveAppliedToType(soap*, ns3__IncentiveAppliedToType*) serialize to a stream
/// - ns3__IncentiveAppliedToType* ns3__IncentiveAppliedToType::soap_dup(soap*) returns deep copy of ns3__IncentiveAppliedToType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns3__IncentiveAppliedToType::soap_del() deep deletes ns3__IncentiveAppliedToType data members, use only after ns3__IncentiveAppliedToType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns3__IncentiveAppliedToType
{ public:
/// Element "BucketId" of XSD type xs:string.
    std::string*                         BucketId                       0;	///< Optional element.
/// Element "ItemId" of XSD type xs:string.
    std::string*                         ItemId                         0;	///< Optional element.
/// Element "IncentiveAmount" of XSD type "urn:ebay:apis:CoreComponentTypes":BasicAmountType.
    ns2__BasicAmountType*                IncentiveAmount                0;	///< Optional element.
/// Element "SubType" of XSD type xs:string.
    std::string*                         SubType                        0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief "urn:ebay:apis:eBLBaseComponents":IncentiveDetailType is a complexType.
///
/// class ns3__IncentiveDetailType operations:
/// - ns3__IncentiveDetailType* soap_new_ns3__IncentiveDetailType(soap*) allocate and default initialize
/// - ns3__IncentiveDetailType* soap_new_ns3__IncentiveDetailType(soap*, int num) allocate array and default initialize values
/// - ns3__IncentiveDetailType* soap_new_req_ns3__IncentiveDetailType(soap*, ...) allocate, set required members
/// - ns3__IncentiveDetailType* soap_new_set_ns3__IncentiveDetailType(soap*, ...) allocate, set all public members
/// - ns3__IncentiveDetailType::soap_default(soap*) default initialize members
/// - int soap_read_ns3__IncentiveDetailType(soap*, ns3__IncentiveDetailType*) deserialize from a stream
/// - int soap_write_ns3__IncentiveDetailType(soap*, ns3__IncentiveDetailType*) serialize to a stream
/// - ns3__IncentiveDetailType* ns3__IncentiveDetailType::soap_dup(soap*) returns deep copy of ns3__IncentiveDetailType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns3__IncentiveDetailType::soap_del() deep deletes ns3__IncentiveDetailType data members, use only after ns3__IncentiveDetailType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns3__IncentiveDetailType
{ public:
/// Element "RedemptionCode" of XSD type xs:string.
    std::string*                         RedemptionCode                 0;	///< Optional element.
/// Element "DisplayCode" of XSD type xs:string.
    std::string*                         DisplayCode                    0;	///< Optional element.
/// Element "ProgramId" of XSD type xs:string.
    std::string*                         ProgramId                      0;	///< Optional element.
/// Element "IncentiveType" of XSD type "urn:ebay:apis:eBLBaseComponents":IncentiveTypeCodeType.
    enum ns3__IncentiveTypeCodeType*     IncentiveType                  0;	///< Optional element.
/// Element "IncentiveDescription" of XSD type xs:string.
    std::string*                         IncentiveDescription           0;	///< Optional element.
/// Vector of ns3__IncentiveAppliedToType* of length 0..unbounded.
    std::vector<ns3__IncentiveAppliedToType*> AppliedTo                      0;	///< Elements.
/// Element "Status" of XSD type xs:string.
    std::string*                         Status                         0;	///< Optional element.
/// Element "ErrorCode" of XSD type xs:string.
    std::string*                         ErrorCode                      0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief "urn:ebay:apis:eBLBaseComponents":IncentiveItemType is a complexType.
///
/// class ns3__IncentiveItemType operations:
/// - ns3__IncentiveItemType* soap_new_ns3__IncentiveItemType(soap*) allocate and default initialize
/// - ns3__IncentiveItemType* soap_new_ns3__IncentiveItemType(soap*, int num) allocate array and default initialize values
/// - ns3__IncentiveItemType* soap_new_req_ns3__IncentiveItemType(soap*, ...) allocate, set required members
/// - ns3__IncentiveItemType* soap_new_set_ns3__IncentiveItemType(soap*, ...) allocate, set all public members
/// - ns3__IncentiveItemType::soap_default(soap*) default initialize members
/// - int soap_read_ns3__IncentiveItemType(soap*, ns3__IncentiveItemType*) deserialize from a stream
/// - int soap_write_ns3__IncentiveItemType(soap*, ns3__IncentiveItemType*) serialize to a stream
/// - ns3__IncentiveItemType* ns3__IncentiveItemType::soap_dup(soap*) returns deep copy of ns3__IncentiveItemType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns3__IncentiveItemType::soap_del() deep deletes ns3__IncentiveItemType data members, use only after ns3__IncentiveItemType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns3__IncentiveItemType
{ public:
/// Element "ItemId" of XSD type xs:string.
    std::string*                         ItemId                         0;	///< Optional element.
/// Element "PurchaseTime" of XSD type xs:dateTime.
    time_t*                              PurchaseTime                   0;	///< Optional element.
/// Element "ItemCategoryList" of XSD type xs:string.
    std::string*                         ItemCategoryList               0;	///< Optional element.
/// Element "ItemPrice" of XSD type "urn:ebay:apis:CoreComponentTypes":BasicAmountType.
    ns2__BasicAmountType*                ItemPrice                      0;	///< Optional element.
/// Element "ItemQuantity" of XSD type xs:integer.
    xsd__integer*                        ItemQuantity                   0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief "urn:ebay:apis:eBLBaseComponents":IncentiveBucketType is a complexType.
///
/// class ns3__IncentiveBucketType operations:
/// - ns3__IncentiveBucketType* soap_new_ns3__IncentiveBucketType(soap*) allocate and default initialize
/// - ns3__IncentiveBucketType* soap_new_ns3__IncentiveBucketType(soap*, int num) allocate array and default initialize values
/// - ns3__IncentiveBucketType* soap_new_req_ns3__IncentiveBucketType(soap*, ...) allocate, set required members
/// - ns3__IncentiveBucketType* soap_new_set_ns3__IncentiveBucketType(soap*, ...) allocate, set all public members
/// - ns3__IncentiveBucketType::soap_default(soap*) default initialize members
/// - int soap_read_ns3__IncentiveBucketType(soap*, ns3__IncentiveBucketType*) deserialize from a stream
/// - int soap_write_ns3__IncentiveBucketType(soap*, ns3__IncentiveBucketType*) serialize to a stream
/// - ns3__IncentiveBucketType* ns3__IncentiveBucketType::soap_dup(soap*) returns deep copy of ns3__IncentiveBucketType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns3__IncentiveBucketType::soap_del() deep deletes ns3__IncentiveBucketType data members, use only after ns3__IncentiveBucketType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns3__IncentiveBucketType
{ public:
/// Vector of ns3__IncentiveItemType* of length 0..unbounded.
    std::vector<ns3__IncentiveItemType*> Items                          0;	///< Elements.
/// Element "BucketId" of XSD type xs:string.
    std::string*                         BucketId                       0;	///< Optional element.
/// Element "SellerId" of XSD type xs:string.
    std::string*                         SellerId                       0;	///< Optional element.
/// Element "ExternalSellerId" of XSD type xs:string.
    std::string*                         ExternalSellerId               0;	///< Optional element.
/// Element "BucketSubtotalAmt" of XSD type "urn:ebay:apis:CoreComponentTypes":BasicAmountType.
    ns2__BasicAmountType*                BucketSubtotalAmt              0;	///< Optional element.
/// Element "BucketShippingAmt" of XSD type "urn:ebay:apis:CoreComponentTypes":BasicAmountType.
    ns2__BasicAmountType*                BucketShippingAmt              0;	///< Optional element.
/// Element "BucketInsuranceAmt" of XSD type "urn:ebay:apis:CoreComponentTypes":BasicAmountType.
    ns2__BasicAmountType*                BucketInsuranceAmt             0;	///< Optional element.
/// Element "BucketSalesTaxAmt" of XSD type "urn:ebay:apis:CoreComponentTypes":BasicAmountType.
    ns2__BasicAmountType*                BucketSalesTaxAmt              0;	///< Optional element.
/// Element "BucketTotalAmt" of XSD type "urn:ebay:apis:CoreComponentTypes":BasicAmountType.
    ns2__BasicAmountType*                BucketTotalAmt                 0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief "urn:ebay:apis:eBLBaseComponents":IncentiveRequestDetailsType is a complexType.
///
/// class ns3__IncentiveRequestDetailsType operations:
/// - ns3__IncentiveRequestDetailsType* soap_new_ns3__IncentiveRequestDetailsType(soap*) allocate and default initialize
/// - ns3__IncentiveRequestDetailsType* soap_new_ns3__IncentiveRequestDetailsType(soap*, int num) allocate array and default initialize values
/// - ns3__IncentiveRequestDetailsType* soap_new_req_ns3__IncentiveRequestDetailsType(soap*, ...) allocate, set required members
/// - ns3__IncentiveRequestDetailsType* soap_new_set_ns3__IncentiveRequestDetailsType(soap*, ...) allocate, set all public members
/// - ns3__IncentiveRequestDetailsType::soap_default(soap*) default initialize members
/// - int soap_read_ns3__IncentiveRequestDetailsType(soap*, ns3__IncentiveRequestDetailsType*) deserialize from a stream
/// - int soap_write_ns3__IncentiveRequestDetailsType(soap*, ns3__IncentiveRequestDetailsType*) serialize to a stream
/// - ns3__IncentiveRequestDetailsType* ns3__IncentiveRequestDetailsType::soap_dup(soap*) returns deep copy of ns3__IncentiveRequestDetailsType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns3__IncentiveRequestDetailsType::soap_del() deep deletes ns3__IncentiveRequestDetailsType data members, use only after ns3__IncentiveRequestDetailsType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns3__IncentiveRequestDetailsType
{ public:
/// Element "RequestId" of XSD type xs:string.
    std::string*                         RequestId                      0;	///< Optional element.
/// Element "RequestType" of XSD type "urn:ebay:apis:eBLBaseComponents":IncentiveRequestCodeType.
    enum ns3__IncentiveRequestCodeType*  RequestType                    0;	///< Optional element.
/// Element "RequestDetailLevel" of XSD type "urn:ebay:apis:eBLBaseComponents":IncentiveRequestDetailLevelCodeType.
    enum ns3__IncentiveRequestDetailLevelCodeType*  RequestDetailLevel             0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief "urn:ebay:apis:eBLBaseComponents":GetIncentiveEvaluationRequestDetailsType is a complexType.
///
/// class ns3__GetIncentiveEvaluationRequestDetailsType operations:
/// - ns3__GetIncentiveEvaluationRequestDetailsType* soap_new_ns3__GetIncentiveEvaluationRequestDetailsType(soap*) allocate and default initialize
/// - ns3__GetIncentiveEvaluationRequestDetailsType* soap_new_ns3__GetIncentiveEvaluationRequestDetailsType(soap*, int num) allocate array and default initialize values
/// - ns3__GetIncentiveEvaluationRequestDetailsType* soap_new_req_ns3__GetIncentiveEvaluationRequestDetailsType(soap*, ...) allocate, set required members
/// - ns3__GetIncentiveEvaluationRequestDetailsType* soap_new_set_ns3__GetIncentiveEvaluationRequestDetailsType(soap*, ...) allocate, set all public members
/// - ns3__GetIncentiveEvaluationRequestDetailsType::soap_default(soap*) default initialize members
/// - int soap_read_ns3__GetIncentiveEvaluationRequestDetailsType(soap*, ns3__GetIncentiveEvaluationRequestDetailsType*) deserialize from a stream
/// - int soap_write_ns3__GetIncentiveEvaluationRequestDetailsType(soap*, ns3__GetIncentiveEvaluationRequestDetailsType*) serialize to a stream
/// - ns3__GetIncentiveEvaluationRequestDetailsType* ns3__GetIncentiveEvaluationRequestDetailsType::soap_dup(soap*) returns deep copy of ns3__GetIncentiveEvaluationRequestDetailsType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns3__GetIncentiveEvaluationRequestDetailsType::soap_del() deep deletes ns3__GetIncentiveEvaluationRequestDetailsType data members, use only after ns3__GetIncentiveEvaluationRequestDetailsType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns3__GetIncentiveEvaluationRequestDetailsType
{ public:
/// Element "ExternalBuyerId" of XSD type xs:string.
    std::string*                         ExternalBuyerId                0;	///< Optional element.
/// Vector of std::string of length 0..1000.
    std::vector<std::string            > IncentiveCodes                 0:1000;	///< Elements.
/// Vector of ns3__IncentiveApplyIndicationType* of length 0..1000.
    std::vector<ns3__IncentiveApplyIndicationType*> ApplyIndication                0:1000;	///< Elements.
/// Vector of ns3__IncentiveBucketType* of length 0..100.
    std::vector<ns3__IncentiveBucketType*> Buckets                        0:100;	///< Elements.
/// Element "CartTotalAmt" of XSD type "urn:ebay:apis:CoreComponentTypes":BasicAmountType.
    ns2__BasicAmountType*                CartTotalAmt                   0;	///< Optional element.
/// Element "RequestDetails" of XSD type "urn:ebay:apis:eBLBaseComponents":IncentiveRequestDetailsType.
    ns3__IncentiveRequestDetailsType*    RequestDetails                 0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief "urn:ebay:apis:eBLBaseComponents":GetIncentiveEvaluationResponseDetailsType is a complexType.
///
/// class ns3__GetIncentiveEvaluationResponseDetailsType operations:
/// - ns3__GetIncentiveEvaluationResponseDetailsType* soap_new_ns3__GetIncentiveEvaluationResponseDetailsType(soap*) allocate and default initialize
/// - ns3__GetIncentiveEvaluationResponseDetailsType* soap_new_ns3__GetIncentiveEvaluationResponseDetailsType(soap*, int num) allocate array and default initialize values
/// - ns3__GetIncentiveEvaluationResponseDetailsType* soap_new_req_ns3__GetIncentiveEvaluationResponseDetailsType(soap*, ...) allocate, set required members
/// - ns3__GetIncentiveEvaluationResponseDetailsType* soap_new_set_ns3__GetIncentiveEvaluationResponseDetailsType(soap*, ...) allocate, set all public members
/// - ns3__GetIncentiveEvaluationResponseDetailsType::soap_default(soap*) default initialize members
/// - int soap_read_ns3__GetIncentiveEvaluationResponseDetailsType(soap*, ns3__GetIncentiveEvaluationResponseDetailsType*) deserialize from a stream
/// - int soap_write_ns3__GetIncentiveEvaluationResponseDetailsType(soap*, ns3__GetIncentiveEvaluationResponseDetailsType*) serialize to a stream
/// - ns3__GetIncentiveEvaluationResponseDetailsType* ns3__GetIncentiveEvaluationResponseDetailsType::soap_dup(soap*) returns deep copy of ns3__GetIncentiveEvaluationResponseDetailsType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns3__GetIncentiveEvaluationResponseDetailsType::soap_del() deep deletes ns3__GetIncentiveEvaluationResponseDetailsType data members, use only after ns3__GetIncentiveEvaluationResponseDetailsType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns3__GetIncentiveEvaluationResponseDetailsType
{ public:
/// Vector of ns3__IncentiveDetailType* of length 0..1000.
    std::vector<ns3__IncentiveDetailType*> IncentiveDetails               0:1000;	///< Elements.
/// Element "RequestId" of XSD type xs:string.
    std::string*                         RequestId                      0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief "urn:ebay:apis:eBLBaseComponents":SetExpressCheckoutRequestDetailsType is a complexType.
///
/// class ns3__SetExpressCheckoutRequestDetailsType operations:
/// - ns3__SetExpressCheckoutRequestDetailsType* soap_new_ns3__SetExpressCheckoutRequestDetailsType(soap*) allocate and default initialize
/// - ns3__SetExpressCheckoutRequestDetailsType* soap_new_ns3__SetExpressCheckoutRequestDetailsType(soap*, int num) allocate array and default initialize values
/// - ns3__SetExpressCheckoutRequestDetailsType* soap_new_req_ns3__SetExpressCheckoutRequestDetailsType(soap*, ...) allocate, set required members
/// - ns3__SetExpressCheckoutRequestDetailsType* soap_new_set_ns3__SetExpressCheckoutRequestDetailsType(soap*, ...) allocate, set all public members
/// - ns3__SetExpressCheckoutRequestDetailsType::soap_default(soap*) default initialize members
/// - int soap_read_ns3__SetExpressCheckoutRequestDetailsType(soap*, ns3__SetExpressCheckoutRequestDetailsType*) deserialize from a stream
/// - int soap_write_ns3__SetExpressCheckoutRequestDetailsType(soap*, ns3__SetExpressCheckoutRequestDetailsType*) serialize to a stream
/// - ns3__SetExpressCheckoutRequestDetailsType* ns3__SetExpressCheckoutRequestDetailsType::soap_dup(soap*) returns deep copy of ns3__SetExpressCheckoutRequestDetailsType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns3__SetExpressCheckoutRequestDetailsType::soap_del() deep deletes ns3__SetExpressCheckoutRequestDetailsType data members, use only after ns3__SetExpressCheckoutRequestDetailsType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns3__SetExpressCheckoutRequestDetailsType
{ public:
/// <PRE><BLOCKQUOTE>
///   The total cost of the order to the customer. If shipping cost and tax charges are known, include them in OrderTotal; if not, OrderTotal should be the current sub-total of the order. <br/>
///   <br/>
///   You must set the currencyID attribute to one of the three-character currency codes for any of the supported PayPal currencies. <br/>
///   <br/>
///   Limitations: Must not exceed $10,000 USD in any currency. No currency symbol. Decimal separator must be a period (.), and the thousands separator must be a comma (,).
/// </BLOCKQUOTE></PRE>
/// Element "OrderTotal" of XSD type "urn:ebay:apis:CoreComponentTypes":BasicAmountType.
    ns2__BasicAmountType*                OrderTotal                     0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   URL to which the customer's browser is returned after choosing to pay with PayPal. PayPal recommends that the value of ReturnURL be the final review page on which the customer confirms the order and payment. <br/>
///   <br/>
///   <b>Required</b>
///   <br/>
///   <br/>
///   Character length and limitations: no limit.
/// </BLOCKQUOTE></PRE>
/// Element "ReturnURL" of XSD type xs:string.
    std::string                          ReturnURL                      1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   URL to which the customer is returned if he does not approve the use of PayPal to pay you. PayPal recommends that the value of CancelURL be the original page on which the customer chose to pay with PayPal. <br/>
///   <br/>
///   <b>Required</b>
///   <br/>
///   <br/>
///   Character length and limitations: no limit
/// </BLOCKQUOTE></PRE>
/// Element "CancelURL" of XSD type xs:string.
    std::string                          CancelURL                      1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Tracking URL for ebay. <br/>
///   <br/>
///   <b>Required</b>
///   <br/>
///   <br/>
///   Character length and limitations: no limit
/// </BLOCKQUOTE></PRE>
/// Element "TrackingImageURL" of XSD type xs:string.
    std::string*                         TrackingImageURL               0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   URL to which the customer's browser is returned after paying with giropay online. <br/>
///   <br/>
///   Optional
///   <br/>
///   <br/>Character length and limitations: no limit.
/// </BLOCKQUOTE></PRE>
/// Element "giropaySuccessURL" of XSD type xs:string.
    std::string*                         giropaySuccessURL              0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   URL to which the customer's browser is returned after fail to pay with giropay online. <br/>
///   <br/>
///   Optional
///   <br/>
///   <br/>Character length and limitations: no limit.
/// </BLOCKQUOTE></PRE>
/// Element "giropayCancelURL" of XSD type xs:string.
    std::string*                         giropayCancelURL               0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   URL to which the customer's browser can be returned in the mEFT done page. <br/>
///   <br/>
///   Optional
///   <br/>
///   <br/>Character length and limitations: no limit.
/// </BLOCKQUOTE></PRE>
/// Element "BanktxnPendingURL" of XSD type xs:string.
    std::string*                         BanktxnPendingURL              0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   On your first invocation of SetExpressCheckoutRequest, the value of this token is returned by SetExpressCheckoutResponse. <br/>
///   <br/>
///   Optional
///   <br/>
///   <br/>
///   Include this element and its value only if you want to modify an existing checkout session with another invocation of SetExpressCheckoutRequest; for example, if you want the customer to edit his shipping address on PayPal. <br/>
///   <br/>
///   Character length and limitations: 20 single-byte characters
/// </BLOCKQUOTE></PRE>
/// Element "Token" of XSD type "urn:ebay:apis:eBLBaseComponents":ExpressCheckoutTokenType.
    ns3__ExpressCheckoutTokenType*       Token                          0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   The expected maximum total amount of the complete order, including shipping cost and tax charges. <br/>
///   <br/>
///   Optional
///   <br/>
///   <br/>
///   You must set the currencyID attribute to one of the three-character currency codes for any of the supported PayPal currencies. <br/>
///   <br/>
///   Limitations: Must not exceed $10,000 USD in any currency. No currency symbol. Decimal separator must be a period (.), and the thousands separator must be a comma (,).
/// </BLOCKQUOTE></PRE>
/// Element "MaxAmount" of XSD type "urn:ebay:apis:CoreComponentTypes":BasicAmountType.
    ns2__BasicAmountType*                MaxAmount                      0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Description of items the customer is purchasing. <br/>
///   <br/>
///   Optional
///   <br/>
///   <br/>Character length and limitations: 127 single-byte alphanumeric characters
/// </BLOCKQUOTE></PRE>
/// Element "OrderDescription" of XSD type xs:string.
    std::string*                         OrderDescription               0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   A free-form field for your own use, such as a tracking number or other value you want PayPal to return on GetExpressCheckoutDetailsResponse and DoExpressCheckoutPaymentResponse. <br/>
///   <br/>
///   Optional
///   <br/>
///   <br/>Character length and limitations: 256 single-byte alphanumeric characters
/// </BLOCKQUOTE></PRE>
/// Element "Custom" of XSD type xs:string.
    std::string*                         Custom                         0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Your own unique invoice or tracking number. PayPal returns this value to you on DoExpressCheckoutPaymentResponse. <br/>
///   <br/>
///   Optional
///   <br/>
///   <br/>Character length and limitations: 127 single-byte alphanumeric characters
/// </BLOCKQUOTE></PRE>
/// Element "InvoiceID" of XSD type xs:string.
    std::string*                         InvoiceID                      0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   The value 1 indicates that you require that the customer's shipping address on file with PayPal be a confirmed address. Any value other than 1 indicates that the customer's shipping address on file with PayPal need NOT be a confirmed address. Setting this element overrides the setting you have specified in the recipient's Merchant Account Profile. <br/>
///   <br/>
///   Optional
///   <br/>
///   <br/>Character length and limitations: One single-byte numeric character.
/// </BLOCKQUOTE></PRE>
/// Element "ReqConfirmShipping" of XSD type xs:string.
    std::string*                         ReqConfirmShipping             0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   The value 1 indicates that you require that the customer's billing address on file. Setting this element overrides the setting you have specified in Admin.
///   <br/>
///   <br/>
///   Optional
///   <br/>
///   <br/>Character length and limitations: One single-byte numeric character.
/// </BLOCKQUOTE></PRE>
/// Element "ReqBillingAddress" of XSD type xs:string.
    std::string*                         ReqBillingAddress              0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   The billing address for the buyer.
///   <br/>
///   Optional
///   <br/>
///   <br/>
///   If you include the BillingAddress element, the AddressType elements are required:
///   <br/>
///   <br/>
///   Name
///   <br/>
///   <br/>
///   Street1
///   <br/>
///   <br/>
///   CityName
///   <br/>
///   <br/>
///   CountryCode
///   <br/>
///   <br/>
///   <b>Do not set set the CountryName element.</b>
/// </BLOCKQUOTE></PRE>
/// Element "BillingAddress" of XSD type "urn:ebay:apis:eBLBaseComponents":AddressType.
    ns3__AddressType*                    BillingAddress                 0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   The value 1 indicates that on the PayPal pages, no shipping address fields should be displayed whatsoever. <br/>
///   <br/>
///   Optional
///   <br/>
///   <br/>
///   Character length and limitations: Four single-byte numeric characters.
/// </BLOCKQUOTE></PRE>
/// Element "NoShipping" of XSD type xs:string.
    std::string*                         NoShipping                     0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   The value 1 indicates that the PayPal pages should display the shipping address set by you in the Address element on this SetExpressCheckoutRequest, not the shipping address on file with PayPal for this customer. Displaying the PayPal street address on file does not allow the customer to edit that address. <br/>
///   <br/>
///   Optional
///   <br/>
///   <br/>Character length and limitations: Four single-byte numeric characters.
/// </BLOCKQUOTE></PRE>
/// Element "AddressOverride" of XSD type xs:string.
    std::string*                         AddressOverride                0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Locale of pages displayed by PayPal during Express Checkout. <br/>
///   <br/>
///   Optional
///   <br/>
///   <br/>
///   Character length and limitations: Five single-byte alphabetic characters, upper- or lowercase. <br/>
///   <br/>
///   Allowable values: <br/>
///   AU or en_AU
///   <br/>
///   DE or de_DE
///   <br/>
///   FR or fr_FR
///   <br/>
///   GB or en_GB
///   <br/>
///   IT or it_IT
///   <br/>
///   JP or ja_JP
///   <br/>
///   US or en_US
/// </BLOCKQUOTE></PRE>
/// Element "LocaleCode" of XSD type xs:string.
    std::string*                         LocaleCode                     0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Sets the Custom Payment Page Style for payment pages associated with this button/link. PageStyle corresponds to the HTML variable page_style for customizing payment pages. The value is the same as the Page Style Name you chose when adding or editing the page style from the Profile subtab of the My Account tab of your PayPal account. <br/>
///   <br/>
///   Optional
///   <br/>
///   <br/>Character length and limitations: 30 single-byte alphabetic characters.
/// </BLOCKQUOTE></PRE>
/// Element "PageStyle" of XSD type xs:string.
    std::string*                         PageStyle                      0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   A URL for the image you want to appear at the top left of the payment page. The image has a maximum size of 750 pixels wide by 90 pixels high. PayPal recommends that you provide an image that is stored on a secure (https) server. <br/>
///   <br/>
///   Optional
///   <br/>
///   <br/>
///   Character length and limitations: 127
/// </BLOCKQUOTE></PRE>
/// Element "cpp-header-image" of XSD type xs:string.
    std::string*                         cpp_header_image               0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Sets the border color around the header of the payment page. The border is a 2-pixel perimeter around the header space, which is 750 pixels wide by 90 pixels high. <br/>
///   <br/>
///   Optional
///   <br/>
///   <br/>Character length and limitations: Six character HTML hexadecimal color code in ASCII
/// </BLOCKQUOTE></PRE>
/// Element "cpp-header-border-color" of XSD type xs:string.
    std::string*                         cpp_header_border_color        0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Sets the background color for the header of the payment page. <br/>
///   <br/>
///   Optional
///   <br/>
///   <br/>Character length and limitation: Six character HTML hexadecimal color code in ASCII
/// </BLOCKQUOTE></PRE>
/// Element "cpp-header-back-color" of XSD type xs:string.
    std::string*                         cpp_header_back_color          0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Sets the background color for the payment page. <br/>
///   <br/>
///   Optional
///   <br/>
///   <br/>Character length and limitation: Six character HTML hexadecimal color code in ASCII
/// </BLOCKQUOTE></PRE>
/// Element "cpp-payflow-color" of XSD type xs:string.
    std::string*                         cpp_payflow_color              0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Sets the cart gradient color for the Mini Cart on 1X flow. <br/>
///   <br/>
///   Optional
///   <br/>
///   <br/>Character length and limitation: Six character HTML hexadecimal color code in ASCII
/// </BLOCKQUOTE></PRE>
/// Element "cpp-cart-border-color" of XSD type xs:string.
    std::string*                         cpp_cart_border_color          0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   A URL for the image you want to appear above the mini-cart. The image has a maximum size of 190 pixels wide by 60 pixels high. PayPal recommends that you provide an image that is stored on a secure (https) server. <br/>
///   <br/>
///   Optional
///   <br/>
///   <br/>
///   Character length and limitations: 127
/// </BLOCKQUOTE></PRE>
/// Element "cpp-logo-image" of XSD type xs:string.
    std::string*                         cpp_logo_image                 0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Customer's shipping address. <br/>
///   <br/>
///   Optional
///   <br/>
///   <br/>
///   If you include a shipping address and set the AddressOverride element on the request, PayPal returns this same address in GetExpressCheckoutDetailsResponse.
/// </BLOCKQUOTE></PRE>
/// Element "Address" of XSD type "urn:ebay:apis:eBLBaseComponents":AddressType.
    ns3__AddressType*                    Address                        0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   How you want to obtain payment. <br/>
///   <br/>
///   <b>Required</b>
///   <br/>
///   <br/>
///   Authorization indicates that this payment is a basic authorization subject to settlement with PayPal Authorization and Capture.
///   <br/>
///   <br/>
///   Order indicates that this payment is is an order authorization subject to settlement with PayPal Authorization and Capture.
///   <br/>
///   <br/>
///   Sale indicates that this is a final sale for which you are requesting payment.
///   <br/>
///   <br/>
///   IMPORTANT: You cannot set PaymentAction to Sale or Order on SetExpressCheckoutRequest and then change PaymentAction to Authorization on the final Express Checkout API, DoExpressCheckoutPaymentRequest.
///   <br/>
///   <br/>
///   Character length and limit: Up to 13 single-byte alphabetic characters
/// </BLOCKQUOTE></PRE>
/// Element "PaymentAction" of XSD type "urn:ebay:apis:eBLBaseComponents":PaymentActionCodeType.
    enum ns3__PaymentActionCodeType*     PaymentAction                  0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   This will indicate which flow you are choosing (expresschecheckout or expresscheckout optional)
///   <br/>
///   <br/>
///   Optional
///   <br/>
///   <br/>
///   None
///   <br/>
///   <br/>
///   Sole indicates that you are in the ExpressO flow
///   <br/>
///   <br/>
///   Mark indicates that you are in the old express flow.
///   <br/>
///   <br/>
/// </BLOCKQUOTE></PRE>
/// Element "SolutionType" of XSD type "urn:ebay:apis:eBLBaseComponents":SolutionTypeType.
    enum ns3__SolutionTypeType*          SolutionType                   0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   This indicates Which page to display for ExpressO (Billing or Login) <br/>
///   <br/>
///   Optional
///   <br/>
///   <br/>
///   None
///   <br/>
///   <br/>
///   Billing indicates that you are not a paypal account holder
///   <br/>
///   <br/>
///   Login indicates that you are a paypal account holder
///   <br/>
///   <br/>
/// </BLOCKQUOTE></PRE>
/// Element "LandingPage" of XSD type "urn:ebay:apis:eBLBaseComponents":LandingPageType.
    enum ns3__LandingPageType*           LandingPage                    0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Email address of the buyer as entered during checkout. PayPal uses this value to pre-fill the PayPal membership sign-up portion of the PayPal login page. <br/>
///   <br/>
///   Optional
///   <br/>
///   <br/>Character length and limit: 127 single-byte alphanumeric characters
/// </BLOCKQUOTE></PRE>
/// Element "BuyerEmail" of XSD type "urn:ebay:apis:eBLBaseComponents":EmailAddressType.
    ns3__EmailAddressType*               BuyerEmail                     0;	///< Optional element.
/// Element "ChannelType" of XSD type "urn:ebay:apis:eBLBaseComponents":ChannelType.
    enum ns3__ChannelType*               ChannelType                    0;	///< Optional element.
/// Vector of ns3__BillingAgreementDetailsType* of length 0..unbounded.
    std::vector<ns3__BillingAgreementDetailsType*> BillingAgreementDetails        0;	///< Elements.
/// <PRE><BLOCKQUOTE>
///   Promo Code<br/>
///   <br/>
///   Optional<br/>
///   <br/>
///   List of promo codes supplied by merchant. These promo codes enable the Merchant Services Promotion Financing feature.
/// </BLOCKQUOTE></PRE>
/// Vector of std::string of length 0..unbounded.
    std::vector<std::string            > PromoCodes                     0;	///< Elements.
/// <PRE><BLOCKQUOTE>
///   Default Funding option for PayLater Checkout button.
/// </BLOCKQUOTE></PRE>
/// Element "PayPalCheckOutBtnType" of XSD type xs:string.
    std::string*                         PayPalCheckOutBtnType          0;	///< Optional element.

/// </BLOCKQUOTE></PRE>
/// Element "ProductCategory" of XSD type "urn:ebay:apis:eBLBaseComponents":ProductCategoryType.
    enum ns3__ProductCategoryType*       ProductCategory                0;	///< Optional element.

/// </BLOCKQUOTE></PRE>
/// Element "ShippingMethod" of XSD type "urn:ebay:apis:eBLBaseComponents":ShippingServiceCodeType.
    enum ns3__ShippingServiceCodeType*   ShippingMethod                 0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Date and time (in GMT in the format yyyy-MM-ddTHH:mm:ssZ) at which address was changed by the user.
/// </BLOCKQUOTE></PRE>
/// Element "ProfileAddressChangeDate" of XSD type xs:dateTime.
    time_t*                              ProfileAddressChangeDate       0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   The value 1 indicates that the customer may enter a note to the merchant on the PayPal page during checkout. The note is returned in the GetExpressCheckoutDetails response and the DoExpressCheckoutPayment response.<br/>
///   Optional<br/>
///   Character length and limitations: One single-byte numeric character.<br/>
///   Allowable values: 0,1
/// </BLOCKQUOTE></PRE>
/// Element "AllowNote" of XSD type xs:string.
    std::string*                         AllowNote                      0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Funding source preferences.
/// </BLOCKQUOTE></PRE>
/// Element "FundingSourceDetails" of XSD type "urn:ebay:apis:eBLBaseComponents":FundingSourceDetailsType.
    ns3__FundingSourceDetailsType*       FundingSourceDetails           0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   The label that needs to be displayed on the cancel links in the PayPal hosted checkout pages. <br/> Optional <br/> Character length and limit: 127 single-byte alphanumeric characters
/// </BLOCKQUOTE></PRE>
/// Element "BrandName" of XSD type xs:string.
    std::string*                         BrandName                      0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   URL for PayPal to use to retrieve shipping, handling, insurance, and tax details from your website.<br/>
///   Optional<br/>
///   Character length and limitations: 2048 characters.<br/>
/// </BLOCKQUOTE></PRE>
/// Element "CallbackURL" of XSD type xs:string.
    std::string*                         CallbackURL                    0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Enhanced data for different industry segments.<br/> Optional<br/>
/// </BLOCKQUOTE></PRE>
/// Element "EnhancedCheckoutData" of XSD type "urn:ebay:apis:EnhancedDataTypes":EnhancedCheckoutDataType.
    ns4__EnhancedCheckoutDataType*       EnhancedCheckoutData           0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   List of other payment methods the user can pay with.
///   Optional
///   Refer to the OtherPaymentMethodDetailsType for more details.
/// </BLOCKQUOTE></PRE>
/// Vector of ns3__OtherPaymentMethodDetailsType* of length 0..unbounded.
    std::vector<ns3__OtherPaymentMethodDetailsType*> OtherPaymentMethods            0;	///< Elements.
/// <PRE><BLOCKQUOTE>
///   Details about the buyer's account.<br/> Optional<br/>
///   Refer to the BuyerDetailsType for more details. <br/>
/// </BLOCKQUOTE></PRE>
/// Element "BuyerDetails" of XSD type "urn:ebay:apis:eBLBaseComponents":BuyerDetailsType.
    ns3__BuyerDetailsType*               BuyerDetails                   0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Information about the payment.
/// </BLOCKQUOTE></PRE>
/// Vector of ns3__PaymentDetailsType* of length 0..10.
    std::vector<ns3__PaymentDetailsType*> PaymentDetails                 0:10;	///< Elements.
/// <PRE><BLOCKQUOTE>
///   List of Fall Back Shipping options provided by merchant.
/// </BLOCKQUOTE></PRE>
/// Vector of ns3__ShippingOptionType* of length 0..unbounded.
    std::vector<ns3__ShippingOptionType*> FlatRateShippingOptions        0;	///< Elements.
/// <PRE><BLOCKQUOTE>
///   Information about the call back timeout override.
/// </BLOCKQUOTE></PRE>
/// Element "CallbackTimeout" of XSD type xs:string.
    std::string*                         CallbackTimeout                0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Information about the call back version.
/// </BLOCKQUOTE></PRE>
/// Element "CallbackVersion" of XSD type xs:string.
    std::string*                         CallbackVersion                0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Information about the Customer service number.
/// </BLOCKQUOTE></PRE>
/// Element "CustomerServiceNumber" of XSD type xs:string.
    std::string*                         CustomerServiceNumber          0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Information about the Gift message enable.
/// </BLOCKQUOTE></PRE>
/// Element "GiftMessageEnable" of XSD type xs:string.
    std::string*                         GiftMessageEnable              0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Information about the Gift receipt enable.
/// </BLOCKQUOTE></PRE>
/// Element "GiftReceiptEnable" of XSD type xs:string.
    std::string*                         GiftReceiptEnable              0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Information about the Gift Wrap enable.
/// </BLOCKQUOTE></PRE>
/// Element "GiftWrapEnable" of XSD type xs:string.
    std::string*                         GiftWrapEnable                 0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Information about the Gift Wrap name.
/// </BLOCKQUOTE></PRE>
/// Element "GiftWrapName" of XSD type xs:string.
    std::string*                         GiftWrapName                   0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Information about the Gift Wrap amount.
/// </BLOCKQUOTE></PRE>
/// Element "GiftWrapAmount" of XSD type "urn:ebay:apis:CoreComponentTypes":BasicAmountType.
    ns2__BasicAmountType*                GiftWrapAmount                 0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Information about the Buyer email option enable .
/// </BLOCKQUOTE></PRE>
/// Element "BuyerEmailOptInEnable" of XSD type xs:string.
    std::string*                         BuyerEmailOptInEnable          0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Information about the survey enable.
/// </BLOCKQUOTE></PRE>
/// Element "SurveyEnable" of XSD type xs:string.
    std::string*                         SurveyEnable                   0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Information about the survey question.
/// </BLOCKQUOTE></PRE>
/// Element "SurveyQuestion" of XSD type xs:string.
    std::string*                         SurveyQuestion                 0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Information about the survey choices for survey question.
/// </BLOCKQUOTE></PRE>
/// Vector of std::string of length 0..unbounded.
    std::vector<std::string            > SurveyChoice                   0;	///< Elements.
/// Element "TotalType" of XSD type "urn:ebay:apis:eBLBaseComponents":TotalType.
    enum ns3__TotalType*                 TotalType                      0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Any message the seller would like to be displayed in the Mini Cart for UX.
/// </BLOCKQUOTE></PRE>
/// Element "NoteToBuyer" of XSD type xs:string.
    std::string*                         NoteToBuyer                    0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Incentive Code<br/>
///   <br/>
///   Optional<br/>
///   <br/>
///   List of incentive codes supplied by ebay/merchant.
/// </BLOCKQUOTE></PRE>
/// Vector of ns3__IncentiveInfoType* of length 0..unbounded.
    std::vector<ns3__IncentiveInfoType*> Incentives                     0;	///< Elements.
/// <PRE><BLOCKQUOTE>
///   Merchant specified flag which indicates whether to return Funding Instrument Details in DoEC or not.
///   <br/>
///   <br/>
///   <b>Optional</b>
///   <br/>
///   <br/>
/// </BLOCKQUOTE></PRE>
/// Element "ReqInstrumentDetails" of XSD type xs:string.
    std::string*                         ReqInstrumentDetails           0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   This element contains information that allows the merchant to request to
///   opt into external remember me on behalf of the buyer or to request login
///   bypass using external remember me. Note the opt-in details are silently
///   ignored if the ExternalRememberMeID is present.
/// </BLOCKQUOTE></PRE>
/// Element "ExternalRememberMeOptInDetails" of XSD type "urn:ebay:apis:eBLBaseComponents":ExternalRememberMeOptInDetailsType.
    ns3__ExternalRememberMeOptInDetailsType*  ExternalRememberMeOptInDetails 0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   An optional set of values related to flow-specific details.
/// </BLOCKQUOTE></PRE>
/// Element "FlowControlDetails" of XSD type "urn:ebay:apis:eBLBaseComponents":FlowControlDetailsType.
    ns3__FlowControlDetailsType*         FlowControlDetails             0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   An optional set of values related to display-specific details.
/// </BLOCKQUOTE></PRE>
/// Element "DisplayControlDetails" of XSD type "urn:ebay:apis:eBLBaseComponents":DisplayControlDetailsType.
    ns3__DisplayControlDetailsType*      DisplayControlDetails          0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   An optional set of values related to tracking for external partner.
/// </BLOCKQUOTE></PRE>
/// Element "ExternalPartnerTrackingDetails" of XSD type "urn:ebay:apis:eBLBaseComponents":ExternalPartnerTrackingDetailsType.
    ns3__ExternalPartnerTrackingDetailsType*  ExternalPartnerTrackingDetails 0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Optional element that defines relationship between buckets
/// </BLOCKQUOTE></PRE>
/// Vector of ns3__CoupledBucketsType* of length 0..5.
    std::vector<ns3__CoupledBucketsType*> CoupledBuckets                 0:5;	///< Elements.
    struct soap                         *soap                          ;
};

/// @brief "urn:ebay:apis:eBLBaseComponents":ExecuteCheckoutOperationsRequestDetailsType is a complexType.
///
/// class ns3__ExecuteCheckoutOperationsRequestDetailsType operations:
/// - ns3__ExecuteCheckoutOperationsRequestDetailsType* soap_new_ns3__ExecuteCheckoutOperationsRequestDetailsType(soap*) allocate and default initialize
/// - ns3__ExecuteCheckoutOperationsRequestDetailsType* soap_new_ns3__ExecuteCheckoutOperationsRequestDetailsType(soap*, int num) allocate array and default initialize values
/// - ns3__ExecuteCheckoutOperationsRequestDetailsType* soap_new_req_ns3__ExecuteCheckoutOperationsRequestDetailsType(soap*, ...) allocate, set required members
/// - ns3__ExecuteCheckoutOperationsRequestDetailsType* soap_new_set_ns3__ExecuteCheckoutOperationsRequestDetailsType(soap*, ...) allocate, set all public members
/// - ns3__ExecuteCheckoutOperationsRequestDetailsType::soap_default(soap*) default initialize members
/// - int soap_read_ns3__ExecuteCheckoutOperationsRequestDetailsType(soap*, ns3__ExecuteCheckoutOperationsRequestDetailsType*) deserialize from a stream
/// - int soap_write_ns3__ExecuteCheckoutOperationsRequestDetailsType(soap*, ns3__ExecuteCheckoutOperationsRequestDetailsType*) serialize to a stream
/// - ns3__ExecuteCheckoutOperationsRequestDetailsType* ns3__ExecuteCheckoutOperationsRequestDetailsType::soap_dup(soap*) returns deep copy of ns3__ExecuteCheckoutOperationsRequestDetailsType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns3__ExecuteCheckoutOperationsRequestDetailsType::soap_del() deep deletes ns3__ExecuteCheckoutOperationsRequestDetailsType data members, use only after ns3__ExecuteCheckoutOperationsRequestDetailsType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns3__ExecuteCheckoutOperationsRequestDetailsType
{ public:
/// <PRE><BLOCKQUOTE>
///   On your first invocation of ExecuteCheckoutOperationsRequest, the value of this token is returned by ExecuteCheckoutOperationsResponse.
///   <br/>
///   <br/>
///   Optional
///   <br/>
///   <br/>
///   Include this element and its value only if you want to modify an existing checkout session with another invocation of ExecuteCheckoutOperationsRequest; for example, if you want the customer to edit his shipping address on PayPal.
///   <br/>
///   <br/>
///   Character length and limitations: 20 single-byte characters
/// </BLOCKQUOTE></PRE>
/// Element "Token" of XSD type "urn:ebay:apis:eBLBaseComponents":ExpressCheckoutTokenType.
    ns3__ExpressCheckoutTokenType*       Token                          0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   All the Data required to initiate the checkout session is passed in this element.
/// </BLOCKQUOTE></PRE>
/// Element "SetDataRequest" of XSD type "urn:ebay:apis:eBLBaseComponents":SetDataRequestType.
    ns3__SetDataRequestType*             SetDataRequest                 1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   If auto authorization is required, this should be passed in with IsRequested set to yes.
/// </BLOCKQUOTE></PRE>
/// Element "AuthorizationRequest" of XSD type "urn:ebay:apis:eBLBaseComponents":AuthorizationRequestType.
    ns3__AuthorizationRequestType*       AuthorizationRequest           0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief "urn:ebay:apis:eBLBaseComponents":SetDataRequestType is a complexType.
///
/// class ns3__SetDataRequestType operations:
/// - ns3__SetDataRequestType* soap_new_ns3__SetDataRequestType(soap*) allocate and default initialize
/// - ns3__SetDataRequestType* soap_new_ns3__SetDataRequestType(soap*, int num) allocate array and default initialize values
/// - ns3__SetDataRequestType* soap_new_req_ns3__SetDataRequestType(soap*, ...) allocate, set required members
/// - ns3__SetDataRequestType* soap_new_set_ns3__SetDataRequestType(soap*, ...) allocate, set all public members
/// - ns3__SetDataRequestType::soap_default(soap*) default initialize members
/// - int soap_read_ns3__SetDataRequestType(soap*, ns3__SetDataRequestType*) deserialize from a stream
/// - int soap_write_ns3__SetDataRequestType(soap*, ns3__SetDataRequestType*) serialize to a stream
/// - ns3__SetDataRequestType* ns3__SetDataRequestType::soap_dup(soap*) returns deep copy of ns3__SetDataRequestType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns3__SetDataRequestType::soap_del() deep deletes ns3__SetDataRequestType data members, use only after ns3__SetDataRequestType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns3__SetDataRequestType
{ public:
/// <PRE><BLOCKQUOTE>
///   Details about Billing Agreements requested to be created.
/// </BLOCKQUOTE></PRE>
/// Vector of ns3__BillingApprovalDetailsType* of length 0..unbounded.
    std::vector<ns3__BillingApprovalDetailsType*> BillingApprovalDetails         0;	///< Elements.
/// <PRE><BLOCKQUOTE>
///   Only needed if Auto Authorization is requested. The authentication session token will be passed in here.
/// </BLOCKQUOTE></PRE>
/// Element "BuyerDetail" of XSD type "urn:ebay:apis:eBLBaseComponents":BuyerDetailType.
    ns3__BuyerDetailType*                BuyerDetail                    0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Requests for specific buyer information like Billing Address to be returned through GetExpressCheckoutDetails should be specified under this.
/// </BLOCKQUOTE></PRE>
/// Element "InfoSharingDirectives" of XSD type "urn:ebay:apis:eBLBaseComponents":InfoSharingDirectivesType.
    ns3__InfoSharingDirectivesType*      InfoSharingDirectives          0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   The value 1 indicates that you require to retrieve the customer's shipping address on file with PayPal. Any value other than 1 indicates that no such requirement.
/// </BLOCKQUOTE></PRE>
/// Element "RetrieveShippingAddress" of XSD type xs:boolean.
    bool*                                RetrieveShippingAddress        0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   the value is required by ACS team to specify the channel which the partners are in. the channel will be used for risk assessment <br/>
///   the value is defined in biz/User/value_object/Channel.oml<br/>
///   Optional
/// </BLOCKQUOTE></PRE>
/// Element "UserChannel" of XSD type "urn:ebay:apis:eBLBaseComponents":UserChannelCodeType.
    enum ns3__UserChannelCodeType*       UserChannel                    0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   The value 1 indicates that you require that the customer's shipping address on file with PayPal be a confirmed address. Any value other than 1 indicates that the customer's shipping address on file with PayPal need NOT be a confirmed address. Setting this element overrides the setting you have specified in the recipient's Merchant Account Profile. <br/>
///   <br/>
///   Optional
///   <br/>
/// </BLOCKQUOTE></PRE>
/// Element "ReqConfirmShipping" of XSD type xs:boolean.
    bool*                                ReqConfirmShipping             0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Information about the payment.
/// </BLOCKQUOTE></PRE>
/// Vector of ns3__PaymentDetailsType* of length 0..10.
    std::vector<ns3__PaymentDetailsType*> PaymentDetails                 0:10;	///< Elements.
/// <PRE><BLOCKQUOTE>
///   An optional set of values related to tracking for external partner.
/// </BLOCKQUOTE></PRE>
/// Element "ExternalPartnerTrackingDetails" of XSD type "urn:ebay:apis:eBLBaseComponents":ExternalPartnerTrackingDetailsType.
    ns3__ExternalPartnerTrackingDetailsType*  ExternalPartnerTrackingDetails 0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   URI(uniform resource identifier), the source from which the request is initiated.
/// </BLOCKQUOTE></PRE>
/// Element "URI" of XSD type xs:string.
    std::string*                         URI                            0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief "urn:ebay:apis:eBLBaseComponents":AuthorizationRequestType is a complexType.
///
/// class ns3__AuthorizationRequestType operations:
/// - ns3__AuthorizationRequestType* soap_new_ns3__AuthorizationRequestType(soap*) allocate and default initialize
/// - ns3__AuthorizationRequestType* soap_new_ns3__AuthorizationRequestType(soap*, int num) allocate array and default initialize values
/// - ns3__AuthorizationRequestType* soap_new_req_ns3__AuthorizationRequestType(soap*, ...) allocate, set required members
/// - ns3__AuthorizationRequestType* soap_new_set_ns3__AuthorizationRequestType(soap*, ...) allocate, set all public members
/// - ns3__AuthorizationRequestType::soap_default(soap*) default initialize members
/// - int soap_read_ns3__AuthorizationRequestType(soap*, ns3__AuthorizationRequestType*) deserialize from a stream
/// - int soap_write_ns3__AuthorizationRequestType(soap*, ns3__AuthorizationRequestType*) serialize to a stream
/// - ns3__AuthorizationRequestType* ns3__AuthorizationRequestType::soap_dup(soap*) returns deep copy of ns3__AuthorizationRequestType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns3__AuthorizationRequestType::soap_del() deep deletes ns3__AuthorizationRequestType data members, use only after ns3__AuthorizationRequestType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns3__AuthorizationRequestType
{ public:

/// </BLOCKQUOTE></PRE>
/// Element "IsRequested" of XSD type xs:boolean.
    bool                                 IsRequested                    1;	///< Required element.
    struct soap                         *soap                          ;
};

/// @brief "urn:ebay:apis:eBLBaseComponents":BillingApprovalDetailsType is a complexType.
///
/// class ns3__BillingApprovalDetailsType operations:
/// - ns3__BillingApprovalDetailsType* soap_new_ns3__BillingApprovalDetailsType(soap*) allocate and default initialize
/// - ns3__BillingApprovalDetailsType* soap_new_ns3__BillingApprovalDetailsType(soap*, int num) allocate array and default initialize values
/// - ns3__BillingApprovalDetailsType* soap_new_req_ns3__BillingApprovalDetailsType(soap*, ...) allocate, set required members
/// - ns3__BillingApprovalDetailsType* soap_new_set_ns3__BillingApprovalDetailsType(soap*, ...) allocate, set all public members
/// - ns3__BillingApprovalDetailsType::soap_default(soap*) default initialize members
/// - int soap_read_ns3__BillingApprovalDetailsType(soap*, ns3__BillingApprovalDetailsType*) deserialize from a stream
/// - int soap_write_ns3__BillingApprovalDetailsType(soap*, ns3__BillingApprovalDetailsType*) serialize to a stream
/// - ns3__BillingApprovalDetailsType* ns3__BillingApprovalDetailsType::soap_dup(soap*) returns deep copy of ns3__BillingApprovalDetailsType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns3__BillingApprovalDetailsType::soap_del() deep deletes ns3__BillingApprovalDetailsType data members, use only after ns3__BillingApprovalDetailsType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns3__BillingApprovalDetailsType
{ public:
/// <PRE><BLOCKQUOTE>
///   The Type of Approval requested - Billing Agreement or Profile
/// </BLOCKQUOTE></PRE>
/// Element "ApprovalType" of XSD type "urn:ebay:apis:eBLBaseComponents":ApprovalTypeType.
    enum ns3__ApprovalTypeType           ApprovalType                   1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   The Approval subtype - Must be MerchantInitiatedBilling for BillingAgreement ApprovalType
/// </BLOCKQUOTE></PRE>
/// Element "ApprovalSubType" of XSD type "urn:ebay:apis:eBLBaseComponents":ApprovalSubTypeType.
    enum ns3__ApprovalSubTypeType*       ApprovalSubType                0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Description about the Order
/// </BLOCKQUOTE></PRE>
/// Element "OrderDetails" of XSD type "urn:ebay:apis:eBLBaseComponents":OrderDetailsType.
    ns3__OrderDetailsType*               OrderDetails                   0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Directives about the type of payment
/// </BLOCKQUOTE></PRE>
/// Element "PaymentDirectives" of XSD type "urn:ebay:apis:eBLBaseComponents":PaymentDirectivesType.
    ns3__PaymentDirectivesType*          PaymentDirectives              0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Client may pass in its identification of this Billing Agreement. It used for the client's tracking purposes.
/// </BLOCKQUOTE></PRE>
/// Element "Custom" of XSD type xs:string.
    std::string*                         Custom                         0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief "urn:ebay:apis:eBLBaseComponents":InfoSharingDirectivesType is a complexType.
///
/// class ns3__InfoSharingDirectivesType operations:
/// - ns3__InfoSharingDirectivesType* soap_new_ns3__InfoSharingDirectivesType(soap*) allocate and default initialize
/// - ns3__InfoSharingDirectivesType* soap_new_ns3__InfoSharingDirectivesType(soap*, int num) allocate array and default initialize values
/// - ns3__InfoSharingDirectivesType* soap_new_req_ns3__InfoSharingDirectivesType(soap*, ...) allocate, set required members
/// - ns3__InfoSharingDirectivesType* soap_new_set_ns3__InfoSharingDirectivesType(soap*, ...) allocate, set all public members
/// - ns3__InfoSharingDirectivesType::soap_default(soap*) default initialize members
/// - int soap_read_ns3__InfoSharingDirectivesType(soap*, ns3__InfoSharingDirectivesType*) deserialize from a stream
/// - int soap_write_ns3__InfoSharingDirectivesType(soap*, ns3__InfoSharingDirectivesType*) serialize to a stream
/// - ns3__InfoSharingDirectivesType* ns3__InfoSharingDirectivesType::soap_dup(soap*) returns deep copy of ns3__InfoSharingDirectivesType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns3__InfoSharingDirectivesType::soap_del() deep deletes ns3__InfoSharingDirectivesType data members, use only after ns3__InfoSharingDirectivesType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns3__InfoSharingDirectivesType
{ public:
/// <PRE><BLOCKQUOTE>
///   If Billing Address should be returned in GetExpressCheckoutDetails response, this parameter should be set to yes here
/// </BLOCKQUOTE></PRE>
/// Element "ReqBillingAddress" of XSD type xs:string.
    std::string*                         ReqBillingAddress              0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief "urn:ebay:apis:eBLBaseComponents":OrderDetailsType is a complexType.
///
/// class ns3__OrderDetailsType operations:
/// - ns3__OrderDetailsType* soap_new_ns3__OrderDetailsType(soap*) allocate and default initialize
/// - ns3__OrderDetailsType* soap_new_ns3__OrderDetailsType(soap*, int num) allocate array and default initialize values
/// - ns3__OrderDetailsType* soap_new_req_ns3__OrderDetailsType(soap*, ...) allocate, set required members
/// - ns3__OrderDetailsType* soap_new_set_ns3__OrderDetailsType(soap*, ...) allocate, set all public members
/// - ns3__OrderDetailsType::soap_default(soap*) default initialize members
/// - int soap_read_ns3__OrderDetailsType(soap*, ns3__OrderDetailsType*) deserialize from a stream
/// - int soap_write_ns3__OrderDetailsType(soap*, ns3__OrderDetailsType*) serialize to a stream
/// - ns3__OrderDetailsType* ns3__OrderDetailsType::soap_dup(soap*) returns deep copy of ns3__OrderDetailsType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns3__OrderDetailsType::soap_del() deep deletes ns3__OrderDetailsType data members, use only after ns3__OrderDetailsType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns3__OrderDetailsType
{ public:
/// <PRE><BLOCKQUOTE>
///   Description of the Order.
/// </BLOCKQUOTE></PRE>
/// Element "Description" of XSD type xs:string.
    std::string*                         Description                    0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Expected maximum amount that the merchant may pull using DoReferenceTransaction
/// </BLOCKQUOTE></PRE>
/// Element "MaxAmount" of XSD type "urn:ebay:apis:CoreComponentTypes":BasicAmountType.
    ns2__BasicAmountType*                MaxAmount                      0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief "urn:ebay:apis:eBLBaseComponents":PaymentDirectivesType is a complexType.
///
/// class ns3__PaymentDirectivesType operations:
/// - ns3__PaymentDirectivesType* soap_new_ns3__PaymentDirectivesType(soap*) allocate and default initialize
/// - ns3__PaymentDirectivesType* soap_new_ns3__PaymentDirectivesType(soap*, int num) allocate array and default initialize values
/// - ns3__PaymentDirectivesType* soap_new_req_ns3__PaymentDirectivesType(soap*, ...) allocate, set required members
/// - ns3__PaymentDirectivesType* soap_new_set_ns3__PaymentDirectivesType(soap*, ...) allocate, set all public members
/// - ns3__PaymentDirectivesType::soap_default(soap*) default initialize members
/// - int soap_read_ns3__PaymentDirectivesType(soap*, ns3__PaymentDirectivesType*) deserialize from a stream
/// - int soap_write_ns3__PaymentDirectivesType(soap*, ns3__PaymentDirectivesType*) serialize to a stream
/// - ns3__PaymentDirectivesType* ns3__PaymentDirectivesType::soap_dup(soap*) returns deep copy of ns3__PaymentDirectivesType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns3__PaymentDirectivesType::soap_del() deep deletes ns3__PaymentDirectivesType data members, use only after ns3__PaymentDirectivesType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns3__PaymentDirectivesType
{ public:
/// <PRE><BLOCKQUOTE>
///   Type of the Payment is it Instant or Echeck or Any.
/// </BLOCKQUOTE></PRE>
/// Element "PaymentType" of XSD type "urn:ebay:apis:eBLBaseComponents":MerchantPullPaymentCodeType.
    enum ns3__MerchantPullPaymentCodeType*  PaymentType                    0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief "urn:ebay:apis:eBLBaseComponents":BuyerDetailType is a complexType.
///
/// class ns3__BuyerDetailType operations:
/// - ns3__BuyerDetailType* soap_new_ns3__BuyerDetailType(soap*) allocate and default initialize
/// - ns3__BuyerDetailType* soap_new_ns3__BuyerDetailType(soap*, int num) allocate array and default initialize values
/// - ns3__BuyerDetailType* soap_new_req_ns3__BuyerDetailType(soap*, ...) allocate, set required members
/// - ns3__BuyerDetailType* soap_new_set_ns3__BuyerDetailType(soap*, ...) allocate, set all public members
/// - ns3__BuyerDetailType::soap_default(soap*) default initialize members
/// - int soap_read_ns3__BuyerDetailType(soap*, ns3__BuyerDetailType*) deserialize from a stream
/// - int soap_write_ns3__BuyerDetailType(soap*, ns3__BuyerDetailType*) serialize to a stream
/// - ns3__BuyerDetailType* ns3__BuyerDetailType::soap_dup(soap*) returns deep copy of ns3__BuyerDetailType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns3__BuyerDetailType::soap_del() deep deletes ns3__BuyerDetailType data members, use only after ns3__BuyerDetailType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns3__BuyerDetailType
{ public:
/// <PRE><BLOCKQUOTE>
///   Information that is used to indentify the Buyer. This is used for auto authorization. Mandatory if Authorization is requested.
/// </BLOCKQUOTE></PRE>
/// Element "IdentificationInfo" of XSD type "urn:ebay:apis:eBLBaseComponents":IdentificationInfoType.
    ns3__IdentificationInfoType*         IdentificationInfo             0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Correlation id related to risk process done for the device. Max length is 36 Chars.
/// </BLOCKQUOTE></PRE>
/// Element "RiskSessionCorrelationID" of XSD type xs:string.
    std::string*                         RiskSessionCorrelationID       0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Buyer's IP Address
/// </BLOCKQUOTE></PRE>
/// Element "BuyerIPAddress" of XSD type xs:string.
    std::string*                         BuyerIPAddress                 0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief "urn:ebay:apis:eBLBaseComponents":IdentificationInfoType is a complexType.
///
/// class ns3__IdentificationInfoType operations:
/// - ns3__IdentificationInfoType* soap_new_ns3__IdentificationInfoType(soap*) allocate and default initialize
/// - ns3__IdentificationInfoType* soap_new_ns3__IdentificationInfoType(soap*, int num) allocate array and default initialize values
/// - ns3__IdentificationInfoType* soap_new_req_ns3__IdentificationInfoType(soap*, ...) allocate, set required members
/// - ns3__IdentificationInfoType* soap_new_set_ns3__IdentificationInfoType(soap*, ...) allocate, set all public members
/// - ns3__IdentificationInfoType::soap_default(soap*) default initialize members
/// - int soap_read_ns3__IdentificationInfoType(soap*, ns3__IdentificationInfoType*) deserialize from a stream
/// - int soap_write_ns3__IdentificationInfoType(soap*, ns3__IdentificationInfoType*) serialize to a stream
/// - ns3__IdentificationInfoType* ns3__IdentificationInfoType::soap_dup(soap*) returns deep copy of ns3__IdentificationInfoType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns3__IdentificationInfoType::soap_del() deep deletes ns3__IdentificationInfoType data members, use only after ns3__IdentificationInfoType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns3__IdentificationInfoType
{ public:
/// <PRE><BLOCKQUOTE>
///   Mobile specific buyer identification.
/// </BLOCKQUOTE></PRE>
/// Element "MobileIDInfo" of XSD type "urn:ebay:apis:eBLBaseComponents":MobileIDInfoType.
    ns3__MobileIDInfoType*               MobileIDInfo                   0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Contains login bypass information.
/// </BLOCKQUOTE></PRE>
/// Element "RememberMeIDInfo" of XSD type "urn:ebay:apis:eBLBaseComponents":RememberMeIDInfoType.
    ns3__RememberMeIDInfoType*           RememberMeIDInfo               0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Identity Access Token.
/// </BLOCKQUOTE></PRE>
/// Element "IdentityTokenInfo" of XSD type "urn:ebay:apis:eBLBaseComponents":IdentityTokenInfoType.
    ns3__IdentityTokenInfoType*          IdentityTokenInfo              0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief "urn:ebay:apis:eBLBaseComponents":MobileIDInfoType is a complexType.
///
/// class ns3__MobileIDInfoType operations:
/// - ns3__MobileIDInfoType* soap_new_ns3__MobileIDInfoType(soap*) allocate and default initialize
/// - ns3__MobileIDInfoType* soap_new_ns3__MobileIDInfoType(soap*, int num) allocate array and default initialize values
/// - ns3__MobileIDInfoType* soap_new_req_ns3__MobileIDInfoType(soap*, ...) allocate, set required members
/// - ns3__MobileIDInfoType* soap_new_set_ns3__MobileIDInfoType(soap*, ...) allocate, set all public members
/// - ns3__MobileIDInfoType::soap_default(soap*) default initialize members
/// - int soap_read_ns3__MobileIDInfoType(soap*, ns3__MobileIDInfoType*) deserialize from a stream
/// - int soap_write_ns3__MobileIDInfoType(soap*, ns3__MobileIDInfoType*) serialize to a stream
/// - ns3__MobileIDInfoType* ns3__MobileIDInfoType::soap_dup(soap*) returns deep copy of ns3__MobileIDInfoType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns3__MobileIDInfoType::soap_del() deep deletes ns3__MobileIDInfoType data members, use only after ns3__MobileIDInfoType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns3__MobileIDInfoType
{ public:
/// <PRE><BLOCKQUOTE>
///   The Session token returned during buyer authentication.
/// </BLOCKQUOTE></PRE>
/// Element "SessionToken" of XSD type xs:string.
    std::string                          SessionToken                   1;	///< Required element.
    struct soap                         *soap                          ;
};

/// @brief "urn:ebay:apis:eBLBaseComponents":RememberMeIDInfoType is a complexType.
///
/// class ns3__RememberMeIDInfoType operations:
/// - ns3__RememberMeIDInfoType* soap_new_ns3__RememberMeIDInfoType(soap*) allocate and default initialize
/// - ns3__RememberMeIDInfoType* soap_new_ns3__RememberMeIDInfoType(soap*, int num) allocate array and default initialize values
/// - ns3__RememberMeIDInfoType* soap_new_req_ns3__RememberMeIDInfoType(soap*, ...) allocate, set required members
/// - ns3__RememberMeIDInfoType* soap_new_set_ns3__RememberMeIDInfoType(soap*, ...) allocate, set all public members
/// - ns3__RememberMeIDInfoType::soap_default(soap*) default initialize members
/// - int soap_read_ns3__RememberMeIDInfoType(soap*, ns3__RememberMeIDInfoType*) deserialize from a stream
/// - int soap_write_ns3__RememberMeIDInfoType(soap*, ns3__RememberMeIDInfoType*) serialize to a stream
/// - ns3__RememberMeIDInfoType* ns3__RememberMeIDInfoType::soap_dup(soap*) returns deep copy of ns3__RememberMeIDInfoType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns3__RememberMeIDInfoType::soap_del() deep deletes ns3__RememberMeIDInfoType data members, use only after ns3__RememberMeIDInfoType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns3__RememberMeIDInfoType
{ public:
/// <PRE><BLOCKQUOTE>
///   External remember-me ID returned by GetExpressCheckoutDetails on successful opt-in. The
///   ExternalRememberMeID is a 17-character alphanumeric (encrypted) string that identifies
///   the buyer's remembered login with a merchant and has meaning only to the merchant. If
///   present, requests that the web flow attempt bypass of login.
/// </BLOCKQUOTE></PRE>
/// Element "ExternalRememberMeID" of XSD type xs:string.
    std::string*                         ExternalRememberMeID           0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief "urn:ebay:apis:eBLBaseComponents":IdentityTokenInfoType is a complexType.
///
/// class ns3__IdentityTokenInfoType operations:
/// - ns3__IdentityTokenInfoType* soap_new_ns3__IdentityTokenInfoType(soap*) allocate and default initialize
/// - ns3__IdentityTokenInfoType* soap_new_ns3__IdentityTokenInfoType(soap*, int num) allocate array and default initialize values
/// - ns3__IdentityTokenInfoType* soap_new_req_ns3__IdentityTokenInfoType(soap*, ...) allocate, set required members
/// - ns3__IdentityTokenInfoType* soap_new_set_ns3__IdentityTokenInfoType(soap*, ...) allocate, set all public members
/// - ns3__IdentityTokenInfoType::soap_default(soap*) default initialize members
/// - int soap_read_ns3__IdentityTokenInfoType(soap*, ns3__IdentityTokenInfoType*) deserialize from a stream
/// - int soap_write_ns3__IdentityTokenInfoType(soap*, ns3__IdentityTokenInfoType*) serialize to a stream
/// - ns3__IdentityTokenInfoType* ns3__IdentityTokenInfoType::soap_dup(soap*) returns deep copy of ns3__IdentityTokenInfoType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns3__IdentityTokenInfoType::soap_del() deep deletes ns3__IdentityTokenInfoType data members, use only after ns3__IdentityTokenInfoType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns3__IdentityTokenInfoType
{ public:
/// <PRE><BLOCKQUOTE>
///   Identity Access token from merchant
/// </BLOCKQUOTE></PRE>
/// Element "AccessToken" of XSD type xs:string.
    std::string                          AccessToken                    1;	///< Required element.
    struct soap                         *soap                          ;
};

/// @brief "urn:ebay:apis:eBLBaseComponents":FundingSourceDetailsType is a complexType.
///
/// class ns3__FundingSourceDetailsType operations:
/// - ns3__FundingSourceDetailsType* soap_new_ns3__FundingSourceDetailsType(soap*) allocate and default initialize
/// - ns3__FundingSourceDetailsType* soap_new_ns3__FundingSourceDetailsType(soap*, int num) allocate array and default initialize values
/// - ns3__FundingSourceDetailsType* soap_new_req_ns3__FundingSourceDetailsType(soap*, ...) allocate, set required members
/// - ns3__FundingSourceDetailsType* soap_new_set_ns3__FundingSourceDetailsType(soap*, ...) allocate, set all public members
/// - ns3__FundingSourceDetailsType::soap_default(soap*) default initialize members
/// - int soap_read_ns3__FundingSourceDetailsType(soap*, ns3__FundingSourceDetailsType*) deserialize from a stream
/// - int soap_write_ns3__FundingSourceDetailsType(soap*, ns3__FundingSourceDetailsType*) serialize to a stream
/// - ns3__FundingSourceDetailsType* ns3__FundingSourceDetailsType::soap_dup(soap*) returns deep copy of ns3__FundingSourceDetailsType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns3__FundingSourceDetailsType::soap_del() deep deletes ns3__FundingSourceDetailsType data members, use only after ns3__FundingSourceDetailsType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns3__FundingSourceDetailsType
{ public:
/// <PRE><BLOCKQUOTE>
///   Allowable values: 0,1 <br/> The value 1 indicates that the customer can accept push funding, and 0 means they cannot.<br/>
///   Optional<br/>
///   Character length and limitations: One single-byte numeric character.<br/>
/// </BLOCKQUOTE></PRE>
/// Element "AllowPushFunding" of XSD type xs:string.
    std::string*                         AllowPushFunding               0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Allowable values: ELV, CreditCard, ChinaUnionPay, BML, Finance, Qiwi <br/>
///   This element could be used to specify the perered funding option <br/>
///   for a guest users. It has effect only if LandingPage element is set to Billing. <br/>
///   Otherwise it will be ignored.
/// </BLOCKQUOTE></PRE>
/// Element "UserSelectedFundingSource" of XSD type "urn:ebay:apis:eBLBaseComponents":UserSelectedFundingSourceType.
    enum ns3__UserSelectedFundingSourceType*  UserSelectedFundingSource      0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief "urn:ebay:apis:eBLBaseComponents":BillingAgreementDetailsType is a complexType.
///
/// class ns3__BillingAgreementDetailsType operations:
/// - ns3__BillingAgreementDetailsType* soap_new_ns3__BillingAgreementDetailsType(soap*) allocate and default initialize
/// - ns3__BillingAgreementDetailsType* soap_new_ns3__BillingAgreementDetailsType(soap*, int num) allocate array and default initialize values
/// - ns3__BillingAgreementDetailsType* soap_new_req_ns3__BillingAgreementDetailsType(soap*, ...) allocate, set required members
/// - ns3__BillingAgreementDetailsType* soap_new_set_ns3__BillingAgreementDetailsType(soap*, ...) allocate, set all public members
/// - ns3__BillingAgreementDetailsType::soap_default(soap*) default initialize members
/// - int soap_read_ns3__BillingAgreementDetailsType(soap*, ns3__BillingAgreementDetailsType*) deserialize from a stream
/// - int soap_write_ns3__BillingAgreementDetailsType(soap*, ns3__BillingAgreementDetailsType*) serialize to a stream
/// - ns3__BillingAgreementDetailsType* ns3__BillingAgreementDetailsType::soap_dup(soap*) returns deep copy of ns3__BillingAgreementDetailsType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns3__BillingAgreementDetailsType::soap_del() deep deletes ns3__BillingAgreementDetailsType data members, use only after ns3__BillingAgreementDetailsType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns3__BillingAgreementDetailsType
{ public:

/// </BLOCKQUOTE></PRE>
/// Element "BillingType" of XSD type "urn:ebay:apis:eBLBaseComponents":BillingCodeType.
    enum ns3__BillingCodeType            BillingType                    1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Only needed for AutoBill billinng type.
/// </BLOCKQUOTE></PRE>
/// Element "BillingAgreementDescription" of XSD type xs:string.
    std::string*                         BillingAgreementDescription    0;	///< Optional element.

/// </BLOCKQUOTE></PRE>
/// Element "PaymentType" of XSD type "urn:ebay:apis:eBLBaseComponents":MerchantPullPaymentCodeType.
    enum ns3__MerchantPullPaymentCodeType*  PaymentType                    0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Custom annotation field for your exclusive use.
/// </BLOCKQUOTE></PRE>
/// Element "BillingAgreementCustom" of XSD type xs:string.
    std::string*                         BillingAgreementCustom         0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief "urn:ebay:apis:eBLBaseComponents":GetExpressCheckoutDetailsResponseDetailsType is a complexType.
///
/// class ns3__GetExpressCheckoutDetailsResponseDetailsType operations:
/// - ns3__GetExpressCheckoutDetailsResponseDetailsType* soap_new_ns3__GetExpressCheckoutDetailsResponseDetailsType(soap*) allocate and default initialize
/// - ns3__GetExpressCheckoutDetailsResponseDetailsType* soap_new_ns3__GetExpressCheckoutDetailsResponseDetailsType(soap*, int num) allocate array and default initialize values
/// - ns3__GetExpressCheckoutDetailsResponseDetailsType* soap_new_req_ns3__GetExpressCheckoutDetailsResponseDetailsType(soap*, ...) allocate, set required members
/// - ns3__GetExpressCheckoutDetailsResponseDetailsType* soap_new_set_ns3__GetExpressCheckoutDetailsResponseDetailsType(soap*, ...) allocate, set all public members
/// - ns3__GetExpressCheckoutDetailsResponseDetailsType::soap_default(soap*) default initialize members
/// - int soap_read_ns3__GetExpressCheckoutDetailsResponseDetailsType(soap*, ns3__GetExpressCheckoutDetailsResponseDetailsType*) deserialize from a stream
/// - int soap_write_ns3__GetExpressCheckoutDetailsResponseDetailsType(soap*, ns3__GetExpressCheckoutDetailsResponseDetailsType*) serialize to a stream
/// - ns3__GetExpressCheckoutDetailsResponseDetailsType* ns3__GetExpressCheckoutDetailsResponseDetailsType::soap_dup(soap*) returns deep copy of ns3__GetExpressCheckoutDetailsResponseDetailsType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns3__GetExpressCheckoutDetailsResponseDetailsType::soap_del() deep deletes ns3__GetExpressCheckoutDetailsResponseDetailsType data members, use only after ns3__GetExpressCheckoutDetailsResponseDetailsType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns3__GetExpressCheckoutDetailsResponseDetailsType
{ public:
/// <PRE><BLOCKQUOTE>
///   The timestamped token value that was returned by SetExpressCheckoutResponse and passed on GetExpressCheckoutDetailsRequest. <br/>
///   <br/>Character length and limitations: 20 single-byte characters
/// </BLOCKQUOTE></PRE>
/// Element "Token" of XSD type "urn:ebay:apis:eBLBaseComponents":ExpressCheckoutTokenType.
    ns3__ExpressCheckoutTokenType        Token                          1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Information about the payer
/// </BLOCKQUOTE></PRE>
/// Element "PayerInfo" of XSD type "urn:ebay:apis:eBLBaseComponents":PayerInfoType.
    ns3__PayerInfoType*                  PayerInfo                      1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   A free-form field for your own use, as set by you in the Custom element of SetExpressCheckoutRequest. <br/>
///   <br/>Character length and limitations: 256 single-byte alphanumeric characters
/// </BLOCKQUOTE></PRE>
/// Element "Custom" of XSD type xs:string.
    std::string*                         Custom                         0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Your own invoice or tracking number, as set by you in the InvoiceID element of SetExpressCheckoutRequest. <br/>
///   <br/>Character length and limitations: 127 single-byte alphanumeric characters
/// </BLOCKQUOTE></PRE>
/// Element "InvoiceID" of XSD type xs:string.
    std::string*                         InvoiceID                      0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Payer's contact telephone number. PayPal returns a contact telephone number only if your Merchant account profile settings require that the buyer enter one.
/// </BLOCKQUOTE></PRE>
/// Element "ContactPhone" of XSD type xs:string.
    std::string*                         ContactPhone                   0;	///< Optional element.

/// </BLOCKQUOTE></PRE>
/// Element "BillingAgreementAcceptedStatus" of XSD type xs:boolean.
    bool*                                BillingAgreementAcceptedStatus 0;	///< Optional element.

/// </BLOCKQUOTE></PRE>
/// Element "RedirectRequired" of XSD type xs:string.
    std::string*                         RedirectRequired               0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Customer's billing address.
///   <br/>
///   <br/>
///   Optional
///   <br/>
///   <br/>
///   If you have credit card mapped in your account then billing address of the credit card is returned otherwise your primary address is returned , PayPal returns this address in GetExpressCheckoutDetailsResponse.
/// </BLOCKQUOTE></PRE>
/// Element "BillingAddress" of XSD type "urn:ebay:apis:eBLBaseComponents":AddressType.
    ns3__AddressType*                    BillingAddress                 0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Text note entered by the buyer in PayPal flow.
/// </BLOCKQUOTE></PRE>
/// Element "Note" of XSD type xs:string.
    std::string*                         Note                           0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Returns the status of the EC checkout session.<br/>
///   Values include 'PaymentActionNotInitiated', 'PaymentActionFailed', 'PaymentActionInProgress', 'PaymentCompleted'.<br/>
/// </BLOCKQUOTE></PRE>
/// Element "CheckoutStatus" of XSD type xs:string.
    std::string*                         CheckoutStatus                 0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   PayPal may offer a discount or gift certificate to the buyer, which will be represented by a negativeamount. If the buyer has a negative balance, PayPal will add that amount to the current charges, which will be represented as a positive amount.
/// </BLOCKQUOTE></PRE>
/// Element "PayPalAdjustment" of XSD type "urn:ebay:apis:CoreComponentTypes":BasicAmountType.
    ns2__BasicAmountType*                PayPalAdjustment               0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Information about the individual purchased items.
/// </BLOCKQUOTE></PRE>
/// Vector of ns3__PaymentDetailsType* of length 0..10.
    std::vector<ns3__PaymentDetailsType*> PaymentDetails                 0:10;	///< Elements.
/// <PRE><BLOCKQUOTE>
///   Information about the user selected options.
/// </BLOCKQUOTE></PRE>
/// Element "UserSelectedOptions" of XSD type "urn:ebay:apis:eBLBaseComponents":UserSelectedOptionType.
    ns3__UserSelectedOptionType*         UserSelectedOptions            0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Information about the incentives that were applied from Ebay RYP page and PayPal RYP page.
/// </BLOCKQUOTE></PRE>
/// Vector of ns3__IncentiveDetailsType* of length 0..unbounded.
    std::vector<ns3__IncentiveDetailsType*> IncentiveDetails               0;	///< Elements.
/// <PRE><BLOCKQUOTE>
///   Information about the Gift message.
/// </BLOCKQUOTE></PRE>
/// Element "GiftMessage" of XSD type xs:string.
    std::string*                         GiftMessage                    0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Information about the Gift receipt enable.
/// </BLOCKQUOTE></PRE>
/// Element "GiftReceiptEnable" of XSD type xs:string.
    std::string*                         GiftReceiptEnable              0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Information about the Gift Wrap name.
/// </BLOCKQUOTE></PRE>
/// Element "GiftWrapName" of XSD type xs:string.
    std::string*                         GiftWrapName                   0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Information about the Gift Wrap amount.
/// </BLOCKQUOTE></PRE>
/// Element "GiftWrapAmount" of XSD type "urn:ebay:apis:CoreComponentTypes":BasicAmountType.
    ns2__BasicAmountType*                GiftWrapAmount                 0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Information about the Buyer marketing email.
/// </BLOCKQUOTE></PRE>
/// Element "BuyerMarketingEmail" of XSD type xs:string.
    std::string*                         BuyerMarketingEmail            0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Information about the survey question.
/// </BLOCKQUOTE></PRE>
/// Element "SurveyQuestion" of XSD type xs:string.
    std::string*                         SurveyQuestion                 0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Information about the survey choice selected by the user.
/// </BLOCKQUOTE></PRE>
/// Vector of std::string of length 0..unbounded.
    std::vector<std::string            > SurveyChoiceSelected           0;	///< Elements.
/// <PRE><BLOCKQUOTE>
///   Contains payment request information about each bucket in the cart.
/// </BLOCKQUOTE></PRE>
/// Vector of ns3__PaymentRequestInfoType* of length 0..10.
    std::vector<ns3__PaymentRequestInfoType*> PaymentRequestInfo             0:10;	///< Elements.
/// <PRE><BLOCKQUOTE>
///   Response information resulting from opt-in operation or current login bypass status.
/// </BLOCKQUOTE></PRE>
/// Element "ExternalRememberMeStatusDetails" of XSD type "urn:ebay:apis:eBLBaseComponents":ExternalRememberMeStatusDetailsType.
    ns3__ExternalRememberMeStatusDetailsType*  ExternalRememberMeStatusDetails 0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Response information resulting from opt-in operation or current login bypass status.
/// </BLOCKQUOTE></PRE>
/// Element "RefreshTokenStatusDetails" of XSD type "urn:ebay:apis:eBLBaseComponents":RefreshTokenStatusDetailsType.
    ns3__RefreshTokenStatusDetailsType*  RefreshTokenStatusDetails      0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Information about the transaction
/// </BLOCKQUOTE></PRE>
/// Vector of ns3__PaymentInfoType* of length 0..10.
    std::vector<ns3__PaymentInfoType*  > PaymentInfo                    0:10;	///< Elements.
/// <PRE><BLOCKQUOTE>
///   Indicate the tolerance a cart can be changed.
///   Possible values are
///   NONE = cart cannot be changed (since financing was used and country is DE).
///   FLEXIBLE = cart can be changed
///   If this parameter does not exist, then assume cart can be modified.
/// </BLOCKQUOTE></PRE>
/// Element "CartChangeTolerance" of XSD type xs:string.
    std::string*                         CartChangeTolerance            0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Type of the payment instrument.
/// </BLOCKQUOTE></PRE>
/// Element "InstrumentDetails" of XSD type "urn:ebay:apis:eBLBaseComponents":InstrumentDetailsType.
    ns3__InstrumentDetailsType*          InstrumentDetails              0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief "urn:ebay:apis:eBLBaseComponents":ExecuteCheckoutOperationsResponseDetailsType is a complexType.
///
/// class ns3__ExecuteCheckoutOperationsResponseDetailsType operations:
/// - ns3__ExecuteCheckoutOperationsResponseDetailsType* soap_new_ns3__ExecuteCheckoutOperationsResponseDetailsType(soap*) allocate and default initialize
/// - ns3__ExecuteCheckoutOperationsResponseDetailsType* soap_new_ns3__ExecuteCheckoutOperationsResponseDetailsType(soap*, int num) allocate array and default initialize values
/// - ns3__ExecuteCheckoutOperationsResponseDetailsType* soap_new_req_ns3__ExecuteCheckoutOperationsResponseDetailsType(soap*, ...) allocate, set required members
/// - ns3__ExecuteCheckoutOperationsResponseDetailsType* soap_new_set_ns3__ExecuteCheckoutOperationsResponseDetailsType(soap*, ...) allocate, set all public members
/// - ns3__ExecuteCheckoutOperationsResponseDetailsType::soap_default(soap*) default initialize members
/// - int soap_read_ns3__ExecuteCheckoutOperationsResponseDetailsType(soap*, ns3__ExecuteCheckoutOperationsResponseDetailsType*) deserialize from a stream
/// - int soap_write_ns3__ExecuteCheckoutOperationsResponseDetailsType(soap*, ns3__ExecuteCheckoutOperationsResponseDetailsType*) serialize to a stream
/// - ns3__ExecuteCheckoutOperationsResponseDetailsType* ns3__ExecuteCheckoutOperationsResponseDetailsType::soap_dup(soap*) returns deep copy of ns3__ExecuteCheckoutOperationsResponseDetailsType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns3__ExecuteCheckoutOperationsResponseDetailsType::soap_del() deep deletes ns3__ExecuteCheckoutOperationsResponseDetailsType data members, use only after ns3__ExecuteCheckoutOperationsResponseDetailsType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns3__ExecuteCheckoutOperationsResponseDetailsType
{ public:
/// Element "SetDataResponse" of XSD type "urn:ebay:apis:eBLBaseComponents":SetDataResponseType.
    ns3__SetDataResponseType*            SetDataResponse                1;	///< Required element.
/// Element "AuthorizationResponse" of XSD type "urn:ebay:apis:eBLBaseComponents":AuthorizationResponseType.
    ns3__AuthorizationResponseType*      AuthorizationResponse          0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief "urn:ebay:apis:eBLBaseComponents":SetDataResponseType is a complexType.
///
/// class ns3__SetDataResponseType operations:
/// - ns3__SetDataResponseType* soap_new_ns3__SetDataResponseType(soap*) allocate and default initialize
/// - ns3__SetDataResponseType* soap_new_ns3__SetDataResponseType(soap*, int num) allocate array and default initialize values
/// - ns3__SetDataResponseType* soap_new_req_ns3__SetDataResponseType(soap*, ...) allocate, set required members
/// - ns3__SetDataResponseType* soap_new_set_ns3__SetDataResponseType(soap*, ...) allocate, set all public members
/// - ns3__SetDataResponseType::soap_default(soap*) default initialize members
/// - int soap_read_ns3__SetDataResponseType(soap*, ns3__SetDataResponseType*) deserialize from a stream
/// - int soap_write_ns3__SetDataResponseType(soap*, ns3__SetDataResponseType*) serialize to a stream
/// - ns3__SetDataResponseType* ns3__SetDataResponseType::soap_dup(soap*) returns deep copy of ns3__SetDataResponseType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns3__SetDataResponseType::soap_del() deep deletes ns3__SetDataResponseType data members, use only after ns3__SetDataResponseType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns3__SetDataResponseType
{ public:
/// <PRE><BLOCKQUOTE>
///   If Checkout session was initialized successfully, the corresponding token is returned in this element.
/// </BLOCKQUOTE></PRE>
/// Element "Token" of XSD type "urn:ebay:apis:eBLBaseComponents":ExpressCheckoutTokenType.
    ns3__ExpressCheckoutTokenType*       Token                          0;	///< Optional element.
/// Vector of ns3__AddressType* of length 0..unbounded.
    std::vector<ns3__AddressType*      > ShippingAddresses              0;	///< Elements.
/// Vector of ns3__ErrorType* of length 0..unbounded.
    std::vector<ns3__ErrorType*        > SetDataError                   0;	///< Elements.
    struct soap                         *soap                          ;
};

/// @brief "urn:ebay:apis:eBLBaseComponents":AuthorizationResponseType is a complexType.
///
/// class ns3__AuthorizationResponseType operations:
/// - ns3__AuthorizationResponseType* soap_new_ns3__AuthorizationResponseType(soap*) allocate and default initialize
/// - ns3__AuthorizationResponseType* soap_new_ns3__AuthorizationResponseType(soap*, int num) allocate array and default initialize values
/// - ns3__AuthorizationResponseType* soap_new_req_ns3__AuthorizationResponseType(soap*, ...) allocate, set required members
/// - ns3__AuthorizationResponseType* soap_new_set_ns3__AuthorizationResponseType(soap*, ...) allocate, set all public members
/// - ns3__AuthorizationResponseType::soap_default(soap*) default initialize members
/// - int soap_read_ns3__AuthorizationResponseType(soap*, ns3__AuthorizationResponseType*) deserialize from a stream
/// - int soap_write_ns3__AuthorizationResponseType(soap*, ns3__AuthorizationResponseType*) serialize to a stream
/// - ns3__AuthorizationResponseType* ns3__AuthorizationResponseType::soap_dup(soap*) returns deep copy of ns3__AuthorizationResponseType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns3__AuthorizationResponseType::soap_del() deep deletes ns3__AuthorizationResponseType data members, use only after ns3__AuthorizationResponseType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns3__AuthorizationResponseType
{ public:
/// <PRE><BLOCKQUOTE>
///   Status will denote whether Auto authorization was successful or not.
/// </BLOCKQUOTE></PRE>
/// Element "Status" of XSD type "urn:ebay:apis:eBLBaseComponents":AckCodeType.
    enum ns3__AckCodeType                Status                         1;	///< Required element.
/// Vector of ns3__ErrorType* of length 0..unbounded.
    std::vector<ns3__ErrorType*        > AuthorizationError             0;	///< Elements.
    struct soap                         *soap                          ;
};

/// @brief "urn:ebay:apis:eBLBaseComponents":DoExpressCheckoutPaymentRequestDetailsType is a complexType.
///
/// class ns3__DoExpressCheckoutPaymentRequestDetailsType operations:
/// - ns3__DoExpressCheckoutPaymentRequestDetailsType* soap_new_ns3__DoExpressCheckoutPaymentRequestDetailsType(soap*) allocate and default initialize
/// - ns3__DoExpressCheckoutPaymentRequestDetailsType* soap_new_ns3__DoExpressCheckoutPaymentRequestDetailsType(soap*, int num) allocate array and default initialize values
/// - ns3__DoExpressCheckoutPaymentRequestDetailsType* soap_new_req_ns3__DoExpressCheckoutPaymentRequestDetailsType(soap*, ...) allocate, set required members
/// - ns3__DoExpressCheckoutPaymentRequestDetailsType* soap_new_set_ns3__DoExpressCheckoutPaymentRequestDetailsType(soap*, ...) allocate, set all public members
/// - ns3__DoExpressCheckoutPaymentRequestDetailsType::soap_default(soap*) default initialize members
/// - int soap_read_ns3__DoExpressCheckoutPaymentRequestDetailsType(soap*, ns3__DoExpressCheckoutPaymentRequestDetailsType*) deserialize from a stream
/// - int soap_write_ns3__DoExpressCheckoutPaymentRequestDetailsType(soap*, ns3__DoExpressCheckoutPaymentRequestDetailsType*) serialize to a stream
/// - ns3__DoExpressCheckoutPaymentRequestDetailsType* ns3__DoExpressCheckoutPaymentRequestDetailsType::soap_dup(soap*) returns deep copy of ns3__DoExpressCheckoutPaymentRequestDetailsType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns3__DoExpressCheckoutPaymentRequestDetailsType::soap_del() deep deletes ns3__DoExpressCheckoutPaymentRequestDetailsType data members, use only after ns3__DoExpressCheckoutPaymentRequestDetailsType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns3__DoExpressCheckoutPaymentRequestDetailsType
{ public:
/// <PRE><BLOCKQUOTE>
///   How you want to obtain payment. <br/>
///   <br/>
///   <b>Required</b>
///   <br/>
///   <br/>
///   Authorization indicates that this payment is a basic authorization subject to settlement with PayPal Authorization and Capture.
///   <br/>
///   <br/>
///   Order indicates that this payment is is an order authorization subject to settlement with PayPal Authorization and Capture.
///   <br/>
///   <br/>
///   Sale indicates that this is a final sale for which you are requesting payment.
///   <br/>
///   <br/>
///   IMPORTANT: You cannot set PaymentAction to Sale on SetExpressCheckoutRequest and then change PaymentAction to Authorization on the final Express Checkout API, DoExpressCheckoutPaymentRequest.
///   <br/>
///   <br/>
///   Character length and limit: Up to 13 single-byte alphabetic characters
/// </BLOCKQUOTE></PRE>
/// Element "PaymentAction" of XSD type "urn:ebay:apis:eBLBaseComponents":PaymentActionCodeType.
    enum ns3__PaymentActionCodeType*     PaymentAction                  0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   The timestamped token value that was returned by SetExpressCheckoutResponse and passed on GetExpressCheckoutDetailsRequest. <br/>
///   <br/>
///   <b>Required</b>
///   <br/>
///   <br/>
///   Character length and limitations: 20 single-byte characters
/// </BLOCKQUOTE></PRE>
/// Element "Token" of XSD type "urn:ebay:apis:eBLBaseComponents":ExpressCheckoutTokenType.
    ns3__ExpressCheckoutTokenType        Token                          1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Encrypted PayPal customer account identification number as returned by GetExpressCheckoutDetailsResponse. <br/>
///   <br/>
///   <b>Required</b>
///   <br/>
///   <br/>
///   Character length and limitations: 127 single-byte characters.
/// </BLOCKQUOTE></PRE>
/// Element "PayerID" of XSD type "urn:ebay:apis:eBLBaseComponents":UserIDType.
    ns3__UserIDType                      PayerID                        1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   URL on Merchant site pertaining to this invoice. <br/>
///   <br/>
///   <b>Optional</b>
///   <br/>
///   <br/>
/// </BLOCKQUOTE></PRE>
/// Element "OrderURL" of XSD type xs:string.
    std::string*                         OrderURL                       0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Unique id for each API request to prevent duplicate payments on merchant side. Passed directly back to merchant in response.
///   <br/>
///   <br/>
///   <b>Optional</b>
///   <br/>Character length and limits: 38 single-byte characters maximum.
/// </BLOCKQUOTE></PRE>
/// Element "MsgSubID" of XSD type xs:string.
    std::string*                         MsgSubID                       0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Information about the payment <br/>
///   <br/>
///   <b>Required</b>
/// </BLOCKQUOTE></PRE>
/// Vector of ns3__PaymentDetailsType* of length 0..10.
    std::vector<ns3__PaymentDetailsType*> PaymentDetails                 0:10;	///< Elements.
/// <PRE><BLOCKQUOTE>
///   Flag to indicate if previously set promoCode shall be overriden. Value 1 indicates overriding.
/// </BLOCKQUOTE></PRE>
/// Element "PromoOverrideFlag" of XSD type xs:string.
    std::string*                         PromoOverrideFlag              0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Promotional financing code for item. Overrides any previous PromoCode setting.
/// </BLOCKQUOTE></PRE>
/// Element "PromoCode" of XSD type xs:string.
    std::string*                         PromoCode                      0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Contains data for enhanced data like Airline Itinerary Data. This tag became Obsolete on or after 62 version, use EnhancedPaymentData instead.
/// </BLOCKQUOTE></PRE>
/// Element "EnhancedData" of XSD type "urn:ebay:apis:eBLBaseComponents":EnhancedDataType.
    ns3__EnhancedDataType*               EnhancedData                   0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Soft Descriptor supported for Sale and Auth in DEC only. For Order this will be ignored.
/// </BLOCKQUOTE></PRE>
/// Element "SoftDescriptor" of XSD type xs:string.
    std::string*                         SoftDescriptor                 0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Information about the user selected options.
/// </BLOCKQUOTE></PRE>
/// Element "UserSelectedOptions" of XSD type "urn:ebay:apis:eBLBaseComponents":UserSelectedOptionType.
    ns3__UserSelectedOptionType*         UserSelectedOptions            0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Information about the Gift message.
/// </BLOCKQUOTE></PRE>
/// Element "GiftMessage" of XSD type xs:string.
    std::string*                         GiftMessage                    0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Information about the Gift receipt enable.
/// </BLOCKQUOTE></PRE>
/// Element "GiftReceiptEnable" of XSD type xs:string.
    std::string*                         GiftReceiptEnable              0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Information about the Gift Wrap name.
/// </BLOCKQUOTE></PRE>
/// Element "GiftWrapName" of XSD type xs:string.
    std::string*                         GiftWrapName                   0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Information about the Gift Wrap amount.
/// </BLOCKQUOTE></PRE>
/// Element "GiftWrapAmount" of XSD type "urn:ebay:apis:CoreComponentTypes":BasicAmountType.
    ns2__BasicAmountType*                GiftWrapAmount                 0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Information about the Buyer marketing email.
/// </BLOCKQUOTE></PRE>
/// Element "BuyerMarketingEmail" of XSD type xs:string.
    std::string*                         BuyerMarketingEmail            0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Information about the survey question.
/// </BLOCKQUOTE></PRE>
/// Element "SurveyQuestion" of XSD type xs:string.
    std::string*                         SurveyQuestion                 0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Information about the survey choice selected by the user.
/// </BLOCKQUOTE></PRE>
/// Vector of std::string of length 0..unbounded.
    std::vector<std::string            > SurveyChoiceSelected           0;	///< Elements.
/// <PRE><BLOCKQUOTE>
///   An identification code for use by third-party applications to identify transactions. <br/>
///   <br/>
///   Optional
///   <br/>
///   <br/>
///   Character length and limitations: 32 single-byte alphanumeric characters
/// </BLOCKQUOTE></PRE>
/// Element "ButtonSource" of XSD type xs:string.
    std::string*                         ButtonSource                   0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Merchant specified flag which indicates whether to create billing agreement as part of DoEC or not.
///   <br/>
///   <br/>
///   <b>Optional</b>
///   <br/>
///   <br/>
/// </BLOCKQUOTE></PRE>
/// Element "SkipBACreation" of XSD type xs:boolean.
    bool*                                SkipBACreation                 0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Merchant specified flag which indicates to use payment details from session if available.
///   <br/>
///   <br/>
///   <b>Optional</b>
///   <br/>
///   <br/>
/// </BLOCKQUOTE></PRE>
/// Element "UseSessionPaymentDetails" of XSD type xs:string.
    std::string*                         UseSessionPaymentDetails       0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Optional element that defines relationship between buckets
/// </BLOCKQUOTE></PRE>
/// Vector of ns3__CoupledBucketsType* of length 0..5.
    std::vector<ns3__CoupledBucketsType*> CoupledBuckets                 0:5;	///< Elements.
/// <PRE><BLOCKQUOTE>
///   Optional element for the passing client id
/// </BLOCKQUOTE></PRE>
/// Element "ClientID" of XSD type xs:string.
    std::string*                         ClientID                       0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Optional element for the passing product lines
/// </BLOCKQUOTE></PRE>
/// Element "ProductLine" of XSD type xs:string.
    std::string*                         ProductLine                    0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief "urn:ebay:apis:eBLBaseComponents":DoExpressCheckoutPaymentResponseDetailsType is a complexType.
///
/// class ns3__DoExpressCheckoutPaymentResponseDetailsType operations:
/// - ns3__DoExpressCheckoutPaymentResponseDetailsType* soap_new_ns3__DoExpressCheckoutPaymentResponseDetailsType(soap*) allocate and default initialize
/// - ns3__DoExpressCheckoutPaymentResponseDetailsType* soap_new_ns3__DoExpressCheckoutPaymentResponseDetailsType(soap*, int num) allocate array and default initialize values
/// - ns3__DoExpressCheckoutPaymentResponseDetailsType* soap_new_req_ns3__DoExpressCheckoutPaymentResponseDetailsType(soap*, ...) allocate, set required members
/// - ns3__DoExpressCheckoutPaymentResponseDetailsType* soap_new_set_ns3__DoExpressCheckoutPaymentResponseDetailsType(soap*, ...) allocate, set all public members
/// - ns3__DoExpressCheckoutPaymentResponseDetailsType::soap_default(soap*) default initialize members
/// - int soap_read_ns3__DoExpressCheckoutPaymentResponseDetailsType(soap*, ns3__DoExpressCheckoutPaymentResponseDetailsType*) deserialize from a stream
/// - int soap_write_ns3__DoExpressCheckoutPaymentResponseDetailsType(soap*, ns3__DoExpressCheckoutPaymentResponseDetailsType*) serialize to a stream
/// - ns3__DoExpressCheckoutPaymentResponseDetailsType* ns3__DoExpressCheckoutPaymentResponseDetailsType::soap_dup(soap*) returns deep copy of ns3__DoExpressCheckoutPaymentResponseDetailsType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns3__DoExpressCheckoutPaymentResponseDetailsType::soap_del() deep deletes ns3__DoExpressCheckoutPaymentResponseDetailsType data members, use only after ns3__DoExpressCheckoutPaymentResponseDetailsType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns3__DoExpressCheckoutPaymentResponseDetailsType
{ public:
/// <PRE><BLOCKQUOTE>
///   The timestamped token value that was returned by SetExpressCheckoutResponse and passed on GetExpressCheckoutDetailsRequest. <br/>
///   <br/>
///   Character length and limitations:20 single-byte characters
/// </BLOCKQUOTE></PRE>
/// Element "Token" of XSD type "urn:ebay:apis:eBLBaseComponents":ExpressCheckoutTokenType.
    ns3__ExpressCheckoutTokenType        Token                          1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Information about the transaction
/// </BLOCKQUOTE></PRE>
/// Vector of ns3__PaymentInfoType* of length 0..10.
    std::vector<ns3__PaymentInfoType*  > PaymentInfo                    0:10;	///< Elements.

/// </BLOCKQUOTE></PRE>
/// Element "BillingAgreementID" of XSD type xs:string.
    std::string*                         BillingAgreementID             0;	///< Optional element.

/// </BLOCKQUOTE></PRE>
/// Element "RedirectRequired" of XSD type xs:string.
    std::string*                         RedirectRequired               0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Memo entered by sender in PayPal Review Page note field.
///   <br/>
///   <br/>
///   Optional
///   <br/>
///   <br/>
///   Character length and limitations: 255 single-byte alphanumeric characters
/// </BLOCKQUOTE></PRE>
/// Element "Note" of XSD type xs:string.
    std::string*                         Note                           0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Unique id passed in the DoEC call.
/// </BLOCKQUOTE></PRE>
/// Element "MsgSubID" of XSD type xs:string.
    std::string*                         MsgSubID                       0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Redirect back to PayPal, PayPal can host the success page.
/// </BLOCKQUOTE></PRE>
/// Element "SuccessPageRedirectRequested" of XSD type xs:string.
    std::string*                         SuccessPageRedirectRequested   0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Information about the user selected options.
/// </BLOCKQUOTE></PRE>
/// Element "UserSelectedOptions" of XSD type "urn:ebay:apis:eBLBaseComponents":UserSelectedOptionType.
    ns3__UserSelectedOptionType*         UserSelectedOptions            0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Information about Coupled Payment transactions.
/// </BLOCKQUOTE></PRE>
/// Vector of ns3__CoupledPaymentInfoType* of length 0..5.
    std::vector<ns3__CoupledPaymentInfoType*> CoupledPaymentInfo             0:5;	///< Elements.
    struct soap                         *soap                          ;
};

/// @brief "urn:ebay:apis:eBLBaseComponents":DoCaptureResponseDetailsType is a complexType.
///
/// class ns3__DoCaptureResponseDetailsType operations:
/// - ns3__DoCaptureResponseDetailsType* soap_new_ns3__DoCaptureResponseDetailsType(soap*) allocate and default initialize
/// - ns3__DoCaptureResponseDetailsType* soap_new_ns3__DoCaptureResponseDetailsType(soap*, int num) allocate array and default initialize values
/// - ns3__DoCaptureResponseDetailsType* soap_new_req_ns3__DoCaptureResponseDetailsType(soap*, ...) allocate, set required members
/// - ns3__DoCaptureResponseDetailsType* soap_new_set_ns3__DoCaptureResponseDetailsType(soap*, ...) allocate, set all public members
/// - ns3__DoCaptureResponseDetailsType::soap_default(soap*) default initialize members
/// - int soap_read_ns3__DoCaptureResponseDetailsType(soap*, ns3__DoCaptureResponseDetailsType*) deserialize from a stream
/// - int soap_write_ns3__DoCaptureResponseDetailsType(soap*, ns3__DoCaptureResponseDetailsType*) serialize to a stream
/// - ns3__DoCaptureResponseDetailsType* ns3__DoCaptureResponseDetailsType::soap_dup(soap*) returns deep copy of ns3__DoCaptureResponseDetailsType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns3__DoCaptureResponseDetailsType::soap_del() deep deletes ns3__DoCaptureResponseDetailsType data members, use only after ns3__DoCaptureResponseDetailsType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns3__DoCaptureResponseDetailsType
{ public:
/// <PRE><BLOCKQUOTE>
///   The authorization identification number you specified in the request. <br/>Character length and limits: 19 single-byte characters maximum
/// </BLOCKQUOTE></PRE>
/// Element reference "urn:ebay:apis:eBLBaseComponents:""urn:ebay:apis:eBLBaseComponents":AuthorizationID.
    std::string*                         AuthorizationID                0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Information about the transaction
/// </BLOCKQUOTE></PRE>
/// Element "PaymentInfo" of XSD type "urn:ebay:apis:eBLBaseComponents":PaymentInfoType.
    ns3__PaymentInfoType*                PaymentInfo                    1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Return msgsubid back to merchant
/// </BLOCKQUOTE></PRE>
/// Element "MsgSubID" of XSD type xs:string.
    std::string*                         MsgSubID                       0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Partner funding source id corresponding to the FS used in authorization.
/// </BLOCKQUOTE></PRE>
/// Element "PartnerFundingSourceID" of XSD type xs:string.
    std::string*                         PartnerFundingSourceID         0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief "urn:ebay:apis:eBLBaseComponents":DoDirectPaymentRequestDetailsType is a complexType.
///
/// class ns3__DoDirectPaymentRequestDetailsType operations:
/// - ns3__DoDirectPaymentRequestDetailsType* soap_new_ns3__DoDirectPaymentRequestDetailsType(soap*) allocate and default initialize
/// - ns3__DoDirectPaymentRequestDetailsType* soap_new_ns3__DoDirectPaymentRequestDetailsType(soap*, int num) allocate array and default initialize values
/// - ns3__DoDirectPaymentRequestDetailsType* soap_new_req_ns3__DoDirectPaymentRequestDetailsType(soap*, ...) allocate, set required members
/// - ns3__DoDirectPaymentRequestDetailsType* soap_new_set_ns3__DoDirectPaymentRequestDetailsType(soap*, ...) allocate, set all public members
/// - ns3__DoDirectPaymentRequestDetailsType::soap_default(soap*) default initialize members
/// - int soap_read_ns3__DoDirectPaymentRequestDetailsType(soap*, ns3__DoDirectPaymentRequestDetailsType*) deserialize from a stream
/// - int soap_write_ns3__DoDirectPaymentRequestDetailsType(soap*, ns3__DoDirectPaymentRequestDetailsType*) serialize to a stream
/// - ns3__DoDirectPaymentRequestDetailsType* ns3__DoDirectPaymentRequestDetailsType::soap_dup(soap*) returns deep copy of ns3__DoDirectPaymentRequestDetailsType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns3__DoDirectPaymentRequestDetailsType::soap_del() deep deletes ns3__DoDirectPaymentRequestDetailsType data members, use only after ns3__DoDirectPaymentRequestDetailsType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns3__DoDirectPaymentRequestDetailsType
{ public:
/// <PRE><BLOCKQUOTE>
///   How you want to obtain payment. <br/>
///   <br/>
///   <b>Required</b>
///   <br/>
///   <br/>
///   Authorization indicates that this payment is a basic authorization subject to settlement with PayPal Authorization and Capture.
///   <br/>
///   <br/>
///   Sale indicates that this is a final sale for which you are requesting payment.
///   <br/>
///   <br/>
///   NOTE: Order is not allowed for Direct Payment.
///   <br/>
///   <br/>
///   Character length and limit: Up to 13 single-byte alphabetic characters
/// </BLOCKQUOTE></PRE>
/// Element "PaymentAction" of XSD type "urn:ebay:apis:eBLBaseComponents":PaymentActionCodeType.
    enum ns3__PaymentActionCodeType      PaymentAction                  1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Information about the payment <br/>
///   <br/>
///   <b>Required</b>
///   <br/>
///   <br/>
/// </BLOCKQUOTE></PRE>
/// Element "PaymentDetails" of XSD type "urn:ebay:apis:eBLBaseComponents":PaymentDetailsType.
    ns3__PaymentDetailsType*             PaymentDetails                 1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Information about the credit card to be charged. <br/>
///   <br/>
///   <b>Required</b>
///   <br/>
///   <br/>
/// </BLOCKQUOTE></PRE>
/// Element "CreditCard" of XSD type "urn:ebay:apis:eBLBaseComponents":CreditCardDetailsType.
    ns3__CreditCardDetailsType*          CreditCard                     1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   IP address of the payer's browser as recorded in its HTTP request to your website. PayPal records this IP addresses as a means to detect possible fraud. <br/>
///   <br/>
///   <b>Required</b>
///   <br/>
///   <br/>Character length and limitations: 15 single-byte characters, including periods, in dotted-quad format: ???.???.???.???
/// </BLOCKQUOTE></PRE>
/// Element "IPAddress" of XSD type xs:string.
    std::string                          IPAddress                      1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Your customer session identification token. PayPal records this optional session identification token as an additional means to detect possible fraud. <br/>
///   <br/>
///   Optional
///   <br/>
///   <br/>Character length and limitations: 64 single-byte numeric characters
/// </BLOCKQUOTE></PRE>
/// Element "MerchantSessionId" of XSD type xs:string.
    std::string*                         MerchantSessionId              0;	///< Optional element.

/// </BLOCKQUOTE></PRE>
/// Element "ReturnFMFDetails" of XSD type xs:boolean.
    bool*                                ReturnFMFDetails               0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Use this optional parameter to pass in your business name and other data describing the transaction.<br/>
///   <br/>Optional<br/>
///   This information is usually displayed in the account holder's statement.<br/>
///   Example: RedCross Haiti, RedCross Uganda, Realtor.com dues, Realtor.com list fee<br/>
///   Length 25 characters. Alphanumeric characters and dash(-), dot(.), asterisk(*), space( )<br/>
///   On the customer's statement, an asterisk is used to separate the DBA name and product name.
///   The asterisk delimiter can appear in position 4, 8, or 13.
/// </BLOCKQUOTE></PRE>
/// Element "SoftDescriptor" of XSD type xs:string.
    std::string*                         SoftDescriptor                 0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Use this optional parameter to pass information about how consumer should contact the merchant.<br/>
///   <br/>Optional<br/>
///   This information is usually displayed in the account holder's statement.<br/>
///   For Ecom trx: phone, email or URL is allowed<br/>
///   For Retail trx: only the actual city is allowed<br/>
///   For details on allowed characters in Soft Descriptor City refer to the API documentation.
/// </BLOCKQUOTE></PRE>
/// Element "SoftDescriptorCity" of XSD type xs:string.
    std::string*                         SoftDescriptorCity             0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief "urn:ebay:apis:eBLBaseComponents":CreateMobilePaymentRequestDetailsType is a complexType.
///
/// class ns3__CreateMobilePaymentRequestDetailsType operations:
/// - ns3__CreateMobilePaymentRequestDetailsType* soap_new_ns3__CreateMobilePaymentRequestDetailsType(soap*) allocate and default initialize
/// - ns3__CreateMobilePaymentRequestDetailsType* soap_new_ns3__CreateMobilePaymentRequestDetailsType(soap*, int num) allocate array and default initialize values
/// - ns3__CreateMobilePaymentRequestDetailsType* soap_new_req_ns3__CreateMobilePaymentRequestDetailsType(soap*, ...) allocate, set required members
/// - ns3__CreateMobilePaymentRequestDetailsType* soap_new_set_ns3__CreateMobilePaymentRequestDetailsType(soap*, ...) allocate, set all public members
/// - ns3__CreateMobilePaymentRequestDetailsType::soap_default(soap*) default initialize members
/// - int soap_read_ns3__CreateMobilePaymentRequestDetailsType(soap*, ns3__CreateMobilePaymentRequestDetailsType*) deserialize from a stream
/// - int soap_write_ns3__CreateMobilePaymentRequestDetailsType(soap*, ns3__CreateMobilePaymentRequestDetailsType*) serialize to a stream
/// - ns3__CreateMobilePaymentRequestDetailsType* ns3__CreateMobilePaymentRequestDetailsType::soap_dup(soap*) returns deep copy of ns3__CreateMobilePaymentRequestDetailsType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns3__CreateMobilePaymentRequestDetailsType::soap_del() deep deletes ns3__CreateMobilePaymentRequestDetailsType data members, use only after ns3__CreateMobilePaymentRequestDetailsType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns3__CreateMobilePaymentRequestDetailsType
{ public:
/// <PRE><BLOCKQUOTE>
///   Type of the payment
///   <br/>
///   <br/>
///   <b>Required</b>
/// </BLOCKQUOTE></PRE>
/// Element "PaymentType" of XSD type "urn:ebay:apis:eBLBaseComponents":MobilePaymentCodeType.
    enum ns3__MobilePaymentCodeType      PaymentType                    1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   How you want to obtain payment. Defaults to Sale.
///   <br/>
///   <br/>
///   <b>Optional</b>
///   <br/>
///   <br/>
///   Authorization indicates that this payment is a basic authorization subject to settlement with PayPal Authorization and Capture.
///   <br/>
///   <br/>
///   Sale indicates that this is a final sale for which you are requesting payment.
///   <br/>
///   <br/>
/// </BLOCKQUOTE></PRE>
/// Element "PaymentAction" of XSD type "urn:ebay:apis:eBLBaseComponents":PaymentActionCodeType.
    enum ns3__PaymentActionCodeType      PaymentAction                  1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Phone number of the user making the payment.
///   <br/>
///   <br/>
///   <b>Required</b>
///   <br/>
/// </BLOCKQUOTE></PRE>
/// Element "SenderPhone" of XSD type "urn:ebay:apis:eBLBaseComponents":PhoneNumberType.
    ns3__PhoneNumberType*                SenderPhone                    1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Type of recipient specified, i.e., phone number or email address
///   <br/>
///   <br/>
///   <b>Required</b>
/// </BLOCKQUOTE></PRE>
/// Element "RecipientType" of XSD type "urn:ebay:apis:eBLBaseComponents":MobileRecipientCodeType.
    enum ns3__MobileRecipientCodeType    RecipientType                  1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Email address of the recipient
///   <br/>
///   <br/>
/// </BLOCKQUOTE></PRE>
/// Element "RecipientEmail" of XSD type xs:string.
    std::string*                         RecipientEmail                 0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Phone number of the recipipent
///   <br/>
///   <br/>
///   <b>Required</b>
///   <br/>
/// </BLOCKQUOTE></PRE>
/// Element "RecipientPhone" of XSD type "urn:ebay:apis:eBLBaseComponents":PhoneNumberType.
    ns3__PhoneNumberType*                RecipientPhone                 0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Amount of item before tax and shipping
///   <br/>
///   <br/>
/// </BLOCKQUOTE></PRE>
/// Element "ItemAmount" of XSD type "urn:ebay:apis:CoreComponentTypes":BasicAmountType.
    ns2__BasicAmountType*                ItemAmount                     1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   The tax charged on the transaction
///   Tax
///   <br/>
///   <br/>
///   Optional
///   <br/>
/// </BLOCKQUOTE></PRE>
/// Element "Tax" of XSD type "urn:ebay:apis:CoreComponentTypes":BasicAmountType.
    ns2__BasicAmountType*                Tax                            0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Per-transaction shipping charge
///   <br/>
///   <br/>
///   Optional
///   <br/>
/// </BLOCKQUOTE></PRE>
/// Element "Shipping" of XSD type "urn:ebay:apis:CoreComponentTypes":BasicAmountType.
    ns2__BasicAmountType*                Shipping                       0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Name of the item being ordered
///   <br/>
///   <br/>
///   Optional
///   <br/>
///   <br/>
///   Character length and limitations: 255 single-byte alphanumeric characters
/// </BLOCKQUOTE></PRE>
/// Element "ItemName" of XSD type xs:string.
    std::string*                         ItemName                       0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   SKU of the item being ordered
///   <br/>
///   <br/>
///   Optional
///   <br/>
///   <br/>
///   Character length and limitations: 255 single-byte alphanumeric characters
/// </BLOCKQUOTE></PRE>
/// Element "ItemNumber" of XSD type xs:string.
    std::string*                         ItemNumber                     0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Memo entered by sender in PayPal Website Payments note field.
///   <br/>
///   <br/>
///   Optional
///   <br/>
///   <br/>
///   Character length and limitations: 255 single-byte alphanumeric characters
/// </BLOCKQUOTE></PRE>
/// Element "Note" of XSD type xs:string.
    std::string*                         Note                           0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Unique ID for the order. Required for non-P2P transactions
///   <br/>
///   <br/>
///   Optional
///   <br/>
///   <br/>
///   Character length and limitations: 255 single-byte alphanumeric characters
/// </BLOCKQUOTE></PRE>
/// Element "CustomID" of XSD type xs:string.
    std::string*                         CustomID                       0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Indicates whether the sender's phone number will be shared with recipient
///   <br/>
///   <br/>
///   Optional
///   <br/>
/// </BLOCKQUOTE></PRE>
/// Element "SharePhoneNumber" of XSD type xs:integer.
    xsd__integer*                        SharePhoneNumber               0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Indicates whether the sender's home address will be shared with recipient
///   <br/>
///   <br/>
///   Optional
///   <br/>
/// </BLOCKQUOTE></PRE>
/// Element "ShareHomeAddress" of XSD type xs:integer.
    xsd__integer*                        ShareHomeAddress               0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief "urn:ebay:apis:eBLBaseComponents":GetMobileStatusRequestDetailsType is a complexType.
///
/// class ns3__GetMobileStatusRequestDetailsType operations:
/// - ns3__GetMobileStatusRequestDetailsType* soap_new_ns3__GetMobileStatusRequestDetailsType(soap*) allocate and default initialize
/// - ns3__GetMobileStatusRequestDetailsType* soap_new_ns3__GetMobileStatusRequestDetailsType(soap*, int num) allocate array and default initialize values
/// - ns3__GetMobileStatusRequestDetailsType* soap_new_req_ns3__GetMobileStatusRequestDetailsType(soap*, ...) allocate, set required members
/// - ns3__GetMobileStatusRequestDetailsType* soap_new_set_ns3__GetMobileStatusRequestDetailsType(soap*, ...) allocate, set all public members
/// - ns3__GetMobileStatusRequestDetailsType::soap_default(soap*) default initialize members
/// - int soap_read_ns3__GetMobileStatusRequestDetailsType(soap*, ns3__GetMobileStatusRequestDetailsType*) deserialize from a stream
/// - int soap_write_ns3__GetMobileStatusRequestDetailsType(soap*, ns3__GetMobileStatusRequestDetailsType*) serialize to a stream
/// - ns3__GetMobileStatusRequestDetailsType* ns3__GetMobileStatusRequestDetailsType::soap_dup(soap*) returns deep copy of ns3__GetMobileStatusRequestDetailsType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns3__GetMobileStatusRequestDetailsType::soap_del() deep deletes ns3__GetMobileStatusRequestDetailsType data members, use only after ns3__GetMobileStatusRequestDetailsType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns3__GetMobileStatusRequestDetailsType
{ public:
/// <PRE><BLOCKQUOTE>
///   Phone number for status inquiry
/// </BLOCKQUOTE></PRE>
/// Element "Phone" of XSD type "urn:ebay:apis:eBLBaseComponents":PhoneNumberType.
    ns3__PhoneNumberType*                Phone                          1;	///< Required element.
    struct soap                         *soap                          ;
};

/// @brief "urn:ebay:apis:eBLBaseComponents":SetAuthFlowParamRequestDetailsType is a complexType.
///
/// class ns3__SetAuthFlowParamRequestDetailsType operations:
/// - ns3__SetAuthFlowParamRequestDetailsType* soap_new_ns3__SetAuthFlowParamRequestDetailsType(soap*) allocate and default initialize
/// - ns3__SetAuthFlowParamRequestDetailsType* soap_new_ns3__SetAuthFlowParamRequestDetailsType(soap*, int num) allocate array and default initialize values
/// - ns3__SetAuthFlowParamRequestDetailsType* soap_new_req_ns3__SetAuthFlowParamRequestDetailsType(soap*, ...) allocate, set required members
/// - ns3__SetAuthFlowParamRequestDetailsType* soap_new_set_ns3__SetAuthFlowParamRequestDetailsType(soap*, ...) allocate, set all public members
/// - ns3__SetAuthFlowParamRequestDetailsType::soap_default(soap*) default initialize members
/// - int soap_read_ns3__SetAuthFlowParamRequestDetailsType(soap*, ns3__SetAuthFlowParamRequestDetailsType*) deserialize from a stream
/// - int soap_write_ns3__SetAuthFlowParamRequestDetailsType(soap*, ns3__SetAuthFlowParamRequestDetailsType*) serialize to a stream
/// - ns3__SetAuthFlowParamRequestDetailsType* ns3__SetAuthFlowParamRequestDetailsType::soap_dup(soap*) returns deep copy of ns3__SetAuthFlowParamRequestDetailsType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns3__SetAuthFlowParamRequestDetailsType::soap_del() deep deletes ns3__SetAuthFlowParamRequestDetailsType data members, use only after ns3__SetAuthFlowParamRequestDetailsType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns3__SetAuthFlowParamRequestDetailsType
{ public:
/// <PRE><BLOCKQUOTE>
///   URL to which the customer's browser is returned after choosing to login with PayPal.
///   <br/>
///   <br/>
///   <b>Required</b>
///   <br/>
///   <br/>
///   Character length and limitations: no limit.
/// </BLOCKQUOTE></PRE>
/// Element "ReturnURL" of XSD type xs:string.
    std::string                          ReturnURL                      1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   URL to which the customer is returned if he does not approve the use of PayPal login. <br/>
///   <br/>
///   <b>Required</b>
///   <br/>
///   <br/>
///   Character length and limitations: no limit
/// </BLOCKQUOTE></PRE>
/// Element "CancelURL" of XSD type xs:string.
    std::string                          CancelURL                      1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   URL to which the customer's browser is returned after user logs out from PayPal. <br/>
///   <br/>
///   <b>Required</b>
///   <br/>
///   <br/>
///   Character length and limitations: no limit.
/// </BLOCKQUOTE></PRE>
/// Element "LogoutURL" of XSD type xs:string.
    std::string                          LogoutURL                      1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   The type of the flow.
///   <br/>
///   <br/>
///   Optional
///   <br/>
///   <br/>Character length and limitations: 127 single-byte alphanumeric characters
/// </BLOCKQUOTE></PRE>
/// Element "InitFlowType" of XSD type xs:string.
    std::string*                         InitFlowType                   0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   The used to decide SkipLogin allowed or not.
///   <br/>
///   <br/>
///   Optional
///   <br/>
///   <br/>Character length and limitations: 127 single-byte alphanumeric characters
/// </BLOCKQUOTE></PRE>
/// Element "SkipLoginPage" of XSD type xs:string.
    std::string*                         SkipLoginPage                  0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   The name of the field Merchant requires from PayPal after user's login.
///   <br/>
///   <br/>
///   Optional
///   <br/>
///   <br/>Character length and limitations: 256 single-byte alphanumeric characters
/// </BLOCKQUOTE></PRE>
/// Element "ServiceName1" of XSD type xs:string.
    std::string*                         ServiceName1                   0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Whether the field is required, opt-in or opt-out.
///   <br/> <br/>
///   Optional
///   <br/>
///   <br/>Character length and limitations: 127 single-byte alphanumeric characters
/// </BLOCKQUOTE></PRE>
/// Element "ServiceDefReq1" of XSD type xs:string.
    std::string*                         ServiceDefReq1                 0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   The name of the field Merchant requires from PayPal after user's login.
///   <br/>
///   <br/>
///   Optional
///   <br/>
///   <br/>Character length and limitations: 256 single-byte alphanumeric characters
/// </BLOCKQUOTE></PRE>
/// Element "ServiceName2" of XSD type xs:string.
    std::string*                         ServiceName2                   0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Whether the field is required, opt-in or opt-out.
///   <br/>
///   <br/>
///   Optional
///   <br/>
///   <br/>Character length and limitations: 127 single-byte alphanumeric characters
/// </BLOCKQUOTE></PRE>
/// Element "ServiceDefReq2" of XSD type xs:string.
    std::string*                         ServiceDefReq2                 0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Locale of pages displayed by PayPal during Authentication Login.
///   <br/>
///   <br/>
///   Optional
///   <br/>
///   <br/>
///   Character length and limitations: Five single-byte alphabetic characters, upper- or lowercase. <br/>
///   <br/>
///   Allowable values: <br/>
///   AU or en_AU
///   <br/>
///   DE or de_DE
///   <br/>
///   FR or fr_FR
///   <br/>
///   GB or en_GB
///   <br/>
///   IT or it_IT
///   <br/>
///   JP or ja_JP
///   <br/>
///   US or en_US
/// </BLOCKQUOTE></PRE>
/// Element "LocaleCode" of XSD type xs:string.
    std::string*                         LocaleCode                     0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Sets the Custom Payment Page Style for flow pages associated with this button/link. PageStyle corresponds to the HTML variable page_style for customizing flow pages. The value is the same as the Page Style Name you chose when adding or editing the page style from the Profile subtab of the My Account tab of your PayPal account. <br/>
///   <br/>
///   Optional
///   <br/>
///   <br/>Character length and limitations: 30 single-byte alphabetic characters.
/// </BLOCKQUOTE></PRE>
/// Element "PageStyle" of XSD type xs:string.
    std::string*                         PageStyle                      0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   A URL for the image you want to appear at the top left of the flow page. The image has a maximum size of 750 pixels wide by 90 pixels high. PayPal recommends that you provide an image that is stored on a secure (https) server. <br/>
///   <br/>
///   Optional
///   <br/>
///   <br/>
///   Character length and limitations: 127
/// </BLOCKQUOTE></PRE>
/// Element "cpp-header-image" of XSD type xs:string.
    std::string*                         cpp_header_image               0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Sets the border color around the header of the flow page. The border is a 2-pixel perimeter around the header space, which is 750 pixels wide by 90 pixels high. <br/>
///   <br/>
///   Optional
///   <br/>
///   <br/>Character length and limitations: Six character HTML hexadecimal color code in ASCII
/// </BLOCKQUOTE></PRE>
/// Element "cpp-header-border-color" of XSD type xs:string.
    std::string*                         cpp_header_border_color        0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Sets the background color for the header of the flow page. <br/>
///   <br/>
///   Optional
///   <br/>
///   <br/>Character length and limitation: Six character HTML hexadecimal color code in ASCII
/// </BLOCKQUOTE></PRE>
/// Element "cpp-header-back-color" of XSD type xs:string.
    std::string*                         cpp_header_back_color          0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Sets the background color for the payment page. <br/>
///   <br/>
///   Optional
///   <br/>
///   <br/>Character length and limitation: Six character HTML hexadecimal color code in ASCII
/// </BLOCKQUOTE></PRE>
/// Element "cpp-payflow-color" of XSD type xs:string.
    std::string*                         cpp_payflow_color              0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   First Name of the user, this information is used if user chooses to signup with PayPal.
///   <br/>
///   <br/>
///   Optional
///   <br/>
///   <br/>Character length and limitation: Six character HTML hexadecimal color code in ASCII
/// </BLOCKQUOTE></PRE>
/// Element "FirstName" of XSD type xs:string.
    std::string*                         FirstName                      0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Last Name of the user, this information is used if user chooses to signup with PayPal.
///   <br/>
///   <br/>
///   Optional
///   <br/>
///   <br/>Character length and limitation: Six character HTML hexadecimal color code in ASCII
/// </BLOCKQUOTE></PRE>
/// Element "LastName" of XSD type xs:string.
    std::string*                         LastName                       0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   User address, this information is used when user chooses to signup for PayPal.
///   <br/>
///   <br/>
///   Optional
///   <br/>
///   <br/>
///   If you include a shipping address and set the AddressOverride element on the request, PayPal returns this same address in GetExpressCheckoutDetailsResponse.
/// </BLOCKQUOTE></PRE>
/// Element "Address" of XSD type "urn:ebay:apis:eBLBaseComponents":AddressType.
    ns3__AddressType*                    Address                        0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief "urn:ebay:apis:eBLBaseComponents":GetAuthDetailsResponseDetailsType is a complexType.
///
/// class ns3__GetAuthDetailsResponseDetailsType operations:
/// - ns3__GetAuthDetailsResponseDetailsType* soap_new_ns3__GetAuthDetailsResponseDetailsType(soap*) allocate and default initialize
/// - ns3__GetAuthDetailsResponseDetailsType* soap_new_ns3__GetAuthDetailsResponseDetailsType(soap*, int num) allocate array and default initialize values
/// - ns3__GetAuthDetailsResponseDetailsType* soap_new_req_ns3__GetAuthDetailsResponseDetailsType(soap*, ...) allocate, set required members
/// - ns3__GetAuthDetailsResponseDetailsType* soap_new_set_ns3__GetAuthDetailsResponseDetailsType(soap*, ...) allocate, set all public members
/// - ns3__GetAuthDetailsResponseDetailsType::soap_default(soap*) default initialize members
/// - int soap_read_ns3__GetAuthDetailsResponseDetailsType(soap*, ns3__GetAuthDetailsResponseDetailsType*) deserialize from a stream
/// - int soap_write_ns3__GetAuthDetailsResponseDetailsType(soap*, ns3__GetAuthDetailsResponseDetailsType*) serialize to a stream
/// - ns3__GetAuthDetailsResponseDetailsType* ns3__GetAuthDetailsResponseDetailsType::soap_dup(soap*) returns deep copy of ns3__GetAuthDetailsResponseDetailsType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns3__GetAuthDetailsResponseDetailsType::soap_del() deep deletes ns3__GetAuthDetailsResponseDetailsType data members, use only after ns3__GetAuthDetailsResponseDetailsType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns3__GetAuthDetailsResponseDetailsType
{ public:
/// <PRE><BLOCKQUOTE>
///   The first name of the User.
///   <br/>
///   <br/>Character length and limitations: 127 single-byte alphanumeric characters
/// </BLOCKQUOTE></PRE>
/// Element "FirstName" of XSD type xs:string.
    std::string*                         FirstName                      0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   The Last name of the user.
///   <br/>
///   <br/>Character length and limitations: 127 single-byte alphanumeric characters
/// </BLOCKQUOTE></PRE>
/// Element "LastName" of XSD type xs:string.
    std::string*                         LastName                       0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   The email address of the user.
///   <br/>Character length and limitations: 256 single-byte alphanumeric characters.
/// </BLOCKQUOTE></PRE>
/// Element "Email" of XSD type xs:string.
    std::string*                         Email                          0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Encrypted PayPal customer account identification number.
///   <br/>
///   <br/>
///   <b>Required</b>
///   <br/>
///   <br/>
///   Character length and limitations: 127 single-byte characters.
/// </BLOCKQUOTE></PRE>
/// Element "PayerID" of XSD type "urn:ebay:apis:eBLBaseComponents":UserIDType.
    ns3__UserIDType                      PayerID                        1;	///< Required element.
    struct soap                         *soap                          ;
};

/// @brief "urn:ebay:apis:eBLBaseComponents":SetAccessPermissionsRequestDetailsType is a complexType.
///
/// class ns3__SetAccessPermissionsRequestDetailsType operations:
/// - ns3__SetAccessPermissionsRequestDetailsType* soap_new_ns3__SetAccessPermissionsRequestDetailsType(soap*) allocate and default initialize
/// - ns3__SetAccessPermissionsRequestDetailsType* soap_new_ns3__SetAccessPermissionsRequestDetailsType(soap*, int num) allocate array and default initialize values
/// - ns3__SetAccessPermissionsRequestDetailsType* soap_new_req_ns3__SetAccessPermissionsRequestDetailsType(soap*, ...) allocate, set required members
/// - ns3__SetAccessPermissionsRequestDetailsType* soap_new_set_ns3__SetAccessPermissionsRequestDetailsType(soap*, ...) allocate, set all public members
/// - ns3__SetAccessPermissionsRequestDetailsType::soap_default(soap*) default initialize members
/// - int soap_read_ns3__SetAccessPermissionsRequestDetailsType(soap*, ns3__SetAccessPermissionsRequestDetailsType*) deserialize from a stream
/// - int soap_write_ns3__SetAccessPermissionsRequestDetailsType(soap*, ns3__SetAccessPermissionsRequestDetailsType*) serialize to a stream
/// - ns3__SetAccessPermissionsRequestDetailsType* ns3__SetAccessPermissionsRequestDetailsType::soap_dup(soap*) returns deep copy of ns3__SetAccessPermissionsRequestDetailsType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns3__SetAccessPermissionsRequestDetailsType::soap_del() deep deletes ns3__SetAccessPermissionsRequestDetailsType data members, use only after ns3__SetAccessPermissionsRequestDetailsType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns3__SetAccessPermissionsRequestDetailsType
{ public:
/// <PRE><BLOCKQUOTE>
///   URL to which the customer's browser is returned after choosing to login with PayPal.
///   <br/>
///   <br/>
///   <b>Required</b>
///   <br/>
///   <br/>
///   Character length and limitations: no limit.
/// </BLOCKQUOTE></PRE>
/// Element "ReturnURL" of XSD type xs:string.
    std::string                          ReturnURL                      1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   URL to which the customer is returned if he does not approve the use of PayPal login. <br/>
///   <br/>
///   <b>Required</b>
///   <br/>
///   <br/>
///   Character length and limitations: no limit
/// </BLOCKQUOTE></PRE>
/// Element "CancelURL" of XSD type xs:string.
    std::string                          CancelURL                      1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   URL to which the customer's browser is returned after user logs out from PayPal. <br/>
///   <br/>
///   <b>Required</b>
///   <br/>
///   <br/>
///   Character length and limitations: no limit.
/// </BLOCKQUOTE></PRE>
/// Element "LogoutURL" of XSD type xs:string.
    std::string                          LogoutURL                      1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   The type of the flow.
///   <br/>
///   <br/>
///   Optional
///   <br/>
///   <br/>Character length and limitations: 127 single-byte alphanumeric characters
/// </BLOCKQUOTE></PRE>
/// Element "InitFlowType" of XSD type xs:string.
    std::string*                         InitFlowType                   0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   The used to decide SkipLogin allowed or not.
///   <br/>
///   <br/>
///   Optional
///   <br/>
///   <br/>Character length and limitations: 127 single-byte alphanumeric characters
/// </BLOCKQUOTE></PRE>
/// Element "SkipLoginPage" of XSD type xs:string.
    std::string*                         SkipLoginPage                  0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   contains information about API Services
/// </BLOCKQUOTE></PRE>
/// Vector of std::string of length 0..unbounded.
    std::vector<std::string            > RequiredAccessPermissions      0;	///< Elements.
/// <PRE><BLOCKQUOTE>
///   contains information about API Services
/// </BLOCKQUOTE></PRE>
/// Vector of std::string of length 0..unbounded.
    std::vector<std::string            > OptionalAccessPermissions      0;	///< Elements.
/// <PRE><BLOCKQUOTE>
///   Locale of pages displayed by PayPal during Authentication Login.
///   <br/>
///   <br/>
///   Optional
///   <br/>
///   <br/>
///   Character length and limitations: Five single-byte alphabetic characters, upper- or lowercase. <br/>
///   <br/>
///   Allowable values: <br/>
///   AU or en_AU
///   <br/>
///   DE or de_DE
///   <br/>
///   FR or fr_FR
///   <br/>
///   GB or en_GB
///   <br/>
///   IT or it_IT
///   <br/>
///   JP or ja_JP
///   <br/>
///   US or en_US
/// </BLOCKQUOTE></PRE>
/// Element "LocaleCode" of XSD type xs:string.
    std::string*                         LocaleCode                     0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Sets the Custom Payment Page Style for flow pages associated with this button/link. PageStyle corresponds to the HTML variable page_style for customizing flow pages. The value is the same as the Page Style Name you chose when adding or editing the page style from the Profile subtab of the My Account tab of your PayPal account. <br/>
///   <br/>
///   Optional
///   <br/>
///   <br/>Character length and limitations: 30 single-byte alphabetic characters.
/// </BLOCKQUOTE></PRE>
/// Element "PageStyle" of XSD type xs:string.
    std::string*                         PageStyle                      0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   A URL for the image you want to appear at the top left of the flow page. The image has a maximum size of 750 pixels wide by 90 pixels high. PayPal recommends that you provide an image that is stored on a secure (https) server. <br/>
///   <br/>
///   Optional
///   <br/>
///   <br/>
///   Character length and limitations: 127
/// </BLOCKQUOTE></PRE>
/// Element "cpp-header-image" of XSD type xs:string.
    std::string*                         cpp_header_image               0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Sets the border color around the header of the flow page. The border is a 2-pixel perimeter around the header space, which is 750 pixels wide by 90 pixels high. <br/>
///   <br/>
///   Optional
///   <br/>
///   <br/>Character length and limitations: Six character HTML hexadecimal color code in ASCII
/// </BLOCKQUOTE></PRE>
/// Element "cpp-header-border-color" of XSD type xs:string.
    std::string*                         cpp_header_border_color        0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Sets the background color for the header of the flow page. <br/>
///   <br/>
///   Optional
///   <br/>
///   <br/>Character length and limitation: Six character HTML hexadecimal color code in ASCII
/// </BLOCKQUOTE></PRE>
/// Element "cpp-header-back-color" of XSD type xs:string.
    std::string*                         cpp_header_back_color          0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Sets the background color for the payment page. <br/>
///   <br/>
///   Optional
///   <br/>
///   <br/>Character length and limitation: Six character HTML hexadecimal color code in ASCII
/// </BLOCKQUOTE></PRE>
/// Element "cpp-payflow-color" of XSD type xs:string.
    std::string*                         cpp_payflow_color              0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   First Name of the user, this information is used if user chooses to signup with PayPal.
///   <br/>
///   <br/>
///   Optional
///   <br/>
///   <br/>Character length and limitation: Six character HTML hexadecimal color code in ASCII
/// </BLOCKQUOTE></PRE>
/// Element "FirstName" of XSD type xs:string.
    std::string*                         FirstName                      0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Last Name of the user, this information is used if user chooses to signup with PayPal.
///   <br/>
///   <br/>
///   Optional
///   <br/>
///   <br/>Character length and limitation: Six character HTML hexadecimal color code in ASCII
/// </BLOCKQUOTE></PRE>
/// Element "LastName" of XSD type xs:string.
    std::string*                         LastName                       0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   User address, this information is used when user chooses to signup for PayPal.
///   <br/>
///   <br/>
///   Optional
///   <br/>
///   <br/>
///   If you include a shipping address and set the AddressOverride element on the request, PayPal returns this same address in GetExpressCheckoutDetailsResponse.
/// </BLOCKQUOTE></PRE>
/// Element "Address" of XSD type "urn:ebay:apis:eBLBaseComponents":AddressType.
    ns3__AddressType*                    Address                        0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief "urn:ebay:apis:eBLBaseComponents":GetAccessPermissionDetailsResponseDetailsType is a complexType.
///
/// class ns3__GetAccessPermissionDetailsResponseDetailsType operations:
/// - ns3__GetAccessPermissionDetailsResponseDetailsType* soap_new_ns3__GetAccessPermissionDetailsResponseDetailsType(soap*) allocate and default initialize
/// - ns3__GetAccessPermissionDetailsResponseDetailsType* soap_new_ns3__GetAccessPermissionDetailsResponseDetailsType(soap*, int num) allocate array and default initialize values
/// - ns3__GetAccessPermissionDetailsResponseDetailsType* soap_new_req_ns3__GetAccessPermissionDetailsResponseDetailsType(soap*, ...) allocate, set required members
/// - ns3__GetAccessPermissionDetailsResponseDetailsType* soap_new_set_ns3__GetAccessPermissionDetailsResponseDetailsType(soap*, ...) allocate, set all public members
/// - ns3__GetAccessPermissionDetailsResponseDetailsType::soap_default(soap*) default initialize members
/// - int soap_read_ns3__GetAccessPermissionDetailsResponseDetailsType(soap*, ns3__GetAccessPermissionDetailsResponseDetailsType*) deserialize from a stream
/// - int soap_write_ns3__GetAccessPermissionDetailsResponseDetailsType(soap*, ns3__GetAccessPermissionDetailsResponseDetailsType*) serialize to a stream
/// - ns3__GetAccessPermissionDetailsResponseDetailsType* ns3__GetAccessPermissionDetailsResponseDetailsType::soap_dup(soap*) returns deep copy of ns3__GetAccessPermissionDetailsResponseDetailsType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns3__GetAccessPermissionDetailsResponseDetailsType::soap_del() deep deletes ns3__GetAccessPermissionDetailsResponseDetailsType data members, use only after ns3__GetAccessPermissionDetailsResponseDetailsType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns3__GetAccessPermissionDetailsResponseDetailsType
{ public:
/// <PRE><BLOCKQUOTE>
///   The first name of the User.
///   <br/>
///   <br/>Character length and limitations: 127 single-byte alphanumeric characters
/// </BLOCKQUOTE></PRE>
/// Element "FirstName" of XSD type xs:string.
    std::string*                         FirstName                      0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   The Last name of the user.
///   <br/>
///   <br/>Character length and limitations: 127 single-byte alphanumeric characters
/// </BLOCKQUOTE></PRE>
/// Element "LastName" of XSD type xs:string.
    std::string*                         LastName                       0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   The email address of the user.
///   <br/>Character length and limitations: 256 single-byte alphanumeric characters.
/// </BLOCKQUOTE></PRE>
/// Element "Email" of XSD type xs:string.
    std::string*                         Email                          0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   contains information about API Services
/// </BLOCKQUOTE></PRE>
/// Vector of std::string of length 0..unbounded.
    std::vector<std::string            > AccessPermissionName           0;	///< Elements.
/// <PRE><BLOCKQUOTE>
///   contains information about API Services
/// </BLOCKQUOTE></PRE>
/// Vector of std::string of length 0..unbounded.
    std::vector<std::string            > AccessPermissionStatus         0;	///< Elements.
/// <PRE><BLOCKQUOTE>
///   Encrypted PayPal customer account identification number.
///   <br/>
///   <br/>
///   <b>Required</b>
///   <br/>
///   <br/>
///   Character length and limitations: 127 single-byte characters.
/// </BLOCKQUOTE></PRE>
/// Element "PayerID" of XSD type "urn:ebay:apis:eBLBaseComponents":UserIDType.
    ns3__UserIDType                      PayerID                        1;	///< Required element.
    struct soap                         *soap                          ;
};

/// @brief "urn:ebay:apis:eBLBaseComponents":BAUpdateResponseDetailsType is a complexType.
///
/// class ns3__BAUpdateResponseDetailsType operations:
/// - ns3__BAUpdateResponseDetailsType* soap_new_ns3__BAUpdateResponseDetailsType(soap*) allocate and default initialize
/// - ns3__BAUpdateResponseDetailsType* soap_new_ns3__BAUpdateResponseDetailsType(soap*, int num) allocate array and default initialize values
/// - ns3__BAUpdateResponseDetailsType* soap_new_req_ns3__BAUpdateResponseDetailsType(soap*, ...) allocate, set required members
/// - ns3__BAUpdateResponseDetailsType* soap_new_set_ns3__BAUpdateResponseDetailsType(soap*, ...) allocate, set all public members
/// - ns3__BAUpdateResponseDetailsType::soap_default(soap*) default initialize members
/// - int soap_read_ns3__BAUpdateResponseDetailsType(soap*, ns3__BAUpdateResponseDetailsType*) deserialize from a stream
/// - int soap_write_ns3__BAUpdateResponseDetailsType(soap*, ns3__BAUpdateResponseDetailsType*) serialize to a stream
/// - ns3__BAUpdateResponseDetailsType* ns3__BAUpdateResponseDetailsType::soap_dup(soap*) returns deep copy of ns3__BAUpdateResponseDetailsType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns3__BAUpdateResponseDetailsType::soap_del() deep deletes ns3__BAUpdateResponseDetailsType data members, use only after ns3__BAUpdateResponseDetailsType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns3__BAUpdateResponseDetailsType
{ public:

/// </BLOCKQUOTE></PRE>
/// Element "BillingAgreementID" of XSD type xs:string.
    std::string                          BillingAgreementID             1;	///< Required element.

/// </BLOCKQUOTE></PRE>
/// Element "BillingAgreementDescription" of XSD type xs:string.
    std::string*                         BillingAgreementDescription    0;	///< Optional element.

/// </BLOCKQUOTE></PRE>
/// Element "BillingAgreementStatus" of XSD type "urn:ebay:apis:eBLBaseComponents":MerchantPullStatusCodeType.
    enum ns3__MerchantPullStatusCodeType  BillingAgreementStatus         1;	///< Required element.

/// </BLOCKQUOTE></PRE>
/// Element "BillingAgreementCustom" of XSD type xs:string.
    std::string*                         BillingAgreementCustom         0;	///< Optional element.

/// </BLOCKQUOTE></PRE>
/// Element "PayerInfo" of XSD type "urn:ebay:apis:eBLBaseComponents":PayerInfoType.
    ns3__PayerInfoType*                  PayerInfo                      1;	///< Required element.

/// </BLOCKQUOTE></PRE>
/// Element "BillingAgreementMax" of XSD type "urn:ebay:apis:CoreComponentTypes":BasicAmountType.
    ns2__BasicAmountType*                BillingAgreementMax            0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Customer's billing address.
///   <br/>
///   <br/>Optional
///   <br/>
///   If you have credit card mapped in your account then billing address of the credit card is returned otherwise your primary address is returned , PayPal returns this address in BAUpdateResponseDetails.
/// </BLOCKQUOTE></PRE>
/// Element "BillingAddress" of XSD type "urn:ebay:apis:eBLBaseComponents":AddressType.
    ns3__AddressType*                    BillingAddress                 0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Information about the Merchant/Agreement Owner
/// </BLOCKQUOTE></PRE>
/// Element "PayeeInfo" of XSD type "urn:ebay:apis:eBLBaseComponents":PayeeInfoType.
    ns3__PayeeInfoType*                  PayeeInfo                      0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief "urn:ebay:apis:eBLBaseComponents":MerchantPullPaymentResponseType is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   MerchantPullPaymentResponseType
///   Response data from the merchant pull.
/// </BLOCKQUOTE></PRE>
/// class ns3__MerchantPullPaymentResponseType operations:
/// - ns3__MerchantPullPaymentResponseType* soap_new_ns3__MerchantPullPaymentResponseType(soap*) allocate and default initialize
/// - ns3__MerchantPullPaymentResponseType* soap_new_ns3__MerchantPullPaymentResponseType(soap*, int num) allocate array and default initialize values
/// - ns3__MerchantPullPaymentResponseType* soap_new_req_ns3__MerchantPullPaymentResponseType(soap*, ...) allocate, set required members
/// - ns3__MerchantPullPaymentResponseType* soap_new_set_ns3__MerchantPullPaymentResponseType(soap*, ...) allocate, set all public members
/// - ns3__MerchantPullPaymentResponseType::soap_default(soap*) default initialize members
/// - int soap_read_ns3__MerchantPullPaymentResponseType(soap*, ns3__MerchantPullPaymentResponseType*) deserialize from a stream
/// - int soap_write_ns3__MerchantPullPaymentResponseType(soap*, ns3__MerchantPullPaymentResponseType*) serialize to a stream
/// - ns3__MerchantPullPaymentResponseType* ns3__MerchantPullPaymentResponseType::soap_dup(soap*) returns deep copy of ns3__MerchantPullPaymentResponseType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns3__MerchantPullPaymentResponseType::soap_del() deep deletes ns3__MerchantPullPaymentResponseType data members, use only after ns3__MerchantPullPaymentResponseType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns3__MerchantPullPaymentResponseType
{ public:
/// <PRE><BLOCKQUOTE>
///   information about the customer
/// </BLOCKQUOTE></PRE>
/// Element "PayerInfo" of XSD type "urn:ebay:apis:eBLBaseComponents":PayerInfoType.
    ns3__PayerInfoType*                  PayerInfo                      1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Information about the transaction
/// </BLOCKQUOTE></PRE>
/// Element "PaymentInfo" of XSD type "urn:ebay:apis:eBLBaseComponents":PaymentInfoType.
    ns3__PaymentInfoType*                PaymentInfo                    1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Specific information about the preapproved payment
/// </BLOCKQUOTE></PRE>
/// Element "MerchantPullInfo" of XSD type "urn:ebay:apis:eBLBaseComponents":MerchantPullInfoType.
    ns3__MerchantPullInfoType*           MerchantPullInfo               1;	///< Required element.
    struct soap                         *soap                          ;
};

/// @brief "urn:ebay:apis:eBLBaseComponents":MerchantPullInfoType is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   MerchantPullInfoType Information about the merchant pull.
/// </BLOCKQUOTE></PRE>
/// class ns3__MerchantPullInfoType operations:
/// - ns3__MerchantPullInfoType* soap_new_ns3__MerchantPullInfoType(soap*) allocate and default initialize
/// - ns3__MerchantPullInfoType* soap_new_ns3__MerchantPullInfoType(soap*, int num) allocate array and default initialize values
/// - ns3__MerchantPullInfoType* soap_new_req_ns3__MerchantPullInfoType(soap*, ...) allocate, set required members
/// - ns3__MerchantPullInfoType* soap_new_set_ns3__MerchantPullInfoType(soap*, ...) allocate, set all public members
/// - ns3__MerchantPullInfoType::soap_default(soap*) default initialize members
/// - int soap_read_ns3__MerchantPullInfoType(soap*, ns3__MerchantPullInfoType*) deserialize from a stream
/// - int soap_write_ns3__MerchantPullInfoType(soap*, ns3__MerchantPullInfoType*) serialize to a stream
/// - ns3__MerchantPullInfoType* ns3__MerchantPullInfoType::soap_dup(soap*) returns deep copy of ns3__MerchantPullInfoType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns3__MerchantPullInfoType::soap_del() deep deletes ns3__MerchantPullInfoType data members, use only after ns3__MerchantPullInfoType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns3__MerchantPullInfoType
{ public:
/// <PRE><BLOCKQUOTE>
///   Current status of billing agreement
/// </BLOCKQUOTE></PRE>
/// Element "MpStatus" of XSD type "urn:ebay:apis:eBLBaseComponents":MerchantPullStatusCodeType.
    enum ns3__MerchantPullStatusCodeType  MpStatus                       1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Monthly maximum payment amount
/// </BLOCKQUOTE></PRE>
/// Element "MpMax" of XSD type "urn:ebay:apis:CoreComponentTypes":BasicAmountType.
    ns2__BasicAmountType*                MpMax                          1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   The value of the mp_custom variable that you specified in a FORM submission to PayPal during the creation or updating of a customer billing agreement
/// </BLOCKQUOTE></PRE>
/// Element "MpCustom" of XSD type xs:string.
    std::string*                         MpCustom                       0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   The value of the mp_desc variable (description of goods or services) associated with the billing agreement
/// </BLOCKQUOTE></PRE>
/// Element "Desc" of XSD type xs:string.
    std::string*                         Desc                           0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Invoice value as set by BillUserRequest API call
/// </BLOCKQUOTE></PRE>
/// Element "Invoice" of XSD type xs:string.
    std::string*                         Invoice                        0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Custom field as set by BillUserRequest API call
/// </BLOCKQUOTE></PRE>
/// Element "Custom" of XSD type xs:string.
    std::string*                         Custom                         0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Note: This field is no longer used and is always empty.
/// </BLOCKQUOTE></PRE>
/// Element "PaymentSourceID" of XSD type xs:string.
    std::string*                         PaymentSourceID                0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief "urn:ebay:apis:eBLBaseComponents":PaymentTransactionSearchResultType is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   PaymentTransactionSearchResultType Results from a PaymentTransaction search
/// </BLOCKQUOTE></PRE>
/// class ns3__PaymentTransactionSearchResultType operations:
/// - ns3__PaymentTransactionSearchResultType* soap_new_ns3__PaymentTransactionSearchResultType(soap*) allocate and default initialize
/// - ns3__PaymentTransactionSearchResultType* soap_new_ns3__PaymentTransactionSearchResultType(soap*, int num) allocate array and default initialize values
/// - ns3__PaymentTransactionSearchResultType* soap_new_req_ns3__PaymentTransactionSearchResultType(soap*, ...) allocate, set required members
/// - ns3__PaymentTransactionSearchResultType* soap_new_set_ns3__PaymentTransactionSearchResultType(soap*, ...) allocate, set all public members
/// - ns3__PaymentTransactionSearchResultType::soap_default(soap*) default initialize members
/// - int soap_read_ns3__PaymentTransactionSearchResultType(soap*, ns3__PaymentTransactionSearchResultType*) deserialize from a stream
/// - int soap_write_ns3__PaymentTransactionSearchResultType(soap*, ns3__PaymentTransactionSearchResultType*) serialize to a stream
/// - ns3__PaymentTransactionSearchResultType* ns3__PaymentTransactionSearchResultType::soap_dup(soap*) returns deep copy of ns3__PaymentTransactionSearchResultType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns3__PaymentTransactionSearchResultType::soap_del() deep deletes ns3__PaymentTransactionSearchResultType data members, use only after ns3__PaymentTransactionSearchResultType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns3__PaymentTransactionSearchResultType
{ public:
/// <PRE><BLOCKQUOTE>
///   The date and time (in UTC/GMT format) the transaction occurred
/// </BLOCKQUOTE></PRE>
/// Element "Timestamp" of XSD type xs:dateTime.
    time_t                               Timestamp                      1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   The time zone of the transaction
/// </BLOCKQUOTE></PRE>
/// Element "Timezone" of XSD type xs:string.
    std::string                          Timezone                       1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   The type of the transaction
/// </BLOCKQUOTE></PRE>
/// Element "Type" of XSD type xs:string.
    std::string                          Type                           1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   The email address of the payer
/// </BLOCKQUOTE></PRE>
/// Element "Payer" of XSD type "urn:ebay:apis:eBLBaseComponents":EmailAddressType.
    ns3__EmailAddressType                Payer                          1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Display name of the payer
/// </BLOCKQUOTE></PRE>
/// Element "PayerDisplayName" of XSD type xs:string.
    std::string                          PayerDisplayName               1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   The transaction ID of the seller
/// </BLOCKQUOTE></PRE>
/// Element reference "urn:ebay:apis:eBLBaseComponents:""urn:ebay:apis:eBLBaseComponents":TransactionID.
    std::string                          TransactionID                  1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   The status of the transaction
/// </BLOCKQUOTE></PRE>
/// Element "Status" of XSD type xs:string.
    std::string                          Status                         1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   The total gross amount charged, including any profile shipping cost and taxes
/// </BLOCKQUOTE></PRE>
/// Element "GrossAmount" of XSD type "urn:ebay:apis:CoreComponentTypes":BasicAmountType.
    ns2__BasicAmountType*                GrossAmount                    1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   The fee that PayPal charged for the transaction
/// </BLOCKQUOTE></PRE>
/// Element "FeeAmount" of XSD type "urn:ebay:apis:CoreComponentTypes":BasicAmountType.
    ns2__BasicAmountType*                FeeAmount                      1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   The net amount of the transaction
/// </BLOCKQUOTE></PRE>
/// Element "NetAmount" of XSD type "urn:ebay:apis:CoreComponentTypes":BasicAmountType.
    ns2__BasicAmountType*                NetAmount                      1;	///< Required element.
    struct soap                         *soap                          ;
};

/// @brief "urn:ebay:apis:eBLBaseComponents":ShippingInfoType is a complexType.
///

/// </BLOCKQUOTE></PRE>
/// class ns3__ShippingInfoType operations:
/// - ns3__ShippingInfoType* soap_new_ns3__ShippingInfoType(soap*) allocate and default initialize
/// - ns3__ShippingInfoType* soap_new_ns3__ShippingInfoType(soap*, int num) allocate array and default initialize values
/// - ns3__ShippingInfoType* soap_new_req_ns3__ShippingInfoType(soap*, ...) allocate, set required members
/// - ns3__ShippingInfoType* soap_new_set_ns3__ShippingInfoType(soap*, ...) allocate, set all public members
/// - ns3__ShippingInfoType::soap_default(soap*) default initialize members
/// - int soap_read_ns3__ShippingInfoType(soap*, ns3__ShippingInfoType*) deserialize from a stream
/// - int soap_write_ns3__ShippingInfoType(soap*, ns3__ShippingInfoType*) serialize to a stream
/// - ns3__ShippingInfoType* ns3__ShippingInfoType::soap_dup(soap*) returns deep copy of ns3__ShippingInfoType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns3__ShippingInfoType::soap_del() deep deletes ns3__ShippingInfoType data members, use only after ns3__ShippingInfoType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns3__ShippingInfoType
{ public:
/// Element "ShippingMethod" of XSD type xs:string.
    std::string                          ShippingMethod                 1;	///< Required element.
/// Element "ShippingCarrier" of XSD type xs:string.
    std::string                          ShippingCarrier                1;	///< Required element.
/// Element "ShippingAmount" of XSD type "urn:ebay:apis:CoreComponentTypes":BasicAmountType.
    ns2__BasicAmountType*                ShippingAmount                 1;	///< Required element.
/// Element "HandlingAmount" of XSD type "urn:ebay:apis:CoreComponentTypes":BasicAmountType.
    ns2__BasicAmountType*                HandlingAmount                 1;	///< Required element.
/// Element "InsuranceAmount" of XSD type "urn:ebay:apis:CoreComponentTypes":BasicAmountType.
    ns2__BasicAmountType*                InsuranceAmount                1;	///< Required element.
    struct soap                         *soap                          ;
};

/// @brief "urn:ebay:apis:eBLBaseComponents":TaxInfoType is a complexType.
///

/// </BLOCKQUOTE></PRE>
/// class ns3__TaxInfoType operations:
/// - ns3__TaxInfoType* soap_new_ns3__TaxInfoType(soap*) allocate and default initialize
/// - ns3__TaxInfoType* soap_new_ns3__TaxInfoType(soap*, int num) allocate array and default initialize values
/// - ns3__TaxInfoType* soap_new_req_ns3__TaxInfoType(soap*, ...) allocate, set required members
/// - ns3__TaxInfoType* soap_new_set_ns3__TaxInfoType(soap*, ...) allocate, set all public members
/// - ns3__TaxInfoType::soap_default(soap*) default initialize members
/// - int soap_read_ns3__TaxInfoType(soap*, ns3__TaxInfoType*) deserialize from a stream
/// - int soap_write_ns3__TaxInfoType(soap*, ns3__TaxInfoType*) serialize to a stream
/// - ns3__TaxInfoType* ns3__TaxInfoType::soap_dup(soap*) returns deep copy of ns3__TaxInfoType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns3__TaxInfoType::soap_del() deep deletes ns3__TaxInfoType data members, use only after ns3__TaxInfoType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns3__TaxInfoType
{ public:
/// Element "TaxAmount" of XSD type "urn:ebay:apis:CoreComponentTypes":BasicAmountType.
    ns2__BasicAmountType*                TaxAmount                      1;	///< Required element.
/// Element "SalesTaxPercentage" of XSD type xs:string.
    std::string                          SalesTaxPercentage             1;	///< Required element.
/// Element "TaxState" of XSD type xs:string.
    std::string                          TaxState                       1;	///< Required element.
    struct soap                         *soap                          ;
};

/// @brief "urn:ebay:apis:eBLBaseComponents":MerchantPullPaymentType is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   MerchantPullPayment Parameters to make initiate a pull payment
/// </BLOCKQUOTE></PRE>
/// class ns3__MerchantPullPaymentType operations:
/// - ns3__MerchantPullPaymentType* soap_new_ns3__MerchantPullPaymentType(soap*) allocate and default initialize
/// - ns3__MerchantPullPaymentType* soap_new_ns3__MerchantPullPaymentType(soap*, int num) allocate array and default initialize values
/// - ns3__MerchantPullPaymentType* soap_new_req_ns3__MerchantPullPaymentType(soap*, ...) allocate, set required members
/// - ns3__MerchantPullPaymentType* soap_new_set_ns3__MerchantPullPaymentType(soap*, ...) allocate, set all public members
/// - ns3__MerchantPullPaymentType::soap_default(soap*) default initialize members
/// - int soap_read_ns3__MerchantPullPaymentType(soap*, ns3__MerchantPullPaymentType*) deserialize from a stream
/// - int soap_write_ns3__MerchantPullPaymentType(soap*, ns3__MerchantPullPaymentType*) serialize to a stream
/// - ns3__MerchantPullPaymentType* ns3__MerchantPullPaymentType::soap_dup(soap*) returns deep copy of ns3__MerchantPullPaymentType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns3__MerchantPullPaymentType::soap_del() deep deletes ns3__MerchantPullPaymentType data members, use only after ns3__MerchantPullPaymentType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns3__MerchantPullPaymentType
{ public:
/// <PRE><BLOCKQUOTE>
///   The amount to charge to the customer. <br/>
///   <br/>
///   <b>Required</b>
///   <br/>
///   <br/>
///   Only numeric characters and a decimal separator are allowed. Limit: 10 single-byte characters, including two for decimals You must set the currencyID attribute to one of the three-character currency code for any of the supported PayPal currencies.
/// </BLOCKQUOTE></PRE>
/// Element "Amount" of XSD type "urn:ebay:apis:CoreComponentTypes":BasicAmountType.
    ns2__BasicAmountType*                Amount                         1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Preapproved Payments billing agreement identification number between the PayPal customer and you. <br/>
///   <br/>
///   <b>Required</b>
///   <br/>
///   <br/>
///   Character limit: 19 single-byte alphanumeric characters.
///   <br/>
///   <br/>
///   The format of a billing agreement identification number is the single-character prefix B, followed by a hyphen and an alphanumeric character string: <br/>
///   <br/>
///   B-unique_alphanumeric_string
/// </BLOCKQUOTE></PRE>
/// Element "MpID" of XSD type "urn:ebay:apis:eBLBaseComponents":MerchantPullIDType.
    ns3__MerchantPullIDType              MpID                           1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Specifies type of PayPal payment you require <br/>
///   <br/>
///   Optional
/// </BLOCKQUOTE></PRE>
/// Element "PaymentType" of XSD type "urn:ebay:apis:eBLBaseComponents":MerchantPullPaymentCodeType.
    enum ns3__MerchantPullPaymentCodeType*  PaymentType                    0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Text entered by the customer in the Note field during enrollment <br/>
///   <br/>
///   Optional
/// </BLOCKQUOTE></PRE>
/// Element "Memo" of XSD type xs:string.
    std::string*                         Memo                           0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Subject line of confirmation email sent to recipient
///   <br/>
///   <br/>
///   Optional
/// </BLOCKQUOTE></PRE>
/// Element "EmailSubject" of XSD type xs:string.
    std::string*                         EmailSubject                   0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   The tax charged on the transaction
///   <br/>
///   <br/>
///   Optional
/// </BLOCKQUOTE></PRE>
/// Element "Tax" of XSD type "urn:ebay:apis:CoreComponentTypes":BasicAmountType.
    ns2__BasicAmountType*                Tax                            0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Per-transaction shipping charge <br/>
///   <br/>
///   Optional
/// </BLOCKQUOTE></PRE>
/// Element "Shipping" of XSD type "urn:ebay:apis:CoreComponentTypes":BasicAmountType.
    ns2__BasicAmountType*                Shipping                       0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Per-transaction handling charge
///   <br/>
///   <br/>
///   Optional
/// </BLOCKQUOTE></PRE>
/// Element "Handling" of XSD type "urn:ebay:apis:CoreComponentTypes":BasicAmountType.
    ns2__BasicAmountType*                Handling                       0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Name of purchased item
///   <br/>
///   <br/>
///   Optional
/// </BLOCKQUOTE></PRE>
/// Element "ItemName" of XSD type xs:string.
    std::string*                         ItemName                       0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Reference number of purchased item
///   <br/>
///   <br/>
///   Optional
/// </BLOCKQUOTE></PRE>
/// Element "ItemNumber" of XSD type xs:string.
    std::string*                         ItemNumber                     0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Your invoice number <br/>
///   <br/>
///   Optional
/// </BLOCKQUOTE></PRE>
/// Element "Invoice" of XSD type xs:string.
    std::string*                         Invoice                        0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Custom annotation field for tracking or other use
///   <br/>
///   <br/>
///   Optional
/// </BLOCKQUOTE></PRE>
/// Element "Custom" of XSD type xs:string.
    std::string*                         Custom                         0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   An identification code for use by third-party applications to identify transactions. <br/>
///   <br/>
///   Optional
///   <br/>
///   <br/>
///   Character length and limitations: 32 single-byte alphanumeric characters
/// </BLOCKQUOTE></PRE>
/// Element "ButtonSource" of XSD type xs:string.
    std::string*                         ButtonSource                   0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Passed in soft descriptor string to be appended. <br/>
///   <br/>
///   Optional
///   <br/>
///   <br/>
///   Character length and limitations: single-byte alphanumeric characters
/// </BLOCKQUOTE></PRE>
/// Element "SoftDescriptor" of XSD type xs:string.
    std::string*                         SoftDescriptor                 0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief "urn:ebay:apis:eBLBaseComponents":PaymentTransactionType is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   PaymentTransactionType Information about a PayPal payment from the seller side
/// </BLOCKQUOTE></PRE>
/// class ns3__PaymentTransactionType operations:
/// - ns3__PaymentTransactionType* soap_new_ns3__PaymentTransactionType(soap*) allocate and default initialize
/// - ns3__PaymentTransactionType* soap_new_ns3__PaymentTransactionType(soap*, int num) allocate array and default initialize values
/// - ns3__PaymentTransactionType* soap_new_req_ns3__PaymentTransactionType(soap*, ...) allocate, set required members
/// - ns3__PaymentTransactionType* soap_new_set_ns3__PaymentTransactionType(soap*, ...) allocate, set all public members
/// - ns3__PaymentTransactionType::soap_default(soap*) default initialize members
/// - int soap_read_ns3__PaymentTransactionType(soap*, ns3__PaymentTransactionType*) deserialize from a stream
/// - int soap_write_ns3__PaymentTransactionType(soap*, ns3__PaymentTransactionType*) serialize to a stream
/// - ns3__PaymentTransactionType* ns3__PaymentTransactionType::soap_dup(soap*) returns deep copy of ns3__PaymentTransactionType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns3__PaymentTransactionType::soap_del() deep deletes ns3__PaymentTransactionType data members, use only after ns3__PaymentTransactionType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns3__PaymentTransactionType
{ public:
/// <PRE><BLOCKQUOTE>
///   Information about the recipient of the payment
/// </BLOCKQUOTE></PRE>
/// Element "ReceiverInfo" of XSD type "urn:ebay:apis:eBLBaseComponents":ReceiverInfoType.
    ns3__ReceiverInfoType*               ReceiverInfo                   1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Information about the payer
/// </BLOCKQUOTE></PRE>
/// Element "PayerInfo" of XSD type "urn:ebay:apis:eBLBaseComponents":PayerInfoType.
    ns3__PayerInfoType*                  PayerInfo                      1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   This field is for holding ReferenceId for shippment sent from Merchant to the 3rd Party
/// </BLOCKQUOTE></PRE>
/// Element "TPLReferenceID" of XSD type xs:string.
    std::string*                         TPLReferenceID                 0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Information about the transaction
/// </BLOCKQUOTE></PRE>
/// Element "PaymentInfo" of XSD type "urn:ebay:apis:eBLBaseComponents":PaymentInfoType.
    ns3__PaymentInfoType*                PaymentInfo                    1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Information about an individual item in the transaction
/// </BLOCKQUOTE></PRE>
/// Element "PaymentItemInfo" of XSD type "urn:ebay:apis:eBLBaseComponents":PaymentItemInfoType.
    ns3__PaymentItemInfoType*            PaymentItemInfo                0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Information about an individual Offer and Coupon information in the transaction
/// </BLOCKQUOTE></PRE>
/// Element "OfferCouponInfo" of XSD type "urn:ebay:apis:eBLBaseComponents":OfferCouponInfoType.
    ns3__OfferCouponInfoType*            OfferCouponInfo                0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Information about Secondary Address
/// </BLOCKQUOTE></PRE>
/// Element "SecondaryAddress" of XSD type "urn:ebay:apis:eBLBaseComponents":AddressType.
    ns3__AddressType*                    SecondaryAddress               0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Information about the user selected options.
/// </BLOCKQUOTE></PRE>
/// Element "UserSelectedOptions" of XSD type "urn:ebay:apis:eBLBaseComponents":UserSelectedOptionType.
    ns3__UserSelectedOptionType*         UserSelectedOptions            0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Information about the Gift message.
/// </BLOCKQUOTE></PRE>
/// Element "GiftMessage" of XSD type xs:string.
    std::string*                         GiftMessage                    0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Information about the Gift receipt.
/// </BLOCKQUOTE></PRE>
/// Element "GiftReceipt" of XSD type xs:string.
    std::string*                         GiftReceipt                    0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Information about the Gift Wrap name.
/// </BLOCKQUOTE></PRE>
/// Element "GiftWrapName" of XSD type xs:string.
    std::string*                         GiftWrapName                   0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Information about the Gift Wrap amount.
/// </BLOCKQUOTE></PRE>
/// Element "GiftWrapAmount" of XSD type "urn:ebay:apis:CoreComponentTypes":BasicAmountType.
    ns2__BasicAmountType*                GiftWrapAmount                 0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Information about the Buyer email.
/// </BLOCKQUOTE></PRE>
/// Element "BuyerEmailOptIn" of XSD type xs:string.
    std::string*                         BuyerEmailOptIn                0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Information about the survey question.
/// </BLOCKQUOTE></PRE>
/// Element "SurveyQuestion" of XSD type xs:string.
    std::string*                         SurveyQuestion                 0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Information about the survey choice selected by the user.
/// </BLOCKQUOTE></PRE>
/// Vector of std::string of length 0..unbounded.
    std::vector<std::string            > SurveyChoiceSelected           0;	///< Elements.
    struct soap                         *soap                          ;
};

/// @brief "urn:ebay:apis:eBLBaseComponents":ReceiverInfoType is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   ReceiverInfoType Receiver information.
/// </BLOCKQUOTE></PRE>
/// class ns3__ReceiverInfoType operations:
/// - ns3__ReceiverInfoType* soap_new_ns3__ReceiverInfoType(soap*) allocate and default initialize
/// - ns3__ReceiverInfoType* soap_new_ns3__ReceiverInfoType(soap*, int num) allocate array and default initialize values
/// - ns3__ReceiverInfoType* soap_new_req_ns3__ReceiverInfoType(soap*, ...) allocate, set required members
/// - ns3__ReceiverInfoType* soap_new_set_ns3__ReceiverInfoType(soap*, ...) allocate, set all public members
/// - ns3__ReceiverInfoType::soap_default(soap*) default initialize members
/// - int soap_read_ns3__ReceiverInfoType(soap*, ns3__ReceiverInfoType*) deserialize from a stream
/// - int soap_write_ns3__ReceiverInfoType(soap*, ns3__ReceiverInfoType*) serialize to a stream
/// - ns3__ReceiverInfoType* ns3__ReceiverInfoType::soap_dup(soap*) returns deep copy of ns3__ReceiverInfoType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns3__ReceiverInfoType::soap_del() deep deletes ns3__ReceiverInfoType data members, use only after ns3__ReceiverInfoType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns3__ReceiverInfoType
{ public:
/// <PRE><BLOCKQUOTE>
///   Email address or account ID of the payment recipient (the seller). Equivalent to Receiver if payment is sent to primary account. <br/>Character length and limitations: 127 single-byte alphanumeric characters
/// </BLOCKQUOTE></PRE>
/// Element "Business" of XSD type "urn:ebay:apis:eBLBaseComponents":EmailAddressType.
    ns3__EmailAddressType                Business                       1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Primary email address of the payment recipient (the seller). If you are the recipient of the payment and the payment is sent to your non-primary email address, the value of Receiver is still your primary email address. <br/>Character length and limitations: 127 single-byte alphanumeric characters
/// </BLOCKQUOTE></PRE>
/// Element "Receiver" of XSD type "urn:ebay:apis:eBLBaseComponents":EmailAddressType.
    ns3__EmailAddressType                Receiver                       1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Unique account ID of the payment recipient (the seller). This value is the same as the value of the recipient's referral ID.
/// </BLOCKQUOTE></PRE>
/// Element "ReceiverID" of XSD type "urn:ebay:apis:eBLBaseComponents":UserIDType.
    ns3__UserIDType                      ReceiverID                     1;	///< Required element.
    struct soap                         *soap                          ;
};

/// @brief "urn:ebay:apis:eBLBaseComponents":PayerInfoType is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   PayerInfoType Payer information
/// </BLOCKQUOTE></PRE>
/// class ns3__PayerInfoType operations:
/// - ns3__PayerInfoType* soap_new_ns3__PayerInfoType(soap*) allocate and default initialize
/// - ns3__PayerInfoType* soap_new_ns3__PayerInfoType(soap*, int num) allocate array and default initialize values
/// - ns3__PayerInfoType* soap_new_req_ns3__PayerInfoType(soap*, ...) allocate, set required members
/// - ns3__PayerInfoType* soap_new_set_ns3__PayerInfoType(soap*, ...) allocate, set all public members
/// - ns3__PayerInfoType::soap_default(soap*) default initialize members
/// - int soap_read_ns3__PayerInfoType(soap*, ns3__PayerInfoType*) deserialize from a stream
/// - int soap_write_ns3__PayerInfoType(soap*, ns3__PayerInfoType*) serialize to a stream
/// - ns3__PayerInfoType* ns3__PayerInfoType::soap_dup(soap*) returns deep copy of ns3__PayerInfoType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns3__PayerInfoType::soap_del() deep deletes ns3__PayerInfoType data members, use only after ns3__PayerInfoType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns3__PayerInfoType
{ public:
/// <PRE><BLOCKQUOTE>
///   Email address of payer <br/>Character length and limitations: 127 single-byte characters
/// </BLOCKQUOTE></PRE>
/// Element "Payer" of XSD type "urn:ebay:apis:eBLBaseComponents":EmailAddressType.
    ns3__EmailAddressType*               Payer                          0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Unique customer ID <br/>Character length and limitations: 17 single-byte characters
/// </BLOCKQUOTE></PRE>
/// Element "PayerID" of XSD type "urn:ebay:apis:eBLBaseComponents":UserIDType.
    ns3__UserIDType*                     PayerID                        0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Status of payer's email address
/// </BLOCKQUOTE></PRE>
/// Element "PayerStatus" of XSD type "urn:ebay:apis:eBLBaseComponents":PayPalUserStatusCodeType.
    enum ns3__PayPalUserStatusCodeType*  PayerStatus                    0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Name of payer
/// </BLOCKQUOTE></PRE>
/// Element "PayerName" of XSD type "urn:ebay:apis:eBLBaseComponents":PersonNameType.
    ns3__PersonNameType*                 PayerName                      1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Payment sender's country of residence using standard two-character ISO 3166 country codes. Character length and limitations: Two single-byte characters
/// </BLOCKQUOTE></PRE>
/// Element "PayerCountry" of XSD type "urn:ebay:apis:eBLBaseComponents":CountryCodeType.
    enum ns3__CountryCodeType*           PayerCountry                   0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Payer's business name. <br/>Character length and limitations: 127 single-byte characters
/// </BLOCKQUOTE></PRE>
/// Element "PayerBusiness" of XSD type xs:string.
    std::string*                         PayerBusiness                  0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Payer's business address
/// </BLOCKQUOTE></PRE>
/// Element "Address" of XSD type "urn:ebay:apis:eBLBaseComponents":AddressType.
    ns3__AddressType*                    Address                        0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Business contact telephone number
/// </BLOCKQUOTE></PRE>
/// Element "ContactPhone" of XSD type xs:string.
    std::string*                         ContactPhone                   0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Items such as merchant coupons, loyalty cards, and manufacturer coupons in the PayPal wallet.
/// </BLOCKQUOTE></PRE>
/// Vector of ns3__WalletItemsType* of length 0..unbounded.
    std::vector<ns3__WalletItemsType*  > WalletItems                    0;	///< Elements.
/// <PRE><BLOCKQUOTE>
///   Details about payer's tax info.<br/>
///   Refer to the TaxIdDetailsType for more details.<br/>
/// </BLOCKQUOTE></PRE>
/// Element "TaxIdDetails" of XSD type "urn:ebay:apis:eBLBaseComponents":TaxIdDetailsType.
    ns3__TaxIdDetailsType*               TaxIdDetails                   0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Holds any enhanced information about the payer
/// </BLOCKQUOTE></PRE>
/// Element "EnhancedPayerInfo" of XSD type "urn:ebay:apis:EnhancedDataTypes":EnhancedPayerInfoType.
    ns4__EnhancedPayerInfoType*          EnhancedPayerInfo              0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief "urn:ebay:apis:eBLBaseComponents":PayeeInfoType is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   PayeeInfoType
///   Payee Information
/// </BLOCKQUOTE></PRE>
/// class ns3__PayeeInfoType operations:
/// - ns3__PayeeInfoType* soap_new_ns3__PayeeInfoType(soap*) allocate and default initialize
/// - ns3__PayeeInfoType* soap_new_ns3__PayeeInfoType(soap*, int num) allocate array and default initialize values
/// - ns3__PayeeInfoType* soap_new_req_ns3__PayeeInfoType(soap*, ...) allocate, set required members
/// - ns3__PayeeInfoType* soap_new_set_ns3__PayeeInfoType(soap*, ...) allocate, set all public members
/// - ns3__PayeeInfoType::soap_default(soap*) default initialize members
/// - int soap_read_ns3__PayeeInfoType(soap*, ns3__PayeeInfoType*) deserialize from a stream
/// - int soap_write_ns3__PayeeInfoType(soap*, ns3__PayeeInfoType*) serialize to a stream
/// - ns3__PayeeInfoType* ns3__PayeeInfoType::soap_dup(soap*) returns deep copy of ns3__PayeeInfoType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns3__PayeeInfoType::soap_del() deep deletes ns3__PayeeInfoType data members, use only after ns3__PayeeInfoType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns3__PayeeInfoType
{ public:
/// <PRE><BLOCKQUOTE>
///   Email address of payee/agreement owner
///   <br/>Character length and limitations: 127 single-byte characters
/// </BLOCKQUOTE></PRE>
/// Element "PayeeEmail" of XSD type "urn:ebay:apis:eBLBaseComponents":EmailAddressType.
    ns3__EmailAddressType*               PayeeEmail                     0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Unique Merchant ID
///   <br/>Character length and limitations: 17 single-byte characters
/// </BLOCKQUOTE></PRE>
/// Element "PayeeID" of XSD type "urn:ebay:apis:eBLBaseComponents":UserIDType.
    ns3__UserIDType*                     PayeeID                        0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief "urn:ebay:apis:eBLBaseComponents":InstrumentDetailsType is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   InstrumentDetailsType
///   Promotional Instrument Information.
/// </BLOCKQUOTE></PRE>
/// class ns3__InstrumentDetailsType operations:
/// - ns3__InstrumentDetailsType* soap_new_ns3__InstrumentDetailsType(soap*) allocate and default initialize
/// - ns3__InstrumentDetailsType* soap_new_ns3__InstrumentDetailsType(soap*, int num) allocate array and default initialize values
/// - ns3__InstrumentDetailsType* soap_new_req_ns3__InstrumentDetailsType(soap*, ...) allocate, set required members
/// - ns3__InstrumentDetailsType* soap_new_set_ns3__InstrumentDetailsType(soap*, ...) allocate, set all public members
/// - ns3__InstrumentDetailsType::soap_default(soap*) default initialize members
/// - int soap_read_ns3__InstrumentDetailsType(soap*, ns3__InstrumentDetailsType*) deserialize from a stream
/// - int soap_write_ns3__InstrumentDetailsType(soap*, ns3__InstrumentDetailsType*) serialize to a stream
/// - ns3__InstrumentDetailsType* ns3__InstrumentDetailsType::soap_dup(soap*) returns deep copy of ns3__InstrumentDetailsType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns3__InstrumentDetailsType::soap_del() deep deletes ns3__InstrumentDetailsType data members, use only after ns3__InstrumentDetailsType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns3__InstrumentDetailsType
{ public:
/// <PRE><BLOCKQUOTE>
///   This field holds the category of the instrument only when it is promotional. Return value 1 represents BML, 2 reprasents PLCC/Cobranded.
/// </BLOCKQUOTE></PRE>
/// Element "InstrumentCategory" of XSD type xs:string.
    std::string*                         InstrumentCategory             0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   This field holds the InstrumentID issued by external party corresponding to the funding source used in payment.
/// </BLOCKQUOTE></PRE>
/// Element "InstrumentID" of XSD type xs:string.
    std::string*                         InstrumentID                   0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief "urn:ebay:apis:eBLBaseComponents":BMLOfferInfoType is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   BMLOfferInfoType
///   Specific information for BML.
/// </BLOCKQUOTE></PRE>
/// class ns3__BMLOfferInfoType operations:
/// - ns3__BMLOfferInfoType* soap_new_ns3__BMLOfferInfoType(soap*) allocate and default initialize
/// - ns3__BMLOfferInfoType* soap_new_ns3__BMLOfferInfoType(soap*, int num) allocate array and default initialize values
/// - ns3__BMLOfferInfoType* soap_new_req_ns3__BMLOfferInfoType(soap*, ...) allocate, set required members
/// - ns3__BMLOfferInfoType* soap_new_set_ns3__BMLOfferInfoType(soap*, ...) allocate, set all public members
/// - ns3__BMLOfferInfoType::soap_default(soap*) default initialize members
/// - int soap_read_ns3__BMLOfferInfoType(soap*, ns3__BMLOfferInfoType*) deserialize from a stream
/// - int soap_write_ns3__BMLOfferInfoType(soap*, ns3__BMLOfferInfoType*) serialize to a stream
/// - ns3__BMLOfferInfoType* ns3__BMLOfferInfoType::soap_dup(soap*) returns deep copy of ns3__BMLOfferInfoType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns3__BMLOfferInfoType::soap_del() deep deletes ns3__BMLOfferInfoType data members, use only after ns3__BMLOfferInfoType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns3__BMLOfferInfoType
{ public:
/// <PRE><BLOCKQUOTE>
///   Unique identification for merchant/buyer/offer combo.
/// </BLOCKQUOTE></PRE>
/// Element "OfferTrackingID" of XSD type xs:string.
    std::string*                         OfferTrackingID                0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief "urn:ebay:apis:eBLBaseComponents":OfferDetailsType is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   OfferDetailsType
///   Specific information for an offer.
/// </BLOCKQUOTE></PRE>
/// class ns3__OfferDetailsType operations:
/// - ns3__OfferDetailsType* soap_new_ns3__OfferDetailsType(soap*) allocate and default initialize
/// - ns3__OfferDetailsType* soap_new_ns3__OfferDetailsType(soap*, int num) allocate array and default initialize values
/// - ns3__OfferDetailsType* soap_new_req_ns3__OfferDetailsType(soap*, ...) allocate, set required members
/// - ns3__OfferDetailsType* soap_new_set_ns3__OfferDetailsType(soap*, ...) allocate, set all public members
/// - ns3__OfferDetailsType::soap_default(soap*) default initialize members
/// - int soap_read_ns3__OfferDetailsType(soap*, ns3__OfferDetailsType*) deserialize from a stream
/// - int soap_write_ns3__OfferDetailsType(soap*, ns3__OfferDetailsType*) serialize to a stream
/// - ns3__OfferDetailsType* ns3__OfferDetailsType::soap_dup(soap*) returns deep copy of ns3__OfferDetailsType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns3__OfferDetailsType::soap_del() deep deletes ns3__OfferDetailsType data members, use only after ns3__OfferDetailsType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns3__OfferDetailsType
{ public:
/// <PRE><BLOCKQUOTE>
///   Code used to identify the promotion offer.
/// </BLOCKQUOTE></PRE>
/// Element "OfferCode" of XSD type xs:string.
    std::string*                         OfferCode                      0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Specific infromation for BML, Similar structure could be added for sepcific
///   <br/> promotion needs like CrossPromotions
/// </BLOCKQUOTE></PRE>
/// Element "BMLOfferInfo" of XSD type "urn:ebay:apis:eBLBaseComponents":BMLOfferInfoType.
    ns3__BMLOfferInfoType*               BMLOfferInfo                   0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief "urn:ebay:apis:eBLBaseComponents":PaymentInfoType is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   PaymentInfoType Payment information.
/// </BLOCKQUOTE></PRE>
/// class ns3__PaymentInfoType operations:
/// - ns3__PaymentInfoType* soap_new_ns3__PaymentInfoType(soap*) allocate and default initialize
/// - ns3__PaymentInfoType* soap_new_ns3__PaymentInfoType(soap*, int num) allocate array and default initialize values
/// - ns3__PaymentInfoType* soap_new_req_ns3__PaymentInfoType(soap*, ...) allocate, set required members
/// - ns3__PaymentInfoType* soap_new_set_ns3__PaymentInfoType(soap*, ...) allocate, set all public members
/// - ns3__PaymentInfoType::soap_default(soap*) default initialize members
/// - int soap_read_ns3__PaymentInfoType(soap*, ns3__PaymentInfoType*) deserialize from a stream
/// - int soap_write_ns3__PaymentInfoType(soap*, ns3__PaymentInfoType*) serialize to a stream
/// - ns3__PaymentInfoType* ns3__PaymentInfoType::soap_dup(soap*) returns deep copy of ns3__PaymentInfoType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns3__PaymentInfoType::soap_del() deep deletes ns3__PaymentInfoType data members, use only after ns3__PaymentInfoType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns3__PaymentInfoType
{ public:
/// <PRE><BLOCKQUOTE>
///   A transaction identification number. <br/>Character length and limits: 19 single-byte characters maximum
/// </BLOCKQUOTE></PRE>
/// Element reference "urn:ebay:apis:eBLBaseComponents:""urn:ebay:apis:eBLBaseComponents":TransactionID.
    std::string*                         TransactionID                  0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Its Ebay transaction id.
///   <br/>EbayTransactionID will returned for immediate pay item transaction in ECA
/// </BLOCKQUOTE></PRE>
/// Element reference "urn:ebay:apis:eBLBaseComponents:""urn:ebay:apis:eBLBaseComponents":EbayTransactionID.
    std::string*                         EbayTransactionID              0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Parent or related transaction identification number. This field is populated for the following transaction types: <br/>
///   <br/>
///   Reversal
///   <br/>
///   Capture of an authorized transaction.
///   <br/>
///   Reauthorization of a transaction.
///   <br/>
///   Capture of an order. The value of ParentTransactionID is the original OrderID.
///   <br/>
///   Authorization of an order. The value of ParentTransactionID is the original OrderID.
///   <br/>
///   Capture of an order authorization.
///   <br/>
///   Void of an order. The value of ParentTransactionID is the original OrderID.
///   <br/>
///   <br/>
///   Character length and limits: 19 single-byte characters maximum
/// </BLOCKQUOTE></PRE>
/// Element "ParentTransactionID" of XSD type "urn:ebay:apis:eBLBaseComponents":TransactionId.
    ns3__TransactionId*                  ParentTransactionID            0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Receipt ID <br/>
///   <br/>
///   Character length and limitations: 16 digits in xxxx-xxxx-xxxx-xxxx format
/// </BLOCKQUOTE></PRE>
/// Element reference "urn:ebay:apis:eBLBaseComponents:""urn:ebay:apis:eBLBaseComponents":ReceiptID.
    std::string*                         ReceiptID                      0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   The type of transaction <br/>
///   <br/>
///   cart: Transaction created via the PayPal Shopping Cart feature or by Express Checkout with multiple purchased item
///   <br/>
///   <br/>
///   express-checkout: Transaction created by Express Checkout with a single purchased items
///   <br/>
///   <br/>
///   send-money: Transaction created by customer from the Send Money tab on the PayPal website.
///   <br/>
///   <br/>
///   web-accept: Transaction created by customer via Buy Now, Donation, or Auction Smart Logos.
///   <br/>
///   <br/>
///   subscr-*: Transaction created by customer via Subscription. eot means "end of subscription term."
///   <br/>
///   <br/>
///   merch-pmt: preapproved payment.
///   <br/>
///   <br/>
///   mass-pay: Transaction created via MassPay.
///   <br/>
///   <br/>
///   virtual-terminal: Transaction created via merchant virtual terminal.
///   <br/>
///   <br/>
///   credit: Transaction created via merchant virtual terminal or API to credit a customer.
/// </BLOCKQUOTE></PRE>
/// Element "TransactionType" of XSD type "urn:ebay:apis:eBLBaseComponents":PaymentTransactionCodeType.
    enum ns3__PaymentTransactionCodeType  TransactionType                1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   The type of payment
/// </BLOCKQUOTE></PRE>
/// Element "PaymentType" of XSD type "urn:ebay:apis:eBLBaseComponents":PaymentCodeType.
    enum ns3__PaymentCodeType*           PaymentType                    0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   The type of funding source
/// </BLOCKQUOTE></PRE>
/// Element "RefundSourceCodeType" of XSD type "urn:ebay:apis:eBLBaseComponents":RefundSourceCodeType.
    enum ns3__RefundSourceCodeType*      RefundSourceCodeType           0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   eCheck latest expected clear date
/// </BLOCKQUOTE></PRE>
/// Element "ExpectedeCheckClearDate" of XSD type xs:dateTime.
    time_t*                              ExpectedeCheckClearDate        0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Date and time of payment
/// </BLOCKQUOTE></PRE>
/// Element "PaymentDate" of XSD type xs:dateTime.
    time_t*                              PaymentDate                    0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Full amount of the customer's payment, before transaction fee is subtracted
/// </BLOCKQUOTE></PRE>
/// Element "GrossAmount" of XSD type "urn:ebay:apis:CoreComponentTypes":BasicAmountType.
    ns2__BasicAmountType*                GrossAmount                    0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Transaction fee associated with the payment
/// </BLOCKQUOTE></PRE>
/// Element "FeeAmount" of XSD type "urn:ebay:apis:CoreComponentTypes":BasicAmountType.
    ns2__BasicAmountType*                FeeAmount                      0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Transaction financing fee associated with the payment.
/// </BLOCKQUOTE></PRE>
/// Element "FinancingFeeAmount" of XSD type "urn:ebay:apis:CoreComponentTypes":BasicAmountType.
    ns2__BasicAmountType*                FinancingFeeAmount             0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Total overall cost associated with this financing transaction.
/// </BLOCKQUOTE></PRE>
/// Element "FinancingTotalCost" of XSD type "urn:ebay:apis:CoreComponentTypes":BasicAmountType.
    ns2__BasicAmountType*                FinancingTotalCost             0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Monthly payment for this financing transaction.
/// </BLOCKQUOTE></PRE>
/// Element "FinancingMonthlyPayment" of XSD type "urn:ebay:apis:CoreComponentTypes":BasicAmountType.
    ns2__BasicAmountType*                FinancingMonthlyPayment        0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   The length of this financing term, in months.
/// </BLOCKQUOTE></PRE>
/// Element "FinancingTerm" of XSD type xs:string.
    std::string*                         FinancingTerm                  0;	///< Optional element.
/// Element "IsFinancing" of XSD type xs:string.
    std::string*                         IsFinancing                    0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Amount deposited into the account's primary balance after a currency conversion from automatic conversion through your Payment Receiving Preferences or manual conversion through manually accepting a payment. This amount is calculated after fees and taxes have been assessed.
/// </BLOCKQUOTE></PRE>
/// Element "SettleAmount" of XSD type "urn:ebay:apis:CoreComponentTypes":BasicAmountType.
    ns2__BasicAmountType*                SettleAmount                   0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Amount of tax for transaction
/// </BLOCKQUOTE></PRE>
/// Element "TaxAmount" of XSD type "urn:ebay:apis:CoreComponentTypes":BasicAmountType.
    ns2__BasicAmountType*                TaxAmount                      0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Exchange rate for transaction
/// </BLOCKQUOTE></PRE>
/// Element "ExchangeRate" of XSD type xs:string.
    std::string*                         ExchangeRate                   0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   The status of the payment:
///   <br/>
///   <br/>
///   None: No status
///   <br/>
///   <br/>
///   Created: A giropay payment has been initiated.
///   <br/>
///   <br/>
///   Canceled-Reversal: A reversal has been canceled. For example, you won a dispute with the customer, and the funds for the transaction that was reversed have been returned to you.
///   <br/>
///   <br/>
///   Completed: The payment has been completed, and the funds have been added successfully to your account balance.
///   <br/>
///   <br/>
///   Denied: You denied the payment. This happens only if the payment was previously pending because of possible reasons described for the PendingReason element.
///   <br/>
///   <br/>
///   Expired: This authorization has expired and cannot be captured.
///   <br/>
///   <br/>
///   Failed: The payment has failed. This happens only if the payment was made from your customer's bank account.
///   <br/>
///   <br/>
///   In-Progress: The transaction is in process of authorization and capture.
///   <br/>
///   <br/>
///   Partially-Refunded: The transaction has been partially refunded.
///   <br/>
///   <br/>
///   Pending: The payment is pending. See "PendingReason" for more information.
///   <br/>
///   <br/>
///   Refunded: You refunded the payment.
///   <br/>
///   <br/>
///   Reversed: A payment was reversed due to a chargeback or other type of reversal. The funds have been removed from your account balance and returned to the buyer. The reason for the reversal is specified in the ReasonCode element.
///   <br/>
///   <br/>
///   Processed: A payment has been accepted.
///   <br/>
///   <br/>
///   Voided: This authorization has been voided.
///   <br/>
///   <br/>
///   Completed-Funds-Held: The payment has been completed, and the funds have been added successfully to your pending balance. See the "HoldDecision" field for more information.
/// </BLOCKQUOTE></PRE>
/// Element "PaymentStatus" of XSD type "urn:ebay:apis:eBLBaseComponents":PaymentStatusCodeType.
    enum ns3__PaymentStatusCodeType      PaymentStatus                  1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   The reason the payment is pending: none: No pending reason
///   <br/>
///   <br/>
///   address: The payment is pending because your customer did not include a confirmed shipping address and your Payment Receiving Preferences is set such that you want to manually accept or deny each of these payments. To change your preference, go to the Preferences section of your Profile.
///   <br/>
///   <br/>
///   authorization: You set PaymentAction to Authorization on SetExpressCheckoutRequest and have not yet captured funds.
///   <br/>
///   <br/>
///   echeck: The payment is pending because it was made by an eCheck that has not yet cleared.
///   <br/>
///   <br/>
///   intl: The payment is pending because you hold a non-U.S. account and do not have a withdrawal mechanism. You must manually accept or deny this payment from your Account Overview.
///   <br/>
///   <br/>
///   multi-currency: You do not have a balance in the currency sent, and you do not have your Payment Receiving Preferences set to automatically convert and accept this payment. You must manually accept or deny this payment.
///   <br/>
///   <br/>
///   unilateral: The payment is pending because it was made to an email address that is not yet registered or confirmed.
///   <br/>
///   <br/>
///   upgrade: The payment is pending because it was made via credit card and you must upgrade your account to Business or Premier status in order to receive the funds. upgrade can also mean that you have reached the monthly limit for transactions on your account.
///   <br/>
///   <br/>
///   verify: The payment is pending because you are not yet verified. You must verify your account before you can accept this payment.
///   <br/>
///   <br/>
///   regulatory-review: This payment is pending while we make sure it meets regulatory requirements. We'll contact you again in 24-72 hours with the outcome of our review.
///   <br/>
///   <br/>
///   other: The payment is pending for a reason other than those listed above. For more information, contact PayPal Customer Service.
/// </BLOCKQUOTE></PRE>
/// Element "PendingReason" of XSD type "urn:ebay:apis:eBLBaseComponents":PendingStatusCodeType.
    enum ns3__PendingStatusCodeType*     PendingReason                  0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   The reason for a reversal if TransactionType is reversal: none: No reason code
///   <br/>
///   <br/>
///   chargeback: A reversal has occurred on this transaction due to a chargeback by your customer.
///   <br/>
///   <br/>
///   guarantee: A reversal has occurred on this transaction due to your customer triggering a money-back guarantee.
///   <br/>
///   <br/>
///   buyer-complaint: A reversal has occurred on this transaction due to a complaint about the transaction from your customer.
///   <br/>
///   <br/>
///   refund: A reversal has occurred on this transaction because you have given the customer a refund.
///   <br/>
///   <br/>
///   other: A reversal has occurred on this transaction due to a reason not listed above.
/// </BLOCKQUOTE></PRE>
/// Element "ReasonCode" of XSD type "urn:ebay:apis:eBLBaseComponents":ReversalReasonCodeType.
    enum ns3__ReversalReasonCodeType*    ReasonCode                     0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   HoldDecision is returned in the response only if PaymentStatus is Completed-Funds-Held. The reason the funds are kept in pending balance: newsellerpaymenthold: The seller is new.
///   <br/>
///   <br/>
///   paymenthold: A hold is placed on your transaction due to a reason not listed above.
/// </BLOCKQUOTE></PRE>
/// Element "HoldDecision" of XSD type xs:string.
    std::string*                         HoldDecision                   0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Shipping method selected by the user during check-out.
/// </BLOCKQUOTE></PRE>
/// Element "ShippingMethod" of XSD type xs:string.
    std::string*                         ShippingMethod                 0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Protection Eligibility for this Transaction - None, SPP or ESPP
/// </BLOCKQUOTE></PRE>
/// Element "ProtectionEligibility" of XSD type xs:string.
    std::string*                         ProtectionEligibility          0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Protection Eligibility details for this Transaction
/// </BLOCKQUOTE></PRE>
/// Element "ProtectionEligibilityType" of XSD type xs:string.
    std::string*                         ProtectionEligibilityType      0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Receipt Reference Number for this Transaction
/// </BLOCKQUOTE></PRE>
/// Element "ReceiptReferenceNumber" of XSD type xs:string.
    std::string*                         ReceiptReferenceNumber         0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   The type of POS transaction
///   <br/>
///   <br/>
///   F: Forced post transaction. POS merchant can send transactions at a later point if connectivity is lost.
///   <br/>
///   <br/>
///   S: Single call checkout, and this is to identify PayPal Lite API usage.
/// </BLOCKQUOTE></PRE>
/// Element "POSTransactionType" of XSD type "urn:ebay:apis:eBLBaseComponents":POSTransactionCodeType.
    enum ns3__POSTransactionCodeType*    POSTransactionType             0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Amount of shipping charged on transaction
/// </BLOCKQUOTE></PRE>
/// Element "ShipAmount" of XSD type xs:string.
    std::string*                         ShipAmount                     0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Amount of ship handling charged on transaction
/// </BLOCKQUOTE></PRE>
/// Element "ShipHandleAmount" of XSD type xs:string.
    std::string*                         ShipHandleAmount               0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Amount of shipping discount on transaction
/// </BLOCKQUOTE></PRE>
/// Element "ShipDiscount" of XSD type xs:string.
    std::string*                         ShipDiscount                   0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Amount of Insurance amount on transaction
/// </BLOCKQUOTE></PRE>
/// Element "InsuranceAmount" of XSD type xs:string.
    std::string*                         InsuranceAmount                0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Subject as entered in the transaction
/// </BLOCKQUOTE></PRE>
/// Element "Subject" of XSD type xs:string.
    std::string*                         Subject                        0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   StoreID as entered in the transaction
/// </BLOCKQUOTE></PRE>
/// Element "StoreID" of XSD type xs:string.
    std::string*                         StoreID                        0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   TerminalID as entered in the transaction
/// </BLOCKQUOTE></PRE>
/// Element "TerminalID" of XSD type xs:string.
    std::string*                         TerminalID                     0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Details about the seller.<br/>
///   Optional <br/>
/// </BLOCKQUOTE></PRE>
/// Element "SellerDetails" of XSD type "urn:ebay:apis:eBLBaseComponents":SellerDetailsType.
    ns3__SellerDetailsType*              SellerDetails                  0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Unique identifier and mandatory for each bucket in case of split payement
/// </BLOCKQUOTE></PRE>
/// Element "PaymentRequestID" of XSD type xs:string.
    std::string*                         PaymentRequestID               0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Thes are filters that could result in accept/deny/pending action.
/// </BLOCKQUOTE></PRE>
/// Element "FMFDetails" of XSD type "urn:ebay:apis:eBLBaseComponents":FMFDetailsType.
    ns3__FMFDetailsType*                 FMFDetails                     0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   This will be enhanced info for the payment: Example: UATP details
/// </BLOCKQUOTE></PRE>
/// Element "EnhancedPaymentInfo" of XSD type "urn:ebay:apis:EnhancedDataTypes":EnhancedPaymentInfoType.
    ns4__EnhancedPaymentInfoType*        EnhancedPaymentInfo            0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   This will indicate the payment status for individual payment request in case of split payment
/// </BLOCKQUOTE></PRE>
/// Element "PaymentError" of XSD type "urn:ebay:apis:eBLBaseComponents":ErrorType.
    ns3__ErrorType*                      PaymentError                   0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Type of the payment instrument.
/// </BLOCKQUOTE></PRE>
/// Element "InstrumentDetails" of XSD type "urn:ebay:apis:eBLBaseComponents":InstrumentDetailsType.
    ns3__InstrumentDetailsType*          InstrumentDetails              0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Offer Details.
/// </BLOCKQUOTE></PRE>
/// Element "OfferDetails" of XSD type "urn:ebay:apis:eBLBaseComponents":OfferDetailsType.
    ns3__OfferDetailsType*               OfferDetails                   0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   This field indicates whether the credit card number used for this transaction is in a particular bin range registered with PayPal by the merchant. This filed is optional and will be present if merchant has a registered bin range. The value of this field will be "true" if merchant has a registered bin range and the credit card used in the transaction is within the registered bin range.
///   The value of this field will be false if merchant has a registered bin range and credit card used in the transaction outside registered bin range or the transaction is not done using a credit card.
/// </BLOCKQUOTE></PRE>
/// Element "BinEligibility" of XSD type xs:string.
    std::string*                         BinEligibility                 0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   This information holds business name and other data describing the transaction.<br/>
///   This information is usually displayed in the CC account holder's statement.<br/>
/// </BLOCKQUOTE></PRE>
/// Element "SoftDescriptor" of XSD type xs:string.
    std::string*                         SoftDescriptor                 0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   CC Information about how consumer should contact the merchant.<br/>
///   This information is usually displayed in the CC account holder's statement.<br/>
/// </BLOCKQUOTE></PRE>
/// Element "SoftDescriptorCity" of XSD type xs:string.
    std::string*                         SoftDescriptorCity             0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief "urn:ebay:apis:eBLBaseComponents":SubscriptionTermsType is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   SubscriptionTermsType Terms of a PayPal subscription.
/// </BLOCKQUOTE></PRE>
/// class ns3__SubscriptionTermsType operations:
/// - ns3__SubscriptionTermsType* soap_new_ns3__SubscriptionTermsType(soap*) allocate and default initialize
/// - ns3__SubscriptionTermsType* soap_new_ns3__SubscriptionTermsType(soap*, int num) allocate array and default initialize values
/// - ns3__SubscriptionTermsType* soap_new_req_ns3__SubscriptionTermsType(soap*, ...) allocate, set required members
/// - ns3__SubscriptionTermsType* soap_new_set_ns3__SubscriptionTermsType(soap*, ...) allocate, set all public members
/// - ns3__SubscriptionTermsType::soap_default(soap*) default initialize members
/// - int soap_read_ns3__SubscriptionTermsType(soap*, ns3__SubscriptionTermsType*) deserialize from a stream
/// - int soap_write_ns3__SubscriptionTermsType(soap*, ns3__SubscriptionTermsType*) serialize to a stream
/// - ns3__SubscriptionTermsType* ns3__SubscriptionTermsType::soap_dup(soap*) returns deep copy of ns3__SubscriptionTermsType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns3__SubscriptionTermsType::soap_del() deep deletes ns3__SubscriptionTermsType data members, use only after ns3__SubscriptionTermsType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns3__SubscriptionTermsType
{ public:
/// Element "Amount" of XSD type "urn:ebay:apis:CoreComponentTypes":BasicAmountType.
    ns2__BasicAmountType*                Amount                         1;	///< Required element.
/// Attribute "period" of XSD type xs:string.
   @std::string                          period                         1;	///< Required attribute.
    struct soap                         *soap                          ;
};

/// @brief "urn:ebay:apis:eBLBaseComponents":SubscriptionInfoType is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   SubscriptionInfoType Information about a PayPal Subscription.
/// </BLOCKQUOTE></PRE>
/// class ns3__SubscriptionInfoType operations:
/// - ns3__SubscriptionInfoType* soap_new_ns3__SubscriptionInfoType(soap*) allocate and default initialize
/// - ns3__SubscriptionInfoType* soap_new_ns3__SubscriptionInfoType(soap*, int num) allocate array and default initialize values
/// - ns3__SubscriptionInfoType* soap_new_req_ns3__SubscriptionInfoType(soap*, ...) allocate, set required members
/// - ns3__SubscriptionInfoType* soap_new_set_ns3__SubscriptionInfoType(soap*, ...) allocate, set all public members
/// - ns3__SubscriptionInfoType::soap_default(soap*) default initialize members
/// - int soap_read_ns3__SubscriptionInfoType(soap*, ns3__SubscriptionInfoType*) deserialize from a stream
/// - int soap_write_ns3__SubscriptionInfoType(soap*, ns3__SubscriptionInfoType*) serialize to a stream
/// - ns3__SubscriptionInfoType* ns3__SubscriptionInfoType::soap_dup(soap*) returns deep copy of ns3__SubscriptionInfoType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns3__SubscriptionInfoType::soap_del() deep deletes ns3__SubscriptionInfoType data members, use only after ns3__SubscriptionInfoType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns3__SubscriptionInfoType
{ public:
/// <PRE><BLOCKQUOTE>
///   ID generated by PayPal for the subscriber. Character length and limitations: no limit
/// </BLOCKQUOTE></PRE>
/// Element reference "urn:ebay:apis:eBLBaseComponents:""urn:ebay:apis:eBLBaseComponents":SubscriptionID.
    std::string                          SubscriptionID                 1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Subscription start date
/// </BLOCKQUOTE></PRE>
/// Element "SubscriptionDate" of XSD type xs:dateTime.
    time_t*                              SubscriptionDate               0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Date when the subscription modification will be effective
/// </BLOCKQUOTE></PRE>
/// Element "EffectiveDate" of XSD type xs:dateTime.
    time_t*                              EffectiveDate                  0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Date PayPal will retry a failed subscription payment
/// </BLOCKQUOTE></PRE>
/// Element "RetryTime" of XSD type xs:dateTime.
    time_t*                              RetryTime                      0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Username generated by PayPal and given to subscriber to access the subscription. Character length and limitations: 64 alphanumeric single-byte characters
/// </BLOCKQUOTE></PRE>
/// Element "Username" of XSD type xs:string.
    std::string*                         Username                       0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Password generated by PayPal and given to subscriber to access the subscription. For security, the value of the password is hashed. Character length and limitations: 128 alphanumeric single-byte characters
/// </BLOCKQUOTE></PRE>
/// Element "Password" of XSD type xs:string.
    std::string*                         Password                       0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   The number of payment installments that will occur at the regular rate. Character length and limitations: no limit
/// </BLOCKQUOTE></PRE>
/// Element "Recurrences" of XSD type xs:string.
    std::string*                         Recurrences                    0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Subscription duration and charges
/// </BLOCKQUOTE></PRE>
/// Vector of ns3__SubscriptionTermsType* of length 0..unbounded.
    std::vector<ns3__SubscriptionTermsType*> Terms                          0;	///< Elements.
/// Attribute "reattempt" of XSD type xs:string.
   @std::string                          reattempt                      1;	///< Required attribute.
/// Attribute "recurring" of XSD type xs:string.
   @std::string                          recurring                      1;	///< Required attribute.
    struct soap                         *soap                          ;
};

/// @brief "urn:ebay:apis:eBLBaseComponents":AuctionInfoType is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   AuctionInfoType Basic information about an auction.
/// </BLOCKQUOTE></PRE>
/// class ns3__AuctionInfoType operations:
/// - ns3__AuctionInfoType* soap_new_ns3__AuctionInfoType(soap*) allocate and default initialize
/// - ns3__AuctionInfoType* soap_new_ns3__AuctionInfoType(soap*, int num) allocate array and default initialize values
/// - ns3__AuctionInfoType* soap_new_req_ns3__AuctionInfoType(soap*, ...) allocate, set required members
/// - ns3__AuctionInfoType* soap_new_set_ns3__AuctionInfoType(soap*, ...) allocate, set all public members
/// - ns3__AuctionInfoType::soap_default(soap*) default initialize members
/// - int soap_read_ns3__AuctionInfoType(soap*, ns3__AuctionInfoType*) deserialize from a stream
/// - int soap_write_ns3__AuctionInfoType(soap*, ns3__AuctionInfoType*) serialize to a stream
/// - ns3__AuctionInfoType* ns3__AuctionInfoType::soap_dup(soap*) returns deep copy of ns3__AuctionInfoType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns3__AuctionInfoType::soap_del() deep deletes ns3__AuctionInfoType data members, use only after ns3__AuctionInfoType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns3__AuctionInfoType
{ public:
/// <PRE><BLOCKQUOTE>
///   Customer's auction ID
/// </BLOCKQUOTE></PRE>
/// Element "BuyerID" of XSD type xs:string.
    std::string*                         BuyerID                        0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Auction's close date
/// </BLOCKQUOTE></PRE>
/// Element "ClosingDate" of XSD type xs:dateTime.
    time_t*                              ClosingDate                    0;	///< Optional element.
/// Attribute "multiItem" of XSD type xs:string.
   @std::string                          multiItem                      1;	///< Required attribute.
    struct soap                         *soap                          ;
};

/// @brief "urn:ebay:apis:eBLBaseComponents":OptionType is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   OptionType PayPal item options for shopping cart.
/// </BLOCKQUOTE></PRE>
/// class ns3__OptionType operations:
/// - ns3__OptionType* soap_new_ns3__OptionType(soap*) allocate and default initialize
/// - ns3__OptionType* soap_new_ns3__OptionType(soap*, int num) allocate array and default initialize values
/// - ns3__OptionType* soap_new_req_ns3__OptionType(soap*, ...) allocate, set required members
/// - ns3__OptionType* soap_new_set_ns3__OptionType(soap*, ...) allocate, set all public members
/// - ns3__OptionType::soap_default(soap*) default initialize members
/// - int soap_read_ns3__OptionType(soap*, ns3__OptionType*) deserialize from a stream
/// - int soap_write_ns3__OptionType(soap*, ns3__OptionType*) serialize to a stream
/// - ns3__OptionType* ns3__OptionType::soap_dup(soap*) returns deep copy of ns3__OptionType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns3__OptionType::soap_del() deep deletes ns3__OptionType data members, use only after ns3__OptionType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns3__OptionType
{ public:
/// Attribute "name" of XSD type xs:string.
   @std::string                          name                           1;	///< Required attribute.
/// Attribute "value" of XSD type xs:string.
   @std::string                          value                          1;	///< Required attribute.
    struct soap                         *soap                          ;
};

/// @brief "urn:ebay:apis:eBLBaseComponents":EbayItemPaymentDetailsItemType is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   EbayItemPaymentDetailsItemType - Type declaration to be used by other schemas.
///   Information about an Ebay Payment Item.
/// </BLOCKQUOTE></PRE>
/// class ns3__EbayItemPaymentDetailsItemType operations:
/// - ns3__EbayItemPaymentDetailsItemType* soap_new_ns3__EbayItemPaymentDetailsItemType(soap*) allocate and default initialize
/// - ns3__EbayItemPaymentDetailsItemType* soap_new_ns3__EbayItemPaymentDetailsItemType(soap*, int num) allocate array and default initialize values
/// - ns3__EbayItemPaymentDetailsItemType* soap_new_req_ns3__EbayItemPaymentDetailsItemType(soap*, ...) allocate, set required members
/// - ns3__EbayItemPaymentDetailsItemType* soap_new_set_ns3__EbayItemPaymentDetailsItemType(soap*, ...) allocate, set all public members
/// - ns3__EbayItemPaymentDetailsItemType::soap_default(soap*) default initialize members
/// - int soap_read_ns3__EbayItemPaymentDetailsItemType(soap*, ns3__EbayItemPaymentDetailsItemType*) deserialize from a stream
/// - int soap_write_ns3__EbayItemPaymentDetailsItemType(soap*, ns3__EbayItemPaymentDetailsItemType*) serialize to a stream
/// - ns3__EbayItemPaymentDetailsItemType* ns3__EbayItemPaymentDetailsItemType::soap_dup(soap*) returns deep copy of ns3__EbayItemPaymentDetailsItemType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns3__EbayItemPaymentDetailsItemType::soap_del() deep deletes ns3__EbayItemPaymentDetailsItemType data members, use only after ns3__EbayItemPaymentDetailsItemType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns3__EbayItemPaymentDetailsItemType
{ public:
/// <PRE><BLOCKQUOTE>
///   Auction ItemNumber. <br/>
///   <br/>
///   Optional
///   <br/>
///   <br/>
///   Character length and limitations: 765 single-byte characters
/// </BLOCKQUOTE></PRE>
/// Element "ItemNumber" of XSD type xs:string.
    std::string*                         ItemNumber                     0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Auction Transaction ID. <br/>
///   <br/>
///   Optional
///   <br/>
///   <br/>
///   Character length and limitations: 255 single-byte characters
/// </BLOCKQUOTE></PRE>
/// Element "AuctionTransactionId" of XSD type xs:string.
    std::string*                         AuctionTransactionId           0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Ebay Order ID. <br/>
///   <br/>
///   Optional
///   <br/>
///   <br/>
///   Character length and limitations: 64 single-byte characters
/// </BLOCKQUOTE></PRE>
/// Element "OrderId" of XSD type xs:string.
    std::string*                         OrderId                        0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Ebay Cart ID.
///   <br/>
///   <br/>
///   Optional
///   <br/>
///   <br/>
///   Character length and limitations: 64 single-byte characters
/// </BLOCKQUOTE></PRE>
/// Element "CartID" of XSD type xs:string.
    std::string*                         CartID                         0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief "urn:ebay:apis:eBLBaseComponents":PaymentDetailsItemType is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   PaymentDetailsItemType Information about a Payment Item.
/// </BLOCKQUOTE></PRE>
/// class ns3__PaymentDetailsItemType operations:
/// - ns3__PaymentDetailsItemType* soap_new_ns3__PaymentDetailsItemType(soap*) allocate and default initialize
/// - ns3__PaymentDetailsItemType* soap_new_ns3__PaymentDetailsItemType(soap*, int num) allocate array and default initialize values
/// - ns3__PaymentDetailsItemType* soap_new_req_ns3__PaymentDetailsItemType(soap*, ...) allocate, set required members
/// - ns3__PaymentDetailsItemType* soap_new_set_ns3__PaymentDetailsItemType(soap*, ...) allocate, set all public members
/// - ns3__PaymentDetailsItemType::soap_default(soap*) default initialize members
/// - int soap_read_ns3__PaymentDetailsItemType(soap*, ns3__PaymentDetailsItemType*) deserialize from a stream
/// - int soap_write_ns3__PaymentDetailsItemType(soap*, ns3__PaymentDetailsItemType*) serialize to a stream
/// - ns3__PaymentDetailsItemType* ns3__PaymentDetailsItemType::soap_dup(soap*) returns deep copy of ns3__PaymentDetailsItemType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns3__PaymentDetailsItemType::soap_del() deep deletes ns3__PaymentDetailsItemType data members, use only after ns3__PaymentDetailsItemType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns3__PaymentDetailsItemType
{ public:
/// <PRE><BLOCKQUOTE>
///   Item name. <br/>
///   <br/>
///   Optional
///   <br/>
///   <br/>
///   Character length and limitations: 127 single-byte characters
/// </BLOCKQUOTE></PRE>
/// Element "Name" of XSD type xs:string.
    std::string*                         Name                           0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Item number. <br/>
///   <br/>
///   Optional
///   <br/>
///   <br/>
///   Character length and limitations: 127 single-byte characters
/// </BLOCKQUOTE></PRE>
/// Element "Number" of XSD type xs:string.
    std::string*                         Number                         0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Item quantity. <br/>
///   <br/>
///   Optional
///   <br/>
///   <br/>
///   Character length and limitations: Any positive integer
/// </BLOCKQUOTE></PRE>
/// Element "Quantity" of XSD type xs:integer.
    xsd__integer*                        Quantity                       0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Item sales tax. <br/>
///   <br/>
///   Optional
///   <br/>
///   <br/>Character length and limitations: any valid currency amount; currency code is set the same as for OrderTotal.
/// </BLOCKQUOTE></PRE>
/// Element "Tax" of XSD type "urn:ebay:apis:CoreComponentTypes":BasicAmountType.
    ns2__BasicAmountType*                Tax                            0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Cost of item You must set the currencyID attribute to one of the three-character currency codes for any of the supported PayPal currencies. <br/>
///   <br/>
///   Optional
///   <br/>
///   <br/>Limitations: Must not exceed $10,000 USD in any currency. No currency symbol. Decimal separator must be a period (.), and the thousands separator must be a comma (,).
/// </BLOCKQUOTE></PRE>
/// Element "Amount" of XSD type "urn:ebay:apis:CoreComponentTypes":BasicAmountType.
    ns2__BasicAmountType*                Amount                         0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Ebay specific details.
///   <br/>
///   <br/>
///   Optional
///   <br/>
/// </BLOCKQUOTE></PRE>
/// Element "EbayItemPaymentDetailsItem" of XSD type "urn:ebay:apis:eBLBaseComponents":EbayItemPaymentDetailsItemType.
    ns3__EbayItemPaymentDetailsItemType*  EbayItemPaymentDetailsItem     0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Promotional financing code for item. Part of the Merchant Services Promotion Financing feature.
/// </BLOCKQUOTE></PRE>
/// Element "PromoCode" of XSD type xs:string.
    std::string*                         PromoCode                      0;	///< Optional element.

/// </BLOCKQUOTE></PRE>
/// Element "ProductCategory" of XSD type "urn:ebay:apis:eBLBaseComponents":ProductCategoryType.
    enum ns3__ProductCategoryType*       ProductCategory                0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Item description. <br/>
///   Optional<br/>
///   Character length and limitations: 127 single-byte characters
/// </BLOCKQUOTE></PRE>
/// Element "Description" of XSD type xs:string.
    std::string*                         Description                    0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Information about the Item weight.
/// </BLOCKQUOTE></PRE>
/// Element "ItemWeight" of XSD type "urn:ebay:apis:CoreComponentTypes":MeasureType.
    ns2__MeasureType*                    ItemWeight                     0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Information about the Item length.
/// </BLOCKQUOTE></PRE>
/// Element "ItemLength" of XSD type "urn:ebay:apis:CoreComponentTypes":MeasureType.
    ns2__MeasureType*                    ItemLength                     0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Information about the Item width.
/// </BLOCKQUOTE></PRE>
/// Element "ItemWidth" of XSD type "urn:ebay:apis:CoreComponentTypes":MeasureType.
    ns2__MeasureType*                    ItemWidth                      0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Information about the Item height.
/// </BLOCKQUOTE></PRE>
/// Element "ItemHeight" of XSD type "urn:ebay:apis:CoreComponentTypes":MeasureType.
    ns2__MeasureType*                    ItemHeight                     0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   URL for the item.<br/>
///   Optional<br/>
///   Character length and limitations: no limit.
/// </BLOCKQUOTE></PRE>
/// Element "ItemURL" of XSD type xs:string.
    std::string*                         ItemURL                        0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Enhanced data for each item in the cart.<br/>
///   Optional<br/>
/// </BLOCKQUOTE></PRE>
/// Element "EnhancedItemData" of XSD type "urn:ebay:apis:EnhancedDataTypes":EnhancedItemDataType.
    ns4__EnhancedItemDataType*           EnhancedItemData               0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Item category - physical or digital. <br/>
///   Optional<br/>
/// </BLOCKQUOTE></PRE>
/// Element "ItemCategory" of XSD type "urn:ebay:apis:eBLBaseComponents":ItemCategoryType.
    enum ns3__ItemCategoryType*          ItemCategory                   0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief "urn:ebay:apis:eBLBaseComponents":PaymentItemType is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   PaymentItemType Information about a Payment Item.
/// </BLOCKQUOTE></PRE>
/// class ns3__PaymentItemType operations:
/// - ns3__PaymentItemType* soap_new_ns3__PaymentItemType(soap*) allocate and default initialize
/// - ns3__PaymentItemType* soap_new_ns3__PaymentItemType(soap*, int num) allocate array and default initialize values
/// - ns3__PaymentItemType* soap_new_req_ns3__PaymentItemType(soap*, ...) allocate, set required members
/// - ns3__PaymentItemType* soap_new_set_ns3__PaymentItemType(soap*, ...) allocate, set all public members
/// - ns3__PaymentItemType::soap_default(soap*) default initialize members
/// - int soap_read_ns3__PaymentItemType(soap*, ns3__PaymentItemType*) deserialize from a stream
/// - int soap_write_ns3__PaymentItemType(soap*, ns3__PaymentItemType*) serialize to a stream
/// - ns3__PaymentItemType* ns3__PaymentItemType::soap_dup(soap*) returns deep copy of ns3__PaymentItemType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns3__PaymentItemType::soap_del() deep deletes ns3__PaymentItemType data members, use only after ns3__PaymentItemType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns3__PaymentItemType
{ public:
/// <PRE><BLOCKQUOTE>
///   eBay Auction Transaction ID of the Item <br/>Optional<br/>
///   <br/>Character length and limitations: 255 single-byte characters
/// </BLOCKQUOTE></PRE>
/// Element "EbayItemTxnId" of XSD type xs:string.
    std::string*                         EbayItemTxnId                  0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Item name set by you or entered by the customer. <br/>Character length and limitations: 127 single-byte alphanumeric characters
/// </BLOCKQUOTE></PRE>
/// Element "Name" of XSD type xs:string.
    std::string*                         Name                           0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Item number set by you. <br/>
///   Character length and limitations: 127 single-byte alphanumeric characters
/// </BLOCKQUOTE></PRE>
/// Element "Number" of XSD type xs:string.
    std::string*                         Number                         0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Quantity set by you or entered by the customer. <br/>
///   Character length and limitations: no limit
/// </BLOCKQUOTE></PRE>
/// Element "Quantity" of XSD type xs:string.
    std::string*                         Quantity                       0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Amount of tax charged on payment
/// </BLOCKQUOTE></PRE>
/// Element "SalesTax" of XSD type xs:string.
    std::string*                         SalesTax                       0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Amount of shipping charged on payment
/// </BLOCKQUOTE></PRE>
/// Element "ShippingAmount" of XSD type xs:string.
    std::string*                         ShippingAmount                 0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Amount of handling charged on payment
/// </BLOCKQUOTE></PRE>
/// Element "HandlingAmount" of XSD type xs:string.
    std::string*                         HandlingAmount                 0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Invoice item details
/// </BLOCKQUOTE></PRE>
/// Element "InvoiceItemDetails" of XSD type "urn:ebay:apis:eBLBaseComponents":InvoiceItemType.
    ns3__InvoiceItemType*                InvoiceItemDetails             0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Coupon ID Number
/// </BLOCKQUOTE></PRE>
/// Element "CouponID" of XSD type xs:string.
    std::string*                         CouponID                       0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Amount Value of The Coupon
/// </BLOCKQUOTE></PRE>
/// Element "CouponAmount" of XSD type xs:string.
    std::string*                         CouponAmount                   0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Currency of the Coupon Amount
/// </BLOCKQUOTE></PRE>
/// Element "CouponAmountCurrency" of XSD type xs:string.
    std::string*                         CouponAmountCurrency           0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Amount of Discount on this Loyalty Card
/// </BLOCKQUOTE></PRE>
/// Element "LoyaltyCardDiscountAmount" of XSD type xs:string.
    std::string*                         LoyaltyCardDiscountAmount      0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Currency of the Discount
/// </BLOCKQUOTE></PRE>
/// Element "LoyaltyCardDiscountCurrency" of XSD type xs:string.
    std::string*                         LoyaltyCardDiscountCurrency    0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Cost of item
/// </BLOCKQUOTE></PRE>
/// Element "Amount" of XSD type "urn:ebay:apis:CoreComponentTypes":BasicAmountType.
    ns2__BasicAmountType*                Amount                         0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Item options selected in PayPal shopping cart
/// </BLOCKQUOTE></PRE>
/// Vector of ns3__OptionType* of length 0..unbounded.
    std::vector<ns3__OptionType*       > Options                        0;	///< Elements.
    struct soap                         *soap                          ;
};

/// @brief "urn:ebay:apis:eBLBaseComponents":PaymentItemInfoType is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   PaymentItemInfoType Information about a PayPal item.
/// </BLOCKQUOTE></PRE>
/// class ns3__PaymentItemInfoType operations:
/// - ns3__PaymentItemInfoType* soap_new_ns3__PaymentItemInfoType(soap*) allocate and default initialize
/// - ns3__PaymentItemInfoType* soap_new_ns3__PaymentItemInfoType(soap*, int num) allocate array and default initialize values
/// - ns3__PaymentItemInfoType* soap_new_req_ns3__PaymentItemInfoType(soap*, ...) allocate, set required members
/// - ns3__PaymentItemInfoType* soap_new_set_ns3__PaymentItemInfoType(soap*, ...) allocate, set all public members
/// - ns3__PaymentItemInfoType::soap_default(soap*) default initialize members
/// - int soap_read_ns3__PaymentItemInfoType(soap*, ns3__PaymentItemInfoType*) deserialize from a stream
/// - int soap_write_ns3__PaymentItemInfoType(soap*, ns3__PaymentItemInfoType*) serialize to a stream
/// - ns3__PaymentItemInfoType* ns3__PaymentItemInfoType::soap_dup(soap*) returns deep copy of ns3__PaymentItemInfoType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns3__PaymentItemInfoType::soap_del() deep deletes ns3__PaymentItemInfoType data members, use only after ns3__PaymentItemInfoType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns3__PaymentItemInfoType
{ public:
/// <PRE><BLOCKQUOTE>
///   Invoice number you set in the original transaction.
///   <br/>
///   <br/>
///   Character length and limitations: 127 single-byte alphanumeric characters
/// </BLOCKQUOTE></PRE>
/// Element "InvoiceID" of XSD type xs:string.
    std::string*                         InvoiceID                      0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Custom field you set in the original transaction. <br/>
///   <br/>
///   Character length and limitations: 127 single-byte alphanumeric characters
/// </BLOCKQUOTE></PRE>
/// Element "Custom" of XSD type xs:string.
    std::string*                         Custom                         0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Memo entered by your customer in PayPal Website Payments note field. <br/>
///   <br/>
///   Character length and limitations: 255 single-byte alphanumeric characters
/// </BLOCKQUOTE></PRE>
/// Element "Memo" of XSD type xs:string.
    std::string*                         Memo                           0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Amount of tax charged on transaction
/// </BLOCKQUOTE></PRE>
/// Element "SalesTax" of XSD type xs:string.
    std::string*                         SalesTax                       0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Details about the indivudal purchased item
/// </BLOCKQUOTE></PRE>
/// Vector of ns3__PaymentItemType* of length 0..unbounded.
    std::vector<ns3__PaymentItemType*  > PaymentItem                    0;	///< Elements.
/// <PRE><BLOCKQUOTE>
///   Information about the transaction if it was created via PayPal Subcriptions
/// </BLOCKQUOTE></PRE>
/// Element "Subscription" of XSD type "urn:ebay:apis:eBLBaseComponents":SubscriptionInfoType.
    ns3__SubscriptionInfoType*           Subscription                   0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Information about the transaction if it was created via an auction
/// </BLOCKQUOTE></PRE>
/// Element "Auction" of XSD type "urn:ebay:apis:eBLBaseComponents":AuctionInfoType.
    ns3__AuctionInfoType*                Auction                        0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief "urn:ebay:apis:eBLBaseComponents":OfferCouponInfoType is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   OffersAndCouponsInfoType
///   Information about a Offers and Coupons.
/// </BLOCKQUOTE></PRE>
/// class ns3__OfferCouponInfoType operations:
/// - ns3__OfferCouponInfoType* soap_new_ns3__OfferCouponInfoType(soap*) allocate and default initialize
/// - ns3__OfferCouponInfoType* soap_new_ns3__OfferCouponInfoType(soap*, int num) allocate array and default initialize values
/// - ns3__OfferCouponInfoType* soap_new_req_ns3__OfferCouponInfoType(soap*, ...) allocate, set required members
/// - ns3__OfferCouponInfoType* soap_new_set_ns3__OfferCouponInfoType(soap*, ...) allocate, set all public members
/// - ns3__OfferCouponInfoType::soap_default(soap*) default initialize members
/// - int soap_read_ns3__OfferCouponInfoType(soap*, ns3__OfferCouponInfoType*) deserialize from a stream
/// - int soap_write_ns3__OfferCouponInfoType(soap*, ns3__OfferCouponInfoType*) serialize to a stream
/// - ns3__OfferCouponInfoType* ns3__OfferCouponInfoType::soap_dup(soap*) returns deep copy of ns3__OfferCouponInfoType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns3__OfferCouponInfoType::soap_del() deep deletes ns3__OfferCouponInfoType data members, use only after ns3__OfferCouponInfoType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns3__OfferCouponInfoType
{ public:
/// <PRE><BLOCKQUOTE>
///   Type of the incentive
/// </BLOCKQUOTE></PRE>
/// Element "Type" of XSD type xs:string.
    std::string*                         Type                           0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   ID of the Incentive used in transaction
/// </BLOCKQUOTE></PRE>
/// Element "ID" of XSD type xs:string.
    std::string*                         ID                             0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Amount used on transaction
/// </BLOCKQUOTE></PRE>
/// Element "Amount" of XSD type xs:string.
    std::string*                         Amount                         0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Amount Currency
/// </BLOCKQUOTE></PRE>
/// Element "AmountCurrency" of XSD type xs:string.
    std::string*                         AmountCurrency                 0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief "urn:ebay:apis:eBLBaseComponents":PaymentDetailsType is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   PaymentDetailsType Information about a payment. Used by DCC and Express Checkout.
/// </BLOCKQUOTE></PRE>
/// class ns3__PaymentDetailsType operations:
/// - ns3__PaymentDetailsType* soap_new_ns3__PaymentDetailsType(soap*) allocate and default initialize
/// - ns3__PaymentDetailsType* soap_new_ns3__PaymentDetailsType(soap*, int num) allocate array and default initialize values
/// - ns3__PaymentDetailsType* soap_new_req_ns3__PaymentDetailsType(soap*, ...) allocate, set required members
/// - ns3__PaymentDetailsType* soap_new_set_ns3__PaymentDetailsType(soap*, ...) allocate, set all public members
/// - ns3__PaymentDetailsType::soap_default(soap*) default initialize members
/// - int soap_read_ns3__PaymentDetailsType(soap*, ns3__PaymentDetailsType*) deserialize from a stream
/// - int soap_write_ns3__PaymentDetailsType(soap*, ns3__PaymentDetailsType*) serialize to a stream
/// - ns3__PaymentDetailsType* ns3__PaymentDetailsType::soap_dup(soap*) returns deep copy of ns3__PaymentDetailsType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns3__PaymentDetailsType::soap_del() deep deletes ns3__PaymentDetailsType data members, use only after ns3__PaymentDetailsType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns3__PaymentDetailsType
{ public:
/// <PRE><BLOCKQUOTE>
///   Total of order, including shipping, handling, and tax. You must set the currencyID attribute to one of the three-character currency codes for any of the supported PayPal currencies.
///   <br/>
///   <br/>
///   <br/>Limitations: Must not exceed $10,000 USD in any currency. No currency symbol. Decimal separator must be a period (.), and the thousands separator must be a comma (,).
/// </BLOCKQUOTE></PRE>
/// Element "OrderTotal" of XSD type "urn:ebay:apis:CoreComponentTypes":BasicAmountType.
    ns2__BasicAmountType*                OrderTotal                     0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Sum of cost of all items in this order. You must set the currencyID attribute to one of the three-character currency codes for any of the supported PayPal currencies.
///   <br/>
///   <br/>
///   Optional
///   <br/>
///   <br/>separator must be a comma (,).
/// </BLOCKQUOTE></PRE>
/// Element "ItemTotal" of XSD type "urn:ebay:apis:CoreComponentTypes":BasicAmountType.
    ns2__BasicAmountType*                ItemTotal                      0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Total shipping costs for this order. You must set the currencyID attribute to one of the three-character currency codes for any of the supported PayPal currencies.
///   <br/>
///   <br/>
///   Optional
///   <br/>
///   <br/>Limitations: Must not exceed $10,000 USD in any currency. No currency symbol. Decimal separator must be a period (.), and the thousands separator must be a comma (,).
/// </BLOCKQUOTE></PRE>
/// Element "ShippingTotal" of XSD type "urn:ebay:apis:CoreComponentTypes":BasicAmountType.
    ns2__BasicAmountType*                ShippingTotal                  0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Total handling costs for this order. You must set the currencyID attribute to one of the three-character currency codes for any of the supported PayPal currencies.
///   <br/>
///   <br/>
///   Optional
///   <br/>
///   <br/>Limitations: Must not exceed $10,000 USD in any currency. No currency symbol. Decimal separator must be a period (.), and the thousands separator must be a comma (,).
/// </BLOCKQUOTE></PRE>
/// Element "HandlingTotal" of XSD type "urn:ebay:apis:CoreComponentTypes":BasicAmountType.
    ns2__BasicAmountType*                HandlingTotal                  0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Sum of tax for all items in this order. You must set the currencyID attribute to one of the three-character currency codes for any of the supported PayPal currencies.
///   <br/>
///   <br/>
///   Optional
///   <br/>
///   <br/>Limitations: Must not exceed $10,000 USD in any currency. No currency symbol. Decimal separator must be a period (.), and the thousands separator must be a comma (,).
/// </BLOCKQUOTE></PRE>
/// Element "TaxTotal" of XSD type "urn:ebay:apis:CoreComponentTypes":BasicAmountType.
    ns2__BasicAmountType*                TaxTotal                       0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Description of items the customer is purchasing. <br/>
///   <br/>
///   Optional
///   <br/>
///   <br/>Character length and limitations: 127 single-byte alphanumeric characters
/// </BLOCKQUOTE></PRE>
/// Element "OrderDescription" of XSD type xs:string.
    std::string*                         OrderDescription               0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   A free-form field for your own use. <br/>
///   <br/>
///   Optional
///   <br/>
///   <br/>Character length and limitations: 256 single-byte alphanumeric characters
/// </BLOCKQUOTE></PRE>
/// Element "Custom" of XSD type xs:string.
    std::string*                         Custom                         0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Your own invoice or tracking number. <br/>
///   <br/>
///   Optional
///   <br/>
///   <br/>Character length and limitations: 127 single-byte alphanumeric characters
/// </BLOCKQUOTE></PRE>
/// Element "InvoiceID" of XSD type xs:string.
    std::string*                         InvoiceID                      0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   An identification code for use by third-party applications to identify transactions. <br/>
///   <br/>
///   Optional
///   <br/>
///   <br/>Character length and limitations: 32 single-byte alphanumeric characters
/// </BLOCKQUOTE></PRE>
/// Element "ButtonSource" of XSD type xs:string.
    std::string*                         ButtonSource                   0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Your URL for receiving Instant Payment Notification (IPN) about this transaction. <br/>
///   <br/>
///   Optional
///   <br/>
///   <br/>If you do not specify NotifyURL in the request, the notification URL from your Merchant Profile is used, if one exists. <br/>
///   <br/>Character length and limitations: 2,048 single-byte alphanumeric characters
/// </BLOCKQUOTE></PRE>
/// Element "NotifyURL" of XSD type xs:string.
    std::string*                         NotifyURL                      0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Address the order will be shipped to. <br/>
///   <br/>
///   Optional
///   <br/>
///   <br/>
///   If you include the ShipToAddress element, the AddressType elements are required: <br/>
///   <br/>Name
///   <br/>
///   <br/>
///   Street1
///   <br/>
///   <br/>
///   CityName
///   <br/>
///   <br/>
///   CountryCode
///   <br/>
///   <br/>
///   <b>Do not set set the CountryName element.</b>
/// </BLOCKQUOTE></PRE>
/// Element "ShipToAddress" of XSD type "urn:ebay:apis:eBLBaseComponents":AddressType.
    ns3__AddressType*                    ShipToAddress                  0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   The value 1 indicates that this payment is associated with multiple shipping addresses. <br/>
///   <br/>
///   Optional
///   <br/>
///   <br/>
///   Character length and limitations: Four single-byte numeric characters.
/// </BLOCKQUOTE></PRE>
/// Element "MultiShipping" of XSD type xs:string.
    std::string*                         MultiShipping                  0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Thirdparty Fulfillment Reference Number.<br/>
///   Optional <br/>
///   Character length and limitations: 32 alphanumeric characters.<br/>
/// </BLOCKQUOTE></PRE>
/// Element "FulfillmentReferenceNumber" of XSD type xs:string.
    std::string*                         FulfillmentReferenceNumber     0;	///< Optional element.
/// Element "FulfillmentAddress" of XSD type "urn:ebay:apis:eBLBaseComponents":AddressType.
    ns3__AddressType*                    FulfillmentAddress             0;	///< Optional element.
/// Element "PaymentCategoryType" of XSD type "urn:ebay:apis:eBLBaseComponents":PaymentCategoryType.
    enum ns3__PaymentCategoryType*       PaymentCategoryType            0;	///< Optional element.
/// Element "LocationType" of XSD type "urn:ebay:apis:eBLBaseComponents":LocationType.
    enum ns3__LocationType*              LocationType                   0;	///< Optional element.

/// </BLOCKQUOTE></PRE>
/// Element "ShippingMethod" of XSD type "urn:ebay:apis:eBLBaseComponents":ShippingServiceCodeType.
    enum ns3__ShippingServiceCodeType*   ShippingMethod                 0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Date and time (in GMT in the format yyyy-MM-ddTHH:mm:ssZ) at which address was changed by the user.
/// </BLOCKQUOTE></PRE>
/// Element "ProfileAddressChangeDate" of XSD type xs:dateTime.
    time_t*                              ProfileAddressChangeDate       0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Information about the individual purchased items
/// </BLOCKQUOTE></PRE>
/// Vector of ns3__PaymentDetailsItemType* of length 0..unbounded.
    std::vector<ns3__PaymentDetailsItemType*> PaymentDetailsItem             0;	///< Elements.
/// <PRE><BLOCKQUOTE>
///   Total shipping insurance costs for this order.<br/>
///   Optional<br/>
/// </BLOCKQUOTE></PRE>
/// Element "InsuranceTotal" of XSD type "urn:ebay:apis:CoreComponentTypes":BasicAmountType.
    ns2__BasicAmountType*                InsuranceTotal                 0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Shipping discount for this order, specified as a negative number.<br/>
///   Optional<br/>
/// </BLOCKQUOTE></PRE>
/// Element "ShippingDiscount" of XSD type "urn:ebay:apis:CoreComponentTypes":BasicAmountType.
    ns2__BasicAmountType*                ShippingDiscount               0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Information about the Insurance options.
/// </BLOCKQUOTE></PRE>
/// Element "InsuranceOptionOffered" of XSD type xs:string.
    std::string*                         InsuranceOptionOffered         0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Allowed payment methods for this transaction.
/// </BLOCKQUOTE></PRE>
/// Element "AllowedPaymentMethod" of XSD type "urn:ebay:apis:eBLBaseComponents":AllowedPaymentMethodType.
    enum ns3__AllowedPaymentMethodType*  AllowedPaymentMethod           0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Enhanced Data section to accept channel specific data. Applicable for version 62 and above, use this tag to pass airline itinerary data.<br/>
///   Optional<br/>
///   Refer to EnhancedPaymentDataType for details.<br/>
/// </BLOCKQUOTE></PRE>
/// Element "EnhancedPaymentData" of XSD type "urn:ebay:apis:EnhancedDataTypes":EnhancedPaymentDataType.
    ns4__EnhancedPaymentDataType*        EnhancedPaymentData            0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Details about the seller.<br/>
///   Optional <br/>
/// </BLOCKQUOTE></PRE>
/// Element "SellerDetails" of XSD type "urn:ebay:apis:eBLBaseComponents":SellerDetailsType.
    ns3__SellerDetailsType*              SellerDetails                  0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Note to recipient/seller.<br/> Optional <br/>
///   Character length and limitations: 127 single-byte alphanumeric characters.<br/>
/// </BLOCKQUOTE></PRE>
/// Element "NoteText" of XSD type xs:string.
    std::string*                         NoteText                       0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   PayPal Transaction Id, returned once DoExpressCheckout is completed. <br/>
/// </BLOCKQUOTE></PRE>
/// Element "TransactionId" of XSD type xs:string.
    std::string*                         TransactionId                  0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   How you want to obtain payment.
///   <br/>
///   <br/>
///   This payment action input will be used for split payments
///   <br/>
///   <br/>
///   Authorization indicates that this payment is a basic authorization subject to settlement with PayPal Authorization and Capture.
///   <br/>
///   <br/>
///   Order indicates that this payment is is an order authorization subject to settlement with PayPal Authorization and Capture.
///   <br/>
///   <br/>
///   Sale indicates that this is a final sale for which you are requesting payment.
///   <br/>
///   <br/>
///   IMPORTANT: You cannot set PaymentAction to Sale on SetExpressCheckoutRequest and then change PaymentAction to Authorization on the final Express Checkout API, DoExpressCheckoutPaymentRequest.
///   <br/>
///   <br/>
///   Character length and limit: Up to 13 single-byte alphabetic characters
/// </BLOCKQUOTE></PRE>
/// Element "PaymentAction" of XSD type "urn:ebay:apis:eBLBaseComponents":PaymentActionCodeType.
    enum ns3__PaymentActionCodeType*     PaymentAction                  0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Unique identifier and mandatory for the particular payment request in case of multiple payment
/// </BLOCKQUOTE></PRE>
/// Element "PaymentRequestID" of XSD type xs:string.
    std::string*                         PaymentRequestID               0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   URL on Merchant site pertaining to this invoice. <br/>
///   <br/>
///   <b>Optional</b>
///   <br/>
///   <br/>
/// </BLOCKQUOTE></PRE>
/// Element "OrderURL" of XSD type xs:string.
    std::string*                         OrderURL                       0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Soft Descriptor supported for Sale and Auth in DEC only. For Order this will be ignored.
/// </BLOCKQUOTE></PRE>
/// Element "SoftDescriptor" of XSD type xs:string.
    std::string*                         SoftDescriptor                 0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   BranchLevel is used to identify chain payment.
///   If BranchLevel is 0 or 1, this payment is where money moves to.
///   If BranchLevel greater than 1, this payment contains the actual seller info. <br/>
///   <br/>
///   Optional
///   <br/>
/// </BLOCKQUOTE></PRE>
/// Element "BranchLevel" of XSD type xs:integer.
    xsd__integer*                        BranchLevel                    0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Soft Descriptor supported for Sale and Auth in DEC only. For Order this will be ignored.
/// </BLOCKQUOTE></PRE>
/// Element "OfferDetails" of XSD type "urn:ebay:apis:eBLBaseComponents":OfferDetailsType.
    ns3__OfferDetailsType*               OfferDetails                   0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Flag to indicate the recurring transaction
/// </BLOCKQUOTE></PRE>
/// Element "Recurring" of XSD type "urn:ebay:apis:eBLBaseComponents":RecurringFlagType.
    enum ns3__RecurringFlagType*         Recurring                      0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Indicates the purpose of this payment like Refund
/// </BLOCKQUOTE></PRE>
/// Element "PaymentReason" of XSD type "urn:ebay:apis:eBLBaseComponents":PaymentReasonType.
    enum ns3__PaymentReasonType*         PaymentReason                  0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Location ID Specified by merchant
///   <br/>
///   <br/>
///   Optional
///   <br/>
///   <br/>Character length and limitations: 50 single-byte alphanumeric characters
/// </BLOCKQUOTE></PRE>
/// Element "LocationID" of XSD type xs:string.
    std::string*                         LocationID                     0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   For instance single use coupons should not be
///   returned in future CheckIn calls once they are redeemed.
/// </BLOCKQUOTE></PRE>
/// Vector of ns3__DiscountInfoType* of length 0..100.
    std::vector<ns3__DiscountInfoType* > RedeemedOffers                 0:100;	///< Elements.
/// <PRE><BLOCKQUOTE>
///   Total loyalty points for a given id accumulated by the consumre so far.
/// </BLOCKQUOTE></PRE>
/// Vector of ns3__DiscountInfoType* of length 0..100.
    std::vector<ns3__DiscountInfoType* > CummulativePoints              0:100;	///< Elements.
/// <PRE><BLOCKQUOTE>
///   Merchant Data that is passed through from Merchant to Processor
/// </BLOCKQUOTE></PRE>
/// Vector of ns3__MerchantDataType* of length 0..16.
    std::vector<ns3__MerchantDataType* > MerchantData                   0:16;	///< Elements.
    struct soap                         *soap                          ;
};

/// @brief "urn:ebay:apis:eBLBaseComponents":IncentiveDetailsType is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   Information about the incentives that were applied from Ebay RYP page and PayPal RYP page.
/// </BLOCKQUOTE></PRE>
/// class ns3__IncentiveDetailsType operations:
/// - ns3__IncentiveDetailsType* soap_new_ns3__IncentiveDetailsType(soap*) allocate and default initialize
/// - ns3__IncentiveDetailsType* soap_new_ns3__IncentiveDetailsType(soap*, int num) allocate array and default initialize values
/// - ns3__IncentiveDetailsType* soap_new_req_ns3__IncentiveDetailsType(soap*, ...) allocate, set required members
/// - ns3__IncentiveDetailsType* soap_new_set_ns3__IncentiveDetailsType(soap*, ...) allocate, set all public members
/// - ns3__IncentiveDetailsType::soap_default(soap*) default initialize members
/// - int soap_read_ns3__IncentiveDetailsType(soap*, ns3__IncentiveDetailsType*) deserialize from a stream
/// - int soap_write_ns3__IncentiveDetailsType(soap*, ns3__IncentiveDetailsType*) serialize to a stream
/// - ns3__IncentiveDetailsType* ns3__IncentiveDetailsType::soap_dup(soap*) returns deep copy of ns3__IncentiveDetailsType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns3__IncentiveDetailsType::soap_del() deep deletes ns3__IncentiveDetailsType data members, use only after ns3__IncentiveDetailsType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns3__IncentiveDetailsType
{ public:
/// <PRE><BLOCKQUOTE>
///   Unique Identifier consisting of redemption code, user friendly descripotion, incentive type, campaign code, incenitve application order and site redeemed o
///   n.
/// </BLOCKQUOTE></PRE>
/// Element "UniqueIdentifier" of XSD type xs:string.
    std::string*                         UniqueIdentifier               0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Defines if the incentive has been applied on Ebay or PayPal.
/// </BLOCKQUOTE></PRE>
/// Element "SiteAppliedOn" of XSD type "urn:ebay:apis:eBLBaseComponents":IncentiveSiteAppliedOnType.
    enum ns3__IncentiveSiteAppliedOnType*  SiteAppliedOn                  0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   The total discount amount for the incentive, summation of discounts up across all the buckets/items.
/// </BLOCKQUOTE></PRE>
/// Element "TotalDiscountAmount" of XSD type "urn:ebay:apis:CoreComponentTypes":BasicAmountType.
    ns2__BasicAmountType*                TotalDiscountAmount            0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Status of incentive processing. Sussess or Error.
/// </BLOCKQUOTE></PRE>
/// Element "Status" of XSD type "urn:ebay:apis:eBLBaseComponents":IncentiveAppliedStatusType.
    enum ns3__IncentiveAppliedStatusType*  Status                         0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Error code if there are any errors. Zero otherwise.
/// </BLOCKQUOTE></PRE>
/// Element "ErrorCode" of XSD type xs:integer.
    xsd__integer*                        ErrorCode                      0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Details of incentive application on individual bucket/item.
/// </BLOCKQUOTE></PRE>
/// Vector of ns3__IncentiveAppliedDetailsType* of length 0..unbounded.
    std::vector<ns3__IncentiveAppliedDetailsType*> IncentiveAppliedDetails        0;	///< Elements.
    struct soap                         *soap                          ;
};

/// @brief "urn:ebay:apis:eBLBaseComponents":IncentiveAppliedDetailsType is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   Details of incentive application on individual bucket/item.
/// </BLOCKQUOTE></PRE>
/// class ns3__IncentiveAppliedDetailsType operations:
/// - ns3__IncentiveAppliedDetailsType* soap_new_ns3__IncentiveAppliedDetailsType(soap*) allocate and default initialize
/// - ns3__IncentiveAppliedDetailsType* soap_new_ns3__IncentiveAppliedDetailsType(soap*, int num) allocate array and default initialize values
/// - ns3__IncentiveAppliedDetailsType* soap_new_req_ns3__IncentiveAppliedDetailsType(soap*, ...) allocate, set required members
/// - ns3__IncentiveAppliedDetailsType* soap_new_set_ns3__IncentiveAppliedDetailsType(soap*, ...) allocate, set all public members
/// - ns3__IncentiveAppliedDetailsType::soap_default(soap*) default initialize members
/// - int soap_read_ns3__IncentiveAppliedDetailsType(soap*, ns3__IncentiveAppliedDetailsType*) deserialize from a stream
/// - int soap_write_ns3__IncentiveAppliedDetailsType(soap*, ns3__IncentiveAppliedDetailsType*) serialize to a stream
/// - ns3__IncentiveAppliedDetailsType* ns3__IncentiveAppliedDetailsType::soap_dup(soap*) returns deep copy of ns3__IncentiveAppliedDetailsType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns3__IncentiveAppliedDetailsType::soap_del() deep deletes ns3__IncentiveAppliedDetailsType data members, use only after ns3__IncentiveAppliedDetailsType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns3__IncentiveAppliedDetailsType
{ public:
/// <PRE><BLOCKQUOTE>
///   PaymentRequestID uniquely identifies a bucket. It is the "bucket id" in the world of EC API.
/// </BLOCKQUOTE></PRE>
/// Element "PaymentRequestID" of XSD type xs:string.
    std::string*                         PaymentRequestID               0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   The item id passed through by the merchant.
/// </BLOCKQUOTE></PRE>
/// Element "ItemId" of XSD type xs:string.
    std::string*                         ItemId                         0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   The item transaction id passed through by the merchant.
/// </BLOCKQUOTE></PRE>
/// Element "ExternalTxnId" of XSD type xs:string.
    std::string*                         ExternalTxnId                  0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Discount offerred for this bucket or item.
/// </BLOCKQUOTE></PRE>
/// Element "DiscountAmount" of XSD type "urn:ebay:apis:CoreComponentTypes":BasicAmountType.
    ns2__BasicAmountType*                DiscountAmount                 0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   SubType for coupon.
/// </BLOCKQUOTE></PRE>
/// Element "SubType" of XSD type xs:string.
    std::string*                         SubType                        0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief "urn:ebay:apis:eBLBaseComponents":SellerDetailsType is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   Details about the seller.
/// </BLOCKQUOTE></PRE>
/// class ns3__SellerDetailsType operations:
/// - ns3__SellerDetailsType* soap_new_ns3__SellerDetailsType(soap*) allocate and default initialize
/// - ns3__SellerDetailsType* soap_new_ns3__SellerDetailsType(soap*, int num) allocate array and default initialize values
/// - ns3__SellerDetailsType* soap_new_req_ns3__SellerDetailsType(soap*, ...) allocate, set required members
/// - ns3__SellerDetailsType* soap_new_set_ns3__SellerDetailsType(soap*, ...) allocate, set all public members
/// - ns3__SellerDetailsType::soap_default(soap*) default initialize members
/// - int soap_read_ns3__SellerDetailsType(soap*, ns3__SellerDetailsType*) deserialize from a stream
/// - int soap_write_ns3__SellerDetailsType(soap*, ns3__SellerDetailsType*) serialize to a stream
/// - ns3__SellerDetailsType* ns3__SellerDetailsType::soap_dup(soap*) returns deep copy of ns3__SellerDetailsType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns3__SellerDetailsType::soap_del() deep deletes ns3__SellerDetailsType data members, use only after ns3__SellerDetailsType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns3__SellerDetailsType
{ public:
/// <PRE><BLOCKQUOTE>
///   Unique identifier for the seller.<br/>
///   Optional <br/>
/// </BLOCKQUOTE></PRE>
/// Element "SellerId" of XSD type xs:string.
    std::string*                         SellerId                       0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   The user name of the user at the marketplaces site.<br/>
///   Optional <br/>
/// </BLOCKQUOTE></PRE>
/// Element "SellerUserName" of XSD type xs:string.
    std::string*                         SellerUserName                 0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Date when the user registered with the marketplace.<br/>
///   Optional <br/>
/// </BLOCKQUOTE></PRE>
/// Element "SellerRegistrationDate" of XSD type xs:dateTime.
    time_t*                              SellerRegistrationDate         0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Seller Paypal Account Id contains the seller EmailId or PayerId or PhoneNo passed during the Request.
/// </BLOCKQUOTE></PRE>
/// Element "PayPalAccountID" of XSD type xs:string.
    std::string*                         PayPalAccountID                0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Unique PayPal customer account identification number (of the seller). This feild is meant for Response. This field is ignored, if passed in the Request.
/// </BLOCKQUOTE></PRE>
/// Element "SecureMerchantAccountID" of XSD type "urn:ebay:apis:eBLBaseComponents":UserIDType.
    ns3__UserIDType*                     SecureMerchantAccountID        0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief "urn:ebay:apis:eBLBaseComponents":OtherPaymentMethodDetailsType is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   Lists the Payment Methods (other than PayPal) that the use can pay with e.g. Money Order. <br/>
///   Optional.<br/>
/// </BLOCKQUOTE></PRE>
/// class ns3__OtherPaymentMethodDetailsType operations:
/// - ns3__OtherPaymentMethodDetailsType* soap_new_ns3__OtherPaymentMethodDetailsType(soap*) allocate and default initialize
/// - ns3__OtherPaymentMethodDetailsType* soap_new_ns3__OtherPaymentMethodDetailsType(soap*, int num) allocate array and default initialize values
/// - ns3__OtherPaymentMethodDetailsType* soap_new_req_ns3__OtherPaymentMethodDetailsType(soap*, ...) allocate, set required members
/// - ns3__OtherPaymentMethodDetailsType* soap_new_set_ns3__OtherPaymentMethodDetailsType(soap*, ...) allocate, set all public members
/// - ns3__OtherPaymentMethodDetailsType::soap_default(soap*) default initialize members
/// - int soap_read_ns3__OtherPaymentMethodDetailsType(soap*, ns3__OtherPaymentMethodDetailsType*) deserialize from a stream
/// - int soap_write_ns3__OtherPaymentMethodDetailsType(soap*, ns3__OtherPaymentMethodDetailsType*) serialize to a stream
/// - ns3__OtherPaymentMethodDetailsType* ns3__OtherPaymentMethodDetailsType::soap_dup(soap*) returns deep copy of ns3__OtherPaymentMethodDetailsType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns3__OtherPaymentMethodDetailsType::soap_del() deep deletes ns3__OtherPaymentMethodDetailsType data members, use only after ns3__OtherPaymentMethodDetailsType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns3__OtherPaymentMethodDetailsType
{ public:
/// <PRE><BLOCKQUOTE>
///   The identifier of the Payment Method.
/// </BLOCKQUOTE></PRE>
/// Element "OtherPaymentMethodId" of XSD type xs:string.
    std::string*                         OtherPaymentMethodId           0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Valid values are 'Method', 'SubMethod'.
/// </BLOCKQUOTE></PRE>
/// Element "OtherPaymentMethodType" of XSD type xs:string.
    std::string*                         OtherPaymentMethodType         0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   The name of the Payment Method.
/// </BLOCKQUOTE></PRE>
/// Element "OtherPaymentMethodLabel" of XSD type xs:string.
    std::string*                         OtherPaymentMethodLabel        0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   The short description of the Payment Method, goes along with the label.
/// </BLOCKQUOTE></PRE>
/// Element "OtherPaymentMethodLabelDescription" of XSD type xs:string.
    std::string*                         OtherPaymentMethodLabelDescription 0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   The title for the long description.
/// </BLOCKQUOTE></PRE>
/// Element "OtherPaymentMethodLongDescriptionTitle" of XSD type xs:string.
    std::string*                         OtherPaymentMethodLongDescriptionTitle 0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   The long description of the Payment Method.
/// </BLOCKQUOTE></PRE>
/// Element "OtherPaymentMethodLongDescription" of XSD type xs:string.
    std::string*                         OtherPaymentMethodLongDescription 0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   The icon of the Payment Method.
/// </BLOCKQUOTE></PRE>
/// Element "OtherPaymentMethodIcon" of XSD type xs:string.
    std::string*                         OtherPaymentMethodIcon         0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   If this flag is true, then OtherPaymentMethodIcon is required to have a valid value; the label will be hidden and only ICON will be shown.
/// </BLOCKQUOTE></PRE>
/// Element "OtherPaymentMethodHideLabel" of XSD type xs:boolean.
    bool*                                OtherPaymentMethodHideLabel    0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief "urn:ebay:apis:eBLBaseComponents":BuyerDetailsType is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   Details about the buyer's account passed in by the merchant or partner.<br/>
///   Optional.<br/>
/// </BLOCKQUOTE></PRE>
/// class ns3__BuyerDetailsType operations:
/// - ns3__BuyerDetailsType* soap_new_ns3__BuyerDetailsType(soap*) allocate and default initialize
/// - ns3__BuyerDetailsType* soap_new_ns3__BuyerDetailsType(soap*, int num) allocate array and default initialize values
/// - ns3__BuyerDetailsType* soap_new_req_ns3__BuyerDetailsType(soap*, ...) allocate, set required members
/// - ns3__BuyerDetailsType* soap_new_set_ns3__BuyerDetailsType(soap*, ...) allocate, set all public members
/// - ns3__BuyerDetailsType::soap_default(soap*) default initialize members
/// - int soap_read_ns3__BuyerDetailsType(soap*, ns3__BuyerDetailsType*) deserialize from a stream
/// - int soap_write_ns3__BuyerDetailsType(soap*, ns3__BuyerDetailsType*) serialize to a stream
/// - ns3__BuyerDetailsType* ns3__BuyerDetailsType::soap_dup(soap*) returns deep copy of ns3__BuyerDetailsType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns3__BuyerDetailsType::soap_del() deep deletes ns3__BuyerDetailsType data members, use only after ns3__BuyerDetailsType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns3__BuyerDetailsType
{ public:
/// <PRE><BLOCKQUOTE>
///   The client's unique ID for this user.<br/>
/// </BLOCKQUOTE></PRE>
/// Element "BuyerId" of XSD type xs:string.
    std::string*                         BuyerId                        0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   The user name of the user at the marketplaces site.<br/>
/// </BLOCKQUOTE></PRE>
/// Element "BuyerUserName" of XSD type xs:string.
    std::string*                         BuyerUserName                  0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Date when the user registered with the marketplace.<br/>
/// </BLOCKQUOTE></PRE>
/// Element "BuyerRegistrationDate" of XSD type xs:dateTime.
    time_t*                              BuyerRegistrationDate          0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Details about payer's tax info.<br/>
///   Refer to the TaxIdDetailsType for more details.<br/>
/// </BLOCKQUOTE></PRE>
/// Element "TaxIdDetails" of XSD type "urn:ebay:apis:eBLBaseComponents":TaxIdDetailsType.
    ns3__TaxIdDetailsType*               TaxIdDetails                   0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Contains information that identifies the buyer. e.g. email address or the external remember me id.
/// </BLOCKQUOTE></PRE>
/// Element "IdentificationInfo" of XSD type "urn:ebay:apis:eBLBaseComponents":IdentificationInfoType.
    ns3__IdentificationInfoType*         IdentificationInfo             0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief "urn:ebay:apis:eBLBaseComponents":TaxIdDetailsType is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   Details about the payer's tax info passed in by the merchant or partner.<br/>
///   Optional.<br/>
/// </BLOCKQUOTE></PRE>
/// class ns3__TaxIdDetailsType operations:
/// - ns3__TaxIdDetailsType* soap_new_ns3__TaxIdDetailsType(soap*) allocate and default initialize
/// - ns3__TaxIdDetailsType* soap_new_ns3__TaxIdDetailsType(soap*, int num) allocate array and default initialize values
/// - ns3__TaxIdDetailsType* soap_new_req_ns3__TaxIdDetailsType(soap*, ...) allocate, set required members
/// - ns3__TaxIdDetailsType* soap_new_set_ns3__TaxIdDetailsType(soap*, ...) allocate, set all public members
/// - ns3__TaxIdDetailsType::soap_default(soap*) default initialize members
/// - int soap_read_ns3__TaxIdDetailsType(soap*, ns3__TaxIdDetailsType*) deserialize from a stream
/// - int soap_write_ns3__TaxIdDetailsType(soap*, ns3__TaxIdDetailsType*) serialize to a stream
/// - ns3__TaxIdDetailsType* ns3__TaxIdDetailsType::soap_dup(soap*) returns deep copy of ns3__TaxIdDetailsType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns3__TaxIdDetailsType::soap_del() deep deletes ns3__TaxIdDetailsType data members, use only after ns3__TaxIdDetailsType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns3__TaxIdDetailsType
{ public:
/// <PRE><BLOCKQUOTE>
///   The payer's Tax ID type; CNPJ/CPF for BR country.<br/>
/// </BLOCKQUOTE></PRE>
/// Element "TaxIdType" of XSD type xs:string.
    std::string*                         TaxIdType                      0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   The payer's Tax ID<br/>
/// </BLOCKQUOTE></PRE>
/// Element "TaxId" of XSD type xs:string.
    std::string*                         TaxId                          0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief "urn:ebay:apis:eBLBaseComponents":ThreeDSecureRequestType is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   The Common 3DS fields. Common for both GTD and DCC API's.
/// </BLOCKQUOTE></PRE>
/// class ns3__ThreeDSecureRequestType operations:
/// - ns3__ThreeDSecureRequestType* soap_new_ns3__ThreeDSecureRequestType(soap*) allocate and default initialize
/// - ns3__ThreeDSecureRequestType* soap_new_ns3__ThreeDSecureRequestType(soap*, int num) allocate array and default initialize values
/// - ns3__ThreeDSecureRequestType* soap_new_req_ns3__ThreeDSecureRequestType(soap*, ...) allocate, set required members
/// - ns3__ThreeDSecureRequestType* soap_new_set_ns3__ThreeDSecureRequestType(soap*, ...) allocate, set all public members
/// - ns3__ThreeDSecureRequestType::soap_default(soap*) default initialize members
/// - int soap_read_ns3__ThreeDSecureRequestType(soap*, ns3__ThreeDSecureRequestType*) deserialize from a stream
/// - int soap_write_ns3__ThreeDSecureRequestType(soap*, ns3__ThreeDSecureRequestType*) serialize to a stream
/// - ns3__ThreeDSecureRequestType* ns3__ThreeDSecureRequestType::soap_dup(soap*) returns deep copy of ns3__ThreeDSecureRequestType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns3__ThreeDSecureRequestType::soap_del() deep deletes ns3__ThreeDSecureRequestType data members, use only after ns3__ThreeDSecureRequestType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns3__ThreeDSecureRequestType
{ public:
/// Element "Eci3ds" of XSD type xs:string.
    std::string*                         Eci3ds                         0;	///< Optional element.
/// Element "Cavv" of XSD type xs:string.
    std::string*                         Cavv                           0;	///< Optional element.
/// Element "Xid" of XSD type xs:string.
    std::string*                         Xid                            0;	///< Optional element.
/// Element "MpiVendor3ds" of XSD type xs:string.
    std::string*                         MpiVendor3ds                   0;	///< Optional element.
/// Element "AuthStatus3ds" of XSD type xs:string.
    std::string*                         AuthStatus3ds                  0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief "urn:ebay:apis:eBLBaseComponents":ThreeDSecureResponseType is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   3DS remaining fields.
/// </BLOCKQUOTE></PRE>
/// class ns3__ThreeDSecureResponseType operations:
/// - ns3__ThreeDSecureResponseType* soap_new_ns3__ThreeDSecureResponseType(soap*) allocate and default initialize
/// - ns3__ThreeDSecureResponseType* soap_new_ns3__ThreeDSecureResponseType(soap*, int num) allocate array and default initialize values
/// - ns3__ThreeDSecureResponseType* soap_new_req_ns3__ThreeDSecureResponseType(soap*, ...) allocate, set required members
/// - ns3__ThreeDSecureResponseType* soap_new_set_ns3__ThreeDSecureResponseType(soap*, ...) allocate, set all public members
/// - ns3__ThreeDSecureResponseType::soap_default(soap*) default initialize members
/// - int soap_read_ns3__ThreeDSecureResponseType(soap*, ns3__ThreeDSecureResponseType*) deserialize from a stream
/// - int soap_write_ns3__ThreeDSecureResponseType(soap*, ns3__ThreeDSecureResponseType*) serialize to a stream
/// - ns3__ThreeDSecureResponseType* ns3__ThreeDSecureResponseType::soap_dup(soap*) returns deep copy of ns3__ThreeDSecureResponseType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns3__ThreeDSecureResponseType::soap_del() deep deletes ns3__ThreeDSecureResponseType data members, use only after ns3__ThreeDSecureResponseType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns3__ThreeDSecureResponseType
{ public:
/// Element "Vpas" of XSD type xs:string.
    std::string*                         Vpas                           0;	///< Optional element.
/// Element "EciSubmitted3DS" of XSD type xs:string.
    std::string*                         EciSubmitted3DS                0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief "urn:ebay:apis:eBLBaseComponents":ThreeDSecureInfoType is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   3DSecureInfoType
///   Information about 3D Secure parameters.
/// </BLOCKQUOTE></PRE>
/// class ns3__ThreeDSecureInfoType operations:
/// - ns3__ThreeDSecureInfoType* soap_new_ns3__ThreeDSecureInfoType(soap*) allocate and default initialize
/// - ns3__ThreeDSecureInfoType* soap_new_ns3__ThreeDSecureInfoType(soap*, int num) allocate array and default initialize values
/// - ns3__ThreeDSecureInfoType* soap_new_req_ns3__ThreeDSecureInfoType(soap*, ...) allocate, set required members
/// - ns3__ThreeDSecureInfoType* soap_new_set_ns3__ThreeDSecureInfoType(soap*, ...) allocate, set all public members
/// - ns3__ThreeDSecureInfoType::soap_default(soap*) default initialize members
/// - int soap_read_ns3__ThreeDSecureInfoType(soap*, ns3__ThreeDSecureInfoType*) deserialize from a stream
/// - int soap_write_ns3__ThreeDSecureInfoType(soap*, ns3__ThreeDSecureInfoType*) serialize to a stream
/// - ns3__ThreeDSecureInfoType* ns3__ThreeDSecureInfoType::soap_dup(soap*) returns deep copy of ns3__ThreeDSecureInfoType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns3__ThreeDSecureInfoType::soap_del() deep deletes ns3__ThreeDSecureInfoType data members, use only after ns3__ThreeDSecureInfoType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns3__ThreeDSecureInfoType
{ public:
/// Element "ThreeDSecureRequest" of XSD type "urn:ebay:apis:eBLBaseComponents":ThreeDSecureRequestType.
    ns3__ThreeDSecureRequestType*        ThreeDSecureRequest            0;	///< Optional element.
/// Element "ThreeDSecureResponse" of XSD type "urn:ebay:apis:eBLBaseComponents":ThreeDSecureResponseType.
    ns3__ThreeDSecureResponseType*       ThreeDSecureResponse           0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief "urn:ebay:apis:eBLBaseComponents":CreditCardDetailsType is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   CreditCardDetailsType Information about a Credit Card.
/// </BLOCKQUOTE></PRE>
/// class ns3__CreditCardDetailsType operations:
/// - ns3__CreditCardDetailsType* soap_new_ns3__CreditCardDetailsType(soap*) allocate and default initialize
/// - ns3__CreditCardDetailsType* soap_new_ns3__CreditCardDetailsType(soap*, int num) allocate array and default initialize values
/// - ns3__CreditCardDetailsType* soap_new_req_ns3__CreditCardDetailsType(soap*, ...) allocate, set required members
/// - ns3__CreditCardDetailsType* soap_new_set_ns3__CreditCardDetailsType(soap*, ...) allocate, set all public members
/// - ns3__CreditCardDetailsType::soap_default(soap*) default initialize members
/// - int soap_read_ns3__CreditCardDetailsType(soap*, ns3__CreditCardDetailsType*) deserialize from a stream
/// - int soap_write_ns3__CreditCardDetailsType(soap*, ns3__CreditCardDetailsType*) serialize to a stream
/// - ns3__CreditCardDetailsType* ns3__CreditCardDetailsType::soap_dup(soap*) returns deep copy of ns3__CreditCardDetailsType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns3__CreditCardDetailsType::soap_del() deep deletes ns3__CreditCardDetailsType data members, use only after ns3__CreditCardDetailsType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns3__CreditCardDetailsType
{ public:
/// Element "CreditCardType" of XSD type "urn:ebay:apis:eBLBaseComponents":CreditCardTypeType.
    enum ns3__CreditCardTypeType*        CreditCardType                 0;	///< Optional element.
/// Element "CreditCardNumber" of XSD type xs:string.
    std::string*                         CreditCardNumber               0;	///< Optional element.
/// Element "ExpMonth" of XSD type xs:int.
    int*                                 ExpMonth                       0;	///< Optional element.
/// Element "ExpYear" of XSD type xs:int.
    int*                                 ExpYear                        0;	///< Optional element.
/// Element "CardOwner" of XSD type "urn:ebay:apis:eBLBaseComponents":PayerInfoType.
    ns3__PayerInfoType*                  CardOwner                      0;	///< Optional element.
/// Element "CVV2" of XSD type xs:string.
    std::string*                         CVV2                           0;	///< Optional element.
/// Element "StartMonth" of XSD type xs:int.
    int*                                 StartMonth                     0;	///< Optional element.
/// Element "StartYear" of XSD type xs:int.
    int*                                 StartYear                      0;	///< Optional element.
/// Element "IssueNumber" of XSD type xs:string.
    std::string*                         IssueNumber                    0;	///< Optional element.
/// Element "ThreeDSecureRequest" of XSD type "urn:ebay:apis:eBLBaseComponents":ThreeDSecureRequestType.
    ns3__ThreeDSecureRequestType*        ThreeDSecureRequest            0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief "urn:ebay:apis:eBLBaseComponents":ShippingOptionType is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   Fallback shipping options type.
/// </BLOCKQUOTE></PRE>
/// class ns3__ShippingOptionType operations:
/// - ns3__ShippingOptionType* soap_new_ns3__ShippingOptionType(soap*) allocate and default initialize
/// - ns3__ShippingOptionType* soap_new_ns3__ShippingOptionType(soap*, int num) allocate array and default initialize values
/// - ns3__ShippingOptionType* soap_new_req_ns3__ShippingOptionType(soap*, ...) allocate, set required members
/// - ns3__ShippingOptionType* soap_new_set_ns3__ShippingOptionType(soap*, ...) allocate, set all public members
/// - ns3__ShippingOptionType::soap_default(soap*) default initialize members
/// - int soap_read_ns3__ShippingOptionType(soap*, ns3__ShippingOptionType*) deserialize from a stream
/// - int soap_write_ns3__ShippingOptionType(soap*, ns3__ShippingOptionType*) serialize to a stream
/// - ns3__ShippingOptionType* ns3__ShippingOptionType::soap_dup(soap*) returns deep copy of ns3__ShippingOptionType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns3__ShippingOptionType::soap_del() deep deletes ns3__ShippingOptionType data members, use only after ns3__ShippingOptionType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns3__ShippingOptionType
{ public:
/// Element "ShippingOptionIsDefault" of XSD type xs:string.
    std::string*                         ShippingOptionIsDefault        0;	///< Optional element.
/// Element "ShippingOptionAmount" of XSD type "urn:ebay:apis:CoreComponentTypes":BasicAmountType.
    ns2__BasicAmountType*                ShippingOptionAmount           0;	///< Optional element.
/// Element "ShippingOptionName" of XSD type xs:string.
    std::string*                         ShippingOptionName             0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief "urn:ebay:apis:eBLBaseComponents":UserSelectedOptionType is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   Information on user selected options
/// </BLOCKQUOTE></PRE>
/// class ns3__UserSelectedOptionType operations:
/// - ns3__UserSelectedOptionType* soap_new_ns3__UserSelectedOptionType(soap*) allocate and default initialize
/// - ns3__UserSelectedOptionType* soap_new_ns3__UserSelectedOptionType(soap*, int num) allocate array and default initialize values
/// - ns3__UserSelectedOptionType* soap_new_req_ns3__UserSelectedOptionType(soap*, ...) allocate, set required members
/// - ns3__UserSelectedOptionType* soap_new_set_ns3__UserSelectedOptionType(soap*, ...) allocate, set all public members
/// - ns3__UserSelectedOptionType::soap_default(soap*) default initialize members
/// - int soap_read_ns3__UserSelectedOptionType(soap*, ns3__UserSelectedOptionType*) deserialize from a stream
/// - int soap_write_ns3__UserSelectedOptionType(soap*, ns3__UserSelectedOptionType*) serialize to a stream
/// - ns3__UserSelectedOptionType* ns3__UserSelectedOptionType::soap_dup(soap*) returns deep copy of ns3__UserSelectedOptionType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns3__UserSelectedOptionType::soap_del() deep deletes ns3__UserSelectedOptionType data members, use only after ns3__UserSelectedOptionType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns3__UserSelectedOptionType
{ public:
/// Element "ShippingCalculationMode" of XSD type xs:string.
    std::string*                         ShippingCalculationMode        0;	///< Optional element.
/// Element "InsuranceOptionSelected" of XSD type xs:string.
    std::string*                         InsuranceOptionSelected        0;	///< Optional element.
/// Element "ShippingOptionIsDefault" of XSD type xs:string.
    std::string*                         ShippingOptionIsDefault        0;	///< Optional element.
/// Element "ShippingOptionAmount" of XSD type "urn:ebay:apis:CoreComponentTypes":BasicAmountType.
    ns2__BasicAmountType*                ShippingOptionAmount           0;	///< Optional element.
/// Element "ShippingOptionName" of XSD type xs:string.
    std::string*                         ShippingOptionName             0;	///< Optional element.
/// Element "ScheduledShippingDate" of XSD type xs:string.
    std::string*                         ScheduledShippingDate          0;	///< Optional element.
/// Element "ScheduledShippingPeriod" of XSD type xs:string.
    std::string*                         ScheduledShippingPeriod        0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief "urn:ebay:apis:eBLBaseComponents":CreditCardNumberTypeType is a complexType.
///

/// </BLOCKQUOTE></PRE>
/// class ns3__CreditCardNumberTypeType operations:
/// - ns3__CreditCardNumberTypeType* soap_new_ns3__CreditCardNumberTypeType(soap*) allocate and default initialize
/// - ns3__CreditCardNumberTypeType* soap_new_ns3__CreditCardNumberTypeType(soap*, int num) allocate array and default initialize values
/// - ns3__CreditCardNumberTypeType* soap_new_req_ns3__CreditCardNumberTypeType(soap*, ...) allocate, set required members
/// - ns3__CreditCardNumberTypeType* soap_new_set_ns3__CreditCardNumberTypeType(soap*, ...) allocate, set all public members
/// - ns3__CreditCardNumberTypeType::soap_default(soap*) default initialize members
/// - int soap_read_ns3__CreditCardNumberTypeType(soap*, ns3__CreditCardNumberTypeType*) deserialize from a stream
/// - int soap_write_ns3__CreditCardNumberTypeType(soap*, ns3__CreditCardNumberTypeType*) serialize to a stream
/// - ns3__CreditCardNumberTypeType* ns3__CreditCardNumberTypeType::soap_dup(soap*) returns deep copy of ns3__CreditCardNumberTypeType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns3__CreditCardNumberTypeType::soap_del() deep deletes ns3__CreditCardNumberTypeType data members, use only after ns3__CreditCardNumberTypeType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns3__CreditCardNumberTypeType
{ public:
/// Element "CreditCardType" of XSD type "urn:ebay:apis:eBLBaseComponents":CreditCardTypeType.
    enum ns3__CreditCardTypeType*        CreditCardType                 0;	///< Optional element.
/// Element "CreditCardNumber" of XSD type xs:string.
    std::string*                         CreditCardNumber               0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief "urn:ebay:apis:eBLBaseComponents":ReferenceCreditCardDetailsType is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   CreditCardDetailsType for DCC Reference Transaction
///   Information about a Credit Card.
/// </BLOCKQUOTE></PRE>
/// class ns3__ReferenceCreditCardDetailsType operations:
/// - ns3__ReferenceCreditCardDetailsType* soap_new_ns3__ReferenceCreditCardDetailsType(soap*) allocate and default initialize
/// - ns3__ReferenceCreditCardDetailsType* soap_new_ns3__ReferenceCreditCardDetailsType(soap*, int num) allocate array and default initialize values
/// - ns3__ReferenceCreditCardDetailsType* soap_new_req_ns3__ReferenceCreditCardDetailsType(soap*, ...) allocate, set required members
/// - ns3__ReferenceCreditCardDetailsType* soap_new_set_ns3__ReferenceCreditCardDetailsType(soap*, ...) allocate, set all public members
/// - ns3__ReferenceCreditCardDetailsType::soap_default(soap*) default initialize members
/// - int soap_read_ns3__ReferenceCreditCardDetailsType(soap*, ns3__ReferenceCreditCardDetailsType*) deserialize from a stream
/// - int soap_write_ns3__ReferenceCreditCardDetailsType(soap*, ns3__ReferenceCreditCardDetailsType*) serialize to a stream
/// - ns3__ReferenceCreditCardDetailsType* ns3__ReferenceCreditCardDetailsType::soap_dup(soap*) returns deep copy of ns3__ReferenceCreditCardDetailsType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns3__ReferenceCreditCardDetailsType::soap_del() deep deletes ns3__ReferenceCreditCardDetailsType data members, use only after ns3__ReferenceCreditCardDetailsType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns3__ReferenceCreditCardDetailsType
{ public:
/// Element "CreditCardNumberType" of XSD type "urn:ebay:apis:eBLBaseComponents":CreditCardNumberTypeType.
    ns3__CreditCardNumberTypeType*       CreditCardNumberType           0;	///< Optional element.
/// Element "ExpMonth" of XSD type xs:int.
    int*                                 ExpMonth                       0;	///< Optional element.
/// Element "ExpYear" of XSD type xs:int.
    int*                                 ExpYear                        0;	///< Optional element.
/// Element "CardOwnerName" of XSD type "urn:ebay:apis:eBLBaseComponents":PersonNameType.
    ns3__PersonNameType*                 CardOwnerName                  0;	///< Optional element.
/// Element "BillingAddress" of XSD type "urn:ebay:apis:eBLBaseComponents":AddressType.
    ns3__AddressType*                    BillingAddress                 0;	///< Optional element.
/// Element "CVV2" of XSD type xs:string.
    std::string*                         CVV2                           0;	///< Optional element.
/// Element "StartMonth" of XSD type xs:int.
    int*                                 StartMonth                     0;	///< Optional element.
/// Element "StartYear" of XSD type xs:int.
    int*                                 StartYear                      0;	///< Optional element.
/// Element "IssueNumber" of XSD type xs:string.
    std::string*                         IssueNumber                    0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief "urn:ebay:apis:eBLBaseComponents":CustomSecurityHeaderType is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   Custom Securiy Header.
/// </BLOCKQUOTE></PRE>
/// class ns3__CustomSecurityHeaderType operations:
/// - ns3__CustomSecurityHeaderType* soap_new_ns3__CustomSecurityHeaderType(soap*) allocate and default initialize
/// - ns3__CustomSecurityHeaderType* soap_new_ns3__CustomSecurityHeaderType(soap*, int num) allocate array and default initialize values
/// - ns3__CustomSecurityHeaderType* soap_new_req_ns3__CustomSecurityHeaderType(soap*, ...) allocate, set required members
/// - ns3__CustomSecurityHeaderType* soap_new_set_ns3__CustomSecurityHeaderType(soap*, ...) allocate, set all public members
/// - ns3__CustomSecurityHeaderType::soap_default(soap*) default initialize members
/// - int soap_read_ns3__CustomSecurityHeaderType(soap*, ns3__CustomSecurityHeaderType*) deserialize from a stream
/// - int soap_write_ns3__CustomSecurityHeaderType(soap*, ns3__CustomSecurityHeaderType*) serialize to a stream
/// - ns3__CustomSecurityHeaderType* ns3__CustomSecurityHeaderType::soap_dup(soap*) returns deep copy of ns3__CustomSecurityHeaderType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns3__CustomSecurityHeaderType::soap_del() deep deletes ns3__CustomSecurityHeaderType data members, use only after ns3__CustomSecurityHeaderType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns3__CustomSecurityHeaderType
{ public:
/// Element "eBayAuthToken" of XSD type xs:string.
    std::string*                         eBayAuthToken                  0;	///< Optional element.
/// Element "HardExpirationWarning" of XSD type xs:string.
    std::string*                         HardExpirationWarning          0;	///< Optional element.
/// Element "Credentials" of XSD type "urn:ebay:apis:eBLBaseComponents":UserIdPasswordType.
    ns3__UserIdPasswordType*             Credentials                    0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief "urn:ebay:apis:eBLBaseComponents":UserIdPasswordType is a complexType.
///
/// class ns3__UserIdPasswordType operations:
/// - ns3__UserIdPasswordType* soap_new_ns3__UserIdPasswordType(soap*) allocate and default initialize
/// - ns3__UserIdPasswordType* soap_new_ns3__UserIdPasswordType(soap*, int num) allocate array and default initialize values
/// - ns3__UserIdPasswordType* soap_new_req_ns3__UserIdPasswordType(soap*, ...) allocate, set required members
/// - ns3__UserIdPasswordType* soap_new_set_ns3__UserIdPasswordType(soap*, ...) allocate, set all public members
/// - ns3__UserIdPasswordType::soap_default(soap*) default initialize members
/// - int soap_read_ns3__UserIdPasswordType(soap*, ns3__UserIdPasswordType*) deserialize from a stream
/// - int soap_write_ns3__UserIdPasswordType(soap*, ns3__UserIdPasswordType*) serialize to a stream
/// - ns3__UserIdPasswordType* ns3__UserIdPasswordType::soap_dup(soap*) returns deep copy of ns3__UserIdPasswordType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns3__UserIdPasswordType::soap_del() deep deletes ns3__UserIdPasswordType data members, use only after ns3__UserIdPasswordType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns3__UserIdPasswordType
{ public:
/// Element "AppId" of XSD type xs:string.
    std::string*                         AppId                          0;	///< Optional element.
/// Element "DevId" of XSD type xs:string.
    std::string*                         DevId                          0;	///< Optional element.
/// Element "AuthCert" of XSD type xs:string.
    std::string*                         AuthCert                       0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   The username is the identifier for an account.
/// </BLOCKQUOTE></PRE>
/// Element "Username" of XSD type xs:string.
    std::string                          Username                       1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Password contains the current password associated with the username.
/// </BLOCKQUOTE></PRE>
/// Element "Password" of XSD type xs:string.
    std::string                          Password                       1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Signature for Three Token authentication.
/// </BLOCKQUOTE></PRE>
/// Element "Signature" of XSD type xs:string.
    std::string*                         Signature                      0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   This field identifies an account (e.g., payment) on whose behalf the operation is being performed. For instance one account holder may delegate the abililty to perform certain operations to another account holder. This delegation is done through a separate mechanism. If the base username has not been authorized by the subject the request will be rejected.
/// </BLOCKQUOTE></PRE>
/// Element "Subject" of XSD type xs:string.
    std::string*                         Subject                        0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Authentication Session Token for authentication and authorization.
/// </BLOCKQUOTE></PRE>
/// Element "AuthToken" of XSD type xs:string.
    std::string*                         AuthToken                      0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief "urn:ebay:apis:eBLBaseComponents":SetCustomerBillingAgreementRequestDetailsType is a complexType.
///
/// class ns3__SetCustomerBillingAgreementRequestDetailsType operations:
/// - ns3__SetCustomerBillingAgreementRequestDetailsType* soap_new_ns3__SetCustomerBillingAgreementRequestDetailsType(soap*) allocate and default initialize
/// - ns3__SetCustomerBillingAgreementRequestDetailsType* soap_new_ns3__SetCustomerBillingAgreementRequestDetailsType(soap*, int num) allocate array and default initialize values
/// - ns3__SetCustomerBillingAgreementRequestDetailsType* soap_new_req_ns3__SetCustomerBillingAgreementRequestDetailsType(soap*, ...) allocate, set required members
/// - ns3__SetCustomerBillingAgreementRequestDetailsType* soap_new_set_ns3__SetCustomerBillingAgreementRequestDetailsType(soap*, ...) allocate, set all public members
/// - ns3__SetCustomerBillingAgreementRequestDetailsType::soap_default(soap*) default initialize members
/// - int soap_read_ns3__SetCustomerBillingAgreementRequestDetailsType(soap*, ns3__SetCustomerBillingAgreementRequestDetailsType*) deserialize from a stream
/// - int soap_write_ns3__SetCustomerBillingAgreementRequestDetailsType(soap*, ns3__SetCustomerBillingAgreementRequestDetailsType*) serialize to a stream
/// - ns3__SetCustomerBillingAgreementRequestDetailsType* ns3__SetCustomerBillingAgreementRequestDetailsType::soap_dup(soap*) returns deep copy of ns3__SetCustomerBillingAgreementRequestDetailsType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns3__SetCustomerBillingAgreementRequestDetailsType::soap_del() deep deletes ns3__SetCustomerBillingAgreementRequestDetailsType data members, use only after ns3__SetCustomerBillingAgreementRequestDetailsType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns3__SetCustomerBillingAgreementRequestDetailsType
{ public:

/// </BLOCKQUOTE></PRE>
/// Element "BillingAgreementDetails" of XSD type "urn:ebay:apis:eBLBaseComponents":BillingAgreementDetailsType.
    ns3__BillingAgreementDetailsType*    BillingAgreementDetails        1;	///< Required element.

/// </BLOCKQUOTE></PRE>
/// Element "ReturnURL" of XSD type xs:string.
    std::string                          ReturnURL                      1;	///< Required element.

/// </BLOCKQUOTE></PRE>
/// Element "CancelURL" of XSD type xs:string.
    std::string                          CancelURL                      1;	///< Required element.

/// </BLOCKQUOTE></PRE>
/// Element "LocaleCode" of XSD type xs:string.
    std::string*                         LocaleCode                     0;	///< Optional element.

/// </BLOCKQUOTE></PRE>
/// Element "PageStyle" of XSD type xs:string.
    std::string*                         PageStyle                      0;	///< Optional element.

/// </BLOCKQUOTE></PRE>
/// Element "cpp-header-image" of XSD type xs:string.
    std::string*                         cpp_header_image               0;	///< Optional element.

/// </BLOCKQUOTE></PRE>
/// Element "cpp-header-border-color" of XSD type xs:string.
    std::string*                         cpp_header_border_color        0;	///< Optional element.

/// </BLOCKQUOTE></PRE>
/// Element "cpp-header-back-color" of XSD type xs:string.
    std::string*                         cpp_header_back_color          0;	///< Optional element.

/// </BLOCKQUOTE></PRE>
/// Element "cpp-payflow-color" of XSD type xs:string.
    std::string*                         cpp_payflow_color              0;	///< Optional element.

/// </BLOCKQUOTE></PRE>
/// Element "BuyerEmail" of XSD type "urn:ebay:apis:eBLBaseComponents":EmailAddressType.
    ns3__EmailAddressType*               BuyerEmail                     0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   The value 1 indicates that you require that the customer's billing address on file. Setting this element overrides the setting you have specified in Admin.
///   <br/>
///   <br/>
///   Optional
///   <br/>
///   <br/>Character length and limitations: One single-byte numeric character.
/// </BLOCKQUOTE></PRE>
/// Element "ReqBillingAddress" of XSD type xs:string.
    std::string*                         ReqBillingAddress              0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief "urn:ebay:apis:eBLBaseComponents":GetBillingAgreementCustomerDetailsResponseDetailsType is a complexType.
///
/// class ns3__GetBillingAgreementCustomerDetailsResponseDetailsType operations:
/// - ns3__GetBillingAgreementCustomerDetailsResponseDetailsType* soap_new_ns3__GetBillingAgreementCustomerDetailsResponseDetailsType(soap*) allocate and default initialize
/// - ns3__GetBillingAgreementCustomerDetailsResponseDetailsType* soap_new_ns3__GetBillingAgreementCustomerDetailsResponseDetailsType(soap*, int num) allocate array and default initialize values
/// - ns3__GetBillingAgreementCustomerDetailsResponseDetailsType* soap_new_req_ns3__GetBillingAgreementCustomerDetailsResponseDetailsType(soap*, ...) allocate, set required members
/// - ns3__GetBillingAgreementCustomerDetailsResponseDetailsType* soap_new_set_ns3__GetBillingAgreementCustomerDetailsResponseDetailsType(soap*, ...) allocate, set all public members
/// - ns3__GetBillingAgreementCustomerDetailsResponseDetailsType::soap_default(soap*) default initialize members
/// - int soap_read_ns3__GetBillingAgreementCustomerDetailsResponseDetailsType(soap*, ns3__GetBillingAgreementCustomerDetailsResponseDetailsType*) deserialize from a stream
/// - int soap_write_ns3__GetBillingAgreementCustomerDetailsResponseDetailsType(soap*, ns3__GetBillingAgreementCustomerDetailsResponseDetailsType*) serialize to a stream
/// - ns3__GetBillingAgreementCustomerDetailsResponseDetailsType* ns3__GetBillingAgreementCustomerDetailsResponseDetailsType::soap_dup(soap*) returns deep copy of ns3__GetBillingAgreementCustomerDetailsResponseDetailsType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns3__GetBillingAgreementCustomerDetailsResponseDetailsType::soap_del() deep deletes ns3__GetBillingAgreementCustomerDetailsResponseDetailsType data members, use only after ns3__GetBillingAgreementCustomerDetailsResponseDetailsType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns3__GetBillingAgreementCustomerDetailsResponseDetailsType
{ public:

/// </BLOCKQUOTE></PRE>
/// Element "PayerInfo" of XSD type "urn:ebay:apis:eBLBaseComponents":PayerInfoType.
    ns3__PayerInfoType*                  PayerInfo                      1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Customer's billing address.
///   <br/>
///   <br/>
///   Optional
///   <br/>
///   <br/>
///   If you have a credit card mapped in your PayPal account, PayPal returns the billing address of the credit billing address otherwise your primary address as billing address in GetBillingAgreementCustomerDetails.
/// </BLOCKQUOTE></PRE>
/// Element "BillingAddress" of XSD type "urn:ebay:apis:eBLBaseComponents":AddressType.
    ns3__AddressType*                    BillingAddress                 0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief "urn:ebay:apis:eBLBaseComponents":DeviceDetailsType is a complexType.
///
/// class ns3__DeviceDetailsType operations:
/// - ns3__DeviceDetailsType* soap_new_ns3__DeviceDetailsType(soap*) allocate and default initialize
/// - ns3__DeviceDetailsType* soap_new_ns3__DeviceDetailsType(soap*, int num) allocate array and default initialize values
/// - ns3__DeviceDetailsType* soap_new_req_ns3__DeviceDetailsType(soap*, ...) allocate, set required members
/// - ns3__DeviceDetailsType* soap_new_set_ns3__DeviceDetailsType(soap*, ...) allocate, set all public members
/// - ns3__DeviceDetailsType::soap_default(soap*) default initialize members
/// - int soap_read_ns3__DeviceDetailsType(soap*, ns3__DeviceDetailsType*) deserialize from a stream
/// - int soap_write_ns3__DeviceDetailsType(soap*, ns3__DeviceDetailsType*) serialize to a stream
/// - ns3__DeviceDetailsType* ns3__DeviceDetailsType::soap_dup(soap*) returns deep copy of ns3__DeviceDetailsType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns3__DeviceDetailsType::soap_del() deep deletes ns3__DeviceDetailsType data members, use only after ns3__DeviceDetailsType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns3__DeviceDetailsType
{ public:
/// <PRE><BLOCKQUOTE>
///   Device ID <br/><br/>Optional<br/><br/>
///   Character length and limits: 256 single-byte characters <br/>
///   DeviceID length morethan 256 is truncated
/// </BLOCKQUOTE></PRE>
/// Element "DeviceID" of XSD type xs:string.
    std::string*                         DeviceID                       0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief "urn:ebay:apis:eBLBaseComponents":SenderDetailsType is a complexType.
///
/// class ns3__SenderDetailsType operations:
/// - ns3__SenderDetailsType* soap_new_ns3__SenderDetailsType(soap*) allocate and default initialize
/// - ns3__SenderDetailsType* soap_new_ns3__SenderDetailsType(soap*, int num) allocate array and default initialize values
/// - ns3__SenderDetailsType* soap_new_req_ns3__SenderDetailsType(soap*, ...) allocate, set required members
/// - ns3__SenderDetailsType* soap_new_set_ns3__SenderDetailsType(soap*, ...) allocate, set all public members
/// - ns3__SenderDetailsType::soap_default(soap*) default initialize members
/// - int soap_read_ns3__SenderDetailsType(soap*, ns3__SenderDetailsType*) deserialize from a stream
/// - int soap_write_ns3__SenderDetailsType(soap*, ns3__SenderDetailsType*) serialize to a stream
/// - ns3__SenderDetailsType* ns3__SenderDetailsType::soap_dup(soap*) returns deep copy of ns3__SenderDetailsType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns3__SenderDetailsType::soap_del() deep deletes ns3__SenderDetailsType data members, use only after ns3__SenderDetailsType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns3__SenderDetailsType
{ public:

/// </BLOCKQUOTE></PRE>
/// Element "DeviceDetails" of XSD type "urn:ebay:apis:eBLBaseComponents":DeviceDetailsType.
    ns3__DeviceDetailsType*              DeviceDetails                  0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief "urn:ebay:apis:eBLBaseComponents":DoReferenceTransactionRequestDetailsType is a complexType.
///
/// class ns3__DoReferenceTransactionRequestDetailsType operations:
/// - ns3__DoReferenceTransactionRequestDetailsType* soap_new_ns3__DoReferenceTransactionRequestDetailsType(soap*) allocate and default initialize
/// - ns3__DoReferenceTransactionRequestDetailsType* soap_new_ns3__DoReferenceTransactionRequestDetailsType(soap*, int num) allocate array and default initialize values
/// - ns3__DoReferenceTransactionRequestDetailsType* soap_new_req_ns3__DoReferenceTransactionRequestDetailsType(soap*, ...) allocate, set required members
/// - ns3__DoReferenceTransactionRequestDetailsType* soap_new_set_ns3__DoReferenceTransactionRequestDetailsType(soap*, ...) allocate, set all public members
/// - ns3__DoReferenceTransactionRequestDetailsType::soap_default(soap*) default initialize members
/// - int soap_read_ns3__DoReferenceTransactionRequestDetailsType(soap*, ns3__DoReferenceTransactionRequestDetailsType*) deserialize from a stream
/// - int soap_write_ns3__DoReferenceTransactionRequestDetailsType(soap*, ns3__DoReferenceTransactionRequestDetailsType*) serialize to a stream
/// - ns3__DoReferenceTransactionRequestDetailsType* ns3__DoReferenceTransactionRequestDetailsType::soap_dup(soap*) returns deep copy of ns3__DoReferenceTransactionRequestDetailsType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns3__DoReferenceTransactionRequestDetailsType::soap_del() deep deletes ns3__DoReferenceTransactionRequestDetailsType data members, use only after ns3__DoReferenceTransactionRequestDetailsType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns3__DoReferenceTransactionRequestDetailsType
{ public:

/// </BLOCKQUOTE></PRE>
/// Element "ReferenceID" of XSD type xs:string.
    std::string                          ReferenceID                    1;	///< Required element.

/// </BLOCKQUOTE></PRE>
/// Element "PaymentAction" of XSD type "urn:ebay:apis:eBLBaseComponents":PaymentActionCodeType.
    enum ns3__PaymentActionCodeType      PaymentAction                  1;	///< Required element.

/// </BLOCKQUOTE></PRE>
/// Element "PaymentType" of XSD type "urn:ebay:apis:eBLBaseComponents":MerchantPullPaymentCodeType.
    enum ns3__MerchantPullPaymentCodeType*  PaymentType                    0;	///< Optional element.

/// </BLOCKQUOTE></PRE>
/// Element "PaymentDetails" of XSD type "urn:ebay:apis:eBLBaseComponents":PaymentDetailsType.
    ns3__PaymentDetailsType*             PaymentDetails                 1;	///< Required element.

/// </BLOCKQUOTE></PRE>
/// Element "CreditCard" of XSD type "urn:ebay:apis:eBLBaseComponents":ReferenceCreditCardDetailsType.
    ns3__ReferenceCreditCardDetailsType*  CreditCard                     0;	///< Optional element.

/// </BLOCKQUOTE></PRE>
/// Element "IPAddress" of XSD type xs:string.
    std::string*                         IPAddress                      0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Correlation id related to risk process done for the device. Max length is 36 Chars.
/// </BLOCKQUOTE></PRE>
/// Element "RiskSessionCorrelationID" of XSD type xs:string.
    std::string*                         RiskSessionCorrelationID       0;	///< Optional element.

/// </BLOCKQUOTE></PRE>
/// Element "MerchantSessionId" of XSD type xs:string.
    std::string*                         MerchantSessionId              0;	///< Optional element.

/// </BLOCKQUOTE></PRE>
/// Element "ReqConfirmShipping" of XSD type xs:string.
    std::string*                         ReqConfirmShipping             0;	///< Optional element.

/// </BLOCKQUOTE></PRE>
/// Element "SoftDescriptor" of XSD type xs:string.
    std::string*                         SoftDescriptor                 0;	///< Optional element.

/// </BLOCKQUOTE></PRE>
/// Element "SoftDescriptorCity" of XSD type xs:string.
    std::string*                         SoftDescriptorCity             0;	///< Optional element.

/// </BLOCKQUOTE></PRE>
/// Element "SenderDetails" of XSD type "urn:ebay:apis:eBLBaseComponents":SenderDetailsType.
    ns3__SenderDetailsType*              SenderDetails                  0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Unique id for each API request to prevent duplicate payments.
///   <br/>
///   <br/>
///   <b>Optional</b>
///   <br/>Character length and limits: 38 single-byte characters maximum.
/// </BLOCKQUOTE></PRE>
/// Element "MsgSubID" of XSD type xs:string.
    std::string*                         MsgSubID                       0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief "urn:ebay:apis:eBLBaseComponents":DoReferenceTransactionResponseDetailsType is a complexType.
///
/// class ns3__DoReferenceTransactionResponseDetailsType operations:
/// - ns3__DoReferenceTransactionResponseDetailsType* soap_new_ns3__DoReferenceTransactionResponseDetailsType(soap*) allocate and default initialize
/// - ns3__DoReferenceTransactionResponseDetailsType* soap_new_ns3__DoReferenceTransactionResponseDetailsType(soap*, int num) allocate array and default initialize values
/// - ns3__DoReferenceTransactionResponseDetailsType* soap_new_req_ns3__DoReferenceTransactionResponseDetailsType(soap*, ...) allocate, set required members
/// - ns3__DoReferenceTransactionResponseDetailsType* soap_new_set_ns3__DoReferenceTransactionResponseDetailsType(soap*, ...) allocate, set all public members
/// - ns3__DoReferenceTransactionResponseDetailsType::soap_default(soap*) default initialize members
/// - int soap_read_ns3__DoReferenceTransactionResponseDetailsType(soap*, ns3__DoReferenceTransactionResponseDetailsType*) deserialize from a stream
/// - int soap_write_ns3__DoReferenceTransactionResponseDetailsType(soap*, ns3__DoReferenceTransactionResponseDetailsType*) serialize to a stream
/// - ns3__DoReferenceTransactionResponseDetailsType* ns3__DoReferenceTransactionResponseDetailsType::soap_dup(soap*) returns deep copy of ns3__DoReferenceTransactionResponseDetailsType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns3__DoReferenceTransactionResponseDetailsType::soap_del() deep deletes ns3__DoReferenceTransactionResponseDetailsType data members, use only after ns3__DoReferenceTransactionResponseDetailsType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns3__DoReferenceTransactionResponseDetailsType
{ public:

/// </BLOCKQUOTE></PRE>
/// Element "BillingAgreementID" of XSD type xs:string.
    std::string*                         BillingAgreementID             0;	///< Optional element.

/// </BLOCKQUOTE></PRE>
/// Element "PaymentInfo" of XSD type "urn:ebay:apis:eBLBaseComponents":PaymentInfoType.
    ns3__PaymentInfoType*                PaymentInfo                    0;	///< Optional element.

/// </BLOCKQUOTE></PRE>
/// Element "Amount" of XSD type "urn:ebay:apis:CoreComponentTypes":BasicAmountType.
    ns2__BasicAmountType*                Amount                         0;	///< Optional element.

/// </BLOCKQUOTE></PRE>
/// Element "AVSCode" of XSD type xs:string.
    std::string*                         AVSCode                        0;	///< Optional element.

/// </BLOCKQUOTE></PRE>
/// Element "CVV2Code" of XSD type xs:string.
    std::string*                         CVV2Code                       0;	///< Optional element.

/// </BLOCKQUOTE></PRE>
/// Element "TransactionID" of XSD type "urn:ebay:apis:eBLBaseComponents":TransactionId.
    ns3__TransactionId*                  TransactionID                  0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Response code from the processor when a recurring transaction is declined
/// </BLOCKQUOTE></PRE>
/// Element "PaymentAdviceCode" of XSD type xs:string.
    std::string*                         PaymentAdviceCode              0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Return msgsubid back to merchant
/// </BLOCKQUOTE></PRE>
/// Element "MsgSubID" of XSD type xs:string.
    std::string*                         MsgSubID                       0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   pending reason for IC+ interchange plus
/// </BLOCKQUOTE></PRE>
/// Element "PendingReason" of XSD type xs:string.
    std::string*                         PendingReason                  0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief "urn:ebay:apis:eBLBaseComponents":DoNonReferencedCreditRequestDetailsType is a complexType.
///
/// class ns3__DoNonReferencedCreditRequestDetailsType operations:
/// - ns3__DoNonReferencedCreditRequestDetailsType* soap_new_ns3__DoNonReferencedCreditRequestDetailsType(soap*) allocate and default initialize
/// - ns3__DoNonReferencedCreditRequestDetailsType* soap_new_ns3__DoNonReferencedCreditRequestDetailsType(soap*, int num) allocate array and default initialize values
/// - ns3__DoNonReferencedCreditRequestDetailsType* soap_new_req_ns3__DoNonReferencedCreditRequestDetailsType(soap*, ...) allocate, set required members
/// - ns3__DoNonReferencedCreditRequestDetailsType* soap_new_set_ns3__DoNonReferencedCreditRequestDetailsType(soap*, ...) allocate, set all public members
/// - ns3__DoNonReferencedCreditRequestDetailsType::soap_default(soap*) default initialize members
/// - int soap_read_ns3__DoNonReferencedCreditRequestDetailsType(soap*, ns3__DoNonReferencedCreditRequestDetailsType*) deserialize from a stream
/// - int soap_write_ns3__DoNonReferencedCreditRequestDetailsType(soap*, ns3__DoNonReferencedCreditRequestDetailsType*) serialize to a stream
/// - ns3__DoNonReferencedCreditRequestDetailsType* ns3__DoNonReferencedCreditRequestDetailsType::soap_dup(soap*) returns deep copy of ns3__DoNonReferencedCreditRequestDetailsType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns3__DoNonReferencedCreditRequestDetailsType::soap_del() deep deletes ns3__DoNonReferencedCreditRequestDetailsType data members, use only after ns3__DoNonReferencedCreditRequestDetailsType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns3__DoNonReferencedCreditRequestDetailsType
{ public:

/// </BLOCKQUOTE></PRE>
/// Element "Amount" of XSD type "urn:ebay:apis:CoreComponentTypes":BasicAmountType.
    ns2__BasicAmountType*                Amount                         1;	///< Required element.

/// </BLOCKQUOTE></PRE>
/// Element "NetAmount" of XSD type "urn:ebay:apis:CoreComponentTypes":BasicAmountType.
    ns2__BasicAmountType*                NetAmount                      0;	///< Optional element.

/// </BLOCKQUOTE></PRE>
/// Element "TaxAmount" of XSD type "urn:ebay:apis:CoreComponentTypes":BasicAmountType.
    ns2__BasicAmountType*                TaxAmount                      0;	///< Optional element.

/// </BLOCKQUOTE></PRE>
/// Element "ShippingAmount" of XSD type "urn:ebay:apis:CoreComponentTypes":BasicAmountType.
    ns2__BasicAmountType*                ShippingAmount                 0;	///< Optional element.

/// </BLOCKQUOTE></PRE>
/// Element "CreditCard" of XSD type "urn:ebay:apis:eBLBaseComponents":CreditCardDetailsType.
    ns3__CreditCardDetailsType*          CreditCard                     1;	///< Required element.

/// </BLOCKQUOTE></PRE>
/// Element "ReceiverEmail" of XSD type xs:string.
    std::string*                         ReceiverEmail                  0;	///< Optional element.

/// </BLOCKQUOTE></PRE>
/// Element "Comment" of XSD type xs:string.
    std::string*                         Comment                        0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief "urn:ebay:apis:eBLBaseComponents":DoNonReferencedCreditResponseDetailsType is a complexType.
///
/// class ns3__DoNonReferencedCreditResponseDetailsType operations:
/// - ns3__DoNonReferencedCreditResponseDetailsType* soap_new_ns3__DoNonReferencedCreditResponseDetailsType(soap*) allocate and default initialize
/// - ns3__DoNonReferencedCreditResponseDetailsType* soap_new_ns3__DoNonReferencedCreditResponseDetailsType(soap*, int num) allocate array and default initialize values
/// - ns3__DoNonReferencedCreditResponseDetailsType* soap_new_req_ns3__DoNonReferencedCreditResponseDetailsType(soap*, ...) allocate, set required members
/// - ns3__DoNonReferencedCreditResponseDetailsType* soap_new_set_ns3__DoNonReferencedCreditResponseDetailsType(soap*, ...) allocate, set all public members
/// - ns3__DoNonReferencedCreditResponseDetailsType::soap_default(soap*) default initialize members
/// - int soap_read_ns3__DoNonReferencedCreditResponseDetailsType(soap*, ns3__DoNonReferencedCreditResponseDetailsType*) deserialize from a stream
/// - int soap_write_ns3__DoNonReferencedCreditResponseDetailsType(soap*, ns3__DoNonReferencedCreditResponseDetailsType*) serialize to a stream
/// - ns3__DoNonReferencedCreditResponseDetailsType* ns3__DoNonReferencedCreditResponseDetailsType::soap_dup(soap*) returns deep copy of ns3__DoNonReferencedCreditResponseDetailsType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns3__DoNonReferencedCreditResponseDetailsType::soap_del() deep deletes ns3__DoNonReferencedCreditResponseDetailsType data members, use only after ns3__DoNonReferencedCreditResponseDetailsType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns3__DoNonReferencedCreditResponseDetailsType
{ public:

/// </BLOCKQUOTE></PRE>
/// Element "Amount" of XSD type "urn:ebay:apis:CoreComponentTypes":BasicAmountType.
    ns2__BasicAmountType*                Amount                         1;	///< Required element.

/// </BLOCKQUOTE></PRE>
/// Element "TransactionID" of XSD type "urn:ebay:apis:eBLBaseComponents":TransactionId.
    ns3__TransactionId                   TransactionID                  1;	///< Required element.
    struct soap                         *soap                          ;
};

/// @brief "urn:ebay:apis:eBLBaseComponents":EnterBoardingRequestDetailsType is a complexType.
///
/// class ns3__EnterBoardingRequestDetailsType operations:
/// - ns3__EnterBoardingRequestDetailsType* soap_new_ns3__EnterBoardingRequestDetailsType(soap*) allocate and default initialize
/// - ns3__EnterBoardingRequestDetailsType* soap_new_ns3__EnterBoardingRequestDetailsType(soap*, int num) allocate array and default initialize values
/// - ns3__EnterBoardingRequestDetailsType* soap_new_req_ns3__EnterBoardingRequestDetailsType(soap*, ...) allocate, set required members
/// - ns3__EnterBoardingRequestDetailsType* soap_new_set_ns3__EnterBoardingRequestDetailsType(soap*, ...) allocate, set all public members
/// - ns3__EnterBoardingRequestDetailsType::soap_default(soap*) default initialize members
/// - int soap_read_ns3__EnterBoardingRequestDetailsType(soap*, ns3__EnterBoardingRequestDetailsType*) deserialize from a stream
/// - int soap_write_ns3__EnterBoardingRequestDetailsType(soap*, ns3__EnterBoardingRequestDetailsType*) serialize to a stream
/// - ns3__EnterBoardingRequestDetailsType* ns3__EnterBoardingRequestDetailsType::soap_dup(soap*) returns deep copy of ns3__EnterBoardingRequestDetailsType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns3__EnterBoardingRequestDetailsType::soap_del() deep deletes ns3__EnterBoardingRequestDetailsType data members, use only after ns3__EnterBoardingRequestDetailsType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns3__EnterBoardingRequestDetailsType
{ public:
/// <PRE><BLOCKQUOTE>
///   Onboarding program code given to you by PayPal.
///   <br/>
///   <br/>
///   <b>Required</b>
///   <br/>
///   <br/>
///   Character length and limitations: 64 alphanumeric characters
/// </BLOCKQUOTE></PRE>
/// Element "ProgramCode" of XSD type xs:string.
    std::string                          ProgramCode                    1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   A list of comma-separated values that indicate the PayPal products you are implementing for this merchant:
///   <br/>
///   <br/>
///   Direct Payment (dp) allows payments by credit card without requiring the customer to have a PayPal account. <br/>
///   <br/>
///   Express Checkout (ec) allows customers to fund transactions with their PayPal account. <br/>
///   <br/>
///   Authorization and Capture (auth_settle) allows merchants to verify availability of funds in a PayPal account, but capture them at a later time. <br/>
///   <br/>
///   Administrative APIs (admin_api) is a collection of the PayPal APIs for transaction searching, getting transaction details, refunding, and mass payments. <br/>
///   <br/>
///   <b>Required</b>
///   <br/>
///   <br/>
///   Character length and limitations: 64 alphanumeric characters
/// </BLOCKQUOTE></PRE>
/// Element "ProductList" of XSD type xs:string.
    std::string                          ProductList                    1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Any custom information you want to store for this partner
///   <br/>
///   <br/>
///   Optional
///   <br/>
///   <br/>
///   Character length and limitations: 256 alphanumeric characters
/// </BLOCKQUOTE></PRE>
/// Element "PartnerCustom" of XSD type xs:string.
    std::string*                         PartnerCustom                  0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   The URL for the logo displayed on the PayPal Partner Welcome Page.
///   <br/>
///   <br/>
///   Optional
///   <br/>
///   <br/>
///   Character length and limitations: 2,048 alphanumeric characters
/// </BLOCKQUOTE></PRE>
/// Element "ImageUrl" of XSD type xs:string.
    std::string*                         ImageUrl                       0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Marketing category tha configures the graphic displayed n the PayPal Partner Welcome page.
/// </BLOCKQUOTE></PRE>
/// Element "MarketingCategory" of XSD type "urn:ebay:apis:eBLBaseComponents":MarketingCategoryType.
    enum ns3__MarketingCategoryType*     MarketingCategory              0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Information about the merchants business
/// </BLOCKQUOTE></PRE>
/// Element "BusinessInfo" of XSD type "urn:ebay:apis:eBLBaseComponents":BusinessInfoType.
    ns3__BusinessInfoType*               BusinessInfo                   0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Information about the merchant (the business owner)
/// </BLOCKQUOTE></PRE>
/// Element "OwnerInfo" of XSD type "urn:ebay:apis:eBLBaseComponents":BusinessOwnerInfoType.
    ns3__BusinessOwnerInfoType*          OwnerInfo                      0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Information about the merchant's bank account
/// </BLOCKQUOTE></PRE>
/// Element "BankAccount" of XSD type "urn:ebay:apis:eBLBaseComponents":BankAccountDetailsType.
    ns3__BankAccountDetailsType*         BankAccount                    0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief "urn:ebay:apis:eBLBaseComponents":BusinessInfoType is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   BusinessInfoType
/// </BLOCKQUOTE></PRE>
/// class ns3__BusinessInfoType operations:
/// - ns3__BusinessInfoType* soap_new_ns3__BusinessInfoType(soap*) allocate and default initialize
/// - ns3__BusinessInfoType* soap_new_ns3__BusinessInfoType(soap*, int num) allocate array and default initialize values
/// - ns3__BusinessInfoType* soap_new_req_ns3__BusinessInfoType(soap*, ...) allocate, set required members
/// - ns3__BusinessInfoType* soap_new_set_ns3__BusinessInfoType(soap*, ...) allocate, set all public members
/// - ns3__BusinessInfoType::soap_default(soap*) default initialize members
/// - int soap_read_ns3__BusinessInfoType(soap*, ns3__BusinessInfoType*) deserialize from a stream
/// - int soap_write_ns3__BusinessInfoType(soap*, ns3__BusinessInfoType*) serialize to a stream
/// - ns3__BusinessInfoType* ns3__BusinessInfoType::soap_dup(soap*) returns deep copy of ns3__BusinessInfoType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns3__BusinessInfoType::soap_del() deep deletes ns3__BusinessInfoType data members, use only after ns3__BusinessInfoType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns3__BusinessInfoType
{ public:
/// <PRE><BLOCKQUOTE>
///   Type of business, such as corporation or sole proprietorship
/// </BLOCKQUOTE></PRE>
/// Element "Type" of XSD type "urn:ebay:apis:eBLBaseComponents":BusinessTypeType.
    enum ns3__BusinessTypeType*          Type                           0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Official name of business
///   <br/>
///   <br/>
///   Character length and limitations: 75 alphanumeric characters
/// </BLOCKQUOTE></PRE>
/// Element "Name" of XSD type "urn:ebay:apis:eBLBaseComponents":NameType.
    ns3__NameType*                       Name                           0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Merchants business postal address
/// </BLOCKQUOTE></PRE>
/// Element "Address" of XSD type "urn:ebay:apis:eBLBaseComponents":AddressType.
    ns3__AddressType*                    Address                        0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Businesss primary telephone number
///   <br/>
///   <br/>
///   Character length and limitations: 20 alphanumeric characters
/// </BLOCKQUOTE></PRE>
/// Element "WorkPhone" of XSD type xs:string.
    std::string*                         WorkPhone                      0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Line of business, as defined in the enumerations
/// </BLOCKQUOTE></PRE>
/// Element "Category" of XSD type "urn:ebay:apis:eBLBaseComponents":BusinessCategoryType.
    enum ns3__BusinessCategoryType*      Category                       0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Business sub-category, as defined in the enumerations
/// </BLOCKQUOTE></PRE>
/// Element "SubCategory" of XSD type "urn:ebay:apis:eBLBaseComponents":BusinessSubCategoryType.
    enum ns3__BusinessSubCategoryType*   SubCategory                    0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Average transaction price, as defined by the enumerations.
///   <table>
///   <tr>
///   <th>Enumeration</th>
///   <th>Meaning</th>
///   </tr>
///   <tr>
///   <td/>
///   <td/>
///   </tr>AverageTransactionPrice-Not-Applicable <tr>
///   <td>AverageTransactionPrice-Range1</td>
///   <td>Less than $25 USD</td>
///   </tr>
///   <tr>
///   <td>AverageTransactionPrice-Range2</td>
///   <td>$25 USD to $50 USD</td>
///   </tr>
///   <tr>
///   <td>AverageTransactionPrice-Range3</td>
///   <td>$50 USD to $100 USD</td>
///   </tr>
///   <tr>
///   <td>AverageTransactionPrice-Range4</td>
///   <td>$100 USD to $250 USD</td>
///   </tr>
///   <tr>
///   <td>AverageTransactionPrice-Range5</td>
///   <td>$250 USD to $500 USD</td>
///   </tr>
///   <tr>
///   <td>AverageTransactionPrice-Range6</td>
///   <td>$500 USD to $1,000 USD</td>
///   </tr>
///   <tr>
///   <td>AverageTransactionPrice-Range7</td>
///   <td> $1,000 USD to $2,000 USD</td>
///   </tr>
///   <tr>
///   <td>AverageTransactionPrice-Range8</td>
///   <td>$2,000 USD to $5,000 USD</td>
///   </tr>
///   <tr>
///   <td>AverageTransactionPrice-Range9</td>
///   <td>$5,000 USD to $10,000 USD</td>
///   </tr>
///   <tr>
///   <td>AverageTransactionPrice-Range10</td>
///   <td>More than $10,000 USD</td>
///   </tr>
///   </table>
/// </BLOCKQUOTE></PRE>
/// Element "AveragePrice" of XSD type "urn:ebay:apis:eBLBaseComponents":AverageTransactionPriceType.
    enum ns3__AverageTransactionPriceType*  AveragePrice                   0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Average monthly sales volume, as defined by the enumerations.
///   <table>
///   <tr>
///   <th>Enumeration</th>
///   <th>Meaning</th>
///   </tr>
///   <tr>
///   <td>AverageMonthlyVolume-Not-Applicable</td>
///   <td/>
///   </tr>
///   <tr>
///   <td>AverageMonthlyVolume-Range1</td>
///   <td>Less than $1,000 USD</td>
///   </tr>
///   <tr>
///   <td>AverageMonthlyVolume-Range2</td>
///   <td>$1,000 USD to $5,000 USD</td>
///   </tr>
///   <tr>
///   <td>AverageMonthlyVolume-Range3</td>
///   <td>$5,000 USD to $25,000 USD</td>
///   </tr>
///   <tr>
///   <td>AverageMonthlyVolume-Range4</td>
///   <td>$25,000 USD to $100,000 USD</td>
///   </tr>
///   <tr>
///   <td>AverageMonthlyVolume-Range5</td>
///   <td>$100,000 USD to $1,000,000 USD</td>
///   </tr>
///   <tr>
///   <td>AverageMonthlyVolume-Range6</td>
///   <td>More than $1,000,000 USD</td>
///   </tr>
///   </table>
/// </BLOCKQUOTE></PRE>
/// Element "AverageMonthlyVolume" of XSD type "urn:ebay:apis:eBLBaseComponents":AverageMonthlyVolumeType.
    enum ns3__AverageMonthlyVolumeType*  AverageMonthlyVolume           0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Main sales venue, such as eBay
/// </BLOCKQUOTE></PRE>
/// Element "SalesVenue" of XSD type "urn:ebay:apis:eBLBaseComponents":SalesVenueType.
    enum ns3__SalesVenueType*            SalesVenue                     0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Primary URL of business
///   <br/>
///   <br/>Character length and limitations: 2,048 alphanumeric characters
/// </BLOCKQUOTE></PRE>
/// Element "Website" of XSD type xs:string.
    std::string*                         Website                        0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Percentage of revenue attributable to online sales, as defined by the enumerations
///   <br/>
///   <br/>
///   <table>
///   <tr>
///   <th>Enumeration</th>
///   <th>Meaning</th>
///   </tr>
///   <tr>
///   <td/>
///   <td/>
///   </tr>PercentageRevenueFromOnlineSales-Not-Applicable <tr>
///   <td>PercentageRevenueFromOnlineSales-Range1</td>
///   <td>Less than 25%</td>
///   </tr>
///   <tr>
///   <td>PercentageRevenueFromOnlineSales-Range2</td>
///   <td>25% to 50%</td>
///   </tr>
///   <tr>
///   <td>PercentageRevenueFromOnlineSales-Range3</td>
///   <td>50% to 75%</td>
///   </tr>
///   <tr>
///   <td>PercentageRevenueFromOnlineSales-Range4</td>
///   <td>75% to 100%</td>
///   </tr>
///   </table>
/// </BLOCKQUOTE></PRE>
/// Element "RevenueFromOnlineSales" of XSD type "urn:ebay:apis:eBLBaseComponents":PercentageRevenueFromOnlineSalesType.
    enum ns3__PercentageRevenueFromOnlineSalesType*  RevenueFromOnlineSales         0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Date the merchants business was established
/// </BLOCKQUOTE></PRE>
/// Element "BusinessEstablished" of XSD type xs:dateTime.
    time_t*                              BusinessEstablished            0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Email address to contact businesss customer service
///   <br/>
///   <br/>
///   Character length and limitations: 127 alphanumeric characters
/// </BLOCKQUOTE></PRE>
/// Element "CustomerServiceEmail" of XSD type "urn:ebay:apis:eBLBaseComponents":EmailAddressType.
    ns3__EmailAddressType*               CustomerServiceEmail           0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Telephone number to contact businesss customer service
///   <br/>
///   <br/>Character length and limitations: 32 alphanumeric characters
/// </BLOCKQUOTE></PRE>
/// Element "CustomerServicePhone" of XSD type xs:string.
    std::string*                         CustomerServicePhone           0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief "urn:ebay:apis:eBLBaseComponents":BusinessOwnerInfoType is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   BusinessOwnerInfoType
/// </BLOCKQUOTE></PRE>
/// class ns3__BusinessOwnerInfoType operations:
/// - ns3__BusinessOwnerInfoType* soap_new_ns3__BusinessOwnerInfoType(soap*) allocate and default initialize
/// - ns3__BusinessOwnerInfoType* soap_new_ns3__BusinessOwnerInfoType(soap*, int num) allocate array and default initialize values
/// - ns3__BusinessOwnerInfoType* soap_new_req_ns3__BusinessOwnerInfoType(soap*, ...) allocate, set required members
/// - ns3__BusinessOwnerInfoType* soap_new_set_ns3__BusinessOwnerInfoType(soap*, ...) allocate, set all public members
/// - ns3__BusinessOwnerInfoType::soap_default(soap*) default initialize members
/// - int soap_read_ns3__BusinessOwnerInfoType(soap*, ns3__BusinessOwnerInfoType*) deserialize from a stream
/// - int soap_write_ns3__BusinessOwnerInfoType(soap*, ns3__BusinessOwnerInfoType*) serialize to a stream
/// - ns3__BusinessOwnerInfoType* ns3__BusinessOwnerInfoType::soap_dup(soap*) returns deep copy of ns3__BusinessOwnerInfoType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns3__BusinessOwnerInfoType::soap_del() deep deletes ns3__BusinessOwnerInfoType data members, use only after ns3__BusinessOwnerInfoType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns3__BusinessOwnerInfoType
{ public:
/// <PRE><BLOCKQUOTE>
///   Details about the business owner
/// </BLOCKQUOTE></PRE>
/// Element "Owner" of XSD type "urn:ebay:apis:eBLBaseComponents":PayerInfoType.
    ns3__PayerInfoType*                  Owner                          0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Business owners home telephone number
///   <br/>
///   <br/>Character length and limitations: 32 alphanumeric characters
/// </BLOCKQUOTE></PRE>
/// Element "HomePhone" of XSD type xs:string.
    std::string*                         HomePhone                      0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Business owners mobile telephone number
///   <br/>
///   <br/>
///   Character length and limitations: 32 alphanumeric characters
/// </BLOCKQUOTE></PRE>
/// Element "MobilePhone" of XSD type xs:string.
    std::string*                         MobilePhone                    0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Business owners social security number
///   <br/>
///   <br/>
///   Character length and limitations: 9 alphanumeric characters
/// </BLOCKQUOTE></PRE>
/// Element "SSN" of XSD type xs:string.
    std::string*                         SSN                            0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief "urn:ebay:apis:eBLBaseComponents":BankAccountDetailsType is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   BankAccountDetailsType
/// </BLOCKQUOTE></PRE>
/// class ns3__BankAccountDetailsType operations:
/// - ns3__BankAccountDetailsType* soap_new_ns3__BankAccountDetailsType(soap*) allocate and default initialize
/// - ns3__BankAccountDetailsType* soap_new_ns3__BankAccountDetailsType(soap*, int num) allocate array and default initialize values
/// - ns3__BankAccountDetailsType* soap_new_req_ns3__BankAccountDetailsType(soap*, ...) allocate, set required members
/// - ns3__BankAccountDetailsType* soap_new_set_ns3__BankAccountDetailsType(soap*, ...) allocate, set all public members
/// - ns3__BankAccountDetailsType::soap_default(soap*) default initialize members
/// - int soap_read_ns3__BankAccountDetailsType(soap*, ns3__BankAccountDetailsType*) deserialize from a stream
/// - int soap_write_ns3__BankAccountDetailsType(soap*, ns3__BankAccountDetailsType*) serialize to a stream
/// - ns3__BankAccountDetailsType* ns3__BankAccountDetailsType::soap_dup(soap*) returns deep copy of ns3__BankAccountDetailsType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns3__BankAccountDetailsType::soap_del() deep deletes ns3__BankAccountDetailsType data members, use only after ns3__BankAccountDetailsType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns3__BankAccountDetailsType
{ public:
/// <PRE><BLOCKQUOTE>
///   Name of bank
///   <br/>
///   <br/>
///   Character length and limitations: 192 alphanumeric characters
/// </BLOCKQUOTE></PRE>
/// Element "Name" of XSD type xs:string.
    std::string                          Name                           1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Type of bank account: Checking or Savings
/// </BLOCKQUOTE></PRE>
/// Element "Type" of XSD type "urn:ebay:apis:eBLBaseComponents":BankAccountTypeType.
    enum ns3__BankAccountTypeType        Type                           1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Merchants bank routing number
///   <br/>
///   <br/>
///   Character length and limitations: 23 alphanumeric characters
/// </BLOCKQUOTE></PRE>
/// Element "RoutingNumber" of XSD type xs:string.
    std::string                          RoutingNumber                  1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Merchants bank account number
///   <br/>
///   <br/>
///   Character length and limitations: 256 alphanumeric characters
/// </BLOCKQUOTE></PRE>
/// Element "AccountNumber" of XSD type xs:string.
    std::string                          AccountNumber                  1;	///< Required element.
    struct soap                         *soap                          ;
};

/// @brief "urn:ebay:apis:eBLBaseComponents":GetBoardingDetailsResponseDetailsType is a complexType.
///
/// class ns3__GetBoardingDetailsResponseDetailsType operations:
/// - ns3__GetBoardingDetailsResponseDetailsType* soap_new_ns3__GetBoardingDetailsResponseDetailsType(soap*) allocate and default initialize
/// - ns3__GetBoardingDetailsResponseDetailsType* soap_new_ns3__GetBoardingDetailsResponseDetailsType(soap*, int num) allocate array and default initialize values
/// - ns3__GetBoardingDetailsResponseDetailsType* soap_new_req_ns3__GetBoardingDetailsResponseDetailsType(soap*, ...) allocate, set required members
/// - ns3__GetBoardingDetailsResponseDetailsType* soap_new_set_ns3__GetBoardingDetailsResponseDetailsType(soap*, ...) allocate, set all public members
/// - ns3__GetBoardingDetailsResponseDetailsType::soap_default(soap*) default initialize members
/// - int soap_read_ns3__GetBoardingDetailsResponseDetailsType(soap*, ns3__GetBoardingDetailsResponseDetailsType*) deserialize from a stream
/// - int soap_write_ns3__GetBoardingDetailsResponseDetailsType(soap*, ns3__GetBoardingDetailsResponseDetailsType*) serialize to a stream
/// - ns3__GetBoardingDetailsResponseDetailsType* ns3__GetBoardingDetailsResponseDetailsType::soap_dup(soap*) returns deep copy of ns3__GetBoardingDetailsResponseDetailsType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns3__GetBoardingDetailsResponseDetailsType::soap_del() deep deletes ns3__GetBoardingDetailsResponseDetailsType data members, use only after ns3__GetBoardingDetailsResponseDetailsType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns3__GetBoardingDetailsResponseDetailsType
{ public:
/// <PRE><BLOCKQUOTE>
///   Status of merchant's onboarding process:
///   <br/>
///   <br/>
///   Completed
///   <br/>Cancelled
///   <br/>Pending
///   <br/>
///   <br/>Character length and limitations: Eight alphabetic characters
/// </BLOCKQUOTE></PRE>
/// Element "Status" of XSD type "urn:ebay:apis:eBLBaseComponents":BoardingStatusType.
    enum ns3__BoardingStatusType         Status                         1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Date the boarding process started
/// </BLOCKQUOTE></PRE>
/// Element "StartDate" of XSD type xs:dateTime.
    time_t                               StartDate                      1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Date the merchants status or progress was last updated
/// </BLOCKQUOTE></PRE>
/// Element "LastUpdated" of XSD type xs:dateTime.
    time_t                               LastUpdated                    1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Reason for merchants cancellation of sign-up.
///   <br/>
///   <br/>
///   Character length and limitations: 1,024 alphanumeric characters
/// </BLOCKQUOTE></PRE>
/// Element "Reason" of XSD type xs:string.
    std::string*                         Reason                         0;	///< Optional element.
/// Element "ProgramName" of XSD type xs:string.
    std::string                          ProgramName                    1;	///< Required element.
/// Element "ProgramCode" of XSD type xs:string.
    std::string                          ProgramCode                    1;	///< Required element.
/// Element "CampaignID" of XSD type xs:string.
    std::string*                         CampaignID                     0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Indicates if there is a limitation on the amount of money the business can withdraw from PayPal
/// </BLOCKQUOTE></PRE>
/// Element "UserWithdrawalLimit" of XSD type "urn:ebay:apis:eBLBaseComponents":UserWithdrawalLimitTypeType.
    enum ns3__UserWithdrawalLimitTypeType*  UserWithdrawalLimit            0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Custom information you set on the EnterBoarding API call
///   <br/>
///   <br/>Character length and limitations: 256 alphanumeric characters
/// </BLOCKQUOTE></PRE>
/// Element "PartnerCustom" of XSD type xs:string.
    std::string*                         PartnerCustom                  0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Details about the owner of the account
/// </BLOCKQUOTE></PRE>
/// Element "AccountOwner" of XSD type "urn:ebay:apis:eBLBaseComponents":PayerInfoType.
    ns3__PayerInfoType*                  AccountOwner                   0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Merchants PayPal API credentials
/// </BLOCKQUOTE></PRE>
/// Element "Credentials" of XSD type "urn:ebay:apis:eBLBaseComponents":APICredentialsType.
    ns3__APICredentialsType*             Credentials                    0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   The APIs that this merchant has granted the business partner permission to call on his behalf.
///   <br/>
///   <br/>
///   For example:
///   <br/>
///   SetExpressCheckout,GetExpressCheckoutDetails,DoExpressCheckoutPayment
/// </BLOCKQUOTE></PRE>
/// Element "ConfigureAPIs" of XSD type xs:string.
    std::string*                         ConfigureAPIs                  0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Primary email verification status. Confirmed, Unconfirmed
/// </BLOCKQUOTE></PRE>
/// Element "EmailVerificationStatus" of XSD type xs:string.
    std::string*                         EmailVerificationStatus        0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Gives VettingStatus - Pending, Cancelled, Approved, UnderReview
///   <br/>
///   <br/>Character length and limitations: 256 alphanumeric characters
/// </BLOCKQUOTE></PRE>
/// Element "VettingStatus" of XSD type xs:string.
    std::string*                         VettingStatus                  0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Gives BankAccountVerificationStatus - Added, Confirmed
///   <br/>
///   <br/>Character length and limitations: 256 alphanumeric characters
/// </BLOCKQUOTE></PRE>
/// Element "BankAccountVerificationStatus" of XSD type xs:string.
    std::string*                         BankAccountVerificationStatus  0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief "urn:ebay:apis:eBLBaseComponents":APICredentialsType is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   APICredentialsType
/// </BLOCKQUOTE></PRE>
/// class ns3__APICredentialsType operations:
/// - ns3__APICredentialsType* soap_new_ns3__APICredentialsType(soap*) allocate and default initialize
/// - ns3__APICredentialsType* soap_new_ns3__APICredentialsType(soap*, int num) allocate array and default initialize values
/// - ns3__APICredentialsType* soap_new_req_ns3__APICredentialsType(soap*, ...) allocate, set required members
/// - ns3__APICredentialsType* soap_new_set_ns3__APICredentialsType(soap*, ...) allocate, set all public members
/// - ns3__APICredentialsType::soap_default(soap*) default initialize members
/// - int soap_read_ns3__APICredentialsType(soap*, ns3__APICredentialsType*) deserialize from a stream
/// - int soap_write_ns3__APICredentialsType(soap*, ns3__APICredentialsType*) serialize to a stream
/// - ns3__APICredentialsType* ns3__APICredentialsType::soap_dup(soap*) returns deep copy of ns3__APICredentialsType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns3__APICredentialsType::soap_del() deep deletes ns3__APICredentialsType data members, use only after ns3__APICredentialsType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns3__APICredentialsType
{ public:
/// <PRE><BLOCKQUOTE>
///   Merchants PayPal API username
///   Character length and limitations: 128 alphanumeric characters
/// </BLOCKQUOTE></PRE>
/// Element "Username" of XSD type xs:string.
    std::string                          Username                       1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Merchants PayPal API password
///   Character length and limitations: 40 alphanumeric characters
/// </BLOCKQUOTE></PRE>
/// Element "Password" of XSD type xs:string.
    std::string                          Password                       1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Merchants PayPal API signature, if one exists.
///   <br/>
///   <br/>Character length and limitations: 256 alphanumeric characters
/// </BLOCKQUOTE></PRE>
/// Element "Signature" of XSD type xs:string.
    std::string*                         Signature                      0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Merchants PayPal API certificate in PEM format, if one exists
///   <br/>
///   <br/>
///   The certificate consists of two parts: the private key (2,048 bytes) and the certificate proper (4,000 bytes).
///   <br/>
///   <br/>
///   <br/>Character length and limitations: 6,048 alphanumeric characters
/// </BLOCKQUOTE></PRE>
/// Element "Certificate" of XSD type xs:string.
    std::string*                         Certificate                    0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Merchants PayPal API authentication mechanism.
///   <br/>
///   <br/>
///   Auth-None: no authentication mechanism on file
///   <br/>
///   <br/>Cert: API certificate
///   <br/>
///   <br/>Sign: API signature
///   <br/>
///   <br/>Character length and limitations: 9 alphanumeric characters
/// </BLOCKQUOTE></PRE>
/// Element "Type" of XSD type "urn:ebay:apis:eBLBaseComponents":APIAuthenticationType.
    enum ns3__APIAuthenticationType      Type                           1;	///< Required element.
    struct soap                         *soap                          ;
};

/// @brief "urn:ebay:apis:eBLBaseComponents":SetMobileCheckoutRequestDetailsType is a complexType.
///
/// class ns3__SetMobileCheckoutRequestDetailsType operations:
/// - ns3__SetMobileCheckoutRequestDetailsType* soap_new_ns3__SetMobileCheckoutRequestDetailsType(soap*) allocate and default initialize
/// - ns3__SetMobileCheckoutRequestDetailsType* soap_new_ns3__SetMobileCheckoutRequestDetailsType(soap*, int num) allocate array and default initialize values
/// - ns3__SetMobileCheckoutRequestDetailsType* soap_new_req_ns3__SetMobileCheckoutRequestDetailsType(soap*, ...) allocate, set required members
/// - ns3__SetMobileCheckoutRequestDetailsType* soap_new_set_ns3__SetMobileCheckoutRequestDetailsType(soap*, ...) allocate, set all public members
/// - ns3__SetMobileCheckoutRequestDetailsType::soap_default(soap*) default initialize members
/// - int soap_read_ns3__SetMobileCheckoutRequestDetailsType(soap*, ns3__SetMobileCheckoutRequestDetailsType*) deserialize from a stream
/// - int soap_write_ns3__SetMobileCheckoutRequestDetailsType(soap*, ns3__SetMobileCheckoutRequestDetailsType*) serialize to a stream
/// - ns3__SetMobileCheckoutRequestDetailsType* ns3__SetMobileCheckoutRequestDetailsType::soap_dup(soap*) returns deep copy of ns3__SetMobileCheckoutRequestDetailsType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns3__SetMobileCheckoutRequestDetailsType::soap_del() deep deletes ns3__SetMobileCheckoutRequestDetailsType data members, use only after ns3__SetMobileCheckoutRequestDetailsType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns3__SetMobileCheckoutRequestDetailsType
{ public:
/// <PRE><BLOCKQUOTE>
///   The phone number of the buyer's mobile device, if available.
///   <br/>
///   <br/>
///   <b>Optional</b>
///   <br/>
/// </BLOCKQUOTE></PRE>
/// Element "BuyerPhone" of XSD type "urn:ebay:apis:eBLBaseComponents":PhoneNumberType.
    ns3__PhoneNumberType*                BuyerPhone                     0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Cost of this item before tax and shipping.
///   You must set the currencyID attribute to one of the three-character currency codes for any of the supported PayPal currencies.
///   <br/>
///   <br/>
///   Required
///   <br/>
/// </BLOCKQUOTE></PRE>
/// Element "ItemAmount" of XSD type "urn:ebay:apis:CoreComponentTypes":BasicAmountType.
    ns2__BasicAmountType*                ItemAmount                     1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Tax amount for this item.
///   You must set the currencyID attribute to one of the three-character currency codes for any of the supported PayPal currencies.
///   <br/>
///   <br/>
///   Optional
///   <br/>
/// </BLOCKQUOTE></PRE>
/// Element "Tax" of XSD type "urn:ebay:apis:CoreComponentTypes":BasicAmountType.
    ns2__BasicAmountType*                Tax                            0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Shipping amount for this item.
///   You must set the currencyID attribute to one of the three-character currency codes for any of the supported PayPal currencies.
///   <br/>
///   <br/>
///   Optional
///   <br/>
/// </BLOCKQUOTE></PRE>
/// Element "Shipping" of XSD type "urn:ebay:apis:CoreComponentTypes":BasicAmountType.
    ns2__BasicAmountType*                Shipping                       0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Description of the item that the customer is purchasing. <br/>
///   <br/>
///   Required
///   <br/>
///   <br/>Character length and limitations: 127 single-byte alphanumeric characters
/// </BLOCKQUOTE></PRE>
/// Element "ItemName" of XSD type xs:string.
    std::string                          ItemName                       1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Reference number of the item that the customer is purchasing. <br/>
///   <br/>
///   Optional
///   <br/>
///   <br/>Character length and limitations: 127 single-byte alphanumeric characters
/// </BLOCKQUOTE></PRE>
/// Element "ItemNumber" of XSD type xs:string.
    std::string*                         ItemNumber                     0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   A free-form field for your own use, such as a tracking number or other value you want returned to you in IPN.
///   <br/>
///   <br/>
///   Optional
///   <br/>
///   <br/>Character length and limitations: 256 single-byte alphanumeric characters
/// </BLOCKQUOTE></PRE>
/// Element "Custom" of XSD type xs:string.
    std::string*                         Custom                         0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Your own unique invoice or tracking number.
///   <br/>
///   <br/>
///   Optional
///   <br/>
///   <br/>Character length and limitations: 127 single-byte alphanumeric characters
/// </BLOCKQUOTE></PRE>
/// Element "InvoiceID" of XSD type xs:string.
    std::string*                         InvoiceID                      0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   URL to which the customer's browser is returned after choosing to pay with PayPal. PayPal recommends that the value of ReturnURL be the final review page on which the customer confirms the order and payment. <br/>
///   <br/>
///   <b>Required</b>
///   <br/>
///   <br/>
///   Character length and limitations: no limit.
/// </BLOCKQUOTE></PRE>
/// Element "ReturnURL" of XSD type xs:string.
    std::string                          ReturnURL                      1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   URL to which the customer is returned if he does not approve the use of PayPal to pay you. PayPal recommends that the value of CancelURL be the original page on which the customer chose to pay with PayPal. <br/>
///   <br/>
///   <b>Optional</b>
///   <br/>
///   <br/>
///   Character length and limitations: no limit
/// </BLOCKQUOTE></PRE>
/// Element "CancelURL" of XSD type xs:string.
    std::string*                         CancelURL                      0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   The value 1 indicates that you require that the customer's shipping address on file with PayPal be a confirmed address. Setting this element overrides the setting you have specified in your Merchant Account Profile. <br/>
///   <br/>
///   Optional
///   <br/>
/// </BLOCKQUOTE></PRE>
/// Element "AddressDisplayOptions" of XSD type xs:int.
    int*                                 AddressDisplayOptions          0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   The value 1 indicates that you require that the customer specifies a contact phone for the transactxion. Default is 0 / none required.
///   <br/>
///   <br/>
///   Optional
/// </BLOCKQUOTE></PRE>
/// Element "SharePhone" of XSD type xs:int.
    int*                                 SharePhone                     0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Customer's shipping address. <br/>
///   <br/>
///   Optional
///   <br/>
/// </BLOCKQUOTE></PRE>
/// Element "ShipToAddress" of XSD type "urn:ebay:apis:eBLBaseComponents":AddressType.
    ns3__AddressType*                    ShipToAddress                  0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Email address of the buyer as entered during checkout. PayPal uses this value to pre-fill the login portion of the PayPal login page. <br/>
///   <br/>
///   Optional
///   <br/>
///   <br/>Character length and limit: 127 single-byte alphanumeric characters
/// </BLOCKQUOTE></PRE>
/// Element "BuyerEmail" of XSD type "urn:ebay:apis:eBLBaseComponents":EmailAddressType.
    ns3__EmailAddressType*               BuyerEmail                     0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief "urn:ebay:apis:eBLBaseComponents":DoMobileCheckoutPaymentResponseDetailsType is a complexType.
///
/// class ns3__DoMobileCheckoutPaymentResponseDetailsType operations:
/// - ns3__DoMobileCheckoutPaymentResponseDetailsType* soap_new_ns3__DoMobileCheckoutPaymentResponseDetailsType(soap*) allocate and default initialize
/// - ns3__DoMobileCheckoutPaymentResponseDetailsType* soap_new_ns3__DoMobileCheckoutPaymentResponseDetailsType(soap*, int num) allocate array and default initialize values
/// - ns3__DoMobileCheckoutPaymentResponseDetailsType* soap_new_req_ns3__DoMobileCheckoutPaymentResponseDetailsType(soap*, ...) allocate, set required members
/// - ns3__DoMobileCheckoutPaymentResponseDetailsType* soap_new_set_ns3__DoMobileCheckoutPaymentResponseDetailsType(soap*, ...) allocate, set all public members
/// - ns3__DoMobileCheckoutPaymentResponseDetailsType::soap_default(soap*) default initialize members
/// - int soap_read_ns3__DoMobileCheckoutPaymentResponseDetailsType(soap*, ns3__DoMobileCheckoutPaymentResponseDetailsType*) deserialize from a stream
/// - int soap_write_ns3__DoMobileCheckoutPaymentResponseDetailsType(soap*, ns3__DoMobileCheckoutPaymentResponseDetailsType*) serialize to a stream
/// - ns3__DoMobileCheckoutPaymentResponseDetailsType* ns3__DoMobileCheckoutPaymentResponseDetailsType::soap_dup(soap*) returns deep copy of ns3__DoMobileCheckoutPaymentResponseDetailsType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns3__DoMobileCheckoutPaymentResponseDetailsType::soap_del() deep deletes ns3__DoMobileCheckoutPaymentResponseDetailsType data members, use only after ns3__DoMobileCheckoutPaymentResponseDetailsType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns3__DoMobileCheckoutPaymentResponseDetailsType
{ public:
/// <PRE><BLOCKQUOTE>
///   A free-form field for your own use, such as a tracking number or other value you want returned to you in IPN.
///   <br/>
///   <br/>
///   Optional
///   <br/>
///   <br/>Character length and limitations: 256 single-byte alphanumeric characters
/// </BLOCKQUOTE></PRE>
/// Element "Custom" of XSD type xs:string.
    std::string*                         Custom                         0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Your own unique invoice or tracking number.
///   <br/>
///   <br/>
///   Optional
///   <br/>
///   <br/>Character length and limitations: 127 single-byte alphanumeric characters
/// </BLOCKQUOTE></PRE>
/// Element "InvoiceID" of XSD type xs:string.
    std::string*                         InvoiceID                      0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Information about the payer
/// </BLOCKQUOTE></PRE>
/// Element "PayerInfo" of XSD type "urn:ebay:apis:eBLBaseComponents":PayerInfoType.
    ns3__PayerInfoType*                  PayerInfo                      1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Information about the transaction
/// </BLOCKQUOTE></PRE>
/// Element "PaymentInfo" of XSD type "urn:ebay:apis:eBLBaseComponents":PaymentInfoType.
    ns3__PaymentInfoType*                PaymentInfo                    1;	///< Required element.
    struct soap                         *soap                          ;
};

/// @brief "urn:ebay:apis:eBLBaseComponents":SetEbayMobileCheckoutRequestDetailsType is a complexType.
///
/// class ns3__SetEbayMobileCheckoutRequestDetailsType operations:
/// - ns3__SetEbayMobileCheckoutRequestDetailsType* soap_new_ns3__SetEbayMobileCheckoutRequestDetailsType(soap*) allocate and default initialize
/// - ns3__SetEbayMobileCheckoutRequestDetailsType* soap_new_ns3__SetEbayMobileCheckoutRequestDetailsType(soap*, int num) allocate array and default initialize values
/// - ns3__SetEbayMobileCheckoutRequestDetailsType* soap_new_req_ns3__SetEbayMobileCheckoutRequestDetailsType(soap*, ...) allocate, set required members
/// - ns3__SetEbayMobileCheckoutRequestDetailsType* soap_new_set_ns3__SetEbayMobileCheckoutRequestDetailsType(soap*, ...) allocate, set all public members
/// - ns3__SetEbayMobileCheckoutRequestDetailsType::soap_default(soap*) default initialize members
/// - int soap_read_ns3__SetEbayMobileCheckoutRequestDetailsType(soap*, ns3__SetEbayMobileCheckoutRequestDetailsType*) deserialize from a stream
/// - int soap_write_ns3__SetEbayMobileCheckoutRequestDetailsType(soap*, ns3__SetEbayMobileCheckoutRequestDetailsType*) serialize to a stream
/// - ns3__SetEbayMobileCheckoutRequestDetailsType* ns3__SetEbayMobileCheckoutRequestDetailsType::soap_dup(soap*) returns deep copy of ns3__SetEbayMobileCheckoutRequestDetailsType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns3__SetEbayMobileCheckoutRequestDetailsType::soap_del() deep deletes ns3__SetEbayMobileCheckoutRequestDetailsType data members, use only after ns3__SetEbayMobileCheckoutRequestDetailsType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns3__SetEbayMobileCheckoutRequestDetailsType
{ public:
/// <PRE><BLOCKQUOTE>
///   The value 'Auction' indicates that user is coming to checkout after an auction ended. A value of 'BuyItNow' indicates if the user is coming to checkout by clicking on the 'buy it now' button in a chinese auction. A value of 'FixedPriceItem' indicates that user clicked on 'Buy it now' on a fixed price item. A value of Autopay indicates autopay (or immediate pay) which is not supported at the moment.
///   <br/>
///   <br/>
///   Required
///   <br/>
/// </BLOCKQUOTE></PRE>
/// Element "CheckoutType" of XSD type "urn:ebay:apis:eBLBaseComponents":EbayCheckoutType.
    enum ns3__EbayCheckoutType           CheckoutType                   1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   An item number assigned to the item in eBay database. <br/>
///   <br/>
///   Required
///   <br/>
///   <br/>Character length and limitations: 127 single-byte alphanumeric characters
/// </BLOCKQUOTE></PRE>
/// Element "ItemId" of XSD type xs:string.
    std::string                          ItemId                         1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   An Transaction id assigned to the item in eBay database. In case of Chinese auction Item Id itself indicates Transaction Id. Transaction Id in this case is Zero.
///   <br/>
///   <br/>
///   Required
///   <br/>
///   <br/>Character length and limitations: 127 single-byte alphanumeric characters
/// </BLOCKQUOTE></PRE>
/// Element "TransactionId" of XSD type xs:string.
    std::string                          TransactionId                  1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   An id indicating the site on which the item was listed. <br/>
///   <br/>
///   Required
///   <br/>
///   <br/>Character length and limitations: 2 alphanumeric characters
/// </BLOCKQUOTE></PRE>
/// Element "SiteId" of XSD type xs:string.
    std::string                          SiteId                         1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Buyers ebay Id. <br/>
///   <br/>
///   Required
///   <br/>
///   <br/>Character length and limitations: 127 single-byte alphanumeric characters
/// </BLOCKQUOTE></PRE>
/// Element "BuyerId" of XSD type xs:string.
    std::string                          BuyerId                        1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Indicating the client type. Weather it is WAP or J2ME. A value of 'WAP' indicates WAP. A value of 'J2MEClient' indicates J2ME client. <br/>
///   <br/>
///   Required
///   <br/>
/// </BLOCKQUOTE></PRE>
/// Element "ClientType" of XSD type "urn:ebay:apis:eBLBaseComponents":DyneticClientType.
    enum ns3__DyneticClientType          ClientType                     1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   The phone number of the buyer's mobile device, if available.
///   <br/>
///   <br/>
///   <b>Optional</b>
///   <br/>
/// </BLOCKQUOTE></PRE>
/// Element "BuyerPhone" of XSD type "urn:ebay:apis:eBLBaseComponents":PhoneNumberType.
    ns3__PhoneNumberType*                BuyerPhone                     0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   URL to which the customer's browser is returned after choosing to pay with PayPal. PayPal recommends that the value of ReturnURL be the final review page on which the customer confirms the order and payment. <br/>
///   <br/>
///   <b>Optional</b>
///   <br/>
///   <br/>
///   Character length and limitations: no limit.
/// </BLOCKQUOTE></PRE>
/// Element "ReturnURL" of XSD type xs:string.
    std::string*                         ReturnURL                      0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   URL to which the customer is returned if he does not approve the use of PayPal to pay you. PayPal recommends that the value of CancelURL be the original page on which the customer chose to pay with PayPal. <br/>
///   <br/>
///   <b>Optional</b>
///   <br/>
///   <br/>
///   Character length and limitations: no limit
/// </BLOCKQUOTE></PRE>
/// Element "CancelURL" of XSD type xs:string.
    std::string*                         CancelURL                      0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Specify quantity in case it is an immediate pay (or autopay) item. <br/>
///   <br/>
///   Optional
///   <br/>
/// </BLOCKQUOTE></PRE>
/// Element "Quantity" of XSD type xs:int.
    int*                                 Quantity                       0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Cost of this item before tax and shipping.You must set the currencyID attribute to one of the three-character currency codes for any of the supported PayPal currencies.Used only for autopay items.
///   <br/>
///   <br/>
///   Optional
///   <br/>
/// </BLOCKQUOTE></PRE>
/// Element "ItemAmount" of XSD type "urn:ebay:apis:CoreComponentTypes":BasicAmountType.
    ns2__BasicAmountType*                ItemAmount                     0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief "urn:ebay:apis:eBLBaseComponents":UATPDetailsType is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   UATP Card Details Type
/// </BLOCKQUOTE></PRE>
/// class ns3__UATPDetailsType operations:
/// - ns3__UATPDetailsType* soap_new_ns3__UATPDetailsType(soap*) allocate and default initialize
/// - ns3__UATPDetailsType* soap_new_ns3__UATPDetailsType(soap*, int num) allocate array and default initialize values
/// - ns3__UATPDetailsType* soap_new_req_ns3__UATPDetailsType(soap*, ...) allocate, set required members
/// - ns3__UATPDetailsType* soap_new_set_ns3__UATPDetailsType(soap*, ...) allocate, set all public members
/// - ns3__UATPDetailsType::soap_default(soap*) default initialize members
/// - int soap_read_ns3__UATPDetailsType(soap*, ns3__UATPDetailsType*) deserialize from a stream
/// - int soap_write_ns3__UATPDetailsType(soap*, ns3__UATPDetailsType*) serialize to a stream
/// - ns3__UATPDetailsType* ns3__UATPDetailsType::soap_dup(soap*) returns deep copy of ns3__UATPDetailsType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns3__UATPDetailsType::soap_del() deep deletes ns3__UATPDetailsType data members, use only after ns3__UATPDetailsType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns3__UATPDetailsType
{ public:
/// <PRE><BLOCKQUOTE>
///   UATP Card Number
/// </BLOCKQUOTE></PRE>
/// Element "UATPNumber" of XSD type xs:string.
    std::string                          UATPNumber                     1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   UATP Card expirty month
/// </BLOCKQUOTE></PRE>
/// Element "ExpMonth" of XSD type xs:int.
    int                                  ExpMonth                       1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   UATP Card expirty year
/// </BLOCKQUOTE></PRE>
/// Element "ExpYear" of XSD type xs:int.
    int                                  ExpYear                        1;	///< Required element.
    struct soap                         *soap                          ;
};

/// @brief "urn:ebay:apis:eBLBaseComponents":RecurringPaymentsSummaryType is a complexType.
///
/// class ns3__RecurringPaymentsSummaryType operations:
/// - ns3__RecurringPaymentsSummaryType* soap_new_ns3__RecurringPaymentsSummaryType(soap*) allocate and default initialize
/// - ns3__RecurringPaymentsSummaryType* soap_new_ns3__RecurringPaymentsSummaryType(soap*, int num) allocate array and default initialize values
/// - ns3__RecurringPaymentsSummaryType* soap_new_req_ns3__RecurringPaymentsSummaryType(soap*, ...) allocate, set required members
/// - ns3__RecurringPaymentsSummaryType* soap_new_set_ns3__RecurringPaymentsSummaryType(soap*, ...) allocate, set all public members
/// - ns3__RecurringPaymentsSummaryType::soap_default(soap*) default initialize members
/// - int soap_read_ns3__RecurringPaymentsSummaryType(soap*, ns3__RecurringPaymentsSummaryType*) deserialize from a stream
/// - int soap_write_ns3__RecurringPaymentsSummaryType(soap*, ns3__RecurringPaymentsSummaryType*) serialize to a stream
/// - ns3__RecurringPaymentsSummaryType* ns3__RecurringPaymentsSummaryType::soap_dup(soap*) returns deep copy of ns3__RecurringPaymentsSummaryType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns3__RecurringPaymentsSummaryType::soap_del() deep deletes ns3__RecurringPaymentsSummaryType data members, use only after ns3__RecurringPaymentsSummaryType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns3__RecurringPaymentsSummaryType
{ public:

/// </BLOCKQUOTE></PRE>
/// Element "NextBillingDate" of XSD type xs:dateTime.
    time_t*                              NextBillingDate                0;	///< Optional element.

/// </BLOCKQUOTE></PRE>
/// Element "NumberCyclesCompleted" of XSD type xs:int.
    int                                  NumberCyclesCompleted          1;	///< Required element.

/// </BLOCKQUOTE></PRE>
/// Element "NumberCyclesRemaining" of XSD type xs:int.
    int                                  NumberCyclesRemaining          1;	///< Required element.

/// </BLOCKQUOTE></PRE>
/// Element "OutstandingBalance" of XSD type "urn:ebay:apis:CoreComponentTypes":BasicAmountType.
    ns2__BasicAmountType*                OutstandingBalance             1;	///< Required element.

/// </BLOCKQUOTE></PRE>
/// Element "FailedPaymentCount" of XSD type xs:int.
    int                                  FailedPaymentCount             1;	///< Required element.

/// </BLOCKQUOTE></PRE>
/// Element "LastPaymentDate" of XSD type xs:dateTime.
    time_t*                              LastPaymentDate                0;	///< Optional element.

/// </BLOCKQUOTE></PRE>
/// Element "LastPaymentAmount" of XSD type "urn:ebay:apis:CoreComponentTypes":BasicAmountType.
    ns2__BasicAmountType*                LastPaymentAmount              0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief "urn:ebay:apis:eBLBaseComponents":ActivationDetailsType is a complexType.
///
/// class ns3__ActivationDetailsType operations:
/// - ns3__ActivationDetailsType* soap_new_ns3__ActivationDetailsType(soap*) allocate and default initialize
/// - ns3__ActivationDetailsType* soap_new_ns3__ActivationDetailsType(soap*, int num) allocate array and default initialize values
/// - ns3__ActivationDetailsType* soap_new_req_ns3__ActivationDetailsType(soap*, ...) allocate, set required members
/// - ns3__ActivationDetailsType* soap_new_set_ns3__ActivationDetailsType(soap*, ...) allocate, set all public members
/// - ns3__ActivationDetailsType::soap_default(soap*) default initialize members
/// - int soap_read_ns3__ActivationDetailsType(soap*, ns3__ActivationDetailsType*) deserialize from a stream
/// - int soap_write_ns3__ActivationDetailsType(soap*, ns3__ActivationDetailsType*) serialize to a stream
/// - ns3__ActivationDetailsType* ns3__ActivationDetailsType::soap_dup(soap*) returns deep copy of ns3__ActivationDetailsType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns3__ActivationDetailsType::soap_del() deep deletes ns3__ActivationDetailsType data members, use only after ns3__ActivationDetailsType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns3__ActivationDetailsType
{ public:

/// </BLOCKQUOTE></PRE>
/// Element "InitialAmount" of XSD type "urn:ebay:apis:CoreComponentTypes":BasicAmountType.
    ns2__BasicAmountType*                InitialAmount                  1;	///< Required element.

/// </BLOCKQUOTE></PRE>
/// Element "FailedInitialAmountAction" of XSD type "urn:ebay:apis:eBLBaseComponents":FailedPaymentActionType.
    enum ns3__FailedPaymentActionType*   FailedInitialAmountAction      0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief "urn:ebay:apis:eBLBaseComponents":BillingPeriodDetailsType is a complexType.
///
/// class ns3__BillingPeriodDetailsType operations:
/// - ns3__BillingPeriodDetailsType* soap_new_ns3__BillingPeriodDetailsType(soap*) allocate and default initialize
/// - ns3__BillingPeriodDetailsType* soap_new_ns3__BillingPeriodDetailsType(soap*, int num) allocate array and default initialize values
/// - ns3__BillingPeriodDetailsType* soap_new_req_ns3__BillingPeriodDetailsType(soap*, ...) allocate, set required members
/// - ns3__BillingPeriodDetailsType* soap_new_set_ns3__BillingPeriodDetailsType(soap*, ...) allocate, set all public members
/// - ns3__BillingPeriodDetailsType::soap_default(soap*) default initialize members
/// - int soap_read_ns3__BillingPeriodDetailsType(soap*, ns3__BillingPeriodDetailsType*) deserialize from a stream
/// - int soap_write_ns3__BillingPeriodDetailsType(soap*, ns3__BillingPeriodDetailsType*) serialize to a stream
/// - ns3__BillingPeriodDetailsType* ns3__BillingPeriodDetailsType::soap_dup(soap*) returns deep copy of ns3__BillingPeriodDetailsType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns3__BillingPeriodDetailsType::soap_del() deep deletes ns3__BillingPeriodDetailsType data members, use only after ns3__BillingPeriodDetailsType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns3__BillingPeriodDetailsType
{ public:
/// <PRE><BLOCKQUOTE>
///   Unit of meausre for billing cycle
/// </BLOCKQUOTE></PRE>
/// Element "BillingPeriod" of XSD type "urn:ebay:apis:eBLBaseComponents":BillingPeriodType.
    enum ns3__BillingPeriodType          BillingPeriod                  1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Number of BillingPeriod that make up one billing cycle
/// </BLOCKQUOTE></PRE>
/// Element "BillingFrequency" of XSD type xs:int.
    int                                  BillingFrequency               1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Total billing cycles in this portion of the schedule
/// </BLOCKQUOTE></PRE>
/// Element "TotalBillingCycles" of XSD type xs:int.
    int*                                 TotalBillingCycles             0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Amount to charge
/// </BLOCKQUOTE></PRE>
/// Element "Amount" of XSD type "urn:ebay:apis:CoreComponentTypes":BasicAmountType.
    ns2__BasicAmountType*                Amount                         1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Additional shipping amount to charge
/// </BLOCKQUOTE></PRE>
/// Element "ShippingAmount" of XSD type "urn:ebay:apis:CoreComponentTypes":BasicAmountType.
    ns2__BasicAmountType*                ShippingAmount                 0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Additional tax amount to charge
/// </BLOCKQUOTE></PRE>
/// Element "TaxAmount" of XSD type "urn:ebay:apis:CoreComponentTypes":BasicAmountType.
    ns2__BasicAmountType*                TaxAmount                      0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief "urn:ebay:apis:eBLBaseComponents":BillingPeriodDetailsType_Update is a complexType.
///
/// class ns3__BillingPeriodDetailsType_USCOREUpdate operations:
/// - ns3__BillingPeriodDetailsType_USCOREUpdate* soap_new_ns3__BillingPeriodDetailsType_USCOREUpdate(soap*) allocate and default initialize
/// - ns3__BillingPeriodDetailsType_USCOREUpdate* soap_new_ns3__BillingPeriodDetailsType_USCOREUpdate(soap*, int num) allocate array and default initialize values
/// - ns3__BillingPeriodDetailsType_USCOREUpdate* soap_new_req_ns3__BillingPeriodDetailsType_USCOREUpdate(soap*, ...) allocate, set required members
/// - ns3__BillingPeriodDetailsType_USCOREUpdate* soap_new_set_ns3__BillingPeriodDetailsType_USCOREUpdate(soap*, ...) allocate, set all public members
/// - ns3__BillingPeriodDetailsType_USCOREUpdate::soap_default(soap*) default initialize members
/// - int soap_read_ns3__BillingPeriodDetailsType_USCOREUpdate(soap*, ns3__BillingPeriodDetailsType_USCOREUpdate*) deserialize from a stream
/// - int soap_write_ns3__BillingPeriodDetailsType_USCOREUpdate(soap*, ns3__BillingPeriodDetailsType_USCOREUpdate*) serialize to a stream
/// - ns3__BillingPeriodDetailsType_USCOREUpdate* ns3__BillingPeriodDetailsType_USCOREUpdate::soap_dup(soap*) returns deep copy of ns3__BillingPeriodDetailsType_USCOREUpdate, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns3__BillingPeriodDetailsType_USCOREUpdate::soap_del() deep deletes ns3__BillingPeriodDetailsType_USCOREUpdate data members, use only after ns3__BillingPeriodDetailsType_USCOREUpdate::soap_dup(NULL) (use soapcpp2 -Ed)
class ns3__BillingPeriodDetailsType_USCOREUpdate
{ public:
/// <PRE><BLOCKQUOTE>
///   Unit of meausre for billing cycle
/// </BLOCKQUOTE></PRE>
/// Element "BillingPeriod" of XSD type "urn:ebay:apis:eBLBaseComponents":BillingPeriodType.
    enum ns3__BillingPeriodType*         BillingPeriod                  0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Number of BillingPeriod that make up one billing cycle
/// </BLOCKQUOTE></PRE>
/// Element "BillingFrequency" of XSD type xs:int.
    int*                                 BillingFrequency               0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Total billing cycles in this portion of the schedule
/// </BLOCKQUOTE></PRE>
/// Element "TotalBillingCycles" of XSD type xs:int.
    int*                                 TotalBillingCycles             0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Amount to charge
/// </BLOCKQUOTE></PRE>
/// Element "Amount" of XSD type "urn:ebay:apis:CoreComponentTypes":BasicAmountType.
    ns2__BasicAmountType*                Amount                         0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Additional shipping amount to charge
/// </BLOCKQUOTE></PRE>
/// Element "ShippingAmount" of XSD type "urn:ebay:apis:CoreComponentTypes":BasicAmountType.
    ns2__BasicAmountType*                ShippingAmount                 0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Additional tax amount to charge
/// </BLOCKQUOTE></PRE>
/// Element "TaxAmount" of XSD type "urn:ebay:apis:CoreComponentTypes":BasicAmountType.
    ns2__BasicAmountType*                TaxAmount                      0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief "urn:ebay:apis:eBLBaseComponents":ScheduleDetailsType is a complexType.
///
/// class ns3__ScheduleDetailsType operations:
/// - ns3__ScheduleDetailsType* soap_new_ns3__ScheduleDetailsType(soap*) allocate and default initialize
/// - ns3__ScheduleDetailsType* soap_new_ns3__ScheduleDetailsType(soap*, int num) allocate array and default initialize values
/// - ns3__ScheduleDetailsType* soap_new_req_ns3__ScheduleDetailsType(soap*, ...) allocate, set required members
/// - ns3__ScheduleDetailsType* soap_new_set_ns3__ScheduleDetailsType(soap*, ...) allocate, set all public members
/// - ns3__ScheduleDetailsType::soap_default(soap*) default initialize members
/// - int soap_read_ns3__ScheduleDetailsType(soap*, ns3__ScheduleDetailsType*) deserialize from a stream
/// - int soap_write_ns3__ScheduleDetailsType(soap*, ns3__ScheduleDetailsType*) serialize to a stream
/// - ns3__ScheduleDetailsType* ns3__ScheduleDetailsType::soap_dup(soap*) returns deep copy of ns3__ScheduleDetailsType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns3__ScheduleDetailsType::soap_del() deep deletes ns3__ScheduleDetailsType data members, use only after ns3__ScheduleDetailsType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns3__ScheduleDetailsType
{ public:
/// <PRE><BLOCKQUOTE>
///   Schedule details for the Recurring Payment
/// </BLOCKQUOTE></PRE>
/// Element "Description" of XSD type xs:string.
    std::string                          Description                    1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Trial period of this schedule
/// </BLOCKQUOTE></PRE>
/// Element "TrialPeriod" of XSD type "urn:ebay:apis:eBLBaseComponents":BillingPeriodDetailsType.
    ns3__BillingPeriodDetailsType*       TrialPeriod                    0;	///< Optional element.

/// </BLOCKQUOTE></PRE>
/// Element "PaymentPeriod" of XSD type "urn:ebay:apis:eBLBaseComponents":BillingPeriodDetailsType.
    ns3__BillingPeriodDetailsType*       PaymentPeriod                  1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   The max number of payments the buyer can fail before this Recurring Payments profile is cancelled
/// </BLOCKQUOTE></PRE>
/// Element "MaxFailedPayments" of XSD type xs:int.
    int*                                 MaxFailedPayments              0;	///< Optional element.

/// </BLOCKQUOTE></PRE>
/// Element "ActivationDetails" of XSD type "urn:ebay:apis:eBLBaseComponents":ActivationDetailsType.
    ns3__ActivationDetailsType*          ActivationDetails              0;	///< Optional element.

/// </BLOCKQUOTE></PRE>
/// Element "AutoBillOutstandingAmount" of XSD type "urn:ebay:apis:eBLBaseComponents":AutoBillType.
    enum ns3__AutoBillType*              AutoBillOutstandingAmount      0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief "urn:ebay:apis:eBLBaseComponents":RecurringPaymentsProfileDetailsType is a complexType.
///
/// class ns3__RecurringPaymentsProfileDetailsType operations:
/// - ns3__RecurringPaymentsProfileDetailsType* soap_new_ns3__RecurringPaymentsProfileDetailsType(soap*) allocate and default initialize
/// - ns3__RecurringPaymentsProfileDetailsType* soap_new_ns3__RecurringPaymentsProfileDetailsType(soap*, int num) allocate array and default initialize values
/// - ns3__RecurringPaymentsProfileDetailsType* soap_new_req_ns3__RecurringPaymentsProfileDetailsType(soap*, ...) allocate, set required members
/// - ns3__RecurringPaymentsProfileDetailsType* soap_new_set_ns3__RecurringPaymentsProfileDetailsType(soap*, ...) allocate, set all public members
/// - ns3__RecurringPaymentsProfileDetailsType::soap_default(soap*) default initialize members
/// - int soap_read_ns3__RecurringPaymentsProfileDetailsType(soap*, ns3__RecurringPaymentsProfileDetailsType*) deserialize from a stream
/// - int soap_write_ns3__RecurringPaymentsProfileDetailsType(soap*, ns3__RecurringPaymentsProfileDetailsType*) serialize to a stream
/// - ns3__RecurringPaymentsProfileDetailsType* ns3__RecurringPaymentsProfileDetailsType::soap_dup(soap*) returns deep copy of ns3__RecurringPaymentsProfileDetailsType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns3__RecurringPaymentsProfileDetailsType::soap_del() deep deletes ns3__RecurringPaymentsProfileDetailsType data members, use only after ns3__RecurringPaymentsProfileDetailsType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns3__RecurringPaymentsProfileDetailsType
{ public:
/// <PRE><BLOCKQUOTE>
///   Subscriber name - if missing, will use name in buyer's account
/// </BLOCKQUOTE></PRE>
/// Element "SubscriberName" of XSD type xs:string.
    std::string*                         SubscriberName                 0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Subscriber address - if missing, will use address in buyer's account
/// </BLOCKQUOTE></PRE>
/// Element "SubscriberShippingAddress" of XSD type "urn:ebay:apis:eBLBaseComponents":AddressType.
    ns3__AddressType*                    SubscriberShippingAddress      0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   When does this Profile begin billing?
/// </BLOCKQUOTE></PRE>
/// Element "BillingStartDate" of XSD type xs:dateTime.
    time_t                               BillingStartDate               1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Your own unique invoice or tracking number.
///   <br/>
///   <br/>
///   Optional
///   <br/>
///   <br/>Character length and limitations: 127 single-byte alphanumeric characters
/// </BLOCKQUOTE></PRE>
/// Element "ProfileReference" of XSD type xs:string.
    std::string*                         ProfileReference               0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief "urn:ebay:apis:eBLBaseComponents":CreateRecurringPaymentsProfileRequestDetailsType is a complexType.
///
/// class ns3__CreateRecurringPaymentsProfileRequestDetailsType operations:
/// - ns3__CreateRecurringPaymentsProfileRequestDetailsType* soap_new_ns3__CreateRecurringPaymentsProfileRequestDetailsType(soap*) allocate and default initialize
/// - ns3__CreateRecurringPaymentsProfileRequestDetailsType* soap_new_ns3__CreateRecurringPaymentsProfileRequestDetailsType(soap*, int num) allocate array and default initialize values
/// - ns3__CreateRecurringPaymentsProfileRequestDetailsType* soap_new_req_ns3__CreateRecurringPaymentsProfileRequestDetailsType(soap*, ...) allocate, set required members
/// - ns3__CreateRecurringPaymentsProfileRequestDetailsType* soap_new_set_ns3__CreateRecurringPaymentsProfileRequestDetailsType(soap*, ...) allocate, set all public members
/// - ns3__CreateRecurringPaymentsProfileRequestDetailsType::soap_default(soap*) default initialize members
/// - int soap_read_ns3__CreateRecurringPaymentsProfileRequestDetailsType(soap*, ns3__CreateRecurringPaymentsProfileRequestDetailsType*) deserialize from a stream
/// - int soap_write_ns3__CreateRecurringPaymentsProfileRequestDetailsType(soap*, ns3__CreateRecurringPaymentsProfileRequestDetailsType*) serialize to a stream
/// - ns3__CreateRecurringPaymentsProfileRequestDetailsType* ns3__CreateRecurringPaymentsProfileRequestDetailsType::soap_dup(soap*) returns deep copy of ns3__CreateRecurringPaymentsProfileRequestDetailsType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns3__CreateRecurringPaymentsProfileRequestDetailsType::soap_del() deep deletes ns3__CreateRecurringPaymentsProfileRequestDetailsType data members, use only after ns3__CreateRecurringPaymentsProfileRequestDetailsType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns3__CreateRecurringPaymentsProfileRequestDetailsType
{ public:
/// <PRE><BLOCKQUOTE>
///   Billing Agreement token (required if Express Checkout)
/// </BLOCKQUOTE></PRE>
/// Element "Token" of XSD type xs:string.
    std::string*                         Token                          0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Information about the credit card to be charged (required if Direct Payment)
/// </BLOCKQUOTE></PRE>
/// Element "CreditCard" of XSD type "urn:ebay:apis:eBLBaseComponents":CreditCardDetailsType.
    ns3__CreditCardDetailsType*          CreditCard                     0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Customer Information for this Recurring Payments
/// </BLOCKQUOTE></PRE>
/// Element "RecurringPaymentsProfileDetails" of XSD type "urn:ebay:apis:eBLBaseComponents":RecurringPaymentsProfileDetailsType.
    ns3__RecurringPaymentsProfileDetailsType*  RecurringPaymentsProfileDetails 1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Schedule Information for this Recurring Payments
/// </BLOCKQUOTE></PRE>
/// Element "ScheduleDetails" of XSD type "urn:ebay:apis:eBLBaseComponents":ScheduleDetailsType.
    ns3__ScheduleDetailsType*            ScheduleDetails                1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Information about the Item Details.
/// </BLOCKQUOTE></PRE>
/// Vector of ns3__PaymentDetailsItemType* of length 0..unbounded.
    std::vector<ns3__PaymentDetailsItemType*> PaymentDetailsItem             0;	///< Elements.
/// <PRE><BLOCKQUOTE>
///   Use this optional parameter to pass in your business name and other data describing the transaction.<br/>
///   <br/>Optional<br/>
///   This information is usually displayed in the CC account holder's statement.<br/>
///   Example: RedCross Haiti, RedCross Uganda, Realtor.com dues, Realtor.com list fee<br/>
///   Length 25 characters. Alphanumeric characters and dash(-), dot(.), asterisk(*), space( )<br/>
///   On the customer's statement, an asterisk is used to separate the DBA name and product name.
///   The asterisk delimiter can appear in position 4, 8, or 13.
/// </BLOCKQUOTE></PRE>
/// Element "SoftDescriptor" of XSD type xs:string.
    std::string*                         SoftDescriptor                 0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Use this optional parameter to pass information about how consumer should contact the merchant.<br/>
///   <br/>Optional<br/>
///   This information is usually displayed in the CC account holder's statement.<br/>
///   For Ecom trx: phone, email or URL is allowed<br/>
///   For Retail trx: only the actual city is allowed<br/>
///   For details on allowed characters in Soft Descriptor City refer to the API documentation.
/// </BLOCKQUOTE></PRE>
/// Element "SoftDescriptorCity" of XSD type xs:string.
    std::string*                         SoftDescriptorCity             0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief "urn:ebay:apis:eBLBaseComponents":CreateRecurringPaymentsProfileResponseDetailsType is a complexType.
///
/// class ns3__CreateRecurringPaymentsProfileResponseDetailsType operations:
/// - ns3__CreateRecurringPaymentsProfileResponseDetailsType* soap_new_ns3__CreateRecurringPaymentsProfileResponseDetailsType(soap*) allocate and default initialize
/// - ns3__CreateRecurringPaymentsProfileResponseDetailsType* soap_new_ns3__CreateRecurringPaymentsProfileResponseDetailsType(soap*, int num) allocate array and default initialize values
/// - ns3__CreateRecurringPaymentsProfileResponseDetailsType* soap_new_req_ns3__CreateRecurringPaymentsProfileResponseDetailsType(soap*, ...) allocate, set required members
/// - ns3__CreateRecurringPaymentsProfileResponseDetailsType* soap_new_set_ns3__CreateRecurringPaymentsProfileResponseDetailsType(soap*, ...) allocate, set all public members
/// - ns3__CreateRecurringPaymentsProfileResponseDetailsType::soap_default(soap*) default initialize members
/// - int soap_read_ns3__CreateRecurringPaymentsProfileResponseDetailsType(soap*, ns3__CreateRecurringPaymentsProfileResponseDetailsType*) deserialize from a stream
/// - int soap_write_ns3__CreateRecurringPaymentsProfileResponseDetailsType(soap*, ns3__CreateRecurringPaymentsProfileResponseDetailsType*) serialize to a stream
/// - ns3__CreateRecurringPaymentsProfileResponseDetailsType* ns3__CreateRecurringPaymentsProfileResponseDetailsType::soap_dup(soap*) returns deep copy of ns3__CreateRecurringPaymentsProfileResponseDetailsType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns3__CreateRecurringPaymentsProfileResponseDetailsType::soap_del() deep deletes ns3__CreateRecurringPaymentsProfileResponseDetailsType data members, use only after ns3__CreateRecurringPaymentsProfileResponseDetailsType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns3__CreateRecurringPaymentsProfileResponseDetailsType
{ public:
/// <PRE><BLOCKQUOTE>
///   Recurring Billing Profile ID
/// </BLOCKQUOTE></PRE>
/// Element "ProfileID" of XSD type xs:string.
    std::string                          ProfileID                      1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Recurring Billing Profile Status
/// </BLOCKQUOTE></PRE>
/// Element "ProfileStatus" of XSD type "urn:ebay:apis:eBLBaseComponents":RecurringPaymentsProfileStatusType.
    enum ns3__RecurringPaymentsProfileStatusType*  ProfileStatus                  0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Transaction id from DCC initial payment
/// </BLOCKQUOTE></PRE>
/// Element "TransactionID" of XSD type xs:string.
    std::string*                         TransactionID                  0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Response from DCC initial payment
/// </BLOCKQUOTE></PRE>
/// Element "DCCProcessorResponse" of XSD type xs:string.
    std::string*                         DCCProcessorResponse           0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Return code if DCC initial payment fails
/// </BLOCKQUOTE></PRE>
/// Element "DCCReturnCode" of XSD type xs:string.
    std::string*                         DCCReturnCode                  0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Interchange Plus Pricing pending reason
/// </BLOCKQUOTE></PRE>
/// Element "PendingReason" of XSD type xs:string.
    std::string*                         PendingReason                  0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief "urn:ebay:apis:eBLBaseComponents":GetRecurringPaymentsProfileDetailsResponseDetailsType is a complexType.
///
/// class ns3__GetRecurringPaymentsProfileDetailsResponseDetailsType operations:
/// - ns3__GetRecurringPaymentsProfileDetailsResponseDetailsType* soap_new_ns3__GetRecurringPaymentsProfileDetailsResponseDetailsType(soap*) allocate and default initialize
/// - ns3__GetRecurringPaymentsProfileDetailsResponseDetailsType* soap_new_ns3__GetRecurringPaymentsProfileDetailsResponseDetailsType(soap*, int num) allocate array and default initialize values
/// - ns3__GetRecurringPaymentsProfileDetailsResponseDetailsType* soap_new_req_ns3__GetRecurringPaymentsProfileDetailsResponseDetailsType(soap*, ...) allocate, set required members
/// - ns3__GetRecurringPaymentsProfileDetailsResponseDetailsType* soap_new_set_ns3__GetRecurringPaymentsProfileDetailsResponseDetailsType(soap*, ...) allocate, set all public members
/// - ns3__GetRecurringPaymentsProfileDetailsResponseDetailsType::soap_default(soap*) default initialize members
/// - int soap_read_ns3__GetRecurringPaymentsProfileDetailsResponseDetailsType(soap*, ns3__GetRecurringPaymentsProfileDetailsResponseDetailsType*) deserialize from a stream
/// - int soap_write_ns3__GetRecurringPaymentsProfileDetailsResponseDetailsType(soap*, ns3__GetRecurringPaymentsProfileDetailsResponseDetailsType*) serialize to a stream
/// - ns3__GetRecurringPaymentsProfileDetailsResponseDetailsType* ns3__GetRecurringPaymentsProfileDetailsResponseDetailsType::soap_dup(soap*) returns deep copy of ns3__GetRecurringPaymentsProfileDetailsResponseDetailsType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns3__GetRecurringPaymentsProfileDetailsResponseDetailsType::soap_del() deep deletes ns3__GetRecurringPaymentsProfileDetailsResponseDetailsType data members, use only after ns3__GetRecurringPaymentsProfileDetailsResponseDetailsType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns3__GetRecurringPaymentsProfileDetailsResponseDetailsType
{ public:
/// <PRE><BLOCKQUOTE>
///   Recurring Billing Profile ID
/// </BLOCKQUOTE></PRE>
/// Element "ProfileID" of XSD type xs:string.
    std::string                          ProfileID                      1;	///< Required element.

/// </BLOCKQUOTE></PRE>
/// Element "ProfileStatus" of XSD type "urn:ebay:apis:eBLBaseComponents":RecurringPaymentsProfileStatusType.
    enum ns3__RecurringPaymentsProfileStatusType  ProfileStatus                  1;	///< Required element.

/// </BLOCKQUOTE></PRE>
/// Element "Description" of XSD type xs:string.
    std::string                          Description                    1;	///< Required element.

/// </BLOCKQUOTE></PRE>
/// Element "AutoBillOutstandingAmount" of XSD type "urn:ebay:apis:eBLBaseComponents":AutoBillType.
    enum ns3__AutoBillType               AutoBillOutstandingAmount      1;	///< Required element.

/// </BLOCKQUOTE></PRE>
/// Element "MaxFailedPayments" of XSD type xs:int.
    int                                  MaxFailedPayments              1;	///< Required element.

/// </BLOCKQUOTE></PRE>
/// Element "RecurringPaymentsProfileDetails" of XSD type "urn:ebay:apis:eBLBaseComponents":RecurringPaymentsProfileDetailsType.
    ns3__RecurringPaymentsProfileDetailsType*  RecurringPaymentsProfileDetails 1;	///< Required element.

/// </BLOCKQUOTE></PRE>
/// Element "CurrentRecurringPaymentsPeriod" of XSD type "urn:ebay:apis:eBLBaseComponents":BillingPeriodDetailsType.
    ns3__BillingPeriodDetailsType*       CurrentRecurringPaymentsPeriod 0;	///< Optional element.

/// </BLOCKQUOTE></PRE>
/// Element "RecurringPaymentsSummary" of XSD type "urn:ebay:apis:eBLBaseComponents":RecurringPaymentsSummaryType.
    ns3__RecurringPaymentsSummaryType*   RecurringPaymentsSummary       1;	///< Required element.

/// </BLOCKQUOTE></PRE>
/// Element "CreditCard" of XSD type "urn:ebay:apis:eBLBaseComponents":CreditCardDetailsType.
    ns3__CreditCardDetailsType*          CreditCard                     0;	///< Optional element.

/// </BLOCKQUOTE></PRE>
/// Element "TrialRecurringPaymentsPeriod" of XSD type "urn:ebay:apis:eBLBaseComponents":BillingPeriodDetailsType.
    ns3__BillingPeriodDetailsType*       TrialRecurringPaymentsPeriod   0;	///< Optional element.

/// </BLOCKQUOTE></PRE>
/// Element "RegularRecurringPaymentsPeriod" of XSD type "urn:ebay:apis:eBLBaseComponents":BillingPeriodDetailsType.
    ns3__BillingPeriodDetailsType*       RegularRecurringPaymentsPeriod 0;	///< Optional element.

/// </BLOCKQUOTE></PRE>
/// Element "TrialAmountPaid" of XSD type "urn:ebay:apis:CoreComponentTypes":BasicAmountType.
    ns2__BasicAmountType*                TrialAmountPaid                0;	///< Optional element.

/// </BLOCKQUOTE></PRE>
/// Element "RegularAmountPaid" of XSD type "urn:ebay:apis:CoreComponentTypes":BasicAmountType.
    ns2__BasicAmountType*                RegularAmountPaid              0;	///< Optional element.

/// </BLOCKQUOTE></PRE>
/// Element "AggregateAmount" of XSD type "urn:ebay:apis:CoreComponentTypes":BasicAmountType.
    ns2__BasicAmountType*                AggregateAmount                0;	///< Optional element.

/// </BLOCKQUOTE></PRE>
/// Element "AggregateOptionalAmount" of XSD type "urn:ebay:apis:CoreComponentTypes":BasicAmountType.
    ns2__BasicAmountType*                AggregateOptionalAmount        0;	///< Optional element.

/// </BLOCKQUOTE></PRE>
/// Element "FinalPaymentDueDate" of XSD type xs:dateTime.
    time_t*                              FinalPaymentDueDate            0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Use this optional parameter to pass in your business name and other data describing the transaction.<br/>
///   <br/>Optional<br/>
///   This information is usually displayed in the account holder's statement.<br/>
///   Example: RedCross Haiti, RedCross Uganda, Realtor.com dues, Realtor.com list fee<br/>
///   Length 25 characters. Alphanumeric characters and dash(-), dot(.), asterisk(*), space( )<br/>
///   On the customer's statement, an asterisk is used to separate the DBA name and product name.
///   The asterisk delimiter can appear in position 4, 8, or 13.
/// </BLOCKQUOTE></PRE>
/// Element "SoftDescriptor" of XSD type xs:string.
    std::string*                         SoftDescriptor                 0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Use this optional parameter to pass information about how consumer should contact the merchant.<br/>
///   <br/>Optional<br/>
///   This information is usually displayed in the account holder's statement.<br/>
///   For Ecom trx: phone, email or URL is allowed<br/>
///   For Retail trx: only the actual city is allowed<br/>
///   For details on allowed characters in Soft Descriptor City refer to the API documentation.
/// </BLOCKQUOTE></PRE>
/// Element "SoftDescriptorCity" of XSD type xs:string.
    std::string*                         SoftDescriptorCity             0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief "urn:ebay:apis:eBLBaseComponents":ManageRecurringPaymentsProfileStatusRequestDetailsType is a complexType.
///
/// class ns3__ManageRecurringPaymentsProfileStatusRequestDetailsType operations:
/// - ns3__ManageRecurringPaymentsProfileStatusRequestDetailsType* soap_new_ns3__ManageRecurringPaymentsProfileStatusRequestDetailsType(soap*) allocate and default initialize
/// - ns3__ManageRecurringPaymentsProfileStatusRequestDetailsType* soap_new_ns3__ManageRecurringPaymentsProfileStatusRequestDetailsType(soap*, int num) allocate array and default initialize values
/// - ns3__ManageRecurringPaymentsProfileStatusRequestDetailsType* soap_new_req_ns3__ManageRecurringPaymentsProfileStatusRequestDetailsType(soap*, ...) allocate, set required members
/// - ns3__ManageRecurringPaymentsProfileStatusRequestDetailsType* soap_new_set_ns3__ManageRecurringPaymentsProfileStatusRequestDetailsType(soap*, ...) allocate, set all public members
/// - ns3__ManageRecurringPaymentsProfileStatusRequestDetailsType::soap_default(soap*) default initialize members
/// - int soap_read_ns3__ManageRecurringPaymentsProfileStatusRequestDetailsType(soap*, ns3__ManageRecurringPaymentsProfileStatusRequestDetailsType*) deserialize from a stream
/// - int soap_write_ns3__ManageRecurringPaymentsProfileStatusRequestDetailsType(soap*, ns3__ManageRecurringPaymentsProfileStatusRequestDetailsType*) serialize to a stream
/// - ns3__ManageRecurringPaymentsProfileStatusRequestDetailsType* ns3__ManageRecurringPaymentsProfileStatusRequestDetailsType::soap_dup(soap*) returns deep copy of ns3__ManageRecurringPaymentsProfileStatusRequestDetailsType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns3__ManageRecurringPaymentsProfileStatusRequestDetailsType::soap_del() deep deletes ns3__ManageRecurringPaymentsProfileStatusRequestDetailsType data members, use only after ns3__ManageRecurringPaymentsProfileStatusRequestDetailsType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns3__ManageRecurringPaymentsProfileStatusRequestDetailsType
{ public:

/// </BLOCKQUOTE></PRE>
/// Element "ProfileID" of XSD type xs:string.
    std::string                          ProfileID                      1;	///< Required element.

/// </BLOCKQUOTE></PRE>
/// Element "Action" of XSD type "urn:ebay:apis:eBLBaseComponents":StatusChangeActionType.
    enum ns3__StatusChangeActionType     Action                         1;	///< Required element.

/// </BLOCKQUOTE></PRE>
/// Element "Note" of XSD type xs:string.
    std::string*                         Note                           0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief "urn:ebay:apis:eBLBaseComponents":ManageRecurringPaymentsProfileStatusResponseDetailsType is a complexType.
///
/// class ns3__ManageRecurringPaymentsProfileStatusResponseDetailsType operations:
/// - ns3__ManageRecurringPaymentsProfileStatusResponseDetailsType* soap_new_ns3__ManageRecurringPaymentsProfileStatusResponseDetailsType(soap*) allocate and default initialize
/// - ns3__ManageRecurringPaymentsProfileStatusResponseDetailsType* soap_new_ns3__ManageRecurringPaymentsProfileStatusResponseDetailsType(soap*, int num) allocate array and default initialize values
/// - ns3__ManageRecurringPaymentsProfileStatusResponseDetailsType* soap_new_req_ns3__ManageRecurringPaymentsProfileStatusResponseDetailsType(soap*, ...) allocate, set required members
/// - ns3__ManageRecurringPaymentsProfileStatusResponseDetailsType* soap_new_set_ns3__ManageRecurringPaymentsProfileStatusResponseDetailsType(soap*, ...) allocate, set all public members
/// - ns3__ManageRecurringPaymentsProfileStatusResponseDetailsType::soap_default(soap*) default initialize members
/// - int soap_read_ns3__ManageRecurringPaymentsProfileStatusResponseDetailsType(soap*, ns3__ManageRecurringPaymentsProfileStatusResponseDetailsType*) deserialize from a stream
/// - int soap_write_ns3__ManageRecurringPaymentsProfileStatusResponseDetailsType(soap*, ns3__ManageRecurringPaymentsProfileStatusResponseDetailsType*) serialize to a stream
/// - ns3__ManageRecurringPaymentsProfileStatusResponseDetailsType* ns3__ManageRecurringPaymentsProfileStatusResponseDetailsType::soap_dup(soap*) returns deep copy of ns3__ManageRecurringPaymentsProfileStatusResponseDetailsType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns3__ManageRecurringPaymentsProfileStatusResponseDetailsType::soap_del() deep deletes ns3__ManageRecurringPaymentsProfileStatusResponseDetailsType data members, use only after ns3__ManageRecurringPaymentsProfileStatusResponseDetailsType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns3__ManageRecurringPaymentsProfileStatusResponseDetailsType
{ public:

/// </BLOCKQUOTE></PRE>
/// Element "ProfileID" of XSD type xs:string.
    std::string                          ProfileID                      1;	///< Required element.
    struct soap                         *soap                          ;
};

/// @brief "urn:ebay:apis:eBLBaseComponents":BillOutstandingAmountRequestDetailsType is a complexType.
///
/// class ns3__BillOutstandingAmountRequestDetailsType operations:
/// - ns3__BillOutstandingAmountRequestDetailsType* soap_new_ns3__BillOutstandingAmountRequestDetailsType(soap*) allocate and default initialize
/// - ns3__BillOutstandingAmountRequestDetailsType* soap_new_ns3__BillOutstandingAmountRequestDetailsType(soap*, int num) allocate array and default initialize values
/// - ns3__BillOutstandingAmountRequestDetailsType* soap_new_req_ns3__BillOutstandingAmountRequestDetailsType(soap*, ...) allocate, set required members
/// - ns3__BillOutstandingAmountRequestDetailsType* soap_new_set_ns3__BillOutstandingAmountRequestDetailsType(soap*, ...) allocate, set all public members
/// - ns3__BillOutstandingAmountRequestDetailsType::soap_default(soap*) default initialize members
/// - int soap_read_ns3__BillOutstandingAmountRequestDetailsType(soap*, ns3__BillOutstandingAmountRequestDetailsType*) deserialize from a stream
/// - int soap_write_ns3__BillOutstandingAmountRequestDetailsType(soap*, ns3__BillOutstandingAmountRequestDetailsType*) serialize to a stream
/// - ns3__BillOutstandingAmountRequestDetailsType* ns3__BillOutstandingAmountRequestDetailsType::soap_dup(soap*) returns deep copy of ns3__BillOutstandingAmountRequestDetailsType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns3__BillOutstandingAmountRequestDetailsType::soap_del() deep deletes ns3__BillOutstandingAmountRequestDetailsType data members, use only after ns3__BillOutstandingAmountRequestDetailsType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns3__BillOutstandingAmountRequestDetailsType
{ public:

/// </BLOCKQUOTE></PRE>
/// Element "ProfileID" of XSD type xs:string.
    std::string                          ProfileID                      1;	///< Required element.

/// </BLOCKQUOTE></PRE>
/// Element "Amount" of XSD type "urn:ebay:apis:CoreComponentTypes":BasicAmountType.
    ns2__BasicAmountType*                Amount                         0;	///< Optional element.

/// </BLOCKQUOTE></PRE>
/// Element "Note" of XSD type xs:string.
    std::string*                         Note                           0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief "urn:ebay:apis:eBLBaseComponents":BillOutstandingAmountResponseDetailsType is a complexType.
///
/// class ns3__BillOutstandingAmountResponseDetailsType operations:
/// - ns3__BillOutstandingAmountResponseDetailsType* soap_new_ns3__BillOutstandingAmountResponseDetailsType(soap*) allocate and default initialize
/// - ns3__BillOutstandingAmountResponseDetailsType* soap_new_ns3__BillOutstandingAmountResponseDetailsType(soap*, int num) allocate array and default initialize values
/// - ns3__BillOutstandingAmountResponseDetailsType* soap_new_req_ns3__BillOutstandingAmountResponseDetailsType(soap*, ...) allocate, set required members
/// - ns3__BillOutstandingAmountResponseDetailsType* soap_new_set_ns3__BillOutstandingAmountResponseDetailsType(soap*, ...) allocate, set all public members
/// - ns3__BillOutstandingAmountResponseDetailsType::soap_default(soap*) default initialize members
/// - int soap_read_ns3__BillOutstandingAmountResponseDetailsType(soap*, ns3__BillOutstandingAmountResponseDetailsType*) deserialize from a stream
/// - int soap_write_ns3__BillOutstandingAmountResponseDetailsType(soap*, ns3__BillOutstandingAmountResponseDetailsType*) serialize to a stream
/// - ns3__BillOutstandingAmountResponseDetailsType* ns3__BillOutstandingAmountResponseDetailsType::soap_dup(soap*) returns deep copy of ns3__BillOutstandingAmountResponseDetailsType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns3__BillOutstandingAmountResponseDetailsType::soap_del() deep deletes ns3__BillOutstandingAmountResponseDetailsType data members, use only after ns3__BillOutstandingAmountResponseDetailsType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns3__BillOutstandingAmountResponseDetailsType
{ public:

/// </BLOCKQUOTE></PRE>
/// Element "ProfileID" of XSD type xs:string.
    std::string                          ProfileID                      1;	///< Required element.
    struct soap                         *soap                          ;
};

/// @brief "urn:ebay:apis:eBLBaseComponents":UpdateRecurringPaymentsProfileRequestDetailsType is a complexType.
///
/// class ns3__UpdateRecurringPaymentsProfileRequestDetailsType operations:
/// - ns3__UpdateRecurringPaymentsProfileRequestDetailsType* soap_new_ns3__UpdateRecurringPaymentsProfileRequestDetailsType(soap*) allocate and default initialize
/// - ns3__UpdateRecurringPaymentsProfileRequestDetailsType* soap_new_ns3__UpdateRecurringPaymentsProfileRequestDetailsType(soap*, int num) allocate array and default initialize values
/// - ns3__UpdateRecurringPaymentsProfileRequestDetailsType* soap_new_req_ns3__UpdateRecurringPaymentsProfileRequestDetailsType(soap*, ...) allocate, set required members
/// - ns3__UpdateRecurringPaymentsProfileRequestDetailsType* soap_new_set_ns3__UpdateRecurringPaymentsProfileRequestDetailsType(soap*, ...) allocate, set all public members
/// - ns3__UpdateRecurringPaymentsProfileRequestDetailsType::soap_default(soap*) default initialize members
/// - int soap_read_ns3__UpdateRecurringPaymentsProfileRequestDetailsType(soap*, ns3__UpdateRecurringPaymentsProfileRequestDetailsType*) deserialize from a stream
/// - int soap_write_ns3__UpdateRecurringPaymentsProfileRequestDetailsType(soap*, ns3__UpdateRecurringPaymentsProfileRequestDetailsType*) serialize to a stream
/// - ns3__UpdateRecurringPaymentsProfileRequestDetailsType* ns3__UpdateRecurringPaymentsProfileRequestDetailsType::soap_dup(soap*) returns deep copy of ns3__UpdateRecurringPaymentsProfileRequestDetailsType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns3__UpdateRecurringPaymentsProfileRequestDetailsType::soap_del() deep deletes ns3__UpdateRecurringPaymentsProfileRequestDetailsType data members, use only after ns3__UpdateRecurringPaymentsProfileRequestDetailsType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns3__UpdateRecurringPaymentsProfileRequestDetailsType
{ public:

/// </BLOCKQUOTE></PRE>
/// Element "ProfileID" of XSD type xs:string.
    std::string                          ProfileID                      1;	///< Required element.

/// </BLOCKQUOTE></PRE>
/// Element "Note" of XSD type xs:string.
    std::string*                         Note                           0;	///< Optional element.

/// </BLOCKQUOTE></PRE>
/// Element "Description" of XSD type xs:string.
    std::string*                         Description                    0;	///< Optional element.

/// </BLOCKQUOTE></PRE>
/// Element "SubscriberName" of XSD type xs:string.
    std::string*                         SubscriberName                 0;	///< Optional element.

/// </BLOCKQUOTE></PRE>
/// Element "SubscriberShippingAddress" of XSD type "urn:ebay:apis:eBLBaseComponents":AddressType.
    ns3__AddressType*                    SubscriberShippingAddress      0;	///< Optional element.

/// </BLOCKQUOTE></PRE>
/// Element "ProfileReference" of XSD type xs:string.
    std::string*                         ProfileReference               0;	///< Optional element.

/// </BLOCKQUOTE></PRE>
/// Element "AdditionalBillingCycles" of XSD type xs:int.
    int*                                 AdditionalBillingCycles        0;	///< Optional element.

/// </BLOCKQUOTE></PRE>
/// Element "Amount" of XSD type "urn:ebay:apis:CoreComponentTypes":BasicAmountType.
    ns2__BasicAmountType*                Amount                         0;	///< Optional element.

/// </BLOCKQUOTE></PRE>
/// Element "ShippingAmount" of XSD type "urn:ebay:apis:CoreComponentTypes":BasicAmountType.
    ns2__BasicAmountType*                ShippingAmount                 0;	///< Optional element.

/// </BLOCKQUOTE></PRE>
/// Element "TaxAmount" of XSD type "urn:ebay:apis:CoreComponentTypes":BasicAmountType.
    ns2__BasicAmountType*                TaxAmount                      0;	///< Optional element.

/// </BLOCKQUOTE></PRE>
/// Element "OutstandingBalance" of XSD type "urn:ebay:apis:CoreComponentTypes":BasicAmountType.
    ns2__BasicAmountType*                OutstandingBalance             0;	///< Optional element.

/// </BLOCKQUOTE></PRE>
/// Element "AutoBillOutstandingAmount" of XSD type "urn:ebay:apis:eBLBaseComponents":AutoBillType.
    enum ns3__AutoBillType*              AutoBillOutstandingAmount      0;	///< Optional element.

/// </BLOCKQUOTE></PRE>
/// Element "MaxFailedPayments" of XSD type xs:int.
    int*                                 MaxFailedPayments              0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Information about the credit card to be charged (required if Direct Payment)
/// </BLOCKQUOTE></PRE>
/// Element "CreditCard" of XSD type "urn:ebay:apis:eBLBaseComponents":CreditCardDetailsType.
    ns3__CreditCardDetailsType*          CreditCard                     0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   When does this Profile begin billing?
/// </BLOCKQUOTE></PRE>
/// Element "BillingStartDate" of XSD type xs:dateTime.
    time_t*                              BillingStartDate               0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Trial period of this schedule
/// </BLOCKQUOTE></PRE>
/// Element "TrialPeriod" of XSD type "urn:ebay:apis:eBLBaseComponents":BillingPeriodDetailsType_Update.
    ns3__BillingPeriodDetailsType_USCOREUpdate*  TrialPeriod                    0;	///< Optional element.

/// </BLOCKQUOTE></PRE>
/// Element "PaymentPeriod" of XSD type "urn:ebay:apis:eBLBaseComponents":BillingPeriodDetailsType_Update.
    ns3__BillingPeriodDetailsType_USCOREUpdate*  PaymentPeriod                  0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief "urn:ebay:apis:eBLBaseComponents":UpdateRecurringPaymentsProfileResponseDetailsType is a complexType.
///
/// class ns3__UpdateRecurringPaymentsProfileResponseDetailsType operations:
/// - ns3__UpdateRecurringPaymentsProfileResponseDetailsType* soap_new_ns3__UpdateRecurringPaymentsProfileResponseDetailsType(soap*) allocate and default initialize
/// - ns3__UpdateRecurringPaymentsProfileResponseDetailsType* soap_new_ns3__UpdateRecurringPaymentsProfileResponseDetailsType(soap*, int num) allocate array and default initialize values
/// - ns3__UpdateRecurringPaymentsProfileResponseDetailsType* soap_new_req_ns3__UpdateRecurringPaymentsProfileResponseDetailsType(soap*, ...) allocate, set required members
/// - ns3__UpdateRecurringPaymentsProfileResponseDetailsType* soap_new_set_ns3__UpdateRecurringPaymentsProfileResponseDetailsType(soap*, ...) allocate, set all public members
/// - ns3__UpdateRecurringPaymentsProfileResponseDetailsType::soap_default(soap*) default initialize members
/// - int soap_read_ns3__UpdateRecurringPaymentsProfileResponseDetailsType(soap*, ns3__UpdateRecurringPaymentsProfileResponseDetailsType*) deserialize from a stream
/// - int soap_write_ns3__UpdateRecurringPaymentsProfileResponseDetailsType(soap*, ns3__UpdateRecurringPaymentsProfileResponseDetailsType*) serialize to a stream
/// - ns3__UpdateRecurringPaymentsProfileResponseDetailsType* ns3__UpdateRecurringPaymentsProfileResponseDetailsType::soap_dup(soap*) returns deep copy of ns3__UpdateRecurringPaymentsProfileResponseDetailsType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns3__UpdateRecurringPaymentsProfileResponseDetailsType::soap_del() deep deletes ns3__UpdateRecurringPaymentsProfileResponseDetailsType data members, use only after ns3__UpdateRecurringPaymentsProfileResponseDetailsType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns3__UpdateRecurringPaymentsProfileResponseDetailsType
{ public:

/// </BLOCKQUOTE></PRE>
/// Element "ProfileID" of XSD type xs:string.
    std::string                          ProfileID                      1;	///< Required element.
    struct soap                         *soap                          ;
};

/// @brief "urn:ebay:apis:eBLBaseComponents":RiskFilterDetailsType is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   Details of Risk Filter.
/// </BLOCKQUOTE></PRE>
/// class ns3__RiskFilterDetailsType operations:
/// - ns3__RiskFilterDetailsType* soap_new_ns3__RiskFilterDetailsType(soap*) allocate and default initialize
/// - ns3__RiskFilterDetailsType* soap_new_ns3__RiskFilterDetailsType(soap*, int num) allocate array and default initialize values
/// - ns3__RiskFilterDetailsType* soap_new_req_ns3__RiskFilterDetailsType(soap*, ...) allocate, set required members
/// - ns3__RiskFilterDetailsType* soap_new_set_ns3__RiskFilterDetailsType(soap*, ...) allocate, set all public members
/// - ns3__RiskFilterDetailsType::soap_default(soap*) default initialize members
/// - int soap_read_ns3__RiskFilterDetailsType(soap*, ns3__RiskFilterDetailsType*) deserialize from a stream
/// - int soap_write_ns3__RiskFilterDetailsType(soap*, ns3__RiskFilterDetailsType*) serialize to a stream
/// - ns3__RiskFilterDetailsType* ns3__RiskFilterDetailsType::soap_dup(soap*) returns deep copy of ns3__RiskFilterDetailsType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns3__RiskFilterDetailsType::soap_del() deep deletes ns3__RiskFilterDetailsType data members, use only after ns3__RiskFilterDetailsType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns3__RiskFilterDetailsType
{ public:
/// Element "Id" of XSD type xs:int.
    int                                  Id                             1;	///< Required element.
/// Element "Name" of XSD type xs:string.
    std::string                          Name                           1;	///< Required element.
/// Element "Description" of XSD type xs:string.
    std::string                          Description                    1;	///< Required element.
    struct soap                         *soap                          ;
};

/// @brief "urn:ebay:apis:eBLBaseComponents":RiskFilterListType is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   Details of Risk Filter.
/// </BLOCKQUOTE></PRE>
/// class ns3__RiskFilterListType operations:
/// - ns3__RiskFilterListType* soap_new_ns3__RiskFilterListType(soap*) allocate and default initialize
/// - ns3__RiskFilterListType* soap_new_ns3__RiskFilterListType(soap*, int num) allocate array and default initialize values
/// - ns3__RiskFilterListType* soap_new_req_ns3__RiskFilterListType(soap*, ...) allocate, set required members
/// - ns3__RiskFilterListType* soap_new_set_ns3__RiskFilterListType(soap*, ...) allocate, set all public members
/// - ns3__RiskFilterListType::soap_default(soap*) default initialize members
/// - int soap_read_ns3__RiskFilterListType(soap*, ns3__RiskFilterListType*) deserialize from a stream
/// - int soap_write_ns3__RiskFilterListType(soap*, ns3__RiskFilterListType*) serialize to a stream
/// - ns3__RiskFilterListType* ns3__RiskFilterListType::soap_dup(soap*) returns deep copy of ns3__RiskFilterListType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns3__RiskFilterListType::soap_del() deep deletes ns3__RiskFilterListType data members, use only after ns3__RiskFilterListType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns3__RiskFilterListType
{ public:
/// Vector of ns3__RiskFilterDetailsType* of length 1..unbounded.
    std::vector<ns3__RiskFilterDetailsType*> Filters                        1;	///< Elements.
    struct soap                         *soap                          ;
};

/// @brief "urn:ebay:apis:eBLBaseComponents":FMFDetailsType is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   Thes are filters that could result in accept/deny/pending action.
/// </BLOCKQUOTE></PRE>
/// class ns3__FMFDetailsType operations:
/// - ns3__FMFDetailsType* soap_new_ns3__FMFDetailsType(soap*) allocate and default initialize
/// - ns3__FMFDetailsType* soap_new_ns3__FMFDetailsType(soap*, int num) allocate array and default initialize values
/// - ns3__FMFDetailsType* soap_new_req_ns3__FMFDetailsType(soap*, ...) allocate, set required members
/// - ns3__FMFDetailsType* soap_new_set_ns3__FMFDetailsType(soap*, ...) allocate, set all public members
/// - ns3__FMFDetailsType::soap_default(soap*) default initialize members
/// - int soap_read_ns3__FMFDetailsType(soap*, ns3__FMFDetailsType*) deserialize from a stream
/// - int soap_write_ns3__FMFDetailsType(soap*, ns3__FMFDetailsType*) serialize to a stream
/// - ns3__FMFDetailsType* ns3__FMFDetailsType::soap_dup(soap*) returns deep copy of ns3__FMFDetailsType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns3__FMFDetailsType::soap_del() deep deletes ns3__FMFDetailsType data members, use only after ns3__FMFDetailsType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns3__FMFDetailsType
{ public:
/// Element "AcceptFilters" of XSD type "urn:ebay:apis:eBLBaseComponents":RiskFilterListType.
    ns3__RiskFilterListType*             AcceptFilters                  0;	///< Optional element.
/// Element "PendingFilters" of XSD type "urn:ebay:apis:eBLBaseComponents":RiskFilterListType.
    ns3__RiskFilterListType*             PendingFilters                 0;	///< Optional element.
/// Element "DenyFilters" of XSD type "urn:ebay:apis:eBLBaseComponents":RiskFilterListType.
    ns3__RiskFilterListType*             DenyFilters                    0;	///< Optional element.
/// Element "ReportFilters" of XSD type "urn:ebay:apis:eBLBaseComponents":RiskFilterListType.
    ns3__RiskFilterListType*             ReportFilters                  0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief "urn:ebay:apis:eBLBaseComponents":EnhancedDataType is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   Enhanced Data Information. Example: AID for Airlines
/// </BLOCKQUOTE></PRE>
/// class ns3__EnhancedDataType operations:
/// - ns3__EnhancedDataType* soap_new_ns3__EnhancedDataType(soap*) allocate and default initialize
/// - ns3__EnhancedDataType* soap_new_ns3__EnhancedDataType(soap*, int num) allocate array and default initialize values
/// - ns3__EnhancedDataType* soap_new_req_ns3__EnhancedDataType(soap*, ...) allocate, set required members
/// - ns3__EnhancedDataType* soap_new_set_ns3__EnhancedDataType(soap*, ...) allocate, set all public members
/// - ns3__EnhancedDataType::soap_default(soap*) default initialize members
/// - int soap_read_ns3__EnhancedDataType(soap*, ns3__EnhancedDataType*) deserialize from a stream
/// - int soap_write_ns3__EnhancedDataType(soap*, ns3__EnhancedDataType*) serialize to a stream
/// - ns3__EnhancedDataType* ns3__EnhancedDataType::soap_dup(soap*) returns deep copy of ns3__EnhancedDataType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns3__EnhancedDataType::soap_del() deep deletes ns3__EnhancedDataType data members, use only after ns3__EnhancedDataType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns3__EnhancedDataType
{ public:
/// Element "AirlineItinerary" of XSD type "urn:ebay:apis:eBLBaseComponents":AirlineItineraryType.
    ns3__AirlineItineraryType*           AirlineItinerary               0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief "urn:ebay:apis:eBLBaseComponents":AirlineItineraryType is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   AID for Airlines
/// </BLOCKQUOTE></PRE>
/// class ns3__AirlineItineraryType operations:
/// - ns3__AirlineItineraryType* soap_new_ns3__AirlineItineraryType(soap*) allocate and default initialize
/// - ns3__AirlineItineraryType* soap_new_ns3__AirlineItineraryType(soap*, int num) allocate array and default initialize values
/// - ns3__AirlineItineraryType* soap_new_req_ns3__AirlineItineraryType(soap*, ...) allocate, set required members
/// - ns3__AirlineItineraryType* soap_new_set_ns3__AirlineItineraryType(soap*, ...) allocate, set all public members
/// - ns3__AirlineItineraryType::soap_default(soap*) default initialize members
/// - int soap_read_ns3__AirlineItineraryType(soap*, ns3__AirlineItineraryType*) deserialize from a stream
/// - int soap_write_ns3__AirlineItineraryType(soap*, ns3__AirlineItineraryType*) serialize to a stream
/// - ns3__AirlineItineraryType* ns3__AirlineItineraryType::soap_dup(soap*) returns deep copy of ns3__AirlineItineraryType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns3__AirlineItineraryType::soap_del() deep deletes ns3__AirlineItineraryType data members, use only after ns3__AirlineItineraryType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns3__AirlineItineraryType
{ public:
/// Element "PassengerName" of XSD type xs:string.
    std::string*                         PassengerName                  0;	///< Optional element.
/// Element "IssueDate" of XSD type xs:string.
    std::string*                         IssueDate                      0;	///< Optional element.
/// Element "TravelAgencyName" of XSD type xs:string.
    std::string*                         TravelAgencyName               0;	///< Optional element.
/// Element "TravelAgencyCode" of XSD type xs:string.
    std::string*                         TravelAgencyCode               0;	///< Optional element.
/// Element "TicketNumber" of XSD type xs:string.
    std::string*                         TicketNumber                   0;	///< Optional element.
/// Element "IssuingCarrierCode" of XSD type xs:string.
    std::string*                         IssuingCarrierCode             0;	///< Optional element.
/// Element "CustomerCode" of XSD type xs:string.
    std::string*                         CustomerCode                   0;	///< Optional element.
/// Element "TotalFare" of XSD type "urn:ebay:apis:CoreComponentTypes":BasicAmountType.
    ns2__BasicAmountType*                TotalFare                      0;	///< Optional element.
/// Element "TotalTaxes" of XSD type "urn:ebay:apis:CoreComponentTypes":BasicAmountType.
    ns2__BasicAmountType*                TotalTaxes                     0;	///< Optional element.
/// Element "TotalFee" of XSD type "urn:ebay:apis:CoreComponentTypes":BasicAmountType.
    ns2__BasicAmountType*                TotalFee                       0;	///< Optional element.
/// Element "RestrictedTicket" of XSD type xs:string.
    std::string*                         RestrictedTicket               0;	///< Optional element.
/// Element "ClearingSequence" of XSD type xs:string.
    std::string*                         ClearingSequence               0;	///< Optional element.
/// Element "ClearingCount" of XSD type xs:string.
    std::string*                         ClearingCount                  0;	///< Optional element.
/// Vector of ns3__FlightDetailsType* of length 0..unbounded.
    std::vector<ns3__FlightDetailsType*> FlightDetails                  0;	///< Elements.
    struct soap                         *soap                          ;
};

/// @brief "urn:ebay:apis:eBLBaseComponents":FlightDetailsType is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   Details of leg information
/// </BLOCKQUOTE></PRE>
/// class ns3__FlightDetailsType operations:
/// - ns3__FlightDetailsType* soap_new_ns3__FlightDetailsType(soap*) allocate and default initialize
/// - ns3__FlightDetailsType* soap_new_ns3__FlightDetailsType(soap*, int num) allocate array and default initialize values
/// - ns3__FlightDetailsType* soap_new_req_ns3__FlightDetailsType(soap*, ...) allocate, set required members
/// - ns3__FlightDetailsType* soap_new_set_ns3__FlightDetailsType(soap*, ...) allocate, set all public members
/// - ns3__FlightDetailsType::soap_default(soap*) default initialize members
/// - int soap_read_ns3__FlightDetailsType(soap*, ns3__FlightDetailsType*) deserialize from a stream
/// - int soap_write_ns3__FlightDetailsType(soap*, ns3__FlightDetailsType*) serialize to a stream
/// - ns3__FlightDetailsType* ns3__FlightDetailsType::soap_dup(soap*) returns deep copy of ns3__FlightDetailsType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns3__FlightDetailsType::soap_del() deep deletes ns3__FlightDetailsType data members, use only after ns3__FlightDetailsType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns3__FlightDetailsType
{ public:
/// Element "ConjuctionTicket" of XSD type xs:string.
    std::string*                         ConjuctionTicket               0;	///< Optional element.
/// Element "ExchangeTicket" of XSD type xs:string.
    std::string*                         ExchangeTicket                 0;	///< Optional element.
/// Element "CouponNumber" of XSD type xs:string.
    std::string*                         CouponNumber                   0;	///< Optional element.
/// Element "ServiceClass" of XSD type xs:string.
    std::string*                         ServiceClass                   0;	///< Optional element.
/// Element "TravelDate" of XSD type xs:string.
    std::string*                         TravelDate                     0;	///< Optional element.
/// Element "CarrierCode" of XSD type xs:string.
    std::string*                         CarrierCode                    0;	///< Optional element.
/// Element "StopOverPermitted" of XSD type xs:string.
    std::string*                         StopOverPermitted              0;	///< Optional element.
/// Element "DepartureAirport" of XSD type xs:string.
    std::string*                         DepartureAirport               0;	///< Optional element.
/// Element "ArrivalAirport" of XSD type xs:string.
    std::string*                         ArrivalAirport                 0;	///< Optional element.
/// Element "FlightNumber" of XSD type xs:string.
    std::string*                         FlightNumber                   0;	///< Optional element.
/// Element "DepartureTime" of XSD type xs:string.
    std::string*                         DepartureTime                  0;	///< Optional element.
/// Element "ArrivalTime" of XSD type xs:string.
    std::string*                         ArrivalTime                    0;	///< Optional element.
/// Element "FareBasisCode" of XSD type xs:string.
    std::string*                         FareBasisCode                  0;	///< Optional element.
/// Element "Fare" of XSD type "urn:ebay:apis:CoreComponentTypes":BasicAmountType.
    ns2__BasicAmountType*                Fare                           0;	///< Optional element.
/// Element "Taxes" of XSD type "urn:ebay:apis:CoreComponentTypes":BasicAmountType.
    ns2__BasicAmountType*                Taxes                          0;	///< Optional element.
/// Element "Fee" of XSD type "urn:ebay:apis:CoreComponentTypes":BasicAmountType.
    ns2__BasicAmountType*                Fee                            0;	///< Optional element.
/// Element "EndorsementOrRestrictions" of XSD type xs:string.
    std::string*                         EndorsementOrRestrictions      0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief "urn:ebay:apis:eBLBaseComponents":AuthorizationInfoType is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   Authorization details
/// </BLOCKQUOTE></PRE>
/// class ns3__AuthorizationInfoType operations:
/// - ns3__AuthorizationInfoType* soap_new_ns3__AuthorizationInfoType(soap*) allocate and default initialize
/// - ns3__AuthorizationInfoType* soap_new_ns3__AuthorizationInfoType(soap*, int num) allocate array and default initialize values
/// - ns3__AuthorizationInfoType* soap_new_req_ns3__AuthorizationInfoType(soap*, ...) allocate, set required members
/// - ns3__AuthorizationInfoType* soap_new_set_ns3__AuthorizationInfoType(soap*, ...) allocate, set all public members
/// - ns3__AuthorizationInfoType::soap_default(soap*) default initialize members
/// - int soap_read_ns3__AuthorizationInfoType(soap*, ns3__AuthorizationInfoType*) deserialize from a stream
/// - int soap_write_ns3__AuthorizationInfoType(soap*, ns3__AuthorizationInfoType*) serialize to a stream
/// - ns3__AuthorizationInfoType* ns3__AuthorizationInfoType::soap_dup(soap*) returns deep copy of ns3__AuthorizationInfoType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns3__AuthorizationInfoType::soap_del() deep deletes ns3__AuthorizationInfoType data members, use only after ns3__AuthorizationInfoType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns3__AuthorizationInfoType
{ public:
/// <PRE><BLOCKQUOTE>
///   The status of the payment:
///   <br/>
///   <br/>
///   Pending: The payment is pending. See "PendingReason" for more information.
/// </BLOCKQUOTE></PRE>
/// Element "PaymentStatus" of XSD type "urn:ebay:apis:eBLBaseComponents":PaymentStatusCodeType.
    enum ns3__PaymentStatusCodeType      PaymentStatus                  1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   The reason the payment is pending:
///   none: No pending reason
///   <br/>
///   <br/>
///   address: The payment is pending because your customer did not include a confirmed shipping address and your Payment Receiving Preferences is set such that you want to manually accept or deny each of these payments. To change your preference, go to the Preferences section of your Profile.
///   <br/>
///   <br/>
///   authorization: The authorization is pending at time of creation if payment is not under review
///   <br/>
///   <br/>
///   echeck: The payment is pending because it was made by an eCheck that has not yet cleared.
///   <br/>
///   <br/>
///   intl: The payment is pending because you hold a non-U.S. account and do not have a withdrawal mechanism. You must manually accept or deny this payment from your Account Overview.
///   <br/>
///   <br/>
///   multi-currency: You do not have a balance in the currency sent, and you do not have your Payment Receiving Preferences set to automatically convert and accept this payment. You must manually accept or deny this payment.
///   <br/>
///   <br/>
///   unilateral: The payment is pending because it was made to an email address that is not yet registered or confirmed.
///   <br/>
///   <br/>
///   upgrade: The payment is pending because it was made via credit card and you must upgrade your account to Business or Premier status in order to receive the funds. upgrade can also mean that you have reached the monthly limit for transactions on your account.
///   <br/>
///   <br/>
///   verify: The payment is pending because you are not yet verified. You must verify your account before you can accept this payment.
///   <br/>
///   <br/>
///   payment_review: The payment is pending because it is under payment review.
///   <br/>
///   <br/>
///   other: The payment is pending for a reason other than those listed above. For more information, contact PayPal Customer Service.
/// </BLOCKQUOTE></PRE>
/// Element "PendingReason" of XSD type "urn:ebay:apis:eBLBaseComponents":PendingStatusCodeType.
    enum ns3__PendingStatusCodeType*     PendingReason                  0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Protection Eligibility for this Transaction - None, SPP or ESPP
/// </BLOCKQUOTE></PRE>
/// Element "ProtectionEligibility" of XSD type xs:string.
    std::string*                         ProtectionEligibility          0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Protection Eligibility Type for this Transaction
/// </BLOCKQUOTE></PRE>
/// Element "ProtectionEligibilityType" of XSD type xs:string.
    std::string*                         ProtectionEligibilityType      0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief "urn:ebay:apis:eBLBaseComponents":OptionTrackingDetailsType is a complexType.
///
/// class ns3__OptionTrackingDetailsType operations:
/// - ns3__OptionTrackingDetailsType* soap_new_ns3__OptionTrackingDetailsType(soap*) allocate and default initialize
/// - ns3__OptionTrackingDetailsType* soap_new_ns3__OptionTrackingDetailsType(soap*, int num) allocate array and default initialize values
/// - ns3__OptionTrackingDetailsType* soap_new_req_ns3__OptionTrackingDetailsType(soap*, ...) allocate, set required members
/// - ns3__OptionTrackingDetailsType* soap_new_set_ns3__OptionTrackingDetailsType(soap*, ...) allocate, set all public members
/// - ns3__OptionTrackingDetailsType::soap_default(soap*) default initialize members
/// - int soap_read_ns3__OptionTrackingDetailsType(soap*, ns3__OptionTrackingDetailsType*) deserialize from a stream
/// - int soap_write_ns3__OptionTrackingDetailsType(soap*, ns3__OptionTrackingDetailsType*) serialize to a stream
/// - ns3__OptionTrackingDetailsType* ns3__OptionTrackingDetailsType::soap_dup(soap*) returns deep copy of ns3__OptionTrackingDetailsType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns3__OptionTrackingDetailsType::soap_del() deep deletes ns3__OptionTrackingDetailsType data members, use only after ns3__OptionTrackingDetailsType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns3__OptionTrackingDetailsType
{ public:
/// <PRE><BLOCKQUOTE>
///   Option Number.
///   <br/>
///   <b>Optional</b>
///   <br/>
/// </BLOCKQUOTE></PRE>
/// Element "OptionNumber" of XSD type xs:string.
    std::string*                         OptionNumber                   0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Option Quantity.
///   <br/>
///   <b>Optional</b>
///   <br/>
/// </BLOCKQUOTE></PRE>
/// Element "OptionQty" of XSD type xs:string.
    std::string*                         OptionQty                      0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Option Select Name.
///   <br/>
///   <b>Optional</b>
///   <br/>
/// </BLOCKQUOTE></PRE>
/// Element "OptionSelect" of XSD type xs:string.
    std::string*                         OptionSelect                   0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Option Quantity Delta.
///   <br/>
///   <b>Optional</b>
///   <br/>
/// </BLOCKQUOTE></PRE>
/// Element "OptionQtyDelta" of XSD type xs:string.
    std::string*                         OptionQtyDelta                 0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Option Alert.
///   <br/>
///   <b>Optional</b>
///   <br/>
/// </BLOCKQUOTE></PRE>
/// Element "OptionAlert" of XSD type xs:string.
    std::string*                         OptionAlert                    0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Option Cost.
///   <br/>
///   <b>Optional</b>
///   <br/>
/// </BLOCKQUOTE></PRE>
/// Element "OptionCost" of XSD type xs:string.
    std::string*                         OptionCost                     0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief "urn:ebay:apis:eBLBaseComponents":ItemTrackingDetailsType is a complexType.
///
/// class ns3__ItemTrackingDetailsType operations:
/// - ns3__ItemTrackingDetailsType* soap_new_ns3__ItemTrackingDetailsType(soap*) allocate and default initialize
/// - ns3__ItemTrackingDetailsType* soap_new_ns3__ItemTrackingDetailsType(soap*, int num) allocate array and default initialize values
/// - ns3__ItemTrackingDetailsType* soap_new_req_ns3__ItemTrackingDetailsType(soap*, ...) allocate, set required members
/// - ns3__ItemTrackingDetailsType* soap_new_set_ns3__ItemTrackingDetailsType(soap*, ...) allocate, set all public members
/// - ns3__ItemTrackingDetailsType::soap_default(soap*) default initialize members
/// - int soap_read_ns3__ItemTrackingDetailsType(soap*, ns3__ItemTrackingDetailsType*) deserialize from a stream
/// - int soap_write_ns3__ItemTrackingDetailsType(soap*, ns3__ItemTrackingDetailsType*) serialize to a stream
/// - ns3__ItemTrackingDetailsType* ns3__ItemTrackingDetailsType::soap_dup(soap*) returns deep copy of ns3__ItemTrackingDetailsType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns3__ItemTrackingDetailsType::soap_del() deep deletes ns3__ItemTrackingDetailsType data members, use only after ns3__ItemTrackingDetailsType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns3__ItemTrackingDetailsType
{ public:
/// <PRE><BLOCKQUOTE>
///   Item Number.
///   <br/>
///   <b>Required</b>
///   <br/>
/// </BLOCKQUOTE></PRE>
/// Element "ItemNumber" of XSD type xs:string.
    std::string*                         ItemNumber                     0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Option Quantity.
///   <br/>
///   <b>Optional</b>
///   <br/>
/// </BLOCKQUOTE></PRE>
/// Element "ItemQty" of XSD type xs:string.
    std::string*                         ItemQty                        0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Item Quantity Delta.
///   <br/>
///   <b>Optional</b>
///   <br/>
/// </BLOCKQUOTE></PRE>
/// Element "ItemQtyDelta" of XSD type xs:string.
    std::string*                         ItemQtyDelta                   0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Item Alert.
///   <br/>
///   <b>Optional</b>
///   <br/>
/// </BLOCKQUOTE></PRE>
/// Element "ItemAlert" of XSD type xs:string.
    std::string*                         ItemAlert                      0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Item Cost.
///   <br/>
///   <b>Optional</b>
///   <br/>
/// </BLOCKQUOTE></PRE>
/// Element "ItemCost" of XSD type xs:string.
    std::string*                         ItemCost                       0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief "urn:ebay:apis:eBLBaseComponents":ButtonSearchResultType is a complexType.
///
/// class ns3__ButtonSearchResultType operations:
/// - ns3__ButtonSearchResultType* soap_new_ns3__ButtonSearchResultType(soap*) allocate and default initialize
/// - ns3__ButtonSearchResultType* soap_new_ns3__ButtonSearchResultType(soap*, int num) allocate array and default initialize values
/// - ns3__ButtonSearchResultType* soap_new_req_ns3__ButtonSearchResultType(soap*, ...) allocate, set required members
/// - ns3__ButtonSearchResultType* soap_new_set_ns3__ButtonSearchResultType(soap*, ...) allocate, set all public members
/// - ns3__ButtonSearchResultType::soap_default(soap*) default initialize members
/// - int soap_read_ns3__ButtonSearchResultType(soap*, ns3__ButtonSearchResultType*) deserialize from a stream
/// - int soap_write_ns3__ButtonSearchResultType(soap*, ns3__ButtonSearchResultType*) serialize to a stream
/// - ns3__ButtonSearchResultType* ns3__ButtonSearchResultType::soap_dup(soap*) returns deep copy of ns3__ButtonSearchResultType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns3__ButtonSearchResultType::soap_del() deep deletes ns3__ButtonSearchResultType data members, use only after ns3__ButtonSearchResultType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns3__ButtonSearchResultType
{ public:
/// Element "HostedButtonID" of XSD type xs:string.
    std::string*                         HostedButtonID                 0;	///< Optional element.
/// Element "ButtonType" of XSD type xs:string.
    std::string*                         ButtonType                     0;	///< Optional element.
/// Element "ItemName" of XSD type xs:string.
    std::string*                         ItemName                       0;	///< Optional element.
/// Element "ModifyDate" of XSD type xs:dateTime.
    time_t*                              ModifyDate                     0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief "urn:ebay:apis:eBLBaseComponents":ReverseTransactionRequestDetailsType is a complexType.
///
/// class ns3__ReverseTransactionRequestDetailsType operations:
/// - ns3__ReverseTransactionRequestDetailsType* soap_new_ns3__ReverseTransactionRequestDetailsType(soap*) allocate and default initialize
/// - ns3__ReverseTransactionRequestDetailsType* soap_new_ns3__ReverseTransactionRequestDetailsType(soap*, int num) allocate array and default initialize values
/// - ns3__ReverseTransactionRequestDetailsType* soap_new_req_ns3__ReverseTransactionRequestDetailsType(soap*, ...) allocate, set required members
/// - ns3__ReverseTransactionRequestDetailsType* soap_new_set_ns3__ReverseTransactionRequestDetailsType(soap*, ...) allocate, set all public members
/// - ns3__ReverseTransactionRequestDetailsType::soap_default(soap*) default initialize members
/// - int soap_read_ns3__ReverseTransactionRequestDetailsType(soap*, ns3__ReverseTransactionRequestDetailsType*) deserialize from a stream
/// - int soap_write_ns3__ReverseTransactionRequestDetailsType(soap*, ns3__ReverseTransactionRequestDetailsType*) serialize to a stream
/// - ns3__ReverseTransactionRequestDetailsType* ns3__ReverseTransactionRequestDetailsType::soap_dup(soap*) returns deep copy of ns3__ReverseTransactionRequestDetailsType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns3__ReverseTransactionRequestDetailsType::soap_del() deep deletes ns3__ReverseTransactionRequestDetailsType data members, use only after ns3__ReverseTransactionRequestDetailsType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns3__ReverseTransactionRequestDetailsType
{ public:
/// <PRE><BLOCKQUOTE>
///   Identifier of the transaction to reverse.
///   <br/>
///   <br/>
///   <b>Required</b>
///   <br/>
///   <br/>
///   Character length and limitations: 17 single-byte alphanumeric characters
/// </BLOCKQUOTE></PRE>
/// Element "TransactionID" of XSD type "urn:ebay:apis:eBLBaseComponents":TransactionId.
    ns3__TransactionId*                  TransactionID                  0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief "urn:ebay:apis:eBLBaseComponents":ReverseTransactionResponseDetailsType is a complexType.
///
/// class ns3__ReverseTransactionResponseDetailsType operations:
/// - ns3__ReverseTransactionResponseDetailsType* soap_new_ns3__ReverseTransactionResponseDetailsType(soap*) allocate and default initialize
/// - ns3__ReverseTransactionResponseDetailsType* soap_new_ns3__ReverseTransactionResponseDetailsType(soap*, int num) allocate array and default initialize values
/// - ns3__ReverseTransactionResponseDetailsType* soap_new_req_ns3__ReverseTransactionResponseDetailsType(soap*, ...) allocate, set required members
/// - ns3__ReverseTransactionResponseDetailsType* soap_new_set_ns3__ReverseTransactionResponseDetailsType(soap*, ...) allocate, set all public members
/// - ns3__ReverseTransactionResponseDetailsType::soap_default(soap*) default initialize members
/// - int soap_read_ns3__ReverseTransactionResponseDetailsType(soap*, ns3__ReverseTransactionResponseDetailsType*) deserialize from a stream
/// - int soap_write_ns3__ReverseTransactionResponseDetailsType(soap*, ns3__ReverseTransactionResponseDetailsType*) serialize to a stream
/// - ns3__ReverseTransactionResponseDetailsType* ns3__ReverseTransactionResponseDetailsType::soap_dup(soap*) returns deep copy of ns3__ReverseTransactionResponseDetailsType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns3__ReverseTransactionResponseDetailsType::soap_del() deep deletes ns3__ReverseTransactionResponseDetailsType data members, use only after ns3__ReverseTransactionResponseDetailsType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns3__ReverseTransactionResponseDetailsType
{ public:
/// <PRE><BLOCKQUOTE>
///   Unique transaction identifier of the reversal transaction created.
///   <br/>
///   <br/>
///   Character length and limitations:17 single-byte characters
/// </BLOCKQUOTE></PRE>
/// Element "ReverseTransactionID" of XSD type "urn:ebay:apis:eBLBaseComponents":TransactionId.
    ns3__TransactionId*                  ReverseTransactionID           0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Status of reversal request.
///   <br/>
///   <br/>
///   <b>Required</b>
///   <br/>
///   <br/>
/// </BLOCKQUOTE></PRE>
/// Element "Status" of XSD type xs:string.
    std::string                          Status                         1;	///< Required element.
    struct soap                         *soap                          ;
};

/// @brief "urn:ebay:apis:eBLBaseComponents":IncentiveInfoType is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   Details of incentive application on individual bucket.
/// </BLOCKQUOTE></PRE>
/// class ns3__IncentiveInfoType operations:
/// - ns3__IncentiveInfoType* soap_new_ns3__IncentiveInfoType(soap*) allocate and default initialize
/// - ns3__IncentiveInfoType* soap_new_ns3__IncentiveInfoType(soap*, int num) allocate array and default initialize values
/// - ns3__IncentiveInfoType* soap_new_req_ns3__IncentiveInfoType(soap*, ...) allocate, set required members
/// - ns3__IncentiveInfoType* soap_new_set_ns3__IncentiveInfoType(soap*, ...) allocate, set all public members
/// - ns3__IncentiveInfoType::soap_default(soap*) default initialize members
/// - int soap_read_ns3__IncentiveInfoType(soap*, ns3__IncentiveInfoType*) deserialize from a stream
/// - int soap_write_ns3__IncentiveInfoType(soap*, ns3__IncentiveInfoType*) serialize to a stream
/// - ns3__IncentiveInfoType* ns3__IncentiveInfoType::soap_dup(soap*) returns deep copy of ns3__IncentiveInfoType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns3__IncentiveInfoType::soap_del() deep deletes ns3__IncentiveInfoType data members, use only after ns3__IncentiveInfoType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns3__IncentiveInfoType
{ public:
/// <PRE><BLOCKQUOTE>
///   Incentive redemption code.
/// </BLOCKQUOTE></PRE>
/// Element "IncentiveCode" of XSD type xs:string.
    std::string*                         IncentiveCode                  0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Defines which bucket or item that the incentive should be applied to.
/// </BLOCKQUOTE></PRE>
/// Vector of ns3__IncentiveApplyIndicationType* of length 0..unbounded.
    std::vector<ns3__IncentiveApplyIndicationType*> ApplyIndication                0;	///< Elements.
    struct soap                         *soap                          ;
};

/// @brief "urn:ebay:apis:eBLBaseComponents":IncentiveApplyIndicationType is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   Defines which bucket or item that the incentive should be applied to.
/// </BLOCKQUOTE></PRE>
/// class ns3__IncentiveApplyIndicationType operations:
/// - ns3__IncentiveApplyIndicationType* soap_new_ns3__IncentiveApplyIndicationType(soap*) allocate and default initialize
/// - ns3__IncentiveApplyIndicationType* soap_new_ns3__IncentiveApplyIndicationType(soap*, int num) allocate array and default initialize values
/// - ns3__IncentiveApplyIndicationType* soap_new_req_ns3__IncentiveApplyIndicationType(soap*, ...) allocate, set required members
/// - ns3__IncentiveApplyIndicationType* soap_new_set_ns3__IncentiveApplyIndicationType(soap*, ...) allocate, set all public members
/// - ns3__IncentiveApplyIndicationType::soap_default(soap*) default initialize members
/// - int soap_read_ns3__IncentiveApplyIndicationType(soap*, ns3__IncentiveApplyIndicationType*) deserialize from a stream
/// - int soap_write_ns3__IncentiveApplyIndicationType(soap*, ns3__IncentiveApplyIndicationType*) serialize to a stream
/// - ns3__IncentiveApplyIndicationType* ns3__IncentiveApplyIndicationType::soap_dup(soap*) returns deep copy of ns3__IncentiveApplyIndicationType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns3__IncentiveApplyIndicationType::soap_del() deep deletes ns3__IncentiveApplyIndicationType data members, use only after ns3__IncentiveApplyIndicationType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns3__IncentiveApplyIndicationType
{ public:
/// <PRE><BLOCKQUOTE>
///   The Bucket ID that the incentive is applied to.
/// </BLOCKQUOTE></PRE>
/// Element "PaymentRequestID" of XSD type xs:string.
    std::string*                         PaymentRequestID               0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   The item that the incentive is applied to.
/// </BLOCKQUOTE></PRE>
/// Element "ItemId" of XSD type xs:string.
    std::string*                         ItemId                         0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief "urn:ebay:apis:eBLBaseComponents":PaymentRequestInfoType is a complexType.
///
/// class ns3__PaymentRequestInfoType operations:
/// - ns3__PaymentRequestInfoType* soap_new_ns3__PaymentRequestInfoType(soap*) allocate and default initialize
/// - ns3__PaymentRequestInfoType* soap_new_ns3__PaymentRequestInfoType(soap*, int num) allocate array and default initialize values
/// - ns3__PaymentRequestInfoType* soap_new_req_ns3__PaymentRequestInfoType(soap*, ...) allocate, set required members
/// - ns3__PaymentRequestInfoType* soap_new_set_ns3__PaymentRequestInfoType(soap*, ...) allocate, set all public members
/// - ns3__PaymentRequestInfoType::soap_default(soap*) default initialize members
/// - int soap_read_ns3__PaymentRequestInfoType(soap*, ns3__PaymentRequestInfoType*) deserialize from a stream
/// - int soap_write_ns3__PaymentRequestInfoType(soap*, ns3__PaymentRequestInfoType*) serialize to a stream
/// - ns3__PaymentRequestInfoType* ns3__PaymentRequestInfoType::soap_dup(soap*) returns deep copy of ns3__PaymentRequestInfoType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns3__PaymentRequestInfoType::soap_del() deep deletes ns3__PaymentRequestInfoType data members, use only after ns3__PaymentRequestInfoType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns3__PaymentRequestInfoType
{ public:
/// <PRE><BLOCKQUOTE>
///   Contains payment request information for each bucket in the cart.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Contains the transaction id of the bucket.
/// </BLOCKQUOTE></PRE>
/// Element "TransactionId" of XSD type xs:string.
    std::string*                         TransactionId                  0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Contains the bucket id.
/// </BLOCKQUOTE></PRE>
/// Element "PaymentRequestID" of XSD type xs:string.
    std::string*                         PaymentRequestID               0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Contains the error details.
/// </BLOCKQUOTE></PRE>
/// Element "PaymentError" of XSD type "urn:ebay:apis:eBLBaseComponents":ErrorType.
    ns3__ErrorType*                      PaymentError                   0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief "urn:ebay:apis:eBLBaseComponents":ExternalRememberMeOwnerDetailsType is a complexType.
///
/// class ns3__ExternalRememberMeOwnerDetailsType operations:
/// - ns3__ExternalRememberMeOwnerDetailsType* soap_new_ns3__ExternalRememberMeOwnerDetailsType(soap*) allocate and default initialize
/// - ns3__ExternalRememberMeOwnerDetailsType* soap_new_ns3__ExternalRememberMeOwnerDetailsType(soap*, int num) allocate array and default initialize values
/// - ns3__ExternalRememberMeOwnerDetailsType* soap_new_req_ns3__ExternalRememberMeOwnerDetailsType(soap*, ...) allocate, set required members
/// - ns3__ExternalRememberMeOwnerDetailsType* soap_new_set_ns3__ExternalRememberMeOwnerDetailsType(soap*, ...) allocate, set all public members
/// - ns3__ExternalRememberMeOwnerDetailsType::soap_default(soap*) default initialize members
/// - int soap_read_ns3__ExternalRememberMeOwnerDetailsType(soap*, ns3__ExternalRememberMeOwnerDetailsType*) deserialize from a stream
/// - int soap_write_ns3__ExternalRememberMeOwnerDetailsType(soap*, ns3__ExternalRememberMeOwnerDetailsType*) serialize to a stream
/// - ns3__ExternalRememberMeOwnerDetailsType* ns3__ExternalRememberMeOwnerDetailsType::soap_dup(soap*) returns deep copy of ns3__ExternalRememberMeOwnerDetailsType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns3__ExternalRememberMeOwnerDetailsType::soap_del() deep deletes ns3__ExternalRememberMeOwnerDetailsType data members, use only after ns3__ExternalRememberMeOwnerDetailsType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns3__ExternalRememberMeOwnerDetailsType
{ public:
/// <PRE><BLOCKQUOTE>
///   E-mail address or secure merchant account ID of merchant to associate with new external remember-me.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   A discriminant that tells SetEC what kind of data the ExternalRememberMeOwnerID parameter contains.
///   Currently, the owner must be either the API actor or omitted/none. In the future, we may allow the
///   owner to be a 3rd party merchant account.
///   Possible values are:
///   None, ignore the ExternalRememberMeOwnerID. An empty value for this field also signifies None.
///   Email, the owner ID is an email address
///   SecureMerchantAccountID, the owner id is a string representing the secure merchant account ID
/// </BLOCKQUOTE></PRE>
/// Element "ExternalRememberMeOwnerIDType" of XSD type xs:string.
    std::string*                         ExternalRememberMeOwnerIDType  0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   When opting in to bypass login via remember me, this parameter specifies the merchant account
///   associated with the remembered login. Currentl, the owner must be either the API actor or omitted/none.
///   In the future, we may allow the owner to be a 3rd party merchant account.
///   If the Owner ID Type field is not present or "None", this parameter is ignored.
/// </BLOCKQUOTE></PRE>
/// Element "ExternalRememberMeOwnerID" of XSD type xs:string.
    std::string*                         ExternalRememberMeOwnerID      0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief "urn:ebay:apis:eBLBaseComponents":ExternalRememberMeOptInDetailsType is a complexType.
///
/// class ns3__ExternalRememberMeOptInDetailsType operations:
/// - ns3__ExternalRememberMeOptInDetailsType* soap_new_ns3__ExternalRememberMeOptInDetailsType(soap*) allocate and default initialize
/// - ns3__ExternalRememberMeOptInDetailsType* soap_new_ns3__ExternalRememberMeOptInDetailsType(soap*, int num) allocate array and default initialize values
/// - ns3__ExternalRememberMeOptInDetailsType* soap_new_req_ns3__ExternalRememberMeOptInDetailsType(soap*, ...) allocate, set required members
/// - ns3__ExternalRememberMeOptInDetailsType* soap_new_set_ns3__ExternalRememberMeOptInDetailsType(soap*, ...) allocate, set all public members
/// - ns3__ExternalRememberMeOptInDetailsType::soap_default(soap*) default initialize members
/// - int soap_read_ns3__ExternalRememberMeOptInDetailsType(soap*, ns3__ExternalRememberMeOptInDetailsType*) deserialize from a stream
/// - int soap_write_ns3__ExternalRememberMeOptInDetailsType(soap*, ns3__ExternalRememberMeOptInDetailsType*) serialize to a stream
/// - ns3__ExternalRememberMeOptInDetailsType* ns3__ExternalRememberMeOptInDetailsType::soap_dup(soap*) returns deep copy of ns3__ExternalRememberMeOptInDetailsType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns3__ExternalRememberMeOptInDetailsType::soap_del() deep deletes ns3__ExternalRememberMeOptInDetailsType data members, use only after ns3__ExternalRememberMeOptInDetailsType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns3__ExternalRememberMeOptInDetailsType
{ public:
/// <PRE><BLOCKQUOTE>
///   This element contains information that allows the merchant to request to
///   opt into external remember me on behalf of the buyer or to request login
///   bypass using external remember me.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   1 = opt in to external remember me.
///   0 or omitted = no opt-in
///   Other values are invalid
/// </BLOCKQUOTE></PRE>
/// Element "ExternalRememberMeOptIn" of XSD type xs:string.
    std::string*                         ExternalRememberMeOptIn        0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   E-mail address or secure merchant account ID of merchant to associate with new external remember-me. Currently,
///   the owner must be either the API actor or omitted/none. In the future, we may allow the owner to be a 3rd party
///   merchant account.
/// </BLOCKQUOTE></PRE>
/// Element "ExternalRememberMeOwnerDetails" of XSD type "urn:ebay:apis:eBLBaseComponents":ExternalRememberMeOwnerDetailsType.
    ns3__ExternalRememberMeOwnerDetailsType*  ExternalRememberMeOwnerDetails 0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief "urn:ebay:apis:eBLBaseComponents":FlowControlDetailsType is a complexType.
///
/// class ns3__FlowControlDetailsType operations:
/// - ns3__FlowControlDetailsType* soap_new_ns3__FlowControlDetailsType(soap*) allocate and default initialize
/// - ns3__FlowControlDetailsType* soap_new_ns3__FlowControlDetailsType(soap*, int num) allocate array and default initialize values
/// - ns3__FlowControlDetailsType* soap_new_req_ns3__FlowControlDetailsType(soap*, ...) allocate, set required members
/// - ns3__FlowControlDetailsType* soap_new_set_ns3__FlowControlDetailsType(soap*, ...) allocate, set all public members
/// - ns3__FlowControlDetailsType::soap_default(soap*) default initialize members
/// - int soap_read_ns3__FlowControlDetailsType(soap*, ns3__FlowControlDetailsType*) deserialize from a stream
/// - int soap_write_ns3__FlowControlDetailsType(soap*, ns3__FlowControlDetailsType*) serialize to a stream
/// - ns3__FlowControlDetailsType* ns3__FlowControlDetailsType::soap_dup(soap*) returns deep copy of ns3__FlowControlDetailsType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns3__FlowControlDetailsType::soap_del() deep deletes ns3__FlowControlDetailsType data members, use only after ns3__FlowControlDetailsType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns3__FlowControlDetailsType
{ public:
/// <PRE><BLOCKQUOTE>
///   An optional set of values related to flow-specific details.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   The URL to redirect to for an unpayable transaction. This field is currently used only
///   for the inline checkout flow.
/// </BLOCKQUOTE></PRE>
/// Element "ErrorURL" of XSD type xs:string.
    std::string*                         ErrorURL                       0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   The URL to redirect to after a user clicks the "Pay" or "Continue" button on the merchant's
///   site. This field is currently used only for the inline checkout flow.
/// </BLOCKQUOTE></PRE>
/// Element "InContextReturnURL" of XSD type xs:string.
    std::string*                         InContextReturnURL             0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief "urn:ebay:apis:eBLBaseComponents":ExternalRememberMeStatusDetailsType is a complexType.
///
/// class ns3__ExternalRememberMeStatusDetailsType operations:
/// - ns3__ExternalRememberMeStatusDetailsType* soap_new_ns3__ExternalRememberMeStatusDetailsType(soap*) allocate and default initialize
/// - ns3__ExternalRememberMeStatusDetailsType* soap_new_ns3__ExternalRememberMeStatusDetailsType(soap*, int num) allocate array and default initialize values
/// - ns3__ExternalRememberMeStatusDetailsType* soap_new_req_ns3__ExternalRememberMeStatusDetailsType(soap*, ...) allocate, set required members
/// - ns3__ExternalRememberMeStatusDetailsType* soap_new_set_ns3__ExternalRememberMeStatusDetailsType(soap*, ...) allocate, set all public members
/// - ns3__ExternalRememberMeStatusDetailsType::soap_default(soap*) default initialize members
/// - int soap_read_ns3__ExternalRememberMeStatusDetailsType(soap*, ns3__ExternalRememberMeStatusDetailsType*) deserialize from a stream
/// - int soap_write_ns3__ExternalRememberMeStatusDetailsType(soap*, ns3__ExternalRememberMeStatusDetailsType*) serialize to a stream
/// - ns3__ExternalRememberMeStatusDetailsType* ns3__ExternalRememberMeStatusDetailsType::soap_dup(soap*) returns deep copy of ns3__ExternalRememberMeStatusDetailsType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns3__ExternalRememberMeStatusDetailsType::soap_del() deep deletes ns3__ExternalRememberMeStatusDetailsType data members, use only after ns3__ExternalRememberMeStatusDetailsType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns3__ExternalRememberMeStatusDetailsType
{ public:
/// <PRE><BLOCKQUOTE>
///   Response information resulting from opt-in operation or current login bypass status.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Required field that reports status of opt-in or login bypass attempt.
///   0 = Success - successful opt-in or ExternalRememberMeID specified in SetExpressCheckout
///   is valid.
///   1 = Invalid ID - ExternalRememberMeID specified in SetExpressCheckout is invalid.
///   2 = Internal Error - System error or outage during opt-in or login bypass. Can retry
///   opt-in or login bypass next time. Flow will force full authentication and allow buyer
///   to complete transaction.
///   -1 = None - the return value does not signify any valid remember me status.
/// </BLOCKQUOTE></PRE>
/// Element "ExternalRememberMeStatus" of XSD type xs:integer.
    xsd__integer                         ExternalRememberMeStatus       1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Identifier returned on external-remember-me-opt-in to allow the merchant to request
///   bypass of PayPal login through external remember me on behalf of the buyer in future
///   transactions. The ExternalRememberMeID is a 17-character alphanumeric (encrypted)
///   string. This field has meaning only to the merchant.
/// </BLOCKQUOTE></PRE>
/// Element "ExternalRememberMeID" of XSD type xs:string.
    std::string*                         ExternalRememberMeID           0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief "urn:ebay:apis:eBLBaseComponents":RefreshTokenStatusDetailsType is a complexType.
///
/// class ns3__RefreshTokenStatusDetailsType operations:
/// - ns3__RefreshTokenStatusDetailsType* soap_new_ns3__RefreshTokenStatusDetailsType(soap*) allocate and default initialize
/// - ns3__RefreshTokenStatusDetailsType* soap_new_ns3__RefreshTokenStatusDetailsType(soap*, int num) allocate array and default initialize values
/// - ns3__RefreshTokenStatusDetailsType* soap_new_req_ns3__RefreshTokenStatusDetailsType(soap*, ...) allocate, set required members
/// - ns3__RefreshTokenStatusDetailsType* soap_new_set_ns3__RefreshTokenStatusDetailsType(soap*, ...) allocate, set all public members
/// - ns3__RefreshTokenStatusDetailsType::soap_default(soap*) default initialize members
/// - int soap_read_ns3__RefreshTokenStatusDetailsType(soap*, ns3__RefreshTokenStatusDetailsType*) deserialize from a stream
/// - int soap_write_ns3__RefreshTokenStatusDetailsType(soap*, ns3__RefreshTokenStatusDetailsType*) serialize to a stream
/// - ns3__RefreshTokenStatusDetailsType* ns3__RefreshTokenStatusDetailsType::soap_dup(soap*) returns deep copy of ns3__RefreshTokenStatusDetailsType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns3__RefreshTokenStatusDetailsType::soap_del() deep deletes ns3__RefreshTokenStatusDetailsType data members, use only after ns3__RefreshTokenStatusDetailsType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns3__RefreshTokenStatusDetailsType
{ public:
/// <PRE><BLOCKQUOTE>
///   Response information resulting from opt-in operation or current login bypass status.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Required field that reports status of opt-in or login bypass attempt.
///   0 = Success, successful opt-in or RefreshToken corresponding to AccessToken specified
///   in SetExpressCheckout is valid (user is still opted in).
///   1 = New RefreshToken was generated (user is still opted in).
///   2 = Invalid ID, RefreshToken corresponding to AccessToken specified in SetExpressCheckout
///   is invalid (user is opted out).
///   -2 = Internal Error, system error or outage during opt-in or login bypass. Can retry
///   opt-in or login bypass next time. Flow will force full authentication and allow
///   buyer to complete transaction.
///   -1 = None, the field does not represent any valid value of the status.
/// </BLOCKQUOTE></PRE>
/// Element "RefreshTokenStatus" of XSD type xs:integer.
    xsd__integer                         RefreshTokenStatus             1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Identifier returned on external-remember-me-opt-in to allow the merchant to request
///   bypass of PayPal login
/// </BLOCKQUOTE></PRE>
/// Element "RefreshToken" of XSD type xs:string.
    std::string*                         RefreshToken                   0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   The immutable_id is the user's unique value per merchant that should never ever change for that account. This would be the key used to uniquely identify the user
/// </BLOCKQUOTE></PRE>
/// Element "ImmutableID" of XSD type xs:string.
    std::string*                         ImmutableID                    0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief "urn:ebay:apis:eBLBaseComponents":DisplayControlDetailsType is a complexType.
///
/// class ns3__DisplayControlDetailsType operations:
/// - ns3__DisplayControlDetailsType* soap_new_ns3__DisplayControlDetailsType(soap*) allocate and default initialize
/// - ns3__DisplayControlDetailsType* soap_new_ns3__DisplayControlDetailsType(soap*, int num) allocate array and default initialize values
/// - ns3__DisplayControlDetailsType* soap_new_req_ns3__DisplayControlDetailsType(soap*, ...) allocate, set required members
/// - ns3__DisplayControlDetailsType* soap_new_set_ns3__DisplayControlDetailsType(soap*, ...) allocate, set all public members
/// - ns3__DisplayControlDetailsType::soap_default(soap*) default initialize members
/// - int soap_read_ns3__DisplayControlDetailsType(soap*, ns3__DisplayControlDetailsType*) deserialize from a stream
/// - int soap_write_ns3__DisplayControlDetailsType(soap*, ns3__DisplayControlDetailsType*) serialize to a stream
/// - ns3__DisplayControlDetailsType* ns3__DisplayControlDetailsType::soap_dup(soap*) returns deep copy of ns3__DisplayControlDetailsType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns3__DisplayControlDetailsType::soap_del() deep deletes ns3__DisplayControlDetailsType data members, use only after ns3__DisplayControlDetailsType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns3__DisplayControlDetailsType
{ public:
/// <PRE><BLOCKQUOTE>
///   Contains elements that allows customization of display (user interface) elements.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Optional URL to pay button image for the inline checkout flow. Currently applicable
///   only to the inline checkout flow when the FlowControlDetails/InlineReturnURL is present.
/// </BLOCKQUOTE></PRE>
/// Element "InContextPaymentButtonImage" of XSD type xs:string.
    std::string*                         InContextPaymentButtonImage    0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief "urn:ebay:apis:eBLBaseComponents":ExternalPartnerTrackingDetailsType is a complexType.
///
/// class ns3__ExternalPartnerTrackingDetailsType operations:
/// - ns3__ExternalPartnerTrackingDetailsType* soap_new_ns3__ExternalPartnerTrackingDetailsType(soap*) allocate and default initialize
/// - ns3__ExternalPartnerTrackingDetailsType* soap_new_ns3__ExternalPartnerTrackingDetailsType(soap*, int num) allocate array and default initialize values
/// - ns3__ExternalPartnerTrackingDetailsType* soap_new_req_ns3__ExternalPartnerTrackingDetailsType(soap*, ...) allocate, set required members
/// - ns3__ExternalPartnerTrackingDetailsType* soap_new_set_ns3__ExternalPartnerTrackingDetailsType(soap*, ...) allocate, set all public members
/// - ns3__ExternalPartnerTrackingDetailsType::soap_default(soap*) default initialize members
/// - int soap_read_ns3__ExternalPartnerTrackingDetailsType(soap*, ns3__ExternalPartnerTrackingDetailsType*) deserialize from a stream
/// - int soap_write_ns3__ExternalPartnerTrackingDetailsType(soap*, ns3__ExternalPartnerTrackingDetailsType*) serialize to a stream
/// - ns3__ExternalPartnerTrackingDetailsType* ns3__ExternalPartnerTrackingDetailsType::soap_dup(soap*) returns deep copy of ns3__ExternalPartnerTrackingDetailsType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns3__ExternalPartnerTrackingDetailsType::soap_del() deep deletes ns3__ExternalPartnerTrackingDetailsType data members, use only after ns3__ExternalPartnerTrackingDetailsType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns3__ExternalPartnerTrackingDetailsType
{ public:
/// <PRE><BLOCKQUOTE>
///   Contains elements that allow tracking for an external partner.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   PayPal will just log this string. There will NOT be any business logic around it, nor any decisions made based on the value of the string that is passed in.
///   From a tracking/analytical perspective, PayPal would not infer any meaning to any specific value.
///   We would just segment the traffic based on the value passed (Cart and None as an example) and track different
///   metrics like risk/conversion etc based on these segments.
///   The external partner would control the value of what gets passed and we take that value as is and generate data based on it. <br/>
///   Optional <br/>
/// </BLOCKQUOTE></PRE>
/// Element "ExternalPartnerSegmentID" of XSD type xs:string.
    std::string*                         ExternalPartnerSegmentID       0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief "urn:ebay:apis:eBLBaseComponents":MerchantStoreDetailsType is a complexType.
///
/// class ns3__MerchantStoreDetailsType operations:
/// - ns3__MerchantStoreDetailsType* soap_new_ns3__MerchantStoreDetailsType(soap*) allocate and default initialize
/// - ns3__MerchantStoreDetailsType* soap_new_ns3__MerchantStoreDetailsType(soap*, int num) allocate array and default initialize values
/// - ns3__MerchantStoreDetailsType* soap_new_req_ns3__MerchantStoreDetailsType(soap*, ...) allocate, set required members
/// - ns3__MerchantStoreDetailsType* soap_new_set_ns3__MerchantStoreDetailsType(soap*, ...) allocate, set all public members
/// - ns3__MerchantStoreDetailsType::soap_default(soap*) default initialize members
/// - int soap_read_ns3__MerchantStoreDetailsType(soap*, ns3__MerchantStoreDetailsType*) deserialize from a stream
/// - int soap_write_ns3__MerchantStoreDetailsType(soap*, ns3__MerchantStoreDetailsType*) serialize to a stream
/// - ns3__MerchantStoreDetailsType* ns3__MerchantStoreDetailsType::soap_dup(soap*) returns deep copy of ns3__MerchantStoreDetailsType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns3__MerchantStoreDetailsType::soap_del() deep deletes ns3__MerchantStoreDetailsType data members, use only after ns3__MerchantStoreDetailsType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns3__MerchantStoreDetailsType
{ public:
/// <PRE><BLOCKQUOTE>
///   Store ID<br/><br/>Optional<br/><br/>
///   Character length and limits: 50 single-byte characters
/// </BLOCKQUOTE></PRE>
/// Element "StoreID" of XSD type xs:string.
    std::string                          StoreID                        1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Terminal ID<br/><br/>Optional<br/><br/>
///   Character length and limits: 50 single-byte characters
/// </BLOCKQUOTE></PRE>
/// Element "TerminalID" of XSD type xs:string.
    std::string*                         TerminalID                     0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief "urn:ebay:apis:eBLBaseComponents":AdditionalFeeType is a complexType.
///
/// class ns3__AdditionalFeeType operations:
/// - ns3__AdditionalFeeType* soap_new_ns3__AdditionalFeeType(soap*) allocate and default initialize
/// - ns3__AdditionalFeeType* soap_new_ns3__AdditionalFeeType(soap*, int num) allocate array and default initialize values
/// - ns3__AdditionalFeeType* soap_new_req_ns3__AdditionalFeeType(soap*, ...) allocate, set required members
/// - ns3__AdditionalFeeType* soap_new_set_ns3__AdditionalFeeType(soap*, ...) allocate, set all public members
/// - ns3__AdditionalFeeType::soap_default(soap*) default initialize members
/// - int soap_read_ns3__AdditionalFeeType(soap*, ns3__AdditionalFeeType*) deserialize from a stream
/// - int soap_write_ns3__AdditionalFeeType(soap*, ns3__AdditionalFeeType*) serialize to a stream
/// - ns3__AdditionalFeeType* ns3__AdditionalFeeType::soap_dup(soap*) returns deep copy of ns3__AdditionalFeeType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns3__AdditionalFeeType::soap_del() deep deletes ns3__AdditionalFeeType data members, use only after ns3__AdditionalFeeType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns3__AdditionalFeeType
{ public:
/// Element "Type" of XSD type xs:string.
    std::string*                         Type                           0;	///< Optional element.
/// Element "Amount" of XSD type "urn:ebay:apis:CoreComponentTypes":BasicAmountType.
    ns2__BasicAmountType*                Amount                         0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief "urn:ebay:apis:eBLBaseComponents":DiscountType is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   Describes discount information
/// </BLOCKQUOTE></PRE>
/// class ns3__DiscountType operations:
/// - ns3__DiscountType* soap_new_ns3__DiscountType(soap*) allocate and default initialize
/// - ns3__DiscountType* soap_new_ns3__DiscountType(soap*, int num) allocate array and default initialize values
/// - ns3__DiscountType* soap_new_req_ns3__DiscountType(soap*, ...) allocate, set required members
/// - ns3__DiscountType* soap_new_set_ns3__DiscountType(soap*, ...) allocate, set all public members
/// - ns3__DiscountType::soap_default(soap*) default initialize members
/// - int soap_read_ns3__DiscountType(soap*, ns3__DiscountType*) deserialize from a stream
/// - int soap_write_ns3__DiscountType(soap*, ns3__DiscountType*) serialize to a stream
/// - ns3__DiscountType* ns3__DiscountType::soap_dup(soap*) returns deep copy of ns3__DiscountType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns3__DiscountType::soap_del() deep deletes ns3__DiscountType data members, use only after ns3__DiscountType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns3__DiscountType
{ public:
/// <PRE><BLOCKQUOTE>
///   Item name<br/><br/>Optional<br/><br/>
///   Character length and limits: 127 single-byte characters
/// </BLOCKQUOTE></PRE>
/// Element "Name" of XSD type xs:string.
    std::string*                         Name                           0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   description of the discount<br/><br/>Optional<br/><br/>
///   Character length and limits: 127 single-byte characters
/// </BLOCKQUOTE></PRE>
/// Element "Description" of XSD type xs:string.
    std::string*                         Description                    0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   amount discounted<br/><br/>Optional<br/><br/>
/// </BLOCKQUOTE></PRE>
/// Element "Amount" of XSD type "urn:ebay:apis:CoreComponentTypes":BasicAmountType.
    ns2__BasicAmountType*                Amount                         1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   offer type<br/><br/>Optional<br/><br/>
/// </BLOCKQUOTE></PRE>
/// Element "RedeemedOfferType" of XSD type "urn:ebay:apis:eBLBaseComponents":RedeemedOfferType.
    enum ns3__RedeemedOfferType*         RedeemedOfferType              0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   offer ID<br/><br/>Optional<br/><br/>
///   Character length and limits: 64 single-byte characters
/// </BLOCKQUOTE></PRE>
/// Element "RedeemedOfferID" of XSD type xs:string.
    std::string*                         RedeemedOfferID                0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief "urn:ebay:apis:eBLBaseComponents":InvoiceItemType is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   Describes an individual item for an invoice.
/// </BLOCKQUOTE></PRE>
/// class ns3__InvoiceItemType operations:
/// - ns3__InvoiceItemType* soap_new_ns3__InvoiceItemType(soap*) allocate and default initialize
/// - ns3__InvoiceItemType* soap_new_ns3__InvoiceItemType(soap*, int num) allocate array and default initialize values
/// - ns3__InvoiceItemType* soap_new_req_ns3__InvoiceItemType(soap*, ...) allocate, set required members
/// - ns3__InvoiceItemType* soap_new_set_ns3__InvoiceItemType(soap*, ...) allocate, set all public members
/// - ns3__InvoiceItemType::soap_default(soap*) default initialize members
/// - int soap_read_ns3__InvoiceItemType(soap*, ns3__InvoiceItemType*) deserialize from a stream
/// - int soap_write_ns3__InvoiceItemType(soap*, ns3__InvoiceItemType*) serialize to a stream
/// - ns3__InvoiceItemType* ns3__InvoiceItemType::soap_dup(soap*) returns deep copy of ns3__InvoiceItemType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns3__InvoiceItemType::soap_del() deep deletes ns3__InvoiceItemType data members, use only after ns3__InvoiceItemType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns3__InvoiceItemType
{ public:
/// <PRE><BLOCKQUOTE>
///   a human readable item name<br/><br/>Optional<br/><br/>
///   Character length and limits: 127 single-byte characters
/// </BLOCKQUOTE></PRE>
/// Element "Name" of XSD type xs:string.
    std::string*                         Name                           0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   a human readable item description<br/><br/>Optional<br/><br/>
///   Character length and limits: 127 single-byte characters
/// </BLOCKQUOTE></PRE>
/// Element "Description" of XSD type xs:string.
    std::string*                         Description                    0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   The International Article Number or Universal Product Code (UPC) for the item.
///   Empty string is allowed.
///   Character length and limits: 17 single-byte characters
/// </BLOCKQUOTE></PRE>
/// Element "EAN" of XSD type xs:string.
    std::string*                         EAN                            0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   The Stock-Keeping Unit or other identification code assigned to the item.
///   Character length and limits: 64 single-byte characters
/// </BLOCKQUOTE></PRE>
/// Element "SKU" of XSD type xs:string.
    std::string*                         SKU                            0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   A retailer could apply different return policies on different items.
///   Each return policy would be identified using a label or identifier.
///   This return policy identifier should be set here. This identifier will be displayed next to the item in the e-Receipt.
///   Character length and limits: 8 single-byte characters
/// </BLOCKQUOTE></PRE>
/// Element "ReturnPolicyIdentifier" of XSD type xs:string.
    std::string*                         ReturnPolicyIdentifier         0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   total price of this item
/// </BLOCKQUOTE></PRE>
/// Element "Price" of XSD type "urn:ebay:apis:CoreComponentTypes":BasicAmountType.
    ns2__BasicAmountType*                Price                          0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   price per item quantity
/// </BLOCKQUOTE></PRE>
/// Element "ItemPrice" of XSD type "urn:ebay:apis:CoreComponentTypes":BasicAmountType.
    ns2__BasicAmountType*                ItemPrice                      0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   quantity of the item (non-negative)
/// </BLOCKQUOTE></PRE>
/// Element "ItemCount" of XSD type xs:double.
    double*                              ItemCount                      0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Unit of measure for the itemCount
/// </BLOCKQUOTE></PRE>
/// Element "ItemCountUnit" of XSD type "urn:ebay:apis:eBLBaseComponents":UnitOfMeasure.
    enum ns3__UnitOfMeasure*             ItemCountUnit                  0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   discount applied to this item
/// </BLOCKQUOTE></PRE>
/// Vector of ns3__DiscountType* of length 0..unbounded.
    std::vector<ns3__DiscountType*     > Discount                       0;	///< Elements.
/// <PRE><BLOCKQUOTE>
///   identifies whether this item is taxable or not. If not passed, this will be assumed to be true.
/// </BLOCKQUOTE></PRE>
/// Element "Taxable" of XSD type xs:boolean.
    bool*                                Taxable                        0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   The tax percentage applied to the item.
///   This is only used for displaying in the receipt, it is not used in pricing calculations.
///   Note: we have totalTax at invoice level. It's up to the caller to do the calculations for setting that other element.
/// </BLOCKQUOTE></PRE>
/// Element "TaxRate" of XSD type xs:double.
    double*                              TaxRate                        0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Additional fees to this item
/// </BLOCKQUOTE></PRE>
/// Vector of ns3__AdditionalFeeType* of length 0..unbounded.
    std::vector<ns3__AdditionalFeeType*> AdditionalFees                 0;	///< Elements.
/// <PRE><BLOCKQUOTE>
///   identifies whether this is reimbursable or not.
///   If not pass, this will be assumed to be true.
/// </BLOCKQUOTE></PRE>
/// Element "Reimbursable" of XSD type xs:boolean.
    bool*                                Reimbursable                   0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Manufacturer part number.
/// </BLOCKQUOTE></PRE>
/// Element "MPN" of XSD type xs:string.
    std::string*                         MPN                            0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   International Standard Book Number.
///   Reference http://en.wikipedia.org/wiki/ISBN
///   Character length and limits: 32 single-byte characters
/// </BLOCKQUOTE></PRE>
/// Element "ISBN" of XSD type xs:string.
    std::string*                         ISBN                           0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Price Look-Up code
///   Reference http://en.wikipedia.org/wiki/Price_Look-Up_code
///   Character length and limits: 5 single-byte characters
/// </BLOCKQUOTE></PRE>
/// Element "PLU" of XSD type xs:string.
    std::string*                         PLU                            0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Character length and limits: 32 single-byte characters
/// </BLOCKQUOTE></PRE>
/// Element "ModelNumber" of XSD type xs:string.
    std::string*                         ModelNumber                    0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Character length and limits: 32 single-byte characters
/// </BLOCKQUOTE></PRE>
/// Element "StyleNumber" of XSD type xs:string.
    std::string*                         StyleNumber                    0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief "urn:ebay:apis:eBLBaseComponents":RefundInfoType is a complexType.
///
/// class ns3__RefundInfoType operations:
/// - ns3__RefundInfoType* soap_new_ns3__RefundInfoType(soap*) allocate and default initialize
/// - ns3__RefundInfoType* soap_new_ns3__RefundInfoType(soap*, int num) allocate array and default initialize values
/// - ns3__RefundInfoType* soap_new_req_ns3__RefundInfoType(soap*, ...) allocate, set required members
/// - ns3__RefundInfoType* soap_new_set_ns3__RefundInfoType(soap*, ...) allocate, set all public members
/// - ns3__RefundInfoType::soap_default(soap*) default initialize members
/// - int soap_read_ns3__RefundInfoType(soap*, ns3__RefundInfoType*) deserialize from a stream
/// - int soap_write_ns3__RefundInfoType(soap*, ns3__RefundInfoType*) serialize to a stream
/// - ns3__RefundInfoType* ns3__RefundInfoType::soap_dup(soap*) returns deep copy of ns3__RefundInfoType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns3__RefundInfoType::soap_del() deep deletes ns3__RefundInfoType data members, use only after ns3__RefundInfoType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns3__RefundInfoType
{ public:
/// <PRE><BLOCKQUOTE>
///   Holds refunds payment status information
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Refund status whether it is Instant or Delayed.
/// </BLOCKQUOTE></PRE>
/// Element "RefundStatus" of XSD type "urn:ebay:apis:eBLBaseComponents":PaymentStatusCodeType.
    enum ns3__PaymentStatusCodeType*     RefundStatus                   0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Tells us the reason when refund payment status is Delayed.
/// </BLOCKQUOTE></PRE>
/// Element "PendingReason" of XSD type "urn:ebay:apis:eBLBaseComponents":PendingStatusCodeType.
    enum ns3__PendingStatusCodeType*     PendingReason                  0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief "urn:ebay:apis:eBLBaseComponents":CoupledBucketsType is a complexType.
///
/// class ns3__CoupledBucketsType operations:
/// - ns3__CoupledBucketsType* soap_new_ns3__CoupledBucketsType(soap*) allocate and default initialize
/// - ns3__CoupledBucketsType* soap_new_ns3__CoupledBucketsType(soap*, int num) allocate array and default initialize values
/// - ns3__CoupledBucketsType* soap_new_req_ns3__CoupledBucketsType(soap*, ...) allocate, set required members
/// - ns3__CoupledBucketsType* soap_new_set_ns3__CoupledBucketsType(soap*, ...) allocate, set all public members
/// - ns3__CoupledBucketsType::soap_default(soap*) default initialize members
/// - int soap_read_ns3__CoupledBucketsType(soap*, ns3__CoupledBucketsType*) deserialize from a stream
/// - int soap_write_ns3__CoupledBucketsType(soap*, ns3__CoupledBucketsType*) serialize to a stream
/// - ns3__CoupledBucketsType* ns3__CoupledBucketsType::soap_dup(soap*) returns deep copy of ns3__CoupledBucketsType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns3__CoupledBucketsType::soap_del() deep deletes ns3__CoupledBucketsType data members, use only after ns3__CoupledBucketsType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns3__CoupledBucketsType
{ public:
/// <PRE><BLOCKQUOTE>
///   Defines relationship between buckets
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Relationship Type - LifeTime (default)
/// </BLOCKQUOTE></PRE>
/// Element "CoupleType" of XSD type "urn:ebay:apis:eBLBaseComponents":CoupleType.
    enum ns3__CoupleType*                CoupleType                     0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Identifier for this relation
/// </BLOCKQUOTE></PRE>
/// Element "CoupledPaymentRequestID" of XSD type xs:string.
    std::string*                         CoupledPaymentRequestID        0;	///< Optional element.
/// Vector of std::string of length 2..10.
    std::vector<std::string            > PaymentRequestID               2:10;	///< Elements.
    struct soap                         *soap                          ;
};

/// @brief "urn:ebay:apis:eBLBaseComponents":CoupledPaymentInfoType is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   Information about Coupled Payment transactions.
/// </BLOCKQUOTE></PRE>
/// class ns3__CoupledPaymentInfoType operations:
/// - ns3__CoupledPaymentInfoType* soap_new_ns3__CoupledPaymentInfoType(soap*) allocate and default initialize
/// - ns3__CoupledPaymentInfoType* soap_new_ns3__CoupledPaymentInfoType(soap*, int num) allocate array and default initialize values
/// - ns3__CoupledPaymentInfoType* soap_new_req_ns3__CoupledPaymentInfoType(soap*, ...) allocate, set required members
/// - ns3__CoupledPaymentInfoType* soap_new_set_ns3__CoupledPaymentInfoType(soap*, ...) allocate, set all public members
/// - ns3__CoupledPaymentInfoType::soap_default(soap*) default initialize members
/// - int soap_read_ns3__CoupledPaymentInfoType(soap*, ns3__CoupledPaymentInfoType*) deserialize from a stream
/// - int soap_write_ns3__CoupledPaymentInfoType(soap*, ns3__CoupledPaymentInfoType*) serialize to a stream
/// - ns3__CoupledPaymentInfoType* ns3__CoupledPaymentInfoType::soap_dup(soap*) returns deep copy of ns3__CoupledPaymentInfoType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns3__CoupledPaymentInfoType::soap_del() deep deletes ns3__CoupledPaymentInfoType data members, use only after ns3__CoupledPaymentInfoType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns3__CoupledPaymentInfoType
{ public:
/// <PRE><BLOCKQUOTE>
///   ID received in the Coupled Payment Request
/// </BLOCKQUOTE></PRE>
/// Element "CoupledPaymentRequestID" of XSD type xs:string.
    std::string*                         CoupledPaymentRequestID        0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   ID that uniquely identifies this CoupledPayment. Generated by PP in Response
/// </BLOCKQUOTE></PRE>
/// Element "CoupledPaymentID" of XSD type xs:string.
    std::string                          CoupledPaymentID               1;	///< Required element.
    struct soap                         *soap                          ;
};

/// @brief "urn:ebay:apis:eBLBaseComponents":TupleType is a complexType.
///
/// class ns3__TupleType operations:
/// - ns3__TupleType* soap_new_ns3__TupleType(soap*) allocate and default initialize
/// - ns3__TupleType* soap_new_ns3__TupleType(soap*, int num) allocate array and default initialize values
/// - ns3__TupleType* soap_new_req_ns3__TupleType(soap*, ...) allocate, set required members
/// - ns3__TupleType* soap_new_set_ns3__TupleType(soap*, ...) allocate, set all public members
/// - ns3__TupleType::soap_default(soap*) default initialize members
/// - int soap_read_ns3__TupleType(soap*, ns3__TupleType*) deserialize from a stream
/// - int soap_write_ns3__TupleType(soap*, ns3__TupleType*) serialize to a stream
/// - ns3__TupleType* ns3__TupleType::soap_dup(soap*) returns deep copy of ns3__TupleType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns3__TupleType::soap_del() deep deletes ns3__TupleType data members, use only after ns3__TupleType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns3__TupleType
{ public:
/// <PRE><BLOCKQUOTE>
///   This holds single key-value pair.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Key Name.<br/><b>Optional</b><br/>
/// </BLOCKQUOTE></PRE>
/// Element "Key" of XSD type xs:string.
    std::string                          Key                            1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Value for the above key.<br/><b>Optional</b><br/>
/// </BLOCKQUOTE></PRE>
/// Element "Value" of XSD type xs:string.
    std::string                          Value                          1;	///< Required element.
    struct soap                         *soap                          ;
};

/// @brief "urn:ebay:apis:eBLBaseComponents":MerchantDataType is a complexType.
///
/// class ns3__MerchantDataType operations:
/// - ns3__MerchantDataType* soap_new_ns3__MerchantDataType(soap*) allocate and default initialize
/// - ns3__MerchantDataType* soap_new_ns3__MerchantDataType(soap*, int num) allocate array and default initialize values
/// - ns3__MerchantDataType* soap_new_req_ns3__MerchantDataType(soap*, ...) allocate, set required members
/// - ns3__MerchantDataType* soap_new_set_ns3__MerchantDataType(soap*, ...) allocate, set all public members
/// - ns3__MerchantDataType::soap_default(soap*) default initialize members
/// - int soap_read_ns3__MerchantDataType(soap*, ns3__MerchantDataType*) deserialize from a stream
/// - int soap_write_ns3__MerchantDataType(soap*, ns3__MerchantDataType*) serialize to a stream
/// - ns3__MerchantDataType* ns3__MerchantDataType::soap_dup(soap*) returns deep copy of ns3__MerchantDataType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns3__MerchantDataType::soap_del() deep deletes ns3__MerchantDataType data members, use only after ns3__MerchantDataType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns3__MerchantDataType
{ public:
/// <PRE><BLOCKQUOTE>
///   This holds all key-value pairs which merchants wants to pass it to the open wallet(PLCC) processor.
/// </BLOCKQUOTE></PRE>
/// Vector of ns3__TupleType* of length 0..16.
    std::vector<ns3__TupleType*        > MerchantDataTuple              0:16;	///< Elements.
    struct soap                         *soap                          ;
};

/// @brief "urn:ebay:apis:eBLBaseComponents":WalletItemsType is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   Details about an Item stored in the PayPal Wallet.
/// </BLOCKQUOTE></PRE>
/// class ns3__WalletItemsType operations:
/// - ns3__WalletItemsType* soap_new_ns3__WalletItemsType(soap*) allocate and default initialize
/// - ns3__WalletItemsType* soap_new_ns3__WalletItemsType(soap*, int num) allocate array and default initialize values
/// - ns3__WalletItemsType* soap_new_req_ns3__WalletItemsType(soap*, ...) allocate, set required members
/// - ns3__WalletItemsType* soap_new_set_ns3__WalletItemsType(soap*, ...) allocate, set all public members
/// - ns3__WalletItemsType::soap_default(soap*) default initialize members
/// - int soap_read_ns3__WalletItemsType(soap*, ns3__WalletItemsType*) deserialize from a stream
/// - int soap_write_ns3__WalletItemsType(soap*, ns3__WalletItemsType*) serialize to a stream
/// - ns3__WalletItemsType* ns3__WalletItemsType::soap_dup(soap*) returns deep copy of ns3__WalletItemsType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns3__WalletItemsType::soap_del() deep deletes ns3__WalletItemsType data members, use only after ns3__WalletItemsType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns3__WalletItemsType
{ public:
/// <PRE><BLOCKQUOTE>
///   (Optional)Identifies a wallet item of a given type. The format varies depending on the type.
/// </BLOCKQUOTE></PRE>
/// Element "Type" of XSD type "urn:ebay:apis:eBLBaseComponents":WalletItemType.
    enum ns3__WalletItemType*            Type                           0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   (Optional)Uniquely identifies a wallet item of given type. Format varies depending on the type.
///   Character length and limitations: 64 single-byte characters maximum.
/// </BLOCKQUOTE></PRE>
/// Element "Id" of XSD type xs:string.
    std::string*                         Id                             0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   (Optional)Description of wallet item.
///   Character length and limitations: 512 single-byte characters maximum.
/// </BLOCKQUOTE></PRE>
/// Element "Description" of XSD type xs:string.
    std::string*                         Description                    0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief "urn:ebay:apis:eBLBaseComponents":DiscountInfoType is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   Describes discount information.
/// </BLOCKQUOTE></PRE>
/// class ns3__DiscountInfoType operations:
/// - ns3__DiscountInfoType* soap_new_ns3__DiscountInfoType(soap*) allocate and default initialize
/// - ns3__DiscountInfoType* soap_new_ns3__DiscountInfoType(soap*, int num) allocate array and default initialize values
/// - ns3__DiscountInfoType* soap_new_req_ns3__DiscountInfoType(soap*, ...) allocate, set required members
/// - ns3__DiscountInfoType* soap_new_set_ns3__DiscountInfoType(soap*, ...) allocate, set all public members
/// - ns3__DiscountInfoType::soap_default(soap*) default initialize members
/// - int soap_read_ns3__DiscountInfoType(soap*, ns3__DiscountInfoType*) deserialize from a stream
/// - int soap_write_ns3__DiscountInfoType(soap*, ns3__DiscountInfoType*) serialize to a stream
/// - ns3__DiscountInfoType* ns3__DiscountInfoType::soap_dup(soap*) returns deep copy of ns3__DiscountInfoType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns3__DiscountInfoType::soap_del() deep deletes ns3__DiscountInfoType data members, use only after ns3__DiscountInfoType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns3__DiscountInfoType
{ public:
/// <PRE><BLOCKQUOTE>
///   (Optional)Item name.
///   Character length and limits: 127 single-byte characters
/// </BLOCKQUOTE></PRE>
/// Element "Name" of XSD type xs:string.
    std::string*                         Name                           0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   (Optional)Description of the discount.
///   Character length and limits: 127 single-byte characters
/// </BLOCKQUOTE></PRE>
/// Element "Description" of XSD type xs:string.
    std::string*                         Description                    0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   (Optional)Amount discounted.
///   The value includes an amount and a 3-character currency code.
/// </BLOCKQUOTE></PRE>
/// Element "Amount" of XSD type "urn:ebay:apis:CoreComponentTypes":BasicAmountType.
    ns2__BasicAmountType*                Amount                         0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   (Optional)Offer type.
/// </BLOCKQUOTE></PRE>
/// Element "RedeemedOfferType" of XSD type "urn:ebay:apis:eBLBaseComponents":RedeemedOfferType.
    enum ns3__RedeemedOfferType*         RedeemedOfferType              0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   (Optional)Offer ID.
///   Character length and limits: 64 single-byte characters.
/// </BLOCKQUOTE></PRE>
/// Element "RedeemedOfferId" of XSD type xs:string.
    std::string*                         RedeemedOfferId                0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   (Optional)Loyalty points accrued.
/// </BLOCKQUOTE></PRE>
/// Element "PointsAccrued" of XSD type xs:decimal.
    xsd__decimal*                        PointsAccrued                  0;	///< Optional element.
    struct soap                         *soap                          ;
};


/******************************************************************************\
 *                                                                            *
 * Schema Complex Types and Top-Level Elements                                *
 *   urn:ebay:apis:EnhancedDataTypes                                          *
 *                                                                            *
\******************************************************************************/

/// @brief "urn:ebay:apis:EnhancedDataTypes":EnhancedCheckoutDataType is a complexType.
///
/// class ns4__EnhancedCheckoutDataType operations:
/// - ns4__EnhancedCheckoutDataType* soap_new_ns4__EnhancedCheckoutDataType(soap*) allocate and default initialize
/// - ns4__EnhancedCheckoutDataType* soap_new_ns4__EnhancedCheckoutDataType(soap*, int num) allocate array and default initialize values
/// - ns4__EnhancedCheckoutDataType* soap_new_req_ns4__EnhancedCheckoutDataType(soap*, ...) allocate, set required members
/// - ns4__EnhancedCheckoutDataType* soap_new_set_ns4__EnhancedCheckoutDataType(soap*, ...) allocate, set all public members
/// - ns4__EnhancedCheckoutDataType::soap_default(soap*) default initialize members
/// - int soap_read_ns4__EnhancedCheckoutDataType(soap*, ns4__EnhancedCheckoutDataType*) deserialize from a stream
/// - int soap_write_ns4__EnhancedCheckoutDataType(soap*, ns4__EnhancedCheckoutDataType*) serialize to a stream
/// - ns4__EnhancedCheckoutDataType* ns4__EnhancedCheckoutDataType::soap_dup(soap*) returns deep copy of ns4__EnhancedCheckoutDataType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns4__EnhancedCheckoutDataType::soap_del() deep deletes ns4__EnhancedCheckoutDataType data members, use only after ns4__EnhancedCheckoutDataType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns4__EnhancedCheckoutDataType
{ public:
    struct soap                         *soap                          ;
};

/// @brief "urn:ebay:apis:EnhancedDataTypes":EnhancedPaymentDataType is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   Enhanced data for different transactions.<br/>
/// </BLOCKQUOTE></PRE>
/// class ns4__EnhancedPaymentDataType operations:
/// - ns4__EnhancedPaymentDataType* soap_new_ns4__EnhancedPaymentDataType(soap*) allocate and default initialize
/// - ns4__EnhancedPaymentDataType* soap_new_ns4__EnhancedPaymentDataType(soap*, int num) allocate array and default initialize values
/// - ns4__EnhancedPaymentDataType* soap_new_req_ns4__EnhancedPaymentDataType(soap*, ...) allocate, set required members
/// - ns4__EnhancedPaymentDataType* soap_new_set_ns4__EnhancedPaymentDataType(soap*, ...) allocate, set all public members
/// - ns4__EnhancedPaymentDataType::soap_default(soap*) default initialize members
/// - int soap_read_ns4__EnhancedPaymentDataType(soap*, ns4__EnhancedPaymentDataType*) deserialize from a stream
/// - int soap_write_ns4__EnhancedPaymentDataType(soap*, ns4__EnhancedPaymentDataType*) serialize to a stream
/// - ns4__EnhancedPaymentDataType* ns4__EnhancedPaymentDataType::soap_dup(soap*) returns deep copy of ns4__EnhancedPaymentDataType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns4__EnhancedPaymentDataType::soap_del() deep deletes ns4__EnhancedPaymentDataType data members, use only after ns4__EnhancedPaymentDataType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns4__EnhancedPaymentDataType
{ public:
/// <PRE><BLOCKQUOTE>
///   AID for Airlines
/// </BLOCKQUOTE></PRE>
/// Element reference "urn:ebay:apis:EnhancedDataTypes:""urn:ebay:apis:eBLBaseComponents":AirlineItinerary.
    ns3__AirlineItineraryType*           ns3__AirlineItinerary          0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief "urn:ebay:apis:EnhancedDataTypes":EnhancedPaymentInfoType is a complexType.
///
/// class ns4__EnhancedPaymentInfoType operations:
/// - ns4__EnhancedPaymentInfoType* soap_new_ns4__EnhancedPaymentInfoType(soap*) allocate and default initialize
/// - ns4__EnhancedPaymentInfoType* soap_new_ns4__EnhancedPaymentInfoType(soap*, int num) allocate array and default initialize values
/// - ns4__EnhancedPaymentInfoType* soap_new_req_ns4__EnhancedPaymentInfoType(soap*, ...) allocate, set required members
/// - ns4__EnhancedPaymentInfoType* soap_new_set_ns4__EnhancedPaymentInfoType(soap*, ...) allocate, set all public members
/// - ns4__EnhancedPaymentInfoType::soap_default(soap*) default initialize members
/// - int soap_read_ns4__EnhancedPaymentInfoType(soap*, ns4__EnhancedPaymentInfoType*) deserialize from a stream
/// - int soap_write_ns4__EnhancedPaymentInfoType(soap*, ns4__EnhancedPaymentInfoType*) serialize to a stream
/// - ns4__EnhancedPaymentInfoType* ns4__EnhancedPaymentInfoType::soap_dup(soap*) returns deep copy of ns4__EnhancedPaymentInfoType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns4__EnhancedPaymentInfoType::soap_del() deep deletes ns4__EnhancedPaymentInfoType data members, use only after ns4__EnhancedPaymentInfoType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns4__EnhancedPaymentInfoType
{ public:
    struct soap                         *soap                          ;
};

/// @brief "urn:ebay:apis:EnhancedDataTypes":EnhancedItemDataType is a complexType.
///
/// class ns4__EnhancedItemDataType operations:
/// - ns4__EnhancedItemDataType* soap_new_ns4__EnhancedItemDataType(soap*) allocate and default initialize
/// - ns4__EnhancedItemDataType* soap_new_ns4__EnhancedItemDataType(soap*, int num) allocate array and default initialize values
/// - ns4__EnhancedItemDataType* soap_new_req_ns4__EnhancedItemDataType(soap*, ...) allocate, set required members
/// - ns4__EnhancedItemDataType* soap_new_set_ns4__EnhancedItemDataType(soap*, ...) allocate, set all public members
/// - ns4__EnhancedItemDataType::soap_default(soap*) default initialize members
/// - int soap_read_ns4__EnhancedItemDataType(soap*, ns4__EnhancedItemDataType*) deserialize from a stream
/// - int soap_write_ns4__EnhancedItemDataType(soap*, ns4__EnhancedItemDataType*) serialize to a stream
/// - ns4__EnhancedItemDataType* ns4__EnhancedItemDataType::soap_dup(soap*) returns deep copy of ns4__EnhancedItemDataType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns4__EnhancedItemDataType::soap_del() deep deletes ns4__EnhancedItemDataType data members, use only after ns4__EnhancedItemDataType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns4__EnhancedItemDataType
{ public:
    struct soap                         *soap                          ;
};

/// @brief "urn:ebay:apis:EnhancedDataTypes":EnhancedInitiateRecoupRequestDetailsType is a complexType.
///
/// class ns4__EnhancedInitiateRecoupRequestDetailsType operations:
/// - ns4__EnhancedInitiateRecoupRequestDetailsType* soap_new_ns4__EnhancedInitiateRecoupRequestDetailsType(soap*) allocate and default initialize
/// - ns4__EnhancedInitiateRecoupRequestDetailsType* soap_new_ns4__EnhancedInitiateRecoupRequestDetailsType(soap*, int num) allocate array and default initialize values
/// - ns4__EnhancedInitiateRecoupRequestDetailsType* soap_new_req_ns4__EnhancedInitiateRecoupRequestDetailsType(soap*, ...) allocate, set required members
/// - ns4__EnhancedInitiateRecoupRequestDetailsType* soap_new_set_ns4__EnhancedInitiateRecoupRequestDetailsType(soap*, ...) allocate, set all public members
/// - ns4__EnhancedInitiateRecoupRequestDetailsType::soap_default(soap*) default initialize members
/// - int soap_read_ns4__EnhancedInitiateRecoupRequestDetailsType(soap*, ns4__EnhancedInitiateRecoupRequestDetailsType*) deserialize from a stream
/// - int soap_write_ns4__EnhancedInitiateRecoupRequestDetailsType(soap*, ns4__EnhancedInitiateRecoupRequestDetailsType*) serialize to a stream
/// - ns4__EnhancedInitiateRecoupRequestDetailsType* ns4__EnhancedInitiateRecoupRequestDetailsType::soap_dup(soap*) returns deep copy of ns4__EnhancedInitiateRecoupRequestDetailsType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns4__EnhancedInitiateRecoupRequestDetailsType::soap_del() deep deletes ns4__EnhancedInitiateRecoupRequestDetailsType data members, use only after ns4__EnhancedInitiateRecoupRequestDetailsType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns4__EnhancedInitiateRecoupRequestDetailsType
{ public:
    struct soap                         *soap                          ;
};

/// @brief "urn:ebay:apis:EnhancedDataTypes":EnhancedCompleteRecoupRequestDetailsType is a complexType.
///
/// class ns4__EnhancedCompleteRecoupRequestDetailsType operations:
/// - ns4__EnhancedCompleteRecoupRequestDetailsType* soap_new_ns4__EnhancedCompleteRecoupRequestDetailsType(soap*) allocate and default initialize
/// - ns4__EnhancedCompleteRecoupRequestDetailsType* soap_new_ns4__EnhancedCompleteRecoupRequestDetailsType(soap*, int num) allocate array and default initialize values
/// - ns4__EnhancedCompleteRecoupRequestDetailsType* soap_new_req_ns4__EnhancedCompleteRecoupRequestDetailsType(soap*, ...) allocate, set required members
/// - ns4__EnhancedCompleteRecoupRequestDetailsType* soap_new_set_ns4__EnhancedCompleteRecoupRequestDetailsType(soap*, ...) allocate, set all public members
/// - ns4__EnhancedCompleteRecoupRequestDetailsType::soap_default(soap*) default initialize members
/// - int soap_read_ns4__EnhancedCompleteRecoupRequestDetailsType(soap*, ns4__EnhancedCompleteRecoupRequestDetailsType*) deserialize from a stream
/// - int soap_write_ns4__EnhancedCompleteRecoupRequestDetailsType(soap*, ns4__EnhancedCompleteRecoupRequestDetailsType*) serialize to a stream
/// - ns4__EnhancedCompleteRecoupRequestDetailsType* ns4__EnhancedCompleteRecoupRequestDetailsType::soap_dup(soap*) returns deep copy of ns4__EnhancedCompleteRecoupRequestDetailsType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns4__EnhancedCompleteRecoupRequestDetailsType::soap_del() deep deletes ns4__EnhancedCompleteRecoupRequestDetailsType data members, use only after ns4__EnhancedCompleteRecoupRequestDetailsType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns4__EnhancedCompleteRecoupRequestDetailsType
{ public:
    struct soap                         *soap                          ;
};

/// @brief "urn:ebay:apis:EnhancedDataTypes":EnhancedCompleteRecoupResponseDetailsType is a complexType.
///
/// class ns4__EnhancedCompleteRecoupResponseDetailsType operations:
/// - ns4__EnhancedCompleteRecoupResponseDetailsType* soap_new_ns4__EnhancedCompleteRecoupResponseDetailsType(soap*) allocate and default initialize
/// - ns4__EnhancedCompleteRecoupResponseDetailsType* soap_new_ns4__EnhancedCompleteRecoupResponseDetailsType(soap*, int num) allocate array and default initialize values
/// - ns4__EnhancedCompleteRecoupResponseDetailsType* soap_new_req_ns4__EnhancedCompleteRecoupResponseDetailsType(soap*, ...) allocate, set required members
/// - ns4__EnhancedCompleteRecoupResponseDetailsType* soap_new_set_ns4__EnhancedCompleteRecoupResponseDetailsType(soap*, ...) allocate, set all public members
/// - ns4__EnhancedCompleteRecoupResponseDetailsType::soap_default(soap*) default initialize members
/// - int soap_read_ns4__EnhancedCompleteRecoupResponseDetailsType(soap*, ns4__EnhancedCompleteRecoupResponseDetailsType*) deserialize from a stream
/// - int soap_write_ns4__EnhancedCompleteRecoupResponseDetailsType(soap*, ns4__EnhancedCompleteRecoupResponseDetailsType*) serialize to a stream
/// - ns4__EnhancedCompleteRecoupResponseDetailsType* ns4__EnhancedCompleteRecoupResponseDetailsType::soap_dup(soap*) returns deep copy of ns4__EnhancedCompleteRecoupResponseDetailsType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns4__EnhancedCompleteRecoupResponseDetailsType::soap_del() deep deletes ns4__EnhancedCompleteRecoupResponseDetailsType data members, use only after ns4__EnhancedCompleteRecoupResponseDetailsType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns4__EnhancedCompleteRecoupResponseDetailsType
{ public:
    struct soap                         *soap                          ;
};

/// @brief "urn:ebay:apis:EnhancedDataTypes":EnhancedCancelRecoupRequestDetailsType is a complexType.
///
/// class ns4__EnhancedCancelRecoupRequestDetailsType operations:
/// - ns4__EnhancedCancelRecoupRequestDetailsType* soap_new_ns4__EnhancedCancelRecoupRequestDetailsType(soap*) allocate and default initialize
/// - ns4__EnhancedCancelRecoupRequestDetailsType* soap_new_ns4__EnhancedCancelRecoupRequestDetailsType(soap*, int num) allocate array and default initialize values
/// - ns4__EnhancedCancelRecoupRequestDetailsType* soap_new_req_ns4__EnhancedCancelRecoupRequestDetailsType(soap*, ...) allocate, set required members
/// - ns4__EnhancedCancelRecoupRequestDetailsType* soap_new_set_ns4__EnhancedCancelRecoupRequestDetailsType(soap*, ...) allocate, set all public members
/// - ns4__EnhancedCancelRecoupRequestDetailsType::soap_default(soap*) default initialize members
/// - int soap_read_ns4__EnhancedCancelRecoupRequestDetailsType(soap*, ns4__EnhancedCancelRecoupRequestDetailsType*) deserialize from a stream
/// - int soap_write_ns4__EnhancedCancelRecoupRequestDetailsType(soap*, ns4__EnhancedCancelRecoupRequestDetailsType*) serialize to a stream
/// - ns4__EnhancedCancelRecoupRequestDetailsType* ns4__EnhancedCancelRecoupRequestDetailsType::soap_dup(soap*) returns deep copy of ns4__EnhancedCancelRecoupRequestDetailsType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns4__EnhancedCancelRecoupRequestDetailsType::soap_del() deep deletes ns4__EnhancedCancelRecoupRequestDetailsType data members, use only after ns4__EnhancedCancelRecoupRequestDetailsType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns4__EnhancedCancelRecoupRequestDetailsType
{ public:
    struct soap                         *soap                          ;
};

/// @brief "urn:ebay:apis:EnhancedDataTypes":EnhancedPayerInfoType is a complexType.
///
/// class ns4__EnhancedPayerInfoType operations:
/// - ns4__EnhancedPayerInfoType* soap_new_ns4__EnhancedPayerInfoType(soap*) allocate and default initialize
/// - ns4__EnhancedPayerInfoType* soap_new_ns4__EnhancedPayerInfoType(soap*, int num) allocate array and default initialize values
/// - ns4__EnhancedPayerInfoType* soap_new_req_ns4__EnhancedPayerInfoType(soap*, ...) allocate, set required members
/// - ns4__EnhancedPayerInfoType* soap_new_set_ns4__EnhancedPayerInfoType(soap*, ...) allocate, set all public members
/// - ns4__EnhancedPayerInfoType::soap_default(soap*) default initialize members
/// - int soap_read_ns4__EnhancedPayerInfoType(soap*, ns4__EnhancedPayerInfoType*) deserialize from a stream
/// - int soap_write_ns4__EnhancedPayerInfoType(soap*, ns4__EnhancedPayerInfoType*) serialize to a stream
/// - ns4__EnhancedPayerInfoType* ns4__EnhancedPayerInfoType::soap_dup(soap*) returns deep copy of ns4__EnhancedPayerInfoType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns4__EnhancedPayerInfoType::soap_del() deep deletes ns4__EnhancedPayerInfoType data members, use only after ns4__EnhancedPayerInfoType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns4__EnhancedPayerInfoType
{ public:
    struct soap                         *soap                          ;
};

/// @brief "urn:ebay:api:PayPalAPI":BMCreateButtonRequestType is a complexType with complexContent extension of XSD type "urn:ebay:apis:eBLBaseComponents":AbstractRequestType.
///
/// class ns1__BMCreateButtonRequestType operations:
/// - ns1__BMCreateButtonRequestType* soap_new_ns1__BMCreateButtonRequestType(soap*) allocate and default initialize
/// - ns1__BMCreateButtonRequestType* soap_new_ns1__BMCreateButtonRequestType(soap*, int num) allocate array and default initialize values
/// - ns1__BMCreateButtonRequestType* soap_new_req_ns1__BMCreateButtonRequestType(soap*, ...) allocate, set required members
/// - ns1__BMCreateButtonRequestType* soap_new_set_ns1__BMCreateButtonRequestType(soap*, ...) allocate, set all public members
/// - ns1__BMCreateButtonRequestType::soap_default(soap*) default initialize members
/// - int soap_read_ns1__BMCreateButtonRequestType(soap*, ns1__BMCreateButtonRequestType*) deserialize from a stream
/// - int soap_write_ns1__BMCreateButtonRequestType(soap*, ns1__BMCreateButtonRequestType*) serialize to a stream
/// - ns1__BMCreateButtonRequestType* ns1__BMCreateButtonRequestType::soap_dup(soap*) returns deep copy of ns1__BMCreateButtonRequestType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__BMCreateButtonRequestType::soap_del() deep deletes ns1__BMCreateButtonRequestType data members, use only after ns1__BMCreateButtonRequestType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__BMCreateButtonRequestType : public ns3__AbstractRequestType
{ public:
/*  INHERITED FROM ns3__AbstractRequestType:
/// <PRE><BLOCKQUOTE>
///   This specifies the required detail level that is needed by a client application pertaining to
///   a particular data component (e.g., Item, Transaction, etc.). The detail level is specified in
///   the DetailLevelCodeType which has all the enumerated values of the detail level for each component.
/// </BLOCKQUOTE></PRE>
/// Vector of enum ns3__DetailLevelCodeType of length 0..unbounded.
    std::vector<enum ns3__DetailLevelCodeType> DetailLevel                    0;	///< Elements.
/// <PRE><BLOCKQUOTE>
///   This should be the standard RFC 3066 language identification tag, e.g., en_US.
/// </BLOCKQUOTE></PRE>
/// Element "ErrorLanguage" of XSD type xs:string.
    std::string*                         ErrorLanguage                  0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   This refers to the version of the request payload schema.
/// </BLOCKQUOTE></PRE>
/// Element "Version" of XSD type xs:string.
    std::string                          Version                        1;	///< Required element.
/// @todo <any namespace="##local" minOccurs="0">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
    _XML                                 __any                         0;	///< Catch any element content in XML string.
    END OF INHERITED FROM ns3__AbstractRequestType */
/// <PRE><BLOCKQUOTE>
///   Type of Button to create.
///   <br/>
///   <br/>
///   <b>Required</b>
///   <br/>
///   <br/>
///   Must be one of the following: BUYNOW, CART, GIFTCERTIFICATE. SUBSCRIBE, PAYMENTPLAN, AUTOBILLING, DONATE, VIEWCART or UNSUBSCRIBE
/// </BLOCKQUOTE></PRE>
/// Element "ButtonType" of XSD type "urn:ebay:apis:eBLBaseComponents":ButtonTypeType.
    enum ns3__ButtonTypeType*            ButtonType                     0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   button code.
///   <br/>
///   <br/>
///   <b>optional</b>
///   <br/>
///   <br/>
///   Must be one of the following: hosted, encrypted or cleartext
/// </BLOCKQUOTE></PRE>
/// Element "ButtonCode" of XSD type "urn:ebay:apis:eBLBaseComponents":ButtonCodeType.
    enum ns3__ButtonCodeType*            ButtonCode                     0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Button sub type.
///   <br/>
///   <br/>
///   <b>optional for button types buynow and cart only</b>
///   <br/>
///   <br/>
///   Must Be either PRODUCTS or SERVICES
/// </BLOCKQUOTE></PRE>
/// Element "ButtonSubType" of XSD type "urn:ebay:apis:eBLBaseComponents":ButtonSubTypeType.
    enum ns3__ButtonSubTypeType*         ButtonSubType                  0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Button Variable information
///   <br/>
///   <br/>
///   <b>At least one required recurring</b>
///   <br/>
///   <br/>
///   Character length and limitations: 63 single-byte alphanumeric characters
/// </BLOCKQUOTE></PRE>
/// Vector of std::string of length 0..1000.
    std::vector<std::string            > ButtonVar                      0:1000;	///< Elements.
/// Vector of ns1__OptionDetailsType* of length 0..5.
    std::vector<ns1__OptionDetailsType*> OptionDetails                  0:5;	///< Elements.
/// <PRE><BLOCKQUOTE>
///   Details of each option for the button.
///   <br/>
///   <br/>
///   <b>Optional</b>
///   <br/>
/// </BLOCKQUOTE></PRE>
/// Vector of std::string of length 0..2.
    std::vector<std::string            > TextBox                        0:2;	///< Elements.
/// <PRE><BLOCKQUOTE>
///   Button image to use.
///   <br/>
///   <br/>
///   <b>Optional</b>
///   <br/>
///   <br/>
///   Must be one of: REG, SML, or CC
/// </BLOCKQUOTE></PRE>
/// Element "ButtonImage" of XSD type "urn:ebay:apis:eBLBaseComponents":ButtonImageType.
    enum ns3__ButtonImageType*           ButtonImage                    0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Button URL for custom button image.
///   <br/>
///   <br/>
///   <b>Optional</b>
///   <br/>
///   <br/>
///   Character length and limitations: 127 single-byte alphanumeric characters
/// </BLOCKQUOTE></PRE>
/// Element "ButtonImageURL" of XSD type xs:string.
    std::string*                         ButtonImageURL                 0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Text to use on Buy Now Button.
///   <br/>
///   <br/>
///   <b>Optional</b>
///   <br/>
///   <br/>
///   Must be either BUYNOW or PAYNOW
/// </BLOCKQUOTE></PRE>
/// Element "BuyNowText" of XSD type "urn:ebay:apis:eBLBaseComponents":BuyNowTextType.
    enum ns3__BuyNowTextType*            BuyNowText                     0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Text to use on Subscribe button.
///   <br/>
///   <br/>
///   <b>Optional</b>
///   <br/>
///   <br/>
///   Must be either BUYNOW or SUBSCRIBE
/// </BLOCKQUOTE></PRE>
/// Element "SubscribeText" of XSD type "urn:ebay:apis:eBLBaseComponents":SubscribeTextType.
    enum ns3__SubscribeTextType*         SubscribeText                  0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Button Country.
///   <br/>
///   <br/>
///   <b>Optional</b>
///   <br/>
///   <br/>
///   Must be valid ISO country code
/// </BLOCKQUOTE></PRE>
/// Element "ButtonCountry" of XSD type "urn:ebay:apis:eBLBaseComponents":CountryCodeType.
    enum ns3__CountryCodeType*           ButtonCountry                  0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Button language code.
///   <br/>
///   <br/>
///   <b>Optional</b>
///   <br/>
///   <br/>
///   Character length and limitations: 3 single-byte alphanumeric characters
/// </BLOCKQUOTE></PRE>
/// Element "ButtonLanguage" of XSD type xs:string.
    std::string*                         ButtonLanguage                 0;	///< Optional element.
};

/// @brief "urn:ebay:api:PayPalAPI":BMCreateButtonResponseType is a complexType with complexContent extension of XSD type "urn:ebay:apis:eBLBaseComponents":AbstractResponseType.
///
/// class ns1__BMCreateButtonResponseType operations:
/// - ns1__BMCreateButtonResponseType* soap_new_ns1__BMCreateButtonResponseType(soap*) allocate and default initialize
/// - ns1__BMCreateButtonResponseType* soap_new_ns1__BMCreateButtonResponseType(soap*, int num) allocate array and default initialize values
/// - ns1__BMCreateButtonResponseType* soap_new_req_ns1__BMCreateButtonResponseType(soap*, ...) allocate, set required members
/// - ns1__BMCreateButtonResponseType* soap_new_set_ns1__BMCreateButtonResponseType(soap*, ...) allocate, set all public members
/// - ns1__BMCreateButtonResponseType::soap_default(soap*) default initialize members
/// - int soap_read_ns1__BMCreateButtonResponseType(soap*, ns1__BMCreateButtonResponseType*) deserialize from a stream
/// - int soap_write_ns1__BMCreateButtonResponseType(soap*, ns1__BMCreateButtonResponseType*) serialize to a stream
/// - ns1__BMCreateButtonResponseType* ns1__BMCreateButtonResponseType::soap_dup(soap*) returns deep copy of ns1__BMCreateButtonResponseType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__BMCreateButtonResponseType::soap_del() deep deletes ns1__BMCreateButtonResponseType data members, use only after ns1__BMCreateButtonResponseType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__BMCreateButtonResponseType : public ns3__AbstractResponseType
{ public:
/*  INHERITED FROM ns3__AbstractResponseType:
/// <PRE><BLOCKQUOTE>
///   This value represents the date and time (GMT) when the response was generated by a service provider (as a result of processing of a request).
/// </BLOCKQUOTE></PRE>
/// Element "Timestamp" of XSD type xs:dateTime.
    time_t*                              Timestamp                      0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Application level acknowledgement code.
/// </BLOCKQUOTE></PRE>
/// Element "Ack" of XSD type "urn:ebay:apis:eBLBaseComponents":AckCodeType.
    enum ns3__AckCodeType                Ack                            1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   CorrelationID may be used optionally with an application level acknowledgement.
/// </BLOCKQUOTE></PRE>
/// Element "CorrelationID" of XSD type xs:string.
    std::string*                         CorrelationID                  0;	///< Optional element.
/// Vector of ns3__ErrorType* of length 0..unbounded.
    std::vector<ns3__ErrorType*        > Errors                         0;	///< Elements.
/// <PRE><BLOCKQUOTE>
///   This refers to the version of the response payload schema.
/// </BLOCKQUOTE></PRE>
/// Element "Version" of XSD type xs:string.
    std::string                          Version                        1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   This refers to the specific software build that was used in the deployment for processing the request and generating the response.
/// </BLOCKQUOTE></PRE>
/// Element "Build" of XSD type xs:string.
    std::string                          Build                          1;	///< Required element.
/// @todo <any namespace="##local" minOccurs="0">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
    _XML                                 __any                         0;	///< Catch any element content in XML string.
    END OF INHERITED FROM ns3__AbstractResponseType */
/// Element "Website" of XSD type xs:string.
    std::string                          Website                        1;	///< Required element.
/// Element "Email" of XSD type xs:string.
    std::string*                         Email                          0;	///< Optional element.
/// Element "Mobile" of XSD type xs:string.
    std::string*                         Mobile                         0;	///< Optional element.
/// Element "HostedButtonID" of XSD type xs:string.
    std::string*                         HostedButtonID                 0;	///< Optional element.
};

/// @brief "urn:ebay:api:PayPalAPI":BMUpdateButtonRequestType is a complexType with complexContent extension of XSD type "urn:ebay:apis:eBLBaseComponents":AbstractRequestType.
///
/// class ns1__BMUpdateButtonRequestType operations:
/// - ns1__BMUpdateButtonRequestType* soap_new_ns1__BMUpdateButtonRequestType(soap*) allocate and default initialize
/// - ns1__BMUpdateButtonRequestType* soap_new_ns1__BMUpdateButtonRequestType(soap*, int num) allocate array and default initialize values
/// - ns1__BMUpdateButtonRequestType* soap_new_req_ns1__BMUpdateButtonRequestType(soap*, ...) allocate, set required members
/// - ns1__BMUpdateButtonRequestType* soap_new_set_ns1__BMUpdateButtonRequestType(soap*, ...) allocate, set all public members
/// - ns1__BMUpdateButtonRequestType::soap_default(soap*) default initialize members
/// - int soap_read_ns1__BMUpdateButtonRequestType(soap*, ns1__BMUpdateButtonRequestType*) deserialize from a stream
/// - int soap_write_ns1__BMUpdateButtonRequestType(soap*, ns1__BMUpdateButtonRequestType*) serialize to a stream
/// - ns1__BMUpdateButtonRequestType* ns1__BMUpdateButtonRequestType::soap_dup(soap*) returns deep copy of ns1__BMUpdateButtonRequestType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__BMUpdateButtonRequestType::soap_del() deep deletes ns1__BMUpdateButtonRequestType data members, use only after ns1__BMUpdateButtonRequestType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__BMUpdateButtonRequestType : public ns3__AbstractRequestType
{ public:
/*  INHERITED FROM ns3__AbstractRequestType:
/// <PRE><BLOCKQUOTE>
///   This specifies the required detail level that is needed by a client application pertaining to
///   a particular data component (e.g., Item, Transaction, etc.). The detail level is specified in
///   the DetailLevelCodeType which has all the enumerated values of the detail level for each component.
/// </BLOCKQUOTE></PRE>
/// Vector of enum ns3__DetailLevelCodeType of length 0..unbounded.
    std::vector<enum ns3__DetailLevelCodeType> DetailLevel                    0;	///< Elements.
/// <PRE><BLOCKQUOTE>
///   This should be the standard RFC 3066 language identification tag, e.g., en_US.
/// </BLOCKQUOTE></PRE>
/// Element "ErrorLanguage" of XSD type xs:string.
    std::string*                         ErrorLanguage                  0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   This refers to the version of the request payload schema.
/// </BLOCKQUOTE></PRE>
/// Element "Version" of XSD type xs:string.
    std::string                          Version                        1;	///< Required element.
/// @todo <any namespace="##local" minOccurs="0">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
    _XML                                 __any                         0;	///< Catch any element content in XML string.
    END OF INHERITED FROM ns3__AbstractRequestType */
/// <PRE><BLOCKQUOTE>
///   Hosted Button id of the button to update.
///   <br/>
///   <br/>
///   <b>Required</b>
///   <br/>
///   <br/>
///   Character length and limitations: 10 single-byte numeric characters
/// </BLOCKQUOTE></PRE>
/// Element "HostedButtonID" of XSD type xs:string.
    std::string                          HostedButtonID                 1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Type of Button to create.
///   <br/>
///   <br/>
///   <b>Required</b>
///   <br/>
///   <br/>
///   Must be one of the following: BUYNOW, CART, GIFTCERTIFICATE. SUBSCRIBE, PAYMENTPLAN, AUTOBILLING, DONATE, VIEWCART or UNSUBSCRIBE
/// </BLOCKQUOTE></PRE>
/// Element "ButtonType" of XSD type "urn:ebay:apis:eBLBaseComponents":ButtonTypeType.
    enum ns3__ButtonTypeType*            ButtonType                     0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   button code.
///   <br/>
///   <br/>
///   <b>optional</b>
///   <br/>
///   <br/>
///   Must be one of the following: hosted, encrypted or cleartext
/// </BLOCKQUOTE></PRE>
/// Element "ButtonCode" of XSD type "urn:ebay:apis:eBLBaseComponents":ButtonCodeType.
    enum ns3__ButtonCodeType*            ButtonCode                     0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Button sub type.
///   <br/>
///   <br/>
///   <b>optional for button types buynow and cart only</b>
///   <br/>
///   <br/>
///   Must Be either PRODUCTS or SERVICES
/// </BLOCKQUOTE></PRE>
/// Element "ButtonSubType" of XSD type "urn:ebay:apis:eBLBaseComponents":ButtonSubTypeType.
    enum ns3__ButtonSubTypeType*         ButtonSubType                  0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Button Variable information
///   <br/>
///   <br/>
///   <b>At least one required recurring</b>
///   <br/>
///   <br/>
///   Character length and limitations: 63 single-byte alphanumeric characters
/// </BLOCKQUOTE></PRE>
/// Vector of std::string of length 0..1000.
    std::vector<std::string            > ButtonVar                      0:1000;	///< Elements.
/// Vector of ns1__OptionDetailsType* of length 0..5.
    std::vector<ns1__OptionDetailsType*> OptionDetails                  0:5;	///< Elements.
/// <PRE><BLOCKQUOTE>
///   Details of each option for the button.
///   <br/>
///   <br/>
///   <b>Optional</b>
///   <br/>
/// </BLOCKQUOTE></PRE>
/// Vector of std::string of length 0..2.
    std::vector<std::string            > TextBox                        0:2;	///< Elements.
/// <PRE><BLOCKQUOTE>
///   Button image to use.
///   <br/>
///   <br/>
///   <b>Optional</b>
///   <br/>
///   <br/>
///   Must be one of: REG, SML, or CC
/// </BLOCKQUOTE></PRE>
/// Element "ButtonImage" of XSD type "urn:ebay:apis:eBLBaseComponents":ButtonImageType.
    enum ns3__ButtonImageType*           ButtonImage                    0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Button URL for custom button image.
///   <br/>
///   <br/>
///   <b>Optional</b>
///   <br/>
///   <br/>
///   Character length and limitations: 127 single-byte alphanumeric characters
/// </BLOCKQUOTE></PRE>
/// Element "ButtonImageURL" of XSD type xs:string.
    std::string*                         ButtonImageURL                 0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Text to use on Buy Now Button.
///   <br/>
///   <br/>
///   <b>Optional</b>
///   <br/>
///   <br/>
///   Must be either BUYNOW or PAYNOW
/// </BLOCKQUOTE></PRE>
/// Element "BuyNowText" of XSD type "urn:ebay:apis:eBLBaseComponents":BuyNowTextType.
    enum ns3__BuyNowTextType*            BuyNowText                     0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Text to use on Subscribe button.
///   <br/>
///   <br/>
///   <b>Optional</b>
///   <br/>
///   <br/>
///   Must be either BUYNOW or SUBSCRIBE
/// </BLOCKQUOTE></PRE>
/// Element "SubscribeText" of XSD type "urn:ebay:apis:eBLBaseComponents":SubscribeTextType.
    enum ns3__SubscribeTextType*         SubscribeText                  0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Button Country.
///   <br/>
///   <br/>
///   <b>Optional</b>
///   <br/>
///   <br/>
///   Must be valid ISO country code
/// </BLOCKQUOTE></PRE>
/// Element "ButtonCountry" of XSD type "urn:ebay:apis:eBLBaseComponents":CountryCodeType.
    enum ns3__CountryCodeType*           ButtonCountry                  0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Button language code.
///   <br/>
///   <br/>
///   <b>Optional</b>
///   <br/>
///   <br/>
///   Character length and limitations: 2 single-byte alphanumeric characters
/// </BLOCKQUOTE></PRE>
/// Element "ButtonLanguage" of XSD type xs:string.
    std::string*                         ButtonLanguage                 0;	///< Optional element.
};

/// @brief "urn:ebay:api:PayPalAPI":BMUpdateButtonResponseType is a complexType with complexContent extension of XSD type "urn:ebay:apis:eBLBaseComponents":AbstractResponseType.
///
/// class ns1__BMUpdateButtonResponseType operations:
/// - ns1__BMUpdateButtonResponseType* soap_new_ns1__BMUpdateButtonResponseType(soap*) allocate and default initialize
/// - ns1__BMUpdateButtonResponseType* soap_new_ns1__BMUpdateButtonResponseType(soap*, int num) allocate array and default initialize values
/// - ns1__BMUpdateButtonResponseType* soap_new_req_ns1__BMUpdateButtonResponseType(soap*, ...) allocate, set required members
/// - ns1__BMUpdateButtonResponseType* soap_new_set_ns1__BMUpdateButtonResponseType(soap*, ...) allocate, set all public members
/// - ns1__BMUpdateButtonResponseType::soap_default(soap*) default initialize members
/// - int soap_read_ns1__BMUpdateButtonResponseType(soap*, ns1__BMUpdateButtonResponseType*) deserialize from a stream
/// - int soap_write_ns1__BMUpdateButtonResponseType(soap*, ns1__BMUpdateButtonResponseType*) serialize to a stream
/// - ns1__BMUpdateButtonResponseType* ns1__BMUpdateButtonResponseType::soap_dup(soap*) returns deep copy of ns1__BMUpdateButtonResponseType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__BMUpdateButtonResponseType::soap_del() deep deletes ns1__BMUpdateButtonResponseType data members, use only after ns1__BMUpdateButtonResponseType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__BMUpdateButtonResponseType : public ns3__AbstractResponseType
{ public:
/*  INHERITED FROM ns3__AbstractResponseType:
/// <PRE><BLOCKQUOTE>
///   This value represents the date and time (GMT) when the response was generated by a service provider (as a result of processing of a request).
/// </BLOCKQUOTE></PRE>
/// Element "Timestamp" of XSD type xs:dateTime.
    time_t*                              Timestamp                      0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Application level acknowledgement code.
/// </BLOCKQUOTE></PRE>
/// Element "Ack" of XSD type "urn:ebay:apis:eBLBaseComponents":AckCodeType.
    enum ns3__AckCodeType                Ack                            1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   CorrelationID may be used optionally with an application level acknowledgement.
/// </BLOCKQUOTE></PRE>
/// Element "CorrelationID" of XSD type xs:string.
    std::string*                         CorrelationID                  0;	///< Optional element.
/// Vector of ns3__ErrorType* of length 0..unbounded.
    std::vector<ns3__ErrorType*        > Errors                         0;	///< Elements.
/// <PRE><BLOCKQUOTE>
///   This refers to the version of the response payload schema.
/// </BLOCKQUOTE></PRE>
/// Element "Version" of XSD type xs:string.
    std::string                          Version                        1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   This refers to the specific software build that was used in the deployment for processing the request and generating the response.
/// </BLOCKQUOTE></PRE>
/// Element "Build" of XSD type xs:string.
    std::string                          Build                          1;	///< Required element.
/// @todo <any namespace="##local" minOccurs="0">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
    _XML                                 __any                         0;	///< Catch any element content in XML string.
    END OF INHERITED FROM ns3__AbstractResponseType */
/// Element "Website" of XSD type xs:string.
    std::string                          Website                        1;	///< Required element.
/// Element "Email" of XSD type xs:string.
    std::string*                         Email                          0;	///< Optional element.
/// Element "Mobile" of XSD type xs:string.
    std::string*                         Mobile                         0;	///< Optional element.
/// Element "HostedButtonID" of XSD type xs:string.
    std::string*                         HostedButtonID                 0;	///< Optional element.
};

/// @brief "urn:ebay:api:PayPalAPI":BMManageButtonStatusRequestType is a complexType with complexContent extension of XSD type "urn:ebay:apis:eBLBaseComponents":AbstractRequestType.
///
/// class ns1__BMManageButtonStatusRequestType operations:
/// - ns1__BMManageButtonStatusRequestType* soap_new_ns1__BMManageButtonStatusRequestType(soap*) allocate and default initialize
/// - ns1__BMManageButtonStatusRequestType* soap_new_ns1__BMManageButtonStatusRequestType(soap*, int num) allocate array and default initialize values
/// - ns1__BMManageButtonStatusRequestType* soap_new_req_ns1__BMManageButtonStatusRequestType(soap*, ...) allocate, set required members
/// - ns1__BMManageButtonStatusRequestType* soap_new_set_ns1__BMManageButtonStatusRequestType(soap*, ...) allocate, set all public members
/// - ns1__BMManageButtonStatusRequestType::soap_default(soap*) default initialize members
/// - int soap_read_ns1__BMManageButtonStatusRequestType(soap*, ns1__BMManageButtonStatusRequestType*) deserialize from a stream
/// - int soap_write_ns1__BMManageButtonStatusRequestType(soap*, ns1__BMManageButtonStatusRequestType*) serialize to a stream
/// - ns1__BMManageButtonStatusRequestType* ns1__BMManageButtonStatusRequestType::soap_dup(soap*) returns deep copy of ns1__BMManageButtonStatusRequestType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__BMManageButtonStatusRequestType::soap_del() deep deletes ns1__BMManageButtonStatusRequestType data members, use only after ns1__BMManageButtonStatusRequestType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__BMManageButtonStatusRequestType : public ns3__AbstractRequestType
{ public:
/*  INHERITED FROM ns3__AbstractRequestType:
/// <PRE><BLOCKQUOTE>
///   This specifies the required detail level that is needed by a client application pertaining to
///   a particular data component (e.g., Item, Transaction, etc.). The detail level is specified in
///   the DetailLevelCodeType which has all the enumerated values of the detail level for each component.
/// </BLOCKQUOTE></PRE>
/// Vector of enum ns3__DetailLevelCodeType of length 0..unbounded.
    std::vector<enum ns3__DetailLevelCodeType> DetailLevel                    0;	///< Elements.
/// <PRE><BLOCKQUOTE>
///   This should be the standard RFC 3066 language identification tag, e.g., en_US.
/// </BLOCKQUOTE></PRE>
/// Element "ErrorLanguage" of XSD type xs:string.
    std::string*                         ErrorLanguage                  0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   This refers to the version of the request payload schema.
/// </BLOCKQUOTE></PRE>
/// Element "Version" of XSD type xs:string.
    std::string                          Version                        1;	///< Required element.
/// @todo <any namespace="##local" minOccurs="0">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
    _XML                                 __any                         0;	///< Catch any element content in XML string.
    END OF INHERITED FROM ns3__AbstractRequestType */
/// <PRE><BLOCKQUOTE>
///   Button ID of Hosted button.
///   <br/>
///   <br/>
///   <b>Required</b>
///   <br/>
///   <br/>
///   Character length and limitations: 10 single-byte numeric characters
/// </BLOCKQUOTE></PRE>
/// Element "HostedButtonID" of XSD type xs:string.
    std::string*                         HostedButtonID                 0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Requested Status change for hosted button.
///   <br/>
///   <br/>
///   <b>Required</b>
///   <br/>
///   <br/>
///   Character length and limitations: 1 single-byte alphanumeric characters
/// </BLOCKQUOTE></PRE>
/// Element "ButtonStatus" of XSD type "urn:ebay:apis:eBLBaseComponents":ButtonStatusType.
    enum ns3__ButtonStatusType*          ButtonStatus                   0;	///< Optional element.
};

/// @brief "urn:ebay:api:PayPalAPI":BMManageButtonStatusResponseType is a complexType with complexContent extension of XSD type "urn:ebay:apis:eBLBaseComponents":AbstractResponseType.
///
/// class ns1__BMManageButtonStatusResponseType operations:
/// - ns1__BMManageButtonStatusResponseType* soap_new_ns1__BMManageButtonStatusResponseType(soap*) allocate and default initialize
/// - ns1__BMManageButtonStatusResponseType* soap_new_ns1__BMManageButtonStatusResponseType(soap*, int num) allocate array and default initialize values
/// - ns1__BMManageButtonStatusResponseType* soap_new_req_ns1__BMManageButtonStatusResponseType(soap*, ...) allocate, set required members
/// - ns1__BMManageButtonStatusResponseType* soap_new_set_ns1__BMManageButtonStatusResponseType(soap*, ...) allocate, set all public members
/// - ns1__BMManageButtonStatusResponseType::soap_default(soap*) default initialize members
/// - int soap_read_ns1__BMManageButtonStatusResponseType(soap*, ns1__BMManageButtonStatusResponseType*) deserialize from a stream
/// - int soap_write_ns1__BMManageButtonStatusResponseType(soap*, ns1__BMManageButtonStatusResponseType*) serialize to a stream
/// - ns1__BMManageButtonStatusResponseType* ns1__BMManageButtonStatusResponseType::soap_dup(soap*) returns deep copy of ns1__BMManageButtonStatusResponseType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__BMManageButtonStatusResponseType::soap_del() deep deletes ns1__BMManageButtonStatusResponseType data members, use only after ns1__BMManageButtonStatusResponseType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__BMManageButtonStatusResponseType : public ns3__AbstractResponseType
{ public:
/*  INHERITED FROM ns3__AbstractResponseType:
/// <PRE><BLOCKQUOTE>
///   This value represents the date and time (GMT) when the response was generated by a service provider (as a result of processing of a request).
/// </BLOCKQUOTE></PRE>
/// Element "Timestamp" of XSD type xs:dateTime.
    time_t*                              Timestamp                      0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Application level acknowledgement code.
/// </BLOCKQUOTE></PRE>
/// Element "Ack" of XSD type "urn:ebay:apis:eBLBaseComponents":AckCodeType.
    enum ns3__AckCodeType                Ack                            1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   CorrelationID may be used optionally with an application level acknowledgement.
/// </BLOCKQUOTE></PRE>
/// Element "CorrelationID" of XSD type xs:string.
    std::string*                         CorrelationID                  0;	///< Optional element.
/// Vector of ns3__ErrorType* of length 0..unbounded.
    std::vector<ns3__ErrorType*        > Errors                         0;	///< Elements.
/// <PRE><BLOCKQUOTE>
///   This refers to the version of the response payload schema.
/// </BLOCKQUOTE></PRE>
/// Element "Version" of XSD type xs:string.
    std::string                          Version                        1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   This refers to the specific software build that was used in the deployment for processing the request and generating the response.
/// </BLOCKQUOTE></PRE>
/// Element "Build" of XSD type xs:string.
    std::string                          Build                          1;	///< Required element.
/// @todo <any namespace="##local" minOccurs="0">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
    _XML                                 __any                         0;	///< Catch any element content in XML string.
    END OF INHERITED FROM ns3__AbstractResponseType */
};

/// @brief "urn:ebay:api:PayPalAPI":BMGetButtonDetailsRequestType is a complexType with complexContent extension of XSD type "urn:ebay:apis:eBLBaseComponents":AbstractRequestType.
///
/// class ns1__BMGetButtonDetailsRequestType operations:
/// - ns1__BMGetButtonDetailsRequestType* soap_new_ns1__BMGetButtonDetailsRequestType(soap*) allocate and default initialize
/// - ns1__BMGetButtonDetailsRequestType* soap_new_ns1__BMGetButtonDetailsRequestType(soap*, int num) allocate array and default initialize values
/// - ns1__BMGetButtonDetailsRequestType* soap_new_req_ns1__BMGetButtonDetailsRequestType(soap*, ...) allocate, set required members
/// - ns1__BMGetButtonDetailsRequestType* soap_new_set_ns1__BMGetButtonDetailsRequestType(soap*, ...) allocate, set all public members
/// - ns1__BMGetButtonDetailsRequestType::soap_default(soap*) default initialize members
/// - int soap_read_ns1__BMGetButtonDetailsRequestType(soap*, ns1__BMGetButtonDetailsRequestType*) deserialize from a stream
/// - int soap_write_ns1__BMGetButtonDetailsRequestType(soap*, ns1__BMGetButtonDetailsRequestType*) serialize to a stream
/// - ns1__BMGetButtonDetailsRequestType* ns1__BMGetButtonDetailsRequestType::soap_dup(soap*) returns deep copy of ns1__BMGetButtonDetailsRequestType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__BMGetButtonDetailsRequestType::soap_del() deep deletes ns1__BMGetButtonDetailsRequestType data members, use only after ns1__BMGetButtonDetailsRequestType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__BMGetButtonDetailsRequestType : public ns3__AbstractRequestType
{ public:
/*  INHERITED FROM ns3__AbstractRequestType:
/// <PRE><BLOCKQUOTE>
///   This specifies the required detail level that is needed by a client application pertaining to
///   a particular data component (e.g., Item, Transaction, etc.). The detail level is specified in
///   the DetailLevelCodeType which has all the enumerated values of the detail level for each component.
/// </BLOCKQUOTE></PRE>
/// Vector of enum ns3__DetailLevelCodeType of length 0..unbounded.
    std::vector<enum ns3__DetailLevelCodeType> DetailLevel                    0;	///< Elements.
/// <PRE><BLOCKQUOTE>
///   This should be the standard RFC 3066 language identification tag, e.g., en_US.
/// </BLOCKQUOTE></PRE>
/// Element "ErrorLanguage" of XSD type xs:string.
    std::string*                         ErrorLanguage                  0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   This refers to the version of the request payload schema.
/// </BLOCKQUOTE></PRE>
/// Element "Version" of XSD type xs:string.
    std::string                          Version                        1;	///< Required element.
/// @todo <any namespace="##local" minOccurs="0">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
    _XML                                 __any                         0;	///< Catch any element content in XML string.
    END OF INHERITED FROM ns3__AbstractRequestType */
/// <PRE><BLOCKQUOTE>
///   Button ID of button to return.
///   <br/>
///   <br/>
///   <b>Required</b>
///   <br/>
///   <br/>
///   Character length and limitations: 10 single-byte numeric characters
/// </BLOCKQUOTE></PRE>
/// Element "HostedButtonID" of XSD type xs:string.
    std::string                          HostedButtonID                 1;	///< Required element.
};

/// @brief "urn:ebay:api:PayPalAPI":BMGetButtonDetailsResponseType is a complexType with complexContent extension of XSD type "urn:ebay:apis:eBLBaseComponents":AbstractResponseType.
///
/// class ns1__BMGetButtonDetailsResponseType operations:
/// - ns1__BMGetButtonDetailsResponseType* soap_new_ns1__BMGetButtonDetailsResponseType(soap*) allocate and default initialize
/// - ns1__BMGetButtonDetailsResponseType* soap_new_ns1__BMGetButtonDetailsResponseType(soap*, int num) allocate array and default initialize values
/// - ns1__BMGetButtonDetailsResponseType* soap_new_req_ns1__BMGetButtonDetailsResponseType(soap*, ...) allocate, set required members
/// - ns1__BMGetButtonDetailsResponseType* soap_new_set_ns1__BMGetButtonDetailsResponseType(soap*, ...) allocate, set all public members
/// - ns1__BMGetButtonDetailsResponseType::soap_default(soap*) default initialize members
/// - int soap_read_ns1__BMGetButtonDetailsResponseType(soap*, ns1__BMGetButtonDetailsResponseType*) deserialize from a stream
/// - int soap_write_ns1__BMGetButtonDetailsResponseType(soap*, ns1__BMGetButtonDetailsResponseType*) serialize to a stream
/// - ns1__BMGetButtonDetailsResponseType* ns1__BMGetButtonDetailsResponseType::soap_dup(soap*) returns deep copy of ns1__BMGetButtonDetailsResponseType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__BMGetButtonDetailsResponseType::soap_del() deep deletes ns1__BMGetButtonDetailsResponseType data members, use only after ns1__BMGetButtonDetailsResponseType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__BMGetButtonDetailsResponseType : public ns3__AbstractResponseType
{ public:
/*  INHERITED FROM ns3__AbstractResponseType:
/// <PRE><BLOCKQUOTE>
///   This value represents the date and time (GMT) when the response was generated by a service provider (as a result of processing of a request).
/// </BLOCKQUOTE></PRE>
/// Element "Timestamp" of XSD type xs:dateTime.
    time_t*                              Timestamp                      0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Application level acknowledgement code.
/// </BLOCKQUOTE></PRE>
/// Element "Ack" of XSD type "urn:ebay:apis:eBLBaseComponents":AckCodeType.
    enum ns3__AckCodeType                Ack                            1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   CorrelationID may be used optionally with an application level acknowledgement.
/// </BLOCKQUOTE></PRE>
/// Element "CorrelationID" of XSD type xs:string.
    std::string*                         CorrelationID                  0;	///< Optional element.
/// Vector of ns3__ErrorType* of length 0..unbounded.
    std::vector<ns3__ErrorType*        > Errors                         0;	///< Elements.
/// <PRE><BLOCKQUOTE>
///   This refers to the version of the response payload schema.
/// </BLOCKQUOTE></PRE>
/// Element "Version" of XSD type xs:string.
    std::string                          Version                        1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   This refers to the specific software build that was used in the deployment for processing the request and generating the response.
/// </BLOCKQUOTE></PRE>
/// Element "Build" of XSD type xs:string.
    std::string                          Build                          1;	///< Required element.
/// @todo <any namespace="##local" minOccurs="0">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
    _XML                                 __any                         0;	///< Catch any element content in XML string.
    END OF INHERITED FROM ns3__AbstractResponseType */
/// Element "Website" of XSD type xs:string.
    std::string*                         Website                        0;	///< Optional element.
/// Element "Email" of XSD type xs:string.
    std::string*                         Email                          0;	///< Optional element.
/// Element "Mobile" of XSD type xs:string.
    std::string*                         Mobile                         0;	///< Optional element.
/// Element "HostedButtonID" of XSD type xs:string.
    std::string*                         HostedButtonID                 0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Type of button.
///   <br/>
///   <br/>
///   One of the following: BUYNOW, CART, GIFTCERTIFICATE. SUBSCRIBE, PAYMENTPLAN, AUTOBILLING, DONATE, VIEWCART or UNSUBSCRIBE
/// </BLOCKQUOTE></PRE>
/// Element "ButtonType" of XSD type "urn:ebay:apis:eBLBaseComponents":ButtonTypeType.
    enum ns3__ButtonTypeType*            ButtonType                     0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Type of button code.
///   <br/>
///   <br/>
///   One of the following: hosted, encrypted or cleartext
/// </BLOCKQUOTE></PRE>
/// Element "ButtonCode" of XSD type "urn:ebay:apis:eBLBaseComponents":ButtonCodeType.
    enum ns3__ButtonCodeType*            ButtonCode                     0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Button sub type.
///   <br/>
///   <br/>
///   <b>optional for button types buynow and cart only</b>
///   <br/>
///   <br/>
///   Either PRODUCTS or SERVICES
/// </BLOCKQUOTE></PRE>
/// Element "ButtonSubType" of XSD type "urn:ebay:apis:eBLBaseComponents":ButtonSubTypeType.
    enum ns3__ButtonSubTypeType*         ButtonSubType                  0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Button Variable information
///   <br/>
///   <br/>
///   Character length and limitations: 63 single-byte alphanumeric characters
/// </BLOCKQUOTE></PRE>
/// Vector of std::string of length 0..1000.
    std::vector<std::string            > ButtonVar                      0:1000;	///< Elements.
/// Vector of ns1__OptionDetailsType* of length 0..5.
    std::vector<ns1__OptionDetailsType*> OptionDetails                  0:5;	///< Elements.
/// <PRE><BLOCKQUOTE>
///   Text field
///   <br/>
///   <br/>
/// </BLOCKQUOTE></PRE>
/// Vector of std::string of length 0..2.
    std::vector<std::string            > TextBox                        0:2;	///< Elements.
/// <PRE><BLOCKQUOTE>
///   Button image to use.
///   <br/>
///   <br/>
///   One of: REG, SML, or CC
/// </BLOCKQUOTE></PRE>
/// Element "ButtonImage" of XSD type "urn:ebay:apis:eBLBaseComponents":ButtonImageType.
    enum ns3__ButtonImageType*           ButtonImage                    0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Button URL for custom button image.
///   <br/>
///   <br/>
/// </BLOCKQUOTE></PRE>
/// Element "ButtonImageURL" of XSD type xs:string.
    std::string*                         ButtonImageURL                 0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Text to use on Buy Now Button.
///   <br/>
///   <br/>
///   Either BUYNOW or PAYNOW
/// </BLOCKQUOTE></PRE>
/// Element "BuyNowText" of XSD type "urn:ebay:apis:eBLBaseComponents":BuyNowTextType.
    enum ns3__BuyNowTextType*            BuyNowText                     0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Text to use on Subscribe button.
///   <br/>
///   <br/>
///   Must be either BUYNOW or SUBSCRIBE
/// </BLOCKQUOTE></PRE>
/// Element "SubscribeText" of XSD type "urn:ebay:apis:eBLBaseComponents":SubscribeTextType.
    enum ns3__SubscribeTextType*         SubscribeText                  0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Button Country.
///   <br/>
///   <br/>
///   Valid ISO country code or 'International'
/// </BLOCKQUOTE></PRE>
/// Element "ButtonCountry" of XSD type "urn:ebay:apis:eBLBaseComponents":CountryCodeType.
    enum ns3__CountryCodeType*           ButtonCountry                  0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Button language code.
///   <br/>
///   <br/>
///   Character length and limitations: 3 single-byte alphanumeric characters
/// </BLOCKQUOTE></PRE>
/// Element "ButtonLanguage" of XSD type xs:string.
    std::string*                         ButtonLanguage                 0;	///< Optional element.
};

/// @brief "urn:ebay:api:PayPalAPI":BMSetInventoryRequestType is a complexType with complexContent extension of XSD type "urn:ebay:apis:eBLBaseComponents":AbstractRequestType.
///
/// class ns1__BMSetInventoryRequestType operations:
/// - ns1__BMSetInventoryRequestType* soap_new_ns1__BMSetInventoryRequestType(soap*) allocate and default initialize
/// - ns1__BMSetInventoryRequestType* soap_new_ns1__BMSetInventoryRequestType(soap*, int num) allocate array and default initialize values
/// - ns1__BMSetInventoryRequestType* soap_new_req_ns1__BMSetInventoryRequestType(soap*, ...) allocate, set required members
/// - ns1__BMSetInventoryRequestType* soap_new_set_ns1__BMSetInventoryRequestType(soap*, ...) allocate, set all public members
/// - ns1__BMSetInventoryRequestType::soap_default(soap*) default initialize members
/// - int soap_read_ns1__BMSetInventoryRequestType(soap*, ns1__BMSetInventoryRequestType*) deserialize from a stream
/// - int soap_write_ns1__BMSetInventoryRequestType(soap*, ns1__BMSetInventoryRequestType*) serialize to a stream
/// - ns1__BMSetInventoryRequestType* ns1__BMSetInventoryRequestType::soap_dup(soap*) returns deep copy of ns1__BMSetInventoryRequestType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__BMSetInventoryRequestType::soap_del() deep deletes ns1__BMSetInventoryRequestType data members, use only after ns1__BMSetInventoryRequestType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__BMSetInventoryRequestType : public ns3__AbstractRequestType
{ public:
/*  INHERITED FROM ns3__AbstractRequestType:
/// <PRE><BLOCKQUOTE>
///   This specifies the required detail level that is needed by a client application pertaining to
///   a particular data component (e.g., Item, Transaction, etc.). The detail level is specified in
///   the DetailLevelCodeType which has all the enumerated values of the detail level for each component.
/// </BLOCKQUOTE></PRE>
/// Vector of enum ns3__DetailLevelCodeType of length 0..unbounded.
    std::vector<enum ns3__DetailLevelCodeType> DetailLevel                    0;	///< Elements.
/// <PRE><BLOCKQUOTE>
///   This should be the standard RFC 3066 language identification tag, e.g., en_US.
/// </BLOCKQUOTE></PRE>
/// Element "ErrorLanguage" of XSD type xs:string.
    std::string*                         ErrorLanguage                  0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   This refers to the version of the request payload schema.
/// </BLOCKQUOTE></PRE>
/// Element "Version" of XSD type xs:string.
    std::string                          Version                        1;	///< Required element.
/// @todo <any namespace="##local" minOccurs="0">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
    _XML                                 __any                         0;	///< Catch any element content in XML string.
    END OF INHERITED FROM ns3__AbstractRequestType */
/// <PRE><BLOCKQUOTE>
///   Hosted Button ID of button you wish to change.
///   <br/>
///   <br/>
///   <b>Required</b>
///   <br/>
///   <br/>
///   Character length and limitations: 10 single-byte numeric characters
/// </BLOCKQUOTE></PRE>
/// Element "HostedButtonID" of XSD type xs:string.
    std::string                          HostedButtonID                 1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Is Inventory tracked.
///   <br/>
///   <br/>
///   <b>Required</b>
///   <br/>
///   <br/>
///   0 or 1
/// </BLOCKQUOTE></PRE>
/// Element "TrackInv" of XSD type xs:string.
    std::string                          TrackInv                       1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Is PNL Tracked.
///   <br/>
///   <br/>
///   <b>Required</b>
///   <br/>
///   <br/>
///   0 or 1
/// </BLOCKQUOTE></PRE>
/// Element "TrackPnl" of XSD type xs:string.
    std::string                          TrackPnl                       1;	///< Required element.
/// Element reference "urn:ebay:api:PayPalAPI:""urn:ebay:apis:eBLBaseComponents":ItemTrackingDetails.
    ns3__ItemTrackingDetailsType*        ns3__ItemTrackingDetails       0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Option Index.
///   <br/>
///   <br/>
///   <b>Optional</b>
///   <br/>
///   <br/>
///   Character length and limitations: 1 single-byte alphanumeric characters
/// </BLOCKQUOTE></PRE>
/// Element "OptionIndex" of XSD type xs:string.
    std::string*                         OptionIndex                    0;	///< Optional element.
/// Vector of ns3__OptionTrackingDetailsType* element refs of length 0..10.
    std::vector<ns3__OptionTrackingDetailsType*> ns3__OptionTrackingDetails     0:10;	///< Elements.
/// <PRE><BLOCKQUOTE>
///   URL of page to display when an item is soldout.
///   <br/>
///   <br/>
///   <b>Optional</b>
///   <br/>
///   <br/>
///   Character length and limitations: 127 single-byte alphanumeric characters
/// </BLOCKQUOTE></PRE>
/// Element "SoldoutURL" of XSD type xs:string.
    std::string*                         SoldoutURL                     0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Whether to use the same digital download key repeatedly.
///   <br/>
///   <br/>
///   <b>Optional</b>
/// </BLOCKQUOTE></PRE>
/// Element "ReuseDigitalDownloadKeys" of XSD type xs:string.
    std::string*                         ReuseDigitalDownloadKeys       0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Whether to append these keys to the list or not (replace).
///   <br/>
///   <br/>
///   <b>Optional</b>
/// </BLOCKQUOTE></PRE>
/// Element "AppendDigitalDownloadKeys" of XSD type xs:string.
    std::string*                         AppendDigitalDownloadKeys      0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Zero or more digital download keys to distribute to customers after transaction is completed.
///   <br/>
///   <br/>
///   <b>Optional</b>
///   <br/>
///   <br/>
///   Character length and limitations: 1000 single-byte alphanumeric characters
/// </BLOCKQUOTE></PRE>
/// Vector of std::string of length 0..1000.
    std::vector<std::string            > DigitalDownloadKeys            0:1000;	///< Elements.
};

/// @brief "urn:ebay:api:PayPalAPI":BMSetInventoryResponseType is a complexType with complexContent extension of XSD type "urn:ebay:apis:eBLBaseComponents":AbstractResponseType.
///
/// class ns1__BMSetInventoryResponseType operations:
/// - ns1__BMSetInventoryResponseType* soap_new_ns1__BMSetInventoryResponseType(soap*) allocate and default initialize
/// - ns1__BMSetInventoryResponseType* soap_new_ns1__BMSetInventoryResponseType(soap*, int num) allocate array and default initialize values
/// - ns1__BMSetInventoryResponseType* soap_new_req_ns1__BMSetInventoryResponseType(soap*, ...) allocate, set required members
/// - ns1__BMSetInventoryResponseType* soap_new_set_ns1__BMSetInventoryResponseType(soap*, ...) allocate, set all public members
/// - ns1__BMSetInventoryResponseType::soap_default(soap*) default initialize members
/// - int soap_read_ns1__BMSetInventoryResponseType(soap*, ns1__BMSetInventoryResponseType*) deserialize from a stream
/// - int soap_write_ns1__BMSetInventoryResponseType(soap*, ns1__BMSetInventoryResponseType*) serialize to a stream
/// - ns1__BMSetInventoryResponseType* ns1__BMSetInventoryResponseType::soap_dup(soap*) returns deep copy of ns1__BMSetInventoryResponseType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__BMSetInventoryResponseType::soap_del() deep deletes ns1__BMSetInventoryResponseType data members, use only after ns1__BMSetInventoryResponseType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__BMSetInventoryResponseType : public ns3__AbstractResponseType
{ public:
/*  INHERITED FROM ns3__AbstractResponseType:
/// <PRE><BLOCKQUOTE>
///   This value represents the date and time (GMT) when the response was generated by a service provider (as a result of processing of a request).
/// </BLOCKQUOTE></PRE>
/// Element "Timestamp" of XSD type xs:dateTime.
    time_t*                              Timestamp                      0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Application level acknowledgement code.
/// </BLOCKQUOTE></PRE>
/// Element "Ack" of XSD type "urn:ebay:apis:eBLBaseComponents":AckCodeType.
    enum ns3__AckCodeType                Ack                            1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   CorrelationID may be used optionally with an application level acknowledgement.
/// </BLOCKQUOTE></PRE>
/// Element "CorrelationID" of XSD type xs:string.
    std::string*                         CorrelationID                  0;	///< Optional element.
/// Vector of ns3__ErrorType* of length 0..unbounded.
    std::vector<ns3__ErrorType*        > Errors                         0;	///< Elements.
/// <PRE><BLOCKQUOTE>
///   This refers to the version of the response payload schema.
/// </BLOCKQUOTE></PRE>
/// Element "Version" of XSD type xs:string.
    std::string                          Version                        1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   This refers to the specific software build that was used in the deployment for processing the request and generating the response.
/// </BLOCKQUOTE></PRE>
/// Element "Build" of XSD type xs:string.
    std::string                          Build                          1;	///< Required element.
/// @todo <any namespace="##local" minOccurs="0">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
    _XML                                 __any                         0;	///< Catch any element content in XML string.
    END OF INHERITED FROM ns3__AbstractResponseType */
};

/// @brief "urn:ebay:api:PayPalAPI":BMGetInventoryRequestType is a complexType with complexContent extension of XSD type "urn:ebay:apis:eBLBaseComponents":AbstractRequestType.
///
/// class ns1__BMGetInventoryRequestType operations:
/// - ns1__BMGetInventoryRequestType* soap_new_ns1__BMGetInventoryRequestType(soap*) allocate and default initialize
/// - ns1__BMGetInventoryRequestType* soap_new_ns1__BMGetInventoryRequestType(soap*, int num) allocate array and default initialize values
/// - ns1__BMGetInventoryRequestType* soap_new_req_ns1__BMGetInventoryRequestType(soap*, ...) allocate, set required members
/// - ns1__BMGetInventoryRequestType* soap_new_set_ns1__BMGetInventoryRequestType(soap*, ...) allocate, set all public members
/// - ns1__BMGetInventoryRequestType::soap_default(soap*) default initialize members
/// - int soap_read_ns1__BMGetInventoryRequestType(soap*, ns1__BMGetInventoryRequestType*) deserialize from a stream
/// - int soap_write_ns1__BMGetInventoryRequestType(soap*, ns1__BMGetInventoryRequestType*) serialize to a stream
/// - ns1__BMGetInventoryRequestType* ns1__BMGetInventoryRequestType::soap_dup(soap*) returns deep copy of ns1__BMGetInventoryRequestType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__BMGetInventoryRequestType::soap_del() deep deletes ns1__BMGetInventoryRequestType data members, use only after ns1__BMGetInventoryRequestType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__BMGetInventoryRequestType : public ns3__AbstractRequestType
{ public:
/*  INHERITED FROM ns3__AbstractRequestType:
/// <PRE><BLOCKQUOTE>
///   This specifies the required detail level that is needed by a client application pertaining to
///   a particular data component (e.g., Item, Transaction, etc.). The detail level is specified in
///   the DetailLevelCodeType which has all the enumerated values of the detail level for each component.
/// </BLOCKQUOTE></PRE>
/// Vector of enum ns3__DetailLevelCodeType of length 0..unbounded.
    std::vector<enum ns3__DetailLevelCodeType> DetailLevel                    0;	///< Elements.
/// <PRE><BLOCKQUOTE>
///   This should be the standard RFC 3066 language identification tag, e.g., en_US.
/// </BLOCKQUOTE></PRE>
/// Element "ErrorLanguage" of XSD type xs:string.
    std::string*                         ErrorLanguage                  0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   This refers to the version of the request payload schema.
/// </BLOCKQUOTE></PRE>
/// Element "Version" of XSD type xs:string.
    std::string                          Version                        1;	///< Required element.
/// @todo <any namespace="##local" minOccurs="0">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
    _XML                                 __any                         0;	///< Catch any element content in XML string.
    END OF INHERITED FROM ns3__AbstractRequestType */
/// <PRE><BLOCKQUOTE>
///   Hosted Button ID of the button to return inventory for.
///   <br/>
///   <br/>
///   <b>Required</b>
///   <br/>
///   <br/>
///   Character length and limitations: 10 single-byte numeric characters
/// </BLOCKQUOTE></PRE>
/// Element "HostedButtonID" of XSD type xs:string.
    std::string                          HostedButtonID                 1;	///< Required element.
};

/// @brief "urn:ebay:api:PayPalAPI":BMGetInventoryResponseType is a complexType with complexContent extension of XSD type "urn:ebay:apis:eBLBaseComponents":AbstractResponseType.
///
/// class ns1__BMGetInventoryResponseType operations:
/// - ns1__BMGetInventoryResponseType* soap_new_ns1__BMGetInventoryResponseType(soap*) allocate and default initialize
/// - ns1__BMGetInventoryResponseType* soap_new_ns1__BMGetInventoryResponseType(soap*, int num) allocate array and default initialize values
/// - ns1__BMGetInventoryResponseType* soap_new_req_ns1__BMGetInventoryResponseType(soap*, ...) allocate, set required members
/// - ns1__BMGetInventoryResponseType* soap_new_set_ns1__BMGetInventoryResponseType(soap*, ...) allocate, set all public members
/// - ns1__BMGetInventoryResponseType::soap_default(soap*) default initialize members
/// - int soap_read_ns1__BMGetInventoryResponseType(soap*, ns1__BMGetInventoryResponseType*) deserialize from a stream
/// - int soap_write_ns1__BMGetInventoryResponseType(soap*, ns1__BMGetInventoryResponseType*) serialize to a stream
/// - ns1__BMGetInventoryResponseType* ns1__BMGetInventoryResponseType::soap_dup(soap*) returns deep copy of ns1__BMGetInventoryResponseType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__BMGetInventoryResponseType::soap_del() deep deletes ns1__BMGetInventoryResponseType data members, use only after ns1__BMGetInventoryResponseType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__BMGetInventoryResponseType : public ns3__AbstractResponseType
{ public:
/*  INHERITED FROM ns3__AbstractResponseType:
/// <PRE><BLOCKQUOTE>
///   This value represents the date and time (GMT) when the response was generated by a service provider (as a result of processing of a request).
/// </BLOCKQUOTE></PRE>
/// Element "Timestamp" of XSD type xs:dateTime.
    time_t*                              Timestamp                      0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Application level acknowledgement code.
/// </BLOCKQUOTE></PRE>
/// Element "Ack" of XSD type "urn:ebay:apis:eBLBaseComponents":AckCodeType.
    enum ns3__AckCodeType                Ack                            1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   CorrelationID may be used optionally with an application level acknowledgement.
/// </BLOCKQUOTE></PRE>
/// Element "CorrelationID" of XSD type xs:string.
    std::string*                         CorrelationID                  0;	///< Optional element.
/// Vector of ns3__ErrorType* of length 0..unbounded.
    std::vector<ns3__ErrorType*        > Errors                         0;	///< Elements.
/// <PRE><BLOCKQUOTE>
///   This refers to the version of the response payload schema.
/// </BLOCKQUOTE></PRE>
/// Element "Version" of XSD type xs:string.
    std::string                          Version                        1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   This refers to the specific software build that was used in the deployment for processing the request and generating the response.
/// </BLOCKQUOTE></PRE>
/// Element "Build" of XSD type xs:string.
    std::string                          Build                          1;	///< Required element.
/// @todo <any namespace="##local" minOccurs="0">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
    _XML                                 __any                         0;	///< Catch any element content in XML string.
    END OF INHERITED FROM ns3__AbstractResponseType */
/// Element "HostedButtonID" of XSD type xs:string.
    std::string                          HostedButtonID                 1;	///< Required element.
/// Element "TrackInv" of XSD type xs:string.
    std::string                          TrackInv                       1;	///< Required element.
/// Element "TrackPnl" of XSD type xs:string.
    std::string                          TrackPnl                       1;	///< Required element.
/// Element reference "urn:ebay:api:PayPalAPI:""urn:ebay:apis:eBLBaseComponents":ItemTrackingDetails.
    ns3__ItemTrackingDetailsType*        ns3__ItemTrackingDetails       0;	///< Optional element.
/// Element "OptionIndex" of XSD type xs:string.
    std::string*                         OptionIndex                    0;	///< Optional element.
/// Element "OptionName" of XSD type xs:string.
    std::string*                         OptionName                     0;	///< Optional element.
/// Vector of ns3__OptionTrackingDetailsType* element refs of length 0..10.
    std::vector<ns3__OptionTrackingDetailsType*> ns3__OptionTrackingDetails     0:10;	///< Elements.
/// Element "SoldoutURL" of XSD type xs:string.
    std::string*                         SoldoutURL                     0;	///< Optional element.
/// Vector of std::string of length 0..1000.
    std::vector<std::string            > DigitalDownloadKeys            0:1000;	///< Elements.
};

/// @brief "urn:ebay:api:PayPalAPI":BMButtonSearchRequestType is a complexType with complexContent extension of XSD type "urn:ebay:apis:eBLBaseComponents":AbstractRequestType.
///
/// class ns1__BMButtonSearchRequestType operations:
/// - ns1__BMButtonSearchRequestType* soap_new_ns1__BMButtonSearchRequestType(soap*) allocate and default initialize
/// - ns1__BMButtonSearchRequestType* soap_new_ns1__BMButtonSearchRequestType(soap*, int num) allocate array and default initialize values
/// - ns1__BMButtonSearchRequestType* soap_new_req_ns1__BMButtonSearchRequestType(soap*, ...) allocate, set required members
/// - ns1__BMButtonSearchRequestType* soap_new_set_ns1__BMButtonSearchRequestType(soap*, ...) allocate, set all public members
/// - ns1__BMButtonSearchRequestType::soap_default(soap*) default initialize members
/// - int soap_read_ns1__BMButtonSearchRequestType(soap*, ns1__BMButtonSearchRequestType*) deserialize from a stream
/// - int soap_write_ns1__BMButtonSearchRequestType(soap*, ns1__BMButtonSearchRequestType*) serialize to a stream
/// - ns1__BMButtonSearchRequestType* ns1__BMButtonSearchRequestType::soap_dup(soap*) returns deep copy of ns1__BMButtonSearchRequestType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__BMButtonSearchRequestType::soap_del() deep deletes ns1__BMButtonSearchRequestType data members, use only after ns1__BMButtonSearchRequestType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__BMButtonSearchRequestType : public ns3__AbstractRequestType
{ public:
/*  INHERITED FROM ns3__AbstractRequestType:
/// <PRE><BLOCKQUOTE>
///   This specifies the required detail level that is needed by a client application pertaining to
///   a particular data component (e.g., Item, Transaction, etc.). The detail level is specified in
///   the DetailLevelCodeType which has all the enumerated values of the detail level for each component.
/// </BLOCKQUOTE></PRE>
/// Vector of enum ns3__DetailLevelCodeType of length 0..unbounded.
    std::vector<enum ns3__DetailLevelCodeType> DetailLevel                    0;	///< Elements.
/// <PRE><BLOCKQUOTE>
///   This should be the standard RFC 3066 language identification tag, e.g., en_US.
/// </BLOCKQUOTE></PRE>
/// Element "ErrorLanguage" of XSD type xs:string.
    std::string*                         ErrorLanguage                  0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   This refers to the version of the request payload schema.
/// </BLOCKQUOTE></PRE>
/// Element "Version" of XSD type xs:string.
    std::string                          Version                        1;	///< Required element.
/// @todo <any namespace="##local" minOccurs="0">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
    _XML                                 __any                         0;	///< Catch any element content in XML string.
    END OF INHERITED FROM ns3__AbstractRequestType */
/// <PRE><BLOCKQUOTE>
///   The earliest transaction date at which to start the search. No wildcards are allowed. <br/><br/>
///   <b>Required</b>
/// </BLOCKQUOTE></PRE>
/// Element "StartDate" of XSD type xs:dateTime.
    time_t*                              StartDate                      0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   The latest transaction date to be included in the search <br/><br/>
///   Optional
/// </BLOCKQUOTE></PRE>
/// Element "EndDate" of XSD type xs:dateTime.
    time_t*                              EndDate                        0;	///< Optional element.
};

/// @brief "urn:ebay:api:PayPalAPI":BMButtonSearchResponseType is a complexType with complexContent extension of XSD type "urn:ebay:apis:eBLBaseComponents":AbstractResponseType.
///
/// class ns1__BMButtonSearchResponseType operations:
/// - ns1__BMButtonSearchResponseType* soap_new_ns1__BMButtonSearchResponseType(soap*) allocate and default initialize
/// - ns1__BMButtonSearchResponseType* soap_new_ns1__BMButtonSearchResponseType(soap*, int num) allocate array and default initialize values
/// - ns1__BMButtonSearchResponseType* soap_new_req_ns1__BMButtonSearchResponseType(soap*, ...) allocate, set required members
/// - ns1__BMButtonSearchResponseType* soap_new_set_ns1__BMButtonSearchResponseType(soap*, ...) allocate, set all public members
/// - ns1__BMButtonSearchResponseType::soap_default(soap*) default initialize members
/// - int soap_read_ns1__BMButtonSearchResponseType(soap*, ns1__BMButtonSearchResponseType*) deserialize from a stream
/// - int soap_write_ns1__BMButtonSearchResponseType(soap*, ns1__BMButtonSearchResponseType*) serialize to a stream
/// - ns1__BMButtonSearchResponseType* ns1__BMButtonSearchResponseType::soap_dup(soap*) returns deep copy of ns1__BMButtonSearchResponseType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__BMButtonSearchResponseType::soap_del() deep deletes ns1__BMButtonSearchResponseType data members, use only after ns1__BMButtonSearchResponseType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__BMButtonSearchResponseType : public ns3__AbstractResponseType
{ public:
/*  INHERITED FROM ns3__AbstractResponseType:
/// <PRE><BLOCKQUOTE>
///   This value represents the date and time (GMT) when the response was generated by a service provider (as a result of processing of a request).
/// </BLOCKQUOTE></PRE>
/// Element "Timestamp" of XSD type xs:dateTime.
    time_t*                              Timestamp                      0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Application level acknowledgement code.
/// </BLOCKQUOTE></PRE>
/// Element "Ack" of XSD type "urn:ebay:apis:eBLBaseComponents":AckCodeType.
    enum ns3__AckCodeType                Ack                            1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   CorrelationID may be used optionally with an application level acknowledgement.
/// </BLOCKQUOTE></PRE>
/// Element "CorrelationID" of XSD type xs:string.
    std::string*                         CorrelationID                  0;	///< Optional element.
/// Vector of ns3__ErrorType* of length 0..unbounded.
    std::vector<ns3__ErrorType*        > Errors                         0;	///< Elements.
/// <PRE><BLOCKQUOTE>
///   This refers to the version of the response payload schema.
/// </BLOCKQUOTE></PRE>
/// Element "Version" of XSD type xs:string.
    std::string                          Version                        1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   This refers to the specific software build that was used in the deployment for processing the request and generating the response.
/// </BLOCKQUOTE></PRE>
/// Element "Build" of XSD type xs:string.
    std::string                          Build                          1;	///< Required element.
/// @todo <any namespace="##local" minOccurs="0">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
    _XML                                 __any                         0;	///< Catch any element content in XML string.
    END OF INHERITED FROM ns3__AbstractResponseType */
/// Vector of ns3__ButtonSearchResultType* element refs of length 0..100.
    std::vector<ns3__ButtonSearchResultType*> ns3__ButtonSearchResult        0:100;	///< Elements.
};

/// @brief "urn:ebay:api:PayPalAPI":RefundTransactionRequestType is a complexType with complexContent extension of XSD type "urn:ebay:apis:eBLBaseComponents":AbstractRequestType.
///
/// class ns1__RefundTransactionRequestType operations:
/// - ns1__RefundTransactionRequestType* soap_new_ns1__RefundTransactionRequestType(soap*) allocate and default initialize
/// - ns1__RefundTransactionRequestType* soap_new_ns1__RefundTransactionRequestType(soap*, int num) allocate array and default initialize values
/// - ns1__RefundTransactionRequestType* soap_new_req_ns1__RefundTransactionRequestType(soap*, ...) allocate, set required members
/// - ns1__RefundTransactionRequestType* soap_new_set_ns1__RefundTransactionRequestType(soap*, ...) allocate, set all public members
/// - ns1__RefundTransactionRequestType::soap_default(soap*) default initialize members
/// - int soap_read_ns1__RefundTransactionRequestType(soap*, ns1__RefundTransactionRequestType*) deserialize from a stream
/// - int soap_write_ns1__RefundTransactionRequestType(soap*, ns1__RefundTransactionRequestType*) serialize to a stream
/// - ns1__RefundTransactionRequestType* ns1__RefundTransactionRequestType::soap_dup(soap*) returns deep copy of ns1__RefundTransactionRequestType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__RefundTransactionRequestType::soap_del() deep deletes ns1__RefundTransactionRequestType data members, use only after ns1__RefundTransactionRequestType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__RefundTransactionRequestType : public ns3__AbstractRequestType
{ public:
/*  INHERITED FROM ns3__AbstractRequestType:
/// <PRE><BLOCKQUOTE>
///   This specifies the required detail level that is needed by a client application pertaining to
///   a particular data component (e.g., Item, Transaction, etc.). The detail level is specified in
///   the DetailLevelCodeType which has all the enumerated values of the detail level for each component.
/// </BLOCKQUOTE></PRE>
/// Vector of enum ns3__DetailLevelCodeType of length 0..unbounded.
    std::vector<enum ns3__DetailLevelCodeType> DetailLevel                    0;	///< Elements.
/// <PRE><BLOCKQUOTE>
///   This should be the standard RFC 3066 language identification tag, e.g., en_US.
/// </BLOCKQUOTE></PRE>
/// Element "ErrorLanguage" of XSD type xs:string.
    std::string*                         ErrorLanguage                  0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   This refers to the version of the request payload schema.
/// </BLOCKQUOTE></PRE>
/// Element "Version" of XSD type xs:string.
    std::string                          Version                        1;	///< Required element.
/// @todo <any namespace="##local" minOccurs="0">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
    _XML                                 __any                         0;	///< Catch any element content in XML string.
    END OF INHERITED FROM ns3__AbstractRequestType */
/// <PRE><BLOCKQUOTE>
///   Unique identifier of the transaction you are refunding.
///   <br/>
///   <br/>
///   <b>Optional</b>
///   <br/>
///   <br/>
///   Character length and limitations: 17 single-byte alphanumeric characters
/// </BLOCKQUOTE></PRE>
/// Element "TransactionID" of XSD type "urn:ebay:apis:eBLBaseComponents":TransactionId.
    ns3__TransactionId*                  TransactionID                  0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Encrypted PayPal customer account identification number.
///   <br/>
///   <br/>
///   <b>Optional</b>
///   <br/>
///   <br/>
///   Character length and limitations: 127 single-byte alphanumeric characters
/// </BLOCKQUOTE></PRE>
/// Element "PayerID" of XSD type "urn:ebay:apis:eBLBaseComponents":UserIDType.
    ns3__UserIDType*                     PayerID                        0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Invoice number corresponding to transaction details for tracking the refund of a payment. This parameter is passed by the merchant or recipient while refunding the transaction. This parameter does not affect the business logic, it is persisted in the DB for transaction reference
///   <br/>
///   <b>Optional</b>
/// </BLOCKQUOTE></PRE>
/// Element "InvoiceID" of XSD type xs:string.
    std::string*                         InvoiceID                      0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Type of refund you are making
///   <br/>
///   <br/>
///   <b>Required</b>
/// </BLOCKQUOTE></PRE>
/// Element "RefundType" of XSD type "urn:ebay:apis:eBLBaseComponents":RefundType.
    enum ns3__RefundType*                RefundType                     0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Refund amount. <br/>
///   <br/>
///   Amount is <b>required</b> if RefundType is Partial.
///   <br/>
///   <br/>
///   NOTE: If RefundType is Full, do not set Amount.
/// </BLOCKQUOTE></PRE>
/// Element "Amount" of XSD type "urn:ebay:apis:CoreComponentTypes":BasicAmountType.
    ns2__BasicAmountType*                Amount                         0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Shipping amount. <br/><br/>
///   Optional
/// </BLOCKQUOTE></PRE>
/// Element "ShippingAmount" of XSD type "urn:ebay:apis:CoreComponentTypes":BasicAmountType.
    ns2__BasicAmountType*                ShippingAmount                 0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Tax amount. <br/><br/>
///   Optional
/// </BLOCKQUOTE></PRE>
/// Element "TaxAmount" of XSD type "urn:ebay:apis:CoreComponentTypes":BasicAmountType.
    ns2__BasicAmountType*                TaxAmount                      0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Custom memo about the refund. <br/>
///   <br/>
///   Optional
///   <br/>
///   <br/>
///   Character length and limitations: 255 single-byte alphanumeric characters
/// </BLOCKQUOTE></PRE>
/// Element "Memo" of XSD type xs:string.
    std::string*                         Memo                           0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   The maximum time till which refund must be tried.
///   <br/><br/>
///   Optional
/// </BLOCKQUOTE></PRE>
/// Element "RetryUntil" of XSD type xs:dateTime.
    time_t*                              RetryUntil                     0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   The type of funding source for refund.
///   <br/><br/>
///   Optional
/// </BLOCKQUOTE></PRE>
/// Element "RefundSource" of XSD type "urn:ebay:apis:eBLBaseComponents":RefundSourceCodeType.
    enum ns3__RefundSourceCodeType*      RefundSource                   0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Flag to indicate that the customer was already given store credit for a given transaction. This will allow us to make sure we do not double refund.
///   <br/><br/>
///   <b>Optional</b>
/// </BLOCKQUOTE></PRE>
/// Element "RefundAdvice" of XSD type xs:boolean.
    bool*                                RefundAdvice                   0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   To pass the Merchant store information<br/><br/><b>Optional</b>
/// </BLOCKQUOTE></PRE>
/// Element reference "urn:ebay:api:PayPalAPI:""urn:ebay:apis:eBLBaseComponents":MerchantStoreDetails.
    ns3__MerchantStoreDetailsType*       ns3__MerchantStoreDetails      0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Information about the individual details of the items to be refunded.<br/><b>Optional</b>
/// </BLOCKQUOTE></PRE>
/// Vector of ns3__InvoiceItemType* element refs of length 0..unbounded.
    std::vector<ns3__InvoiceItemType*  > ns3__RefundItemDetails         0;	///< Elements.
/// <PRE><BLOCKQUOTE>
///   Unique id for each API request to prevent duplicate payments.
///   <br/>
///   <br/>
///   <b>Optional</b>
///   <br/>Character length and limits: 38 single-byte characters maximum.
/// </BLOCKQUOTE></PRE>
/// Element "MsgSubID" of XSD type xs:string.
    std::string*                         MsgSubID                       0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   This holds key-value pair which merchants wants to pass it to the open wallet-PLCC processor<br/><br/><b>Optional</b>
/// </BLOCKQUOTE></PRE>
/// Element reference "urn:ebay:api:PayPalAPI:""urn:ebay:apis:eBLBaseComponents":MerchantData.
    ns3__MerchantDataType*               ns3__MerchantData              0;	///< Optional element.
};

/// @brief "urn:ebay:api:PayPalAPI":RefundTransactionResponseType is a complexType with complexContent extension of XSD type "urn:ebay:apis:eBLBaseComponents":AbstractResponseType.
///
/// class ns1__RefundTransactionResponseType operations:
/// - ns1__RefundTransactionResponseType* soap_new_ns1__RefundTransactionResponseType(soap*) allocate and default initialize
/// - ns1__RefundTransactionResponseType* soap_new_ns1__RefundTransactionResponseType(soap*, int num) allocate array and default initialize values
/// - ns1__RefundTransactionResponseType* soap_new_req_ns1__RefundTransactionResponseType(soap*, ...) allocate, set required members
/// - ns1__RefundTransactionResponseType* soap_new_set_ns1__RefundTransactionResponseType(soap*, ...) allocate, set all public members
/// - ns1__RefundTransactionResponseType::soap_default(soap*) default initialize members
/// - int soap_read_ns1__RefundTransactionResponseType(soap*, ns1__RefundTransactionResponseType*) deserialize from a stream
/// - int soap_write_ns1__RefundTransactionResponseType(soap*, ns1__RefundTransactionResponseType*) serialize to a stream
/// - ns1__RefundTransactionResponseType* ns1__RefundTransactionResponseType::soap_dup(soap*) returns deep copy of ns1__RefundTransactionResponseType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__RefundTransactionResponseType::soap_del() deep deletes ns1__RefundTransactionResponseType data members, use only after ns1__RefundTransactionResponseType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__RefundTransactionResponseType : public ns3__AbstractResponseType
{ public:
/*  INHERITED FROM ns3__AbstractResponseType:
/// <PRE><BLOCKQUOTE>
///   This value represents the date and time (GMT) when the response was generated by a service provider (as a result of processing of a request).
/// </BLOCKQUOTE></PRE>
/// Element "Timestamp" of XSD type xs:dateTime.
    time_t*                              Timestamp                      0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Application level acknowledgement code.
/// </BLOCKQUOTE></PRE>
/// Element "Ack" of XSD type "urn:ebay:apis:eBLBaseComponents":AckCodeType.
    enum ns3__AckCodeType                Ack                            1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   CorrelationID may be used optionally with an application level acknowledgement.
/// </BLOCKQUOTE></PRE>
/// Element "CorrelationID" of XSD type xs:string.
    std::string*                         CorrelationID                  0;	///< Optional element.
/// Vector of ns3__ErrorType* of length 0..unbounded.
    std::vector<ns3__ErrorType*        > Errors                         0;	///< Elements.
/// <PRE><BLOCKQUOTE>
///   This refers to the version of the response payload schema.
/// </BLOCKQUOTE></PRE>
/// Element "Version" of XSD type xs:string.
    std::string                          Version                        1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   This refers to the specific software build that was used in the deployment for processing the request and generating the response.
/// </BLOCKQUOTE></PRE>
/// Element "Build" of XSD type xs:string.
    std::string                          Build                          1;	///< Required element.
/// @todo <any namespace="##local" minOccurs="0">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
    _XML                                 __any                         0;	///< Catch any element content in XML string.
    END OF INHERITED FROM ns3__AbstractResponseType */
/// <PRE><BLOCKQUOTE>
///   Unique transaction ID of the refund. <br/>
///   <br/>
///   Character length and limitations:17 single-byte characters
/// </BLOCKQUOTE></PRE>
/// Element "RefundTransactionID" of XSD type "urn:ebay:apis:eBLBaseComponents":TransactionId.
    ns3__TransactionId*                  RefundTransactionID            0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Amount subtracted from PayPal balance of original recipient of payment to make this refund
/// </BLOCKQUOTE></PRE>
/// Element "NetRefundAmount" of XSD type "urn:ebay:apis:CoreComponentTypes":BasicAmountType.
    ns2__BasicAmountType*                NetRefundAmount                0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Transaction fee refunded to original recipient of payment
/// </BLOCKQUOTE></PRE>
/// Element "FeeRefundAmount" of XSD type "urn:ebay:apis:CoreComponentTypes":BasicAmountType.
    ns2__BasicAmountType*                FeeRefundAmount                0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Amount of money refunded to original payer
/// </BLOCKQUOTE></PRE>
/// Element "GrossRefundAmount" of XSD type "urn:ebay:apis:CoreComponentTypes":BasicAmountType.
    ns2__BasicAmountType*                GrossRefundAmount              0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Total of all previous refunds
/// </BLOCKQUOTE></PRE>
/// Element "TotalRefundedAmount" of XSD type "urn:ebay:apis:CoreComponentTypes":BasicAmountType.
    ns2__BasicAmountType*                TotalRefundedAmount            0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Contains Refund Payment status information.
/// </BLOCKQUOTE></PRE>
/// Element reference "urn:ebay:api:PayPalAPI:""urn:ebay:apis:eBLBaseComponents":RefundInfo.
    ns3__RefundInfoType*                 ns3__RefundInfo                0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Any general information like offer details that is reinstated or any other marketing data
/// </BLOCKQUOTE></PRE>
/// Element "ReceiptData" of XSD type xs:string.
    std::string*                         ReceiptData                    0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Return msgsubid back to merchant
/// </BLOCKQUOTE></PRE>
/// Element "MsgSubID" of XSD type xs:string.
    std::string*                         MsgSubID                       0;	///< Optional element.
};

/// @brief "urn:ebay:api:PayPalAPI":InitiateRecoupRequestType is a complexType with complexContent extension of XSD type "urn:ebay:apis:eBLBaseComponents":AbstractRequestType.
///
/// class ns1__InitiateRecoupRequestType operations:
/// - ns1__InitiateRecoupRequestType* soap_new_ns1__InitiateRecoupRequestType(soap*) allocate and default initialize
/// - ns1__InitiateRecoupRequestType* soap_new_ns1__InitiateRecoupRequestType(soap*, int num) allocate array and default initialize values
/// - ns1__InitiateRecoupRequestType* soap_new_req_ns1__InitiateRecoupRequestType(soap*, ...) allocate, set required members
/// - ns1__InitiateRecoupRequestType* soap_new_set_ns1__InitiateRecoupRequestType(soap*, ...) allocate, set all public members
/// - ns1__InitiateRecoupRequestType::soap_default(soap*) default initialize members
/// - int soap_read_ns1__InitiateRecoupRequestType(soap*, ns1__InitiateRecoupRequestType*) deserialize from a stream
/// - int soap_write_ns1__InitiateRecoupRequestType(soap*, ns1__InitiateRecoupRequestType*) serialize to a stream
/// - ns1__InitiateRecoupRequestType* ns1__InitiateRecoupRequestType::soap_dup(soap*) returns deep copy of ns1__InitiateRecoupRequestType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__InitiateRecoupRequestType::soap_del() deep deletes ns1__InitiateRecoupRequestType data members, use only after ns1__InitiateRecoupRequestType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__InitiateRecoupRequestType : public ns3__AbstractRequestType
{ public:
/*  INHERITED FROM ns3__AbstractRequestType:
/// <PRE><BLOCKQUOTE>
///   This specifies the required detail level that is needed by a client application pertaining to
///   a particular data component (e.g., Item, Transaction, etc.). The detail level is specified in
///   the DetailLevelCodeType which has all the enumerated values of the detail level for each component.
/// </BLOCKQUOTE></PRE>
/// Vector of enum ns3__DetailLevelCodeType of length 0..unbounded.
    std::vector<enum ns3__DetailLevelCodeType> DetailLevel                    0;	///< Elements.
/// <PRE><BLOCKQUOTE>
///   This should be the standard RFC 3066 language identification tag, e.g., en_US.
/// </BLOCKQUOTE></PRE>
/// Element "ErrorLanguage" of XSD type xs:string.
    std::string*                         ErrorLanguage                  0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   This refers to the version of the request payload schema.
/// </BLOCKQUOTE></PRE>
/// Element "Version" of XSD type xs:string.
    std::string                          Version                        1;	///< Required element.
/// @todo <any namespace="##local" minOccurs="0">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
    _XML                                 __any                         0;	///< Catch any element content in XML string.
    END OF INHERITED FROM ns3__AbstractRequestType */
/// Element reference "urn:ebay:api:PayPalAPI:""urn:ebay:apis:EnhancedDataTypes":EnhancedInitiateRecoupRequestDetails.
    ns4__EnhancedInitiateRecoupRequestDetailsType*  ns4__EnhancedInitiateRecoupRequestDetails 1;	///< Required element.
};

/// @brief "urn:ebay:api:PayPalAPI":InitiateRecoupResponseType is a complexType with complexContent extension of XSD type "urn:ebay:apis:eBLBaseComponents":AbstractResponseType.
///
/// class ns1__InitiateRecoupResponseType operations:
/// - ns1__InitiateRecoupResponseType* soap_new_ns1__InitiateRecoupResponseType(soap*) allocate and default initialize
/// - ns1__InitiateRecoupResponseType* soap_new_ns1__InitiateRecoupResponseType(soap*, int num) allocate array and default initialize values
/// - ns1__InitiateRecoupResponseType* soap_new_req_ns1__InitiateRecoupResponseType(soap*, ...) allocate, set required members
/// - ns1__InitiateRecoupResponseType* soap_new_set_ns1__InitiateRecoupResponseType(soap*, ...) allocate, set all public members
/// - ns1__InitiateRecoupResponseType::soap_default(soap*) default initialize members
/// - int soap_read_ns1__InitiateRecoupResponseType(soap*, ns1__InitiateRecoupResponseType*) deserialize from a stream
/// - int soap_write_ns1__InitiateRecoupResponseType(soap*, ns1__InitiateRecoupResponseType*) serialize to a stream
/// - ns1__InitiateRecoupResponseType* ns1__InitiateRecoupResponseType::soap_dup(soap*) returns deep copy of ns1__InitiateRecoupResponseType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__InitiateRecoupResponseType::soap_del() deep deletes ns1__InitiateRecoupResponseType data members, use only after ns1__InitiateRecoupResponseType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__InitiateRecoupResponseType : public ns3__AbstractResponseType
{ public:
/*  INHERITED FROM ns3__AbstractResponseType:
/// <PRE><BLOCKQUOTE>
///   This value represents the date and time (GMT) when the response was generated by a service provider (as a result of processing of a request).
/// </BLOCKQUOTE></PRE>
/// Element "Timestamp" of XSD type xs:dateTime.
    time_t*                              Timestamp                      0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Application level acknowledgement code.
/// </BLOCKQUOTE></PRE>
/// Element "Ack" of XSD type "urn:ebay:apis:eBLBaseComponents":AckCodeType.
    enum ns3__AckCodeType                Ack                            1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   CorrelationID may be used optionally with an application level acknowledgement.
/// </BLOCKQUOTE></PRE>
/// Element "CorrelationID" of XSD type xs:string.
    std::string*                         CorrelationID                  0;	///< Optional element.
/// Vector of ns3__ErrorType* of length 0..unbounded.
    std::vector<ns3__ErrorType*        > Errors                         0;	///< Elements.
/// <PRE><BLOCKQUOTE>
///   This refers to the version of the response payload schema.
/// </BLOCKQUOTE></PRE>
/// Element "Version" of XSD type xs:string.
    std::string                          Version                        1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   This refers to the specific software build that was used in the deployment for processing the request and generating the response.
/// </BLOCKQUOTE></PRE>
/// Element "Build" of XSD type xs:string.
    std::string                          Build                          1;	///< Required element.
/// @todo <any namespace="##local" minOccurs="0">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
    _XML                                 __any                         0;	///< Catch any element content in XML string.
    END OF INHERITED FROM ns3__AbstractResponseType */
};

/// @brief "urn:ebay:api:PayPalAPI":CompleteRecoupRequestType is a complexType with complexContent extension of XSD type "urn:ebay:apis:eBLBaseComponents":AbstractRequestType.
///
/// class ns1__CompleteRecoupRequestType operations:
/// - ns1__CompleteRecoupRequestType* soap_new_ns1__CompleteRecoupRequestType(soap*) allocate and default initialize
/// - ns1__CompleteRecoupRequestType* soap_new_ns1__CompleteRecoupRequestType(soap*, int num) allocate array and default initialize values
/// - ns1__CompleteRecoupRequestType* soap_new_req_ns1__CompleteRecoupRequestType(soap*, ...) allocate, set required members
/// - ns1__CompleteRecoupRequestType* soap_new_set_ns1__CompleteRecoupRequestType(soap*, ...) allocate, set all public members
/// - ns1__CompleteRecoupRequestType::soap_default(soap*) default initialize members
/// - int soap_read_ns1__CompleteRecoupRequestType(soap*, ns1__CompleteRecoupRequestType*) deserialize from a stream
/// - int soap_write_ns1__CompleteRecoupRequestType(soap*, ns1__CompleteRecoupRequestType*) serialize to a stream
/// - ns1__CompleteRecoupRequestType* ns1__CompleteRecoupRequestType::soap_dup(soap*) returns deep copy of ns1__CompleteRecoupRequestType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__CompleteRecoupRequestType::soap_del() deep deletes ns1__CompleteRecoupRequestType data members, use only after ns1__CompleteRecoupRequestType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__CompleteRecoupRequestType : public ns3__AbstractRequestType
{ public:
/*  INHERITED FROM ns3__AbstractRequestType:
/// <PRE><BLOCKQUOTE>
///   This specifies the required detail level that is needed by a client application pertaining to
///   a particular data component (e.g., Item, Transaction, etc.). The detail level is specified in
///   the DetailLevelCodeType which has all the enumerated values of the detail level for each component.
/// </BLOCKQUOTE></PRE>
/// Vector of enum ns3__DetailLevelCodeType of length 0..unbounded.
    std::vector<enum ns3__DetailLevelCodeType> DetailLevel                    0;	///< Elements.
/// <PRE><BLOCKQUOTE>
///   This should be the standard RFC 3066 language identification tag, e.g., en_US.
/// </BLOCKQUOTE></PRE>
/// Element "ErrorLanguage" of XSD type xs:string.
    std::string*                         ErrorLanguage                  0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   This refers to the version of the request payload schema.
/// </BLOCKQUOTE></PRE>
/// Element "Version" of XSD type xs:string.
    std::string                          Version                        1;	///< Required element.
/// @todo <any namespace="##local" minOccurs="0">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
    _XML                                 __any                         0;	///< Catch any element content in XML string.
    END OF INHERITED FROM ns3__AbstractRequestType */
/// Element reference "urn:ebay:api:PayPalAPI:""urn:ebay:apis:EnhancedDataTypes":EnhancedCompleteRecoupRequestDetails.
    ns4__EnhancedCompleteRecoupRequestDetailsType*  ns4__EnhancedCompleteRecoupRequestDetails 1;	///< Required element.
};

/// @brief "urn:ebay:api:PayPalAPI":CompleteRecoupResponseType is a complexType with complexContent extension of XSD type "urn:ebay:apis:eBLBaseComponents":AbstractResponseType.
///
/// class ns1__CompleteRecoupResponseType operations:
/// - ns1__CompleteRecoupResponseType* soap_new_ns1__CompleteRecoupResponseType(soap*) allocate and default initialize
/// - ns1__CompleteRecoupResponseType* soap_new_ns1__CompleteRecoupResponseType(soap*, int num) allocate array and default initialize values
/// - ns1__CompleteRecoupResponseType* soap_new_req_ns1__CompleteRecoupResponseType(soap*, ...) allocate, set required members
/// - ns1__CompleteRecoupResponseType* soap_new_set_ns1__CompleteRecoupResponseType(soap*, ...) allocate, set all public members
/// - ns1__CompleteRecoupResponseType::soap_default(soap*) default initialize members
/// - int soap_read_ns1__CompleteRecoupResponseType(soap*, ns1__CompleteRecoupResponseType*) deserialize from a stream
/// - int soap_write_ns1__CompleteRecoupResponseType(soap*, ns1__CompleteRecoupResponseType*) serialize to a stream
/// - ns1__CompleteRecoupResponseType* ns1__CompleteRecoupResponseType::soap_dup(soap*) returns deep copy of ns1__CompleteRecoupResponseType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__CompleteRecoupResponseType::soap_del() deep deletes ns1__CompleteRecoupResponseType data members, use only after ns1__CompleteRecoupResponseType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__CompleteRecoupResponseType : public ns3__AbstractResponseType
{ public:
/*  INHERITED FROM ns3__AbstractResponseType:
/// <PRE><BLOCKQUOTE>
///   This value represents the date and time (GMT) when the response was generated by a service provider (as a result of processing of a request).
/// </BLOCKQUOTE></PRE>
/// Element "Timestamp" of XSD type xs:dateTime.
    time_t*                              Timestamp                      0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Application level acknowledgement code.
/// </BLOCKQUOTE></PRE>
/// Element "Ack" of XSD type "urn:ebay:apis:eBLBaseComponents":AckCodeType.
    enum ns3__AckCodeType                Ack                            1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   CorrelationID may be used optionally with an application level acknowledgement.
/// </BLOCKQUOTE></PRE>
/// Element "CorrelationID" of XSD type xs:string.
    std::string*                         CorrelationID                  0;	///< Optional element.
/// Vector of ns3__ErrorType* of length 0..unbounded.
    std::vector<ns3__ErrorType*        > Errors                         0;	///< Elements.
/// <PRE><BLOCKQUOTE>
///   This refers to the version of the response payload schema.
/// </BLOCKQUOTE></PRE>
/// Element "Version" of XSD type xs:string.
    std::string                          Version                        1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   This refers to the specific software build that was used in the deployment for processing the request and generating the response.
/// </BLOCKQUOTE></PRE>
/// Element "Build" of XSD type xs:string.
    std::string                          Build                          1;	///< Required element.
/// @todo <any namespace="##local" minOccurs="0">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
    _XML                                 __any                         0;	///< Catch any element content in XML string.
    END OF INHERITED FROM ns3__AbstractResponseType */
/// Element reference "urn:ebay:api:PayPalAPI:""urn:ebay:apis:EnhancedDataTypes":EnhancedCompleteRecoupResponseDetails.
    ns4__EnhancedCompleteRecoupResponseDetailsType*  ns4__EnhancedCompleteRecoupResponseDetails 1;	///< Required element.
};

/// @brief "urn:ebay:api:PayPalAPI":CancelRecoupRequestType is a complexType with complexContent extension of XSD type "urn:ebay:apis:eBLBaseComponents":AbstractRequestType.
///
/// class ns1__CancelRecoupRequestType operations:
/// - ns1__CancelRecoupRequestType* soap_new_ns1__CancelRecoupRequestType(soap*) allocate and default initialize
/// - ns1__CancelRecoupRequestType* soap_new_ns1__CancelRecoupRequestType(soap*, int num) allocate array and default initialize values
/// - ns1__CancelRecoupRequestType* soap_new_req_ns1__CancelRecoupRequestType(soap*, ...) allocate, set required members
/// - ns1__CancelRecoupRequestType* soap_new_set_ns1__CancelRecoupRequestType(soap*, ...) allocate, set all public members
/// - ns1__CancelRecoupRequestType::soap_default(soap*) default initialize members
/// - int soap_read_ns1__CancelRecoupRequestType(soap*, ns1__CancelRecoupRequestType*) deserialize from a stream
/// - int soap_write_ns1__CancelRecoupRequestType(soap*, ns1__CancelRecoupRequestType*) serialize to a stream
/// - ns1__CancelRecoupRequestType* ns1__CancelRecoupRequestType::soap_dup(soap*) returns deep copy of ns1__CancelRecoupRequestType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__CancelRecoupRequestType::soap_del() deep deletes ns1__CancelRecoupRequestType data members, use only after ns1__CancelRecoupRequestType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__CancelRecoupRequestType : public ns3__AbstractRequestType
{ public:
/*  INHERITED FROM ns3__AbstractRequestType:
/// <PRE><BLOCKQUOTE>
///   This specifies the required detail level that is needed by a client application pertaining to
///   a particular data component (e.g., Item, Transaction, etc.). The detail level is specified in
///   the DetailLevelCodeType which has all the enumerated values of the detail level for each component.
/// </BLOCKQUOTE></PRE>
/// Vector of enum ns3__DetailLevelCodeType of length 0..unbounded.
    std::vector<enum ns3__DetailLevelCodeType> DetailLevel                    0;	///< Elements.
/// <PRE><BLOCKQUOTE>
///   This should be the standard RFC 3066 language identification tag, e.g., en_US.
/// </BLOCKQUOTE></PRE>
/// Element "ErrorLanguage" of XSD type xs:string.
    std::string*                         ErrorLanguage                  0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   This refers to the version of the request payload schema.
/// </BLOCKQUOTE></PRE>
/// Element "Version" of XSD type xs:string.
    std::string                          Version                        1;	///< Required element.
/// @todo <any namespace="##local" minOccurs="0">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
    _XML                                 __any                         0;	///< Catch any element content in XML string.
    END OF INHERITED FROM ns3__AbstractRequestType */
/// Element reference "urn:ebay:api:PayPalAPI:""urn:ebay:apis:EnhancedDataTypes":EnhancedCancelRecoupRequestDetails.
    ns4__EnhancedCancelRecoupRequestDetailsType*  ns4__EnhancedCancelRecoupRequestDetails 1;	///< Required element.
};

/// @brief "urn:ebay:api:PayPalAPI":CancelRecoupResponseType is a complexType with complexContent extension of XSD type "urn:ebay:apis:eBLBaseComponents":AbstractResponseType.
///
/// class ns1__CancelRecoupResponseType operations:
/// - ns1__CancelRecoupResponseType* soap_new_ns1__CancelRecoupResponseType(soap*) allocate and default initialize
/// - ns1__CancelRecoupResponseType* soap_new_ns1__CancelRecoupResponseType(soap*, int num) allocate array and default initialize values
/// - ns1__CancelRecoupResponseType* soap_new_req_ns1__CancelRecoupResponseType(soap*, ...) allocate, set required members
/// - ns1__CancelRecoupResponseType* soap_new_set_ns1__CancelRecoupResponseType(soap*, ...) allocate, set all public members
/// - ns1__CancelRecoupResponseType::soap_default(soap*) default initialize members
/// - int soap_read_ns1__CancelRecoupResponseType(soap*, ns1__CancelRecoupResponseType*) deserialize from a stream
/// - int soap_write_ns1__CancelRecoupResponseType(soap*, ns1__CancelRecoupResponseType*) serialize to a stream
/// - ns1__CancelRecoupResponseType* ns1__CancelRecoupResponseType::soap_dup(soap*) returns deep copy of ns1__CancelRecoupResponseType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__CancelRecoupResponseType::soap_del() deep deletes ns1__CancelRecoupResponseType data members, use only after ns1__CancelRecoupResponseType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__CancelRecoupResponseType : public ns3__AbstractResponseType
{ public:
/*  INHERITED FROM ns3__AbstractResponseType:
/// <PRE><BLOCKQUOTE>
///   This value represents the date and time (GMT) when the response was generated by a service provider (as a result of processing of a request).
/// </BLOCKQUOTE></PRE>
/// Element "Timestamp" of XSD type xs:dateTime.
    time_t*                              Timestamp                      0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Application level acknowledgement code.
/// </BLOCKQUOTE></PRE>
/// Element "Ack" of XSD type "urn:ebay:apis:eBLBaseComponents":AckCodeType.
    enum ns3__AckCodeType                Ack                            1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   CorrelationID may be used optionally with an application level acknowledgement.
/// </BLOCKQUOTE></PRE>
/// Element "CorrelationID" of XSD type xs:string.
    std::string*                         CorrelationID                  0;	///< Optional element.
/// Vector of ns3__ErrorType* of length 0..unbounded.
    std::vector<ns3__ErrorType*        > Errors                         0;	///< Elements.
/// <PRE><BLOCKQUOTE>
///   This refers to the version of the response payload schema.
/// </BLOCKQUOTE></PRE>
/// Element "Version" of XSD type xs:string.
    std::string                          Version                        1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   This refers to the specific software build that was used in the deployment for processing the request and generating the response.
/// </BLOCKQUOTE></PRE>
/// Element "Build" of XSD type xs:string.
    std::string                          Build                          1;	///< Required element.
/// @todo <any namespace="##local" minOccurs="0">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
    _XML                                 __any                         0;	///< Catch any element content in XML string.
    END OF INHERITED FROM ns3__AbstractResponseType */
};

/// @brief "urn:ebay:api:PayPalAPI":GetTransactionDetailsRequestType is a complexType with complexContent extension of XSD type "urn:ebay:apis:eBLBaseComponents":AbstractRequestType.
///
/// class ns1__GetTransactionDetailsRequestType operations:
/// - ns1__GetTransactionDetailsRequestType* soap_new_ns1__GetTransactionDetailsRequestType(soap*) allocate and default initialize
/// - ns1__GetTransactionDetailsRequestType* soap_new_ns1__GetTransactionDetailsRequestType(soap*, int num) allocate array and default initialize values
/// - ns1__GetTransactionDetailsRequestType* soap_new_req_ns1__GetTransactionDetailsRequestType(soap*, ...) allocate, set required members
/// - ns1__GetTransactionDetailsRequestType* soap_new_set_ns1__GetTransactionDetailsRequestType(soap*, ...) allocate, set all public members
/// - ns1__GetTransactionDetailsRequestType::soap_default(soap*) default initialize members
/// - int soap_read_ns1__GetTransactionDetailsRequestType(soap*, ns1__GetTransactionDetailsRequestType*) deserialize from a stream
/// - int soap_write_ns1__GetTransactionDetailsRequestType(soap*, ns1__GetTransactionDetailsRequestType*) serialize to a stream
/// - ns1__GetTransactionDetailsRequestType* ns1__GetTransactionDetailsRequestType::soap_dup(soap*) returns deep copy of ns1__GetTransactionDetailsRequestType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__GetTransactionDetailsRequestType::soap_del() deep deletes ns1__GetTransactionDetailsRequestType data members, use only after ns1__GetTransactionDetailsRequestType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__GetTransactionDetailsRequestType : public ns3__AbstractRequestType
{ public:
/*  INHERITED FROM ns3__AbstractRequestType:
/// <PRE><BLOCKQUOTE>
///   This specifies the required detail level that is needed by a client application pertaining to
///   a particular data component (e.g., Item, Transaction, etc.). The detail level is specified in
///   the DetailLevelCodeType which has all the enumerated values of the detail level for each component.
/// </BLOCKQUOTE></PRE>
/// Vector of enum ns3__DetailLevelCodeType of length 0..unbounded.
    std::vector<enum ns3__DetailLevelCodeType> DetailLevel                    0;	///< Elements.
/// <PRE><BLOCKQUOTE>
///   This should be the standard RFC 3066 language identification tag, e.g., en_US.
/// </BLOCKQUOTE></PRE>
/// Element "ErrorLanguage" of XSD type xs:string.
    std::string*                         ErrorLanguage                  0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   This refers to the version of the request payload schema.
/// </BLOCKQUOTE></PRE>
/// Element "Version" of XSD type xs:string.
    std::string                          Version                        1;	///< Required element.
/// @todo <any namespace="##local" minOccurs="0">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
    _XML                                 __any                         0;	///< Catch any element content in XML string.
    END OF INHERITED FROM ns3__AbstractRequestType */
/// <PRE><BLOCKQUOTE>
///   Unique identifier of a transaction. <br/><br/>
///   <b>Required</b>
///   <br/><br/>
///   The details for some kinds of transactions cannot be retrieved with GetTransactionDetailsRequest. You cannot obtain details of bank transfer withdrawals, for example. <br/><br/>
///   Character length and limitations: 17 single-byte alphanumeric characters
/// </BLOCKQUOTE></PRE>
/// Element "TransactionID" of XSD type "urn:ebay:apis:eBLBaseComponents":TransactionId.
    ns3__TransactionId                   TransactionID                  1;	///< Required element.
};

/// @brief "urn:ebay:api:PayPalAPI":GetTransactionDetailsResponseType is a complexType with complexContent extension of XSD type "urn:ebay:apis:eBLBaseComponents":AbstractResponseType.
///
/// class ns1__GetTransactionDetailsResponseType operations:
/// - ns1__GetTransactionDetailsResponseType* soap_new_ns1__GetTransactionDetailsResponseType(soap*) allocate and default initialize
/// - ns1__GetTransactionDetailsResponseType* soap_new_ns1__GetTransactionDetailsResponseType(soap*, int num) allocate array and default initialize values
/// - ns1__GetTransactionDetailsResponseType* soap_new_req_ns1__GetTransactionDetailsResponseType(soap*, ...) allocate, set required members
/// - ns1__GetTransactionDetailsResponseType* soap_new_set_ns1__GetTransactionDetailsResponseType(soap*, ...) allocate, set all public members
/// - ns1__GetTransactionDetailsResponseType::soap_default(soap*) default initialize members
/// - int soap_read_ns1__GetTransactionDetailsResponseType(soap*, ns1__GetTransactionDetailsResponseType*) deserialize from a stream
/// - int soap_write_ns1__GetTransactionDetailsResponseType(soap*, ns1__GetTransactionDetailsResponseType*) serialize to a stream
/// - ns1__GetTransactionDetailsResponseType* ns1__GetTransactionDetailsResponseType::soap_dup(soap*) returns deep copy of ns1__GetTransactionDetailsResponseType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__GetTransactionDetailsResponseType::soap_del() deep deletes ns1__GetTransactionDetailsResponseType data members, use only after ns1__GetTransactionDetailsResponseType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__GetTransactionDetailsResponseType : public ns3__AbstractResponseType
{ public:
/*  INHERITED FROM ns3__AbstractResponseType:
/// <PRE><BLOCKQUOTE>
///   This value represents the date and time (GMT) when the response was generated by a service provider (as a result of processing of a request).
/// </BLOCKQUOTE></PRE>
/// Element "Timestamp" of XSD type xs:dateTime.
    time_t*                              Timestamp                      0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Application level acknowledgement code.
/// </BLOCKQUOTE></PRE>
/// Element "Ack" of XSD type "urn:ebay:apis:eBLBaseComponents":AckCodeType.
    enum ns3__AckCodeType                Ack                            1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   CorrelationID may be used optionally with an application level acknowledgement.
/// </BLOCKQUOTE></PRE>
/// Element "CorrelationID" of XSD type xs:string.
    std::string*                         CorrelationID                  0;	///< Optional element.
/// Vector of ns3__ErrorType* of length 0..unbounded.
    std::vector<ns3__ErrorType*        > Errors                         0;	///< Elements.
/// <PRE><BLOCKQUOTE>
///   This refers to the version of the response payload schema.
/// </BLOCKQUOTE></PRE>
/// Element "Version" of XSD type xs:string.
    std::string                          Version                        1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   This refers to the specific software build that was used in the deployment for processing the request and generating the response.
/// </BLOCKQUOTE></PRE>
/// Element "Build" of XSD type xs:string.
    std::string                          Build                          1;	///< Required element.
/// @todo <any namespace="##local" minOccurs="0">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
    _XML                                 __any                         0;	///< Catch any element content in XML string.
    END OF INHERITED FROM ns3__AbstractResponseType */
/// Element reference "urn:ebay:api:PayPalAPI:""urn:ebay:apis:eBLBaseComponents":PaymentTransactionDetails.
    ns3__PaymentTransactionType*         ns3__PaymentTransactionDetails 1;	///< Required element.
/// Element reference "urn:ebay:api:PayPalAPI:""urn:ebay:apis:eBLBaseComponents":ThreeDSecureDetails.
    ns3__ThreeDSecureInfoType*           ns3__ThreeDSecureDetails       1;	///< Required element.
};

/// @brief "urn:ebay:api:PayPalAPI":BillUserRequestType is a complexType with complexContent extension of XSD type "urn:ebay:apis:eBLBaseComponents":AbstractRequestType.
///
/// class ns1__BillUserRequestType operations:
/// - ns1__BillUserRequestType* soap_new_ns1__BillUserRequestType(soap*) allocate and default initialize
/// - ns1__BillUserRequestType* soap_new_ns1__BillUserRequestType(soap*, int num) allocate array and default initialize values
/// - ns1__BillUserRequestType* soap_new_req_ns1__BillUserRequestType(soap*, ...) allocate, set required members
/// - ns1__BillUserRequestType* soap_new_set_ns1__BillUserRequestType(soap*, ...) allocate, set all public members
/// - ns1__BillUserRequestType::soap_default(soap*) default initialize members
/// - int soap_read_ns1__BillUserRequestType(soap*, ns1__BillUserRequestType*) deserialize from a stream
/// - int soap_write_ns1__BillUserRequestType(soap*, ns1__BillUserRequestType*) serialize to a stream
/// - ns1__BillUserRequestType* ns1__BillUserRequestType::soap_dup(soap*) returns deep copy of ns1__BillUserRequestType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__BillUserRequestType::soap_del() deep deletes ns1__BillUserRequestType data members, use only after ns1__BillUserRequestType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__BillUserRequestType : public ns3__AbstractRequestType
{ public:
/*  INHERITED FROM ns3__AbstractRequestType:
/// <PRE><BLOCKQUOTE>
///   This specifies the required detail level that is needed by a client application pertaining to
///   a particular data component (e.g., Item, Transaction, etc.). The detail level is specified in
///   the DetailLevelCodeType which has all the enumerated values of the detail level for each component.
/// </BLOCKQUOTE></PRE>
/// Vector of enum ns3__DetailLevelCodeType of length 0..unbounded.
    std::vector<enum ns3__DetailLevelCodeType> DetailLevel                    0;	///< Elements.
/// <PRE><BLOCKQUOTE>
///   This should be the standard RFC 3066 language identification tag, e.g., en_US.
/// </BLOCKQUOTE></PRE>
/// Element "ErrorLanguage" of XSD type xs:string.
    std::string*                         ErrorLanguage                  0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   This refers to the version of the request payload schema.
/// </BLOCKQUOTE></PRE>
/// Element "Version" of XSD type xs:string.
    std::string                          Version                        1;	///< Required element.
/// @todo <any namespace="##local" minOccurs="0">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
    _XML                                 __any                         0;	///< Catch any element content in XML string.
    END OF INHERITED FROM ns3__AbstractRequestType */
/// Element reference "urn:ebay:api:PayPalAPI:""urn:ebay:apis:eBLBaseComponents":MerchantPullPaymentDetails.
    ns3__MerchantPullPaymentType*        ns3__MerchantPullPaymentDetails 1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   This flag indicates that the response should include FMFDetails
/// </BLOCKQUOTE></PRE>
/// Element "ReturnFMFDetails" of XSD type xs:int.
    int*                                 ReturnFMFDetails               0;	///< Optional element.
};

/// @brief "urn:ebay:api:PayPalAPI":BillUserResponseType is a complexType with complexContent extension of XSD type "urn:ebay:apis:eBLBaseComponents":AbstractResponseType.
///
/// class ns1__BillUserResponseType operations:
/// - ns1__BillUserResponseType* soap_new_ns1__BillUserResponseType(soap*) allocate and default initialize
/// - ns1__BillUserResponseType* soap_new_ns1__BillUserResponseType(soap*, int num) allocate array and default initialize values
/// - ns1__BillUserResponseType* soap_new_req_ns1__BillUserResponseType(soap*, ...) allocate, set required members
/// - ns1__BillUserResponseType* soap_new_set_ns1__BillUserResponseType(soap*, ...) allocate, set all public members
/// - ns1__BillUserResponseType::soap_default(soap*) default initialize members
/// - int soap_read_ns1__BillUserResponseType(soap*, ns1__BillUserResponseType*) deserialize from a stream
/// - int soap_write_ns1__BillUserResponseType(soap*, ns1__BillUserResponseType*) serialize to a stream
/// - ns1__BillUserResponseType* ns1__BillUserResponseType::soap_dup(soap*) returns deep copy of ns1__BillUserResponseType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__BillUserResponseType::soap_del() deep deletes ns1__BillUserResponseType data members, use only after ns1__BillUserResponseType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__BillUserResponseType : public ns3__AbstractResponseType
{ public:
/*  INHERITED FROM ns3__AbstractResponseType:
/// <PRE><BLOCKQUOTE>
///   This value represents the date and time (GMT) when the response was generated by a service provider (as a result of processing of a request).
/// </BLOCKQUOTE></PRE>
/// Element "Timestamp" of XSD type xs:dateTime.
    time_t*                              Timestamp                      0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Application level acknowledgement code.
/// </BLOCKQUOTE></PRE>
/// Element "Ack" of XSD type "urn:ebay:apis:eBLBaseComponents":AckCodeType.
    enum ns3__AckCodeType                Ack                            1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   CorrelationID may be used optionally with an application level acknowledgement.
/// </BLOCKQUOTE></PRE>
/// Element "CorrelationID" of XSD type xs:string.
    std::string*                         CorrelationID                  0;	///< Optional element.
/// Vector of ns3__ErrorType* of length 0..unbounded.
    std::vector<ns3__ErrorType*        > Errors                         0;	///< Elements.
/// <PRE><BLOCKQUOTE>
///   This refers to the version of the response payload schema.
/// </BLOCKQUOTE></PRE>
/// Element "Version" of XSD type xs:string.
    std::string                          Version                        1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   This refers to the specific software build that was used in the deployment for processing the request and generating the response.
/// </BLOCKQUOTE></PRE>
/// Element "Build" of XSD type xs:string.
    std::string                          Build                          1;	///< Required element.
/// @todo <any namespace="##local" minOccurs="0">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
    _XML                                 __any                         0;	///< Catch any element content in XML string.
    END OF INHERITED FROM ns3__AbstractResponseType */
/// Element reference "urn:ebay:api:PayPalAPI:""urn:ebay:apis:eBLBaseComponents":BillUserResponseDetails.
    ns3__MerchantPullPaymentResponseType*  ns3__BillUserResponseDetails   1;	///< Required element.
/// Element "FMFDetails" of XSD type "urn:ebay:apis:eBLBaseComponents":FMFDetailsType.
    ns3__FMFDetailsType*                 FMFDetails                     0;	///< Optional element.
};

/// @brief "urn:ebay:api:PayPalAPI":TransactionSearchRequestType is a complexType with complexContent extension of XSD type "urn:ebay:apis:eBLBaseComponents":AbstractRequestType.
///
/// class ns1__TransactionSearchRequestType operations:
/// - ns1__TransactionSearchRequestType* soap_new_ns1__TransactionSearchRequestType(soap*) allocate and default initialize
/// - ns1__TransactionSearchRequestType* soap_new_ns1__TransactionSearchRequestType(soap*, int num) allocate array and default initialize values
/// - ns1__TransactionSearchRequestType* soap_new_req_ns1__TransactionSearchRequestType(soap*, ...) allocate, set required members
/// - ns1__TransactionSearchRequestType* soap_new_set_ns1__TransactionSearchRequestType(soap*, ...) allocate, set all public members
/// - ns1__TransactionSearchRequestType::soap_default(soap*) default initialize members
/// - int soap_read_ns1__TransactionSearchRequestType(soap*, ns1__TransactionSearchRequestType*) deserialize from a stream
/// - int soap_write_ns1__TransactionSearchRequestType(soap*, ns1__TransactionSearchRequestType*) serialize to a stream
/// - ns1__TransactionSearchRequestType* ns1__TransactionSearchRequestType::soap_dup(soap*) returns deep copy of ns1__TransactionSearchRequestType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__TransactionSearchRequestType::soap_del() deep deletes ns1__TransactionSearchRequestType data members, use only after ns1__TransactionSearchRequestType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__TransactionSearchRequestType : public ns3__AbstractRequestType
{ public:
/*  INHERITED FROM ns3__AbstractRequestType:
/// <PRE><BLOCKQUOTE>
///   This specifies the required detail level that is needed by a client application pertaining to
///   a particular data component (e.g., Item, Transaction, etc.). The detail level is specified in
///   the DetailLevelCodeType which has all the enumerated values of the detail level for each component.
/// </BLOCKQUOTE></PRE>
/// Vector of enum ns3__DetailLevelCodeType of length 0..unbounded.
    std::vector<enum ns3__DetailLevelCodeType> DetailLevel                    0;	///< Elements.
/// <PRE><BLOCKQUOTE>
///   This should be the standard RFC 3066 language identification tag, e.g., en_US.
/// </BLOCKQUOTE></PRE>
/// Element "ErrorLanguage" of XSD type xs:string.
    std::string*                         ErrorLanguage                  0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   This refers to the version of the request payload schema.
/// </BLOCKQUOTE></PRE>
/// Element "Version" of XSD type xs:string.
    std::string                          Version                        1;	///< Required element.
/// @todo <any namespace="##local" minOccurs="0">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
    _XML                                 __any                         0;	///< Catch any element content in XML string.
    END OF INHERITED FROM ns3__AbstractRequestType */
/// <PRE><BLOCKQUOTE>
///   The earliest transaction date at which to start the search. No wildcards are allowed. <br/><br/>
///   <b>Required</b>
/// </BLOCKQUOTE></PRE>
/// Element "StartDate" of XSD type xs:dateTime.
    time_t                               StartDate                      1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   The latest transaction date to be included in the search <br/><br/>
///   Optional
/// </BLOCKQUOTE></PRE>
/// Element "EndDate" of XSD type xs:dateTime.
    time_t*                              EndDate                        0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Search by the buyer's email address <br/><br/>
///   Optional
///   <br/><br/>
///   Character length and limitations: 127 single-byte alphanumeric characters
/// </BLOCKQUOTE></PRE>
/// Element "Payer" of XSD type "urn:ebay:apis:eBLBaseComponents":EmailAddressType.
    ns3__EmailAddressType*               Payer                          0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Search by the receiver's email address. If the merchant account has only one email, this is the primary email. Can also be a non-primary email.
///   <br/><br/>
///   Optional
/// </BLOCKQUOTE></PRE>
/// Element "Receiver" of XSD type "urn:ebay:apis:eBLBaseComponents":EmailAddressType.
    ns3__EmailAddressType*               Receiver                       0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Search by the PayPal Account Optional receipt ID
///   <br/><br/>
///   Optional
/// </BLOCKQUOTE></PRE>
/// Element "ReceiptID" of XSD type xs:string.
    std::string*                         ReceiptID                      0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Search by the transaction ID. <br/><br/>
///   Optional
///   <br/><br/>
///   The returned results are from the merchant's transaction records. <br/><br/>
///   Character length and limitations: 19 single-byte characters maximum
/// </BLOCKQUOTE></PRE>
/// Element "TransactionID" of XSD type "urn:ebay:apis:eBLBaseComponents":TransactionId.
    ns3__TransactionId*                  TransactionID                  0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Search by Recurring Payment Profile id. The ProfileID is returned as part of the CreateRecurringPaymentsProfile API response. <br/><br/>
///   Optional
/// </BLOCKQUOTE></PRE>
/// Element "ProfileID" of XSD type xs:string.
    std::string*                         ProfileID                      0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Search by the buyer's name <br/><br/>
///   Optional
///   <br/><br/>
///   Salutation: 20 single-byte character limit.
///   <br/><br/>
///   FirstName: 25 single-byte character limit.
///   <br/><br/>
///   MiddleName: 25 single-byte character limit.
///   <br/><br/>
///   LastName: 25 single-byte character limit.
///   <br/><br/>
///   Suffix: 12 single-byte character limit.
/// </BLOCKQUOTE></PRE>
/// Element "PayerName" of XSD type "urn:ebay:apis:eBLBaseComponents":PersonNameType.
    ns3__PersonNameType*                 PayerName                      0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Search by item number of the purchased goods.
///   <br/><br/>
///   Optional
///   <br/><br/>
///   To search for purchased items not related to auctions, set the AuctionItemNumber element to the value of the HTML item_number variable set in the shopping cart for the original transaction.
/// </BLOCKQUOTE></PRE>
/// Element "AuctionItemNumber" of XSD type xs:string.
    std::string*                         AuctionItemNumber              0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Search by invoice identification key, as set by you for the original transaction. InvoiceID searches the invoice records for items sold by the merchant, not the items purchased. <br/><br/>
///   Optional
///   <br/><br/>
///   The value for InvoiceID must exactly match an invoice identification number. No wildcards are allowed. <br/><br/>
///   Character length and limitations: 127 single-byte characters maximum
/// </BLOCKQUOTE></PRE>
/// Element "InvoiceID" of XSD type xs:string.
    std::string*                         InvoiceID                      0;	///< Optional element.
/// Element "CardNumber" of XSD type xs:string.
    std::string*                         CardNumber                     0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Search by classification of transaction. Some kinds of possible classes of transactions are not searchable with TransactionSearchRequest. You cannot search for bank transfer withdrawals, for example. <br/><br/>
///   Optional
///   <br/><br/>
///   All: all transaction classifications.
///   <br/><br/>
///   Sent: only payments sent.
///   <br/><br/>
///   Received: only payments received.
///   <br/><br/>
///   MassPay: only mass payments.
///   <br/><br/>
///   MoneyRequest: only money requests.
///   <br/><br/>
///   FundsAdded: only funds added to balance.
///   <br/><br/>
///   FundsWithdrawn: only funds withdrawn from balance.
///   <br/><br/>
///   Referral: only transactions involving referrals.
///   <br/><br/>
///   Fee: only transactions involving fees.
///   <br/><br/>
///   Subscription: only transactions involving subscriptions.
///   <br/><br/>
///   Dividend: only transactions involving dividends.
///   <br/><br/>
///   Billpay: only transactions involving BillPay Transactions.
///   <br/><br/>
///   Refund: only transactions involving funds.
///   <br/><br/>
///   CurrencyConversions: only transactions involving currency conversions.
///   <br/><br/>
///   BalanceTransfer: only transactions involving balance transfers.
///   <br/><br/>
///   Reversal: only transactions involving BillPay reversals.
///   <br/><br/>
///   Shipping: only transactions involving UPS shipping fees.
///   <br/><br/>
///   BalanceAffecting: only transactions that affect the account balance.
///   <br/><br/>
///   ECheck: only transactions involving eCheck
///   <br/><br/>
///   ForcedPostTransaction: forced post transaction.
///   <br/><br/>
///   NonReferencedRefunds: non-referenced refunds.
/// </BLOCKQUOTE></PRE>
/// Element "TransactionClass" of XSD type "urn:ebay:apis:eBLBaseComponents":PaymentTransactionClassCodeType.
    enum ns3__PaymentTransactionClassCodeType*  TransactionClass               0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Search by transaction amount <br/><br/>
///   Optional
///   <br/><br/>
///   You must set the currencyID attribute to one of the three-character currency codes for any of the supported PayPal currencies.
/// </BLOCKQUOTE></PRE>
/// Element "Amount" of XSD type "urn:ebay:apis:CoreComponentTypes":BasicAmountType.
    ns2__BasicAmountType*                Amount                         0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Search by currency code
///   <br/><br/>
///   Optional
/// </BLOCKQUOTE></PRE>
/// Element "CurrencyCode" of XSD type "urn:ebay:apis:eBLBaseComponents":CurrencyCodeType.
    enum ns3__CurrencyCodeType*          CurrencyCode                   0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Search by transaction status <br/><br/>
///   Optional
///   <br/><br/>
///   Pending: The payment is pending. The specific reason the payment is pending is returned by the GetTransactionDetails APIPendingReason element. For more information, see PendingReason.
///   <br/><br/>
///   Processing: The payment is being processed.
///   <br/><br/>
///   Success: The payment has been completed and the funds have been added successfully to your account balance.
///   <br/><br/>
///   Denied: You denied the payment. This happens only if the payment was previously pending.
///   <br/><br/>
///   Reversed: A payment was reversed due to a chargeback or other type of reversal. The funds have been removed from your account balance and returned to the buyer.
/// </BLOCKQUOTE></PRE>
/// Element "Status" of XSD type "urn:ebay:apis:eBLBaseComponents":PaymentTransactionStatusCodeType.
    enum ns3__PaymentTransactionStatusCodeType*  Status                         0;	///< Optional element.
};

/// @brief "urn:ebay:api:PayPalAPI":TransactionSearchResponseType is a complexType with complexContent extension of XSD type "urn:ebay:apis:eBLBaseComponents":AbstractResponseType.
///
/// class ns1__TransactionSearchResponseType operations:
/// - ns1__TransactionSearchResponseType* soap_new_ns1__TransactionSearchResponseType(soap*) allocate and default initialize
/// - ns1__TransactionSearchResponseType* soap_new_ns1__TransactionSearchResponseType(soap*, int num) allocate array and default initialize values
/// - ns1__TransactionSearchResponseType* soap_new_req_ns1__TransactionSearchResponseType(soap*, ...) allocate, set required members
/// - ns1__TransactionSearchResponseType* soap_new_set_ns1__TransactionSearchResponseType(soap*, ...) allocate, set all public members
/// - ns1__TransactionSearchResponseType::soap_default(soap*) default initialize members
/// - int soap_read_ns1__TransactionSearchResponseType(soap*, ns1__TransactionSearchResponseType*) deserialize from a stream
/// - int soap_write_ns1__TransactionSearchResponseType(soap*, ns1__TransactionSearchResponseType*) serialize to a stream
/// - ns1__TransactionSearchResponseType* ns1__TransactionSearchResponseType::soap_dup(soap*) returns deep copy of ns1__TransactionSearchResponseType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__TransactionSearchResponseType::soap_del() deep deletes ns1__TransactionSearchResponseType data members, use only after ns1__TransactionSearchResponseType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__TransactionSearchResponseType : public ns3__AbstractResponseType
{ public:
/*  INHERITED FROM ns3__AbstractResponseType:
/// <PRE><BLOCKQUOTE>
///   This value represents the date and time (GMT) when the response was generated by a service provider (as a result of processing of a request).
/// </BLOCKQUOTE></PRE>
/// Element "Timestamp" of XSD type xs:dateTime.
    time_t*                              Timestamp                      0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Application level acknowledgement code.
/// </BLOCKQUOTE></PRE>
/// Element "Ack" of XSD type "urn:ebay:apis:eBLBaseComponents":AckCodeType.
    enum ns3__AckCodeType                Ack                            1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   CorrelationID may be used optionally with an application level acknowledgement.
/// </BLOCKQUOTE></PRE>
/// Element "CorrelationID" of XSD type xs:string.
    std::string*                         CorrelationID                  0;	///< Optional element.
/// Vector of ns3__ErrorType* of length 0..unbounded.
    std::vector<ns3__ErrorType*        > Errors                         0;	///< Elements.
/// <PRE><BLOCKQUOTE>
///   This refers to the version of the response payload schema.
/// </BLOCKQUOTE></PRE>
/// Element "Version" of XSD type xs:string.
    std::string                          Version                        1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   This refers to the specific software build that was used in the deployment for processing the request and generating the response.
/// </BLOCKQUOTE></PRE>
/// Element "Build" of XSD type xs:string.
    std::string                          Build                          1;	///< Required element.
/// @todo <any namespace="##local" minOccurs="0">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
    _XML                                 __any                         0;	///< Catch any element content in XML string.
    END OF INHERITED FROM ns3__AbstractResponseType */
/// <PRE><BLOCKQUOTE>
///   Results of a Transaction Search.
/// </BLOCKQUOTE></PRE>
/// Vector of ns3__PaymentTransactionSearchResultType* element refs of length 0..unbounded.
    std::vector<ns3__PaymentTransactionSearchResultType*> ns3__PaymentTransactions       0;	///< Elements.
};

/// @brief "urn:ebay:api:PayPalAPI":MassPayRequestType is a complexType with complexContent extension of XSD type "urn:ebay:apis:eBLBaseComponents":AbstractRequestType.
///
/// class ns1__MassPayRequestType operations:
/// - ns1__MassPayRequestType* soap_new_ns1__MassPayRequestType(soap*) allocate and default initialize
/// - ns1__MassPayRequestType* soap_new_ns1__MassPayRequestType(soap*, int num) allocate array and default initialize values
/// - ns1__MassPayRequestType* soap_new_req_ns1__MassPayRequestType(soap*, ...) allocate, set required members
/// - ns1__MassPayRequestType* soap_new_set_ns1__MassPayRequestType(soap*, ...) allocate, set all public members
/// - ns1__MassPayRequestType::soap_default(soap*) default initialize members
/// - int soap_read_ns1__MassPayRequestType(soap*, ns1__MassPayRequestType*) deserialize from a stream
/// - int soap_write_ns1__MassPayRequestType(soap*, ns1__MassPayRequestType*) serialize to a stream
/// - ns1__MassPayRequestType* ns1__MassPayRequestType::soap_dup(soap*) returns deep copy of ns1__MassPayRequestType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__MassPayRequestType::soap_del() deep deletes ns1__MassPayRequestType data members, use only after ns1__MassPayRequestType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__MassPayRequestType : public ns3__AbstractRequestType
{ public:
/*  INHERITED FROM ns3__AbstractRequestType:
/// <PRE><BLOCKQUOTE>
///   This specifies the required detail level that is needed by a client application pertaining to
///   a particular data component (e.g., Item, Transaction, etc.). The detail level is specified in
///   the DetailLevelCodeType which has all the enumerated values of the detail level for each component.
/// </BLOCKQUOTE></PRE>
/// Vector of enum ns3__DetailLevelCodeType of length 0..unbounded.
    std::vector<enum ns3__DetailLevelCodeType> DetailLevel                    0;	///< Elements.
/// <PRE><BLOCKQUOTE>
///   This should be the standard RFC 3066 language identification tag, e.g., en_US.
/// </BLOCKQUOTE></PRE>
/// Element "ErrorLanguage" of XSD type xs:string.
    std::string*                         ErrorLanguage                  0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   This refers to the version of the request payload schema.
/// </BLOCKQUOTE></PRE>
/// Element "Version" of XSD type xs:string.
    std::string                          Version                        1;	///< Required element.
/// @todo <any namespace="##local" minOccurs="0">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
    _XML                                 __any                         0;	///< Catch any element content in XML string.
    END OF INHERITED FROM ns3__AbstractRequestType */
/// <PRE><BLOCKQUOTE>
///   Subject line of the email sent to all recipients. This subject is not contained in the input file; you must create it with your application. <br/>
///   <br/>
///   Optional
///   <br/>
///   <br/>
///   Character length and limitations: 255 single-byte alphanumeric characters
/// </BLOCKQUOTE></PRE>
/// Element "EmailSubject" of XSD type xs:string.
    std::string*                         EmailSubject                   0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Indicates how you identify the recipients of payments in all MassPayItems: either by EmailAddress (ReceiverEmail in MassPayItem), PhoneNumber (ReceiverPhone in MassPayItem), or by UserID (ReceiverID in MassPayItem). <br/>
///   <br/>
///   <b>Required. </b>You must specify one or the other of EmailAddress or UserID.
/// </BLOCKQUOTE></PRE>
/// Element "ReceiverType" of XSD type "urn:ebay:apis:eBLBaseComponents":ReceiverInfoCodeType.
    enum ns3__ReceiverInfoCodeType*      ReceiverType                   0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Known as BN code, to track the partner referred merchant transactions. <br/><br/>
///   Optional
///   <br/><br/>
///   Character length and limitations: 32 single-byte alphanumeric characters
/// </BLOCKQUOTE></PRE>
/// Element "ButtonSource" of XSD type xs:string.
    std::string*                         ButtonSource                   0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Details of each payment. A single MassPayRequest can include up to 250 MassPayItems. <br/>
///   <br/>
///   <b>Required</b>
/// </BLOCKQUOTE></PRE>
/// Vector of ns1__MassPayRequestItemType* of length 1..250.
    std::vector<ns1__MassPayRequestItemType*> MassPayItem                    1:250;	///< Elements.
};

/// @brief "urn:ebay:api:PayPalAPI":MassPayResponseType is a complexType with complexContent extension of XSD type "urn:ebay:apis:eBLBaseComponents":AbstractResponseType.
///
/// class ns1__MassPayResponseType operations:
/// - ns1__MassPayResponseType* soap_new_ns1__MassPayResponseType(soap*) allocate and default initialize
/// - ns1__MassPayResponseType* soap_new_ns1__MassPayResponseType(soap*, int num) allocate array and default initialize values
/// - ns1__MassPayResponseType* soap_new_req_ns1__MassPayResponseType(soap*, ...) allocate, set required members
/// - ns1__MassPayResponseType* soap_new_set_ns1__MassPayResponseType(soap*, ...) allocate, set all public members
/// - ns1__MassPayResponseType::soap_default(soap*) default initialize members
/// - int soap_read_ns1__MassPayResponseType(soap*, ns1__MassPayResponseType*) deserialize from a stream
/// - int soap_write_ns1__MassPayResponseType(soap*, ns1__MassPayResponseType*) serialize to a stream
/// - ns1__MassPayResponseType* ns1__MassPayResponseType::soap_dup(soap*) returns deep copy of ns1__MassPayResponseType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__MassPayResponseType::soap_del() deep deletes ns1__MassPayResponseType data members, use only after ns1__MassPayResponseType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__MassPayResponseType : public ns3__AbstractResponseType
{ public:
/*  INHERITED FROM ns3__AbstractResponseType:
/// <PRE><BLOCKQUOTE>
///   This value represents the date and time (GMT) when the response was generated by a service provider (as a result of processing of a request).
/// </BLOCKQUOTE></PRE>
/// Element "Timestamp" of XSD type xs:dateTime.
    time_t*                              Timestamp                      0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Application level acknowledgement code.
/// </BLOCKQUOTE></PRE>
/// Element "Ack" of XSD type "urn:ebay:apis:eBLBaseComponents":AckCodeType.
    enum ns3__AckCodeType                Ack                            1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   CorrelationID may be used optionally with an application level acknowledgement.
/// </BLOCKQUOTE></PRE>
/// Element "CorrelationID" of XSD type xs:string.
    std::string*                         CorrelationID                  0;	///< Optional element.
/// Vector of ns3__ErrorType* of length 0..unbounded.
    std::vector<ns3__ErrorType*        > Errors                         0;	///< Elements.
/// <PRE><BLOCKQUOTE>
///   This refers to the version of the response payload schema.
/// </BLOCKQUOTE></PRE>
/// Element "Version" of XSD type xs:string.
    std::string                          Version                        1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   This refers to the specific software build that was used in the deployment for processing the request and generating the response.
/// </BLOCKQUOTE></PRE>
/// Element "Build" of XSD type xs:string.
    std::string                          Build                          1;	///< Required element.
/// @todo <any namespace="##local" minOccurs="0">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
    _XML                                 __any                         0;	///< Catch any element content in XML string.
    END OF INHERITED FROM ns3__AbstractResponseType */
};

/// @brief "urn:ebay:api:PayPalAPI":BAUpdateRequestType is a complexType with complexContent extension of XSD type "urn:ebay:apis:eBLBaseComponents":AbstractRequestType.
///
/// class ns1__BAUpdateRequestType operations:
/// - ns1__BAUpdateRequestType* soap_new_ns1__BAUpdateRequestType(soap*) allocate and default initialize
/// - ns1__BAUpdateRequestType* soap_new_ns1__BAUpdateRequestType(soap*, int num) allocate array and default initialize values
/// - ns1__BAUpdateRequestType* soap_new_req_ns1__BAUpdateRequestType(soap*, ...) allocate, set required members
/// - ns1__BAUpdateRequestType* soap_new_set_ns1__BAUpdateRequestType(soap*, ...) allocate, set all public members
/// - ns1__BAUpdateRequestType::soap_default(soap*) default initialize members
/// - int soap_read_ns1__BAUpdateRequestType(soap*, ns1__BAUpdateRequestType*) deserialize from a stream
/// - int soap_write_ns1__BAUpdateRequestType(soap*, ns1__BAUpdateRequestType*) serialize to a stream
/// - ns1__BAUpdateRequestType* ns1__BAUpdateRequestType::soap_dup(soap*) returns deep copy of ns1__BAUpdateRequestType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__BAUpdateRequestType::soap_del() deep deletes ns1__BAUpdateRequestType data members, use only after ns1__BAUpdateRequestType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__BAUpdateRequestType : public ns3__AbstractRequestType
{ public:
/*  INHERITED FROM ns3__AbstractRequestType:
/// <PRE><BLOCKQUOTE>
///   This specifies the required detail level that is needed by a client application pertaining to
///   a particular data component (e.g., Item, Transaction, etc.). The detail level is specified in
///   the DetailLevelCodeType which has all the enumerated values of the detail level for each component.
/// </BLOCKQUOTE></PRE>
/// Vector of enum ns3__DetailLevelCodeType of length 0..unbounded.
    std::vector<enum ns3__DetailLevelCodeType> DetailLevel                    0;	///< Elements.
/// <PRE><BLOCKQUOTE>
///   This should be the standard RFC 3066 language identification tag, e.g., en_US.
/// </BLOCKQUOTE></PRE>
/// Element "ErrorLanguage" of XSD type xs:string.
    std::string*                         ErrorLanguage                  0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   This refers to the version of the request payload schema.
/// </BLOCKQUOTE></PRE>
/// Element "Version" of XSD type xs:string.
    std::string                          Version                        1;	///< Required element.
/// @todo <any namespace="##local" minOccurs="0">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
    _XML                                 __any                         0;	///< Catch any element content in XML string.
    END OF INHERITED FROM ns3__AbstractRequestType */

/// </BLOCKQUOTE></PRE>
/// Element "ReferenceID" of XSD type xs:string.
    std::string                          ReferenceID                    1;	///< Required element.

/// </BLOCKQUOTE></PRE>
/// Element "BillingAgreementDescription" of XSD type xs:string.
    std::string*                         BillingAgreementDescription    0;	///< Optional element.

/// </BLOCKQUOTE></PRE>
/// Element "BillingAgreementStatus" of XSD type "urn:ebay:apis:eBLBaseComponents":MerchantPullStatusCodeType.
    enum ns3__MerchantPullStatusCodeType*  BillingAgreementStatus         0;	///< Optional element.

/// </BLOCKQUOTE></PRE>
/// Element "BillingAgreementCustom" of XSD type xs:string.
    std::string*                         BillingAgreementCustom         0;	///< Optional element.
};

/// @brief "urn:ebay:api:PayPalAPI":BAUpdateResponseType is a complexType with complexContent extension of XSD type "urn:ebay:apis:eBLBaseComponents":AbstractResponseType.
///
/// class ns1__BAUpdateResponseType operations:
/// - ns1__BAUpdateResponseType* soap_new_ns1__BAUpdateResponseType(soap*) allocate and default initialize
/// - ns1__BAUpdateResponseType* soap_new_ns1__BAUpdateResponseType(soap*, int num) allocate array and default initialize values
/// - ns1__BAUpdateResponseType* soap_new_req_ns1__BAUpdateResponseType(soap*, ...) allocate, set required members
/// - ns1__BAUpdateResponseType* soap_new_set_ns1__BAUpdateResponseType(soap*, ...) allocate, set all public members
/// - ns1__BAUpdateResponseType::soap_default(soap*) default initialize members
/// - int soap_read_ns1__BAUpdateResponseType(soap*, ns1__BAUpdateResponseType*) deserialize from a stream
/// - int soap_write_ns1__BAUpdateResponseType(soap*, ns1__BAUpdateResponseType*) serialize to a stream
/// - ns1__BAUpdateResponseType* ns1__BAUpdateResponseType::soap_dup(soap*) returns deep copy of ns1__BAUpdateResponseType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__BAUpdateResponseType::soap_del() deep deletes ns1__BAUpdateResponseType data members, use only after ns1__BAUpdateResponseType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__BAUpdateResponseType : public ns3__AbstractResponseType
{ public:
/*  INHERITED FROM ns3__AbstractResponseType:
/// <PRE><BLOCKQUOTE>
///   This value represents the date and time (GMT) when the response was generated by a service provider (as a result of processing of a request).
/// </BLOCKQUOTE></PRE>
/// Element "Timestamp" of XSD type xs:dateTime.
    time_t*                              Timestamp                      0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Application level acknowledgement code.
/// </BLOCKQUOTE></PRE>
/// Element "Ack" of XSD type "urn:ebay:apis:eBLBaseComponents":AckCodeType.
    enum ns3__AckCodeType                Ack                            1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   CorrelationID may be used optionally with an application level acknowledgement.
/// </BLOCKQUOTE></PRE>
/// Element "CorrelationID" of XSD type xs:string.
    std::string*                         CorrelationID                  0;	///< Optional element.
/// Vector of ns3__ErrorType* of length 0..unbounded.
    std::vector<ns3__ErrorType*        > Errors                         0;	///< Elements.
/// <PRE><BLOCKQUOTE>
///   This refers to the version of the response payload schema.
/// </BLOCKQUOTE></PRE>
/// Element "Version" of XSD type xs:string.
    std::string                          Version                        1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   This refers to the specific software build that was used in the deployment for processing the request and generating the response.
/// </BLOCKQUOTE></PRE>
/// Element "Build" of XSD type xs:string.
    std::string                          Build                          1;	///< Required element.
/// @todo <any namespace="##local" minOccurs="0">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
    _XML                                 __any                         0;	///< Catch any element content in XML string.
    END OF INHERITED FROM ns3__AbstractResponseType */
/// Element reference "urn:ebay:api:PayPalAPI:""urn:ebay:apis:eBLBaseComponents":BAUpdateResponseDetails.
    ns3__BAUpdateResponseDetailsType*    ns3__BAUpdateResponseDetails   1;	///< Required element.
};

/// @brief "urn:ebay:api:PayPalAPI":AddressVerifyRequestType is a complexType with complexContent extension of XSD type "urn:ebay:apis:eBLBaseComponents":AbstractRequestType.
///
/// class ns1__AddressVerifyRequestType operations:
/// - ns1__AddressVerifyRequestType* soap_new_ns1__AddressVerifyRequestType(soap*) allocate and default initialize
/// - ns1__AddressVerifyRequestType* soap_new_ns1__AddressVerifyRequestType(soap*, int num) allocate array and default initialize values
/// - ns1__AddressVerifyRequestType* soap_new_req_ns1__AddressVerifyRequestType(soap*, ...) allocate, set required members
/// - ns1__AddressVerifyRequestType* soap_new_set_ns1__AddressVerifyRequestType(soap*, ...) allocate, set all public members
/// - ns1__AddressVerifyRequestType::soap_default(soap*) default initialize members
/// - int soap_read_ns1__AddressVerifyRequestType(soap*, ns1__AddressVerifyRequestType*) deserialize from a stream
/// - int soap_write_ns1__AddressVerifyRequestType(soap*, ns1__AddressVerifyRequestType*) serialize to a stream
/// - ns1__AddressVerifyRequestType* ns1__AddressVerifyRequestType::soap_dup(soap*) returns deep copy of ns1__AddressVerifyRequestType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__AddressVerifyRequestType::soap_del() deep deletes ns1__AddressVerifyRequestType data members, use only after ns1__AddressVerifyRequestType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__AddressVerifyRequestType : public ns3__AbstractRequestType
{ public:
/*  INHERITED FROM ns3__AbstractRequestType:
/// <PRE><BLOCKQUOTE>
///   This specifies the required detail level that is needed by a client application pertaining to
///   a particular data component (e.g., Item, Transaction, etc.). The detail level is specified in
///   the DetailLevelCodeType which has all the enumerated values of the detail level for each component.
/// </BLOCKQUOTE></PRE>
/// Vector of enum ns3__DetailLevelCodeType of length 0..unbounded.
    std::vector<enum ns3__DetailLevelCodeType> DetailLevel                    0;	///< Elements.
/// <PRE><BLOCKQUOTE>
///   This should be the standard RFC 3066 language identification tag, e.g., en_US.
/// </BLOCKQUOTE></PRE>
/// Element "ErrorLanguage" of XSD type xs:string.
    std::string*                         ErrorLanguage                  0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   This refers to the version of the request payload schema.
/// </BLOCKQUOTE></PRE>
/// Element "Version" of XSD type xs:string.
    std::string                          Version                        1;	///< Required element.
/// @todo <any namespace="##local" minOccurs="0">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
    _XML                                 __any                         0;	///< Catch any element content in XML string.
    END OF INHERITED FROM ns3__AbstractRequestType */
/// <PRE><BLOCKQUOTE>
///   Email address of buyer to be verified. <br/>
///   <br/>
///   <b>Required</b>
///   <br/>
///   <br/>
///   Maximum string length: 255 single-byte characters Input mask: ?@?.??
/// </BLOCKQUOTE></PRE>
/// Element "Email" of XSD type "urn:ebay:apis:eBLBaseComponents":EmailAddressType.
    ns3__EmailAddressType                Email                          1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   First line of buyers billing or shipping street address to be verified. <br/>
///   <br/>
///   <b>Required</b>
///   <br/>
///   <br/>For verification, input value of street address must match the first three single-byte characters of the street address on file for the PayPal account.
///   <br/>
///   <br/>
///   Maximum string length: 35 single-byte characters Alphanumeric plus - , . # \ Whitespace and case of input value are ignored.
/// </BLOCKQUOTE></PRE>
/// Element "Street" of XSD type xs:string.
    std::string                          Street                         1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Postal code to be verified. <br/>
///   <br/>
///   <b>Required</b>
///   <br/>
///   <br/>
///   For verification, input value of postal code must match the first five single-byte characters of the postal code on file for the PayPal account.
///   <br/>
///   <br/>
///   Maximum string length: 16 single-byte characters Whitespace and case of input value are ignored.
/// </BLOCKQUOTE></PRE>
/// Element "Zip" of XSD type xs:string.
    std::string                          Zip                            1;	///< Required element.
};

/// @brief "urn:ebay:api:PayPalAPI":AddressVerifyResponseType is a complexType with complexContent extension of XSD type "urn:ebay:apis:eBLBaseComponents":AbstractResponseType.
///
/// class ns1__AddressVerifyResponseType operations:
/// - ns1__AddressVerifyResponseType* soap_new_ns1__AddressVerifyResponseType(soap*) allocate and default initialize
/// - ns1__AddressVerifyResponseType* soap_new_ns1__AddressVerifyResponseType(soap*, int num) allocate array and default initialize values
/// - ns1__AddressVerifyResponseType* soap_new_req_ns1__AddressVerifyResponseType(soap*, ...) allocate, set required members
/// - ns1__AddressVerifyResponseType* soap_new_set_ns1__AddressVerifyResponseType(soap*, ...) allocate, set all public members
/// - ns1__AddressVerifyResponseType::soap_default(soap*) default initialize members
/// - int soap_read_ns1__AddressVerifyResponseType(soap*, ns1__AddressVerifyResponseType*) deserialize from a stream
/// - int soap_write_ns1__AddressVerifyResponseType(soap*, ns1__AddressVerifyResponseType*) serialize to a stream
/// - ns1__AddressVerifyResponseType* ns1__AddressVerifyResponseType::soap_dup(soap*) returns deep copy of ns1__AddressVerifyResponseType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__AddressVerifyResponseType::soap_del() deep deletes ns1__AddressVerifyResponseType data members, use only after ns1__AddressVerifyResponseType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__AddressVerifyResponseType : public ns3__AbstractResponseType
{ public:
/*  INHERITED FROM ns3__AbstractResponseType:
/// <PRE><BLOCKQUOTE>
///   This value represents the date and time (GMT) when the response was generated by a service provider (as a result of processing of a request).
/// </BLOCKQUOTE></PRE>
/// Element "Timestamp" of XSD type xs:dateTime.
    time_t*                              Timestamp                      0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Application level acknowledgement code.
/// </BLOCKQUOTE></PRE>
/// Element "Ack" of XSD type "urn:ebay:apis:eBLBaseComponents":AckCodeType.
    enum ns3__AckCodeType                Ack                            1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   CorrelationID may be used optionally with an application level acknowledgement.
/// </BLOCKQUOTE></PRE>
/// Element "CorrelationID" of XSD type xs:string.
    std::string*                         CorrelationID                  0;	///< Optional element.
/// Vector of ns3__ErrorType* of length 0..unbounded.
    std::vector<ns3__ErrorType*        > Errors                         0;	///< Elements.
/// <PRE><BLOCKQUOTE>
///   This refers to the version of the response payload schema.
/// </BLOCKQUOTE></PRE>
/// Element "Version" of XSD type xs:string.
    std::string                          Version                        1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   This refers to the specific software build that was used in the deployment for processing the request and generating the response.
/// </BLOCKQUOTE></PRE>
/// Element "Build" of XSD type xs:string.
    std::string                          Build                          1;	///< Required element.
/// @todo <any namespace="##local" minOccurs="0">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
    _XML                                 __any                         0;	///< Catch any element content in XML string.
    END OF INHERITED FROM ns3__AbstractResponseType */
/// <PRE><BLOCKQUOTE>
///   Confirmation of a match, with one of the following tokens:
///   <br/>
///   <br/>
///   None: The input value of the Email object does not match any email address on file at PayPal.
///   <br/>
///   <br/>
///   Confirmed: If the value of the StreetMatch object is Matched, PayPal responds that the entire postal address is confirmed.
///   <br/>
///   <br/>
///   Unconfirmed: PayPal responds that the postal address is unconfirmed
/// </BLOCKQUOTE></PRE>
/// Element "ConfirmationCode" of XSD type "urn:ebay:apis:eBLBaseComponents":AddressStatusCodeType.
    enum ns3__AddressStatusCodeType      ConfirmationCode               1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   PayPal has compared the postal address you want to verify with the postal address on file at PayPal.
///   <br/>
///   <br/>
///   None: The input value of the Email object does not match any email address on file at PayPal. In addition, an error response is returned. No further comparison of other input values has been made.
///   <br/>
///   <br/>
///   Matched: The street address matches the street address on file at PayPal.
///   <br/>
///   <br/>
///   Unmatched: The street address does not match the street address on file at PayPal.
/// </BLOCKQUOTE></PRE>
/// Element "StreetMatch" of XSD type "urn:ebay:apis:eBLBaseComponents":MatchStatusCodeType.
    enum ns3__MatchStatusCodeType        StreetMatch                    1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   PayPal has compared the zip code you want to verify with the zip code on file for the email address. <br/>
///   <br/>
///   None: The street address was unmatched. No further comparison of other input values has been made.
///   <br/>
///   <br/>Matched: The zip code matches the zip code on file at PayPal.
///   <br/>
///   <br/>Unmatched: The zip code does not match the zip code on file at PayPal.
/// </BLOCKQUOTE></PRE>
/// Element "ZipMatch" of XSD type "urn:ebay:apis:eBLBaseComponents":MatchStatusCodeType.
    enum ns3__MatchStatusCodeType*       ZipMatch                       0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Two-character country code (ISO 3166) on file for the PayPal email address.
/// </BLOCKQUOTE></PRE>
/// Element "CountryCode" of XSD type "urn:ebay:apis:eBLBaseComponents":CountryCodeType.
    enum ns3__CountryCodeType*           CountryCode                    0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   The token prevents a buyer from using any street address other than the address on file at PayPal during additional purchases he might make from the merchant. It contains encrypted information about the users street address and email address. You can pass the value of the token with the Buy Now button HTML address_api_token variable so that PayPal prevents the buyer from using any street address or email address other than those verified by PayPal. The token is valid for 24 hours. <br/>
///   Character length and limitations: 94 single-byte characters
/// </BLOCKQUOTE></PRE>
/// Element "PayPalToken" of XSD type xs:string.
    std::string*                         PayPalToken                    0;	///< Optional element.
};

/// @brief "urn:ebay:api:PayPalAPI":EnterBoardingRequestType is a complexType with complexContent extension of XSD type "urn:ebay:apis:eBLBaseComponents":AbstractRequestType.
///
/// class ns1__EnterBoardingRequestType operations:
/// - ns1__EnterBoardingRequestType* soap_new_ns1__EnterBoardingRequestType(soap*) allocate and default initialize
/// - ns1__EnterBoardingRequestType* soap_new_ns1__EnterBoardingRequestType(soap*, int num) allocate array and default initialize values
/// - ns1__EnterBoardingRequestType* soap_new_req_ns1__EnterBoardingRequestType(soap*, ...) allocate, set required members
/// - ns1__EnterBoardingRequestType* soap_new_set_ns1__EnterBoardingRequestType(soap*, ...) allocate, set all public members
/// - ns1__EnterBoardingRequestType::soap_default(soap*) default initialize members
/// - int soap_read_ns1__EnterBoardingRequestType(soap*, ns1__EnterBoardingRequestType*) deserialize from a stream
/// - int soap_write_ns1__EnterBoardingRequestType(soap*, ns1__EnterBoardingRequestType*) serialize to a stream
/// - ns1__EnterBoardingRequestType* ns1__EnterBoardingRequestType::soap_dup(soap*) returns deep copy of ns1__EnterBoardingRequestType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__EnterBoardingRequestType::soap_del() deep deletes ns1__EnterBoardingRequestType data members, use only after ns1__EnterBoardingRequestType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__EnterBoardingRequestType : public ns3__AbstractRequestType
{ public:
/*  INHERITED FROM ns3__AbstractRequestType:
/// <PRE><BLOCKQUOTE>
///   This specifies the required detail level that is needed by a client application pertaining to
///   a particular data component (e.g., Item, Transaction, etc.). The detail level is specified in
///   the DetailLevelCodeType which has all the enumerated values of the detail level for each component.
/// </BLOCKQUOTE></PRE>
/// Vector of enum ns3__DetailLevelCodeType of length 0..unbounded.
    std::vector<enum ns3__DetailLevelCodeType> DetailLevel                    0;	///< Elements.
/// <PRE><BLOCKQUOTE>
///   This should be the standard RFC 3066 language identification tag, e.g., en_US.
/// </BLOCKQUOTE></PRE>
/// Element "ErrorLanguage" of XSD type xs:string.
    std::string*                         ErrorLanguage                  0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   This refers to the version of the request payload schema.
/// </BLOCKQUOTE></PRE>
/// Element "Version" of XSD type xs:string.
    std::string                          Version                        1;	///< Required element.
/// @todo <any namespace="##local" minOccurs="0">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
    _XML                                 __any                         0;	///< Catch any element content in XML string.
    END OF INHERITED FROM ns3__AbstractRequestType */
/// Element reference "urn:ebay:api:PayPalAPI:""urn:ebay:apis:eBLBaseComponents":EnterBoardingRequestDetails.
    ns3__EnterBoardingRequestDetailsType*  ns3__EnterBoardingRequestDetails 1;	///< Required element.
};

/// @brief "urn:ebay:api:PayPalAPI":EnterBoardingResponseType is a complexType with complexContent extension of XSD type "urn:ebay:apis:eBLBaseComponents":AbstractResponseType.
///
/// class ns1__EnterBoardingResponseType operations:
/// - ns1__EnterBoardingResponseType* soap_new_ns1__EnterBoardingResponseType(soap*) allocate and default initialize
/// - ns1__EnterBoardingResponseType* soap_new_ns1__EnterBoardingResponseType(soap*, int num) allocate array and default initialize values
/// - ns1__EnterBoardingResponseType* soap_new_req_ns1__EnterBoardingResponseType(soap*, ...) allocate, set required members
/// - ns1__EnterBoardingResponseType* soap_new_set_ns1__EnterBoardingResponseType(soap*, ...) allocate, set all public members
/// - ns1__EnterBoardingResponseType::soap_default(soap*) default initialize members
/// - int soap_read_ns1__EnterBoardingResponseType(soap*, ns1__EnterBoardingResponseType*) deserialize from a stream
/// - int soap_write_ns1__EnterBoardingResponseType(soap*, ns1__EnterBoardingResponseType*) serialize to a stream
/// - ns1__EnterBoardingResponseType* ns1__EnterBoardingResponseType::soap_dup(soap*) returns deep copy of ns1__EnterBoardingResponseType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__EnterBoardingResponseType::soap_del() deep deletes ns1__EnterBoardingResponseType data members, use only after ns1__EnterBoardingResponseType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__EnterBoardingResponseType : public ns3__AbstractResponseType
{ public:
/*  INHERITED FROM ns3__AbstractResponseType:
/// <PRE><BLOCKQUOTE>
///   This value represents the date and time (GMT) when the response was generated by a service provider (as a result of processing of a request).
/// </BLOCKQUOTE></PRE>
/// Element "Timestamp" of XSD type xs:dateTime.
    time_t*                              Timestamp                      0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Application level acknowledgement code.
/// </BLOCKQUOTE></PRE>
/// Element "Ack" of XSD type "urn:ebay:apis:eBLBaseComponents":AckCodeType.
    enum ns3__AckCodeType                Ack                            1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   CorrelationID may be used optionally with an application level acknowledgement.
/// </BLOCKQUOTE></PRE>
/// Element "CorrelationID" of XSD type xs:string.
    std::string*                         CorrelationID                  0;	///< Optional element.
/// Vector of ns3__ErrorType* of length 0..unbounded.
    std::vector<ns3__ErrorType*        > Errors                         0;	///< Elements.
/// <PRE><BLOCKQUOTE>
///   This refers to the version of the response payload schema.
/// </BLOCKQUOTE></PRE>
/// Element "Version" of XSD type xs:string.
    std::string                          Version                        1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   This refers to the specific software build that was used in the deployment for processing the request and generating the response.
/// </BLOCKQUOTE></PRE>
/// Element "Build" of XSD type xs:string.
    std::string                          Build                          1;	///< Required element.
/// @todo <any namespace="##local" minOccurs="0">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
    _XML                                 __any                         0;	///< Catch any element content in XML string.
    END OF INHERITED FROM ns3__AbstractResponseType */
/// <PRE><BLOCKQUOTE>
///   A unique token that identifies this boarding session. Use this token with the GetBoarding Details API call.
///   <br/><br/>
///   Character length and limitations: 64 alphanumeric characters. The token has the following format:
///   <br/><br/>
///   OB-61characterstring
/// </BLOCKQUOTE></PRE>
/// Element "Token" of XSD type "urn:ebay:apis:eBLBaseComponents":ExpressCheckoutTokenType.
    ns3__ExpressCheckoutTokenType        Token                          1;	///< Required element.
};

/// @brief "urn:ebay:api:PayPalAPI":GetBoardingDetailsRequestType is a complexType with complexContent extension of XSD type "urn:ebay:apis:eBLBaseComponents":AbstractRequestType.
///
/// class ns1__GetBoardingDetailsRequestType operations:
/// - ns1__GetBoardingDetailsRequestType* soap_new_ns1__GetBoardingDetailsRequestType(soap*) allocate and default initialize
/// - ns1__GetBoardingDetailsRequestType* soap_new_ns1__GetBoardingDetailsRequestType(soap*, int num) allocate array and default initialize values
/// - ns1__GetBoardingDetailsRequestType* soap_new_req_ns1__GetBoardingDetailsRequestType(soap*, ...) allocate, set required members
/// - ns1__GetBoardingDetailsRequestType* soap_new_set_ns1__GetBoardingDetailsRequestType(soap*, ...) allocate, set all public members
/// - ns1__GetBoardingDetailsRequestType::soap_default(soap*) default initialize members
/// - int soap_read_ns1__GetBoardingDetailsRequestType(soap*, ns1__GetBoardingDetailsRequestType*) deserialize from a stream
/// - int soap_write_ns1__GetBoardingDetailsRequestType(soap*, ns1__GetBoardingDetailsRequestType*) serialize to a stream
/// - ns1__GetBoardingDetailsRequestType* ns1__GetBoardingDetailsRequestType::soap_dup(soap*) returns deep copy of ns1__GetBoardingDetailsRequestType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__GetBoardingDetailsRequestType::soap_del() deep deletes ns1__GetBoardingDetailsRequestType data members, use only after ns1__GetBoardingDetailsRequestType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__GetBoardingDetailsRequestType : public ns3__AbstractRequestType
{ public:
/*  INHERITED FROM ns3__AbstractRequestType:
/// <PRE><BLOCKQUOTE>
///   This specifies the required detail level that is needed by a client application pertaining to
///   a particular data component (e.g., Item, Transaction, etc.). The detail level is specified in
///   the DetailLevelCodeType which has all the enumerated values of the detail level for each component.
/// </BLOCKQUOTE></PRE>
/// Vector of enum ns3__DetailLevelCodeType of length 0..unbounded.
    std::vector<enum ns3__DetailLevelCodeType> DetailLevel                    0;	///< Elements.
/// <PRE><BLOCKQUOTE>
///   This should be the standard RFC 3066 language identification tag, e.g., en_US.
/// </BLOCKQUOTE></PRE>
/// Element "ErrorLanguage" of XSD type xs:string.
    std::string*                         ErrorLanguage                  0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   This refers to the version of the request payload schema.
/// </BLOCKQUOTE></PRE>
/// Element "Version" of XSD type xs:string.
    std::string                          Version                        1;	///< Required element.
/// @todo <any namespace="##local" minOccurs="0">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
    _XML                                 __any                         0;	///< Catch any element content in XML string.
    END OF INHERITED FROM ns3__AbstractRequestType */
/// <PRE><BLOCKQUOTE>
///   A unique token returned by the EnterBoarding API call that identifies this boarding session. <br/><br/>
///   <b>Required</b>
///   <br/><br/>
///   Character length and limitations: 64 alphanumeric characters. The token has the following format:
///   <br/><br/>
///   OB-61characterstring
/// </BLOCKQUOTE></PRE>
/// Element "Token" of XSD type "urn:ebay:apis:eBLBaseComponents":ExpressCheckoutTokenType.
    ns3__ExpressCheckoutTokenType        Token                          1;	///< Required element.
};

/// @brief "urn:ebay:api:PayPalAPI":GetBoardingDetailsResponseType is a complexType with complexContent extension of XSD type "urn:ebay:apis:eBLBaseComponents":AbstractResponseType.
///
/// class ns1__GetBoardingDetailsResponseType operations:
/// - ns1__GetBoardingDetailsResponseType* soap_new_ns1__GetBoardingDetailsResponseType(soap*) allocate and default initialize
/// - ns1__GetBoardingDetailsResponseType* soap_new_ns1__GetBoardingDetailsResponseType(soap*, int num) allocate array and default initialize values
/// - ns1__GetBoardingDetailsResponseType* soap_new_req_ns1__GetBoardingDetailsResponseType(soap*, ...) allocate, set required members
/// - ns1__GetBoardingDetailsResponseType* soap_new_set_ns1__GetBoardingDetailsResponseType(soap*, ...) allocate, set all public members
/// - ns1__GetBoardingDetailsResponseType::soap_default(soap*) default initialize members
/// - int soap_read_ns1__GetBoardingDetailsResponseType(soap*, ns1__GetBoardingDetailsResponseType*) deserialize from a stream
/// - int soap_write_ns1__GetBoardingDetailsResponseType(soap*, ns1__GetBoardingDetailsResponseType*) serialize to a stream
/// - ns1__GetBoardingDetailsResponseType* ns1__GetBoardingDetailsResponseType::soap_dup(soap*) returns deep copy of ns1__GetBoardingDetailsResponseType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__GetBoardingDetailsResponseType::soap_del() deep deletes ns1__GetBoardingDetailsResponseType data members, use only after ns1__GetBoardingDetailsResponseType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__GetBoardingDetailsResponseType : public ns3__AbstractResponseType
{ public:
/*  INHERITED FROM ns3__AbstractResponseType:
/// <PRE><BLOCKQUOTE>
///   This value represents the date and time (GMT) when the response was generated by a service provider (as a result of processing of a request).
/// </BLOCKQUOTE></PRE>
/// Element "Timestamp" of XSD type xs:dateTime.
    time_t*                              Timestamp                      0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Application level acknowledgement code.
/// </BLOCKQUOTE></PRE>
/// Element "Ack" of XSD type "urn:ebay:apis:eBLBaseComponents":AckCodeType.
    enum ns3__AckCodeType                Ack                            1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   CorrelationID may be used optionally with an application level acknowledgement.
/// </BLOCKQUOTE></PRE>
/// Element "CorrelationID" of XSD type xs:string.
    std::string*                         CorrelationID                  0;	///< Optional element.
/// Vector of ns3__ErrorType* of length 0..unbounded.
    std::vector<ns3__ErrorType*        > Errors                         0;	///< Elements.
/// <PRE><BLOCKQUOTE>
///   This refers to the version of the response payload schema.
/// </BLOCKQUOTE></PRE>
/// Element "Version" of XSD type xs:string.
    std::string                          Version                        1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   This refers to the specific software build that was used in the deployment for processing the request and generating the response.
/// </BLOCKQUOTE></PRE>
/// Element "Build" of XSD type xs:string.
    std::string                          Build                          1;	///< Required element.
/// @todo <any namespace="##local" minOccurs="0">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
    _XML                                 __any                         0;	///< Catch any element content in XML string.
    END OF INHERITED FROM ns3__AbstractResponseType */
/// Element reference "urn:ebay:api:PayPalAPI:""urn:ebay:apis:eBLBaseComponents":GetBoardingDetailsResponseDetails.
    ns3__GetBoardingDetailsResponseDetailsType*  ns3__GetBoardingDetailsResponseDetails 1;	///< Required element.
};

/// @brief "urn:ebay:api:PayPalAPI":SetAuthFlowParamRequestType is a complexType with complexContent extension of XSD type "urn:ebay:apis:eBLBaseComponents":AbstractRequestType.
///
/// class ns1__SetAuthFlowParamRequestType operations:
/// - ns1__SetAuthFlowParamRequestType* soap_new_ns1__SetAuthFlowParamRequestType(soap*) allocate and default initialize
/// - ns1__SetAuthFlowParamRequestType* soap_new_ns1__SetAuthFlowParamRequestType(soap*, int num) allocate array and default initialize values
/// - ns1__SetAuthFlowParamRequestType* soap_new_req_ns1__SetAuthFlowParamRequestType(soap*, ...) allocate, set required members
/// - ns1__SetAuthFlowParamRequestType* soap_new_set_ns1__SetAuthFlowParamRequestType(soap*, ...) allocate, set all public members
/// - ns1__SetAuthFlowParamRequestType::soap_default(soap*) default initialize members
/// - int soap_read_ns1__SetAuthFlowParamRequestType(soap*, ns1__SetAuthFlowParamRequestType*) deserialize from a stream
/// - int soap_write_ns1__SetAuthFlowParamRequestType(soap*, ns1__SetAuthFlowParamRequestType*) serialize to a stream
/// - ns1__SetAuthFlowParamRequestType* ns1__SetAuthFlowParamRequestType::soap_dup(soap*) returns deep copy of ns1__SetAuthFlowParamRequestType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__SetAuthFlowParamRequestType::soap_del() deep deletes ns1__SetAuthFlowParamRequestType data members, use only after ns1__SetAuthFlowParamRequestType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__SetAuthFlowParamRequestType : public ns3__AbstractRequestType
{ public:
/*  INHERITED FROM ns3__AbstractRequestType:
/// <PRE><BLOCKQUOTE>
///   This specifies the required detail level that is needed by a client application pertaining to
///   a particular data component (e.g., Item, Transaction, etc.). The detail level is specified in
///   the DetailLevelCodeType which has all the enumerated values of the detail level for each component.
/// </BLOCKQUOTE></PRE>
/// Vector of enum ns3__DetailLevelCodeType of length 0..unbounded.
    std::vector<enum ns3__DetailLevelCodeType> DetailLevel                    0;	///< Elements.
/// <PRE><BLOCKQUOTE>
///   This should be the standard RFC 3066 language identification tag, e.g., en_US.
/// </BLOCKQUOTE></PRE>
/// Element "ErrorLanguage" of XSD type xs:string.
    std::string*                         ErrorLanguage                  0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   This refers to the version of the request payload schema.
/// </BLOCKQUOTE></PRE>
/// Element "Version" of XSD type xs:string.
    std::string                          Version                        1;	///< Required element.
/// @todo <any namespace="##local" minOccurs="0">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
    _XML                                 __any                         0;	///< Catch any element content in XML string.
    END OF INHERITED FROM ns3__AbstractRequestType */
/// Element reference "urn:ebay:api:PayPalAPI:""urn:ebay:apis:eBLBaseComponents":SetAuthFlowParamRequestDetails.
    ns3__SetAuthFlowParamRequestDetailsType*  ns3__SetAuthFlowParamRequestDetails 1;	///< Required element.
};

/// @brief "urn:ebay:api:PayPalAPI":SetAuthFlowParamResponseType is a complexType with complexContent extension of XSD type "urn:ebay:apis:eBLBaseComponents":AbstractResponseType.
///
/// class ns1__SetAuthFlowParamResponseType operations:
/// - ns1__SetAuthFlowParamResponseType* soap_new_ns1__SetAuthFlowParamResponseType(soap*) allocate and default initialize
/// - ns1__SetAuthFlowParamResponseType* soap_new_ns1__SetAuthFlowParamResponseType(soap*, int num) allocate array and default initialize values
/// - ns1__SetAuthFlowParamResponseType* soap_new_req_ns1__SetAuthFlowParamResponseType(soap*, ...) allocate, set required members
/// - ns1__SetAuthFlowParamResponseType* soap_new_set_ns1__SetAuthFlowParamResponseType(soap*, ...) allocate, set all public members
/// - ns1__SetAuthFlowParamResponseType::soap_default(soap*) default initialize members
/// - int soap_read_ns1__SetAuthFlowParamResponseType(soap*, ns1__SetAuthFlowParamResponseType*) deserialize from a stream
/// - int soap_write_ns1__SetAuthFlowParamResponseType(soap*, ns1__SetAuthFlowParamResponseType*) serialize to a stream
/// - ns1__SetAuthFlowParamResponseType* ns1__SetAuthFlowParamResponseType::soap_dup(soap*) returns deep copy of ns1__SetAuthFlowParamResponseType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__SetAuthFlowParamResponseType::soap_del() deep deletes ns1__SetAuthFlowParamResponseType data members, use only after ns1__SetAuthFlowParamResponseType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__SetAuthFlowParamResponseType : public ns3__AbstractResponseType
{ public:
/*  INHERITED FROM ns3__AbstractResponseType:
/// <PRE><BLOCKQUOTE>
///   This value represents the date and time (GMT) when the response was generated by a service provider (as a result of processing of a request).
/// </BLOCKQUOTE></PRE>
/// Element "Timestamp" of XSD type xs:dateTime.
    time_t*                              Timestamp                      0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Application level acknowledgement code.
/// </BLOCKQUOTE></PRE>
/// Element "Ack" of XSD type "urn:ebay:apis:eBLBaseComponents":AckCodeType.
    enum ns3__AckCodeType                Ack                            1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   CorrelationID may be used optionally with an application level acknowledgement.
/// </BLOCKQUOTE></PRE>
/// Element "CorrelationID" of XSD type xs:string.
    std::string*                         CorrelationID                  0;	///< Optional element.
/// Vector of ns3__ErrorType* of length 0..unbounded.
    std::vector<ns3__ErrorType*        > Errors                         0;	///< Elements.
/// <PRE><BLOCKQUOTE>
///   This refers to the version of the response payload schema.
/// </BLOCKQUOTE></PRE>
/// Element "Version" of XSD type xs:string.
    std::string                          Version                        1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   This refers to the specific software build that was used in the deployment for processing the request and generating the response.
/// </BLOCKQUOTE></PRE>
/// Element "Build" of XSD type xs:string.
    std::string                          Build                          1;	///< Required element.
/// @todo <any namespace="##local" minOccurs="0">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
    _XML                                 __any                         0;	///< Catch any element content in XML string.
    END OF INHERITED FROM ns3__AbstractResponseType */
/// <PRE><BLOCKQUOTE>
///   A timestamped token by which you identify to PayPal that you are processing this user. The token expires after three hours.
///   <br/><br/>
///   Character length and limitations: 20 single-byte characters
/// </BLOCKQUOTE></PRE>
/// Element "Token" of XSD type "urn:ebay:apis:eBLBaseComponents":AuthFlowTokenType.
    ns3__AuthFlowTokenType               Token                          1;	///< Required element.
};

/// @brief "urn:ebay:api:PayPalAPI":GetAuthDetailsRequestType is a complexType with complexContent extension of XSD type "urn:ebay:apis:eBLBaseComponents":AbstractRequestType.
///
/// class ns1__GetAuthDetailsRequestType operations:
/// - ns1__GetAuthDetailsRequestType* soap_new_ns1__GetAuthDetailsRequestType(soap*) allocate and default initialize
/// - ns1__GetAuthDetailsRequestType* soap_new_ns1__GetAuthDetailsRequestType(soap*, int num) allocate array and default initialize values
/// - ns1__GetAuthDetailsRequestType* soap_new_req_ns1__GetAuthDetailsRequestType(soap*, ...) allocate, set required members
/// - ns1__GetAuthDetailsRequestType* soap_new_set_ns1__GetAuthDetailsRequestType(soap*, ...) allocate, set all public members
/// - ns1__GetAuthDetailsRequestType::soap_default(soap*) default initialize members
/// - int soap_read_ns1__GetAuthDetailsRequestType(soap*, ns1__GetAuthDetailsRequestType*) deserialize from a stream
/// - int soap_write_ns1__GetAuthDetailsRequestType(soap*, ns1__GetAuthDetailsRequestType*) serialize to a stream
/// - ns1__GetAuthDetailsRequestType* ns1__GetAuthDetailsRequestType::soap_dup(soap*) returns deep copy of ns1__GetAuthDetailsRequestType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__GetAuthDetailsRequestType::soap_del() deep deletes ns1__GetAuthDetailsRequestType data members, use only after ns1__GetAuthDetailsRequestType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__GetAuthDetailsRequestType : public ns3__AbstractRequestType
{ public:
/*  INHERITED FROM ns3__AbstractRequestType:
/// <PRE><BLOCKQUOTE>
///   This specifies the required detail level that is needed by a client application pertaining to
///   a particular data component (e.g., Item, Transaction, etc.). The detail level is specified in
///   the DetailLevelCodeType which has all the enumerated values of the detail level for each component.
/// </BLOCKQUOTE></PRE>
/// Vector of enum ns3__DetailLevelCodeType of length 0..unbounded.
    std::vector<enum ns3__DetailLevelCodeType> DetailLevel                    0;	///< Elements.
/// <PRE><BLOCKQUOTE>
///   This should be the standard RFC 3066 language identification tag, e.g., en_US.
/// </BLOCKQUOTE></PRE>
/// Element "ErrorLanguage" of XSD type xs:string.
    std::string*                         ErrorLanguage                  0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   This refers to the version of the request payload schema.
/// </BLOCKQUOTE></PRE>
/// Element "Version" of XSD type xs:string.
    std::string                          Version                        1;	///< Required element.
/// @todo <any namespace="##local" minOccurs="0">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
    _XML                                 __any                         0;	///< Catch any element content in XML string.
    END OF INHERITED FROM ns3__AbstractRequestType */
/// <PRE><BLOCKQUOTE>
///   A timestamped token, the value of which was returned by SetAuthFlowParam Response. <br/><br/>
///   <b>Required</b>
///   <br/><br/>
///   Character length and limitations: 20 single-byte characters
/// </BLOCKQUOTE></PRE>
/// Element "Token" of XSD type "urn:ebay:apis:eBLBaseComponents":AuthFlowTokenType.
    ns3__AuthFlowTokenType               Token                          1;	///< Required element.
};

/// @brief "urn:ebay:api:PayPalAPI":GetAuthDetailsResponseType is a complexType with complexContent extension of XSD type "urn:ebay:apis:eBLBaseComponents":AbstractResponseType.
///
/// class ns1__GetAuthDetailsResponseType operations:
/// - ns1__GetAuthDetailsResponseType* soap_new_ns1__GetAuthDetailsResponseType(soap*) allocate and default initialize
/// - ns1__GetAuthDetailsResponseType* soap_new_ns1__GetAuthDetailsResponseType(soap*, int num) allocate array and default initialize values
/// - ns1__GetAuthDetailsResponseType* soap_new_req_ns1__GetAuthDetailsResponseType(soap*, ...) allocate, set required members
/// - ns1__GetAuthDetailsResponseType* soap_new_set_ns1__GetAuthDetailsResponseType(soap*, ...) allocate, set all public members
/// - ns1__GetAuthDetailsResponseType::soap_default(soap*) default initialize members
/// - int soap_read_ns1__GetAuthDetailsResponseType(soap*, ns1__GetAuthDetailsResponseType*) deserialize from a stream
/// - int soap_write_ns1__GetAuthDetailsResponseType(soap*, ns1__GetAuthDetailsResponseType*) serialize to a stream
/// - ns1__GetAuthDetailsResponseType* ns1__GetAuthDetailsResponseType::soap_dup(soap*) returns deep copy of ns1__GetAuthDetailsResponseType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__GetAuthDetailsResponseType::soap_del() deep deletes ns1__GetAuthDetailsResponseType data members, use only after ns1__GetAuthDetailsResponseType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__GetAuthDetailsResponseType : public ns3__AbstractResponseType
{ public:
/*  INHERITED FROM ns3__AbstractResponseType:
/// <PRE><BLOCKQUOTE>
///   This value represents the date and time (GMT) when the response was generated by a service provider (as a result of processing of a request).
/// </BLOCKQUOTE></PRE>
/// Element "Timestamp" of XSD type xs:dateTime.
    time_t*                              Timestamp                      0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Application level acknowledgement code.
/// </BLOCKQUOTE></PRE>
/// Element "Ack" of XSD type "urn:ebay:apis:eBLBaseComponents":AckCodeType.
    enum ns3__AckCodeType                Ack                            1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   CorrelationID may be used optionally with an application level acknowledgement.
/// </BLOCKQUOTE></PRE>
/// Element "CorrelationID" of XSD type xs:string.
    std::string*                         CorrelationID                  0;	///< Optional element.
/// Vector of ns3__ErrorType* of length 0..unbounded.
    std::vector<ns3__ErrorType*        > Errors                         0;	///< Elements.
/// <PRE><BLOCKQUOTE>
///   This refers to the version of the response payload schema.
/// </BLOCKQUOTE></PRE>
/// Element "Version" of XSD type xs:string.
    std::string                          Version                        1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   This refers to the specific software build that was used in the deployment for processing the request and generating the response.
/// </BLOCKQUOTE></PRE>
/// Element "Build" of XSD type xs:string.
    std::string                          Build                          1;	///< Required element.
/// @todo <any namespace="##local" minOccurs="0">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
    _XML                                 __any                         0;	///< Catch any element content in XML string.
    END OF INHERITED FROM ns3__AbstractResponseType */
/// Element reference "urn:ebay:api:PayPalAPI:""urn:ebay:apis:eBLBaseComponents":GetAuthDetailsResponseDetails.
    ns3__GetAuthDetailsResponseDetailsType*  ns3__GetAuthDetailsResponseDetails 1;	///< Required element.
};

/// @brief "urn:ebay:api:PayPalAPI":SetAccessPermissionsRequestType is a complexType with complexContent extension of XSD type "urn:ebay:apis:eBLBaseComponents":AbstractRequestType.
///
/// class ns1__SetAccessPermissionsRequestType operations:
/// - ns1__SetAccessPermissionsRequestType* soap_new_ns1__SetAccessPermissionsRequestType(soap*) allocate and default initialize
/// - ns1__SetAccessPermissionsRequestType* soap_new_ns1__SetAccessPermissionsRequestType(soap*, int num) allocate array and default initialize values
/// - ns1__SetAccessPermissionsRequestType* soap_new_req_ns1__SetAccessPermissionsRequestType(soap*, ...) allocate, set required members
/// - ns1__SetAccessPermissionsRequestType* soap_new_set_ns1__SetAccessPermissionsRequestType(soap*, ...) allocate, set all public members
/// - ns1__SetAccessPermissionsRequestType::soap_default(soap*) default initialize members
/// - int soap_read_ns1__SetAccessPermissionsRequestType(soap*, ns1__SetAccessPermissionsRequestType*) deserialize from a stream
/// - int soap_write_ns1__SetAccessPermissionsRequestType(soap*, ns1__SetAccessPermissionsRequestType*) serialize to a stream
/// - ns1__SetAccessPermissionsRequestType* ns1__SetAccessPermissionsRequestType::soap_dup(soap*) returns deep copy of ns1__SetAccessPermissionsRequestType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__SetAccessPermissionsRequestType::soap_del() deep deletes ns1__SetAccessPermissionsRequestType data members, use only after ns1__SetAccessPermissionsRequestType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__SetAccessPermissionsRequestType : public ns3__AbstractRequestType
{ public:
/*  INHERITED FROM ns3__AbstractRequestType:
/// <PRE><BLOCKQUOTE>
///   This specifies the required detail level that is needed by a client application pertaining to
///   a particular data component (e.g., Item, Transaction, etc.). The detail level is specified in
///   the DetailLevelCodeType which has all the enumerated values of the detail level for each component.
/// </BLOCKQUOTE></PRE>
/// Vector of enum ns3__DetailLevelCodeType of length 0..unbounded.
    std::vector<enum ns3__DetailLevelCodeType> DetailLevel                    0;	///< Elements.
/// <PRE><BLOCKQUOTE>
///   This should be the standard RFC 3066 language identification tag, e.g., en_US.
/// </BLOCKQUOTE></PRE>
/// Element "ErrorLanguage" of XSD type xs:string.
    std::string*                         ErrorLanguage                  0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   This refers to the version of the request payload schema.
/// </BLOCKQUOTE></PRE>
/// Element "Version" of XSD type xs:string.
    std::string                          Version                        1;	///< Required element.
/// @todo <any namespace="##local" minOccurs="0">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
    _XML                                 __any                         0;	///< Catch any element content in XML string.
    END OF INHERITED FROM ns3__AbstractRequestType */
/// Element reference "urn:ebay:api:PayPalAPI:""urn:ebay:apis:eBLBaseComponents":SetAccessPermissionsRequestDetails.
    ns3__SetAccessPermissionsRequestDetailsType*  ns3__SetAccessPermissionsRequestDetails 1;	///< Required element.
};

/// @brief "urn:ebay:api:PayPalAPI":SetAccessPermissionsResponseType is a complexType with complexContent extension of XSD type "urn:ebay:apis:eBLBaseComponents":AbstractResponseType.
///
/// class ns1__SetAccessPermissionsResponseType operations:
/// - ns1__SetAccessPermissionsResponseType* soap_new_ns1__SetAccessPermissionsResponseType(soap*) allocate and default initialize
/// - ns1__SetAccessPermissionsResponseType* soap_new_ns1__SetAccessPermissionsResponseType(soap*, int num) allocate array and default initialize values
/// - ns1__SetAccessPermissionsResponseType* soap_new_req_ns1__SetAccessPermissionsResponseType(soap*, ...) allocate, set required members
/// - ns1__SetAccessPermissionsResponseType* soap_new_set_ns1__SetAccessPermissionsResponseType(soap*, ...) allocate, set all public members
/// - ns1__SetAccessPermissionsResponseType::soap_default(soap*) default initialize members
/// - int soap_read_ns1__SetAccessPermissionsResponseType(soap*, ns1__SetAccessPermissionsResponseType*) deserialize from a stream
/// - int soap_write_ns1__SetAccessPermissionsResponseType(soap*, ns1__SetAccessPermissionsResponseType*) serialize to a stream
/// - ns1__SetAccessPermissionsResponseType* ns1__SetAccessPermissionsResponseType::soap_dup(soap*) returns deep copy of ns1__SetAccessPermissionsResponseType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__SetAccessPermissionsResponseType::soap_del() deep deletes ns1__SetAccessPermissionsResponseType data members, use only after ns1__SetAccessPermissionsResponseType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__SetAccessPermissionsResponseType : public ns3__AbstractResponseType
{ public:
/*  INHERITED FROM ns3__AbstractResponseType:
/// <PRE><BLOCKQUOTE>
///   This value represents the date and time (GMT) when the response was generated by a service provider (as a result of processing of a request).
/// </BLOCKQUOTE></PRE>
/// Element "Timestamp" of XSD type xs:dateTime.
    time_t*                              Timestamp                      0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Application level acknowledgement code.
/// </BLOCKQUOTE></PRE>
/// Element "Ack" of XSD type "urn:ebay:apis:eBLBaseComponents":AckCodeType.
    enum ns3__AckCodeType                Ack                            1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   CorrelationID may be used optionally with an application level acknowledgement.
/// </BLOCKQUOTE></PRE>
/// Element "CorrelationID" of XSD type xs:string.
    std::string*                         CorrelationID                  0;	///< Optional element.
/// Vector of ns3__ErrorType* of length 0..unbounded.
    std::vector<ns3__ErrorType*        > Errors                         0;	///< Elements.
/// <PRE><BLOCKQUOTE>
///   This refers to the version of the response payload schema.
/// </BLOCKQUOTE></PRE>
/// Element "Version" of XSD type xs:string.
    std::string                          Version                        1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   This refers to the specific software build that was used in the deployment for processing the request and generating the response.
/// </BLOCKQUOTE></PRE>
/// Element "Build" of XSD type xs:string.
    std::string                          Build                          1;	///< Required element.
/// @todo <any namespace="##local" minOccurs="0">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
    _XML                                 __any                         0;	///< Catch any element content in XML string.
    END OF INHERITED FROM ns3__AbstractResponseType */
/// <PRE><BLOCKQUOTE>
///   A timestamped token by which you identify to PayPal that you are processing this user. The token expires after three hours.
///   <br/><br/>
///   Character length and limitations: 20 single-byte characters
/// </BLOCKQUOTE></PRE>
/// Element "Token" of XSD type "urn:ebay:apis:eBLBaseComponents":AuthFlowTokenType.
    ns3__AuthFlowTokenType               Token                          1;	///< Required element.
};

/// @brief "urn:ebay:api:PayPalAPI":UpdateAccessPermissionsRequestType is a complexType with complexContent extension of XSD type "urn:ebay:apis:eBLBaseComponents":AbstractRequestType.
///
/// class ns1__UpdateAccessPermissionsRequestType operations:
/// - ns1__UpdateAccessPermissionsRequestType* soap_new_ns1__UpdateAccessPermissionsRequestType(soap*) allocate and default initialize
/// - ns1__UpdateAccessPermissionsRequestType* soap_new_ns1__UpdateAccessPermissionsRequestType(soap*, int num) allocate array and default initialize values
/// - ns1__UpdateAccessPermissionsRequestType* soap_new_req_ns1__UpdateAccessPermissionsRequestType(soap*, ...) allocate, set required members
/// - ns1__UpdateAccessPermissionsRequestType* soap_new_set_ns1__UpdateAccessPermissionsRequestType(soap*, ...) allocate, set all public members
/// - ns1__UpdateAccessPermissionsRequestType::soap_default(soap*) default initialize members
/// - int soap_read_ns1__UpdateAccessPermissionsRequestType(soap*, ns1__UpdateAccessPermissionsRequestType*) deserialize from a stream
/// - int soap_write_ns1__UpdateAccessPermissionsRequestType(soap*, ns1__UpdateAccessPermissionsRequestType*) serialize to a stream
/// - ns1__UpdateAccessPermissionsRequestType* ns1__UpdateAccessPermissionsRequestType::soap_dup(soap*) returns deep copy of ns1__UpdateAccessPermissionsRequestType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__UpdateAccessPermissionsRequestType::soap_del() deep deletes ns1__UpdateAccessPermissionsRequestType data members, use only after ns1__UpdateAccessPermissionsRequestType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__UpdateAccessPermissionsRequestType : public ns3__AbstractRequestType
{ public:
/*  INHERITED FROM ns3__AbstractRequestType:
/// <PRE><BLOCKQUOTE>
///   This specifies the required detail level that is needed by a client application pertaining to
///   a particular data component (e.g., Item, Transaction, etc.). The detail level is specified in
///   the DetailLevelCodeType which has all the enumerated values of the detail level for each component.
/// </BLOCKQUOTE></PRE>
/// Vector of enum ns3__DetailLevelCodeType of length 0..unbounded.
    std::vector<enum ns3__DetailLevelCodeType> DetailLevel                    0;	///< Elements.
/// <PRE><BLOCKQUOTE>
///   This should be the standard RFC 3066 language identification tag, e.g., en_US.
/// </BLOCKQUOTE></PRE>
/// Element "ErrorLanguage" of XSD type xs:string.
    std::string*                         ErrorLanguage                  0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   This refers to the version of the request payload schema.
/// </BLOCKQUOTE></PRE>
/// Element "Version" of XSD type xs:string.
    std::string                          Version                        1;	///< Required element.
/// @todo <any namespace="##local" minOccurs="0">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
    _XML                                 __any                         0;	///< Catch any element content in XML string.
    END OF INHERITED FROM ns3__AbstractRequestType */
/// <PRE><BLOCKQUOTE>
///   Unique PayPal customer account number, the value of which was returned by GetAuthDetails Response.
///   <br/><br/>
///   <b>Required</b>
///   <br/><br/>
///   Character length and limitations: 20 single-byte characters
/// </BLOCKQUOTE></PRE>
/// Element "PayerID" of XSD type "urn:ebay:apis:eBLBaseComponents":UserIDType.
    ns3__UserIDType                      PayerID                        1;	///< Required element.
};

/// @brief "urn:ebay:api:PayPalAPI":UpdateAccessPermissionsResponseType is a complexType with complexContent extension of XSD type "urn:ebay:apis:eBLBaseComponents":AbstractResponseType.
///
/// class ns1__UpdateAccessPermissionsResponseType operations:
/// - ns1__UpdateAccessPermissionsResponseType* soap_new_ns1__UpdateAccessPermissionsResponseType(soap*) allocate and default initialize
/// - ns1__UpdateAccessPermissionsResponseType* soap_new_ns1__UpdateAccessPermissionsResponseType(soap*, int num) allocate array and default initialize values
/// - ns1__UpdateAccessPermissionsResponseType* soap_new_req_ns1__UpdateAccessPermissionsResponseType(soap*, ...) allocate, set required members
/// - ns1__UpdateAccessPermissionsResponseType* soap_new_set_ns1__UpdateAccessPermissionsResponseType(soap*, ...) allocate, set all public members
/// - ns1__UpdateAccessPermissionsResponseType::soap_default(soap*) default initialize members
/// - int soap_read_ns1__UpdateAccessPermissionsResponseType(soap*, ns1__UpdateAccessPermissionsResponseType*) deserialize from a stream
/// - int soap_write_ns1__UpdateAccessPermissionsResponseType(soap*, ns1__UpdateAccessPermissionsResponseType*) serialize to a stream
/// - ns1__UpdateAccessPermissionsResponseType* ns1__UpdateAccessPermissionsResponseType::soap_dup(soap*) returns deep copy of ns1__UpdateAccessPermissionsResponseType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__UpdateAccessPermissionsResponseType::soap_del() deep deletes ns1__UpdateAccessPermissionsResponseType data members, use only after ns1__UpdateAccessPermissionsResponseType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__UpdateAccessPermissionsResponseType : public ns3__AbstractResponseType
{ public:
/*  INHERITED FROM ns3__AbstractResponseType:
/// <PRE><BLOCKQUOTE>
///   This value represents the date and time (GMT) when the response was generated by a service provider (as a result of processing of a request).
/// </BLOCKQUOTE></PRE>
/// Element "Timestamp" of XSD type xs:dateTime.
    time_t*                              Timestamp                      0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Application level acknowledgement code.
/// </BLOCKQUOTE></PRE>
/// Element "Ack" of XSD type "urn:ebay:apis:eBLBaseComponents":AckCodeType.
    enum ns3__AckCodeType                Ack                            1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   CorrelationID may be used optionally with an application level acknowledgement.
/// </BLOCKQUOTE></PRE>
/// Element "CorrelationID" of XSD type xs:string.
    std::string*                         CorrelationID                  0;	///< Optional element.
/// Vector of ns3__ErrorType* of length 0..unbounded.
    std::vector<ns3__ErrorType*        > Errors                         0;	///< Elements.
/// <PRE><BLOCKQUOTE>
///   This refers to the version of the response payload schema.
/// </BLOCKQUOTE></PRE>
/// Element "Version" of XSD type xs:string.
    std::string                          Version                        1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   This refers to the specific software build that was used in the deployment for processing the request and generating the response.
/// </BLOCKQUOTE></PRE>
/// Element "Build" of XSD type xs:string.
    std::string                          Build                          1;	///< Required element.
/// @todo <any namespace="##local" minOccurs="0">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
    _XML                                 __any                         0;	///< Catch any element content in XML string.
    END OF INHERITED FROM ns3__AbstractResponseType */
/// <PRE><BLOCKQUOTE>
///   The status of the update call, Success/Failure.
///   <br/><br/>
///   Character length and limitations: 20 single-byte characters
/// </BLOCKQUOTE></PRE>
/// Element "Status" of XSD type xs:string.
    std::string                          Status                         1;	///< Required element.
};

/// @brief "urn:ebay:api:PayPalAPI":GetAccessPermissionDetailsRequestType is a complexType with complexContent extension of XSD type "urn:ebay:apis:eBLBaseComponents":AbstractRequestType.
///
/// class ns1__GetAccessPermissionDetailsRequestType operations:
/// - ns1__GetAccessPermissionDetailsRequestType* soap_new_ns1__GetAccessPermissionDetailsRequestType(soap*) allocate and default initialize
/// - ns1__GetAccessPermissionDetailsRequestType* soap_new_ns1__GetAccessPermissionDetailsRequestType(soap*, int num) allocate array and default initialize values
/// - ns1__GetAccessPermissionDetailsRequestType* soap_new_req_ns1__GetAccessPermissionDetailsRequestType(soap*, ...) allocate, set required members
/// - ns1__GetAccessPermissionDetailsRequestType* soap_new_set_ns1__GetAccessPermissionDetailsRequestType(soap*, ...) allocate, set all public members
/// - ns1__GetAccessPermissionDetailsRequestType::soap_default(soap*) default initialize members
/// - int soap_read_ns1__GetAccessPermissionDetailsRequestType(soap*, ns1__GetAccessPermissionDetailsRequestType*) deserialize from a stream
/// - int soap_write_ns1__GetAccessPermissionDetailsRequestType(soap*, ns1__GetAccessPermissionDetailsRequestType*) serialize to a stream
/// - ns1__GetAccessPermissionDetailsRequestType* ns1__GetAccessPermissionDetailsRequestType::soap_dup(soap*) returns deep copy of ns1__GetAccessPermissionDetailsRequestType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__GetAccessPermissionDetailsRequestType::soap_del() deep deletes ns1__GetAccessPermissionDetailsRequestType data members, use only after ns1__GetAccessPermissionDetailsRequestType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__GetAccessPermissionDetailsRequestType : public ns3__AbstractRequestType
{ public:
/*  INHERITED FROM ns3__AbstractRequestType:
/// <PRE><BLOCKQUOTE>
///   This specifies the required detail level that is needed by a client application pertaining to
///   a particular data component (e.g., Item, Transaction, etc.). The detail level is specified in
///   the DetailLevelCodeType which has all the enumerated values of the detail level for each component.
/// </BLOCKQUOTE></PRE>
/// Vector of enum ns3__DetailLevelCodeType of length 0..unbounded.
    std::vector<enum ns3__DetailLevelCodeType> DetailLevel                    0;	///< Elements.
/// <PRE><BLOCKQUOTE>
///   This should be the standard RFC 3066 language identification tag, e.g., en_US.
/// </BLOCKQUOTE></PRE>
/// Element "ErrorLanguage" of XSD type xs:string.
    std::string*                         ErrorLanguage                  0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   This refers to the version of the request payload schema.
/// </BLOCKQUOTE></PRE>
/// Element "Version" of XSD type xs:string.
    std::string                          Version                        1;	///< Required element.
/// @todo <any namespace="##local" minOccurs="0">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
    _XML                                 __any                         0;	///< Catch any element content in XML string.
    END OF INHERITED FROM ns3__AbstractRequestType */
/// <PRE><BLOCKQUOTE>
///   A timestamped token, the value of which was returned by SetAuthFlowParam Response. <br/><br/>
///   <b>Required</b>
///   <br/><br/>
///   Character length and limitations: 20 single-byte characters
/// </BLOCKQUOTE></PRE>
/// Element "Token" of XSD type "urn:ebay:apis:eBLBaseComponents":AuthFlowTokenType.
    ns3__AuthFlowTokenType               Token                          1;	///< Required element.
};

/// @brief "urn:ebay:api:PayPalAPI":GetAccessPermissionDetailsResponseType is a complexType with complexContent extension of XSD type "urn:ebay:apis:eBLBaseComponents":AbstractResponseType.
///
/// class ns1__GetAccessPermissionDetailsResponseType operations:
/// - ns1__GetAccessPermissionDetailsResponseType* soap_new_ns1__GetAccessPermissionDetailsResponseType(soap*) allocate and default initialize
/// - ns1__GetAccessPermissionDetailsResponseType* soap_new_ns1__GetAccessPermissionDetailsResponseType(soap*, int num) allocate array and default initialize values
/// - ns1__GetAccessPermissionDetailsResponseType* soap_new_req_ns1__GetAccessPermissionDetailsResponseType(soap*, ...) allocate, set required members
/// - ns1__GetAccessPermissionDetailsResponseType* soap_new_set_ns1__GetAccessPermissionDetailsResponseType(soap*, ...) allocate, set all public members
/// - ns1__GetAccessPermissionDetailsResponseType::soap_default(soap*) default initialize members
/// - int soap_read_ns1__GetAccessPermissionDetailsResponseType(soap*, ns1__GetAccessPermissionDetailsResponseType*) deserialize from a stream
/// - int soap_write_ns1__GetAccessPermissionDetailsResponseType(soap*, ns1__GetAccessPermissionDetailsResponseType*) serialize to a stream
/// - ns1__GetAccessPermissionDetailsResponseType* ns1__GetAccessPermissionDetailsResponseType::soap_dup(soap*) returns deep copy of ns1__GetAccessPermissionDetailsResponseType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__GetAccessPermissionDetailsResponseType::soap_del() deep deletes ns1__GetAccessPermissionDetailsResponseType data members, use only after ns1__GetAccessPermissionDetailsResponseType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__GetAccessPermissionDetailsResponseType : public ns3__AbstractResponseType
{ public:
/*  INHERITED FROM ns3__AbstractResponseType:
/// <PRE><BLOCKQUOTE>
///   This value represents the date and time (GMT) when the response was generated by a service provider (as a result of processing of a request).
/// </BLOCKQUOTE></PRE>
/// Element "Timestamp" of XSD type xs:dateTime.
    time_t*                              Timestamp                      0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Application level acknowledgement code.
/// </BLOCKQUOTE></PRE>
/// Element "Ack" of XSD type "urn:ebay:apis:eBLBaseComponents":AckCodeType.
    enum ns3__AckCodeType                Ack                            1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   CorrelationID may be used optionally with an application level acknowledgement.
/// </BLOCKQUOTE></PRE>
/// Element "CorrelationID" of XSD type xs:string.
    std::string*                         CorrelationID                  0;	///< Optional element.
/// Vector of ns3__ErrorType* of length 0..unbounded.
    std::vector<ns3__ErrorType*        > Errors                         0;	///< Elements.
/// <PRE><BLOCKQUOTE>
///   This refers to the version of the response payload schema.
/// </BLOCKQUOTE></PRE>
/// Element "Version" of XSD type xs:string.
    std::string                          Version                        1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   This refers to the specific software build that was used in the deployment for processing the request and generating the response.
/// </BLOCKQUOTE></PRE>
/// Element "Build" of XSD type xs:string.
    std::string                          Build                          1;	///< Required element.
/// @todo <any namespace="##local" minOccurs="0">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
    _XML                                 __any                         0;	///< Catch any element content in XML string.
    END OF INHERITED FROM ns3__AbstractResponseType */
/// Element reference "urn:ebay:api:PayPalAPI:""urn:ebay:apis:eBLBaseComponents":GetAccessPermissionDetailsResponseDetails.
    ns3__GetAccessPermissionDetailsResponseDetailsType*  ns3__GetAccessPermissionDetailsResponseDetails 1;	///< Required element.
};

/// @brief "urn:ebay:api:PayPalAPI":GetIncentiveEvaluationRequestType is a complexType with complexContent extension of XSD type "urn:ebay:apis:eBLBaseComponents":AbstractRequestType.
///
/// class ns1__GetIncentiveEvaluationRequestType operations:
/// - ns1__GetIncentiveEvaluationRequestType* soap_new_ns1__GetIncentiveEvaluationRequestType(soap*) allocate and default initialize
/// - ns1__GetIncentiveEvaluationRequestType* soap_new_ns1__GetIncentiveEvaluationRequestType(soap*, int num) allocate array and default initialize values
/// - ns1__GetIncentiveEvaluationRequestType* soap_new_req_ns1__GetIncentiveEvaluationRequestType(soap*, ...) allocate, set required members
/// - ns1__GetIncentiveEvaluationRequestType* soap_new_set_ns1__GetIncentiveEvaluationRequestType(soap*, ...) allocate, set all public members
/// - ns1__GetIncentiveEvaluationRequestType::soap_default(soap*) default initialize members
/// - int soap_read_ns1__GetIncentiveEvaluationRequestType(soap*, ns1__GetIncentiveEvaluationRequestType*) deserialize from a stream
/// - int soap_write_ns1__GetIncentiveEvaluationRequestType(soap*, ns1__GetIncentiveEvaluationRequestType*) serialize to a stream
/// - ns1__GetIncentiveEvaluationRequestType* ns1__GetIncentiveEvaluationRequestType::soap_dup(soap*) returns deep copy of ns1__GetIncentiveEvaluationRequestType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__GetIncentiveEvaluationRequestType::soap_del() deep deletes ns1__GetIncentiveEvaluationRequestType data members, use only after ns1__GetIncentiveEvaluationRequestType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__GetIncentiveEvaluationRequestType : public ns3__AbstractRequestType
{ public:
/*  INHERITED FROM ns3__AbstractRequestType:
/// <PRE><BLOCKQUOTE>
///   This specifies the required detail level that is needed by a client application pertaining to
///   a particular data component (e.g., Item, Transaction, etc.). The detail level is specified in
///   the DetailLevelCodeType which has all the enumerated values of the detail level for each component.
/// </BLOCKQUOTE></PRE>
/// Vector of enum ns3__DetailLevelCodeType of length 0..unbounded.
    std::vector<enum ns3__DetailLevelCodeType> DetailLevel                    0;	///< Elements.
/// <PRE><BLOCKQUOTE>
///   This should be the standard RFC 3066 language identification tag, e.g., en_US.
/// </BLOCKQUOTE></PRE>
/// Element "ErrorLanguage" of XSD type xs:string.
    std::string*                         ErrorLanguage                  0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   This refers to the version of the request payload schema.
/// </BLOCKQUOTE></PRE>
/// Element "Version" of XSD type xs:string.
    std::string                          Version                        1;	///< Required element.
/// @todo <any namespace="##local" minOccurs="0">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
    _XML                                 __any                         0;	///< Catch any element content in XML string.
    END OF INHERITED FROM ns3__AbstractRequestType */
/// Element reference "urn:ebay:api:PayPalAPI:""urn:ebay:apis:eBLBaseComponents":GetIncentiveEvaluationRequestDetails.
    ns3__GetIncentiveEvaluationRequestDetailsType*  ns3__GetIncentiveEvaluationRequestDetails 1;	///< Required element.
};

/// @brief "urn:ebay:api:PayPalAPI":GetIncentiveEvaluationResponseType is a complexType with complexContent extension of XSD type "urn:ebay:apis:eBLBaseComponents":AbstractResponseType.
///
/// class ns1__GetIncentiveEvaluationResponseType operations:
/// - ns1__GetIncentiveEvaluationResponseType* soap_new_ns1__GetIncentiveEvaluationResponseType(soap*) allocate and default initialize
/// - ns1__GetIncentiveEvaluationResponseType* soap_new_ns1__GetIncentiveEvaluationResponseType(soap*, int num) allocate array and default initialize values
/// - ns1__GetIncentiveEvaluationResponseType* soap_new_req_ns1__GetIncentiveEvaluationResponseType(soap*, ...) allocate, set required members
/// - ns1__GetIncentiveEvaluationResponseType* soap_new_set_ns1__GetIncentiveEvaluationResponseType(soap*, ...) allocate, set all public members
/// - ns1__GetIncentiveEvaluationResponseType::soap_default(soap*) default initialize members
/// - int soap_read_ns1__GetIncentiveEvaluationResponseType(soap*, ns1__GetIncentiveEvaluationResponseType*) deserialize from a stream
/// - int soap_write_ns1__GetIncentiveEvaluationResponseType(soap*, ns1__GetIncentiveEvaluationResponseType*) serialize to a stream
/// - ns1__GetIncentiveEvaluationResponseType* ns1__GetIncentiveEvaluationResponseType::soap_dup(soap*) returns deep copy of ns1__GetIncentiveEvaluationResponseType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__GetIncentiveEvaluationResponseType::soap_del() deep deletes ns1__GetIncentiveEvaluationResponseType data members, use only after ns1__GetIncentiveEvaluationResponseType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__GetIncentiveEvaluationResponseType : public ns3__AbstractResponseType
{ public:
/*  INHERITED FROM ns3__AbstractResponseType:
/// <PRE><BLOCKQUOTE>
///   This value represents the date and time (GMT) when the response was generated by a service provider (as a result of processing of a request).
/// </BLOCKQUOTE></PRE>
/// Element "Timestamp" of XSD type xs:dateTime.
    time_t*                              Timestamp                      0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Application level acknowledgement code.
/// </BLOCKQUOTE></PRE>
/// Element "Ack" of XSD type "urn:ebay:apis:eBLBaseComponents":AckCodeType.
    enum ns3__AckCodeType                Ack                            1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   CorrelationID may be used optionally with an application level acknowledgement.
/// </BLOCKQUOTE></PRE>
/// Element "CorrelationID" of XSD type xs:string.
    std::string*                         CorrelationID                  0;	///< Optional element.
/// Vector of ns3__ErrorType* of length 0..unbounded.
    std::vector<ns3__ErrorType*        > Errors                         0;	///< Elements.
/// <PRE><BLOCKQUOTE>
///   This refers to the version of the response payload schema.
/// </BLOCKQUOTE></PRE>
/// Element "Version" of XSD type xs:string.
    std::string                          Version                        1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   This refers to the specific software build that was used in the deployment for processing the request and generating the response.
/// </BLOCKQUOTE></PRE>
/// Element "Build" of XSD type xs:string.
    std::string                          Build                          1;	///< Required element.
/// @todo <any namespace="##local" minOccurs="0">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
    _XML                                 __any                         0;	///< Catch any element content in XML string.
    END OF INHERITED FROM ns3__AbstractResponseType */
/// Element reference "urn:ebay:api:PayPalAPI:""urn:ebay:apis:eBLBaseComponents":GetIncentiveEvaluationResponseDetails.
    ns3__GetIncentiveEvaluationResponseDetailsType*  ns3__GetIncentiveEvaluationResponseDetails 1;	///< Required element.
};

/// @brief "urn:ebay:api:PayPalAPI":SetExpressCheckoutRequestType is a complexType with complexContent extension of XSD type "urn:ebay:apis:eBLBaseComponents":AbstractRequestType.
///
/// class ns1__SetExpressCheckoutRequestType operations:
/// - ns1__SetExpressCheckoutRequestType* soap_new_ns1__SetExpressCheckoutRequestType(soap*) allocate and default initialize
/// - ns1__SetExpressCheckoutRequestType* soap_new_ns1__SetExpressCheckoutRequestType(soap*, int num) allocate array and default initialize values
/// - ns1__SetExpressCheckoutRequestType* soap_new_req_ns1__SetExpressCheckoutRequestType(soap*, ...) allocate, set required members
/// - ns1__SetExpressCheckoutRequestType* soap_new_set_ns1__SetExpressCheckoutRequestType(soap*, ...) allocate, set all public members
/// - ns1__SetExpressCheckoutRequestType::soap_default(soap*) default initialize members
/// - int soap_read_ns1__SetExpressCheckoutRequestType(soap*, ns1__SetExpressCheckoutRequestType*) deserialize from a stream
/// - int soap_write_ns1__SetExpressCheckoutRequestType(soap*, ns1__SetExpressCheckoutRequestType*) serialize to a stream
/// - ns1__SetExpressCheckoutRequestType* ns1__SetExpressCheckoutRequestType::soap_dup(soap*) returns deep copy of ns1__SetExpressCheckoutRequestType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__SetExpressCheckoutRequestType::soap_del() deep deletes ns1__SetExpressCheckoutRequestType data members, use only after ns1__SetExpressCheckoutRequestType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__SetExpressCheckoutRequestType : public ns3__AbstractRequestType
{ public:
/*  INHERITED FROM ns3__AbstractRequestType:
/// <PRE><BLOCKQUOTE>
///   This specifies the required detail level that is needed by a client application pertaining to
///   a particular data component (e.g., Item, Transaction, etc.). The detail level is specified in
///   the DetailLevelCodeType which has all the enumerated values of the detail level for each component.
/// </BLOCKQUOTE></PRE>
/// Vector of enum ns3__DetailLevelCodeType of length 0..unbounded.
    std::vector<enum ns3__DetailLevelCodeType> DetailLevel                    0;	///< Elements.
/// <PRE><BLOCKQUOTE>
///   This should be the standard RFC 3066 language identification tag, e.g., en_US.
/// </BLOCKQUOTE></PRE>
/// Element "ErrorLanguage" of XSD type xs:string.
    std::string*                         ErrorLanguage                  0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   This refers to the version of the request payload schema.
/// </BLOCKQUOTE></PRE>
/// Element "Version" of XSD type xs:string.
    std::string                          Version                        1;	///< Required element.
/// @todo <any namespace="##local" minOccurs="0">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
    _XML                                 __any                         0;	///< Catch any element content in XML string.
    END OF INHERITED FROM ns3__AbstractRequestType */
/// Element reference "urn:ebay:api:PayPalAPI:""urn:ebay:apis:eBLBaseComponents":SetExpressCheckoutRequestDetails.
    ns3__SetExpressCheckoutRequestDetailsType*  ns3__SetExpressCheckoutRequestDetails 1;	///< Required element.
};

/// @brief "urn:ebay:api:PayPalAPI":SetExpressCheckoutResponseType is a complexType with complexContent extension of XSD type "urn:ebay:apis:eBLBaseComponents":AbstractResponseType.
///
/// class ns1__SetExpressCheckoutResponseType operations:
/// - ns1__SetExpressCheckoutResponseType* soap_new_ns1__SetExpressCheckoutResponseType(soap*) allocate and default initialize
/// - ns1__SetExpressCheckoutResponseType* soap_new_ns1__SetExpressCheckoutResponseType(soap*, int num) allocate array and default initialize values
/// - ns1__SetExpressCheckoutResponseType* soap_new_req_ns1__SetExpressCheckoutResponseType(soap*, ...) allocate, set required members
/// - ns1__SetExpressCheckoutResponseType* soap_new_set_ns1__SetExpressCheckoutResponseType(soap*, ...) allocate, set all public members
/// - ns1__SetExpressCheckoutResponseType::soap_default(soap*) default initialize members
/// - int soap_read_ns1__SetExpressCheckoutResponseType(soap*, ns1__SetExpressCheckoutResponseType*) deserialize from a stream
/// - int soap_write_ns1__SetExpressCheckoutResponseType(soap*, ns1__SetExpressCheckoutResponseType*) serialize to a stream
/// - ns1__SetExpressCheckoutResponseType* ns1__SetExpressCheckoutResponseType::soap_dup(soap*) returns deep copy of ns1__SetExpressCheckoutResponseType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__SetExpressCheckoutResponseType::soap_del() deep deletes ns1__SetExpressCheckoutResponseType data members, use only after ns1__SetExpressCheckoutResponseType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__SetExpressCheckoutResponseType : public ns3__AbstractResponseType
{ public:
/*  INHERITED FROM ns3__AbstractResponseType:
/// <PRE><BLOCKQUOTE>
///   This value represents the date and time (GMT) when the response was generated by a service provider (as a result of processing of a request).
/// </BLOCKQUOTE></PRE>
/// Element "Timestamp" of XSD type xs:dateTime.
    time_t*                              Timestamp                      0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Application level acknowledgement code.
/// </BLOCKQUOTE></PRE>
/// Element "Ack" of XSD type "urn:ebay:apis:eBLBaseComponents":AckCodeType.
    enum ns3__AckCodeType                Ack                            1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   CorrelationID may be used optionally with an application level acknowledgement.
/// </BLOCKQUOTE></PRE>
/// Element "CorrelationID" of XSD type xs:string.
    std::string*                         CorrelationID                  0;	///< Optional element.
/// Vector of ns3__ErrorType* of length 0..unbounded.
    std::vector<ns3__ErrorType*        > Errors                         0;	///< Elements.
/// <PRE><BLOCKQUOTE>
///   This refers to the version of the response payload schema.
/// </BLOCKQUOTE></PRE>
/// Element "Version" of XSD type xs:string.
    std::string                          Version                        1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   This refers to the specific software build that was used in the deployment for processing the request and generating the response.
/// </BLOCKQUOTE></PRE>
/// Element "Build" of XSD type xs:string.
    std::string                          Build                          1;	///< Required element.
/// @todo <any namespace="##local" minOccurs="0">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
    _XML                                 __any                         0;	///< Catch any element content in XML string.
    END OF INHERITED FROM ns3__AbstractResponseType */
/// <PRE><BLOCKQUOTE>
///   A timestamped token by which you identify to PayPal that you are processing this payment with Express Checkout. The token expires after three hours. If you set Token in the SetExpressCheckoutRequest, the value of Token in the response is identical to the value in the request. <br/><br/>
///   Character length and limitations: 20 single-byte characters
/// </BLOCKQUOTE></PRE>
/// Element "Token" of XSD type "urn:ebay:apis:eBLBaseComponents":ExpressCheckoutTokenType.
    ns3__ExpressCheckoutTokenType*       Token                          0;	///< Optional element.
};

/// @brief "urn:ebay:api:PayPalAPI":ExecuteCheckoutOperationsRequestType is a complexType with complexContent extension of XSD type "urn:ebay:apis:eBLBaseComponents":AbstractRequestType.
///
/// class ns1__ExecuteCheckoutOperationsRequestType operations:
/// - ns1__ExecuteCheckoutOperationsRequestType* soap_new_ns1__ExecuteCheckoutOperationsRequestType(soap*) allocate and default initialize
/// - ns1__ExecuteCheckoutOperationsRequestType* soap_new_ns1__ExecuteCheckoutOperationsRequestType(soap*, int num) allocate array and default initialize values
/// - ns1__ExecuteCheckoutOperationsRequestType* soap_new_req_ns1__ExecuteCheckoutOperationsRequestType(soap*, ...) allocate, set required members
/// - ns1__ExecuteCheckoutOperationsRequestType* soap_new_set_ns1__ExecuteCheckoutOperationsRequestType(soap*, ...) allocate, set all public members
/// - ns1__ExecuteCheckoutOperationsRequestType::soap_default(soap*) default initialize members
/// - int soap_read_ns1__ExecuteCheckoutOperationsRequestType(soap*, ns1__ExecuteCheckoutOperationsRequestType*) deserialize from a stream
/// - int soap_write_ns1__ExecuteCheckoutOperationsRequestType(soap*, ns1__ExecuteCheckoutOperationsRequestType*) serialize to a stream
/// - ns1__ExecuteCheckoutOperationsRequestType* ns1__ExecuteCheckoutOperationsRequestType::soap_dup(soap*) returns deep copy of ns1__ExecuteCheckoutOperationsRequestType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__ExecuteCheckoutOperationsRequestType::soap_del() deep deletes ns1__ExecuteCheckoutOperationsRequestType data members, use only after ns1__ExecuteCheckoutOperationsRequestType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__ExecuteCheckoutOperationsRequestType : public ns3__AbstractRequestType
{ public:
/*  INHERITED FROM ns3__AbstractRequestType:
/// <PRE><BLOCKQUOTE>
///   This specifies the required detail level that is needed by a client application pertaining to
///   a particular data component (e.g., Item, Transaction, etc.). The detail level is specified in
///   the DetailLevelCodeType which has all the enumerated values of the detail level for each component.
/// </BLOCKQUOTE></PRE>
/// Vector of enum ns3__DetailLevelCodeType of length 0..unbounded.
    std::vector<enum ns3__DetailLevelCodeType> DetailLevel                    0;	///< Elements.
/// <PRE><BLOCKQUOTE>
///   This should be the standard RFC 3066 language identification tag, e.g., en_US.
/// </BLOCKQUOTE></PRE>
/// Element "ErrorLanguage" of XSD type xs:string.
    std::string*                         ErrorLanguage                  0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   This refers to the version of the request payload schema.
/// </BLOCKQUOTE></PRE>
/// Element "Version" of XSD type xs:string.
    std::string                          Version                        1;	///< Required element.
/// @todo <any namespace="##local" minOccurs="0">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
    _XML                                 __any                         0;	///< Catch any element content in XML string.
    END OF INHERITED FROM ns3__AbstractRequestType */
/// Element reference "urn:ebay:api:PayPalAPI:""urn:ebay:apis:eBLBaseComponents":ExecuteCheckoutOperationsRequestDetails.
    ns3__ExecuteCheckoutOperationsRequestDetailsType*  ns3__ExecuteCheckoutOperationsRequestDetails 1;	///< Required element.
};

/// @brief "urn:ebay:api:PayPalAPI":ExecuteCheckoutOperationsResponseType is a complexType with complexContent extension of XSD type "urn:ebay:apis:eBLBaseComponents":AbstractResponseType.
///
/// class ns1__ExecuteCheckoutOperationsResponseType operations:
/// - ns1__ExecuteCheckoutOperationsResponseType* soap_new_ns1__ExecuteCheckoutOperationsResponseType(soap*) allocate and default initialize
/// - ns1__ExecuteCheckoutOperationsResponseType* soap_new_ns1__ExecuteCheckoutOperationsResponseType(soap*, int num) allocate array and default initialize values
/// - ns1__ExecuteCheckoutOperationsResponseType* soap_new_req_ns1__ExecuteCheckoutOperationsResponseType(soap*, ...) allocate, set required members
/// - ns1__ExecuteCheckoutOperationsResponseType* soap_new_set_ns1__ExecuteCheckoutOperationsResponseType(soap*, ...) allocate, set all public members
/// - ns1__ExecuteCheckoutOperationsResponseType::soap_default(soap*) default initialize members
/// - int soap_read_ns1__ExecuteCheckoutOperationsResponseType(soap*, ns1__ExecuteCheckoutOperationsResponseType*) deserialize from a stream
/// - int soap_write_ns1__ExecuteCheckoutOperationsResponseType(soap*, ns1__ExecuteCheckoutOperationsResponseType*) serialize to a stream
/// - ns1__ExecuteCheckoutOperationsResponseType* ns1__ExecuteCheckoutOperationsResponseType::soap_dup(soap*) returns deep copy of ns1__ExecuteCheckoutOperationsResponseType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__ExecuteCheckoutOperationsResponseType::soap_del() deep deletes ns1__ExecuteCheckoutOperationsResponseType data members, use only after ns1__ExecuteCheckoutOperationsResponseType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__ExecuteCheckoutOperationsResponseType : public ns3__AbstractResponseType
{ public:
/*  INHERITED FROM ns3__AbstractResponseType:
/// <PRE><BLOCKQUOTE>
///   This value represents the date and time (GMT) when the response was generated by a service provider (as a result of processing of a request).
/// </BLOCKQUOTE></PRE>
/// Element "Timestamp" of XSD type xs:dateTime.
    time_t*                              Timestamp                      0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Application level acknowledgement code.
/// </BLOCKQUOTE></PRE>
/// Element "Ack" of XSD type "urn:ebay:apis:eBLBaseComponents":AckCodeType.
    enum ns3__AckCodeType                Ack                            1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   CorrelationID may be used optionally with an application level acknowledgement.
/// </BLOCKQUOTE></PRE>
/// Element "CorrelationID" of XSD type xs:string.
    std::string*                         CorrelationID                  0;	///< Optional element.
/// Vector of ns3__ErrorType* of length 0..unbounded.
    std::vector<ns3__ErrorType*        > Errors                         0;	///< Elements.
/// <PRE><BLOCKQUOTE>
///   This refers to the version of the response payload schema.
/// </BLOCKQUOTE></PRE>
/// Element "Version" of XSD type xs:string.
    std::string                          Version                        1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   This refers to the specific software build that was used in the deployment for processing the request and generating the response.
/// </BLOCKQUOTE></PRE>
/// Element "Build" of XSD type xs:string.
    std::string                          Build                          1;	///< Required element.
/// @todo <any namespace="##local" minOccurs="0">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
    _XML                                 __any                         0;	///< Catch any element content in XML string.
    END OF INHERITED FROM ns3__AbstractResponseType */
/// Element reference "urn:ebay:api:PayPalAPI:""urn:ebay:apis:eBLBaseComponents":ExecuteCheckoutOperationsResponseDetails.
    ns3__ExecuteCheckoutOperationsResponseDetailsType*  ns3__ExecuteCheckoutOperationsResponseDetails 1;	///< Required element.
};

/// @brief "urn:ebay:api:PayPalAPI":GetExpressCheckoutDetailsRequestType is a complexType with complexContent extension of XSD type "urn:ebay:apis:eBLBaseComponents":AbstractRequestType.
///
/// class ns1__GetExpressCheckoutDetailsRequestType operations:
/// - ns1__GetExpressCheckoutDetailsRequestType* soap_new_ns1__GetExpressCheckoutDetailsRequestType(soap*) allocate and default initialize
/// - ns1__GetExpressCheckoutDetailsRequestType* soap_new_ns1__GetExpressCheckoutDetailsRequestType(soap*, int num) allocate array and default initialize values
/// - ns1__GetExpressCheckoutDetailsRequestType* soap_new_req_ns1__GetExpressCheckoutDetailsRequestType(soap*, ...) allocate, set required members
/// - ns1__GetExpressCheckoutDetailsRequestType* soap_new_set_ns1__GetExpressCheckoutDetailsRequestType(soap*, ...) allocate, set all public members
/// - ns1__GetExpressCheckoutDetailsRequestType::soap_default(soap*) default initialize members
/// - int soap_read_ns1__GetExpressCheckoutDetailsRequestType(soap*, ns1__GetExpressCheckoutDetailsRequestType*) deserialize from a stream
/// - int soap_write_ns1__GetExpressCheckoutDetailsRequestType(soap*, ns1__GetExpressCheckoutDetailsRequestType*) serialize to a stream
/// - ns1__GetExpressCheckoutDetailsRequestType* ns1__GetExpressCheckoutDetailsRequestType::soap_dup(soap*) returns deep copy of ns1__GetExpressCheckoutDetailsRequestType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__GetExpressCheckoutDetailsRequestType::soap_del() deep deletes ns1__GetExpressCheckoutDetailsRequestType data members, use only after ns1__GetExpressCheckoutDetailsRequestType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__GetExpressCheckoutDetailsRequestType : public ns3__AbstractRequestType
{ public:
/*  INHERITED FROM ns3__AbstractRequestType:
/// <PRE><BLOCKQUOTE>
///   This specifies the required detail level that is needed by a client application pertaining to
///   a particular data component (e.g., Item, Transaction, etc.). The detail level is specified in
///   the DetailLevelCodeType which has all the enumerated values of the detail level for each component.
/// </BLOCKQUOTE></PRE>
/// Vector of enum ns3__DetailLevelCodeType of length 0..unbounded.
    std::vector<enum ns3__DetailLevelCodeType> DetailLevel                    0;	///< Elements.
/// <PRE><BLOCKQUOTE>
///   This should be the standard RFC 3066 language identification tag, e.g., en_US.
/// </BLOCKQUOTE></PRE>
/// Element "ErrorLanguage" of XSD type xs:string.
    std::string*                         ErrorLanguage                  0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   This refers to the version of the request payload schema.
/// </BLOCKQUOTE></PRE>
/// Element "Version" of XSD type xs:string.
    std::string                          Version                        1;	///< Required element.
/// @todo <any namespace="##local" minOccurs="0">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
    _XML                                 __any                         0;	///< Catch any element content in XML string.
    END OF INHERITED FROM ns3__AbstractRequestType */
/// <PRE><BLOCKQUOTE>
///   A timestamped token, the value of which was returned by SetExpressCheckoutResponse. <br/><br/>
///   <b>Required</b>
///   <br/><br/>
///   Character length and limitations: 20 single-byte characters
/// </BLOCKQUOTE></PRE>
/// Element "Token" of XSD type "urn:ebay:apis:eBLBaseComponents":ExpressCheckoutTokenType.
    ns3__ExpressCheckoutTokenType        Token                          1;	///< Required element.
};

/// @brief "urn:ebay:api:PayPalAPI":GetExpressCheckoutDetailsResponseType is a complexType with complexContent extension of XSD type "urn:ebay:apis:eBLBaseComponents":AbstractResponseType.
///
/// class ns1__GetExpressCheckoutDetailsResponseType operations:
/// - ns1__GetExpressCheckoutDetailsResponseType* soap_new_ns1__GetExpressCheckoutDetailsResponseType(soap*) allocate and default initialize
/// - ns1__GetExpressCheckoutDetailsResponseType* soap_new_ns1__GetExpressCheckoutDetailsResponseType(soap*, int num) allocate array and default initialize values
/// - ns1__GetExpressCheckoutDetailsResponseType* soap_new_req_ns1__GetExpressCheckoutDetailsResponseType(soap*, ...) allocate, set required members
/// - ns1__GetExpressCheckoutDetailsResponseType* soap_new_set_ns1__GetExpressCheckoutDetailsResponseType(soap*, ...) allocate, set all public members
/// - ns1__GetExpressCheckoutDetailsResponseType::soap_default(soap*) default initialize members
/// - int soap_read_ns1__GetExpressCheckoutDetailsResponseType(soap*, ns1__GetExpressCheckoutDetailsResponseType*) deserialize from a stream
/// - int soap_write_ns1__GetExpressCheckoutDetailsResponseType(soap*, ns1__GetExpressCheckoutDetailsResponseType*) serialize to a stream
/// - ns1__GetExpressCheckoutDetailsResponseType* ns1__GetExpressCheckoutDetailsResponseType::soap_dup(soap*) returns deep copy of ns1__GetExpressCheckoutDetailsResponseType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__GetExpressCheckoutDetailsResponseType::soap_del() deep deletes ns1__GetExpressCheckoutDetailsResponseType data members, use only after ns1__GetExpressCheckoutDetailsResponseType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__GetExpressCheckoutDetailsResponseType : public ns3__AbstractResponseType
{ public:
/*  INHERITED FROM ns3__AbstractResponseType:
/// <PRE><BLOCKQUOTE>
///   This value represents the date and time (GMT) when the response was generated by a service provider (as a result of processing of a request).
/// </BLOCKQUOTE></PRE>
/// Element "Timestamp" of XSD type xs:dateTime.
    time_t*                              Timestamp                      0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Application level acknowledgement code.
/// </BLOCKQUOTE></PRE>
/// Element "Ack" of XSD type "urn:ebay:apis:eBLBaseComponents":AckCodeType.
    enum ns3__AckCodeType                Ack                            1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   CorrelationID may be used optionally with an application level acknowledgement.
/// </BLOCKQUOTE></PRE>
/// Element "CorrelationID" of XSD type xs:string.
    std::string*                         CorrelationID                  0;	///< Optional element.
/// Vector of ns3__ErrorType* of length 0..unbounded.
    std::vector<ns3__ErrorType*        > Errors                         0;	///< Elements.
/// <PRE><BLOCKQUOTE>
///   This refers to the version of the response payload schema.
/// </BLOCKQUOTE></PRE>
/// Element "Version" of XSD type xs:string.
    std::string                          Version                        1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   This refers to the specific software build that was used in the deployment for processing the request and generating the response.
/// </BLOCKQUOTE></PRE>
/// Element "Build" of XSD type xs:string.
    std::string                          Build                          1;	///< Required element.
/// @todo <any namespace="##local" minOccurs="0">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
    _XML                                 __any                         0;	///< Catch any element content in XML string.
    END OF INHERITED FROM ns3__AbstractResponseType */
/// Element reference "urn:ebay:api:PayPalAPI:""urn:ebay:apis:eBLBaseComponents":GetExpressCheckoutDetailsResponseDetails.
    ns3__GetExpressCheckoutDetailsResponseDetailsType*  ns3__GetExpressCheckoutDetailsResponseDetails 1;	///< Required element.
};

/// @brief "urn:ebay:api:PayPalAPI":DoExpressCheckoutPaymentRequestType is a complexType with complexContent extension of XSD type "urn:ebay:apis:eBLBaseComponents":AbstractRequestType.
///
/// class ns1__DoExpressCheckoutPaymentRequestType operations:
/// - ns1__DoExpressCheckoutPaymentRequestType* soap_new_ns1__DoExpressCheckoutPaymentRequestType(soap*) allocate and default initialize
/// - ns1__DoExpressCheckoutPaymentRequestType* soap_new_ns1__DoExpressCheckoutPaymentRequestType(soap*, int num) allocate array and default initialize values
/// - ns1__DoExpressCheckoutPaymentRequestType* soap_new_req_ns1__DoExpressCheckoutPaymentRequestType(soap*, ...) allocate, set required members
/// - ns1__DoExpressCheckoutPaymentRequestType* soap_new_set_ns1__DoExpressCheckoutPaymentRequestType(soap*, ...) allocate, set all public members
/// - ns1__DoExpressCheckoutPaymentRequestType::soap_default(soap*) default initialize members
/// - int soap_read_ns1__DoExpressCheckoutPaymentRequestType(soap*, ns1__DoExpressCheckoutPaymentRequestType*) deserialize from a stream
/// - int soap_write_ns1__DoExpressCheckoutPaymentRequestType(soap*, ns1__DoExpressCheckoutPaymentRequestType*) serialize to a stream
/// - ns1__DoExpressCheckoutPaymentRequestType* ns1__DoExpressCheckoutPaymentRequestType::soap_dup(soap*) returns deep copy of ns1__DoExpressCheckoutPaymentRequestType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__DoExpressCheckoutPaymentRequestType::soap_del() deep deletes ns1__DoExpressCheckoutPaymentRequestType data members, use only after ns1__DoExpressCheckoutPaymentRequestType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__DoExpressCheckoutPaymentRequestType : public ns3__AbstractRequestType
{ public:
/*  INHERITED FROM ns3__AbstractRequestType:
/// <PRE><BLOCKQUOTE>
///   This specifies the required detail level that is needed by a client application pertaining to
///   a particular data component (e.g., Item, Transaction, etc.). The detail level is specified in
///   the DetailLevelCodeType which has all the enumerated values of the detail level for each component.
/// </BLOCKQUOTE></PRE>
/// Vector of enum ns3__DetailLevelCodeType of length 0..unbounded.
    std::vector<enum ns3__DetailLevelCodeType> DetailLevel                    0;	///< Elements.
/// <PRE><BLOCKQUOTE>
///   This should be the standard RFC 3066 language identification tag, e.g., en_US.
/// </BLOCKQUOTE></PRE>
/// Element "ErrorLanguage" of XSD type xs:string.
    std::string*                         ErrorLanguage                  0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   This refers to the version of the request payload schema.
/// </BLOCKQUOTE></PRE>
/// Element "Version" of XSD type xs:string.
    std::string                          Version                        1;	///< Required element.
/// @todo <any namespace="##local" minOccurs="0">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
    _XML                                 __any                         0;	///< Catch any element content in XML string.
    END OF INHERITED FROM ns3__AbstractRequestType */
/// Element reference "urn:ebay:api:PayPalAPI:""urn:ebay:apis:eBLBaseComponents":DoExpressCheckoutPaymentRequestDetails.
    ns3__DoExpressCheckoutPaymentRequestDetailsType*  ns3__DoExpressCheckoutPaymentRequestDetails 1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   This flag indicates that the response should include FMFDetails
/// </BLOCKQUOTE></PRE>
/// Element "ReturnFMFDetails" of XSD type xs:int.
    int*                                 ReturnFMFDetails               0;	///< Optional element.
};

/// @brief "urn:ebay:api:PayPalAPI":DoExpressCheckoutPaymentResponseType is a complexType with complexContent extension of XSD type "urn:ebay:apis:eBLBaseComponents":AbstractResponseType.
///
/// class ns1__DoExpressCheckoutPaymentResponseType operations:
/// - ns1__DoExpressCheckoutPaymentResponseType* soap_new_ns1__DoExpressCheckoutPaymentResponseType(soap*) allocate and default initialize
/// - ns1__DoExpressCheckoutPaymentResponseType* soap_new_ns1__DoExpressCheckoutPaymentResponseType(soap*, int num) allocate array and default initialize values
/// - ns1__DoExpressCheckoutPaymentResponseType* soap_new_req_ns1__DoExpressCheckoutPaymentResponseType(soap*, ...) allocate, set required members
/// - ns1__DoExpressCheckoutPaymentResponseType* soap_new_set_ns1__DoExpressCheckoutPaymentResponseType(soap*, ...) allocate, set all public members
/// - ns1__DoExpressCheckoutPaymentResponseType::soap_default(soap*) default initialize members
/// - int soap_read_ns1__DoExpressCheckoutPaymentResponseType(soap*, ns1__DoExpressCheckoutPaymentResponseType*) deserialize from a stream
/// - int soap_write_ns1__DoExpressCheckoutPaymentResponseType(soap*, ns1__DoExpressCheckoutPaymentResponseType*) serialize to a stream
/// - ns1__DoExpressCheckoutPaymentResponseType* ns1__DoExpressCheckoutPaymentResponseType::soap_dup(soap*) returns deep copy of ns1__DoExpressCheckoutPaymentResponseType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__DoExpressCheckoutPaymentResponseType::soap_del() deep deletes ns1__DoExpressCheckoutPaymentResponseType data members, use only after ns1__DoExpressCheckoutPaymentResponseType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__DoExpressCheckoutPaymentResponseType : public ns3__AbstractResponseType
{ public:
/*  INHERITED FROM ns3__AbstractResponseType:
/// <PRE><BLOCKQUOTE>
///   This value represents the date and time (GMT) when the response was generated by a service provider (as a result of processing of a request).
/// </BLOCKQUOTE></PRE>
/// Element "Timestamp" of XSD type xs:dateTime.
    time_t*                              Timestamp                      0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Application level acknowledgement code.
/// </BLOCKQUOTE></PRE>
/// Element "Ack" of XSD type "urn:ebay:apis:eBLBaseComponents":AckCodeType.
    enum ns3__AckCodeType                Ack                            1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   CorrelationID may be used optionally with an application level acknowledgement.
/// </BLOCKQUOTE></PRE>
/// Element "CorrelationID" of XSD type xs:string.
    std::string*                         CorrelationID                  0;	///< Optional element.
/// Vector of ns3__ErrorType* of length 0..unbounded.
    std::vector<ns3__ErrorType*        > Errors                         0;	///< Elements.
/// <PRE><BLOCKQUOTE>
///   This refers to the version of the response payload schema.
/// </BLOCKQUOTE></PRE>
/// Element "Version" of XSD type xs:string.
    std::string                          Version                        1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   This refers to the specific software build that was used in the deployment for processing the request and generating the response.
/// </BLOCKQUOTE></PRE>
/// Element "Build" of XSD type xs:string.
    std::string                          Build                          1;	///< Required element.
/// @todo <any namespace="##local" minOccurs="0">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
    _XML                                 __any                         0;	///< Catch any element content in XML string.
    END OF INHERITED FROM ns3__AbstractResponseType */
/// Element reference "urn:ebay:api:PayPalAPI:""urn:ebay:apis:eBLBaseComponents":DoExpressCheckoutPaymentResponseDetails.
    ns3__DoExpressCheckoutPaymentResponseDetailsType*  ns3__DoExpressCheckoutPaymentResponseDetails 1;	///< Required element.
/// Element "FMFDetails" of XSD type "urn:ebay:apis:eBLBaseComponents":FMFDetailsType.
    ns3__FMFDetailsType*                 FMFDetails                     0;	///< Optional element.
};

/// @brief "urn:ebay:api:PayPalAPI":ManagePendingTransactionStatusRequestType is a complexType with complexContent extension of XSD type "urn:ebay:apis:eBLBaseComponents":AbstractRequestType.
///
/// class ns1__ManagePendingTransactionStatusRequestType operations:
/// - ns1__ManagePendingTransactionStatusRequestType* soap_new_ns1__ManagePendingTransactionStatusRequestType(soap*) allocate and default initialize
/// - ns1__ManagePendingTransactionStatusRequestType* soap_new_ns1__ManagePendingTransactionStatusRequestType(soap*, int num) allocate array and default initialize values
/// - ns1__ManagePendingTransactionStatusRequestType* soap_new_req_ns1__ManagePendingTransactionStatusRequestType(soap*, ...) allocate, set required members
/// - ns1__ManagePendingTransactionStatusRequestType* soap_new_set_ns1__ManagePendingTransactionStatusRequestType(soap*, ...) allocate, set all public members
/// - ns1__ManagePendingTransactionStatusRequestType::soap_default(soap*) default initialize members
/// - int soap_read_ns1__ManagePendingTransactionStatusRequestType(soap*, ns1__ManagePendingTransactionStatusRequestType*) deserialize from a stream
/// - int soap_write_ns1__ManagePendingTransactionStatusRequestType(soap*, ns1__ManagePendingTransactionStatusRequestType*) serialize to a stream
/// - ns1__ManagePendingTransactionStatusRequestType* ns1__ManagePendingTransactionStatusRequestType::soap_dup(soap*) returns deep copy of ns1__ManagePendingTransactionStatusRequestType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__ManagePendingTransactionStatusRequestType::soap_del() deep deletes ns1__ManagePendingTransactionStatusRequestType data members, use only after ns1__ManagePendingTransactionStatusRequestType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__ManagePendingTransactionStatusRequestType : public ns3__AbstractRequestType
{ public:
/*  INHERITED FROM ns3__AbstractRequestType:
/// <PRE><BLOCKQUOTE>
///   This specifies the required detail level that is needed by a client application pertaining to
///   a particular data component (e.g., Item, Transaction, etc.). The detail level is specified in
///   the DetailLevelCodeType which has all the enumerated values of the detail level for each component.
/// </BLOCKQUOTE></PRE>
/// Vector of enum ns3__DetailLevelCodeType of length 0..unbounded.
    std::vector<enum ns3__DetailLevelCodeType> DetailLevel                    0;	///< Elements.
/// <PRE><BLOCKQUOTE>
///   This should be the standard RFC 3066 language identification tag, e.g., en_US.
/// </BLOCKQUOTE></PRE>
/// Element "ErrorLanguage" of XSD type xs:string.
    std::string*                         ErrorLanguage                  0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   This refers to the version of the request payload schema.
/// </BLOCKQUOTE></PRE>
/// Element "Version" of XSD type xs:string.
    std::string                          Version                        1;	///< Required element.
/// @todo <any namespace="##local" minOccurs="0">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
    _XML                                 __any                         0;	///< Catch any element content in XML string.
    END OF INHERITED FROM ns3__AbstractRequestType */
/// Element "TransactionID" of XSD type "urn:ebay:apis:eBLBaseComponents":TransactionId.
    ns3__TransactionId                   TransactionID                  1;	///< Required element.
/// Element "Action" of XSD type "urn:ebay:apis:eBLBaseComponents":FMFPendingTransactionActionType.
    enum ns3__FMFPendingTransactionActionType  Action                         1;	///< Required element.
};

/// @brief "urn:ebay:api:PayPalAPI":ManagePendingTransactionStatusResponseType is a complexType with complexContent extension of XSD type "urn:ebay:apis:eBLBaseComponents":AbstractResponseType.
///
/// class ns1__ManagePendingTransactionStatusResponseType operations:
/// - ns1__ManagePendingTransactionStatusResponseType* soap_new_ns1__ManagePendingTransactionStatusResponseType(soap*) allocate and default initialize
/// - ns1__ManagePendingTransactionStatusResponseType* soap_new_ns1__ManagePendingTransactionStatusResponseType(soap*, int num) allocate array and default initialize values
/// - ns1__ManagePendingTransactionStatusResponseType* soap_new_req_ns1__ManagePendingTransactionStatusResponseType(soap*, ...) allocate, set required members
/// - ns1__ManagePendingTransactionStatusResponseType* soap_new_set_ns1__ManagePendingTransactionStatusResponseType(soap*, ...) allocate, set all public members
/// - ns1__ManagePendingTransactionStatusResponseType::soap_default(soap*) default initialize members
/// - int soap_read_ns1__ManagePendingTransactionStatusResponseType(soap*, ns1__ManagePendingTransactionStatusResponseType*) deserialize from a stream
/// - int soap_write_ns1__ManagePendingTransactionStatusResponseType(soap*, ns1__ManagePendingTransactionStatusResponseType*) serialize to a stream
/// - ns1__ManagePendingTransactionStatusResponseType* ns1__ManagePendingTransactionStatusResponseType::soap_dup(soap*) returns deep copy of ns1__ManagePendingTransactionStatusResponseType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__ManagePendingTransactionStatusResponseType::soap_del() deep deletes ns1__ManagePendingTransactionStatusResponseType data members, use only after ns1__ManagePendingTransactionStatusResponseType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__ManagePendingTransactionStatusResponseType : public ns3__AbstractResponseType
{ public:
/*  INHERITED FROM ns3__AbstractResponseType:
/// <PRE><BLOCKQUOTE>
///   This value represents the date and time (GMT) when the response was generated by a service provider (as a result of processing of a request).
/// </BLOCKQUOTE></PRE>
/// Element "Timestamp" of XSD type xs:dateTime.
    time_t*                              Timestamp                      0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Application level acknowledgement code.
/// </BLOCKQUOTE></PRE>
/// Element "Ack" of XSD type "urn:ebay:apis:eBLBaseComponents":AckCodeType.
    enum ns3__AckCodeType                Ack                            1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   CorrelationID may be used optionally with an application level acknowledgement.
/// </BLOCKQUOTE></PRE>
/// Element "CorrelationID" of XSD type xs:string.
    std::string*                         CorrelationID                  0;	///< Optional element.
/// Vector of ns3__ErrorType* of length 0..unbounded.
    std::vector<ns3__ErrorType*        > Errors                         0;	///< Elements.
/// <PRE><BLOCKQUOTE>
///   This refers to the version of the response payload schema.
/// </BLOCKQUOTE></PRE>
/// Element "Version" of XSD type xs:string.
    std::string                          Version                        1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   This refers to the specific software build that was used in the deployment for processing the request and generating the response.
/// </BLOCKQUOTE></PRE>
/// Element "Build" of XSD type xs:string.
    std::string                          Build                          1;	///< Required element.
/// @todo <any namespace="##local" minOccurs="0">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
    _XML                                 __any                         0;	///< Catch any element content in XML string.
    END OF INHERITED FROM ns3__AbstractResponseType */
/// Element "TransactionID" of XSD type "urn:ebay:apis:eBLBaseComponents":TransactionId.
    ns3__TransactionId*                  TransactionID                  0;	///< Optional element.
/// Element "Status" of XSD type xs:string.
    std::string*                         Status                         0;	///< Optional element.
};

/// @brief "urn:ebay:api:PayPalAPI":DoDirectPaymentRequestType is a complexType with complexContent extension of XSD type "urn:ebay:apis:eBLBaseComponents":AbstractRequestType.
///
/// class ns1__DoDirectPaymentRequestType operations:
/// - ns1__DoDirectPaymentRequestType* soap_new_ns1__DoDirectPaymentRequestType(soap*) allocate and default initialize
/// - ns1__DoDirectPaymentRequestType* soap_new_ns1__DoDirectPaymentRequestType(soap*, int num) allocate array and default initialize values
/// - ns1__DoDirectPaymentRequestType* soap_new_req_ns1__DoDirectPaymentRequestType(soap*, ...) allocate, set required members
/// - ns1__DoDirectPaymentRequestType* soap_new_set_ns1__DoDirectPaymentRequestType(soap*, ...) allocate, set all public members
/// - ns1__DoDirectPaymentRequestType::soap_default(soap*) default initialize members
/// - int soap_read_ns1__DoDirectPaymentRequestType(soap*, ns1__DoDirectPaymentRequestType*) deserialize from a stream
/// - int soap_write_ns1__DoDirectPaymentRequestType(soap*, ns1__DoDirectPaymentRequestType*) serialize to a stream
/// - ns1__DoDirectPaymentRequestType* ns1__DoDirectPaymentRequestType::soap_dup(soap*) returns deep copy of ns1__DoDirectPaymentRequestType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__DoDirectPaymentRequestType::soap_del() deep deletes ns1__DoDirectPaymentRequestType data members, use only after ns1__DoDirectPaymentRequestType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__DoDirectPaymentRequestType : public ns3__AbstractRequestType
{ public:
/*  INHERITED FROM ns3__AbstractRequestType:
/// <PRE><BLOCKQUOTE>
///   This specifies the required detail level that is needed by a client application pertaining to
///   a particular data component (e.g., Item, Transaction, etc.). The detail level is specified in
///   the DetailLevelCodeType which has all the enumerated values of the detail level for each component.
/// </BLOCKQUOTE></PRE>
/// Vector of enum ns3__DetailLevelCodeType of length 0..unbounded.
    std::vector<enum ns3__DetailLevelCodeType> DetailLevel                    0;	///< Elements.
/// <PRE><BLOCKQUOTE>
///   This should be the standard RFC 3066 language identification tag, e.g., en_US.
/// </BLOCKQUOTE></PRE>
/// Element "ErrorLanguage" of XSD type xs:string.
    std::string*                         ErrorLanguage                  0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   This refers to the version of the request payload schema.
/// </BLOCKQUOTE></PRE>
/// Element "Version" of XSD type xs:string.
    std::string                          Version                        1;	///< Required element.
/// @todo <any namespace="##local" minOccurs="0">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
    _XML                                 __any                         0;	///< Catch any element content in XML string.
    END OF INHERITED FROM ns3__AbstractRequestType */
/// Element reference "urn:ebay:api:PayPalAPI:""urn:ebay:apis:eBLBaseComponents":DoDirectPaymentRequestDetails.
    ns3__DoDirectPaymentRequestDetailsType*  ns3__DoDirectPaymentRequestDetails 1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   This flag indicates that the response should include FMFDetails
/// </BLOCKQUOTE></PRE>
/// Element "ReturnFMFDetails" of XSD type xs:int.
    int*                                 ReturnFMFDetails               0;	///< Optional element.
};

/// @brief "urn:ebay:api:PayPalAPI":DoDirectPaymentResponseType is a complexType with complexContent extension of XSD type "urn:ebay:apis:eBLBaseComponents":AbstractResponseType.
///
/// class ns1__DoDirectPaymentResponseType operations:
/// - ns1__DoDirectPaymentResponseType* soap_new_ns1__DoDirectPaymentResponseType(soap*) allocate and default initialize
/// - ns1__DoDirectPaymentResponseType* soap_new_ns1__DoDirectPaymentResponseType(soap*, int num) allocate array and default initialize values
/// - ns1__DoDirectPaymentResponseType* soap_new_req_ns1__DoDirectPaymentResponseType(soap*, ...) allocate, set required members
/// - ns1__DoDirectPaymentResponseType* soap_new_set_ns1__DoDirectPaymentResponseType(soap*, ...) allocate, set all public members
/// - ns1__DoDirectPaymentResponseType::soap_default(soap*) default initialize members
/// - int soap_read_ns1__DoDirectPaymentResponseType(soap*, ns1__DoDirectPaymentResponseType*) deserialize from a stream
/// - int soap_write_ns1__DoDirectPaymentResponseType(soap*, ns1__DoDirectPaymentResponseType*) serialize to a stream
/// - ns1__DoDirectPaymentResponseType* ns1__DoDirectPaymentResponseType::soap_dup(soap*) returns deep copy of ns1__DoDirectPaymentResponseType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__DoDirectPaymentResponseType::soap_del() deep deletes ns1__DoDirectPaymentResponseType data members, use only after ns1__DoDirectPaymentResponseType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__DoDirectPaymentResponseType : public ns3__AbstractResponseType
{ public:
/*  INHERITED FROM ns3__AbstractResponseType:
/// <PRE><BLOCKQUOTE>
///   This value represents the date and time (GMT) when the response was generated by a service provider (as a result of processing of a request).
/// </BLOCKQUOTE></PRE>
/// Element "Timestamp" of XSD type xs:dateTime.
    time_t*                              Timestamp                      0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Application level acknowledgement code.
/// </BLOCKQUOTE></PRE>
/// Element "Ack" of XSD type "urn:ebay:apis:eBLBaseComponents":AckCodeType.
    enum ns3__AckCodeType                Ack                            1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   CorrelationID may be used optionally with an application level acknowledgement.
/// </BLOCKQUOTE></PRE>
/// Element "CorrelationID" of XSD type xs:string.
    std::string*                         CorrelationID                  0;	///< Optional element.
/// Vector of ns3__ErrorType* of length 0..unbounded.
    std::vector<ns3__ErrorType*        > Errors                         0;	///< Elements.
/// <PRE><BLOCKQUOTE>
///   This refers to the version of the response payload schema.
/// </BLOCKQUOTE></PRE>
/// Element "Version" of XSD type xs:string.
    std::string                          Version                        1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   This refers to the specific software build that was used in the deployment for processing the request and generating the response.
/// </BLOCKQUOTE></PRE>
/// Element "Build" of XSD type xs:string.
    std::string                          Build                          1;	///< Required element.
/// @todo <any namespace="##local" minOccurs="0">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
    _XML                                 __any                         0;	///< Catch any element content in XML string.
    END OF INHERITED FROM ns3__AbstractResponseType */
/// <PRE><BLOCKQUOTE>
///   The amount of the payment as specified by you on DoDirectPaymentRequest.
/// </BLOCKQUOTE></PRE>
/// Element "Amount" of XSD type "urn:ebay:apis:CoreComponentTypes":BasicAmountType.
    ns2__BasicAmountType*                Amount                         1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Address Verification System response code. Character limit: One single-byte alphanumeric character
///   <table>
///   <tr><th>AVS Code</th><th>Meaning</th><th>Matched Details</th></tr> <tr><td>A </td><td>Address</td><td>Address only (no ZIP) </td></tr> <tr><td>B </td><td>International A</td><td>Address only (no ZIP)</td></tr> <tr><td>C</td><td>International N</td><td> None </td></tr> <tr><td>D</td><td>International X </td><td>Address and Postal Code</td></tr> <tr><td>E </td><td>Not allowed for MOTO (Internet/Phone) transactions </td><td>Not applicable</td></tr> <tr><td>F </td><td>UK-specific X</td><td>Address and Postal Code </td></tr> <tr><td>G </td><td>Global Unavailable</td><td> Not applicable </td></tr>
///   <tr><td>I </td><td>International Unavailable</td><td>Not applicable </td></tr> <tr><td>N </td><td>No</td><td>None</td></tr> <tr><td>P</td><td>Postal (International Z)</td><td>Postal Code only (no Address) </td></tr> <tr><td>R</td><td>Retry</td><td>Not applicable</td></tr> <tr><td>S </td><td>Service not Supported </td><td>Not applicable </td></tr>
///   <tr><td>U </td><td>Unavailable</td><td>Not applicable </td></tr> <tr><td>W </td><td>Whole ZIP</td><td>Nine-digit ZIP code (no Address) </td></tr> <tr><td>X </td><td>Exact match </td><td>Address and nine-digit ZIP code</td></tr> <tr><td>Y </td><td>Yes</td><td>Address and five-digit ZIP</td></tr> <tr><td>Z </td><td>ZIP</td><td> Five-digit ZIP code (no Address)</td></tr> <tr><td>All others </td><td>Error Not applicable</td><td></td></tr>
///   </table>
/// </BLOCKQUOTE></PRE>
/// Element "AVSCode" of XSD type xs:string.
    std::string                          AVSCode                        1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Result of the CVV2 check by PayPal.
///   <table>
///   <tr><th>CVV2 Code</th><th>Meaning</th><th>Matched Details</th></tr> <tr><td>M </td><td>Match</td><td>CVV2 </td></tr> <tr><td>N </td><td>No match </td><td>None</td></tr> <tr><td>P </td><td>Not Processed</td><td>Not applicable</td></tr> <tr><td>S</td><td>Service not Supported</td><td>Not applicable</td></tr> <tr><td>U </td><td>Unavailable</td><td>Not applicable</td></tr> <tr><td>X</td><td>No response</td><td> Not applicable</td></tr> <tr><td>All others </td><td>Error</td><td>Not applicable </td></tr> </table>
/// </BLOCKQUOTE></PRE>
/// Element "CVV2Code" of XSD type xs:string.
    std::string                          CVV2Code                       1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Transaction identification number.
///   <br/><br/>
///   Character length and limitations: 19 characters maximum.
/// </BLOCKQUOTE></PRE>
/// Element "TransactionID" of XSD type "urn:ebay:apis:eBLBaseComponents":TransactionId.
    ns3__TransactionId*                  TransactionID                  0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   pending reason for IC+ interchange plus
/// </BLOCKQUOTE></PRE>
/// Element "TransactionPendingReason" of XSD type xs:string.
    std::string*                         TransactionPendingReason       0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   The reason why a particular transaction went in pending.
/// </BLOCKQUOTE></PRE>
/// Element "PendingReason" of XSD type "urn:ebay:apis:eBLBaseComponents":PendingStatusCodeType.
    enum ns3__PendingStatusCodeType*     PendingReason                  0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   This will identify the actual transaction status.
/// </BLOCKQUOTE></PRE>
/// Element "PaymentStatus" of XSD type "urn:ebay:apis:eBLBaseComponents":PaymentStatusCodeType.
    enum ns3__PaymentStatusCodeType*     PaymentStatus                  0;	///< Optional element.
/// Element "FMFDetails" of XSD type "urn:ebay:apis:eBLBaseComponents":FMFDetailsType.
    ns3__FMFDetailsType*                 FMFDetails                     0;	///< Optional element.
/// Element "ThreeDSecureResponse" of XSD type "urn:ebay:apis:eBLBaseComponents":ThreeDSecureResponseType.
    ns3__ThreeDSecureResponseType*       ThreeDSecureResponse           0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Response code from the processor when a recurring transaction is declined.
/// </BLOCKQUOTE></PRE>
/// Element "PaymentAdviceCode" of XSD type xs:string.
    std::string*                         PaymentAdviceCode              0;	///< Optional element.
};

/// @brief "urn:ebay:api:PayPalAPI":DoCancelRequestType is a complexType with complexContent extension of XSD type "urn:ebay:apis:eBLBaseComponents":AbstractRequestType.
///
/// class ns1__DoCancelRequestType operations:
/// - ns1__DoCancelRequestType* soap_new_ns1__DoCancelRequestType(soap*) allocate and default initialize
/// - ns1__DoCancelRequestType* soap_new_ns1__DoCancelRequestType(soap*, int num) allocate array and default initialize values
/// - ns1__DoCancelRequestType* soap_new_req_ns1__DoCancelRequestType(soap*, ...) allocate, set required members
/// - ns1__DoCancelRequestType* soap_new_set_ns1__DoCancelRequestType(soap*, ...) allocate, set all public members
/// - ns1__DoCancelRequestType::soap_default(soap*) default initialize members
/// - int soap_read_ns1__DoCancelRequestType(soap*, ns1__DoCancelRequestType*) deserialize from a stream
/// - int soap_write_ns1__DoCancelRequestType(soap*, ns1__DoCancelRequestType*) serialize to a stream
/// - ns1__DoCancelRequestType* ns1__DoCancelRequestType::soap_dup(soap*) returns deep copy of ns1__DoCancelRequestType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__DoCancelRequestType::soap_del() deep deletes ns1__DoCancelRequestType data members, use only after ns1__DoCancelRequestType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__DoCancelRequestType : public ns3__AbstractRequestType
{ public:
/*  INHERITED FROM ns3__AbstractRequestType:
/// <PRE><BLOCKQUOTE>
///   This specifies the required detail level that is needed by a client application pertaining to
///   a particular data component (e.g., Item, Transaction, etc.). The detail level is specified in
///   the DetailLevelCodeType which has all the enumerated values of the detail level for each component.
/// </BLOCKQUOTE></PRE>
/// Vector of enum ns3__DetailLevelCodeType of length 0..unbounded.
    std::vector<enum ns3__DetailLevelCodeType> DetailLevel                    0;	///< Elements.
/// <PRE><BLOCKQUOTE>
///   This should be the standard RFC 3066 language identification tag, e.g., en_US.
/// </BLOCKQUOTE></PRE>
/// Element "ErrorLanguage" of XSD type xs:string.
    std::string*                         ErrorLanguage                  0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   This refers to the version of the request payload schema.
/// </BLOCKQUOTE></PRE>
/// Element "Version" of XSD type xs:string.
    std::string                          Version                        1;	///< Required element.
/// @todo <any namespace="##local" minOccurs="0">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
    _XML                                 __any                         0;	///< Catch any element content in XML string.
    END OF INHERITED FROM ns3__AbstractRequestType */
/// <PRE><BLOCKQUOTE>
///   Msg Sub Id that was used for the orginal operation.
/// </BLOCKQUOTE></PRE>
/// Element "CancelMsgSubID" of XSD type xs:string.
    std::string                          CancelMsgSubID                 1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Original API's type
/// </BLOCKQUOTE></PRE>
/// Element "APIType" of XSD type "urn:ebay:apis:eBLBaseComponents":APIType.
    enum ns3__APIType                    APIType                        1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Unique id for each API request to prevent duplicate payments.
///   <br/>
///   <br/>
///   <b>Optional</b>
///   <br/>Character length and limits: 38 single-byte characters maximum.
/// </BLOCKQUOTE></PRE>
/// Element "MsgSubID" of XSD type xs:string.
    std::string*                         MsgSubID                       0;	///< Optional element.
};

/// @brief "urn:ebay:api:PayPalAPI":DoCancelResponseType is a complexType with complexContent extension of XSD type "urn:ebay:apis:eBLBaseComponents":AbstractResponseType.
///
/// class ns1__DoCancelResponseType operations:
/// - ns1__DoCancelResponseType* soap_new_ns1__DoCancelResponseType(soap*) allocate and default initialize
/// - ns1__DoCancelResponseType* soap_new_ns1__DoCancelResponseType(soap*, int num) allocate array and default initialize values
/// - ns1__DoCancelResponseType* soap_new_req_ns1__DoCancelResponseType(soap*, ...) allocate, set required members
/// - ns1__DoCancelResponseType* soap_new_set_ns1__DoCancelResponseType(soap*, ...) allocate, set all public members
/// - ns1__DoCancelResponseType::soap_default(soap*) default initialize members
/// - int soap_read_ns1__DoCancelResponseType(soap*, ns1__DoCancelResponseType*) deserialize from a stream
/// - int soap_write_ns1__DoCancelResponseType(soap*, ns1__DoCancelResponseType*) serialize to a stream
/// - ns1__DoCancelResponseType* ns1__DoCancelResponseType::soap_dup(soap*) returns deep copy of ns1__DoCancelResponseType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__DoCancelResponseType::soap_del() deep deletes ns1__DoCancelResponseType data members, use only after ns1__DoCancelResponseType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__DoCancelResponseType : public ns3__AbstractResponseType
{ public:
/*  INHERITED FROM ns3__AbstractResponseType:
/// <PRE><BLOCKQUOTE>
///   This value represents the date and time (GMT) when the response was generated by a service provider (as a result of processing of a request).
/// </BLOCKQUOTE></PRE>
/// Element "Timestamp" of XSD type xs:dateTime.
    time_t*                              Timestamp                      0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Application level acknowledgement code.
/// </BLOCKQUOTE></PRE>
/// Element "Ack" of XSD type "urn:ebay:apis:eBLBaseComponents":AckCodeType.
    enum ns3__AckCodeType                Ack                            1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   CorrelationID may be used optionally with an application level acknowledgement.
/// </BLOCKQUOTE></PRE>
/// Element "CorrelationID" of XSD type xs:string.
    std::string*                         CorrelationID                  0;	///< Optional element.
/// Vector of ns3__ErrorType* of length 0..unbounded.
    std::vector<ns3__ErrorType*        > Errors                         0;	///< Elements.
/// <PRE><BLOCKQUOTE>
///   This refers to the version of the response payload schema.
/// </BLOCKQUOTE></PRE>
/// Element "Version" of XSD type xs:string.
    std::string                          Version                        1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   This refers to the specific software build that was used in the deployment for processing the request and generating the response.
/// </BLOCKQUOTE></PRE>
/// Element "Build" of XSD type xs:string.
    std::string                          Build                          1;	///< Required element.
/// @todo <any namespace="##local" minOccurs="0">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
    _XML                                 __any                         0;	///< Catch any element content in XML string.
    END OF INHERITED FROM ns3__AbstractResponseType */
/// <PRE><BLOCKQUOTE>
///   Return msgsubid back to merchant
/// </BLOCKQUOTE></PRE>
/// Element "MsgSubID" of XSD type xs:string.
    std::string*                         MsgSubID                       0;	///< Optional element.
};

/// @brief "urn:ebay:api:PayPalAPI":DoCaptureRequestType is a complexType with complexContent extension of XSD type "urn:ebay:apis:eBLBaseComponents":AbstractRequestType.
///
/// class ns1__DoCaptureRequestType operations:
/// - ns1__DoCaptureRequestType* soap_new_ns1__DoCaptureRequestType(soap*) allocate and default initialize
/// - ns1__DoCaptureRequestType* soap_new_ns1__DoCaptureRequestType(soap*, int num) allocate array and default initialize values
/// - ns1__DoCaptureRequestType* soap_new_req_ns1__DoCaptureRequestType(soap*, ...) allocate, set required members
/// - ns1__DoCaptureRequestType* soap_new_set_ns1__DoCaptureRequestType(soap*, ...) allocate, set all public members
/// - ns1__DoCaptureRequestType::soap_default(soap*) default initialize members
/// - int soap_read_ns1__DoCaptureRequestType(soap*, ns1__DoCaptureRequestType*) deserialize from a stream
/// - int soap_write_ns1__DoCaptureRequestType(soap*, ns1__DoCaptureRequestType*) serialize to a stream
/// - ns1__DoCaptureRequestType* ns1__DoCaptureRequestType::soap_dup(soap*) returns deep copy of ns1__DoCaptureRequestType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__DoCaptureRequestType::soap_del() deep deletes ns1__DoCaptureRequestType data members, use only after ns1__DoCaptureRequestType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__DoCaptureRequestType : public ns3__AbstractRequestType
{ public:
/*  INHERITED FROM ns3__AbstractRequestType:
/// <PRE><BLOCKQUOTE>
///   This specifies the required detail level that is needed by a client application pertaining to
///   a particular data component (e.g., Item, Transaction, etc.). The detail level is specified in
///   the DetailLevelCodeType which has all the enumerated values of the detail level for each component.
/// </BLOCKQUOTE></PRE>
/// Vector of enum ns3__DetailLevelCodeType of length 0..unbounded.
    std::vector<enum ns3__DetailLevelCodeType> DetailLevel                    0;	///< Elements.
/// <PRE><BLOCKQUOTE>
///   This should be the standard RFC 3066 language identification tag, e.g., en_US.
/// </BLOCKQUOTE></PRE>
/// Element "ErrorLanguage" of XSD type xs:string.
    std::string*                         ErrorLanguage                  0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   This refers to the version of the request payload schema.
/// </BLOCKQUOTE></PRE>
/// Element "Version" of XSD type xs:string.
    std::string                          Version                        1;	///< Required element.
/// @todo <any namespace="##local" minOccurs="0">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
    _XML                                 __any                         0;	///< Catch any element content in XML string.
    END OF INHERITED FROM ns3__AbstractRequestType */
/// <PRE><BLOCKQUOTE>
///   The authorization identification number of the payment you want to capture. <br/>
///   <br/>
///   <b>Required</b>
///   <br/>
///   <br/>
///   Character length and limits: 19 single-byte characters maximum
/// </BLOCKQUOTE></PRE>
/// Element "AuthorizationID" of XSD type "urn:ebay:apis:eBLBaseComponents":AuthorizationId.
    ns3__AuthorizationId                 AuthorizationID                1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Amount to authorize. You must set the currencyID attribute to USD. <br/>
///   <br/>
///   <b>Required</b>
///   <br/>
///   <br/>
///   Limitations: Must not exceed $10,000 USD in any currency. No currency symbol. Decimal separator must be a period (.), and the thousands separator must be a comma (,)
/// </BLOCKQUOTE></PRE>
/// Element "Amount" of XSD type "urn:ebay:apis:CoreComponentTypes":BasicAmountType.
    ns2__BasicAmountType*                Amount                         1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Indicates if this capture is the last capture you intend to make. The default is Complete. If CompleteType is Complete, any remaining amount of the original reauthorized transaction is automatically voided. <br/>
///   <br/>
///   <b>Required</b>
///   <br/>
///   <br/>
///   Character length and limits: 12 single-byte alphanumeric characters
/// </BLOCKQUOTE></PRE>
/// Element "CompleteType" of XSD type "urn:ebay:apis:eBLBaseComponents":CompleteCodeType.
    enum ns3__CompleteCodeType           CompleteType                   1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   An informational note about this settlement that is displayed to the payer in email and in transaction history. <br/>
///   <br/>
///   Optional
///   <br/>
///   <br/>
///   Character length and limits: 255 single-byte characters
/// </BLOCKQUOTE></PRE>
/// Element "Note" of XSD type xs:string.
    std::string*                         Note                           0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Your invoice number or other identification number. <br/>
///   <br/>
///   The InvoiceID value is recorded only if the authorization you are capturing is an order authorization, not a basic authorization.
///   <br/>
///   <br/>
///   Optional
///   <br/>
///   <br/>
///   Character length and limits: 127 single-byte alphanumeric characters
/// </BLOCKQUOTE></PRE>
/// Element "InvoiceID" of XSD type xs:string.
    std::string*                         InvoiceID                      0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Contains enhanced data like airline itinerary information.
///   <br/>
///   <br/>
///   <b>Not Required</b>
///   <br/>
/// </BLOCKQUOTE></PRE>
/// Element reference "urn:ebay:api:PayPalAPI:""urn:ebay:apis:eBLBaseComponents":EnhancedData.
    ns3__EnhancedDataType*               ns3__EnhancedData              0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   dynamic descriptor
///   <br/>
///   <br/>
///   Dynamic descriptor is used for merchant to provide detail of a transaction appears on statement
///   <br/>
///   <br/>
///   <b>Optional</b>
///   <br/>
///   <br/>
///   Character length and limits: <18 characters alphanumeric characters
/// </BLOCKQUOTE></PRE>
/// Element "Descriptor" of XSD type xs:string.
    std::string*                         Descriptor                     0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   To pass the Merchant store information<br/><br/><b>Optional</b>
/// </BLOCKQUOTE></PRE>
/// Element reference "urn:ebay:api:PayPalAPI:""urn:ebay:apis:eBLBaseComponents":MerchantStoreDetails.
    ns3__MerchantStoreDetailsType*       ns3__MerchantStoreDetails      0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Unique id for each API request to prevent duplicate payments.
///   <br/>
///   <br/>
///   <b>Optional</b>
///   <br/>Character length and limits: 38 single-byte characters maximum.
/// </BLOCKQUOTE></PRE>
/// Element "MsgSubID" of XSD type xs:string.
    std::string*                         MsgSubID                       0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   This holds key-value pair which merchants wants to pass it to the open wallet-PLCC processor<br/><br/><b>Optional</b>
/// </BLOCKQUOTE></PRE>
/// Element reference "urn:ebay:api:PayPalAPI:""urn:ebay:apis:eBLBaseComponents":MerchantData.
    ns3__MerchantDataType*               ns3__MerchantData              0;	///< Optional element.
};

/// @brief "urn:ebay:api:PayPalAPI":DoCaptureResponseType is a complexType with complexContent extension of XSD type "urn:ebay:apis:eBLBaseComponents":AbstractResponseType.
///
/// class ns1__DoCaptureResponseType operations:
/// - ns1__DoCaptureResponseType* soap_new_ns1__DoCaptureResponseType(soap*) allocate and default initialize
/// - ns1__DoCaptureResponseType* soap_new_ns1__DoCaptureResponseType(soap*, int num) allocate array and default initialize values
/// - ns1__DoCaptureResponseType* soap_new_req_ns1__DoCaptureResponseType(soap*, ...) allocate, set required members
/// - ns1__DoCaptureResponseType* soap_new_set_ns1__DoCaptureResponseType(soap*, ...) allocate, set all public members
/// - ns1__DoCaptureResponseType::soap_default(soap*) default initialize members
/// - int soap_read_ns1__DoCaptureResponseType(soap*, ns1__DoCaptureResponseType*) deserialize from a stream
/// - int soap_write_ns1__DoCaptureResponseType(soap*, ns1__DoCaptureResponseType*) serialize to a stream
/// - ns1__DoCaptureResponseType* ns1__DoCaptureResponseType::soap_dup(soap*) returns deep copy of ns1__DoCaptureResponseType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__DoCaptureResponseType::soap_del() deep deletes ns1__DoCaptureResponseType data members, use only after ns1__DoCaptureResponseType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__DoCaptureResponseType : public ns3__AbstractResponseType
{ public:
/*  INHERITED FROM ns3__AbstractResponseType:
/// <PRE><BLOCKQUOTE>
///   This value represents the date and time (GMT) when the response was generated by a service provider (as a result of processing of a request).
/// </BLOCKQUOTE></PRE>
/// Element "Timestamp" of XSD type xs:dateTime.
    time_t*                              Timestamp                      0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Application level acknowledgement code.
/// </BLOCKQUOTE></PRE>
/// Element "Ack" of XSD type "urn:ebay:apis:eBLBaseComponents":AckCodeType.
    enum ns3__AckCodeType                Ack                            1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   CorrelationID may be used optionally with an application level acknowledgement.
/// </BLOCKQUOTE></PRE>
/// Element "CorrelationID" of XSD type xs:string.
    std::string*                         CorrelationID                  0;	///< Optional element.
/// Vector of ns3__ErrorType* of length 0..unbounded.
    std::vector<ns3__ErrorType*        > Errors                         0;	///< Elements.
/// <PRE><BLOCKQUOTE>
///   This refers to the version of the response payload schema.
/// </BLOCKQUOTE></PRE>
/// Element "Version" of XSD type xs:string.
    std::string                          Version                        1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   This refers to the specific software build that was used in the deployment for processing the request and generating the response.
/// </BLOCKQUOTE></PRE>
/// Element "Build" of XSD type xs:string.
    std::string                          Build                          1;	///< Required element.
/// @todo <any namespace="##local" minOccurs="0">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
    _XML                                 __any                         0;	///< Catch any element content in XML string.
    END OF INHERITED FROM ns3__AbstractResponseType */
/// Element reference "urn:ebay:api:PayPalAPI:""urn:ebay:apis:eBLBaseComponents":DoCaptureResponseDetails.
    ns3__DoCaptureResponseDetailsType*   ns3__DoCaptureResponseDetails  1;	///< Required element.
};

/// @brief "urn:ebay:api:PayPalAPI":DoReauthorizationRequestType is a complexType with complexContent extension of XSD type "urn:ebay:apis:eBLBaseComponents":AbstractRequestType.
///
/// class ns1__DoReauthorizationRequestType operations:
/// - ns1__DoReauthorizationRequestType* soap_new_ns1__DoReauthorizationRequestType(soap*) allocate and default initialize
/// - ns1__DoReauthorizationRequestType* soap_new_ns1__DoReauthorizationRequestType(soap*, int num) allocate array and default initialize values
/// - ns1__DoReauthorizationRequestType* soap_new_req_ns1__DoReauthorizationRequestType(soap*, ...) allocate, set required members
/// - ns1__DoReauthorizationRequestType* soap_new_set_ns1__DoReauthorizationRequestType(soap*, ...) allocate, set all public members
/// - ns1__DoReauthorizationRequestType::soap_default(soap*) default initialize members
/// - int soap_read_ns1__DoReauthorizationRequestType(soap*, ns1__DoReauthorizationRequestType*) deserialize from a stream
/// - int soap_write_ns1__DoReauthorizationRequestType(soap*, ns1__DoReauthorizationRequestType*) serialize to a stream
/// - ns1__DoReauthorizationRequestType* ns1__DoReauthorizationRequestType::soap_dup(soap*) returns deep copy of ns1__DoReauthorizationRequestType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__DoReauthorizationRequestType::soap_del() deep deletes ns1__DoReauthorizationRequestType data members, use only after ns1__DoReauthorizationRequestType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__DoReauthorizationRequestType : public ns3__AbstractRequestType
{ public:
/*  INHERITED FROM ns3__AbstractRequestType:
/// <PRE><BLOCKQUOTE>
///   This specifies the required detail level that is needed by a client application pertaining to
///   a particular data component (e.g., Item, Transaction, etc.). The detail level is specified in
///   the DetailLevelCodeType which has all the enumerated values of the detail level for each component.
/// </BLOCKQUOTE></PRE>
/// Vector of enum ns3__DetailLevelCodeType of length 0..unbounded.
    std::vector<enum ns3__DetailLevelCodeType> DetailLevel                    0;	///< Elements.
/// <PRE><BLOCKQUOTE>
///   This should be the standard RFC 3066 language identification tag, e.g., en_US.
/// </BLOCKQUOTE></PRE>
/// Element "ErrorLanguage" of XSD type xs:string.
    std::string*                         ErrorLanguage                  0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   This refers to the version of the request payload schema.
/// </BLOCKQUOTE></PRE>
/// Element "Version" of XSD type xs:string.
    std::string                          Version                        1;	///< Required element.
/// @todo <any namespace="##local" minOccurs="0">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
    _XML                                 __any                         0;	///< Catch any element content in XML string.
    END OF INHERITED FROM ns3__AbstractRequestType */
/// <PRE><BLOCKQUOTE>
///   The value of a previously authorized transaction identification number returned by a PayPal product. You can obtain a buyer's transaction number from the TransactionID element of the PayerInfo structure returned by GetTransactionDetailsResponse. <br/>
///   <br/>
///   <b>Required</b>
///   <br/>
///   <br/>
///   Character length and limits: 19 single-byte characters maximum
/// </BLOCKQUOTE></PRE>
/// Element "AuthorizationID" of XSD type xs:string.
    std::string                          AuthorizationID                1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Amount to reauthorize. <br/>
///   <br/>
///   <b>Required</b>
///   <br/>
///   <br/>
///   Limitations: Must not exceed $10,000 USD in any currency. No currency symbol. Decimal separator must be a period (.), and the thousands separator must be a comma (,).
/// </BLOCKQUOTE></PRE>
/// Element "Amount" of XSD type "urn:ebay:apis:CoreComponentTypes":BasicAmountType.
    ns2__BasicAmountType*                Amount                         1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Unique id for each API request to prevent duplicate payments.
///   <br/>
///   <br/>
///   <b>Optional</b>
///   <br/>Character length and limits: 38 single-byte characters maximum.
/// </BLOCKQUOTE></PRE>
/// Element "MsgSubID" of XSD type xs:string.
    std::string*                         MsgSubID                       0;	///< Optional element.
};

/// @brief "urn:ebay:api:PayPalAPI":DoReauthorizationResponseType is a complexType with complexContent extension of XSD type "urn:ebay:apis:eBLBaseComponents":AbstractResponseType.
///
/// class ns1__DoReauthorizationResponseType operations:
/// - ns1__DoReauthorizationResponseType* soap_new_ns1__DoReauthorizationResponseType(soap*) allocate and default initialize
/// - ns1__DoReauthorizationResponseType* soap_new_ns1__DoReauthorizationResponseType(soap*, int num) allocate array and default initialize values
/// - ns1__DoReauthorizationResponseType* soap_new_req_ns1__DoReauthorizationResponseType(soap*, ...) allocate, set required members
/// - ns1__DoReauthorizationResponseType* soap_new_set_ns1__DoReauthorizationResponseType(soap*, ...) allocate, set all public members
/// - ns1__DoReauthorizationResponseType::soap_default(soap*) default initialize members
/// - int soap_read_ns1__DoReauthorizationResponseType(soap*, ns1__DoReauthorizationResponseType*) deserialize from a stream
/// - int soap_write_ns1__DoReauthorizationResponseType(soap*, ns1__DoReauthorizationResponseType*) serialize to a stream
/// - ns1__DoReauthorizationResponseType* ns1__DoReauthorizationResponseType::soap_dup(soap*) returns deep copy of ns1__DoReauthorizationResponseType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__DoReauthorizationResponseType::soap_del() deep deletes ns1__DoReauthorizationResponseType data members, use only after ns1__DoReauthorizationResponseType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__DoReauthorizationResponseType : public ns3__AbstractResponseType
{ public:
/*  INHERITED FROM ns3__AbstractResponseType:
/// <PRE><BLOCKQUOTE>
///   This value represents the date and time (GMT) when the response was generated by a service provider (as a result of processing of a request).
/// </BLOCKQUOTE></PRE>
/// Element "Timestamp" of XSD type xs:dateTime.
    time_t*                              Timestamp                      0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Application level acknowledgement code.
/// </BLOCKQUOTE></PRE>
/// Element "Ack" of XSD type "urn:ebay:apis:eBLBaseComponents":AckCodeType.
    enum ns3__AckCodeType                Ack                            1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   CorrelationID may be used optionally with an application level acknowledgement.
/// </BLOCKQUOTE></PRE>
/// Element "CorrelationID" of XSD type xs:string.
    std::string*                         CorrelationID                  0;	///< Optional element.
/// Vector of ns3__ErrorType* of length 0..unbounded.
    std::vector<ns3__ErrorType*        > Errors                         0;	///< Elements.
/// <PRE><BLOCKQUOTE>
///   This refers to the version of the response payload schema.
/// </BLOCKQUOTE></PRE>
/// Element "Version" of XSD type xs:string.
    std::string                          Version                        1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   This refers to the specific software build that was used in the deployment for processing the request and generating the response.
/// </BLOCKQUOTE></PRE>
/// Element "Build" of XSD type xs:string.
    std::string                          Build                          1;	///< Required element.
/// @todo <any namespace="##local" minOccurs="0">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
    _XML                                 __any                         0;	///< Catch any element content in XML string.
    END OF INHERITED FROM ns3__AbstractResponseType */
/// <PRE><BLOCKQUOTE>
///   A new authorization identification number.
///   <br/>
///   <br/>Character length and limits: 19 single-byte characters
/// </BLOCKQUOTE></PRE>
/// Element "AuthorizationID" of XSD type xs:string.
    std::string                          AuthorizationID                1;	///< Required element.
/// Element reference "urn:ebay:api:PayPalAPI:""urn:ebay:apis:eBLBaseComponents":AuthorizationInfo.
    ns3__AuthorizationInfoType*          ns3__AuthorizationInfo         0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Return msgsubid back to merchant
/// </BLOCKQUOTE></PRE>
/// Element "MsgSubID" of XSD type xs:string.
    std::string*                         MsgSubID                       0;	///< Optional element.
};

/// @brief "urn:ebay:api:PayPalAPI":DoVoidRequestType is a complexType with complexContent extension of XSD type "urn:ebay:apis:eBLBaseComponents":AbstractRequestType.
///
/// class ns1__DoVoidRequestType operations:
/// - ns1__DoVoidRequestType* soap_new_ns1__DoVoidRequestType(soap*) allocate and default initialize
/// - ns1__DoVoidRequestType* soap_new_ns1__DoVoidRequestType(soap*, int num) allocate array and default initialize values
/// - ns1__DoVoidRequestType* soap_new_req_ns1__DoVoidRequestType(soap*, ...) allocate, set required members
/// - ns1__DoVoidRequestType* soap_new_set_ns1__DoVoidRequestType(soap*, ...) allocate, set all public members
/// - ns1__DoVoidRequestType::soap_default(soap*) default initialize members
/// - int soap_read_ns1__DoVoidRequestType(soap*, ns1__DoVoidRequestType*) deserialize from a stream
/// - int soap_write_ns1__DoVoidRequestType(soap*, ns1__DoVoidRequestType*) serialize to a stream
/// - ns1__DoVoidRequestType* ns1__DoVoidRequestType::soap_dup(soap*) returns deep copy of ns1__DoVoidRequestType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__DoVoidRequestType::soap_del() deep deletes ns1__DoVoidRequestType data members, use only after ns1__DoVoidRequestType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__DoVoidRequestType : public ns3__AbstractRequestType
{ public:
/*  INHERITED FROM ns3__AbstractRequestType:
/// <PRE><BLOCKQUOTE>
///   This specifies the required detail level that is needed by a client application pertaining to
///   a particular data component (e.g., Item, Transaction, etc.). The detail level is specified in
///   the DetailLevelCodeType which has all the enumerated values of the detail level for each component.
/// </BLOCKQUOTE></PRE>
/// Vector of enum ns3__DetailLevelCodeType of length 0..unbounded.
    std::vector<enum ns3__DetailLevelCodeType> DetailLevel                    0;	///< Elements.
/// <PRE><BLOCKQUOTE>
///   This should be the standard RFC 3066 language identification tag, e.g., en_US.
/// </BLOCKQUOTE></PRE>
/// Element "ErrorLanguage" of XSD type xs:string.
    std::string*                         ErrorLanguage                  0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   This refers to the version of the request payload schema.
/// </BLOCKQUOTE></PRE>
/// Element "Version" of XSD type xs:string.
    std::string                          Version                        1;	///< Required element.
/// @todo <any namespace="##local" minOccurs="0">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
    _XML                                 __any                         0;	///< Catch any element content in XML string.
    END OF INHERITED FROM ns3__AbstractRequestType */
/// <PRE><BLOCKQUOTE>
///   The value of the original authorization identification number returned by a PayPal product. <br/>
///   <br/>
///   If you are voiding a transaction that has been reauthorized, use the ID from the original authorization, and not the reauthorization.
///   <br/>
///   <br/>
///   <b>Required</b>
///   <br/>
///   <br/>
///   Character length and limits: 19 single-byte characters
/// </BLOCKQUOTE></PRE>
/// Element "AuthorizationID" of XSD type xs:string.
    std::string                          AuthorizationID                1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   An informational note about this settlement that is displayed to the payer in email and in transaction history. <br/>
///   <br/>
///   Optional
///   <br/>
///   <br/>
///   Character length and limits: 255 single-byte characters
/// </BLOCKQUOTE></PRE>
/// Element "Note" of XSD type xs:string.
    std::string*                         Note                           0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Unique id for each API request to prevent duplicate payments.
///   <br/>
///   <br/>
///   <b>Optional</b>
///   <br/>Character length and limits: 38 single-byte characters maximum.
/// </BLOCKQUOTE></PRE>
/// Element "MsgSubID" of XSD type xs:string.
    std::string*                         MsgSubID                       0;	///< Optional element.
};

/// @brief "urn:ebay:api:PayPalAPI":DoVoidResponseType is a complexType with complexContent extension of XSD type "urn:ebay:apis:eBLBaseComponents":AbstractResponseType.
///
/// class ns1__DoVoidResponseType operations:
/// - ns1__DoVoidResponseType* soap_new_ns1__DoVoidResponseType(soap*) allocate and default initialize
/// - ns1__DoVoidResponseType* soap_new_ns1__DoVoidResponseType(soap*, int num) allocate array and default initialize values
/// - ns1__DoVoidResponseType* soap_new_req_ns1__DoVoidResponseType(soap*, ...) allocate, set required members
/// - ns1__DoVoidResponseType* soap_new_set_ns1__DoVoidResponseType(soap*, ...) allocate, set all public members
/// - ns1__DoVoidResponseType::soap_default(soap*) default initialize members
/// - int soap_read_ns1__DoVoidResponseType(soap*, ns1__DoVoidResponseType*) deserialize from a stream
/// - int soap_write_ns1__DoVoidResponseType(soap*, ns1__DoVoidResponseType*) serialize to a stream
/// - ns1__DoVoidResponseType* ns1__DoVoidResponseType::soap_dup(soap*) returns deep copy of ns1__DoVoidResponseType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__DoVoidResponseType::soap_del() deep deletes ns1__DoVoidResponseType data members, use only after ns1__DoVoidResponseType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__DoVoidResponseType : public ns3__AbstractResponseType
{ public:
/*  INHERITED FROM ns3__AbstractResponseType:
/// <PRE><BLOCKQUOTE>
///   This value represents the date and time (GMT) when the response was generated by a service provider (as a result of processing of a request).
/// </BLOCKQUOTE></PRE>
/// Element "Timestamp" of XSD type xs:dateTime.
    time_t*                              Timestamp                      0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Application level acknowledgement code.
/// </BLOCKQUOTE></PRE>
/// Element "Ack" of XSD type "urn:ebay:apis:eBLBaseComponents":AckCodeType.
    enum ns3__AckCodeType                Ack                            1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   CorrelationID may be used optionally with an application level acknowledgement.
/// </BLOCKQUOTE></PRE>
/// Element "CorrelationID" of XSD type xs:string.
    std::string*                         CorrelationID                  0;	///< Optional element.
/// Vector of ns3__ErrorType* of length 0..unbounded.
    std::vector<ns3__ErrorType*        > Errors                         0;	///< Elements.
/// <PRE><BLOCKQUOTE>
///   This refers to the version of the response payload schema.
/// </BLOCKQUOTE></PRE>
/// Element "Version" of XSD type xs:string.
    std::string                          Version                        1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   This refers to the specific software build that was used in the deployment for processing the request and generating the response.
/// </BLOCKQUOTE></PRE>
/// Element "Build" of XSD type xs:string.
    std::string                          Build                          1;	///< Required element.
/// @todo <any namespace="##local" minOccurs="0">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
    _XML                                 __any                         0;	///< Catch any element content in XML string.
    END OF INHERITED FROM ns3__AbstractResponseType */
/// <PRE><BLOCKQUOTE>
///   The authorization identification number you specified in the request. <br/>
///   <br/>
///   Character length and limits: 19 single-byte characters
/// </BLOCKQUOTE></PRE>
/// Element "AuthorizationID" of XSD type xs:string.
    std::string*                         AuthorizationID                0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Return msgsubid back to merchant
/// </BLOCKQUOTE></PRE>
/// Element "MsgSubID" of XSD type xs:string.
    std::string*                         MsgSubID                       0;	///< Optional element.
};

/// @brief "urn:ebay:api:PayPalAPI":DoAuthorizationRequestType is a complexType with complexContent extension of XSD type "urn:ebay:apis:eBLBaseComponents":AbstractRequestType.
///
/// class ns1__DoAuthorizationRequestType operations:
/// - ns1__DoAuthorizationRequestType* soap_new_ns1__DoAuthorizationRequestType(soap*) allocate and default initialize
/// - ns1__DoAuthorizationRequestType* soap_new_ns1__DoAuthorizationRequestType(soap*, int num) allocate array and default initialize values
/// - ns1__DoAuthorizationRequestType* soap_new_req_ns1__DoAuthorizationRequestType(soap*, ...) allocate, set required members
/// - ns1__DoAuthorizationRequestType* soap_new_set_ns1__DoAuthorizationRequestType(soap*, ...) allocate, set all public members
/// - ns1__DoAuthorizationRequestType::soap_default(soap*) default initialize members
/// - int soap_read_ns1__DoAuthorizationRequestType(soap*, ns1__DoAuthorizationRequestType*) deserialize from a stream
/// - int soap_write_ns1__DoAuthorizationRequestType(soap*, ns1__DoAuthorizationRequestType*) serialize to a stream
/// - ns1__DoAuthorizationRequestType* ns1__DoAuthorizationRequestType::soap_dup(soap*) returns deep copy of ns1__DoAuthorizationRequestType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__DoAuthorizationRequestType::soap_del() deep deletes ns1__DoAuthorizationRequestType data members, use only after ns1__DoAuthorizationRequestType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__DoAuthorizationRequestType : public ns3__AbstractRequestType
{ public:
/*  INHERITED FROM ns3__AbstractRequestType:
/// <PRE><BLOCKQUOTE>
///   This specifies the required detail level that is needed by a client application pertaining to
///   a particular data component (e.g., Item, Transaction, etc.). The detail level is specified in
///   the DetailLevelCodeType which has all the enumerated values of the detail level for each component.
/// </BLOCKQUOTE></PRE>
/// Vector of enum ns3__DetailLevelCodeType of length 0..unbounded.
    std::vector<enum ns3__DetailLevelCodeType> DetailLevel                    0;	///< Elements.
/// <PRE><BLOCKQUOTE>
///   This should be the standard RFC 3066 language identification tag, e.g., en_US.
/// </BLOCKQUOTE></PRE>
/// Element "ErrorLanguage" of XSD type xs:string.
    std::string*                         ErrorLanguage                  0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   This refers to the version of the request payload schema.
/// </BLOCKQUOTE></PRE>
/// Element "Version" of XSD type xs:string.
    std::string                          Version                        1;	///< Required element.
/// @todo <any namespace="##local" minOccurs="0">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
    _XML                                 __any                         0;	///< Catch any element content in XML string.
    END OF INHERITED FROM ns3__AbstractRequestType */
/// <PRE><BLOCKQUOTE>
///   The value of the orders transaction identification number returned by a PayPal product. <br/>
///   <br/>
///   <b>Required</b>
///   <br/>
///   <br/>Character length and limits: 19 single-byte characters maximum
/// </BLOCKQUOTE></PRE>
/// Element "TransactionID" of XSD type xs:string.
    std::string                          TransactionID                  1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Type of transaction to authorize. The only allowable value is <b>Order</b>, which means that the transaction represents a customer order that can be fulfilled over 29 days. <br/>
///   <br/>
///   Optional
/// </BLOCKQUOTE></PRE>
/// Element "TransactionEntity" of XSD type "urn:ebay:apis:eBLBaseComponents":TransactionEntityType.
    enum ns3__TransactionEntityType*     TransactionEntity              0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Amount to authorize. <br/>
///   <br/>
///   <b>Required</b>
///   <br/>
///   <br/>
///   Limitations: Must not exceed $10,000 USD in any currency. No currency symbol. Decimal separator must be a period (.), and the thousands separator must be a comma (,).
/// </BLOCKQUOTE></PRE>
/// Element "Amount" of XSD type "urn:ebay:apis:CoreComponentTypes":BasicAmountType.
    ns2__BasicAmountType*                Amount                         1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Address the order will be shipped to.
///   <br/>
///   <br/>
///   Optional
///   <br/>
///   <br/>
/// </BLOCKQUOTE></PRE>
/// Element reference "urn:ebay:api:PayPalAPI:""urn:ebay:apis:eBLBaseComponents":ShipToAddress.
    ns3__AddressType*                    ns3__ShipToAddress             0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Information about the individual purchased items
/// </BLOCKQUOTE></PRE>
/// Vector of ns3__PaymentDetailsItemType* element refs of length 0..unbounded.
    std::vector<ns3__PaymentDetailsItemType*> ns3__PaymentDetailsItem        0;	///< Elements.
/// <PRE><BLOCKQUOTE>
///   Sum of cost of all items in this order.
///   You must set the currencyID attribute to one of the three-character currency codes for any of the supported PayPal currencies.
///   <br/>
///   <br/>
///   Optional
///   <br/>
///   <br/>Limitations: Must not exceed $10,000 USD in any currency. No currency symbol. Decimal separator must be a period (.), and the thousands separator must be a comma (,).
///   <br/>
/// </BLOCKQUOTE></PRE>
/// Element "ItemTotal" of XSD type "urn:ebay:apis:CoreComponentTypes":BasicAmountType.
    ns2__BasicAmountType*                ItemTotal                      0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Total shipping costs for this order.
///   You must set the currencyID attribute to one of the three-character currency codes for any of the supported PayPal currencies.
///   <br/>
///   <br/>
///   Optional
///   <br/>
///   <br/>Limitations: Must not exceed $10,000 USD in any currency. No currency symbol. Decimal separator must be a period (.), and the thousands separator must be a comma (,).
/// </BLOCKQUOTE></PRE>
/// Element "ShippingTotal" of XSD type "urn:ebay:apis:CoreComponentTypes":BasicAmountType.
    ns2__BasicAmountType*                ShippingTotal                  0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Total handling costs for this order.
///   You must set the currencyID attribute to one of the three-character currency codes for any of the supported PayPal currencies.
///   <br/>
///   <br/>
///   Optional
///   <br/>
///   <br/>Limitations: Must not exceed $10,000 USD in any currency. No currency symbol. Decimal separator must be a period (.), and the thousands separator must be a comma (,).
/// </BLOCKQUOTE></PRE>
/// Element "HandlingTotal" of XSD type "urn:ebay:apis:CoreComponentTypes":BasicAmountType.
    ns2__BasicAmountType*                HandlingTotal                  0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Sum of tax for all items in this order.
///   You must set the currencyID attribute to one of the three-character currency codes for any of the supported PayPal currencies.
///   <br/>
///   <br/>
///   Optional
///   <br/>
///   <br/>Limitations: Must not exceed $10,000 USD in any currency. No currency symbol. Decimal separator must be a period (.), and the thousands separator must be a comma (,).
/// </BLOCKQUOTE></PRE>
/// Element "TaxTotal" of XSD type "urn:ebay:apis:CoreComponentTypes":BasicAmountType.
    ns2__BasicAmountType*                TaxTotal                       0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Total shipping insurance costs for this order.<br/>
///   Optional<br/>
/// </BLOCKQUOTE></PRE>
/// Element "InsuranceTotal" of XSD type "urn:ebay:apis:CoreComponentTypes":BasicAmountType.
    ns2__BasicAmountType*                InsuranceTotal                 0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Shipping discount for this order, specified as a negative number.<br/>
///   Optional<br/>
/// </BLOCKQUOTE></PRE>
/// Element "ShippingDiscount" of XSD type "urn:ebay:apis:CoreComponentTypes":BasicAmountType.
    ns2__BasicAmountType*                ShippingDiscount               0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Description of items the customer is purchasing.
///   <br/>
///   <br/>
///   Optional
///   <br/>
///   <br/>Character length and limitations: 127 single-byte alphanumeric characters
/// </BLOCKQUOTE></PRE>
/// Element "OrderDescription" of XSD type xs:string.
    std::string*                         OrderDescription               0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   A free-form field for your own use.
///   <br/>
///   <br/>
///   Optional
///   <br/>
///   <br/>Character length and limitations: 256 single-byte alphanumeric characters
/// </BLOCKQUOTE></PRE>
/// Element "Custom" of XSD type xs:string.
    std::string*                         Custom                         0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Unique id for each API request to prevent duplicate payments.
///   <br/>
///   <br/>
///   <b>Optional</b>
///   <br/>Character length and limits: 38 single-byte characters maximum.
/// </BLOCKQUOTE></PRE>
/// Element "MsgSubID" of XSD type xs:string.
    std::string*                         MsgSubID                       0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   IP Address of the buyer
/// </BLOCKQUOTE></PRE>
/// Element "IPAddress" of XSD type xs:string.
    std::string*                         IPAddress                      0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   A flag indicating that this transaction is a Ship to Store transaction.
///   <br/><br/>
///   <b>Optional</b>
/// </BLOCKQUOTE></PRE>
/// Element "ShipToStore" of XSD type xs:string.
    std::string*                         ShipToStore                    0;	///< Optional element.
};

/// @brief "urn:ebay:api:PayPalAPI":DoAuthorizationResponseType is a complexType with complexContent extension of XSD type "urn:ebay:apis:eBLBaseComponents":AbstractResponseType.
///
/// class ns1__DoAuthorizationResponseType operations:
/// - ns1__DoAuthorizationResponseType* soap_new_ns1__DoAuthorizationResponseType(soap*) allocate and default initialize
/// - ns1__DoAuthorizationResponseType* soap_new_ns1__DoAuthorizationResponseType(soap*, int num) allocate array and default initialize values
/// - ns1__DoAuthorizationResponseType* soap_new_req_ns1__DoAuthorizationResponseType(soap*, ...) allocate, set required members
/// - ns1__DoAuthorizationResponseType* soap_new_set_ns1__DoAuthorizationResponseType(soap*, ...) allocate, set all public members
/// - ns1__DoAuthorizationResponseType::soap_default(soap*) default initialize members
/// - int soap_read_ns1__DoAuthorizationResponseType(soap*, ns1__DoAuthorizationResponseType*) deserialize from a stream
/// - int soap_write_ns1__DoAuthorizationResponseType(soap*, ns1__DoAuthorizationResponseType*) serialize to a stream
/// - ns1__DoAuthorizationResponseType* ns1__DoAuthorizationResponseType::soap_dup(soap*) returns deep copy of ns1__DoAuthorizationResponseType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__DoAuthorizationResponseType::soap_del() deep deletes ns1__DoAuthorizationResponseType data members, use only after ns1__DoAuthorizationResponseType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__DoAuthorizationResponseType : public ns3__AbstractResponseType
{ public:
/*  INHERITED FROM ns3__AbstractResponseType:
/// <PRE><BLOCKQUOTE>
///   This value represents the date and time (GMT) when the response was generated by a service provider (as a result of processing of a request).
/// </BLOCKQUOTE></PRE>
/// Element "Timestamp" of XSD type xs:dateTime.
    time_t*                              Timestamp                      0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Application level acknowledgement code.
/// </BLOCKQUOTE></PRE>
/// Element "Ack" of XSD type "urn:ebay:apis:eBLBaseComponents":AckCodeType.
    enum ns3__AckCodeType                Ack                            1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   CorrelationID may be used optionally with an application level acknowledgement.
/// </BLOCKQUOTE></PRE>
/// Element "CorrelationID" of XSD type xs:string.
    std::string*                         CorrelationID                  0;	///< Optional element.
/// Vector of ns3__ErrorType* of length 0..unbounded.
    std::vector<ns3__ErrorType*        > Errors                         0;	///< Elements.
/// <PRE><BLOCKQUOTE>
///   This refers to the version of the response payload schema.
/// </BLOCKQUOTE></PRE>
/// Element "Version" of XSD type xs:string.
    std::string                          Version                        1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   This refers to the specific software build that was used in the deployment for processing the request and generating the response.
/// </BLOCKQUOTE></PRE>
/// Element "Build" of XSD type xs:string.
    std::string                          Build                          1;	///< Required element.
/// @todo <any namespace="##local" minOccurs="0">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
    _XML                                 __any                         0;	///< Catch any element content in XML string.
    END OF INHERITED FROM ns3__AbstractResponseType */
/// <PRE><BLOCKQUOTE>
///   An authorization identification number. <br/>
///   <br/>
///   Character length and limits: 19 single-byte characters
/// </BLOCKQUOTE></PRE>
/// Element "TransactionID" of XSD type xs:string.
    std::string*                         TransactionID                  0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   The amount and currency you specified in the request.
/// </BLOCKQUOTE></PRE>
/// Element "Amount" of XSD type "urn:ebay:apis:CoreComponentTypes":BasicAmountType.
    ns2__BasicAmountType*                Amount                         0;	///< Optional element.
/// Element reference "urn:ebay:api:PayPalAPI:""urn:ebay:apis:eBLBaseComponents":AuthorizationInfo.
    ns3__AuthorizationInfoType*          ns3__AuthorizationInfo         0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Return msgsubid back to merchant
/// </BLOCKQUOTE></PRE>
/// Element "MsgSubID" of XSD type xs:string.
    std::string*                         MsgSubID                       0;	///< Optional element.
};

/// @brief "urn:ebay:api:PayPalAPI":UpdateAuthorizationRequestType is a complexType with complexContent extension of XSD type "urn:ebay:apis:eBLBaseComponents":AbstractRequestType.
///
/// class ns1__UpdateAuthorizationRequestType operations:
/// - ns1__UpdateAuthorizationRequestType* soap_new_ns1__UpdateAuthorizationRequestType(soap*) allocate and default initialize
/// - ns1__UpdateAuthorizationRequestType* soap_new_ns1__UpdateAuthorizationRequestType(soap*, int num) allocate array and default initialize values
/// - ns1__UpdateAuthorizationRequestType* soap_new_req_ns1__UpdateAuthorizationRequestType(soap*, ...) allocate, set required members
/// - ns1__UpdateAuthorizationRequestType* soap_new_set_ns1__UpdateAuthorizationRequestType(soap*, ...) allocate, set all public members
/// - ns1__UpdateAuthorizationRequestType::soap_default(soap*) default initialize members
/// - int soap_read_ns1__UpdateAuthorizationRequestType(soap*, ns1__UpdateAuthorizationRequestType*) deserialize from a stream
/// - int soap_write_ns1__UpdateAuthorizationRequestType(soap*, ns1__UpdateAuthorizationRequestType*) serialize to a stream
/// - ns1__UpdateAuthorizationRequestType* ns1__UpdateAuthorizationRequestType::soap_dup(soap*) returns deep copy of ns1__UpdateAuthorizationRequestType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__UpdateAuthorizationRequestType::soap_del() deep deletes ns1__UpdateAuthorizationRequestType data members, use only after ns1__UpdateAuthorizationRequestType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__UpdateAuthorizationRequestType : public ns3__AbstractRequestType
{ public:
/*  INHERITED FROM ns3__AbstractRequestType:
/// <PRE><BLOCKQUOTE>
///   This specifies the required detail level that is needed by a client application pertaining to
///   a particular data component (e.g., Item, Transaction, etc.). The detail level is specified in
///   the DetailLevelCodeType which has all the enumerated values of the detail level for each component.
/// </BLOCKQUOTE></PRE>
/// Vector of enum ns3__DetailLevelCodeType of length 0..unbounded.
    std::vector<enum ns3__DetailLevelCodeType> DetailLevel                    0;	///< Elements.
/// <PRE><BLOCKQUOTE>
///   This should be the standard RFC 3066 language identification tag, e.g., en_US.
/// </BLOCKQUOTE></PRE>
/// Element "ErrorLanguage" of XSD type xs:string.
    std::string*                         ErrorLanguage                  0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   This refers to the version of the request payload schema.
/// </BLOCKQUOTE></PRE>
/// Element "Version" of XSD type xs:string.
    std::string                          Version                        1;	///< Required element.
/// @todo <any namespace="##local" minOccurs="0">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
    _XML                                 __any                         0;	///< Catch any element content in XML string.
    END OF INHERITED FROM ns3__AbstractRequestType */
/// <PRE><BLOCKQUOTE>
///   The value of the authorizationtransaction identification number returned by a PayPal product.
///   <br/>
///   <br/>
///   <b>Required</b>
///   <br/>
///   <br/>Character length and limits: 19 single-byte characters maximum
/// </BLOCKQUOTE></PRE>
/// Element "TransactionID" of XSD type xs:string.
    std::string                          TransactionID                  1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Shipping Address for this transaction.
/// </BLOCKQUOTE></PRE>
/// Element reference "urn:ebay:api:PayPalAPI:""urn:ebay:apis:eBLBaseComponents":ShipToAddress.
    ns3__AddressType*                    ns3__ShipToAddress             0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   IP Address of the buyer
/// </BLOCKQUOTE></PRE>
/// Element "IPAddress" of XSD type xs:string.
    std::string*                         IPAddress                      0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   A flag indicating that this transaction is a Ship to Store transaction.
///   <br/><br/>
///   <b>Optional</b>
/// </BLOCKQUOTE></PRE>
/// Element "ShipToStore" of XSD type xs:string.
    std::string*                         ShipToStore                    0;	///< Optional element.
};

/// @brief "urn:ebay:api:PayPalAPI":UpdateAuthorizationResponseType is a complexType with complexContent extension of XSD type "urn:ebay:apis:eBLBaseComponents":AbstractResponseType.
///
/// class ns1__UpdateAuthorizationResponseType operations:
/// - ns1__UpdateAuthorizationResponseType* soap_new_ns1__UpdateAuthorizationResponseType(soap*) allocate and default initialize
/// - ns1__UpdateAuthorizationResponseType* soap_new_ns1__UpdateAuthorizationResponseType(soap*, int num) allocate array and default initialize values
/// - ns1__UpdateAuthorizationResponseType* soap_new_req_ns1__UpdateAuthorizationResponseType(soap*, ...) allocate, set required members
/// - ns1__UpdateAuthorizationResponseType* soap_new_set_ns1__UpdateAuthorizationResponseType(soap*, ...) allocate, set all public members
/// - ns1__UpdateAuthorizationResponseType::soap_default(soap*) default initialize members
/// - int soap_read_ns1__UpdateAuthorizationResponseType(soap*, ns1__UpdateAuthorizationResponseType*) deserialize from a stream
/// - int soap_write_ns1__UpdateAuthorizationResponseType(soap*, ns1__UpdateAuthorizationResponseType*) serialize to a stream
/// - ns1__UpdateAuthorizationResponseType* ns1__UpdateAuthorizationResponseType::soap_dup(soap*) returns deep copy of ns1__UpdateAuthorizationResponseType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__UpdateAuthorizationResponseType::soap_del() deep deletes ns1__UpdateAuthorizationResponseType data members, use only after ns1__UpdateAuthorizationResponseType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__UpdateAuthorizationResponseType : public ns3__AbstractResponseType
{ public:
/*  INHERITED FROM ns3__AbstractResponseType:
/// <PRE><BLOCKQUOTE>
///   This value represents the date and time (GMT) when the response was generated by a service provider (as a result of processing of a request).
/// </BLOCKQUOTE></PRE>
/// Element "Timestamp" of XSD type xs:dateTime.
    time_t*                              Timestamp                      0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Application level acknowledgement code.
/// </BLOCKQUOTE></PRE>
/// Element "Ack" of XSD type "urn:ebay:apis:eBLBaseComponents":AckCodeType.
    enum ns3__AckCodeType                Ack                            1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   CorrelationID may be used optionally with an application level acknowledgement.
/// </BLOCKQUOTE></PRE>
/// Element "CorrelationID" of XSD type xs:string.
    std::string*                         CorrelationID                  0;	///< Optional element.
/// Vector of ns3__ErrorType* of length 0..unbounded.
    std::vector<ns3__ErrorType*        > Errors                         0;	///< Elements.
/// <PRE><BLOCKQUOTE>
///   This refers to the version of the response payload schema.
/// </BLOCKQUOTE></PRE>
/// Element "Version" of XSD type xs:string.
    std::string                          Version                        1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   This refers to the specific software build that was used in the deployment for processing the request and generating the response.
/// </BLOCKQUOTE></PRE>
/// Element "Build" of XSD type xs:string.
    std::string                          Build                          1;	///< Required element.
/// @todo <any namespace="##local" minOccurs="0">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
    _XML                                 __any                         0;	///< Catch any element content in XML string.
    END OF INHERITED FROM ns3__AbstractResponseType */
/// <PRE><BLOCKQUOTE>
///   An authorization identification number.
///   <br/>
///   <br/>
///   Character length and limits: 19 single-byte characters
/// </BLOCKQUOTE></PRE>
/// Element "TransactionID" of XSD type xs:string.
    std::string*                         TransactionID                  0;	///< Optional element.
/// Element reference "urn:ebay:api:PayPalAPI:""urn:ebay:apis:eBLBaseComponents":AuthorizationInfo.
    ns3__AuthorizationInfoType*          ns3__AuthorizationInfo         0;	///< Optional element.
};

/// @brief "urn:ebay:api:PayPalAPI":DoUATPAuthorizationRequestType is a complexType with complexContent extension of XSD type "urn:ebay:apis:eBLBaseComponents":AbstractRequestType.
///
/// class ns1__DoUATPAuthorizationRequestType operations:
/// - ns1__DoUATPAuthorizationRequestType* soap_new_ns1__DoUATPAuthorizationRequestType(soap*) allocate and default initialize
/// - ns1__DoUATPAuthorizationRequestType* soap_new_ns1__DoUATPAuthorizationRequestType(soap*, int num) allocate array and default initialize values
/// - ns1__DoUATPAuthorizationRequestType* soap_new_req_ns1__DoUATPAuthorizationRequestType(soap*, ...) allocate, set required members
/// - ns1__DoUATPAuthorizationRequestType* soap_new_set_ns1__DoUATPAuthorizationRequestType(soap*, ...) allocate, set all public members
/// - ns1__DoUATPAuthorizationRequestType::soap_default(soap*) default initialize members
/// - int soap_read_ns1__DoUATPAuthorizationRequestType(soap*, ns1__DoUATPAuthorizationRequestType*) deserialize from a stream
/// - int soap_write_ns1__DoUATPAuthorizationRequestType(soap*, ns1__DoUATPAuthorizationRequestType*) serialize to a stream
/// - ns1__DoUATPAuthorizationRequestType* ns1__DoUATPAuthorizationRequestType::soap_dup(soap*) returns deep copy of ns1__DoUATPAuthorizationRequestType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__DoUATPAuthorizationRequestType::soap_del() deep deletes ns1__DoUATPAuthorizationRequestType data members, use only after ns1__DoUATPAuthorizationRequestType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__DoUATPAuthorizationRequestType : public ns3__AbstractRequestType
{ public:
/*  INHERITED FROM ns3__AbstractRequestType:
/// <PRE><BLOCKQUOTE>
///   This specifies the required detail level that is needed by a client application pertaining to
///   a particular data component (e.g., Item, Transaction, etc.). The detail level is specified in
///   the DetailLevelCodeType which has all the enumerated values of the detail level for each component.
/// </BLOCKQUOTE></PRE>
/// Vector of enum ns3__DetailLevelCodeType of length 0..unbounded.
    std::vector<enum ns3__DetailLevelCodeType> DetailLevel                    0;	///< Elements.
/// <PRE><BLOCKQUOTE>
///   This should be the standard RFC 3066 language identification tag, e.g., en_US.
/// </BLOCKQUOTE></PRE>
/// Element "ErrorLanguage" of XSD type xs:string.
    std::string*                         ErrorLanguage                  0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   This refers to the version of the request payload schema.
/// </BLOCKQUOTE></PRE>
/// Element "Version" of XSD type xs:string.
    std::string                          Version                        1;	///< Required element.
/// @todo <any namespace="##local" minOccurs="0">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
    _XML                                 __any                         0;	///< Catch any element content in XML string.
    END OF INHERITED FROM ns3__AbstractRequestType */
/// <PRE><BLOCKQUOTE>
///   UATP card details
///   <br/>
///   <br/>
///   <b>Required</b>
///   <br/>
/// </BLOCKQUOTE></PRE>
/// Element reference "urn:ebay:api:PayPalAPI:""urn:ebay:apis:eBLBaseComponents":UATPDetails.
    ns3__UATPDetailsType*                ns3__UATPDetails               1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Type of transaction to authorize. The only allowable value is <b>Order</b>, which means that the transaction represents a customer order that can be fulfilled over 29 days. <br/>
///   <br/>
///   Optional
/// </BLOCKQUOTE></PRE>
/// Element "TransactionEntity" of XSD type "urn:ebay:apis:eBLBaseComponents":TransactionEntityType.
    enum ns3__TransactionEntityType*     TransactionEntity              0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Amount to authorize. <br/>
///   <br/>
///   <b>Required</b>
///   <br/>
///   <br/>
///   Limitations: Must not exceed $10,000 USD in any currency. No currency symbol. Decimal separator must be a period (.), and the thousands separator must be a comma (,).
/// </BLOCKQUOTE></PRE>
/// Element "Amount" of XSD type "urn:ebay:apis:CoreComponentTypes":BasicAmountType.
    ns2__BasicAmountType*                Amount                         1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Invoice ID. A pass through.
/// </BLOCKQUOTE></PRE>
/// Element "InvoiceID" of XSD type xs:string.
    std::string*                         InvoiceID                      0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Unique id for each API request to prevent duplicate payments.
///   <br/>
///   <br/>
///   <b>Optional</b>
///   <br/>Character length and limits: 38 single-byte characters maximum.
/// </BLOCKQUOTE></PRE>
/// Element "MsgSubID" of XSD type xs:string.
    std::string*                         MsgSubID                       0;	///< Optional element.
};

/// @brief "urn:ebay:api:PayPalAPI":CreateMobilePaymentRequestType is a complexType with complexContent extension of XSD type "urn:ebay:apis:eBLBaseComponents":AbstractRequestType.
///
/// class ns1__CreateMobilePaymentRequestType operations:
/// - ns1__CreateMobilePaymentRequestType* soap_new_ns1__CreateMobilePaymentRequestType(soap*) allocate and default initialize
/// - ns1__CreateMobilePaymentRequestType* soap_new_ns1__CreateMobilePaymentRequestType(soap*, int num) allocate array and default initialize values
/// - ns1__CreateMobilePaymentRequestType* soap_new_req_ns1__CreateMobilePaymentRequestType(soap*, ...) allocate, set required members
/// - ns1__CreateMobilePaymentRequestType* soap_new_set_ns1__CreateMobilePaymentRequestType(soap*, ...) allocate, set all public members
/// - ns1__CreateMobilePaymentRequestType::soap_default(soap*) default initialize members
/// - int soap_read_ns1__CreateMobilePaymentRequestType(soap*, ns1__CreateMobilePaymentRequestType*) deserialize from a stream
/// - int soap_write_ns1__CreateMobilePaymentRequestType(soap*, ns1__CreateMobilePaymentRequestType*) serialize to a stream
/// - ns1__CreateMobilePaymentRequestType* ns1__CreateMobilePaymentRequestType::soap_dup(soap*) returns deep copy of ns1__CreateMobilePaymentRequestType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__CreateMobilePaymentRequestType::soap_del() deep deletes ns1__CreateMobilePaymentRequestType data members, use only after ns1__CreateMobilePaymentRequestType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__CreateMobilePaymentRequestType : public ns3__AbstractRequestType
{ public:
/*  INHERITED FROM ns3__AbstractRequestType:
/// <PRE><BLOCKQUOTE>
///   This specifies the required detail level that is needed by a client application pertaining to
///   a particular data component (e.g., Item, Transaction, etc.). The detail level is specified in
///   the DetailLevelCodeType which has all the enumerated values of the detail level for each component.
/// </BLOCKQUOTE></PRE>
/// Vector of enum ns3__DetailLevelCodeType of length 0..unbounded.
    std::vector<enum ns3__DetailLevelCodeType> DetailLevel                    0;	///< Elements.
/// <PRE><BLOCKQUOTE>
///   This should be the standard RFC 3066 language identification tag, e.g., en_US.
/// </BLOCKQUOTE></PRE>
/// Element "ErrorLanguage" of XSD type xs:string.
    std::string*                         ErrorLanguage                  0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   This refers to the version of the request payload schema.
/// </BLOCKQUOTE></PRE>
/// Element "Version" of XSD type xs:string.
    std::string                          Version                        1;	///< Required element.
/// @todo <any namespace="##local" minOccurs="0">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
    _XML                                 __any                         0;	///< Catch any element content in XML string.
    END OF INHERITED FROM ns3__AbstractRequestType */
/// Element reference "urn:ebay:api:PayPalAPI:""urn:ebay:apis:eBLBaseComponents":CreateMobilePaymentRequestDetails.
    ns3__CreateMobilePaymentRequestDetailsType*  ns3__CreateMobilePaymentRequestDetails 1;	///< Required element.
};

/// @brief "urn:ebay:api:PayPalAPI":CreateMobilePaymentResponseType is a complexType with complexContent extension of XSD type "urn:ebay:apis:eBLBaseComponents":AbstractResponseType.
///
/// class ns1__CreateMobilePaymentResponseType operations:
/// - ns1__CreateMobilePaymentResponseType* soap_new_ns1__CreateMobilePaymentResponseType(soap*) allocate and default initialize
/// - ns1__CreateMobilePaymentResponseType* soap_new_ns1__CreateMobilePaymentResponseType(soap*, int num) allocate array and default initialize values
/// - ns1__CreateMobilePaymentResponseType* soap_new_req_ns1__CreateMobilePaymentResponseType(soap*, ...) allocate, set required members
/// - ns1__CreateMobilePaymentResponseType* soap_new_set_ns1__CreateMobilePaymentResponseType(soap*, ...) allocate, set all public members
/// - ns1__CreateMobilePaymentResponseType::soap_default(soap*) default initialize members
/// - int soap_read_ns1__CreateMobilePaymentResponseType(soap*, ns1__CreateMobilePaymentResponseType*) deserialize from a stream
/// - int soap_write_ns1__CreateMobilePaymentResponseType(soap*, ns1__CreateMobilePaymentResponseType*) serialize to a stream
/// - ns1__CreateMobilePaymentResponseType* ns1__CreateMobilePaymentResponseType::soap_dup(soap*) returns deep copy of ns1__CreateMobilePaymentResponseType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__CreateMobilePaymentResponseType::soap_del() deep deletes ns1__CreateMobilePaymentResponseType data members, use only after ns1__CreateMobilePaymentResponseType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__CreateMobilePaymentResponseType : public ns3__AbstractResponseType
{ public:
/*  INHERITED FROM ns3__AbstractResponseType:
/// <PRE><BLOCKQUOTE>
///   This value represents the date and time (GMT) when the response was generated by a service provider (as a result of processing of a request).
/// </BLOCKQUOTE></PRE>
/// Element "Timestamp" of XSD type xs:dateTime.
    time_t*                              Timestamp                      0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Application level acknowledgement code.
/// </BLOCKQUOTE></PRE>
/// Element "Ack" of XSD type "urn:ebay:apis:eBLBaseComponents":AckCodeType.
    enum ns3__AckCodeType                Ack                            1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   CorrelationID may be used optionally with an application level acknowledgement.
/// </BLOCKQUOTE></PRE>
/// Element "CorrelationID" of XSD type xs:string.
    std::string*                         CorrelationID                  0;	///< Optional element.
/// Vector of ns3__ErrorType* of length 0..unbounded.
    std::vector<ns3__ErrorType*        > Errors                         0;	///< Elements.
/// <PRE><BLOCKQUOTE>
///   This refers to the version of the response payload schema.
/// </BLOCKQUOTE></PRE>
/// Element "Version" of XSD type xs:string.
    std::string                          Version                        1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   This refers to the specific software build that was used in the deployment for processing the request and generating the response.
/// </BLOCKQUOTE></PRE>
/// Element "Build" of XSD type xs:string.
    std::string                          Build                          1;	///< Required element.
/// @todo <any namespace="##local" minOccurs="0">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
    _XML                                 __any                         0;	///< Catch any element content in XML string.
    END OF INHERITED FROM ns3__AbstractResponseType */
};

/// @brief "urn:ebay:api:PayPalAPI":GetMobileStatusRequestType is a complexType with complexContent extension of XSD type "urn:ebay:apis:eBLBaseComponents":AbstractRequestType.
///
/// class ns1__GetMobileStatusRequestType operations:
/// - ns1__GetMobileStatusRequestType* soap_new_ns1__GetMobileStatusRequestType(soap*) allocate and default initialize
/// - ns1__GetMobileStatusRequestType* soap_new_ns1__GetMobileStatusRequestType(soap*, int num) allocate array and default initialize values
/// - ns1__GetMobileStatusRequestType* soap_new_req_ns1__GetMobileStatusRequestType(soap*, ...) allocate, set required members
/// - ns1__GetMobileStatusRequestType* soap_new_set_ns1__GetMobileStatusRequestType(soap*, ...) allocate, set all public members
/// - ns1__GetMobileStatusRequestType::soap_default(soap*) default initialize members
/// - int soap_read_ns1__GetMobileStatusRequestType(soap*, ns1__GetMobileStatusRequestType*) deserialize from a stream
/// - int soap_write_ns1__GetMobileStatusRequestType(soap*, ns1__GetMobileStatusRequestType*) serialize to a stream
/// - ns1__GetMobileStatusRequestType* ns1__GetMobileStatusRequestType::soap_dup(soap*) returns deep copy of ns1__GetMobileStatusRequestType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__GetMobileStatusRequestType::soap_del() deep deletes ns1__GetMobileStatusRequestType data members, use only after ns1__GetMobileStatusRequestType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__GetMobileStatusRequestType : public ns3__AbstractRequestType
{ public:
/*  INHERITED FROM ns3__AbstractRequestType:
/// <PRE><BLOCKQUOTE>
///   This specifies the required detail level that is needed by a client application pertaining to
///   a particular data component (e.g., Item, Transaction, etc.). The detail level is specified in
///   the DetailLevelCodeType which has all the enumerated values of the detail level for each component.
/// </BLOCKQUOTE></PRE>
/// Vector of enum ns3__DetailLevelCodeType of length 0..unbounded.
    std::vector<enum ns3__DetailLevelCodeType> DetailLevel                    0;	///< Elements.
/// <PRE><BLOCKQUOTE>
///   This should be the standard RFC 3066 language identification tag, e.g., en_US.
/// </BLOCKQUOTE></PRE>
/// Element "ErrorLanguage" of XSD type xs:string.
    std::string*                         ErrorLanguage                  0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   This refers to the version of the request payload schema.
/// </BLOCKQUOTE></PRE>
/// Element "Version" of XSD type xs:string.
    std::string                          Version                        1;	///< Required element.
/// @todo <any namespace="##local" minOccurs="0">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
    _XML                                 __any                         0;	///< Catch any element content in XML string.
    END OF INHERITED FROM ns3__AbstractRequestType */
/// Element reference "urn:ebay:api:PayPalAPI:""urn:ebay:apis:eBLBaseComponents":GetMobileStatusRequestDetails.
    ns3__GetMobileStatusRequestDetailsType*  ns3__GetMobileStatusRequestDetails 1;	///< Required element.
};

/// @brief "urn:ebay:api:PayPalAPI":GetMobileStatusResponseType is a complexType with complexContent extension of XSD type "urn:ebay:apis:eBLBaseComponents":AbstractResponseType.
///
/// class ns1__GetMobileStatusResponseType operations:
/// - ns1__GetMobileStatusResponseType* soap_new_ns1__GetMobileStatusResponseType(soap*) allocate and default initialize
/// - ns1__GetMobileStatusResponseType* soap_new_ns1__GetMobileStatusResponseType(soap*, int num) allocate array and default initialize values
/// - ns1__GetMobileStatusResponseType* soap_new_req_ns1__GetMobileStatusResponseType(soap*, ...) allocate, set required members
/// - ns1__GetMobileStatusResponseType* soap_new_set_ns1__GetMobileStatusResponseType(soap*, ...) allocate, set all public members
/// - ns1__GetMobileStatusResponseType::soap_default(soap*) default initialize members
/// - int soap_read_ns1__GetMobileStatusResponseType(soap*, ns1__GetMobileStatusResponseType*) deserialize from a stream
/// - int soap_write_ns1__GetMobileStatusResponseType(soap*, ns1__GetMobileStatusResponseType*) serialize to a stream
/// - ns1__GetMobileStatusResponseType* ns1__GetMobileStatusResponseType::soap_dup(soap*) returns deep copy of ns1__GetMobileStatusResponseType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__GetMobileStatusResponseType::soap_del() deep deletes ns1__GetMobileStatusResponseType data members, use only after ns1__GetMobileStatusResponseType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__GetMobileStatusResponseType : public ns3__AbstractResponseType
{ public:
/*  INHERITED FROM ns3__AbstractResponseType:
/// <PRE><BLOCKQUOTE>
///   This value represents the date and time (GMT) when the response was generated by a service provider (as a result of processing of a request).
/// </BLOCKQUOTE></PRE>
/// Element "Timestamp" of XSD type xs:dateTime.
    time_t*                              Timestamp                      0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Application level acknowledgement code.
/// </BLOCKQUOTE></PRE>
/// Element "Ack" of XSD type "urn:ebay:apis:eBLBaseComponents":AckCodeType.
    enum ns3__AckCodeType                Ack                            1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   CorrelationID may be used optionally with an application level acknowledgement.
/// </BLOCKQUOTE></PRE>
/// Element "CorrelationID" of XSD type xs:string.
    std::string*                         CorrelationID                  0;	///< Optional element.
/// Vector of ns3__ErrorType* of length 0..unbounded.
    std::vector<ns3__ErrorType*        > Errors                         0;	///< Elements.
/// <PRE><BLOCKQUOTE>
///   This refers to the version of the response payload schema.
/// </BLOCKQUOTE></PRE>
/// Element "Version" of XSD type xs:string.
    std::string                          Version                        1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   This refers to the specific software build that was used in the deployment for processing the request and generating the response.
/// </BLOCKQUOTE></PRE>
/// Element "Build" of XSD type xs:string.
    std::string                          Build                          1;	///< Required element.
/// @todo <any namespace="##local" minOccurs="0">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
    _XML                                 __any                         0;	///< Catch any element content in XML string.
    END OF INHERITED FROM ns3__AbstractResponseType */
/// <PRE><BLOCKQUOTE>
///   Indicates whether the phone is activated for mobile payments
///   <br/>
///   <br/>
/// </BLOCKQUOTE></PRE>
/// Element "IsActivated" of XSD type xs:integer.
    xsd__integer                         IsActivated                    1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Indicates whether the password is enabled for particular account
///   <br/>
///   <br/>
/// </BLOCKQUOTE></PRE>
/// Element "IsPasswordSet" of XSD type xs:integer.
    xsd__integer                         IsPasswordSet                  1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Indicates whether there is a payment pending from the phone
///   <br/>
///   <br/>
/// </BLOCKQUOTE></PRE>
/// Element "PaymentPending" of XSD type xs:integer.
    xsd__integer                         PaymentPending                 1;	///< Required element.
};

/// @brief "urn:ebay:api:PayPalAPI":SetMobileCheckoutRequestType is a complexType with complexContent extension of XSD type "urn:ebay:apis:eBLBaseComponents":AbstractRequestType.
///
/// class ns1__SetMobileCheckoutRequestType operations:
/// - ns1__SetMobileCheckoutRequestType* soap_new_ns1__SetMobileCheckoutRequestType(soap*) allocate and default initialize
/// - ns1__SetMobileCheckoutRequestType* soap_new_ns1__SetMobileCheckoutRequestType(soap*, int num) allocate array and default initialize values
/// - ns1__SetMobileCheckoutRequestType* soap_new_req_ns1__SetMobileCheckoutRequestType(soap*, ...) allocate, set required members
/// - ns1__SetMobileCheckoutRequestType* soap_new_set_ns1__SetMobileCheckoutRequestType(soap*, ...) allocate, set all public members
/// - ns1__SetMobileCheckoutRequestType::soap_default(soap*) default initialize members
/// - int soap_read_ns1__SetMobileCheckoutRequestType(soap*, ns1__SetMobileCheckoutRequestType*) deserialize from a stream
/// - int soap_write_ns1__SetMobileCheckoutRequestType(soap*, ns1__SetMobileCheckoutRequestType*) serialize to a stream
/// - ns1__SetMobileCheckoutRequestType* ns1__SetMobileCheckoutRequestType::soap_dup(soap*) returns deep copy of ns1__SetMobileCheckoutRequestType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__SetMobileCheckoutRequestType::soap_del() deep deletes ns1__SetMobileCheckoutRequestType data members, use only after ns1__SetMobileCheckoutRequestType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__SetMobileCheckoutRequestType : public ns3__AbstractRequestType
{ public:
/*  INHERITED FROM ns3__AbstractRequestType:
/// <PRE><BLOCKQUOTE>
///   This specifies the required detail level that is needed by a client application pertaining to
///   a particular data component (e.g., Item, Transaction, etc.). The detail level is specified in
///   the DetailLevelCodeType which has all the enumerated values of the detail level for each component.
/// </BLOCKQUOTE></PRE>
/// Vector of enum ns3__DetailLevelCodeType of length 0..unbounded.
    std::vector<enum ns3__DetailLevelCodeType> DetailLevel                    0;	///< Elements.
/// <PRE><BLOCKQUOTE>
///   This should be the standard RFC 3066 language identification tag, e.g., en_US.
/// </BLOCKQUOTE></PRE>
/// Element "ErrorLanguage" of XSD type xs:string.
    std::string*                         ErrorLanguage                  0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   This refers to the version of the request payload schema.
/// </BLOCKQUOTE></PRE>
/// Element "Version" of XSD type xs:string.
    std::string                          Version                        1;	///< Required element.
/// @todo <any namespace="##local" minOccurs="0">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
    _XML                                 __any                         0;	///< Catch any element content in XML string.
    END OF INHERITED FROM ns3__AbstractRequestType */
/// Element reference "urn:ebay:api:PayPalAPI:""urn:ebay:apis:eBLBaseComponents":SetMobileCheckoutRequestDetails.
    ns3__SetMobileCheckoutRequestDetailsType*  ns3__SetMobileCheckoutRequestDetails 1;	///< Required element.
};

/// @brief "urn:ebay:api:PayPalAPI":SetMobileCheckoutResponseType is a complexType with complexContent extension of XSD type "urn:ebay:apis:eBLBaseComponents":AbstractResponseType.
///
/// class ns1__SetMobileCheckoutResponseType operations:
/// - ns1__SetMobileCheckoutResponseType* soap_new_ns1__SetMobileCheckoutResponseType(soap*) allocate and default initialize
/// - ns1__SetMobileCheckoutResponseType* soap_new_ns1__SetMobileCheckoutResponseType(soap*, int num) allocate array and default initialize values
/// - ns1__SetMobileCheckoutResponseType* soap_new_req_ns1__SetMobileCheckoutResponseType(soap*, ...) allocate, set required members
/// - ns1__SetMobileCheckoutResponseType* soap_new_set_ns1__SetMobileCheckoutResponseType(soap*, ...) allocate, set all public members
/// - ns1__SetMobileCheckoutResponseType::soap_default(soap*) default initialize members
/// - int soap_read_ns1__SetMobileCheckoutResponseType(soap*, ns1__SetMobileCheckoutResponseType*) deserialize from a stream
/// - int soap_write_ns1__SetMobileCheckoutResponseType(soap*, ns1__SetMobileCheckoutResponseType*) serialize to a stream
/// - ns1__SetMobileCheckoutResponseType* ns1__SetMobileCheckoutResponseType::soap_dup(soap*) returns deep copy of ns1__SetMobileCheckoutResponseType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__SetMobileCheckoutResponseType::soap_del() deep deletes ns1__SetMobileCheckoutResponseType data members, use only after ns1__SetMobileCheckoutResponseType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__SetMobileCheckoutResponseType : public ns3__AbstractResponseType
{ public:
/*  INHERITED FROM ns3__AbstractResponseType:
/// <PRE><BLOCKQUOTE>
///   This value represents the date and time (GMT) when the response was generated by a service provider (as a result of processing of a request).
/// </BLOCKQUOTE></PRE>
/// Element "Timestamp" of XSD type xs:dateTime.
    time_t*                              Timestamp                      0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Application level acknowledgement code.
/// </BLOCKQUOTE></PRE>
/// Element "Ack" of XSD type "urn:ebay:apis:eBLBaseComponents":AckCodeType.
    enum ns3__AckCodeType                Ack                            1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   CorrelationID may be used optionally with an application level acknowledgement.
/// </BLOCKQUOTE></PRE>
/// Element "CorrelationID" of XSD type xs:string.
    std::string*                         CorrelationID                  0;	///< Optional element.
/// Vector of ns3__ErrorType* of length 0..unbounded.
    std::vector<ns3__ErrorType*        > Errors                         0;	///< Elements.
/// <PRE><BLOCKQUOTE>
///   This refers to the version of the response payload schema.
/// </BLOCKQUOTE></PRE>
/// Element "Version" of XSD type xs:string.
    std::string                          Version                        1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   This refers to the specific software build that was used in the deployment for processing the request and generating the response.
/// </BLOCKQUOTE></PRE>
/// Element "Build" of XSD type xs:string.
    std::string                          Build                          1;	///< Required element.
/// @todo <any namespace="##local" minOccurs="0">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
    _XML                                 __any                         0;	///< Catch any element content in XML string.
    END OF INHERITED FROM ns3__AbstractResponseType */
/// <PRE><BLOCKQUOTE>
///   A timestamped token by which you identify to PayPal that you are processing this payment with Mobile Checkout. The token expires after three hours.
///   <br/><br/>
///   Character length and limitations: 20 single-byte characters
/// </BLOCKQUOTE></PRE>
/// Element "Token" of XSD type xs:string.
    std::string                          Token                          1;	///< Required element.
};

/// @brief "urn:ebay:api:PayPalAPI":DoMobileCheckoutPaymentRequestType is a complexType with complexContent extension of XSD type "urn:ebay:apis:eBLBaseComponents":AbstractRequestType.
///
/// class ns1__DoMobileCheckoutPaymentRequestType operations:
/// - ns1__DoMobileCheckoutPaymentRequestType* soap_new_ns1__DoMobileCheckoutPaymentRequestType(soap*) allocate and default initialize
/// - ns1__DoMobileCheckoutPaymentRequestType* soap_new_ns1__DoMobileCheckoutPaymentRequestType(soap*, int num) allocate array and default initialize values
/// - ns1__DoMobileCheckoutPaymentRequestType* soap_new_req_ns1__DoMobileCheckoutPaymentRequestType(soap*, ...) allocate, set required members
/// - ns1__DoMobileCheckoutPaymentRequestType* soap_new_set_ns1__DoMobileCheckoutPaymentRequestType(soap*, ...) allocate, set all public members
/// - ns1__DoMobileCheckoutPaymentRequestType::soap_default(soap*) default initialize members
/// - int soap_read_ns1__DoMobileCheckoutPaymentRequestType(soap*, ns1__DoMobileCheckoutPaymentRequestType*) deserialize from a stream
/// - int soap_write_ns1__DoMobileCheckoutPaymentRequestType(soap*, ns1__DoMobileCheckoutPaymentRequestType*) serialize to a stream
/// - ns1__DoMobileCheckoutPaymentRequestType* ns1__DoMobileCheckoutPaymentRequestType::soap_dup(soap*) returns deep copy of ns1__DoMobileCheckoutPaymentRequestType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__DoMobileCheckoutPaymentRequestType::soap_del() deep deletes ns1__DoMobileCheckoutPaymentRequestType data members, use only after ns1__DoMobileCheckoutPaymentRequestType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__DoMobileCheckoutPaymentRequestType : public ns3__AbstractRequestType
{ public:
/*  INHERITED FROM ns3__AbstractRequestType:
/// <PRE><BLOCKQUOTE>
///   This specifies the required detail level that is needed by a client application pertaining to
///   a particular data component (e.g., Item, Transaction, etc.). The detail level is specified in
///   the DetailLevelCodeType which has all the enumerated values of the detail level for each component.
/// </BLOCKQUOTE></PRE>
/// Vector of enum ns3__DetailLevelCodeType of length 0..unbounded.
    std::vector<enum ns3__DetailLevelCodeType> DetailLevel                    0;	///< Elements.
/// <PRE><BLOCKQUOTE>
///   This should be the standard RFC 3066 language identification tag, e.g., en_US.
/// </BLOCKQUOTE></PRE>
/// Element "ErrorLanguage" of XSD type xs:string.
    std::string*                         ErrorLanguage                  0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   This refers to the version of the request payload schema.
/// </BLOCKQUOTE></PRE>
/// Element "Version" of XSD type xs:string.
    std::string                          Version                        1;	///< Required element.
/// @todo <any namespace="##local" minOccurs="0">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
    _XML                                 __any                         0;	///< Catch any element content in XML string.
    END OF INHERITED FROM ns3__AbstractRequestType */
/// <PRE><BLOCKQUOTE>
///   A timestamped token, the value of which was returned by SetMobileCheckoutResponse. <br/><br/>
///   <b>Required</b>
///   <br/><br/>
///   Character length and limitations: 20 single-byte characters
/// </BLOCKQUOTE></PRE>
/// Element "Token" of XSD type xs:string.
    std::string                          Token                          1;	///< Required element.
};

/// @brief "urn:ebay:api:PayPalAPI":DoMobileCheckoutPaymentResponseType is a complexType with complexContent extension of XSD type "urn:ebay:apis:eBLBaseComponents":AbstractResponseType.
///
/// class ns1__DoMobileCheckoutPaymentResponseType operations:
/// - ns1__DoMobileCheckoutPaymentResponseType* soap_new_ns1__DoMobileCheckoutPaymentResponseType(soap*) allocate and default initialize
/// - ns1__DoMobileCheckoutPaymentResponseType* soap_new_ns1__DoMobileCheckoutPaymentResponseType(soap*, int num) allocate array and default initialize values
/// - ns1__DoMobileCheckoutPaymentResponseType* soap_new_req_ns1__DoMobileCheckoutPaymentResponseType(soap*, ...) allocate, set required members
/// - ns1__DoMobileCheckoutPaymentResponseType* soap_new_set_ns1__DoMobileCheckoutPaymentResponseType(soap*, ...) allocate, set all public members
/// - ns1__DoMobileCheckoutPaymentResponseType::soap_default(soap*) default initialize members
/// - int soap_read_ns1__DoMobileCheckoutPaymentResponseType(soap*, ns1__DoMobileCheckoutPaymentResponseType*) deserialize from a stream
/// - int soap_write_ns1__DoMobileCheckoutPaymentResponseType(soap*, ns1__DoMobileCheckoutPaymentResponseType*) serialize to a stream
/// - ns1__DoMobileCheckoutPaymentResponseType* ns1__DoMobileCheckoutPaymentResponseType::soap_dup(soap*) returns deep copy of ns1__DoMobileCheckoutPaymentResponseType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__DoMobileCheckoutPaymentResponseType::soap_del() deep deletes ns1__DoMobileCheckoutPaymentResponseType data members, use only after ns1__DoMobileCheckoutPaymentResponseType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__DoMobileCheckoutPaymentResponseType : public ns3__AbstractResponseType
{ public:
/*  INHERITED FROM ns3__AbstractResponseType:
/// <PRE><BLOCKQUOTE>
///   This value represents the date and time (GMT) when the response was generated by a service provider (as a result of processing of a request).
/// </BLOCKQUOTE></PRE>
/// Element "Timestamp" of XSD type xs:dateTime.
    time_t*                              Timestamp                      0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Application level acknowledgement code.
/// </BLOCKQUOTE></PRE>
/// Element "Ack" of XSD type "urn:ebay:apis:eBLBaseComponents":AckCodeType.
    enum ns3__AckCodeType                Ack                            1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   CorrelationID may be used optionally with an application level acknowledgement.
/// </BLOCKQUOTE></PRE>
/// Element "CorrelationID" of XSD type xs:string.
    std::string*                         CorrelationID                  0;	///< Optional element.
/// Vector of ns3__ErrorType* of length 0..unbounded.
    std::vector<ns3__ErrorType*        > Errors                         0;	///< Elements.
/// <PRE><BLOCKQUOTE>
///   This refers to the version of the response payload schema.
/// </BLOCKQUOTE></PRE>
/// Element "Version" of XSD type xs:string.
    std::string                          Version                        1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   This refers to the specific software build that was used in the deployment for processing the request and generating the response.
/// </BLOCKQUOTE></PRE>
/// Element "Build" of XSD type xs:string.
    std::string                          Build                          1;	///< Required element.
/// @todo <any namespace="##local" minOccurs="0">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
    _XML                                 __any                         0;	///< Catch any element content in XML string.
    END OF INHERITED FROM ns3__AbstractResponseType */
/// Element reference "urn:ebay:api:PayPalAPI:""urn:ebay:apis:eBLBaseComponents":DoMobileCheckoutPaymentResponseDetails.
    ns3__DoMobileCheckoutPaymentResponseDetailsType*  ns3__DoMobileCheckoutPaymentResponseDetails 1;	///< Required element.
};

/// @brief "urn:ebay:api:PayPalAPI":GetBalanceRequestType is a complexType with complexContent extension of XSD type "urn:ebay:apis:eBLBaseComponents":AbstractRequestType.
///
/// class ns1__GetBalanceRequestType operations:
/// - ns1__GetBalanceRequestType* soap_new_ns1__GetBalanceRequestType(soap*) allocate and default initialize
/// - ns1__GetBalanceRequestType* soap_new_ns1__GetBalanceRequestType(soap*, int num) allocate array and default initialize values
/// - ns1__GetBalanceRequestType* soap_new_req_ns1__GetBalanceRequestType(soap*, ...) allocate, set required members
/// - ns1__GetBalanceRequestType* soap_new_set_ns1__GetBalanceRequestType(soap*, ...) allocate, set all public members
/// - ns1__GetBalanceRequestType::soap_default(soap*) default initialize members
/// - int soap_read_ns1__GetBalanceRequestType(soap*, ns1__GetBalanceRequestType*) deserialize from a stream
/// - int soap_write_ns1__GetBalanceRequestType(soap*, ns1__GetBalanceRequestType*) serialize to a stream
/// - ns1__GetBalanceRequestType* ns1__GetBalanceRequestType::soap_dup(soap*) returns deep copy of ns1__GetBalanceRequestType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__GetBalanceRequestType::soap_del() deep deletes ns1__GetBalanceRequestType data members, use only after ns1__GetBalanceRequestType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__GetBalanceRequestType : public ns3__AbstractRequestType
{ public:
/*  INHERITED FROM ns3__AbstractRequestType:
/// <PRE><BLOCKQUOTE>
///   This specifies the required detail level that is needed by a client application pertaining to
///   a particular data component (e.g., Item, Transaction, etc.). The detail level is specified in
///   the DetailLevelCodeType which has all the enumerated values of the detail level for each component.
/// </BLOCKQUOTE></PRE>
/// Vector of enum ns3__DetailLevelCodeType of length 0..unbounded.
    std::vector<enum ns3__DetailLevelCodeType> DetailLevel                    0;	///< Elements.
/// <PRE><BLOCKQUOTE>
///   This should be the standard RFC 3066 language identification tag, e.g., en_US.
/// </BLOCKQUOTE></PRE>
/// Element "ErrorLanguage" of XSD type xs:string.
    std::string*                         ErrorLanguage                  0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   This refers to the version of the request payload schema.
/// </BLOCKQUOTE></PRE>
/// Element "Version" of XSD type xs:string.
    std::string                          Version                        1;	///< Required element.
/// @todo <any namespace="##local" minOccurs="0">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
    _XML                                 __any                         0;	///< Catch any element content in XML string.
    END OF INHERITED FROM ns3__AbstractRequestType */
/// Element "ReturnAllCurrencies" of XSD type xs:string.
    std::string*                         ReturnAllCurrencies            0;	///< Optional element.
};

/// @brief "urn:ebay:api:PayPalAPI":GetBalanceResponseType is a complexType with complexContent extension of XSD type "urn:ebay:apis:eBLBaseComponents":AbstractResponseType.
///
/// class ns1__GetBalanceResponseType operations:
/// - ns1__GetBalanceResponseType* soap_new_ns1__GetBalanceResponseType(soap*) allocate and default initialize
/// - ns1__GetBalanceResponseType* soap_new_ns1__GetBalanceResponseType(soap*, int num) allocate array and default initialize values
/// - ns1__GetBalanceResponseType* soap_new_req_ns1__GetBalanceResponseType(soap*, ...) allocate, set required members
/// - ns1__GetBalanceResponseType* soap_new_set_ns1__GetBalanceResponseType(soap*, ...) allocate, set all public members
/// - ns1__GetBalanceResponseType::soap_default(soap*) default initialize members
/// - int soap_read_ns1__GetBalanceResponseType(soap*, ns1__GetBalanceResponseType*) deserialize from a stream
/// - int soap_write_ns1__GetBalanceResponseType(soap*, ns1__GetBalanceResponseType*) serialize to a stream
/// - ns1__GetBalanceResponseType* ns1__GetBalanceResponseType::soap_dup(soap*) returns deep copy of ns1__GetBalanceResponseType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__GetBalanceResponseType::soap_del() deep deletes ns1__GetBalanceResponseType data members, use only after ns1__GetBalanceResponseType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__GetBalanceResponseType : public ns3__AbstractResponseType
{ public:
/*  INHERITED FROM ns3__AbstractResponseType:
/// <PRE><BLOCKQUOTE>
///   This value represents the date and time (GMT) when the response was generated by a service provider (as a result of processing of a request).
/// </BLOCKQUOTE></PRE>
/// Element "Timestamp" of XSD type xs:dateTime.
    time_t*                              Timestamp                      0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Application level acknowledgement code.
/// </BLOCKQUOTE></PRE>
/// Element "Ack" of XSD type "urn:ebay:apis:eBLBaseComponents":AckCodeType.
    enum ns3__AckCodeType                Ack                            1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   CorrelationID may be used optionally with an application level acknowledgement.
/// </BLOCKQUOTE></PRE>
/// Element "CorrelationID" of XSD type xs:string.
    std::string*                         CorrelationID                  0;	///< Optional element.
/// Vector of ns3__ErrorType* of length 0..unbounded.
    std::vector<ns3__ErrorType*        > Errors                         0;	///< Elements.
/// <PRE><BLOCKQUOTE>
///   This refers to the version of the response payload schema.
/// </BLOCKQUOTE></PRE>
/// Element "Version" of XSD type xs:string.
    std::string                          Version                        1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   This refers to the specific software build that was used in the deployment for processing the request and generating the response.
/// </BLOCKQUOTE></PRE>
/// Element "Build" of XSD type xs:string.
    std::string                          Build                          1;	///< Required element.
/// @todo <any namespace="##local" minOccurs="0">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
    _XML                                 __any                         0;	///< Catch any element content in XML string.
    END OF INHERITED FROM ns3__AbstractResponseType */
/// Element "Balance" of XSD type "urn:ebay:apis:CoreComponentTypes":BasicAmountType.
    ns2__BasicAmountType*                Balance                        1;	///< Required element.
/// Element "BalanceTimeStamp" of XSD type xs:dateTime.
    time_t                               BalanceTimeStamp               1;	///< Required element.
/// Vector of ns2__BasicAmountType* of length 0..unbounded.
    std::vector<ns2__BasicAmountType*  > BalanceHoldings                0;	///< Elements.
};

/// @brief "urn:ebay:api:PayPalAPI":SetCustomerBillingAgreementRequestType is a complexType with complexContent extension of XSD type "urn:ebay:apis:eBLBaseComponents":AbstractRequestType.
///
/// class ns1__SetCustomerBillingAgreementRequestType operations:
/// - ns1__SetCustomerBillingAgreementRequestType* soap_new_ns1__SetCustomerBillingAgreementRequestType(soap*) allocate and default initialize
/// - ns1__SetCustomerBillingAgreementRequestType* soap_new_ns1__SetCustomerBillingAgreementRequestType(soap*, int num) allocate array and default initialize values
/// - ns1__SetCustomerBillingAgreementRequestType* soap_new_req_ns1__SetCustomerBillingAgreementRequestType(soap*, ...) allocate, set required members
/// - ns1__SetCustomerBillingAgreementRequestType* soap_new_set_ns1__SetCustomerBillingAgreementRequestType(soap*, ...) allocate, set all public members
/// - ns1__SetCustomerBillingAgreementRequestType::soap_default(soap*) default initialize members
/// - int soap_read_ns1__SetCustomerBillingAgreementRequestType(soap*, ns1__SetCustomerBillingAgreementRequestType*) deserialize from a stream
/// - int soap_write_ns1__SetCustomerBillingAgreementRequestType(soap*, ns1__SetCustomerBillingAgreementRequestType*) serialize to a stream
/// - ns1__SetCustomerBillingAgreementRequestType* ns1__SetCustomerBillingAgreementRequestType::soap_dup(soap*) returns deep copy of ns1__SetCustomerBillingAgreementRequestType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__SetCustomerBillingAgreementRequestType::soap_del() deep deletes ns1__SetCustomerBillingAgreementRequestType data members, use only after ns1__SetCustomerBillingAgreementRequestType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__SetCustomerBillingAgreementRequestType : public ns3__AbstractRequestType
{ public:
/*  INHERITED FROM ns3__AbstractRequestType:
/// <PRE><BLOCKQUOTE>
///   This specifies the required detail level that is needed by a client application pertaining to
///   a particular data component (e.g., Item, Transaction, etc.). The detail level is specified in
///   the DetailLevelCodeType which has all the enumerated values of the detail level for each component.
/// </BLOCKQUOTE></PRE>
/// Vector of enum ns3__DetailLevelCodeType of length 0..unbounded.
    std::vector<enum ns3__DetailLevelCodeType> DetailLevel                    0;	///< Elements.
/// <PRE><BLOCKQUOTE>
///   This should be the standard RFC 3066 language identification tag, e.g., en_US.
/// </BLOCKQUOTE></PRE>
/// Element "ErrorLanguage" of XSD type xs:string.
    std::string*                         ErrorLanguage                  0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   This refers to the version of the request payload schema.
/// </BLOCKQUOTE></PRE>
/// Element "Version" of XSD type xs:string.
    std::string                          Version                        1;	///< Required element.
/// @todo <any namespace="##local" minOccurs="0">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
    _XML                                 __any                         0;	///< Catch any element content in XML string.
    END OF INHERITED FROM ns3__AbstractRequestType */
/// Element reference "urn:ebay:api:PayPalAPI:""urn:ebay:apis:eBLBaseComponents":SetCustomerBillingAgreementRequestDetails.
    ns3__SetCustomerBillingAgreementRequestDetailsType*  ns3__SetCustomerBillingAgreementRequestDetails 1;	///< Required element.
};

/// @brief "urn:ebay:api:PayPalAPI":SetCustomerBillingAgreementResponseType is a complexType with complexContent extension of XSD type "urn:ebay:apis:eBLBaseComponents":AbstractResponseType.
///
/// class ns1__SetCustomerBillingAgreementResponseType operations:
/// - ns1__SetCustomerBillingAgreementResponseType* soap_new_ns1__SetCustomerBillingAgreementResponseType(soap*) allocate and default initialize
/// - ns1__SetCustomerBillingAgreementResponseType* soap_new_ns1__SetCustomerBillingAgreementResponseType(soap*, int num) allocate array and default initialize values
/// - ns1__SetCustomerBillingAgreementResponseType* soap_new_req_ns1__SetCustomerBillingAgreementResponseType(soap*, ...) allocate, set required members
/// - ns1__SetCustomerBillingAgreementResponseType* soap_new_set_ns1__SetCustomerBillingAgreementResponseType(soap*, ...) allocate, set all public members
/// - ns1__SetCustomerBillingAgreementResponseType::soap_default(soap*) default initialize members
/// - int soap_read_ns1__SetCustomerBillingAgreementResponseType(soap*, ns1__SetCustomerBillingAgreementResponseType*) deserialize from a stream
/// - int soap_write_ns1__SetCustomerBillingAgreementResponseType(soap*, ns1__SetCustomerBillingAgreementResponseType*) serialize to a stream
/// - ns1__SetCustomerBillingAgreementResponseType* ns1__SetCustomerBillingAgreementResponseType::soap_dup(soap*) returns deep copy of ns1__SetCustomerBillingAgreementResponseType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__SetCustomerBillingAgreementResponseType::soap_del() deep deletes ns1__SetCustomerBillingAgreementResponseType data members, use only after ns1__SetCustomerBillingAgreementResponseType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__SetCustomerBillingAgreementResponseType : public ns3__AbstractResponseType
{ public:
/*  INHERITED FROM ns3__AbstractResponseType:
/// <PRE><BLOCKQUOTE>
///   This value represents the date and time (GMT) when the response was generated by a service provider (as a result of processing of a request).
/// </BLOCKQUOTE></PRE>
/// Element "Timestamp" of XSD type xs:dateTime.
    time_t*                              Timestamp                      0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Application level acknowledgement code.
/// </BLOCKQUOTE></PRE>
/// Element "Ack" of XSD type "urn:ebay:apis:eBLBaseComponents":AckCodeType.
    enum ns3__AckCodeType                Ack                            1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   CorrelationID may be used optionally with an application level acknowledgement.
/// </BLOCKQUOTE></PRE>
/// Element "CorrelationID" of XSD type xs:string.
    std::string*                         CorrelationID                  0;	///< Optional element.
/// Vector of ns3__ErrorType* of length 0..unbounded.
    std::vector<ns3__ErrorType*        > Errors                         0;	///< Elements.
/// <PRE><BLOCKQUOTE>
///   This refers to the version of the response payload schema.
/// </BLOCKQUOTE></PRE>
/// Element "Version" of XSD type xs:string.
    std::string                          Version                        1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   This refers to the specific software build that was used in the deployment for processing the request and generating the response.
/// </BLOCKQUOTE></PRE>
/// Element "Build" of XSD type xs:string.
    std::string                          Build                          1;	///< Required element.
/// @todo <any namespace="##local" minOccurs="0">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
    _XML                                 __any                         0;	///< Catch any element content in XML string.
    END OF INHERITED FROM ns3__AbstractResponseType */

/// </BLOCKQUOTE></PRE>
/// Element "Token" of XSD type "urn:ebay:apis:eBLBaseComponents":ExpressCheckoutTokenType.
    ns3__ExpressCheckoutTokenType        Token                          1;	///< Required element.
};

/// @brief "urn:ebay:api:PayPalAPI":GetBillingAgreementCustomerDetailsRequestType is a complexType with complexContent extension of XSD type "urn:ebay:apis:eBLBaseComponents":AbstractRequestType.
///
/// class ns1__GetBillingAgreementCustomerDetailsRequestType operations:
/// - ns1__GetBillingAgreementCustomerDetailsRequestType* soap_new_ns1__GetBillingAgreementCustomerDetailsRequestType(soap*) allocate and default initialize
/// - ns1__GetBillingAgreementCustomerDetailsRequestType* soap_new_ns1__GetBillingAgreementCustomerDetailsRequestType(soap*, int num) allocate array and default initialize values
/// - ns1__GetBillingAgreementCustomerDetailsRequestType* soap_new_req_ns1__GetBillingAgreementCustomerDetailsRequestType(soap*, ...) allocate, set required members
/// - ns1__GetBillingAgreementCustomerDetailsRequestType* soap_new_set_ns1__GetBillingAgreementCustomerDetailsRequestType(soap*, ...) allocate, set all public members
/// - ns1__GetBillingAgreementCustomerDetailsRequestType::soap_default(soap*) default initialize members
/// - int soap_read_ns1__GetBillingAgreementCustomerDetailsRequestType(soap*, ns1__GetBillingAgreementCustomerDetailsRequestType*) deserialize from a stream
/// - int soap_write_ns1__GetBillingAgreementCustomerDetailsRequestType(soap*, ns1__GetBillingAgreementCustomerDetailsRequestType*) serialize to a stream
/// - ns1__GetBillingAgreementCustomerDetailsRequestType* ns1__GetBillingAgreementCustomerDetailsRequestType::soap_dup(soap*) returns deep copy of ns1__GetBillingAgreementCustomerDetailsRequestType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__GetBillingAgreementCustomerDetailsRequestType::soap_del() deep deletes ns1__GetBillingAgreementCustomerDetailsRequestType data members, use only after ns1__GetBillingAgreementCustomerDetailsRequestType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__GetBillingAgreementCustomerDetailsRequestType : public ns3__AbstractRequestType
{ public:
/*  INHERITED FROM ns3__AbstractRequestType:
/// <PRE><BLOCKQUOTE>
///   This specifies the required detail level that is needed by a client application pertaining to
///   a particular data component (e.g., Item, Transaction, etc.). The detail level is specified in
///   the DetailLevelCodeType which has all the enumerated values of the detail level for each component.
/// </BLOCKQUOTE></PRE>
/// Vector of enum ns3__DetailLevelCodeType of length 0..unbounded.
    std::vector<enum ns3__DetailLevelCodeType> DetailLevel                    0;	///< Elements.
/// <PRE><BLOCKQUOTE>
///   This should be the standard RFC 3066 language identification tag, e.g., en_US.
/// </BLOCKQUOTE></PRE>
/// Element "ErrorLanguage" of XSD type xs:string.
    std::string*                         ErrorLanguage                  0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   This refers to the version of the request payload schema.
/// </BLOCKQUOTE></PRE>
/// Element "Version" of XSD type xs:string.
    std::string                          Version                        1;	///< Required element.
/// @todo <any namespace="##local" minOccurs="0">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
    _XML                                 __any                         0;	///< Catch any element content in XML string.
    END OF INHERITED FROM ns3__AbstractRequestType */

/// </BLOCKQUOTE></PRE>
/// Element "Token" of XSD type "urn:ebay:apis:eBLBaseComponents":ExpressCheckoutTokenType.
    ns3__ExpressCheckoutTokenType        Token                          1;	///< Required element.
};

/// @brief "urn:ebay:api:PayPalAPI":GetBillingAgreementCustomerDetailsResponseType is a complexType with complexContent extension of XSD type "urn:ebay:apis:eBLBaseComponents":AbstractResponseType.
///
/// class ns1__GetBillingAgreementCustomerDetailsResponseType operations:
/// - ns1__GetBillingAgreementCustomerDetailsResponseType* soap_new_ns1__GetBillingAgreementCustomerDetailsResponseType(soap*) allocate and default initialize
/// - ns1__GetBillingAgreementCustomerDetailsResponseType* soap_new_ns1__GetBillingAgreementCustomerDetailsResponseType(soap*, int num) allocate array and default initialize values
/// - ns1__GetBillingAgreementCustomerDetailsResponseType* soap_new_req_ns1__GetBillingAgreementCustomerDetailsResponseType(soap*, ...) allocate, set required members
/// - ns1__GetBillingAgreementCustomerDetailsResponseType* soap_new_set_ns1__GetBillingAgreementCustomerDetailsResponseType(soap*, ...) allocate, set all public members
/// - ns1__GetBillingAgreementCustomerDetailsResponseType::soap_default(soap*) default initialize members
/// - int soap_read_ns1__GetBillingAgreementCustomerDetailsResponseType(soap*, ns1__GetBillingAgreementCustomerDetailsResponseType*) deserialize from a stream
/// - int soap_write_ns1__GetBillingAgreementCustomerDetailsResponseType(soap*, ns1__GetBillingAgreementCustomerDetailsResponseType*) serialize to a stream
/// - ns1__GetBillingAgreementCustomerDetailsResponseType* ns1__GetBillingAgreementCustomerDetailsResponseType::soap_dup(soap*) returns deep copy of ns1__GetBillingAgreementCustomerDetailsResponseType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__GetBillingAgreementCustomerDetailsResponseType::soap_del() deep deletes ns1__GetBillingAgreementCustomerDetailsResponseType data members, use only after ns1__GetBillingAgreementCustomerDetailsResponseType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__GetBillingAgreementCustomerDetailsResponseType : public ns3__AbstractResponseType
{ public:
/*  INHERITED FROM ns3__AbstractResponseType:
/// <PRE><BLOCKQUOTE>
///   This value represents the date and time (GMT) when the response was generated by a service provider (as a result of processing of a request).
/// </BLOCKQUOTE></PRE>
/// Element "Timestamp" of XSD type xs:dateTime.
    time_t*                              Timestamp                      0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Application level acknowledgement code.
/// </BLOCKQUOTE></PRE>
/// Element "Ack" of XSD type "urn:ebay:apis:eBLBaseComponents":AckCodeType.
    enum ns3__AckCodeType                Ack                            1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   CorrelationID may be used optionally with an application level acknowledgement.
/// </BLOCKQUOTE></PRE>
/// Element "CorrelationID" of XSD type xs:string.
    std::string*                         CorrelationID                  0;	///< Optional element.
/// Vector of ns3__ErrorType* of length 0..unbounded.
    std::vector<ns3__ErrorType*        > Errors                         0;	///< Elements.
/// <PRE><BLOCKQUOTE>
///   This refers to the version of the response payload schema.
/// </BLOCKQUOTE></PRE>
/// Element "Version" of XSD type xs:string.
    std::string                          Version                        1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   This refers to the specific software build that was used in the deployment for processing the request and generating the response.
/// </BLOCKQUOTE></PRE>
/// Element "Build" of XSD type xs:string.
    std::string                          Build                          1;	///< Required element.
/// @todo <any namespace="##local" minOccurs="0">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
    _XML                                 __any                         0;	///< Catch any element content in XML string.
    END OF INHERITED FROM ns3__AbstractResponseType */
/// Element reference "urn:ebay:api:PayPalAPI:""urn:ebay:apis:eBLBaseComponents":GetBillingAgreementCustomerDetailsResponseDetails.
    ns3__GetBillingAgreementCustomerDetailsResponseDetailsType*  ns3__GetBillingAgreementCustomerDetailsResponseDetails 1;	///< Required element.
};

/// @brief "urn:ebay:api:PayPalAPI":CreateBillingAgreementRequestType is a complexType with complexContent extension of XSD type "urn:ebay:apis:eBLBaseComponents":AbstractRequestType.
///
/// class ns1__CreateBillingAgreementRequestType operations:
/// - ns1__CreateBillingAgreementRequestType* soap_new_ns1__CreateBillingAgreementRequestType(soap*) allocate and default initialize
/// - ns1__CreateBillingAgreementRequestType* soap_new_ns1__CreateBillingAgreementRequestType(soap*, int num) allocate array and default initialize values
/// - ns1__CreateBillingAgreementRequestType* soap_new_req_ns1__CreateBillingAgreementRequestType(soap*, ...) allocate, set required members
/// - ns1__CreateBillingAgreementRequestType* soap_new_set_ns1__CreateBillingAgreementRequestType(soap*, ...) allocate, set all public members
/// - ns1__CreateBillingAgreementRequestType::soap_default(soap*) default initialize members
/// - int soap_read_ns1__CreateBillingAgreementRequestType(soap*, ns1__CreateBillingAgreementRequestType*) deserialize from a stream
/// - int soap_write_ns1__CreateBillingAgreementRequestType(soap*, ns1__CreateBillingAgreementRequestType*) serialize to a stream
/// - ns1__CreateBillingAgreementRequestType* ns1__CreateBillingAgreementRequestType::soap_dup(soap*) returns deep copy of ns1__CreateBillingAgreementRequestType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__CreateBillingAgreementRequestType::soap_del() deep deletes ns1__CreateBillingAgreementRequestType data members, use only after ns1__CreateBillingAgreementRequestType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__CreateBillingAgreementRequestType : public ns3__AbstractRequestType
{ public:
/*  INHERITED FROM ns3__AbstractRequestType:
/// <PRE><BLOCKQUOTE>
///   This specifies the required detail level that is needed by a client application pertaining to
///   a particular data component (e.g., Item, Transaction, etc.). The detail level is specified in
///   the DetailLevelCodeType which has all the enumerated values of the detail level for each component.
/// </BLOCKQUOTE></PRE>
/// Vector of enum ns3__DetailLevelCodeType of length 0..unbounded.
    std::vector<enum ns3__DetailLevelCodeType> DetailLevel                    0;	///< Elements.
/// <PRE><BLOCKQUOTE>
///   This should be the standard RFC 3066 language identification tag, e.g., en_US.
/// </BLOCKQUOTE></PRE>
/// Element "ErrorLanguage" of XSD type xs:string.
    std::string*                         ErrorLanguage                  0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   This refers to the version of the request payload schema.
/// </BLOCKQUOTE></PRE>
/// Element "Version" of XSD type xs:string.
    std::string                          Version                        1;	///< Required element.
/// @todo <any namespace="##local" minOccurs="0">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
    _XML                                 __any                         0;	///< Catch any element content in XML string.
    END OF INHERITED FROM ns3__AbstractRequestType */

/// </BLOCKQUOTE></PRE>
/// Element "Token" of XSD type "urn:ebay:apis:eBLBaseComponents":ExpressCheckoutTokenType.
    ns3__ExpressCheckoutTokenType        Token                          1;	///< Required element.
};

/// @brief "urn:ebay:api:PayPalAPI":CreateBillingAgreementResponseType is a complexType with complexContent extension of XSD type "urn:ebay:apis:eBLBaseComponents":AbstractResponseType.
///
/// class ns1__CreateBillingAgreementResponseType operations:
/// - ns1__CreateBillingAgreementResponseType* soap_new_ns1__CreateBillingAgreementResponseType(soap*) allocate and default initialize
/// - ns1__CreateBillingAgreementResponseType* soap_new_ns1__CreateBillingAgreementResponseType(soap*, int num) allocate array and default initialize values
/// - ns1__CreateBillingAgreementResponseType* soap_new_req_ns1__CreateBillingAgreementResponseType(soap*, ...) allocate, set required members
/// - ns1__CreateBillingAgreementResponseType* soap_new_set_ns1__CreateBillingAgreementResponseType(soap*, ...) allocate, set all public members
/// - ns1__CreateBillingAgreementResponseType::soap_default(soap*) default initialize members
/// - int soap_read_ns1__CreateBillingAgreementResponseType(soap*, ns1__CreateBillingAgreementResponseType*) deserialize from a stream
/// - int soap_write_ns1__CreateBillingAgreementResponseType(soap*, ns1__CreateBillingAgreementResponseType*) serialize to a stream
/// - ns1__CreateBillingAgreementResponseType* ns1__CreateBillingAgreementResponseType::soap_dup(soap*) returns deep copy of ns1__CreateBillingAgreementResponseType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__CreateBillingAgreementResponseType::soap_del() deep deletes ns1__CreateBillingAgreementResponseType data members, use only after ns1__CreateBillingAgreementResponseType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__CreateBillingAgreementResponseType : public ns3__AbstractResponseType
{ public:
/*  INHERITED FROM ns3__AbstractResponseType:
/// <PRE><BLOCKQUOTE>
///   This value represents the date and time (GMT) when the response was generated by a service provider (as a result of processing of a request).
/// </BLOCKQUOTE></PRE>
/// Element "Timestamp" of XSD type xs:dateTime.
    time_t*                              Timestamp                      0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Application level acknowledgement code.
/// </BLOCKQUOTE></PRE>
/// Element "Ack" of XSD type "urn:ebay:apis:eBLBaseComponents":AckCodeType.
    enum ns3__AckCodeType                Ack                            1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   CorrelationID may be used optionally with an application level acknowledgement.
/// </BLOCKQUOTE></PRE>
/// Element "CorrelationID" of XSD type xs:string.
    std::string*                         CorrelationID                  0;	///< Optional element.
/// Vector of ns3__ErrorType* of length 0..unbounded.
    std::vector<ns3__ErrorType*        > Errors                         0;	///< Elements.
/// <PRE><BLOCKQUOTE>
///   This refers to the version of the response payload schema.
/// </BLOCKQUOTE></PRE>
/// Element "Version" of XSD type xs:string.
    std::string                          Version                        1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   This refers to the specific software build that was used in the deployment for processing the request and generating the response.
/// </BLOCKQUOTE></PRE>
/// Element "Build" of XSD type xs:string.
    std::string                          Build                          1;	///< Required element.
/// @todo <any namespace="##local" minOccurs="0">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
    _XML                                 __any                         0;	///< Catch any element content in XML string.
    END OF INHERITED FROM ns3__AbstractResponseType */

/// </BLOCKQUOTE></PRE>
/// Element "BillingAgreementID" of XSD type xs:string.
    std::string                          BillingAgreementID             1;	///< Required element.
};

/// @brief "urn:ebay:api:PayPalAPI":DoReferenceTransactionRequestType is a complexType with complexContent extension of XSD type "urn:ebay:apis:eBLBaseComponents":AbstractRequestType.
///
/// class ns1__DoReferenceTransactionRequestType operations:
/// - ns1__DoReferenceTransactionRequestType* soap_new_ns1__DoReferenceTransactionRequestType(soap*) allocate and default initialize
/// - ns1__DoReferenceTransactionRequestType* soap_new_ns1__DoReferenceTransactionRequestType(soap*, int num) allocate array and default initialize values
/// - ns1__DoReferenceTransactionRequestType* soap_new_req_ns1__DoReferenceTransactionRequestType(soap*, ...) allocate, set required members
/// - ns1__DoReferenceTransactionRequestType* soap_new_set_ns1__DoReferenceTransactionRequestType(soap*, ...) allocate, set all public members
/// - ns1__DoReferenceTransactionRequestType::soap_default(soap*) default initialize members
/// - int soap_read_ns1__DoReferenceTransactionRequestType(soap*, ns1__DoReferenceTransactionRequestType*) deserialize from a stream
/// - int soap_write_ns1__DoReferenceTransactionRequestType(soap*, ns1__DoReferenceTransactionRequestType*) serialize to a stream
/// - ns1__DoReferenceTransactionRequestType* ns1__DoReferenceTransactionRequestType::soap_dup(soap*) returns deep copy of ns1__DoReferenceTransactionRequestType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__DoReferenceTransactionRequestType::soap_del() deep deletes ns1__DoReferenceTransactionRequestType data members, use only after ns1__DoReferenceTransactionRequestType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__DoReferenceTransactionRequestType : public ns3__AbstractRequestType
{ public:
/*  INHERITED FROM ns3__AbstractRequestType:
/// <PRE><BLOCKQUOTE>
///   This specifies the required detail level that is needed by a client application pertaining to
///   a particular data component (e.g., Item, Transaction, etc.). The detail level is specified in
///   the DetailLevelCodeType which has all the enumerated values of the detail level for each component.
/// </BLOCKQUOTE></PRE>
/// Vector of enum ns3__DetailLevelCodeType of length 0..unbounded.
    std::vector<enum ns3__DetailLevelCodeType> DetailLevel                    0;	///< Elements.
/// <PRE><BLOCKQUOTE>
///   This should be the standard RFC 3066 language identification tag, e.g., en_US.
/// </BLOCKQUOTE></PRE>
/// Element "ErrorLanguage" of XSD type xs:string.
    std::string*                         ErrorLanguage                  0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   This refers to the version of the request payload schema.
/// </BLOCKQUOTE></PRE>
/// Element "Version" of XSD type xs:string.
    std::string                          Version                        1;	///< Required element.
/// @todo <any namespace="##local" minOccurs="0">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
    _XML                                 __any                         0;	///< Catch any element content in XML string.
    END OF INHERITED FROM ns3__AbstractRequestType */
/// Element reference "urn:ebay:api:PayPalAPI:""urn:ebay:apis:eBLBaseComponents":DoReferenceTransactionRequestDetails.
    ns3__DoReferenceTransactionRequestDetailsType*  ns3__DoReferenceTransactionRequestDetails 1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   This flag indicates that the response should include FMFDetails
/// </BLOCKQUOTE></PRE>
/// Element "ReturnFMFDetails" of XSD type xs:int.
    int*                                 ReturnFMFDetails               0;	///< Optional element.
};

/// @brief "urn:ebay:api:PayPalAPI":DoReferenceTransactionResponseType is a complexType with complexContent extension of XSD type "urn:ebay:apis:eBLBaseComponents":AbstractResponseType.
///
/// class ns1__DoReferenceTransactionResponseType operations:
/// - ns1__DoReferenceTransactionResponseType* soap_new_ns1__DoReferenceTransactionResponseType(soap*) allocate and default initialize
/// - ns1__DoReferenceTransactionResponseType* soap_new_ns1__DoReferenceTransactionResponseType(soap*, int num) allocate array and default initialize values
/// - ns1__DoReferenceTransactionResponseType* soap_new_req_ns1__DoReferenceTransactionResponseType(soap*, ...) allocate, set required members
/// - ns1__DoReferenceTransactionResponseType* soap_new_set_ns1__DoReferenceTransactionResponseType(soap*, ...) allocate, set all public members
/// - ns1__DoReferenceTransactionResponseType::soap_default(soap*) default initialize members
/// - int soap_read_ns1__DoReferenceTransactionResponseType(soap*, ns1__DoReferenceTransactionResponseType*) deserialize from a stream
/// - int soap_write_ns1__DoReferenceTransactionResponseType(soap*, ns1__DoReferenceTransactionResponseType*) serialize to a stream
/// - ns1__DoReferenceTransactionResponseType* ns1__DoReferenceTransactionResponseType::soap_dup(soap*) returns deep copy of ns1__DoReferenceTransactionResponseType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__DoReferenceTransactionResponseType::soap_del() deep deletes ns1__DoReferenceTransactionResponseType data members, use only after ns1__DoReferenceTransactionResponseType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__DoReferenceTransactionResponseType : public ns3__AbstractResponseType
{ public:
/*  INHERITED FROM ns3__AbstractResponseType:
/// <PRE><BLOCKQUOTE>
///   This value represents the date and time (GMT) when the response was generated by a service provider (as a result of processing of a request).
/// </BLOCKQUOTE></PRE>
/// Element "Timestamp" of XSD type xs:dateTime.
    time_t*                              Timestamp                      0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Application level acknowledgement code.
/// </BLOCKQUOTE></PRE>
/// Element "Ack" of XSD type "urn:ebay:apis:eBLBaseComponents":AckCodeType.
    enum ns3__AckCodeType                Ack                            1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   CorrelationID may be used optionally with an application level acknowledgement.
/// </BLOCKQUOTE></PRE>
/// Element "CorrelationID" of XSD type xs:string.
    std::string*                         CorrelationID                  0;	///< Optional element.
/// Vector of ns3__ErrorType* of length 0..unbounded.
    std::vector<ns3__ErrorType*        > Errors                         0;	///< Elements.
/// <PRE><BLOCKQUOTE>
///   This refers to the version of the response payload schema.
/// </BLOCKQUOTE></PRE>
/// Element "Version" of XSD type xs:string.
    std::string                          Version                        1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   This refers to the specific software build that was used in the deployment for processing the request and generating the response.
/// </BLOCKQUOTE></PRE>
/// Element "Build" of XSD type xs:string.
    std::string                          Build                          1;	///< Required element.
/// @todo <any namespace="##local" minOccurs="0">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
    _XML                                 __any                         0;	///< Catch any element content in XML string.
    END OF INHERITED FROM ns3__AbstractResponseType */
/// Element reference "urn:ebay:api:PayPalAPI:""urn:ebay:apis:eBLBaseComponents":DoReferenceTransactionResponseDetails.
    ns3__DoReferenceTransactionResponseDetailsType*  ns3__DoReferenceTransactionResponseDetails 1;	///< Required element.
/// Element "FMFDetails" of XSD type "urn:ebay:apis:eBLBaseComponents":FMFDetailsType.
    ns3__FMFDetailsType*                 FMFDetails                     0;	///< Optional element.
};

/// @brief "urn:ebay:api:PayPalAPI":DoNonReferencedCreditRequestType is a complexType with complexContent extension of XSD type "urn:ebay:apis:eBLBaseComponents":AbstractRequestType.
///
/// class ns1__DoNonReferencedCreditRequestType operations:
/// - ns1__DoNonReferencedCreditRequestType* soap_new_ns1__DoNonReferencedCreditRequestType(soap*) allocate and default initialize
/// - ns1__DoNonReferencedCreditRequestType* soap_new_ns1__DoNonReferencedCreditRequestType(soap*, int num) allocate array and default initialize values
/// - ns1__DoNonReferencedCreditRequestType* soap_new_req_ns1__DoNonReferencedCreditRequestType(soap*, ...) allocate, set required members
/// - ns1__DoNonReferencedCreditRequestType* soap_new_set_ns1__DoNonReferencedCreditRequestType(soap*, ...) allocate, set all public members
/// - ns1__DoNonReferencedCreditRequestType::soap_default(soap*) default initialize members
/// - int soap_read_ns1__DoNonReferencedCreditRequestType(soap*, ns1__DoNonReferencedCreditRequestType*) deserialize from a stream
/// - int soap_write_ns1__DoNonReferencedCreditRequestType(soap*, ns1__DoNonReferencedCreditRequestType*) serialize to a stream
/// - ns1__DoNonReferencedCreditRequestType* ns1__DoNonReferencedCreditRequestType::soap_dup(soap*) returns deep copy of ns1__DoNonReferencedCreditRequestType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__DoNonReferencedCreditRequestType::soap_del() deep deletes ns1__DoNonReferencedCreditRequestType data members, use only after ns1__DoNonReferencedCreditRequestType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__DoNonReferencedCreditRequestType : public ns3__AbstractRequestType
{ public:
/*  INHERITED FROM ns3__AbstractRequestType:
/// <PRE><BLOCKQUOTE>
///   This specifies the required detail level that is needed by a client application pertaining to
///   a particular data component (e.g., Item, Transaction, etc.). The detail level is specified in
///   the DetailLevelCodeType which has all the enumerated values of the detail level for each component.
/// </BLOCKQUOTE></PRE>
/// Vector of enum ns3__DetailLevelCodeType of length 0..unbounded.
    std::vector<enum ns3__DetailLevelCodeType> DetailLevel                    0;	///< Elements.
/// <PRE><BLOCKQUOTE>
///   This should be the standard RFC 3066 language identification tag, e.g., en_US.
/// </BLOCKQUOTE></PRE>
/// Element "ErrorLanguage" of XSD type xs:string.
    std::string*                         ErrorLanguage                  0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   This refers to the version of the request payload schema.
/// </BLOCKQUOTE></PRE>
/// Element "Version" of XSD type xs:string.
    std::string                          Version                        1;	///< Required element.
/// @todo <any namespace="##local" minOccurs="0">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
    _XML                                 __any                         0;	///< Catch any element content in XML string.
    END OF INHERITED FROM ns3__AbstractRequestType */
/// Element reference "urn:ebay:api:PayPalAPI:""urn:ebay:apis:eBLBaseComponents":DoNonReferencedCreditRequestDetails.
    ns3__DoNonReferencedCreditRequestDetailsType*  ns3__DoNonReferencedCreditRequestDetails 1;	///< Required element.
};

/// @brief "urn:ebay:api:PayPalAPI":DoNonReferencedCreditResponseType is a complexType with complexContent extension of XSD type "urn:ebay:apis:eBLBaseComponents":AbstractResponseType.
///
/// class ns1__DoNonReferencedCreditResponseType operations:
/// - ns1__DoNonReferencedCreditResponseType* soap_new_ns1__DoNonReferencedCreditResponseType(soap*) allocate and default initialize
/// - ns1__DoNonReferencedCreditResponseType* soap_new_ns1__DoNonReferencedCreditResponseType(soap*, int num) allocate array and default initialize values
/// - ns1__DoNonReferencedCreditResponseType* soap_new_req_ns1__DoNonReferencedCreditResponseType(soap*, ...) allocate, set required members
/// - ns1__DoNonReferencedCreditResponseType* soap_new_set_ns1__DoNonReferencedCreditResponseType(soap*, ...) allocate, set all public members
/// - ns1__DoNonReferencedCreditResponseType::soap_default(soap*) default initialize members
/// - int soap_read_ns1__DoNonReferencedCreditResponseType(soap*, ns1__DoNonReferencedCreditResponseType*) deserialize from a stream
/// - int soap_write_ns1__DoNonReferencedCreditResponseType(soap*, ns1__DoNonReferencedCreditResponseType*) serialize to a stream
/// - ns1__DoNonReferencedCreditResponseType* ns1__DoNonReferencedCreditResponseType::soap_dup(soap*) returns deep copy of ns1__DoNonReferencedCreditResponseType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__DoNonReferencedCreditResponseType::soap_del() deep deletes ns1__DoNonReferencedCreditResponseType data members, use only after ns1__DoNonReferencedCreditResponseType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__DoNonReferencedCreditResponseType : public ns3__AbstractResponseType
{ public:
/*  INHERITED FROM ns3__AbstractResponseType:
/// <PRE><BLOCKQUOTE>
///   This value represents the date and time (GMT) when the response was generated by a service provider (as a result of processing of a request).
/// </BLOCKQUOTE></PRE>
/// Element "Timestamp" of XSD type xs:dateTime.
    time_t*                              Timestamp                      0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Application level acknowledgement code.
/// </BLOCKQUOTE></PRE>
/// Element "Ack" of XSD type "urn:ebay:apis:eBLBaseComponents":AckCodeType.
    enum ns3__AckCodeType                Ack                            1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   CorrelationID may be used optionally with an application level acknowledgement.
/// </BLOCKQUOTE></PRE>
/// Element "CorrelationID" of XSD type xs:string.
    std::string*                         CorrelationID                  0;	///< Optional element.
/// Vector of ns3__ErrorType* of length 0..unbounded.
    std::vector<ns3__ErrorType*        > Errors                         0;	///< Elements.
/// <PRE><BLOCKQUOTE>
///   This refers to the version of the response payload schema.
/// </BLOCKQUOTE></PRE>
/// Element "Version" of XSD type xs:string.
    std::string                          Version                        1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   This refers to the specific software build that was used in the deployment for processing the request and generating the response.
/// </BLOCKQUOTE></PRE>
/// Element "Build" of XSD type xs:string.
    std::string                          Build                          1;	///< Required element.
/// @todo <any namespace="##local" minOccurs="0">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
    _XML                                 __any                         0;	///< Catch any element content in XML string.
    END OF INHERITED FROM ns3__AbstractResponseType */
/// Element reference "urn:ebay:api:PayPalAPI:""urn:ebay:apis:eBLBaseComponents":DoNonReferencedCreditResponseDetails.
    ns3__DoNonReferencedCreditResponseDetailsType*  ns3__DoNonReferencedCreditResponseDetails 1;	///< Required element.
};

/// @brief "urn:ebay:api:PayPalAPI":CreateRecurringPaymentsProfileRequestType is a complexType with complexContent extension of XSD type "urn:ebay:apis:eBLBaseComponents":AbstractRequestType.
///
/// class ns1__CreateRecurringPaymentsProfileRequestType operations:
/// - ns1__CreateRecurringPaymentsProfileRequestType* soap_new_ns1__CreateRecurringPaymentsProfileRequestType(soap*) allocate and default initialize
/// - ns1__CreateRecurringPaymentsProfileRequestType* soap_new_ns1__CreateRecurringPaymentsProfileRequestType(soap*, int num) allocate array and default initialize values
/// - ns1__CreateRecurringPaymentsProfileRequestType* soap_new_req_ns1__CreateRecurringPaymentsProfileRequestType(soap*, ...) allocate, set required members
/// - ns1__CreateRecurringPaymentsProfileRequestType* soap_new_set_ns1__CreateRecurringPaymentsProfileRequestType(soap*, ...) allocate, set all public members
/// - ns1__CreateRecurringPaymentsProfileRequestType::soap_default(soap*) default initialize members
/// - int soap_read_ns1__CreateRecurringPaymentsProfileRequestType(soap*, ns1__CreateRecurringPaymentsProfileRequestType*) deserialize from a stream
/// - int soap_write_ns1__CreateRecurringPaymentsProfileRequestType(soap*, ns1__CreateRecurringPaymentsProfileRequestType*) serialize to a stream
/// - ns1__CreateRecurringPaymentsProfileRequestType* ns1__CreateRecurringPaymentsProfileRequestType::soap_dup(soap*) returns deep copy of ns1__CreateRecurringPaymentsProfileRequestType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__CreateRecurringPaymentsProfileRequestType::soap_del() deep deletes ns1__CreateRecurringPaymentsProfileRequestType data members, use only after ns1__CreateRecurringPaymentsProfileRequestType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__CreateRecurringPaymentsProfileRequestType : public ns3__AbstractRequestType
{ public:
/*  INHERITED FROM ns3__AbstractRequestType:
/// <PRE><BLOCKQUOTE>
///   This specifies the required detail level that is needed by a client application pertaining to
///   a particular data component (e.g., Item, Transaction, etc.). The detail level is specified in
///   the DetailLevelCodeType which has all the enumerated values of the detail level for each component.
/// </BLOCKQUOTE></PRE>
/// Vector of enum ns3__DetailLevelCodeType of length 0..unbounded.
    std::vector<enum ns3__DetailLevelCodeType> DetailLevel                    0;	///< Elements.
/// <PRE><BLOCKQUOTE>
///   This should be the standard RFC 3066 language identification tag, e.g., en_US.
/// </BLOCKQUOTE></PRE>
/// Element "ErrorLanguage" of XSD type xs:string.
    std::string*                         ErrorLanguage                  0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   This refers to the version of the request payload schema.
/// </BLOCKQUOTE></PRE>
/// Element "Version" of XSD type xs:string.
    std::string                          Version                        1;	///< Required element.
/// @todo <any namespace="##local" minOccurs="0">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
    _XML                                 __any                         0;	///< Catch any element content in XML string.
    END OF INHERITED FROM ns3__AbstractRequestType */
/// Element reference "urn:ebay:api:PayPalAPI:""urn:ebay:apis:eBLBaseComponents":CreateRecurringPaymentsProfileRequestDetails.
    ns3__CreateRecurringPaymentsProfileRequestDetailsType*  ns3__CreateRecurringPaymentsProfileRequestDetails 1;	///< Required element.
};

/// @brief "urn:ebay:api:PayPalAPI":CreateRecurringPaymentsProfileResponseType is a complexType with complexContent extension of XSD type "urn:ebay:apis:eBLBaseComponents":AbstractResponseType.
///
/// class ns1__CreateRecurringPaymentsProfileResponseType operations:
/// - ns1__CreateRecurringPaymentsProfileResponseType* soap_new_ns1__CreateRecurringPaymentsProfileResponseType(soap*) allocate and default initialize
/// - ns1__CreateRecurringPaymentsProfileResponseType* soap_new_ns1__CreateRecurringPaymentsProfileResponseType(soap*, int num) allocate array and default initialize values
/// - ns1__CreateRecurringPaymentsProfileResponseType* soap_new_req_ns1__CreateRecurringPaymentsProfileResponseType(soap*, ...) allocate, set required members
/// - ns1__CreateRecurringPaymentsProfileResponseType* soap_new_set_ns1__CreateRecurringPaymentsProfileResponseType(soap*, ...) allocate, set all public members
/// - ns1__CreateRecurringPaymentsProfileResponseType::soap_default(soap*) default initialize members
/// - int soap_read_ns1__CreateRecurringPaymentsProfileResponseType(soap*, ns1__CreateRecurringPaymentsProfileResponseType*) deserialize from a stream
/// - int soap_write_ns1__CreateRecurringPaymentsProfileResponseType(soap*, ns1__CreateRecurringPaymentsProfileResponseType*) serialize to a stream
/// - ns1__CreateRecurringPaymentsProfileResponseType* ns1__CreateRecurringPaymentsProfileResponseType::soap_dup(soap*) returns deep copy of ns1__CreateRecurringPaymentsProfileResponseType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__CreateRecurringPaymentsProfileResponseType::soap_del() deep deletes ns1__CreateRecurringPaymentsProfileResponseType data members, use only after ns1__CreateRecurringPaymentsProfileResponseType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__CreateRecurringPaymentsProfileResponseType : public ns3__AbstractResponseType
{ public:
/*  INHERITED FROM ns3__AbstractResponseType:
/// <PRE><BLOCKQUOTE>
///   This value represents the date and time (GMT) when the response was generated by a service provider (as a result of processing of a request).
/// </BLOCKQUOTE></PRE>
/// Element "Timestamp" of XSD type xs:dateTime.
    time_t*                              Timestamp                      0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Application level acknowledgement code.
/// </BLOCKQUOTE></PRE>
/// Element "Ack" of XSD type "urn:ebay:apis:eBLBaseComponents":AckCodeType.
    enum ns3__AckCodeType                Ack                            1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   CorrelationID may be used optionally with an application level acknowledgement.
/// </BLOCKQUOTE></PRE>
/// Element "CorrelationID" of XSD type xs:string.
    std::string*                         CorrelationID                  0;	///< Optional element.
/// Vector of ns3__ErrorType* of length 0..unbounded.
    std::vector<ns3__ErrorType*        > Errors                         0;	///< Elements.
/// <PRE><BLOCKQUOTE>
///   This refers to the version of the response payload schema.
/// </BLOCKQUOTE></PRE>
/// Element "Version" of XSD type xs:string.
    std::string                          Version                        1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   This refers to the specific software build that was used in the deployment for processing the request and generating the response.
/// </BLOCKQUOTE></PRE>
/// Element "Build" of XSD type xs:string.
    std::string                          Build                          1;	///< Required element.
/// @todo <any namespace="##local" minOccurs="0">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
    _XML                                 __any                         0;	///< Catch any element content in XML string.
    END OF INHERITED FROM ns3__AbstractResponseType */
/// Element reference "urn:ebay:api:PayPalAPI:""urn:ebay:apis:eBLBaseComponents":CreateRecurringPaymentsProfileResponseDetails.
    ns3__CreateRecurringPaymentsProfileResponseDetailsType*  ns3__CreateRecurringPaymentsProfileResponseDetails 1;	///< Required element.
};

/// @brief "urn:ebay:api:PayPalAPI":GetRecurringPaymentsProfileDetailsRequestType is a complexType with complexContent extension of XSD type "urn:ebay:apis:eBLBaseComponents":AbstractRequestType.
///
/// class ns1__GetRecurringPaymentsProfileDetailsRequestType operations:
/// - ns1__GetRecurringPaymentsProfileDetailsRequestType* soap_new_ns1__GetRecurringPaymentsProfileDetailsRequestType(soap*) allocate and default initialize
/// - ns1__GetRecurringPaymentsProfileDetailsRequestType* soap_new_ns1__GetRecurringPaymentsProfileDetailsRequestType(soap*, int num) allocate array and default initialize values
/// - ns1__GetRecurringPaymentsProfileDetailsRequestType* soap_new_req_ns1__GetRecurringPaymentsProfileDetailsRequestType(soap*, ...) allocate, set required members
/// - ns1__GetRecurringPaymentsProfileDetailsRequestType* soap_new_set_ns1__GetRecurringPaymentsProfileDetailsRequestType(soap*, ...) allocate, set all public members
/// - ns1__GetRecurringPaymentsProfileDetailsRequestType::soap_default(soap*) default initialize members
/// - int soap_read_ns1__GetRecurringPaymentsProfileDetailsRequestType(soap*, ns1__GetRecurringPaymentsProfileDetailsRequestType*) deserialize from a stream
/// - int soap_write_ns1__GetRecurringPaymentsProfileDetailsRequestType(soap*, ns1__GetRecurringPaymentsProfileDetailsRequestType*) serialize to a stream
/// - ns1__GetRecurringPaymentsProfileDetailsRequestType* ns1__GetRecurringPaymentsProfileDetailsRequestType::soap_dup(soap*) returns deep copy of ns1__GetRecurringPaymentsProfileDetailsRequestType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__GetRecurringPaymentsProfileDetailsRequestType::soap_del() deep deletes ns1__GetRecurringPaymentsProfileDetailsRequestType data members, use only after ns1__GetRecurringPaymentsProfileDetailsRequestType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__GetRecurringPaymentsProfileDetailsRequestType : public ns3__AbstractRequestType
{ public:
/*  INHERITED FROM ns3__AbstractRequestType:
/// <PRE><BLOCKQUOTE>
///   This specifies the required detail level that is needed by a client application pertaining to
///   a particular data component (e.g., Item, Transaction, etc.). The detail level is specified in
///   the DetailLevelCodeType which has all the enumerated values of the detail level for each component.
/// </BLOCKQUOTE></PRE>
/// Vector of enum ns3__DetailLevelCodeType of length 0..unbounded.
    std::vector<enum ns3__DetailLevelCodeType> DetailLevel                    0;	///< Elements.
/// <PRE><BLOCKQUOTE>
///   This should be the standard RFC 3066 language identification tag, e.g., en_US.
/// </BLOCKQUOTE></PRE>
/// Element "ErrorLanguage" of XSD type xs:string.
    std::string*                         ErrorLanguage                  0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   This refers to the version of the request payload schema.
/// </BLOCKQUOTE></PRE>
/// Element "Version" of XSD type xs:string.
    std::string                          Version                        1;	///< Required element.
/// @todo <any namespace="##local" minOccurs="0">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
    _XML                                 __any                         0;	///< Catch any element content in XML string.
    END OF INHERITED FROM ns3__AbstractRequestType */

/// </BLOCKQUOTE></PRE>
/// Element "ProfileID" of XSD type xs:string.
    std::string                          ProfileID                      1;	///< Required element.
};

/// @brief "urn:ebay:api:PayPalAPI":GetRecurringPaymentsProfileDetailsResponseType is a complexType with complexContent extension of XSD type "urn:ebay:apis:eBLBaseComponents":AbstractResponseType.
///
/// class ns1__GetRecurringPaymentsProfileDetailsResponseType operations:
/// - ns1__GetRecurringPaymentsProfileDetailsResponseType* soap_new_ns1__GetRecurringPaymentsProfileDetailsResponseType(soap*) allocate and default initialize
/// - ns1__GetRecurringPaymentsProfileDetailsResponseType* soap_new_ns1__GetRecurringPaymentsProfileDetailsResponseType(soap*, int num) allocate array and default initialize values
/// - ns1__GetRecurringPaymentsProfileDetailsResponseType* soap_new_req_ns1__GetRecurringPaymentsProfileDetailsResponseType(soap*, ...) allocate, set required members
/// - ns1__GetRecurringPaymentsProfileDetailsResponseType* soap_new_set_ns1__GetRecurringPaymentsProfileDetailsResponseType(soap*, ...) allocate, set all public members
/// - ns1__GetRecurringPaymentsProfileDetailsResponseType::soap_default(soap*) default initialize members
/// - int soap_read_ns1__GetRecurringPaymentsProfileDetailsResponseType(soap*, ns1__GetRecurringPaymentsProfileDetailsResponseType*) deserialize from a stream
/// - int soap_write_ns1__GetRecurringPaymentsProfileDetailsResponseType(soap*, ns1__GetRecurringPaymentsProfileDetailsResponseType*) serialize to a stream
/// - ns1__GetRecurringPaymentsProfileDetailsResponseType* ns1__GetRecurringPaymentsProfileDetailsResponseType::soap_dup(soap*) returns deep copy of ns1__GetRecurringPaymentsProfileDetailsResponseType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__GetRecurringPaymentsProfileDetailsResponseType::soap_del() deep deletes ns1__GetRecurringPaymentsProfileDetailsResponseType data members, use only after ns1__GetRecurringPaymentsProfileDetailsResponseType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__GetRecurringPaymentsProfileDetailsResponseType : public ns3__AbstractResponseType
{ public:
/*  INHERITED FROM ns3__AbstractResponseType:
/// <PRE><BLOCKQUOTE>
///   This value represents the date and time (GMT) when the response was generated by a service provider (as a result of processing of a request).
/// </BLOCKQUOTE></PRE>
/// Element "Timestamp" of XSD type xs:dateTime.
    time_t*                              Timestamp                      0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Application level acknowledgement code.
/// </BLOCKQUOTE></PRE>
/// Element "Ack" of XSD type "urn:ebay:apis:eBLBaseComponents":AckCodeType.
    enum ns3__AckCodeType                Ack                            1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   CorrelationID may be used optionally with an application level acknowledgement.
/// </BLOCKQUOTE></PRE>
/// Element "CorrelationID" of XSD type xs:string.
    std::string*                         CorrelationID                  0;	///< Optional element.
/// Vector of ns3__ErrorType* of length 0..unbounded.
    std::vector<ns3__ErrorType*        > Errors                         0;	///< Elements.
/// <PRE><BLOCKQUOTE>
///   This refers to the version of the response payload schema.
/// </BLOCKQUOTE></PRE>
/// Element "Version" of XSD type xs:string.
    std::string                          Version                        1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   This refers to the specific software build that was used in the deployment for processing the request and generating the response.
/// </BLOCKQUOTE></PRE>
/// Element "Build" of XSD type xs:string.
    std::string                          Build                          1;	///< Required element.
/// @todo <any namespace="##local" minOccurs="0">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
    _XML                                 __any                         0;	///< Catch any element content in XML string.
    END OF INHERITED FROM ns3__AbstractResponseType */
/// Element reference "urn:ebay:api:PayPalAPI:""urn:ebay:apis:eBLBaseComponents":GetRecurringPaymentsProfileDetailsResponseDetails.
    ns3__GetRecurringPaymentsProfileDetailsResponseDetailsType*  ns3__GetRecurringPaymentsProfileDetailsResponseDetails 1;	///< Required element.
};

/// @brief "urn:ebay:api:PayPalAPI":ManageRecurringPaymentsProfileStatusRequestType is a complexType with complexContent extension of XSD type "urn:ebay:apis:eBLBaseComponents":AbstractRequestType.
///
/// class ns1__ManageRecurringPaymentsProfileStatusRequestType operations:
/// - ns1__ManageRecurringPaymentsProfileStatusRequestType* soap_new_ns1__ManageRecurringPaymentsProfileStatusRequestType(soap*) allocate and default initialize
/// - ns1__ManageRecurringPaymentsProfileStatusRequestType* soap_new_ns1__ManageRecurringPaymentsProfileStatusRequestType(soap*, int num) allocate array and default initialize values
/// - ns1__ManageRecurringPaymentsProfileStatusRequestType* soap_new_req_ns1__ManageRecurringPaymentsProfileStatusRequestType(soap*, ...) allocate, set required members
/// - ns1__ManageRecurringPaymentsProfileStatusRequestType* soap_new_set_ns1__ManageRecurringPaymentsProfileStatusRequestType(soap*, ...) allocate, set all public members
/// - ns1__ManageRecurringPaymentsProfileStatusRequestType::soap_default(soap*) default initialize members
/// - int soap_read_ns1__ManageRecurringPaymentsProfileStatusRequestType(soap*, ns1__ManageRecurringPaymentsProfileStatusRequestType*) deserialize from a stream
/// - int soap_write_ns1__ManageRecurringPaymentsProfileStatusRequestType(soap*, ns1__ManageRecurringPaymentsProfileStatusRequestType*) serialize to a stream
/// - ns1__ManageRecurringPaymentsProfileStatusRequestType* ns1__ManageRecurringPaymentsProfileStatusRequestType::soap_dup(soap*) returns deep copy of ns1__ManageRecurringPaymentsProfileStatusRequestType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__ManageRecurringPaymentsProfileStatusRequestType::soap_del() deep deletes ns1__ManageRecurringPaymentsProfileStatusRequestType data members, use only after ns1__ManageRecurringPaymentsProfileStatusRequestType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__ManageRecurringPaymentsProfileStatusRequestType : public ns3__AbstractRequestType
{ public:
/*  INHERITED FROM ns3__AbstractRequestType:
/// <PRE><BLOCKQUOTE>
///   This specifies the required detail level that is needed by a client application pertaining to
///   a particular data component (e.g., Item, Transaction, etc.). The detail level is specified in
///   the DetailLevelCodeType which has all the enumerated values of the detail level for each component.
/// </BLOCKQUOTE></PRE>
/// Vector of enum ns3__DetailLevelCodeType of length 0..unbounded.
    std::vector<enum ns3__DetailLevelCodeType> DetailLevel                    0;	///< Elements.
/// <PRE><BLOCKQUOTE>
///   This should be the standard RFC 3066 language identification tag, e.g., en_US.
/// </BLOCKQUOTE></PRE>
/// Element "ErrorLanguage" of XSD type xs:string.
    std::string*                         ErrorLanguage                  0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   This refers to the version of the request payload schema.
/// </BLOCKQUOTE></PRE>
/// Element "Version" of XSD type xs:string.
    std::string                          Version                        1;	///< Required element.
/// @todo <any namespace="##local" minOccurs="0">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
    _XML                                 __any                         0;	///< Catch any element content in XML string.
    END OF INHERITED FROM ns3__AbstractRequestType */
/// Element reference "urn:ebay:api:PayPalAPI:""urn:ebay:apis:eBLBaseComponents":ManageRecurringPaymentsProfileStatusRequestDetails.
    ns3__ManageRecurringPaymentsProfileStatusRequestDetailsType*  ns3__ManageRecurringPaymentsProfileStatusRequestDetails 1;	///< Required element.
};

/// @brief "urn:ebay:api:PayPalAPI":ManageRecurringPaymentsProfileStatusResponseType is a complexType with complexContent extension of XSD type "urn:ebay:apis:eBLBaseComponents":AbstractResponseType.
///
/// class ns1__ManageRecurringPaymentsProfileStatusResponseType operations:
/// - ns1__ManageRecurringPaymentsProfileStatusResponseType* soap_new_ns1__ManageRecurringPaymentsProfileStatusResponseType(soap*) allocate and default initialize
/// - ns1__ManageRecurringPaymentsProfileStatusResponseType* soap_new_ns1__ManageRecurringPaymentsProfileStatusResponseType(soap*, int num) allocate array and default initialize values
/// - ns1__ManageRecurringPaymentsProfileStatusResponseType* soap_new_req_ns1__ManageRecurringPaymentsProfileStatusResponseType(soap*, ...) allocate, set required members
/// - ns1__ManageRecurringPaymentsProfileStatusResponseType* soap_new_set_ns1__ManageRecurringPaymentsProfileStatusResponseType(soap*, ...) allocate, set all public members
/// - ns1__ManageRecurringPaymentsProfileStatusResponseType::soap_default(soap*) default initialize members
/// - int soap_read_ns1__ManageRecurringPaymentsProfileStatusResponseType(soap*, ns1__ManageRecurringPaymentsProfileStatusResponseType*) deserialize from a stream
/// - int soap_write_ns1__ManageRecurringPaymentsProfileStatusResponseType(soap*, ns1__ManageRecurringPaymentsProfileStatusResponseType*) serialize to a stream
/// - ns1__ManageRecurringPaymentsProfileStatusResponseType* ns1__ManageRecurringPaymentsProfileStatusResponseType::soap_dup(soap*) returns deep copy of ns1__ManageRecurringPaymentsProfileStatusResponseType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__ManageRecurringPaymentsProfileStatusResponseType::soap_del() deep deletes ns1__ManageRecurringPaymentsProfileStatusResponseType data members, use only after ns1__ManageRecurringPaymentsProfileStatusResponseType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__ManageRecurringPaymentsProfileStatusResponseType : public ns3__AbstractResponseType
{ public:
/*  INHERITED FROM ns3__AbstractResponseType:
/// <PRE><BLOCKQUOTE>
///   This value represents the date and time (GMT) when the response was generated by a service provider (as a result of processing of a request).
/// </BLOCKQUOTE></PRE>
/// Element "Timestamp" of XSD type xs:dateTime.
    time_t*                              Timestamp                      0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Application level acknowledgement code.
/// </BLOCKQUOTE></PRE>
/// Element "Ack" of XSD type "urn:ebay:apis:eBLBaseComponents":AckCodeType.
    enum ns3__AckCodeType                Ack                            1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   CorrelationID may be used optionally with an application level acknowledgement.
/// </BLOCKQUOTE></PRE>
/// Element "CorrelationID" of XSD type xs:string.
    std::string*                         CorrelationID                  0;	///< Optional element.
/// Vector of ns3__ErrorType* of length 0..unbounded.
    std::vector<ns3__ErrorType*        > Errors                         0;	///< Elements.
/// <PRE><BLOCKQUOTE>
///   This refers to the version of the response payload schema.
/// </BLOCKQUOTE></PRE>
/// Element "Version" of XSD type xs:string.
    std::string                          Version                        1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   This refers to the specific software build that was used in the deployment for processing the request and generating the response.
/// </BLOCKQUOTE></PRE>
/// Element "Build" of XSD type xs:string.
    std::string                          Build                          1;	///< Required element.
/// @todo <any namespace="##local" minOccurs="0">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
    _XML                                 __any                         0;	///< Catch any element content in XML string.
    END OF INHERITED FROM ns3__AbstractResponseType */
/// Element reference "urn:ebay:api:PayPalAPI:""urn:ebay:apis:eBLBaseComponents":ManageRecurringPaymentsProfileStatusResponseDetails.
    ns3__ManageRecurringPaymentsProfileStatusResponseDetailsType*  ns3__ManageRecurringPaymentsProfileStatusResponseDetails 1;	///< Required element.
};

/// @brief "urn:ebay:api:PayPalAPI":BillOutstandingAmountRequestType is a complexType with complexContent extension of XSD type "urn:ebay:apis:eBLBaseComponents":AbstractRequestType.
///
/// class ns1__BillOutstandingAmountRequestType operations:
/// - ns1__BillOutstandingAmountRequestType* soap_new_ns1__BillOutstandingAmountRequestType(soap*) allocate and default initialize
/// - ns1__BillOutstandingAmountRequestType* soap_new_ns1__BillOutstandingAmountRequestType(soap*, int num) allocate array and default initialize values
/// - ns1__BillOutstandingAmountRequestType* soap_new_req_ns1__BillOutstandingAmountRequestType(soap*, ...) allocate, set required members
/// - ns1__BillOutstandingAmountRequestType* soap_new_set_ns1__BillOutstandingAmountRequestType(soap*, ...) allocate, set all public members
/// - ns1__BillOutstandingAmountRequestType::soap_default(soap*) default initialize members
/// - int soap_read_ns1__BillOutstandingAmountRequestType(soap*, ns1__BillOutstandingAmountRequestType*) deserialize from a stream
/// - int soap_write_ns1__BillOutstandingAmountRequestType(soap*, ns1__BillOutstandingAmountRequestType*) serialize to a stream
/// - ns1__BillOutstandingAmountRequestType* ns1__BillOutstandingAmountRequestType::soap_dup(soap*) returns deep copy of ns1__BillOutstandingAmountRequestType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__BillOutstandingAmountRequestType::soap_del() deep deletes ns1__BillOutstandingAmountRequestType data members, use only after ns1__BillOutstandingAmountRequestType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__BillOutstandingAmountRequestType : public ns3__AbstractRequestType
{ public:
/*  INHERITED FROM ns3__AbstractRequestType:
/// <PRE><BLOCKQUOTE>
///   This specifies the required detail level that is needed by a client application pertaining to
///   a particular data component (e.g., Item, Transaction, etc.). The detail level is specified in
///   the DetailLevelCodeType which has all the enumerated values of the detail level for each component.
/// </BLOCKQUOTE></PRE>
/// Vector of enum ns3__DetailLevelCodeType of length 0..unbounded.
    std::vector<enum ns3__DetailLevelCodeType> DetailLevel                    0;	///< Elements.
/// <PRE><BLOCKQUOTE>
///   This should be the standard RFC 3066 language identification tag, e.g., en_US.
/// </BLOCKQUOTE></PRE>
/// Element "ErrorLanguage" of XSD type xs:string.
    std::string*                         ErrorLanguage                  0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   This refers to the version of the request payload schema.
/// </BLOCKQUOTE></PRE>
/// Element "Version" of XSD type xs:string.
    std::string                          Version                        1;	///< Required element.
/// @todo <any namespace="##local" minOccurs="0">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
    _XML                                 __any                         0;	///< Catch any element content in XML string.
    END OF INHERITED FROM ns3__AbstractRequestType */
/// Element reference "urn:ebay:api:PayPalAPI:""urn:ebay:apis:eBLBaseComponents":BillOutstandingAmountRequestDetails.
    ns3__BillOutstandingAmountRequestDetailsType*  ns3__BillOutstandingAmountRequestDetails 1;	///< Required element.
};

/// @brief "urn:ebay:api:PayPalAPI":BillOutstandingAmountResponseType is a complexType with complexContent extension of XSD type "urn:ebay:apis:eBLBaseComponents":AbstractResponseType.
///
/// class ns1__BillOutstandingAmountResponseType operations:
/// - ns1__BillOutstandingAmountResponseType* soap_new_ns1__BillOutstandingAmountResponseType(soap*) allocate and default initialize
/// - ns1__BillOutstandingAmountResponseType* soap_new_ns1__BillOutstandingAmountResponseType(soap*, int num) allocate array and default initialize values
/// - ns1__BillOutstandingAmountResponseType* soap_new_req_ns1__BillOutstandingAmountResponseType(soap*, ...) allocate, set required members
/// - ns1__BillOutstandingAmountResponseType* soap_new_set_ns1__BillOutstandingAmountResponseType(soap*, ...) allocate, set all public members
/// - ns1__BillOutstandingAmountResponseType::soap_default(soap*) default initialize members
/// - int soap_read_ns1__BillOutstandingAmountResponseType(soap*, ns1__BillOutstandingAmountResponseType*) deserialize from a stream
/// - int soap_write_ns1__BillOutstandingAmountResponseType(soap*, ns1__BillOutstandingAmountResponseType*) serialize to a stream
/// - ns1__BillOutstandingAmountResponseType* ns1__BillOutstandingAmountResponseType::soap_dup(soap*) returns deep copy of ns1__BillOutstandingAmountResponseType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__BillOutstandingAmountResponseType::soap_del() deep deletes ns1__BillOutstandingAmountResponseType data members, use only after ns1__BillOutstandingAmountResponseType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__BillOutstandingAmountResponseType : public ns3__AbstractResponseType
{ public:
/*  INHERITED FROM ns3__AbstractResponseType:
/// <PRE><BLOCKQUOTE>
///   This value represents the date and time (GMT) when the response was generated by a service provider (as a result of processing of a request).
/// </BLOCKQUOTE></PRE>
/// Element "Timestamp" of XSD type xs:dateTime.
    time_t*                              Timestamp                      0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Application level acknowledgement code.
/// </BLOCKQUOTE></PRE>
/// Element "Ack" of XSD type "urn:ebay:apis:eBLBaseComponents":AckCodeType.
    enum ns3__AckCodeType                Ack                            1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   CorrelationID may be used optionally with an application level acknowledgement.
/// </BLOCKQUOTE></PRE>
/// Element "CorrelationID" of XSD type xs:string.
    std::string*                         CorrelationID                  0;	///< Optional element.
/// Vector of ns3__ErrorType* of length 0..unbounded.
    std::vector<ns3__ErrorType*        > Errors                         0;	///< Elements.
/// <PRE><BLOCKQUOTE>
///   This refers to the version of the response payload schema.
/// </BLOCKQUOTE></PRE>
/// Element "Version" of XSD type xs:string.
    std::string                          Version                        1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   This refers to the specific software build that was used in the deployment for processing the request and generating the response.
/// </BLOCKQUOTE></PRE>
/// Element "Build" of XSD type xs:string.
    std::string                          Build                          1;	///< Required element.
/// @todo <any namespace="##local" minOccurs="0">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
    _XML                                 __any                         0;	///< Catch any element content in XML string.
    END OF INHERITED FROM ns3__AbstractResponseType */
/// Element reference "urn:ebay:api:PayPalAPI:""urn:ebay:apis:eBLBaseComponents":BillOutstandingAmountResponseDetails.
    ns3__BillOutstandingAmountResponseDetailsType*  ns3__BillOutstandingAmountResponseDetails 1;	///< Required element.
};

/// @brief "urn:ebay:api:PayPalAPI":UpdateRecurringPaymentsProfileRequestType is a complexType with complexContent extension of XSD type "urn:ebay:apis:eBLBaseComponents":AbstractRequestType.
///
/// class ns1__UpdateRecurringPaymentsProfileRequestType operations:
/// - ns1__UpdateRecurringPaymentsProfileRequestType* soap_new_ns1__UpdateRecurringPaymentsProfileRequestType(soap*) allocate and default initialize
/// - ns1__UpdateRecurringPaymentsProfileRequestType* soap_new_ns1__UpdateRecurringPaymentsProfileRequestType(soap*, int num) allocate array and default initialize values
/// - ns1__UpdateRecurringPaymentsProfileRequestType* soap_new_req_ns1__UpdateRecurringPaymentsProfileRequestType(soap*, ...) allocate, set required members
/// - ns1__UpdateRecurringPaymentsProfileRequestType* soap_new_set_ns1__UpdateRecurringPaymentsProfileRequestType(soap*, ...) allocate, set all public members
/// - ns1__UpdateRecurringPaymentsProfileRequestType::soap_default(soap*) default initialize members
/// - int soap_read_ns1__UpdateRecurringPaymentsProfileRequestType(soap*, ns1__UpdateRecurringPaymentsProfileRequestType*) deserialize from a stream
/// - int soap_write_ns1__UpdateRecurringPaymentsProfileRequestType(soap*, ns1__UpdateRecurringPaymentsProfileRequestType*) serialize to a stream
/// - ns1__UpdateRecurringPaymentsProfileRequestType* ns1__UpdateRecurringPaymentsProfileRequestType::soap_dup(soap*) returns deep copy of ns1__UpdateRecurringPaymentsProfileRequestType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__UpdateRecurringPaymentsProfileRequestType::soap_del() deep deletes ns1__UpdateRecurringPaymentsProfileRequestType data members, use only after ns1__UpdateRecurringPaymentsProfileRequestType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__UpdateRecurringPaymentsProfileRequestType : public ns3__AbstractRequestType
{ public:
/*  INHERITED FROM ns3__AbstractRequestType:
/// <PRE><BLOCKQUOTE>
///   This specifies the required detail level that is needed by a client application pertaining to
///   a particular data component (e.g., Item, Transaction, etc.). The detail level is specified in
///   the DetailLevelCodeType which has all the enumerated values of the detail level for each component.
/// </BLOCKQUOTE></PRE>
/// Vector of enum ns3__DetailLevelCodeType of length 0..unbounded.
    std::vector<enum ns3__DetailLevelCodeType> DetailLevel                    0;	///< Elements.
/// <PRE><BLOCKQUOTE>
///   This should be the standard RFC 3066 language identification tag, e.g., en_US.
/// </BLOCKQUOTE></PRE>
/// Element "ErrorLanguage" of XSD type xs:string.
    std::string*                         ErrorLanguage                  0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   This refers to the version of the request payload schema.
/// </BLOCKQUOTE></PRE>
/// Element "Version" of XSD type xs:string.
    std::string                          Version                        1;	///< Required element.
/// @todo <any namespace="##local" minOccurs="0">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
    _XML                                 __any                         0;	///< Catch any element content in XML string.
    END OF INHERITED FROM ns3__AbstractRequestType */
/// Element reference "urn:ebay:api:PayPalAPI:""urn:ebay:apis:eBLBaseComponents":UpdateRecurringPaymentsProfileRequestDetails.
    ns3__UpdateRecurringPaymentsProfileRequestDetailsType*  ns3__UpdateRecurringPaymentsProfileRequestDetails 1;	///< Required element.
};

/// @brief "urn:ebay:api:PayPalAPI":UpdateRecurringPaymentsProfileResponseType is a complexType with complexContent extension of XSD type "urn:ebay:apis:eBLBaseComponents":AbstractResponseType.
///
/// class ns1__UpdateRecurringPaymentsProfileResponseType operations:
/// - ns1__UpdateRecurringPaymentsProfileResponseType* soap_new_ns1__UpdateRecurringPaymentsProfileResponseType(soap*) allocate and default initialize
/// - ns1__UpdateRecurringPaymentsProfileResponseType* soap_new_ns1__UpdateRecurringPaymentsProfileResponseType(soap*, int num) allocate array and default initialize values
/// - ns1__UpdateRecurringPaymentsProfileResponseType* soap_new_req_ns1__UpdateRecurringPaymentsProfileResponseType(soap*, ...) allocate, set required members
/// - ns1__UpdateRecurringPaymentsProfileResponseType* soap_new_set_ns1__UpdateRecurringPaymentsProfileResponseType(soap*, ...) allocate, set all public members
/// - ns1__UpdateRecurringPaymentsProfileResponseType::soap_default(soap*) default initialize members
/// - int soap_read_ns1__UpdateRecurringPaymentsProfileResponseType(soap*, ns1__UpdateRecurringPaymentsProfileResponseType*) deserialize from a stream
/// - int soap_write_ns1__UpdateRecurringPaymentsProfileResponseType(soap*, ns1__UpdateRecurringPaymentsProfileResponseType*) serialize to a stream
/// - ns1__UpdateRecurringPaymentsProfileResponseType* ns1__UpdateRecurringPaymentsProfileResponseType::soap_dup(soap*) returns deep copy of ns1__UpdateRecurringPaymentsProfileResponseType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__UpdateRecurringPaymentsProfileResponseType::soap_del() deep deletes ns1__UpdateRecurringPaymentsProfileResponseType data members, use only after ns1__UpdateRecurringPaymentsProfileResponseType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__UpdateRecurringPaymentsProfileResponseType : public ns3__AbstractResponseType
{ public:
/*  INHERITED FROM ns3__AbstractResponseType:
/// <PRE><BLOCKQUOTE>
///   This value represents the date and time (GMT) when the response was generated by a service provider (as a result of processing of a request).
/// </BLOCKQUOTE></PRE>
/// Element "Timestamp" of XSD type xs:dateTime.
    time_t*                              Timestamp                      0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Application level acknowledgement code.
/// </BLOCKQUOTE></PRE>
/// Element "Ack" of XSD type "urn:ebay:apis:eBLBaseComponents":AckCodeType.
    enum ns3__AckCodeType                Ack                            1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   CorrelationID may be used optionally with an application level acknowledgement.
/// </BLOCKQUOTE></PRE>
/// Element "CorrelationID" of XSD type xs:string.
    std::string*                         CorrelationID                  0;	///< Optional element.
/// Vector of ns3__ErrorType* of length 0..unbounded.
    std::vector<ns3__ErrorType*        > Errors                         0;	///< Elements.
/// <PRE><BLOCKQUOTE>
///   This refers to the version of the response payload schema.
/// </BLOCKQUOTE></PRE>
/// Element "Version" of XSD type xs:string.
    std::string                          Version                        1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   This refers to the specific software build that was used in the deployment for processing the request and generating the response.
/// </BLOCKQUOTE></PRE>
/// Element "Build" of XSD type xs:string.
    std::string                          Build                          1;	///< Required element.
/// @todo <any namespace="##local" minOccurs="0">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
    _XML                                 __any                         0;	///< Catch any element content in XML string.
    END OF INHERITED FROM ns3__AbstractResponseType */
/// Element reference "urn:ebay:api:PayPalAPI:""urn:ebay:apis:eBLBaseComponents":UpdateRecurringPaymentsProfileResponseDetails.
    ns3__UpdateRecurringPaymentsProfileResponseDetailsType*  ns3__UpdateRecurringPaymentsProfileResponseDetails 1;	///< Required element.
};

/// @brief "urn:ebay:api:PayPalAPI":GetPalDetailsRequestType is a complexType with complexContent extension of XSD type "urn:ebay:apis:eBLBaseComponents":AbstractRequestType.
///
/// class ns1__GetPalDetailsRequestType operations:
/// - ns1__GetPalDetailsRequestType* soap_new_ns1__GetPalDetailsRequestType(soap*) allocate and default initialize
/// - ns1__GetPalDetailsRequestType* soap_new_ns1__GetPalDetailsRequestType(soap*, int num) allocate array and default initialize values
/// - ns1__GetPalDetailsRequestType* soap_new_req_ns1__GetPalDetailsRequestType(soap*, ...) allocate, set required members
/// - ns1__GetPalDetailsRequestType* soap_new_set_ns1__GetPalDetailsRequestType(soap*, ...) allocate, set all public members
/// - ns1__GetPalDetailsRequestType::soap_default(soap*) default initialize members
/// - int soap_read_ns1__GetPalDetailsRequestType(soap*, ns1__GetPalDetailsRequestType*) deserialize from a stream
/// - int soap_write_ns1__GetPalDetailsRequestType(soap*, ns1__GetPalDetailsRequestType*) serialize to a stream
/// - ns1__GetPalDetailsRequestType* ns1__GetPalDetailsRequestType::soap_dup(soap*) returns deep copy of ns1__GetPalDetailsRequestType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__GetPalDetailsRequestType::soap_del() deep deletes ns1__GetPalDetailsRequestType data members, use only after ns1__GetPalDetailsRequestType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__GetPalDetailsRequestType : public ns3__AbstractRequestType
{ public:
/*  INHERITED FROM ns3__AbstractRequestType:
/// <PRE><BLOCKQUOTE>
///   This specifies the required detail level that is needed by a client application pertaining to
///   a particular data component (e.g., Item, Transaction, etc.). The detail level is specified in
///   the DetailLevelCodeType which has all the enumerated values of the detail level for each component.
/// </BLOCKQUOTE></PRE>
/// Vector of enum ns3__DetailLevelCodeType of length 0..unbounded.
    std::vector<enum ns3__DetailLevelCodeType> DetailLevel                    0;	///< Elements.
/// <PRE><BLOCKQUOTE>
///   This should be the standard RFC 3066 language identification tag, e.g., en_US.
/// </BLOCKQUOTE></PRE>
/// Element "ErrorLanguage" of XSD type xs:string.
    std::string*                         ErrorLanguage                  0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   This refers to the version of the request payload schema.
/// </BLOCKQUOTE></PRE>
/// Element "Version" of XSD type xs:string.
    std::string                          Version                        1;	///< Required element.
/// @todo <any namespace="##local" minOccurs="0">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
    _XML                                 __any                         0;	///< Catch any element content in XML string.
    END OF INHERITED FROM ns3__AbstractRequestType */
};

/// @brief "urn:ebay:api:PayPalAPI":GetPalDetailsResponseType is a complexType with complexContent extension of XSD type "urn:ebay:apis:eBLBaseComponents":AbstractResponseType.
///
/// class ns1__GetPalDetailsResponseType operations:
/// - ns1__GetPalDetailsResponseType* soap_new_ns1__GetPalDetailsResponseType(soap*) allocate and default initialize
/// - ns1__GetPalDetailsResponseType* soap_new_ns1__GetPalDetailsResponseType(soap*, int num) allocate array and default initialize values
/// - ns1__GetPalDetailsResponseType* soap_new_req_ns1__GetPalDetailsResponseType(soap*, ...) allocate, set required members
/// - ns1__GetPalDetailsResponseType* soap_new_set_ns1__GetPalDetailsResponseType(soap*, ...) allocate, set all public members
/// - ns1__GetPalDetailsResponseType::soap_default(soap*) default initialize members
/// - int soap_read_ns1__GetPalDetailsResponseType(soap*, ns1__GetPalDetailsResponseType*) deserialize from a stream
/// - int soap_write_ns1__GetPalDetailsResponseType(soap*, ns1__GetPalDetailsResponseType*) serialize to a stream
/// - ns1__GetPalDetailsResponseType* ns1__GetPalDetailsResponseType::soap_dup(soap*) returns deep copy of ns1__GetPalDetailsResponseType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__GetPalDetailsResponseType::soap_del() deep deletes ns1__GetPalDetailsResponseType data members, use only after ns1__GetPalDetailsResponseType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__GetPalDetailsResponseType : public ns3__AbstractResponseType
{ public:
/*  INHERITED FROM ns3__AbstractResponseType:
/// <PRE><BLOCKQUOTE>
///   This value represents the date and time (GMT) when the response was generated by a service provider (as a result of processing of a request).
/// </BLOCKQUOTE></PRE>
/// Element "Timestamp" of XSD type xs:dateTime.
    time_t*                              Timestamp                      0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Application level acknowledgement code.
/// </BLOCKQUOTE></PRE>
/// Element "Ack" of XSD type "urn:ebay:apis:eBLBaseComponents":AckCodeType.
    enum ns3__AckCodeType                Ack                            1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   CorrelationID may be used optionally with an application level acknowledgement.
/// </BLOCKQUOTE></PRE>
/// Element "CorrelationID" of XSD type xs:string.
    std::string*                         CorrelationID                  0;	///< Optional element.
/// Vector of ns3__ErrorType* of length 0..unbounded.
    std::vector<ns3__ErrorType*        > Errors                         0;	///< Elements.
/// <PRE><BLOCKQUOTE>
///   This refers to the version of the response payload schema.
/// </BLOCKQUOTE></PRE>
/// Element "Version" of XSD type xs:string.
    std::string                          Version                        1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   This refers to the specific software build that was used in the deployment for processing the request and generating the response.
/// </BLOCKQUOTE></PRE>
/// Element "Build" of XSD type xs:string.
    std::string                          Build                          1;	///< Required element.
/// @todo <any namespace="##local" minOccurs="0">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
    _XML                                 __any                         0;	///< Catch any element content in XML string.
    END OF INHERITED FROM ns3__AbstractResponseType */
/// Element "Pal" of XSD type xs:string.
    std::string                          Pal                            1;	///< Required element.
/// Element "Locale" of XSD type xs:string.
    std::string                          Locale                         1;	///< Required element.
};

/// @brief "urn:ebay:api:PayPalAPI":ReverseTransactionRequestType is a complexType with complexContent extension of XSD type "urn:ebay:apis:eBLBaseComponents":AbstractRequestType.
///
/// class ns1__ReverseTransactionRequestType operations:
/// - ns1__ReverseTransactionRequestType* soap_new_ns1__ReverseTransactionRequestType(soap*) allocate and default initialize
/// - ns1__ReverseTransactionRequestType* soap_new_ns1__ReverseTransactionRequestType(soap*, int num) allocate array and default initialize values
/// - ns1__ReverseTransactionRequestType* soap_new_req_ns1__ReverseTransactionRequestType(soap*, ...) allocate, set required members
/// - ns1__ReverseTransactionRequestType* soap_new_set_ns1__ReverseTransactionRequestType(soap*, ...) allocate, set all public members
/// - ns1__ReverseTransactionRequestType::soap_default(soap*) default initialize members
/// - int soap_read_ns1__ReverseTransactionRequestType(soap*, ns1__ReverseTransactionRequestType*) deserialize from a stream
/// - int soap_write_ns1__ReverseTransactionRequestType(soap*, ns1__ReverseTransactionRequestType*) serialize to a stream
/// - ns1__ReverseTransactionRequestType* ns1__ReverseTransactionRequestType::soap_dup(soap*) returns deep copy of ns1__ReverseTransactionRequestType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__ReverseTransactionRequestType::soap_del() deep deletes ns1__ReverseTransactionRequestType data members, use only after ns1__ReverseTransactionRequestType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__ReverseTransactionRequestType : public ns3__AbstractRequestType
{ public:
/*  INHERITED FROM ns3__AbstractRequestType:
/// <PRE><BLOCKQUOTE>
///   This specifies the required detail level that is needed by a client application pertaining to
///   a particular data component (e.g., Item, Transaction, etc.). The detail level is specified in
///   the DetailLevelCodeType which has all the enumerated values of the detail level for each component.
/// </BLOCKQUOTE></PRE>
/// Vector of enum ns3__DetailLevelCodeType of length 0..unbounded.
    std::vector<enum ns3__DetailLevelCodeType> DetailLevel                    0;	///< Elements.
/// <PRE><BLOCKQUOTE>
///   This should be the standard RFC 3066 language identification tag, e.g., en_US.
/// </BLOCKQUOTE></PRE>
/// Element "ErrorLanguage" of XSD type xs:string.
    std::string*                         ErrorLanguage                  0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   This refers to the version of the request payload schema.
/// </BLOCKQUOTE></PRE>
/// Element "Version" of XSD type xs:string.
    std::string                          Version                        1;	///< Required element.
/// @todo <any namespace="##local" minOccurs="0">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
    _XML                                 __any                         0;	///< Catch any element content in XML string.
    END OF INHERITED FROM ns3__AbstractRequestType */
/// Element reference "urn:ebay:api:PayPalAPI:""urn:ebay:apis:eBLBaseComponents":ReverseTransactionRequestDetails.
    ns3__ReverseTransactionRequestDetailsType*  ns3__ReverseTransactionRequestDetails 1;	///< Required element.
};

/// @brief "urn:ebay:api:PayPalAPI":ReverseTransactionResponseType is a complexType with complexContent extension of XSD type "urn:ebay:apis:eBLBaseComponents":AbstractResponseType.
///
/// class ns1__ReverseTransactionResponseType operations:
/// - ns1__ReverseTransactionResponseType* soap_new_ns1__ReverseTransactionResponseType(soap*) allocate and default initialize
/// - ns1__ReverseTransactionResponseType* soap_new_ns1__ReverseTransactionResponseType(soap*, int num) allocate array and default initialize values
/// - ns1__ReverseTransactionResponseType* soap_new_req_ns1__ReverseTransactionResponseType(soap*, ...) allocate, set required members
/// - ns1__ReverseTransactionResponseType* soap_new_set_ns1__ReverseTransactionResponseType(soap*, ...) allocate, set all public members
/// - ns1__ReverseTransactionResponseType::soap_default(soap*) default initialize members
/// - int soap_read_ns1__ReverseTransactionResponseType(soap*, ns1__ReverseTransactionResponseType*) deserialize from a stream
/// - int soap_write_ns1__ReverseTransactionResponseType(soap*, ns1__ReverseTransactionResponseType*) serialize to a stream
/// - ns1__ReverseTransactionResponseType* ns1__ReverseTransactionResponseType::soap_dup(soap*) returns deep copy of ns1__ReverseTransactionResponseType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__ReverseTransactionResponseType::soap_del() deep deletes ns1__ReverseTransactionResponseType data members, use only after ns1__ReverseTransactionResponseType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__ReverseTransactionResponseType : public ns3__AbstractResponseType
{ public:
/*  INHERITED FROM ns3__AbstractResponseType:
/// <PRE><BLOCKQUOTE>
///   This value represents the date and time (GMT) when the response was generated by a service provider (as a result of processing of a request).
/// </BLOCKQUOTE></PRE>
/// Element "Timestamp" of XSD type xs:dateTime.
    time_t*                              Timestamp                      0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Application level acknowledgement code.
/// </BLOCKQUOTE></PRE>
/// Element "Ack" of XSD type "urn:ebay:apis:eBLBaseComponents":AckCodeType.
    enum ns3__AckCodeType                Ack                            1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   CorrelationID may be used optionally with an application level acknowledgement.
/// </BLOCKQUOTE></PRE>
/// Element "CorrelationID" of XSD type xs:string.
    std::string*                         CorrelationID                  0;	///< Optional element.
/// Vector of ns3__ErrorType* of length 0..unbounded.
    std::vector<ns3__ErrorType*        > Errors                         0;	///< Elements.
/// <PRE><BLOCKQUOTE>
///   This refers to the version of the response payload schema.
/// </BLOCKQUOTE></PRE>
/// Element "Version" of XSD type xs:string.
    std::string                          Version                        1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   This refers to the specific software build that was used in the deployment for processing the request and generating the response.
/// </BLOCKQUOTE></PRE>
/// Element "Build" of XSD type xs:string.
    std::string                          Build                          1;	///< Required element.
/// @todo <any namespace="##local" minOccurs="0">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
    _XML                                 __any                         0;	///< Catch any element content in XML string.
    END OF INHERITED FROM ns3__AbstractResponseType */
/// Element reference "urn:ebay:api:PayPalAPI:""urn:ebay:apis:eBLBaseComponents":ReverseTransactionResponseDetails.
    ns3__ReverseTransactionResponseDetailsType*  ns3__ReverseTransactionResponseDetails 1;	///< Required element.
};

/// @brief "urn:ebay:api:PayPalAPI":ExternalRememberMeOptOutRequestType is a complexType with complexContent extension of XSD type "urn:ebay:apis:eBLBaseComponents":AbstractRequestType.
///
/// class ns1__ExternalRememberMeOptOutRequestType operations:
/// - ns1__ExternalRememberMeOptOutRequestType* soap_new_ns1__ExternalRememberMeOptOutRequestType(soap*) allocate and default initialize
/// - ns1__ExternalRememberMeOptOutRequestType* soap_new_ns1__ExternalRememberMeOptOutRequestType(soap*, int num) allocate array and default initialize values
/// - ns1__ExternalRememberMeOptOutRequestType* soap_new_req_ns1__ExternalRememberMeOptOutRequestType(soap*, ...) allocate, set required members
/// - ns1__ExternalRememberMeOptOutRequestType* soap_new_set_ns1__ExternalRememberMeOptOutRequestType(soap*, ...) allocate, set all public members
/// - ns1__ExternalRememberMeOptOutRequestType::soap_default(soap*) default initialize members
/// - int soap_read_ns1__ExternalRememberMeOptOutRequestType(soap*, ns1__ExternalRememberMeOptOutRequestType*) deserialize from a stream
/// - int soap_write_ns1__ExternalRememberMeOptOutRequestType(soap*, ns1__ExternalRememberMeOptOutRequestType*) serialize to a stream
/// - ns1__ExternalRememberMeOptOutRequestType* ns1__ExternalRememberMeOptOutRequestType::soap_dup(soap*) returns deep copy of ns1__ExternalRememberMeOptOutRequestType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__ExternalRememberMeOptOutRequestType::soap_del() deep deletes ns1__ExternalRememberMeOptOutRequestType data members, use only after ns1__ExternalRememberMeOptOutRequestType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__ExternalRememberMeOptOutRequestType : public ns3__AbstractRequestType
{ public:
/*  INHERITED FROM ns3__AbstractRequestType:
/// <PRE><BLOCKQUOTE>
///   This specifies the required detail level that is needed by a client application pertaining to
///   a particular data component (e.g., Item, Transaction, etc.). The detail level is specified in
///   the DetailLevelCodeType which has all the enumerated values of the detail level for each component.
/// </BLOCKQUOTE></PRE>
/// Vector of enum ns3__DetailLevelCodeType of length 0..unbounded.
    std::vector<enum ns3__DetailLevelCodeType> DetailLevel                    0;	///< Elements.
/// <PRE><BLOCKQUOTE>
///   This should be the standard RFC 3066 language identification tag, e.g., en_US.
/// </BLOCKQUOTE></PRE>
/// Element "ErrorLanguage" of XSD type xs:string.
    std::string*                         ErrorLanguage                  0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   This refers to the version of the request payload schema.
/// </BLOCKQUOTE></PRE>
/// Element "Version" of XSD type xs:string.
    std::string                          Version                        1;	///< Required element.
/// @todo <any namespace="##local" minOccurs="0">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
    _XML                                 __any                         0;	///< Catch any element content in XML string.
    END OF INHERITED FROM ns3__AbstractRequestType */
/// <PRE><BLOCKQUOTE>
///   The merchant passes in the ExternalRememberMeID to identify the user to opt out. This is a 17-character
///   alphanumeric (encrypted) string that identifies the buyer's remembered login with a merchant and has
///   meaning only to the merchant.
///   <br/>
///   <br/>
///   <b>Required</b>
///   <br/>
///   <br/>
/// </BLOCKQUOTE></PRE>
/// Element "ExternalRememberMeID" of XSD type xs:string.
    std::string                          ExternalRememberMeID           1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   E-mail address or secure merchant account ID of merchant to associate with
///   external remember-me.
/// </BLOCKQUOTE></PRE>
/// Element "ExternalRememberMeOwnerDetails" of XSD type "urn:ebay:apis:eBLBaseComponents":ExternalRememberMeOwnerDetailsType.
    ns3__ExternalRememberMeOwnerDetailsType*  ExternalRememberMeOwnerDetails 0;	///< Optional element.
};

/// @brief "urn:ebay:api:PayPalAPI":ExternalRememberMeOptOutResponseType is a complexType with complexContent extension of XSD type "urn:ebay:apis:eBLBaseComponents":AbstractResponseType.
///
/// class ns1__ExternalRememberMeOptOutResponseType operations:
/// - ns1__ExternalRememberMeOptOutResponseType* soap_new_ns1__ExternalRememberMeOptOutResponseType(soap*) allocate and default initialize
/// - ns1__ExternalRememberMeOptOutResponseType* soap_new_ns1__ExternalRememberMeOptOutResponseType(soap*, int num) allocate array and default initialize values
/// - ns1__ExternalRememberMeOptOutResponseType* soap_new_req_ns1__ExternalRememberMeOptOutResponseType(soap*, ...) allocate, set required members
/// - ns1__ExternalRememberMeOptOutResponseType* soap_new_set_ns1__ExternalRememberMeOptOutResponseType(soap*, ...) allocate, set all public members
/// - ns1__ExternalRememberMeOptOutResponseType::soap_default(soap*) default initialize members
/// - int soap_read_ns1__ExternalRememberMeOptOutResponseType(soap*, ns1__ExternalRememberMeOptOutResponseType*) deserialize from a stream
/// - int soap_write_ns1__ExternalRememberMeOptOutResponseType(soap*, ns1__ExternalRememberMeOptOutResponseType*) serialize to a stream
/// - ns1__ExternalRememberMeOptOutResponseType* ns1__ExternalRememberMeOptOutResponseType::soap_dup(soap*) returns deep copy of ns1__ExternalRememberMeOptOutResponseType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__ExternalRememberMeOptOutResponseType::soap_del() deep deletes ns1__ExternalRememberMeOptOutResponseType data members, use only after ns1__ExternalRememberMeOptOutResponseType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__ExternalRememberMeOptOutResponseType : public ns3__AbstractResponseType
{ public:
/*  INHERITED FROM ns3__AbstractResponseType:
/// <PRE><BLOCKQUOTE>
///   This value represents the date and time (GMT) when the response was generated by a service provider (as a result of processing of a request).
/// </BLOCKQUOTE></PRE>
/// Element "Timestamp" of XSD type xs:dateTime.
    time_t*                              Timestamp                      0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Application level acknowledgement code.
/// </BLOCKQUOTE></PRE>
/// Element "Ack" of XSD type "urn:ebay:apis:eBLBaseComponents":AckCodeType.
    enum ns3__AckCodeType                Ack                            1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   CorrelationID may be used optionally with an application level acknowledgement.
/// </BLOCKQUOTE></PRE>
/// Element "CorrelationID" of XSD type xs:string.
    std::string*                         CorrelationID                  0;	///< Optional element.
/// Vector of ns3__ErrorType* of length 0..unbounded.
    std::vector<ns3__ErrorType*        > Errors                         0;	///< Elements.
/// <PRE><BLOCKQUOTE>
///   This refers to the version of the response payload schema.
/// </BLOCKQUOTE></PRE>
/// Element "Version" of XSD type xs:string.
    std::string                          Version                        1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   This refers to the specific software build that was used in the deployment for processing the request and generating the response.
/// </BLOCKQUOTE></PRE>
/// Element "Build" of XSD type xs:string.
    std::string                          Build                          1;	///< Required element.
/// @todo <any namespace="##local" minOccurs="0">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
    _XML                                 __any                         0;	///< Catch any element content in XML string.
    END OF INHERITED FROM ns3__AbstractResponseType */
};

/// @brief "urn:ebay:apis:CoreComponentTypes":AmountType is a complexType with simpleContent.
///
/// class ns2__AmountType operations:
/// - ns2__AmountType* soap_new_ns2__AmountType(soap*) allocate and default initialize
/// - ns2__AmountType* soap_new_ns2__AmountType(soap*, int num) allocate array and default initialize values
/// - ns2__AmountType* soap_new_req_ns2__AmountType(soap*, ...) allocate, set required members
/// - ns2__AmountType* soap_new_set_ns2__AmountType(soap*, ...) allocate, set all public members
/// - ns2__AmountType::soap_default(soap*) default initialize members
/// - int soap_read_ns2__AmountType(soap*, ns2__AmountType*) deserialize from a stream
/// - int soap_write_ns2__AmountType(soap*, ns2__AmountType*) serialize to a stream
/// - ns2__AmountType* ns2__AmountType::soap_dup(soap*) returns deep copy of ns2__AmountType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__AmountType::soap_del() deep deletes ns2__AmountType data members, use only after ns2__AmountType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__AmountType
{ public:
/// __item wraps "xs:double" simpleContent.
    double                               __item                        ;
/// Attribute "currencyID" of XSD type "urn:ebay:apis:eBLBaseComponents":CurrencyCodeType.
   @enum ns3__CurrencyCodeType           currencyID                     1;	///< Required attribute.
    struct soap                         *soap                          ;
};

/// @brief "urn:ebay:apis:CoreComponentTypes":BasicAmountType is a complexType with simpleContent.
///
/// <PRE><BLOCKQUOTE>
///   On requests, you must set the currencyID attribute to one of the three-character currency codes for any of the supported PayPal currencies. <br/><br/>
///   Limitations: Must not exceed $10,000 USD in any currency. No currency symbol. Decimal separator must be a period (.), and the thousands separator must be a comma (,).
/// </BLOCKQUOTE></PRE>
/// class ns2__BasicAmountType operations:
/// - ns2__BasicAmountType* soap_new_ns2__BasicAmountType(soap*) allocate and default initialize
/// - ns2__BasicAmountType* soap_new_ns2__BasicAmountType(soap*, int num) allocate array and default initialize values
/// - ns2__BasicAmountType* soap_new_req_ns2__BasicAmountType(soap*, ...) allocate, set required members
/// - ns2__BasicAmountType* soap_new_set_ns2__BasicAmountType(soap*, ...) allocate, set all public members
/// - ns2__BasicAmountType::soap_default(soap*) default initialize members
/// - int soap_read_ns2__BasicAmountType(soap*, ns2__BasicAmountType*) deserialize from a stream
/// - int soap_write_ns2__BasicAmountType(soap*, ns2__BasicAmountType*) serialize to a stream
/// - ns2__BasicAmountType* ns2__BasicAmountType::soap_dup(soap*) returns deep copy of ns2__BasicAmountType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__BasicAmountType::soap_del() deep deletes ns2__BasicAmountType data members, use only after ns2__BasicAmountType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__BasicAmountType
{ public:
/// __item wraps "xs:string" simpleContent.
    std::string                          __item                        ;
/// Attribute "currencyID" of XSD type "urn:ebay:apis:eBLBaseComponents":CurrencyCodeType.
   @enum ns3__CurrencyCodeType           currencyID                     1;	///< Required attribute.
    struct soap                         *soap                          ;
};

/// @brief "urn:ebay:apis:CoreComponentTypes":MeasureType is a complexType with simpleContent.
///
/// class ns2__MeasureType operations:
/// - ns2__MeasureType* soap_new_ns2__MeasureType(soap*) allocate and default initialize
/// - ns2__MeasureType* soap_new_ns2__MeasureType(soap*, int num) allocate array and default initialize values
/// - ns2__MeasureType* soap_new_req_ns2__MeasureType(soap*, ...) allocate, set required members
/// - ns2__MeasureType* soap_new_set_ns2__MeasureType(soap*, ...) allocate, set all public members
/// - ns2__MeasureType::soap_default(soap*) default initialize members
/// - int soap_read_ns2__MeasureType(soap*, ns2__MeasureType*) deserialize from a stream
/// - int soap_write_ns2__MeasureType(soap*, ns2__MeasureType*) serialize to a stream
/// - ns2__MeasureType* ns2__MeasureType::soap_dup(soap*) returns deep copy of ns2__MeasureType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__MeasureType::soap_del() deep deletes ns2__MeasureType data members, use only after ns2__MeasureType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__MeasureType
{ public:
/// __item wraps "xs:double" simpleContent.
    double                               __item                        ;
/// Attribute "unit" of XSD type xs:token.
   @xsd__token                           unit                           1;	///< Required attribute.
    struct soap                         *soap                          ;
};

/// @brief "urn:ebay:apis:CoreComponentTypes":QuantityType is a complexType with simpleContent.
///
/// class ns2__QuantityType operations:
/// - ns2__QuantityType* soap_new_ns2__QuantityType(soap*) allocate and default initialize
/// - ns2__QuantityType* soap_new_ns2__QuantityType(soap*, int num) allocate array and default initialize values
/// - ns2__QuantityType* soap_new_req_ns2__QuantityType(soap*, ...) allocate, set required members
/// - ns2__QuantityType* soap_new_set_ns2__QuantityType(soap*, ...) allocate, set all public members
/// - ns2__QuantityType::soap_default(soap*) default initialize members
/// - int soap_read_ns2__QuantityType(soap*, ns2__QuantityType*) deserialize from a stream
/// - int soap_write_ns2__QuantityType(soap*, ns2__QuantityType*) serialize to a stream
/// - ns2__QuantityType* ns2__QuantityType::soap_dup(soap*) returns deep copy of ns2__QuantityType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__QuantityType::soap_del() deep deletes ns2__QuantityType data members, use only after ns2__QuantityType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__QuantityType
{ public:
/// __item wraps "xs:double" simpleContent.
    double                               __item                        ;
/// Attribute "unit" of XSD type xs:token.
   @xsd__token*                          unit                           0;	///< Optional attribute.
    struct soap                         *soap                          ;
};

/// @brief "urn:ebay:api:PayPalAPI":DoUATPExpressCheckoutPaymentRequestType is a complexType with complexContent extension of XSD type "urn:ebay:api:PayPalAPI":DoExpressCheckoutPaymentRequestType.
///
/// class ns1__DoUATPExpressCheckoutPaymentRequestType operations:
/// - ns1__DoUATPExpressCheckoutPaymentRequestType* soap_new_ns1__DoUATPExpressCheckoutPaymentRequestType(soap*) allocate and default initialize
/// - ns1__DoUATPExpressCheckoutPaymentRequestType* soap_new_ns1__DoUATPExpressCheckoutPaymentRequestType(soap*, int num) allocate array and default initialize values
/// - ns1__DoUATPExpressCheckoutPaymentRequestType* soap_new_req_ns1__DoUATPExpressCheckoutPaymentRequestType(soap*, ...) allocate, set required members
/// - ns1__DoUATPExpressCheckoutPaymentRequestType* soap_new_set_ns1__DoUATPExpressCheckoutPaymentRequestType(soap*, ...) allocate, set all public members
/// - ns1__DoUATPExpressCheckoutPaymentRequestType::soap_default(soap*) default initialize members
/// - int soap_read_ns1__DoUATPExpressCheckoutPaymentRequestType(soap*, ns1__DoUATPExpressCheckoutPaymentRequestType*) deserialize from a stream
/// - int soap_write_ns1__DoUATPExpressCheckoutPaymentRequestType(soap*, ns1__DoUATPExpressCheckoutPaymentRequestType*) serialize to a stream
/// - ns1__DoUATPExpressCheckoutPaymentRequestType* ns1__DoUATPExpressCheckoutPaymentRequestType::soap_dup(soap*) returns deep copy of ns1__DoUATPExpressCheckoutPaymentRequestType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__DoUATPExpressCheckoutPaymentRequestType::soap_del() deep deletes ns1__DoUATPExpressCheckoutPaymentRequestType data members, use only after ns1__DoUATPExpressCheckoutPaymentRequestType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__DoUATPExpressCheckoutPaymentRequestType : public ns1__DoExpressCheckoutPaymentRequestType
{ public:
/*  INHERITED FROM ns3__AbstractRequestType:
/// <PRE><BLOCKQUOTE>
///   This specifies the required detail level that is needed by a client application pertaining to
///   a particular data component (e.g., Item, Transaction, etc.). The detail level is specified in
///   the DetailLevelCodeType which has all the enumerated values of the detail level for each component.
/// </BLOCKQUOTE></PRE>
/// Vector of enum ns3__DetailLevelCodeType of length 0..unbounded.
    std::vector<enum ns3__DetailLevelCodeType> DetailLevel                    0;	///< Elements.
/// <PRE><BLOCKQUOTE>
///   This should be the standard RFC 3066 language identification tag, e.g., en_US.
/// </BLOCKQUOTE></PRE>
/// Element "ErrorLanguage" of XSD type xs:string.
    std::string*                         ErrorLanguage                  0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   This refers to the version of the request payload schema.
/// </BLOCKQUOTE></PRE>
/// Element "Version" of XSD type xs:string.
    std::string                          Version                        1;	///< Required element.
/// @todo <any namespace="##local" minOccurs="0">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
    _XML                                 __any                         0;	///< Catch any element content in XML string.
    END OF INHERITED FROM ns3__AbstractRequestType */
/*  INHERITED FROM ns1__DoExpressCheckoutPaymentRequestType:
/// Element reference "urn:ebay:api:PayPalAPI:""urn:ebay:apis:eBLBaseComponents":DoExpressCheckoutPaymentRequestDetails.
    ns3__DoExpressCheckoutPaymentRequestDetailsType*  ns3__DoExpressCheckoutPaymentRequestDetails 1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   This flag indicates that the response should include FMFDetails
/// </BLOCKQUOTE></PRE>
/// Element "ReturnFMFDetails" of XSD type xs:int.
    int*                                 ReturnFMFDetails               0;	///< Optional element.
    END OF INHERITED FROM ns1__DoExpressCheckoutPaymentRequestType */
};

/// @brief "urn:ebay:api:PayPalAPI":DoUATPExpressCheckoutPaymentResponseType is a complexType with complexContent extension of XSD type "urn:ebay:api:PayPalAPI":DoExpressCheckoutPaymentResponseType.
///
/// class ns1__DoUATPExpressCheckoutPaymentResponseType operations:
/// - ns1__DoUATPExpressCheckoutPaymentResponseType* soap_new_ns1__DoUATPExpressCheckoutPaymentResponseType(soap*) allocate and default initialize
/// - ns1__DoUATPExpressCheckoutPaymentResponseType* soap_new_ns1__DoUATPExpressCheckoutPaymentResponseType(soap*, int num) allocate array and default initialize values
/// - ns1__DoUATPExpressCheckoutPaymentResponseType* soap_new_req_ns1__DoUATPExpressCheckoutPaymentResponseType(soap*, ...) allocate, set required members
/// - ns1__DoUATPExpressCheckoutPaymentResponseType* soap_new_set_ns1__DoUATPExpressCheckoutPaymentResponseType(soap*, ...) allocate, set all public members
/// - ns1__DoUATPExpressCheckoutPaymentResponseType::soap_default(soap*) default initialize members
/// - int soap_read_ns1__DoUATPExpressCheckoutPaymentResponseType(soap*, ns1__DoUATPExpressCheckoutPaymentResponseType*) deserialize from a stream
/// - int soap_write_ns1__DoUATPExpressCheckoutPaymentResponseType(soap*, ns1__DoUATPExpressCheckoutPaymentResponseType*) serialize to a stream
/// - ns1__DoUATPExpressCheckoutPaymentResponseType* ns1__DoUATPExpressCheckoutPaymentResponseType::soap_dup(soap*) returns deep copy of ns1__DoUATPExpressCheckoutPaymentResponseType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__DoUATPExpressCheckoutPaymentResponseType::soap_del() deep deletes ns1__DoUATPExpressCheckoutPaymentResponseType data members, use only after ns1__DoUATPExpressCheckoutPaymentResponseType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__DoUATPExpressCheckoutPaymentResponseType : public ns1__DoExpressCheckoutPaymentResponseType
{ public:
/*  INHERITED FROM ns3__AbstractResponseType:
/// <PRE><BLOCKQUOTE>
///   This value represents the date and time (GMT) when the response was generated by a service provider (as a result of processing of a request).
/// </BLOCKQUOTE></PRE>
/// Element "Timestamp" of XSD type xs:dateTime.
    time_t*                              Timestamp                      0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Application level acknowledgement code.
/// </BLOCKQUOTE></PRE>
/// Element "Ack" of XSD type "urn:ebay:apis:eBLBaseComponents":AckCodeType.
    enum ns3__AckCodeType                Ack                            1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   CorrelationID may be used optionally with an application level acknowledgement.
/// </BLOCKQUOTE></PRE>
/// Element "CorrelationID" of XSD type xs:string.
    std::string*                         CorrelationID                  0;	///< Optional element.
/// Vector of ns3__ErrorType* of length 0..unbounded.
    std::vector<ns3__ErrorType*        > Errors                         0;	///< Elements.
/// <PRE><BLOCKQUOTE>
///   This refers to the version of the response payload schema.
/// </BLOCKQUOTE></PRE>
/// Element "Version" of XSD type xs:string.
    std::string                          Version                        1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   This refers to the specific software build that was used in the deployment for processing the request and generating the response.
/// </BLOCKQUOTE></PRE>
/// Element "Build" of XSD type xs:string.
    std::string                          Build                          1;	///< Required element.
/// @todo <any namespace="##local" minOccurs="0">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
    _XML                                 __any                         0;	///< Catch any element content in XML string.
    END OF INHERITED FROM ns3__AbstractResponseType */
/*  INHERITED FROM ns1__DoExpressCheckoutPaymentResponseType:
/// Element reference "urn:ebay:api:PayPalAPI:""urn:ebay:apis:eBLBaseComponents":DoExpressCheckoutPaymentResponseDetails.
    ns3__DoExpressCheckoutPaymentResponseDetailsType*  ns3__DoExpressCheckoutPaymentResponseDetails 1;	///< Required element.
/// Element "FMFDetails" of XSD type "urn:ebay:apis:eBLBaseComponents":FMFDetailsType.
    ns3__FMFDetailsType*                 FMFDetails                     0;	///< Optional element.
    END OF INHERITED FROM ns1__DoExpressCheckoutPaymentResponseType */
/// Element reference "urn:ebay:api:PayPalAPI:""urn:ebay:apis:eBLBaseComponents":UATPDetails.
    ns3__UATPDetailsType*                ns3__UATPDetails               1;	///< Required element.
};

/// @brief "urn:ebay:api:PayPalAPI":DoUATPAuthorizationResponseType is a complexType with complexContent extension of XSD type "urn:ebay:api:PayPalAPI":DoAuthorizationResponseType.
///
/// class ns1__DoUATPAuthorizationResponseType operations:
/// - ns1__DoUATPAuthorizationResponseType* soap_new_ns1__DoUATPAuthorizationResponseType(soap*) allocate and default initialize
/// - ns1__DoUATPAuthorizationResponseType* soap_new_ns1__DoUATPAuthorizationResponseType(soap*, int num) allocate array and default initialize values
/// - ns1__DoUATPAuthorizationResponseType* soap_new_req_ns1__DoUATPAuthorizationResponseType(soap*, ...) allocate, set required members
/// - ns1__DoUATPAuthorizationResponseType* soap_new_set_ns1__DoUATPAuthorizationResponseType(soap*, ...) allocate, set all public members
/// - ns1__DoUATPAuthorizationResponseType::soap_default(soap*) default initialize members
/// - int soap_read_ns1__DoUATPAuthorizationResponseType(soap*, ns1__DoUATPAuthorizationResponseType*) deserialize from a stream
/// - int soap_write_ns1__DoUATPAuthorizationResponseType(soap*, ns1__DoUATPAuthorizationResponseType*) serialize to a stream
/// - ns1__DoUATPAuthorizationResponseType* ns1__DoUATPAuthorizationResponseType::soap_dup(soap*) returns deep copy of ns1__DoUATPAuthorizationResponseType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__DoUATPAuthorizationResponseType::soap_del() deep deletes ns1__DoUATPAuthorizationResponseType data members, use only after ns1__DoUATPAuthorizationResponseType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__DoUATPAuthorizationResponseType : public ns1__DoAuthorizationResponseType
{ public:
/*  INHERITED FROM ns3__AbstractResponseType:
/// <PRE><BLOCKQUOTE>
///   This value represents the date and time (GMT) when the response was generated by a service provider (as a result of processing of a request).
/// </BLOCKQUOTE></PRE>
/// Element "Timestamp" of XSD type xs:dateTime.
    time_t*                              Timestamp                      0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Application level acknowledgement code.
/// </BLOCKQUOTE></PRE>
/// Element "Ack" of XSD type "urn:ebay:apis:eBLBaseComponents":AckCodeType.
    enum ns3__AckCodeType                Ack                            1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   CorrelationID may be used optionally with an application level acknowledgement.
/// </BLOCKQUOTE></PRE>
/// Element "CorrelationID" of XSD type xs:string.
    std::string*                         CorrelationID                  0;	///< Optional element.
/// Vector of ns3__ErrorType* of length 0..unbounded.
    std::vector<ns3__ErrorType*        > Errors                         0;	///< Elements.
/// <PRE><BLOCKQUOTE>
///   This refers to the version of the response payload schema.
/// </BLOCKQUOTE></PRE>
/// Element "Version" of XSD type xs:string.
    std::string                          Version                        1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   This refers to the specific software build that was used in the deployment for processing the request and generating the response.
/// </BLOCKQUOTE></PRE>
/// Element "Build" of XSD type xs:string.
    std::string                          Build                          1;	///< Required element.
/// @todo <any namespace="##local" minOccurs="0">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
    _XML                                 __any                         0;	///< Catch any element content in XML string.
    END OF INHERITED FROM ns3__AbstractResponseType */
/*  INHERITED FROM ns1__DoAuthorizationResponseType:
/// <PRE><BLOCKQUOTE>
///   An authorization identification number. <br/>
///   <br/>
///   Character length and limits: 19 single-byte characters
/// </BLOCKQUOTE></PRE>
/// Element "TransactionID" of XSD type xs:string.
    std::string*                         TransactionID                  0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   The amount and currency you specified in the request.
/// </BLOCKQUOTE></PRE>
/// Element "Amount" of XSD type "urn:ebay:apis:CoreComponentTypes":BasicAmountType.
    ns2__BasicAmountType*                Amount                         0;	///< Optional element.
/// Element reference "urn:ebay:api:PayPalAPI:""urn:ebay:apis:eBLBaseComponents":AuthorizationInfo.
    ns3__AuthorizationInfoType*          ns3__AuthorizationInfo         0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Return msgsubid back to merchant
/// </BLOCKQUOTE></PRE>
/// Element "MsgSubID" of XSD type xs:string.
    std::string*                         MsgSubID                       0;	///< Optional element.
    END OF INHERITED FROM ns1__DoAuthorizationResponseType */
/// Element reference "urn:ebay:api:PayPalAPI:""urn:ebay:apis:eBLBaseComponents":UATPDetails.
    ns3__UATPDetailsType*                ns3__UATPDetails               1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Auth Authorization Code.
/// </BLOCKQUOTE></PRE>
/// Element "AuthorizationCode" of XSD type xs:string.
    std::string                          AuthorizationCode              1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Invoice ID. A pass through.
/// </BLOCKQUOTE></PRE>
/// Element "InvoiceID" of XSD type xs:string.
    std::string*                         InvoiceID                      0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Unique id for each API request to prevent duplicate payments.
///   <br/>
///   <br/>
///   <b>Optional</b>
///   <br/>Character length and limits: 38 single-byte characters maximum.
/// </BLOCKQUOTE></PRE>
/// Element "MsgSubID" of XSD type xs:string.
    std::string*                         MsgSubID                       0;	///< Optional element.
};


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Elements                                              *
 *   urn:ebay:api:PayPalAPI                                                   *
 *                                                                            *
\******************************************************************************/

/// @brief Top-level root element "urn:ebay:api:PayPalAPI":RequesterCredentials of XSD type "urn:ebay:apis:eBLBaseComponents":CustomSecurityHeaderType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "urn:ebay:api:PayPalAPI":BMCreateButtonRequest of XSD type "urn:ebay:api:PayPalAPI":BMCreateButtonRequestType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "urn:ebay:api:PayPalAPI":BMCreateButtonResponse of XSD type "urn:ebay:api:PayPalAPI":BMCreateButtonResponseType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "urn:ebay:api:PayPalAPI":BMUpdateButtonRequest of XSD type "urn:ebay:api:PayPalAPI":BMUpdateButtonRequestType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "urn:ebay:api:PayPalAPI":BMUpdateButtonResponse of XSD type "urn:ebay:api:PayPalAPI":BMUpdateButtonResponseType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "urn:ebay:api:PayPalAPI":BMManageButtonStatusRequest of XSD type "urn:ebay:api:PayPalAPI":BMManageButtonStatusRequestType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "urn:ebay:api:PayPalAPI":BMManageButtonStatusResponse of XSD type "urn:ebay:api:PayPalAPI":BMManageButtonStatusResponseType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "urn:ebay:api:PayPalAPI":BMGetButtonDetailsRequest of XSD type "urn:ebay:api:PayPalAPI":BMGetButtonDetailsRequestType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "urn:ebay:api:PayPalAPI":BMGetButtonDetailsResponse of XSD type "urn:ebay:api:PayPalAPI":BMGetButtonDetailsResponseType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "urn:ebay:api:PayPalAPI":BMSetInventoryRequest of XSD type "urn:ebay:api:PayPalAPI":BMSetInventoryRequestType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "urn:ebay:api:PayPalAPI":BMSetInventoryResponse of XSD type "urn:ebay:api:PayPalAPI":BMSetInventoryResponseType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "urn:ebay:api:PayPalAPI":BMGetInventoryRequest of XSD type "urn:ebay:api:PayPalAPI":BMGetInventoryRequestType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "urn:ebay:api:PayPalAPI":BMGetInventoryResponse of XSD type "urn:ebay:api:PayPalAPI":BMGetInventoryResponseType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "urn:ebay:api:PayPalAPI":BMButtonSearchRequest of XSD type "urn:ebay:api:PayPalAPI":BMButtonSearchRequestType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "urn:ebay:api:PayPalAPI":BMButtonSearchResponse of XSD type "urn:ebay:api:PayPalAPI":BMButtonSearchResponseType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "urn:ebay:api:PayPalAPI":RefundTransactionRequest of XSD type "urn:ebay:api:PayPalAPI":RefundTransactionRequestType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "urn:ebay:api:PayPalAPI":RefundTransactionResponse of XSD type "urn:ebay:api:PayPalAPI":RefundTransactionResponseType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "urn:ebay:api:PayPalAPI":InitiateRecoupRequest of XSD type "urn:ebay:api:PayPalAPI":InitiateRecoupRequestType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "urn:ebay:api:PayPalAPI":InitiateRecoupResponse of XSD type "urn:ebay:api:PayPalAPI":InitiateRecoupResponseType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "urn:ebay:api:PayPalAPI":CompleteRecoupRequest of XSD type "urn:ebay:api:PayPalAPI":CompleteRecoupRequestType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "urn:ebay:api:PayPalAPI":CompleteRecoupResponse of XSD type "urn:ebay:api:PayPalAPI":CompleteRecoupResponseType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "urn:ebay:api:PayPalAPI":CancelRecoupRequest of XSD type "urn:ebay:api:PayPalAPI":CancelRecoupRequestType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "urn:ebay:api:PayPalAPI":CancelRecoupResponse of XSD type "urn:ebay:api:PayPalAPI":CancelRecoupResponseType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "urn:ebay:api:PayPalAPI":GetTransactionDetailsRequest of XSD type "urn:ebay:api:PayPalAPI":GetTransactionDetailsRequestType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "urn:ebay:api:PayPalAPI":GetTransactionDetailsResponse of XSD type "urn:ebay:api:PayPalAPI":GetTransactionDetailsResponseType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "urn:ebay:api:PayPalAPI":BillUserRequest of XSD type "urn:ebay:api:PayPalAPI":BillUserRequestType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "urn:ebay:api:PayPalAPI":BillUserResponse of XSD type "urn:ebay:api:PayPalAPI":BillUserResponseType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "urn:ebay:api:PayPalAPI":TransactionSearchRequest of XSD type "urn:ebay:api:PayPalAPI":TransactionSearchRequestType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "urn:ebay:api:PayPalAPI":TransactionSearchResponse of XSD type "urn:ebay:api:PayPalAPI":TransactionSearchResponseType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "urn:ebay:api:PayPalAPI":MassPayRequest of XSD type "urn:ebay:api:PayPalAPI":MassPayRequestType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "urn:ebay:api:PayPalAPI":MassPayResponse of XSD type "urn:ebay:api:PayPalAPI":MassPayResponseType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "urn:ebay:api:PayPalAPI":BAUpdateRequest of XSD type "urn:ebay:api:PayPalAPI":BAUpdateRequestType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "urn:ebay:api:PayPalAPI":BAUpdateResponse of XSD type "urn:ebay:api:PayPalAPI":BAUpdateResponseType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "urn:ebay:api:PayPalAPI":AddressVerifyRequest of XSD type "urn:ebay:api:PayPalAPI":AddressVerifyRequestType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "urn:ebay:api:PayPalAPI":AddressVerifyResponse of XSD type "urn:ebay:api:PayPalAPI":AddressVerifyResponseType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "urn:ebay:api:PayPalAPI":EnterBoardingRequest of XSD type "urn:ebay:api:PayPalAPI":EnterBoardingRequestType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "urn:ebay:api:PayPalAPI":EnterBoardingResponse of XSD type "urn:ebay:api:PayPalAPI":EnterBoardingResponseType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "urn:ebay:api:PayPalAPI":GetBoardingDetailsRequest of XSD type "urn:ebay:api:PayPalAPI":GetBoardingDetailsRequestType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "urn:ebay:api:PayPalAPI":GetBoardingDetailsResponse of XSD type "urn:ebay:api:PayPalAPI":GetBoardingDetailsResponseType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "urn:ebay:api:PayPalAPI":SetAuthFlowParamRequest of XSD type "urn:ebay:api:PayPalAPI":SetAuthFlowParamRequestType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "urn:ebay:api:PayPalAPI":SetAuthFlowParamResponse of XSD type "urn:ebay:api:PayPalAPI":SetAuthFlowParamResponseType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "urn:ebay:api:PayPalAPI":GetAuthDetailsRequest of XSD type "urn:ebay:api:PayPalAPI":GetAuthDetailsRequestType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "urn:ebay:api:PayPalAPI":GetAuthDetailsResponse of XSD type "urn:ebay:api:PayPalAPI":GetAuthDetailsResponseType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "urn:ebay:api:PayPalAPI":SetAccessPermissionsRequest of XSD type "urn:ebay:api:PayPalAPI":SetAccessPermissionsRequestType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "urn:ebay:api:PayPalAPI":SetAccessPermissionsResponse of XSD type "urn:ebay:api:PayPalAPI":SetAccessPermissionsResponseType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "urn:ebay:api:PayPalAPI":UpdateAccessPermissionsRequest of XSD type "urn:ebay:api:PayPalAPI":UpdateAccessPermissionsRequestType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "urn:ebay:api:PayPalAPI":UpdateAccessPermissionsResponse of XSD type "urn:ebay:api:PayPalAPI":UpdateAccessPermissionsResponseType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "urn:ebay:api:PayPalAPI":GetAccessPermissionDetailsRequest of XSD type "urn:ebay:api:PayPalAPI":GetAccessPermissionDetailsRequestType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "urn:ebay:api:PayPalAPI":GetAccessPermissionDetailsResponse of XSD type "urn:ebay:api:PayPalAPI":GetAccessPermissionDetailsResponseType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "urn:ebay:api:PayPalAPI":GetIncentiveEvaluationRequest of XSD type "urn:ebay:api:PayPalAPI":GetIncentiveEvaluationRequestType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "urn:ebay:api:PayPalAPI":GetIncentiveEvaluationResponse of XSD type "urn:ebay:api:PayPalAPI":GetIncentiveEvaluationResponseType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "urn:ebay:api:PayPalAPI":SetExpressCheckoutRequest of XSD type "urn:ebay:api:PayPalAPI":SetExpressCheckoutRequestType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "urn:ebay:api:PayPalAPI":SetExpressCheckoutResponse of XSD type "urn:ebay:api:PayPalAPI":SetExpressCheckoutResponseType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "urn:ebay:api:PayPalAPI":ExecuteCheckoutOperationsRequest of XSD type "urn:ebay:api:PayPalAPI":ExecuteCheckoutOperationsRequestType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "urn:ebay:api:PayPalAPI":ExecuteCheckoutOperationsResponse of XSD type "urn:ebay:api:PayPalAPI":ExecuteCheckoutOperationsResponseType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "urn:ebay:api:PayPalAPI":GetExpressCheckoutDetailsRequest of XSD type "urn:ebay:api:PayPalAPI":GetExpressCheckoutDetailsRequestType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "urn:ebay:api:PayPalAPI":GetExpressCheckoutDetailsResponse of XSD type "urn:ebay:api:PayPalAPI":GetExpressCheckoutDetailsResponseType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "urn:ebay:api:PayPalAPI":DoExpressCheckoutPaymentRequest of XSD type "urn:ebay:api:PayPalAPI":DoExpressCheckoutPaymentRequestType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "urn:ebay:api:PayPalAPI":DoExpressCheckoutPaymentResponse of XSD type "urn:ebay:api:PayPalAPI":DoExpressCheckoutPaymentResponseType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "urn:ebay:api:PayPalAPI":DoUATPExpressCheckoutPaymentRequest of XSD type "urn:ebay:api:PayPalAPI":DoUATPExpressCheckoutPaymentRequestType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "urn:ebay:api:PayPalAPI":DoUATPExpressCheckoutPaymentResponse of XSD type "urn:ebay:api:PayPalAPI":DoUATPExpressCheckoutPaymentResponseType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "urn:ebay:api:PayPalAPI":ManagePendingTransactionStatusRequest of XSD type "urn:ebay:api:PayPalAPI":ManagePendingTransactionStatusRequestType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "urn:ebay:api:PayPalAPI":ManagePendingTransactionStatusResponse of XSD type "urn:ebay:api:PayPalAPI":ManagePendingTransactionStatusResponseType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "urn:ebay:api:PayPalAPI":DoDirectPaymentRequest of XSD type "urn:ebay:api:PayPalAPI":DoDirectPaymentRequestType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "urn:ebay:api:PayPalAPI":DoDirectPaymentResponse of XSD type "urn:ebay:api:PayPalAPI":DoDirectPaymentResponseType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "urn:ebay:api:PayPalAPI":DoCancelRequest of XSD type "urn:ebay:api:PayPalAPI":DoCancelRequestType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "urn:ebay:api:PayPalAPI":DoCancelResponse of XSD type "urn:ebay:api:PayPalAPI":DoCancelResponseType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "urn:ebay:api:PayPalAPI":DoCaptureRequest of XSD type "urn:ebay:api:PayPalAPI":DoCaptureRequestType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "urn:ebay:api:PayPalAPI":DoCaptureResponse of XSD type "urn:ebay:api:PayPalAPI":DoCaptureResponseType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "urn:ebay:api:PayPalAPI":DoReauthorizationRequest of XSD type "urn:ebay:api:PayPalAPI":DoReauthorizationRequestType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "urn:ebay:api:PayPalAPI":DoReauthorizationResponse of XSD type "urn:ebay:api:PayPalAPI":DoReauthorizationResponseType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "urn:ebay:api:PayPalAPI":DoVoidRequest of XSD type "urn:ebay:api:PayPalAPI":DoVoidRequestType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "urn:ebay:api:PayPalAPI":DoVoidResponse of XSD type "urn:ebay:api:PayPalAPI":DoVoidResponseType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "urn:ebay:api:PayPalAPI":DoAuthorizationRequest of XSD type "urn:ebay:api:PayPalAPI":DoAuthorizationRequestType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "urn:ebay:api:PayPalAPI":DoAuthorizationResponse of XSD type "urn:ebay:api:PayPalAPI":DoAuthorizationResponseType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "urn:ebay:api:PayPalAPI":UpdateAuthorizationRequest of XSD type "urn:ebay:api:PayPalAPI":UpdateAuthorizationRequestType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "urn:ebay:api:PayPalAPI":UpdateAuthorizationResponse of XSD type "urn:ebay:api:PayPalAPI":UpdateAuthorizationResponseType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "urn:ebay:api:PayPalAPI":DoUATPAuthorizationRequest of XSD type "urn:ebay:api:PayPalAPI":DoUATPAuthorizationRequestType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "urn:ebay:api:PayPalAPI":DoUATPAuthorizationResponse of XSD type "urn:ebay:api:PayPalAPI":DoUATPAuthorizationResponseType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "urn:ebay:api:PayPalAPI":CreateMobilePaymentRequest of XSD type "urn:ebay:api:PayPalAPI":CreateMobilePaymentRequestType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "urn:ebay:api:PayPalAPI":CreateMobilePaymentResponse of XSD type "urn:ebay:api:PayPalAPI":CreateMobilePaymentResponseType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "urn:ebay:api:PayPalAPI":GetMobileStatusRequest of XSD type "urn:ebay:api:PayPalAPI":GetMobileStatusRequestType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "urn:ebay:api:PayPalAPI":GetMobileStatusResponse of XSD type "urn:ebay:api:PayPalAPI":GetMobileStatusResponseType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "urn:ebay:api:PayPalAPI":SetMobileCheckoutRequest of XSD type "urn:ebay:api:PayPalAPI":SetMobileCheckoutRequestType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "urn:ebay:api:PayPalAPI":SetMobileCheckoutResponse of XSD type "urn:ebay:api:PayPalAPI":SetMobileCheckoutResponseType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "urn:ebay:api:PayPalAPI":DoMobileCheckoutPaymentRequest of XSD type "urn:ebay:api:PayPalAPI":DoMobileCheckoutPaymentRequestType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "urn:ebay:api:PayPalAPI":DoMobileCheckoutPaymentResponse of XSD type "urn:ebay:api:PayPalAPI":DoMobileCheckoutPaymentResponseType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "urn:ebay:api:PayPalAPI":GetBalanceRequest of XSD type "urn:ebay:api:PayPalAPI":GetBalanceRequestType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "urn:ebay:api:PayPalAPI":GetBalanceResponse of XSD type "urn:ebay:api:PayPalAPI":GetBalanceResponseType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "urn:ebay:api:PayPalAPI":SetCustomerBillingAgreementRequest of XSD type "urn:ebay:api:PayPalAPI":SetCustomerBillingAgreementRequestType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "urn:ebay:api:PayPalAPI":SetCustomerBillingAgreementResponse of XSD type "urn:ebay:api:PayPalAPI":SetCustomerBillingAgreementResponseType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "urn:ebay:api:PayPalAPI":GetBillingAgreementCustomerDetailsRequest of XSD type "urn:ebay:api:PayPalAPI":GetBillingAgreementCustomerDetailsRequestType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "urn:ebay:api:PayPalAPI":GetBillingAgreementCustomerDetailsResponse of XSD type "urn:ebay:api:PayPalAPI":GetBillingAgreementCustomerDetailsResponseType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "urn:ebay:api:PayPalAPI":CreateBillingAgreementRequest of XSD type "urn:ebay:api:PayPalAPI":CreateBillingAgreementRequestType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "urn:ebay:api:PayPalAPI":CreateBillingAgreementResponse of XSD type "urn:ebay:api:PayPalAPI":CreateBillingAgreementResponseType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "urn:ebay:api:PayPalAPI":DoReferenceTransactionRequest of XSD type "urn:ebay:api:PayPalAPI":DoReferenceTransactionRequestType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "urn:ebay:api:PayPalAPI":DoReferenceTransactionResponse of XSD type "urn:ebay:api:PayPalAPI":DoReferenceTransactionResponseType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "urn:ebay:api:PayPalAPI":DoNonReferencedCreditRequest of XSD type "urn:ebay:api:PayPalAPI":DoNonReferencedCreditRequestType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "urn:ebay:api:PayPalAPI":DoNonReferencedCreditResponse of XSD type "urn:ebay:api:PayPalAPI":DoNonReferencedCreditResponseType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "urn:ebay:api:PayPalAPI":CreateRecurringPaymentsProfileRequest of XSD type "urn:ebay:api:PayPalAPI":CreateRecurringPaymentsProfileRequestType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "urn:ebay:api:PayPalAPI":CreateRecurringPaymentsProfileResponse of XSD type "urn:ebay:api:PayPalAPI":CreateRecurringPaymentsProfileResponseType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "urn:ebay:api:PayPalAPI":GetRecurringPaymentsProfileDetailsRequest of XSD type "urn:ebay:api:PayPalAPI":GetRecurringPaymentsProfileDetailsRequestType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "urn:ebay:api:PayPalAPI":GetRecurringPaymentsProfileDetailsResponse of XSD type "urn:ebay:api:PayPalAPI":GetRecurringPaymentsProfileDetailsResponseType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "urn:ebay:api:PayPalAPI":ManageRecurringPaymentsProfileStatusRequest of XSD type "urn:ebay:api:PayPalAPI":ManageRecurringPaymentsProfileStatusRequestType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "urn:ebay:api:PayPalAPI":ManageRecurringPaymentsProfileStatusResponse of XSD type "urn:ebay:api:PayPalAPI":ManageRecurringPaymentsProfileStatusResponseType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "urn:ebay:api:PayPalAPI":BillOutstandingAmountRequest of XSD type "urn:ebay:api:PayPalAPI":BillOutstandingAmountRequestType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "urn:ebay:api:PayPalAPI":BillOutstandingAmountResponse of XSD type "urn:ebay:api:PayPalAPI":BillOutstandingAmountResponseType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "urn:ebay:api:PayPalAPI":UpdateRecurringPaymentsProfileRequest of XSD type "urn:ebay:api:PayPalAPI":UpdateRecurringPaymentsProfileRequestType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "urn:ebay:api:PayPalAPI":UpdateRecurringPaymentsProfileResponse of XSD type "urn:ebay:api:PayPalAPI":UpdateRecurringPaymentsProfileResponseType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "urn:ebay:api:PayPalAPI":GetPalDetailsRequest of XSD type "urn:ebay:api:PayPalAPI":GetPalDetailsRequestType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "urn:ebay:api:PayPalAPI":GetPalDetailsResponse of XSD type "urn:ebay:api:PayPalAPI":GetPalDetailsResponseType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "urn:ebay:api:PayPalAPI":ReverseTransactionRequest of XSD type "urn:ebay:api:PayPalAPI":ReverseTransactionRequestType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "urn:ebay:api:PayPalAPI":ReverseTransactionResponse of XSD type "urn:ebay:api:PayPalAPI":ReverseTransactionResponseType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "urn:ebay:api:PayPalAPI":ExternalRememberMeOptOutRequest of XSD type "urn:ebay:api:PayPalAPI":ExternalRememberMeOptOutRequestType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "urn:ebay:api:PayPalAPI":ExternalRememberMeOptOutResponse of XSD type "urn:ebay:api:PayPalAPI":ExternalRememberMeOptOutResponseType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Attributes                                            *
 *   urn:ebay:api:PayPalAPI                                                   *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Elements                                              *
 *   urn:ebay:apis:CoreComponentTypes                                         *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Attributes                                            *
 *   urn:ebay:apis:CoreComponentTypes                                         *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Elements                                              *
 *   urn:ebay:apis:eBLBaseComponents                                          *
 *                                                                            *
\******************************************************************************/

/// @brief Top-level root element "urn:ebay:apis:eBLBaseComponents":AccountCode of XSD type xs:string.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "urn:ebay:apis:eBLBaseComponents":AccountSummary of XSD type "urn:ebay:apis:eBLBaseComponents":AccountSummaryType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "urn:ebay:apis:eBLBaseComponents":AmountPaid of XSD type "urn:ebay:apis:CoreComponentTypes":AmountType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "urn:ebay:apis:eBLBaseComponents":AmountPastDue of XSD type "urn:ebay:apis:CoreComponentTypes":AmountType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "urn:ebay:apis:eBLBaseComponents":Balance of XSD type "urn:ebay:apis:CoreComponentTypes":AmountType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "urn:ebay:apis:eBLBaseComponents":Buyer of XSD type "urn:ebay:apis:eBLBaseComponents":UserType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "urn:ebay:apis:eBLBaseComponents":Category of XSD type "urn:ebay:apis:eBLBaseComponents":CategoryType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "urn:ebay:apis:eBLBaseComponents":CheckoutEnabled of XSD type xs:boolean.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "urn:ebay:apis:eBLBaseComponents":CurrentBalance of XSD type "urn:ebay:apis:CoreComponentTypes":AmountType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "urn:ebay:apis:eBLBaseComponents":FeedbackScore of XSD type xs:int.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "urn:ebay:apis:eBLBaseComponents":Fees of XSD type "urn:ebay:apis:eBLBaseComponents":FeesType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "urn:ebay:apis:eBLBaseComponents":HighBidder of XSD type "urn:ebay:apis:eBLBaseComponents":UserType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "urn:ebay:apis:eBLBaseComponents":InsuranceFee of XSD type "urn:ebay:apis:CoreComponentTypes":AmountType.
/// <PRE><BLOCKQUOTE>
///   Amount of insurance. Applicable if ShippingType is
///   Flat shipping rate orCalculated shipping rate.
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "urn:ebay:apis:eBLBaseComponents":InsuranceOption of XSD type "urn:ebay:apis:eBLBaseComponents":InsuranceOptionCodeType.
/// <PRE><BLOCKQUOTE>
///   Indicates whether insurance fee is required. Possible values:
///   Insurance not offered.
///   Insurance optional.
///   Insurance required. Insurance included in Shipping and Handling costs.
///   Applicable if ShippingType is Flat shipping rate or Calculated shipping rate.
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "urn:ebay:apis:eBLBaseComponents":Item of XSD type "urn:ebay:apis:eBLBaseComponents":ItemType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "urn:ebay:apis:eBLBaseComponents":ItemID of XSD type "urn:ebay:apis:eBLBaseComponents":ItemIDType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "urn:ebay:apis:eBLBaseComponents":ListingDuration of XSD type "urn:ebay:apis:eBLBaseComponents":ListingDurationCodeType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "urn:ebay:apis:eBLBaseComponents":PaymentMeans of XSD type "urn:ebay:apis:eBLBaseComponents":PaymentMeansType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "urn:ebay:apis:eBLBaseComponents":PaymentMethods of XSD type "urn:ebay:apis:eBLBaseComponents":BuyerPaymentMethodCodeType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "urn:ebay:apis:eBLBaseComponents":PaymentType of XSD type "urn:ebay:apis:eBLBaseComponents":PaymentType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "urn:ebay:apis:eBLBaseComponents":Region of XSD type xs:string.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "urn:ebay:apis:eBLBaseComponents":RegionID of XSD type xs:string.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "urn:ebay:apis:eBLBaseComponents":RegistrationAddress of XSD type "urn:ebay:apis:eBLBaseComponents":AddressType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "urn:ebay:apis:eBLBaseComponents":ReviseStatus of XSD type "urn:ebay:apis:eBLBaseComponents":ReviseStatusType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "urn:ebay:apis:eBLBaseComponents":Seller of XSD type "urn:ebay:apis:eBLBaseComponents":UserType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "urn:ebay:apis:eBLBaseComponents":SellerLevel of XSD type "urn:ebay:apis:eBLBaseComponents":SellerLevelCodeType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "urn:ebay:apis:eBLBaseComponents":SellingStatus of XSD type "urn:ebay:apis:eBLBaseComponents":SellingStatusType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "urn:ebay:apis:eBLBaseComponents":ShippingService of XSD type "urn:ebay:apis:eBLBaseComponents":ShippingServiceCodeType.
/// <PRE><BLOCKQUOTE>
///   Shipping carrier for the item. Possible values are:
///   UPS Ground
///   UPS 3rd Day
///   UPS 2nd Day
///   UPS Next Day
///   USPS Priority
///   USPS Parcel
///   USPS Media
///   USPS First Class
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "urn:ebay:apis:eBLBaseComponents":Site of XSD type "urn:ebay:apis:eBLBaseComponents":SiteCodeType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "urn:ebay:apis:eBLBaseComponents":StoreCategoryID of XSD type xs:int.
/// <PRE><BLOCKQUOTE>
///   Custom categories for subdividing the items within an eBay Store. Store owners can create up to 12 custom categories for their stores. (One Store category cannot be customized and retains the value of "Other") If specified, must be number between 0 and 12.
///   0=Not an eBay Store item
///   1=Other
///   2=Category 1
///   3=Category 2
///   ...
///   11=Category 10
///   12=Category 11
///   Returned as null for international fixed priced item.
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "urn:ebay:apis:eBLBaseComponents":StoreOwner of XSD type xs:boolean.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "urn:ebay:apis:eBLBaseComponents":StoreURL of XSD type xs:anyURI.
/// <PRE><BLOCKQUOTE>
///   URL pointing to the seller's eBay Store page. Returned as null for International Fixed Price items. This URL follows the format below, where "####" is replaced by the seller's eBay Stores ID (that uniquely identifies the eBay Store).
///   http://www.ebaystores.com/id=####
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "urn:ebay:apis:eBLBaseComponents":ItemArray of XSD type "urn:ebay:apis:eBLBaseComponents":ItemArrayType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "urn:ebay:apis:eBLBaseComponents":CategoryArray of XSD type "urn:ebay:apis:eBLBaseComponents":CategoryArrayType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "urn:ebay:apis:eBLBaseComponents":Pagination of XSD type "urn:ebay:apis:eBLBaseComponents":PaginationType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "urn:ebay:apis:eBLBaseComponents":PaginationResult of XSD type "urn:ebay:apis:eBLBaseComponents":PaginationResultType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "urn:ebay:apis:eBLBaseComponents":ShippingAddress of XSD type "urn:ebay:apis:eBLBaseComponents":AddressType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "urn:ebay:apis:eBLBaseComponents":ShippingInfo of XSD type "urn:ebay:apis:eBLBaseComponents":ShippingInfoType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "urn:ebay:apis:eBLBaseComponents":TaxInfo of XSD type "urn:ebay:apis:eBLBaseComponents":TaxInfoType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "urn:ebay:apis:eBLBaseComponents":Error of XSD type "urn:ebay:apis:eBLBaseComponents":ErrorType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "urn:ebay:apis:eBLBaseComponents":ThreeDSecureRequest of XSD type "urn:ebay:apis:eBLBaseComponents":ThreeDSecureRequestType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "urn:ebay:apis:eBLBaseComponents":CreditCardInfo of XSD type "urn:ebay:apis:eBLBaseComponents":CreditCardDetailsType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "urn:ebay:apis:eBLBaseComponents":SellerPaymentAddress of XSD type "urn:ebay:apis:eBLBaseComponents":AddressType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "urn:ebay:apis:eBLBaseComponents":ShippingRegions of XSD type "urn:ebay:apis:eBLBaseComponents":ShippingRegionCodeType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "urn:ebay:apis:eBLBaseComponents":ShippingDetails of XSD type "urn:ebay:apis:eBLBaseComponents":ShippingDetailsType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "urn:ebay:apis:eBLBaseComponents":ShippingTerm of XSD type "urn:ebay:apis:eBLBaseComponents":ShippingTermsCodeType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "urn:ebay:apis:eBLBaseComponents":Transaction of XSD type "urn:ebay:apis:eBLBaseComponents":TransactionType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "urn:ebay:apis:eBLBaseComponents":Transactions of XSD type "urn:ebay:apis:eBLBaseComponents":TransactionsType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "urn:ebay:apis:eBLBaseComponents":TransactionID of XSD type xs:string.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "urn:ebay:apis:eBLBaseComponents":EbayTransactionID of XSD type xs:string.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "urn:ebay:apis:eBLBaseComponents":AuthorizationID of XSD type xs:string.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "urn:ebay:apis:eBLBaseComponents":UserID of XSD type "urn:ebay:apis:eBLBaseComponents":UserIDType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "urn:ebay:apis:eBLBaseComponents":User of XSD type "urn:ebay:apis:eBLBaseComponents":UserType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "urn:ebay:apis:eBLBaseComponents":Country of XSD type "urn:ebay:apis:eBLBaseComponents":CountryCodeType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "urn:ebay:apis:eBLBaseComponents":CountryName of XSD type xs:string.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "urn:ebay:apis:eBLBaseComponents":Currency of XSD type "urn:ebay:apis:eBLBaseComponents":CurrencyCodeType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "urn:ebay:apis:eBLBaseComponents":Email of XSD type xs:string.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "urn:ebay:apis:eBLBaseComponents":StateOrProvince of XSD type xs:string.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "urn:ebay:apis:eBLBaseComponents":UUID of XSD type "urn:ebay:apis:CoreComponentTypes":UUIDType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "urn:ebay:apis:eBLBaseComponents":APIType of XSD type "urn:ebay:apis:eBLBaseComponents":APIType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "urn:ebay:apis:eBLBaseComponents":RefundType of XSD type "urn:ebay:apis:eBLBaseComponents":RefundType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "urn:ebay:apis:eBLBaseComponents":ReceiptID of XSD type xs:string.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "urn:ebay:apis:eBLBaseComponents":SubscriptionID of XSD type xs:string.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "urn:ebay:apis:eBLBaseComponents":OptionTrackingDetails of XSD type "urn:ebay:apis:eBLBaseComponents":OptionTrackingDetailsType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "urn:ebay:apis:eBLBaseComponents":ItemTrackingDetails of XSD type "urn:ebay:apis:eBLBaseComponents":ItemTrackingDetailsType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "urn:ebay:apis:eBLBaseComponents":ButtonSearchResult of XSD type "urn:ebay:apis:eBLBaseComponents":ButtonSearchResultType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "urn:ebay:apis:eBLBaseComponents":PaymentTransactions of XSD type "urn:ebay:apis:eBLBaseComponents":PaymentTransactionSearchResultType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "urn:ebay:apis:eBLBaseComponents":PaymentTransactionDetails of XSD type "urn:ebay:apis:eBLBaseComponents":PaymentTransactionType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "urn:ebay:apis:eBLBaseComponents":ThreeDSecureDetails of XSD type "urn:ebay:apis:eBLBaseComponents":ThreeDSecureInfoType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "urn:ebay:apis:eBLBaseComponents":MerchantPullPaymentDetails of XSD type "urn:ebay:apis:eBLBaseComponents":MerchantPullPaymentType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "urn:ebay:apis:eBLBaseComponents":BillUserResponseDetails of XSD type "urn:ebay:apis:eBLBaseComponents":MerchantPullPaymentResponseType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "urn:ebay:apis:eBLBaseComponents":BAUpdateResponseDetails of XSD type "urn:ebay:apis:eBLBaseComponents":BAUpdateResponseDetailsType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "urn:ebay:apis:eBLBaseComponents":SetAuthFlowParamRequestDetails of XSD type "urn:ebay:apis:eBLBaseComponents":SetAuthFlowParamRequestDetailsType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "urn:ebay:apis:eBLBaseComponents":GetAuthDetailsResponseDetails of XSD type "urn:ebay:apis:eBLBaseComponents":GetAuthDetailsResponseDetailsType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "urn:ebay:apis:eBLBaseComponents":SetAccessPermissionsRequestDetails of XSD type "urn:ebay:apis:eBLBaseComponents":SetAccessPermissionsRequestDetailsType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "urn:ebay:apis:eBLBaseComponents":GetAccessPermissionDetailsResponseDetails of XSD type "urn:ebay:apis:eBLBaseComponents":GetAccessPermissionDetailsResponseDetailsType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "urn:ebay:apis:eBLBaseComponents":SetExpressCheckoutRequestDetails of XSD type "urn:ebay:apis:eBLBaseComponents":SetExpressCheckoutRequestDetailsType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "urn:ebay:apis:eBLBaseComponents":ExecuteCheckoutOperationsRequestDetails of XSD type "urn:ebay:apis:eBLBaseComponents":ExecuteCheckoutOperationsRequestDetailsType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "urn:ebay:apis:eBLBaseComponents":ExecuteCheckoutOperationsResponseDetails of XSD type "urn:ebay:apis:eBLBaseComponents":ExecuteCheckoutOperationsResponseDetailsType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "urn:ebay:apis:eBLBaseComponents":GetExpressCheckoutDetailsResponseDetails of XSD type "urn:ebay:apis:eBLBaseComponents":GetExpressCheckoutDetailsResponseDetailsType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "urn:ebay:apis:eBLBaseComponents":DoExpressCheckoutPaymentResponseDetails of XSD type "urn:ebay:apis:eBLBaseComponents":DoExpressCheckoutPaymentResponseDetailsType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "urn:ebay:apis:eBLBaseComponents":DoExpressCheckoutPaymentRequestDetails of XSD type "urn:ebay:apis:eBLBaseComponents":DoExpressCheckoutPaymentRequestDetailsType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "urn:ebay:apis:eBLBaseComponents":DoCaptureResponseDetails of XSD type "urn:ebay:apis:eBLBaseComponents":DoCaptureResponseDetailsType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "urn:ebay:apis:eBLBaseComponents":DoDirectPaymentRequestDetails of XSD type "urn:ebay:apis:eBLBaseComponents":DoDirectPaymentRequestDetailsType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "urn:ebay:apis:eBLBaseComponents":CreateMobilePaymentRequestDetails of XSD type "urn:ebay:apis:eBLBaseComponents":CreateMobilePaymentRequestDetailsType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "urn:ebay:apis:eBLBaseComponents":GetMobileStatusRequestDetails of XSD type "urn:ebay:apis:eBLBaseComponents":GetMobileStatusRequestDetailsType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "urn:ebay:apis:eBLBaseComponents":SetCustomerBillingAgreementRequestDetails of XSD type "urn:ebay:apis:eBLBaseComponents":SetCustomerBillingAgreementRequestDetailsType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "urn:ebay:apis:eBLBaseComponents":GetBillingAgreementCustomerDetailsResponseDetails of XSD type "urn:ebay:apis:eBLBaseComponents":GetBillingAgreementCustomerDetailsResponseDetailsType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "urn:ebay:apis:eBLBaseComponents":DoReferenceTransactionRequestDetails of XSD type "urn:ebay:apis:eBLBaseComponents":DoReferenceTransactionRequestDetailsType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "urn:ebay:apis:eBLBaseComponents":DoReferenceTransactionResponseDetails of XSD type "urn:ebay:apis:eBLBaseComponents":DoReferenceTransactionResponseDetailsType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "urn:ebay:apis:eBLBaseComponents":DoNonReferencedCreditRequestDetails of XSD type "urn:ebay:apis:eBLBaseComponents":DoNonReferencedCreditRequestDetailsType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "urn:ebay:apis:eBLBaseComponents":DoNonReferencedCreditResponseDetails of XSD type "urn:ebay:apis:eBLBaseComponents":DoNonReferencedCreditResponseDetailsType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "urn:ebay:apis:eBLBaseComponents":UATPDetails of XSD type "urn:ebay:apis:eBLBaseComponents":UATPDetailsType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "urn:ebay:apis:eBLBaseComponents":CreateRecurringPaymentsProfileResponseDetails of XSD type "urn:ebay:apis:eBLBaseComponents":CreateRecurringPaymentsProfileResponseDetailsType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "urn:ebay:apis:eBLBaseComponents":CreateRecurringPaymentsProfileRequestDetails of XSD type "urn:ebay:apis:eBLBaseComponents":CreateRecurringPaymentsProfileRequestDetailsType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "urn:ebay:apis:eBLBaseComponents":EnhancedData of XSD type "urn:ebay:apis:eBLBaseComponents":EnhancedDataType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "urn:ebay:apis:eBLBaseComponents":AirlineItinerary of XSD type "urn:ebay:apis:eBLBaseComponents":AirlineItineraryType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "urn:ebay:apis:eBLBaseComponents":InstrumentDetails of XSD type "urn:ebay:apis:eBLBaseComponents":InstrumentDetailsType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "urn:ebay:apis:eBLBaseComponents":OfferDetails of XSD type "urn:ebay:apis:eBLBaseComponents":OfferDetailsType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "urn:ebay:apis:eBLBaseComponents":GetRecurringPaymentsProfileDetailsResponseDetails of XSD type "urn:ebay:apis:eBLBaseComponents":GetRecurringPaymentsProfileDetailsResponseDetailsType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "urn:ebay:apis:eBLBaseComponents":ManageRecurringPaymentsProfileStatusRequestDetails of XSD type "urn:ebay:apis:eBLBaseComponents":ManageRecurringPaymentsProfileStatusRequestDetailsType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "urn:ebay:apis:eBLBaseComponents":ManageRecurringPaymentsProfileStatusResponseDetails of XSD type "urn:ebay:apis:eBLBaseComponents":ManageRecurringPaymentsProfileStatusResponseDetailsType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "urn:ebay:apis:eBLBaseComponents":BillOutstandingAmountRequestDetails of XSD type "urn:ebay:apis:eBLBaseComponents":BillOutstandingAmountRequestDetailsType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "urn:ebay:apis:eBLBaseComponents":BillOutstandingAmountResponseDetails of XSD type "urn:ebay:apis:eBLBaseComponents":BillOutstandingAmountResponseDetailsType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "urn:ebay:apis:eBLBaseComponents":UpdateRecurringPaymentsProfileRequestDetails of XSD type "urn:ebay:apis:eBLBaseComponents":UpdateRecurringPaymentsProfileRequestDetailsType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "urn:ebay:apis:eBLBaseComponents":UpdateRecurringPaymentsProfileResponseDetails of XSD type "urn:ebay:apis:eBLBaseComponents":UpdateRecurringPaymentsProfileResponseDetailsType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "urn:ebay:apis:eBLBaseComponents":AuthorizationInfo of XSD type "urn:ebay:apis:eBLBaseComponents":AuthorizationInfoType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "urn:ebay:apis:eBLBaseComponents":GetIncentiveEvaluationRequestDetails of XSD type "urn:ebay:apis:eBLBaseComponents":GetIncentiveEvaluationRequestDetailsType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "urn:ebay:apis:eBLBaseComponents":GetIncentiveEvaluationResponseDetails of XSD type "urn:ebay:apis:eBLBaseComponents":GetIncentiveEvaluationResponseDetailsType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "urn:ebay:apis:eBLBaseComponents":MerchantStoreDetails of XSD type "urn:ebay:apis:eBLBaseComponents":MerchantStoreDetailsType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "urn:ebay:apis:eBLBaseComponents":RefundItemDetails of XSD type "urn:ebay:apis:eBLBaseComponents":InvoiceItemType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "urn:ebay:apis:eBLBaseComponents":MerchantData of XSD type "urn:ebay:apis:eBLBaseComponents":MerchantDataType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "urn:ebay:apis:eBLBaseComponents":MerchantDataMap of XSD type "urn:ebay:apis:eBLBaseComponents":TupleType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "urn:ebay:apis:eBLBaseComponents":ShipToAddress of XSD type "urn:ebay:apis:eBLBaseComponents":AddressType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "urn:ebay:apis:eBLBaseComponents":PaymentDetailsItem of XSD type "urn:ebay:apis:eBLBaseComponents":PaymentDetailsItemType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "urn:ebay:apis:eBLBaseComponents":EnterBoardingRequestDetails of XSD type "urn:ebay:apis:eBLBaseComponents":EnterBoardingRequestDetailsType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "urn:ebay:apis:eBLBaseComponents":GetBoardingDetailsResponseDetails of XSD type "urn:ebay:apis:eBLBaseComponents":GetBoardingDetailsResponseDetailsType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "urn:ebay:apis:eBLBaseComponents":SetMobileCheckoutRequestDetails of XSD type "urn:ebay:apis:eBLBaseComponents":SetMobileCheckoutRequestDetailsType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "urn:ebay:apis:eBLBaseComponents":DoMobileCheckoutPaymentResponseDetails of XSD type "urn:ebay:apis:eBLBaseComponents":DoMobileCheckoutPaymentResponseDetailsType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "urn:ebay:apis:eBLBaseComponents":SetEbayMobileCheckoutRequestDetails of XSD type "urn:ebay:apis:eBLBaseComponents":SetEbayMobileCheckoutRequestDetailsType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "urn:ebay:apis:eBLBaseComponents":ReverseTransactionRequestDetails of XSD type "urn:ebay:apis:eBLBaseComponents":ReverseTransactionRequestDetailsType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "urn:ebay:apis:eBLBaseComponents":ReverseTransactionResponseDetails of XSD type "urn:ebay:apis:eBLBaseComponents":ReverseTransactionResponseDetailsType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "urn:ebay:apis:eBLBaseComponents":RefundInfo of XSD type "urn:ebay:apis:eBLBaseComponents":RefundInfoType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Attributes                                            *
 *   urn:ebay:apis:eBLBaseComponents                                          *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Elements                                              *
 *   urn:ebay:apis:EnhancedDataTypes                                          *
 *                                                                            *
\******************************************************************************/

/// @brief Top-level root element "urn:ebay:apis:EnhancedDataTypes":EnhancedInitiateRecoupRequestDetails of XSD type "urn:ebay:apis:EnhancedDataTypes":EnhancedInitiateRecoupRequestDetailsType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "urn:ebay:apis:EnhancedDataTypes":EnhancedCompleteRecoupRequestDetails of XSD type "urn:ebay:apis:EnhancedDataTypes":EnhancedCompleteRecoupRequestDetailsType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "urn:ebay:apis:EnhancedDataTypes":EnhancedCompleteRecoupResponseDetails of XSD type "urn:ebay:apis:EnhancedDataTypes":EnhancedCompleteRecoupResponseDetailsType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "urn:ebay:apis:EnhancedDataTypes":EnhancedCancelRecoupRequestDetails of XSD type "urn:ebay:apis:EnhancedDataTypes":EnhancedCancelRecoupRequestDetailsType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Attributes                                            *
 *   urn:ebay:apis:EnhancedDataTypes                                          *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Services                                                                   *
 *                                                                            *
\******************************************************************************/


//gsoap ns1  service name:	PayPalAPISoapBinding 
//gsoap ns1  service type:	PayPalAPIInterface 
//gsoap ns1  service port:	https://api-aa.sandbox.paypal.com/2.0/ 
//gsoap ns1  service port:	https://api.sandbox.paypal.com/2.0/ 
//gsoap ns1  service namespace:	urn:ebay:api:PayPalAPI 
//gsoap ns1  service transport:	http://schemas.xmlsoap.org/soap/http 

/** @mainpage Service Definitions

@section Service_bindings Service Bindings

  - @ref PayPalAPISoapBinding

@section Service_more More Information

  - @ref page_notes "Notes"

  - @ref page_XMLDataBinding "XML Data Binding"

  - @ref SOAP_ENV__Header "SOAP Header Content" (when applicable)

  - @ref SOAP_ENV__Detail "SOAP Fault Detail Content" (when applicable)


*/

/**

@page PayPalAPISoapBinding Binding "PayPalAPISoapBinding"

@section PayPalAPISoapBinding_operations Operations of Binding "PayPalAPISoapBinding"

  - @ref __ns1__RefundTransaction

  - @ref __ns1__InitiateRecoup

  - @ref __ns1__CompleteRecoup

  - @ref __ns1__CancelRecoup

  - @ref __ns1__GetTransactionDetails

  - @ref __ns1__BMCreateButton

  - @ref __ns1__BMUpdateButton

  - @ref __ns1__BMSetInventory

  - @ref __ns1__BMGetButtonDetails

  - @ref __ns1__BMGetInventory

  - @ref __ns1__BMManageButtonStatus

  - @ref __ns1__BMButtonSearch

  - @ref __ns1__BillUser

  - @ref __ns1__TransactionSearch

  - @ref __ns1__MassPay

  - @ref __ns1__BillAgreementUpdate

  - @ref __ns1__AddressVerify

  - @ref __ns1__EnterBoarding

  - @ref __ns1__GetBoardingDetails

  - @ref __ns1__CreateMobilePayment

  - @ref __ns1__GetMobileStatus

  - @ref __ns1__SetMobileCheckout

  - @ref __ns1__DoMobileCheckoutPayment

  - @ref __ns1__GetBalance

  - @ref __ns1__GetPalDetails

  - @ref __ns1__DoExpressCheckoutPayment

  - @ref __ns1__DoUATPExpressCheckoutPayment

  - @ref __ns1__SetAuthFlowParam

  - @ref __ns1__GetAuthDetails

  - @ref __ns1__SetAccessPermissions

  - @ref __ns1__UpdateAccessPermissions

  - @ref __ns1__GetAccessPermissionDetails

  - @ref __ns1__GetIncentiveEvaluation

  - @ref __ns1__SetExpressCheckout

  - @ref __ns1__ExecuteCheckoutOperations

  - @ref __ns1__GetExpressCheckoutDetails

  - @ref __ns1__DoDirectPayment

  - @ref __ns1__ManagePendingTransactionStatus

  - @ref __ns1__DoCancel

  - @ref __ns1__DoCapture

  - @ref __ns1__DoReauthorization

  - @ref __ns1__DoVoid

  - @ref __ns1__DoAuthorization

  - @ref __ns1__UpdateAuthorization

  - @ref __ns1__DoUATPAuthorization

  - @ref __ns1__SetCustomerBillingAgreement

  - @ref __ns1__GetBillingAgreementCustomerDetails

  - @ref __ns1__CreateBillingAgreement

  - @ref __ns1__DoReferenceTransaction

  - @ref __ns1__CreateRecurringPaymentsProfile

  - @ref __ns1__GetRecurringPaymentsProfileDetails

  - @ref __ns1__ManageRecurringPaymentsProfileStatus

  - @ref __ns1__BillOutstandingAmount

  - @ref __ns1__UpdateRecurringPaymentsProfile

  - @ref __ns1__DoNonReferencedCredit

  - @ref __ns1__ReverseTransaction

  - @ref __ns1__ExternalRememberMeOptOut

@section PayPalAPISoapBinding_ports Default endpoints of Binding "PayPalAPISoapBinding"

  - https://api-aa.sandbox.paypal.com/2.0/

  - https://api.sandbox.paypal.com/2.0/

@note Multiple service bindings collected as one, use wsdl2h option -Nname to produce a separate service for each binding


*/

/******************************************************************************\
 *                                                                            *
 * SOAP Header                                                                *
 *                                                                            *
\******************************************************************************/

/**

The SOAP Header is part of the gSOAP context and its content is accessed
through the soap.header variable. You may have to set the soap.actor variable
to serialize SOAP Headers with SOAP-ENV:actor or SOAP-ENV:role attributes.
Use option -j to remove entire SOAP Header definition.
Use option -k to remove the mustUnderstand qualifiers.

*/
mutable struct SOAP_ENV__Header
{
/// "RequesterCredentials" SOAP Header part element.
    ns3__CustomSecurityHeaderType*       ns1__RequesterCredentials     ;

};


/******************************************************************************\
 *                                                                            *
 * Service Binding                                                            *
 *   PayPalAPISoapBinding                                                     *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__RefundTransaction                                                 *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__RefundTransaction" of service binding "PayPalAPISoapBinding".

  - SOAP document/literal style messaging

  - Default endpoints:
    - https://api-aa.sandbox.paypal.com/2.0/
    - https://api.sandbox.paypal.com/2.0/

  - Addressing input action: ""

  - Addressing output action: "Response"

  - Request message has mandatory header part(s) (see @ref SOAP_ENV__Header):
    - ns1__RequesterCredentials

  - Response message has mandatory header part(s): (see @ref SOAP_ENV__Header)
    - ns1__RequesterCredentials

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__RefundTransaction(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__RefundTransactionReq*         ns1__RefundTransactionReq,
    // output parameters:
    ns1__RefundTransactionResponseType &ns1__RefundTransactionResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__RefundTransaction(
    struct soap *soap,
    // input parameters:
    _ns1__RefundTransactionReq*         ns1__RefundTransactionReq,
    // output parameters:
    ns1__RefundTransactionResponseType &ns1__RefundTransactionResponse
  );
@endcode

C++ proxy class (defined in soapPayPalAPISoapBindingProxy.h generated with soapcpp2):
@code
  class PayPalAPISoapBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapPayPalAPISoapBindingService.h generated with soapcpp2):
@code
  class PayPalAPISoapBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	RefundTransaction SOAP
//gsoap ns1  service method-style:	RefundTransaction document
//gsoap ns1  service method-encoding:	RefundTransaction literal
//gsoap ns1  service method-action:	RefundTransaction ""
//gsoap ns1  service method-output-action:	RefundTransaction Response
//gsoap ns1  service method-input-header-part:	RefundTransaction ns1__RequesterCredentials
//gsoap ns1  service method-output-header-part:	RefundTransaction ns1__RequesterCredentials
int __ns1__RefundTransaction(
    _ns1__RefundTransactionReq*         ns1__RefundTransactionReq,	///< Input parameter
    ns1__RefundTransactionResponseType &ns1__RefundTransactionResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__InitiateRecoup                                                    *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__InitiateRecoup" of service binding "PayPalAPISoapBinding".

  - SOAP document/literal style messaging

  - Default endpoints:
    - https://api-aa.sandbox.paypal.com/2.0/
    - https://api.sandbox.paypal.com/2.0/

  - Addressing input action: ""

  - Addressing output action: "Response"

  - Request message has mandatory header part(s) (see @ref SOAP_ENV__Header):
    - ns1__RequesterCredentials

  - Response message has mandatory header part(s): (see @ref SOAP_ENV__Header)
    - ns1__RequesterCredentials

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__InitiateRecoup(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__InitiateRecoupReq*            ns1__InitiateRecoupReq,
    // output parameters:
    ns1__InitiateRecoupResponseType    &ns1__InitiateRecoupResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__InitiateRecoup(
    struct soap *soap,
    // input parameters:
    _ns1__InitiateRecoupReq*            ns1__InitiateRecoupReq,
    // output parameters:
    ns1__InitiateRecoupResponseType    &ns1__InitiateRecoupResponse
  );
@endcode

C++ proxy class (defined in soapPayPalAPISoapBindingProxy.h generated with soapcpp2):
@code
  class PayPalAPISoapBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapPayPalAPISoapBindingService.h generated with soapcpp2):
@code
  class PayPalAPISoapBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	InitiateRecoup SOAP
//gsoap ns1  service method-style:	InitiateRecoup document
//gsoap ns1  service method-encoding:	InitiateRecoup literal
//gsoap ns1  service method-action:	InitiateRecoup ""
//gsoap ns1  service method-output-action:	InitiateRecoup Response
//gsoap ns1  service method-input-header-part:	InitiateRecoup ns1__RequesterCredentials
//gsoap ns1  service method-output-header-part:	InitiateRecoup ns1__RequesterCredentials
int __ns1__InitiateRecoup(
    _ns1__InitiateRecoupReq*            ns1__InitiateRecoupReq,	///< Input parameter
    ns1__InitiateRecoupResponseType    &ns1__InitiateRecoupResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__CompleteRecoup                                                    *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__CompleteRecoup" of service binding "PayPalAPISoapBinding".

  - SOAP document/literal style messaging

  - Default endpoints:
    - https://api-aa.sandbox.paypal.com/2.0/
    - https://api.sandbox.paypal.com/2.0/

  - Addressing input action: ""

  - Addressing output action: "Response"

  - Request message has mandatory header part(s) (see @ref SOAP_ENV__Header):
    - ns1__RequesterCredentials

  - Response message has mandatory header part(s): (see @ref SOAP_ENV__Header)
    - ns1__RequesterCredentials

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__CompleteRecoup(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__CompleteRecoupReq*            ns1__CompleteRecoupReq,
    // output parameters:
    ns1__CompleteRecoupResponseType    &ns1__CompleteRecoupResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__CompleteRecoup(
    struct soap *soap,
    // input parameters:
    _ns1__CompleteRecoupReq*            ns1__CompleteRecoupReq,
    // output parameters:
    ns1__CompleteRecoupResponseType    &ns1__CompleteRecoupResponse
  );
@endcode

C++ proxy class (defined in soapPayPalAPISoapBindingProxy.h generated with soapcpp2):
@code
  class PayPalAPISoapBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapPayPalAPISoapBindingService.h generated with soapcpp2):
@code
  class PayPalAPISoapBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	CompleteRecoup SOAP
//gsoap ns1  service method-style:	CompleteRecoup document
//gsoap ns1  service method-encoding:	CompleteRecoup literal
//gsoap ns1  service method-action:	CompleteRecoup ""
//gsoap ns1  service method-output-action:	CompleteRecoup Response
//gsoap ns1  service method-input-header-part:	CompleteRecoup ns1__RequesterCredentials
//gsoap ns1  service method-output-header-part:	CompleteRecoup ns1__RequesterCredentials
int __ns1__CompleteRecoup(
    _ns1__CompleteRecoupReq*            ns1__CompleteRecoupReq,	///< Input parameter
    ns1__CompleteRecoupResponseType    &ns1__CompleteRecoupResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__CancelRecoup                                                      *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__CancelRecoup" of service binding "PayPalAPISoapBinding".

  - SOAP document/literal style messaging

  - Default endpoints:
    - https://api-aa.sandbox.paypal.com/2.0/
    - https://api.sandbox.paypal.com/2.0/

  - Addressing input action: ""

  - Addressing output action: "Response"

  - Request message has mandatory header part(s) (see @ref SOAP_ENV__Header):
    - ns1__RequesterCredentials

  - Response message has mandatory header part(s): (see @ref SOAP_ENV__Header)
    - ns1__RequesterCredentials

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__CancelRecoup(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__CancelRecoupReq*              ns1__CancelRecoupReq,
    // output parameters:
    ns1__CancelRecoupResponseType      &ns1__CancelRecoupResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__CancelRecoup(
    struct soap *soap,
    // input parameters:
    _ns1__CancelRecoupReq*              ns1__CancelRecoupReq,
    // output parameters:
    ns1__CancelRecoupResponseType      &ns1__CancelRecoupResponse
  );
@endcode

C++ proxy class (defined in soapPayPalAPISoapBindingProxy.h generated with soapcpp2):
@code
  class PayPalAPISoapBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapPayPalAPISoapBindingService.h generated with soapcpp2):
@code
  class PayPalAPISoapBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	CancelRecoup SOAP
//gsoap ns1  service method-style:	CancelRecoup document
//gsoap ns1  service method-encoding:	CancelRecoup literal
//gsoap ns1  service method-action:	CancelRecoup ""
//gsoap ns1  service method-output-action:	CancelRecoup Response
//gsoap ns1  service method-input-header-part:	CancelRecoup ns1__RequesterCredentials
//gsoap ns1  service method-output-header-part:	CancelRecoup ns1__RequesterCredentials
int __ns1__CancelRecoup(
    _ns1__CancelRecoupReq*              ns1__CancelRecoupReq,	///< Input parameter
    ns1__CancelRecoupResponseType      &ns1__CancelRecoupResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__GetTransactionDetails                                             *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__GetTransactionDetails" of service binding "PayPalAPISoapBinding".

  - SOAP document/literal style messaging

  - Default endpoints:
    - https://api-aa.sandbox.paypal.com/2.0/
    - https://api.sandbox.paypal.com/2.0/

  - Addressing input action: ""

  - Addressing output action: "Response"

  - Request message has mandatory header part(s) (see @ref SOAP_ENV__Header):
    - ns1__RequesterCredentials

  - Response message has mandatory header part(s): (see @ref SOAP_ENV__Header)
    - ns1__RequesterCredentials

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__GetTransactionDetails(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__GetTransactionDetailsReq*     ns1__GetTransactionDetailsReq,
    // output parameters:
    ns1__GetTransactionDetailsResponseType&ns1__GetTransactionDetailsResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__GetTransactionDetails(
    struct soap *soap,
    // input parameters:
    _ns1__GetTransactionDetailsReq*     ns1__GetTransactionDetailsReq,
    // output parameters:
    ns1__GetTransactionDetailsResponseType&ns1__GetTransactionDetailsResponse
  );
@endcode

C++ proxy class (defined in soapPayPalAPISoapBindingProxy.h generated with soapcpp2):
@code
  class PayPalAPISoapBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapPayPalAPISoapBindingService.h generated with soapcpp2):
@code
  class PayPalAPISoapBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	GetTransactionDetails SOAP
//gsoap ns1  service method-style:	GetTransactionDetails document
//gsoap ns1  service method-encoding:	GetTransactionDetails literal
//gsoap ns1  service method-action:	GetTransactionDetails ""
//gsoap ns1  service method-output-action:	GetTransactionDetails Response
//gsoap ns1  service method-input-header-part:	GetTransactionDetails ns1__RequesterCredentials
//gsoap ns1  service method-output-header-part:	GetTransactionDetails ns1__RequesterCredentials
int __ns1__GetTransactionDetails(
    _ns1__GetTransactionDetailsReq*     ns1__GetTransactionDetailsReq,	///< Input parameter
    ns1__GetTransactionDetailsResponseType&ns1__GetTransactionDetailsResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__BMCreateButton                                                    *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__BMCreateButton" of service binding "PayPalAPISoapBinding".

  - SOAP document/literal style messaging

  - Default endpoints:
    - https://api-aa.sandbox.paypal.com/2.0/
    - https://api.sandbox.paypal.com/2.0/

  - Addressing input action: ""

  - Addressing output action: "Response"

  - Request message has mandatory header part(s) (see @ref SOAP_ENV__Header):
    - ns1__RequesterCredentials

  - Response message has mandatory header part(s): (see @ref SOAP_ENV__Header)
    - ns1__RequesterCredentials

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__BMCreateButton(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__BMCreateButtonReq*            ns1__BMCreateButtonReq,
    // output parameters:
    ns1__BMCreateButtonResponseType    &ns1__BMCreateButtonResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__BMCreateButton(
    struct soap *soap,
    // input parameters:
    _ns1__BMCreateButtonReq*            ns1__BMCreateButtonReq,
    // output parameters:
    ns1__BMCreateButtonResponseType    &ns1__BMCreateButtonResponse
  );
@endcode

C++ proxy class (defined in soapPayPalAPISoapBindingProxy.h generated with soapcpp2):
@code
  class PayPalAPISoapBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapPayPalAPISoapBindingService.h generated with soapcpp2):
@code
  class PayPalAPISoapBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	BMCreateButton SOAP
//gsoap ns1  service method-style:	BMCreateButton document
//gsoap ns1  service method-encoding:	BMCreateButton literal
//gsoap ns1  service method-action:	BMCreateButton ""
//gsoap ns1  service method-output-action:	BMCreateButton Response
//gsoap ns1  service method-input-header-part:	BMCreateButton ns1__RequesterCredentials
//gsoap ns1  service method-output-header-part:	BMCreateButton ns1__RequesterCredentials
int __ns1__BMCreateButton(
    _ns1__BMCreateButtonReq*            ns1__BMCreateButtonReq,	///< Input parameter
    ns1__BMCreateButtonResponseType    &ns1__BMCreateButtonResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__BMUpdateButton                                                    *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__BMUpdateButton" of service binding "PayPalAPISoapBinding".

  - SOAP document/literal style messaging

  - Default endpoints:
    - https://api-aa.sandbox.paypal.com/2.0/
    - https://api.sandbox.paypal.com/2.0/

  - Addressing input action: ""

  - Addressing output action: "Response"

  - Request message has mandatory header part(s) (see @ref SOAP_ENV__Header):
    - ns1__RequesterCredentials

  - Response message has mandatory header part(s): (see @ref SOAP_ENV__Header)
    - ns1__RequesterCredentials

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__BMUpdateButton(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__BMUpdateButtonReq*            ns1__BMUpdateButtonReq,
    // output parameters:
    ns1__BMUpdateButtonResponseType    &ns1__BMUpdateButtonResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__BMUpdateButton(
    struct soap *soap,
    // input parameters:
    _ns1__BMUpdateButtonReq*            ns1__BMUpdateButtonReq,
    // output parameters:
    ns1__BMUpdateButtonResponseType    &ns1__BMUpdateButtonResponse
  );
@endcode

C++ proxy class (defined in soapPayPalAPISoapBindingProxy.h generated with soapcpp2):
@code
  class PayPalAPISoapBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapPayPalAPISoapBindingService.h generated with soapcpp2):
@code
  class PayPalAPISoapBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	BMUpdateButton SOAP
//gsoap ns1  service method-style:	BMUpdateButton document
//gsoap ns1  service method-encoding:	BMUpdateButton literal
//gsoap ns1  service method-action:	BMUpdateButton ""
//gsoap ns1  service method-output-action:	BMUpdateButton Response
//gsoap ns1  service method-input-header-part:	BMUpdateButton ns1__RequesterCredentials
//gsoap ns1  service method-output-header-part:	BMUpdateButton ns1__RequesterCredentials
int __ns1__BMUpdateButton(
    _ns1__BMUpdateButtonReq*            ns1__BMUpdateButtonReq,	///< Input parameter
    ns1__BMUpdateButtonResponseType    &ns1__BMUpdateButtonResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__BMSetInventory                                                    *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__BMSetInventory" of service binding "PayPalAPISoapBinding".

  - SOAP document/literal style messaging

  - Default endpoints:
    - https://api-aa.sandbox.paypal.com/2.0/
    - https://api.sandbox.paypal.com/2.0/

  - Addressing input action: ""

  - Addressing output action: "Response"

  - Request message has mandatory header part(s) (see @ref SOAP_ENV__Header):
    - ns1__RequesterCredentials

  - Response message has mandatory header part(s): (see @ref SOAP_ENV__Header)
    - ns1__RequesterCredentials

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__BMSetInventory(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__BMSetInventoryReq*            ns1__BMSetInventoryReq,
    // output parameters:
    ns1__BMSetInventoryResponseType    &ns1__BMSetInventoryResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__BMSetInventory(
    struct soap *soap,
    // input parameters:
    _ns1__BMSetInventoryReq*            ns1__BMSetInventoryReq,
    // output parameters:
    ns1__BMSetInventoryResponseType    &ns1__BMSetInventoryResponse
  );
@endcode

C++ proxy class (defined in soapPayPalAPISoapBindingProxy.h generated with soapcpp2):
@code
  class PayPalAPISoapBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapPayPalAPISoapBindingService.h generated with soapcpp2):
@code
  class PayPalAPISoapBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	BMSetInventory SOAP
//gsoap ns1  service method-style:	BMSetInventory document
//gsoap ns1  service method-encoding:	BMSetInventory literal
//gsoap ns1  service method-action:	BMSetInventory ""
//gsoap ns1  service method-output-action:	BMSetInventory Response
//gsoap ns1  service method-input-header-part:	BMSetInventory ns1__RequesterCredentials
//gsoap ns1  service method-output-header-part:	BMSetInventory ns1__RequesterCredentials
int __ns1__BMSetInventory(
    _ns1__BMSetInventoryReq*            ns1__BMSetInventoryReq,	///< Input parameter
    ns1__BMSetInventoryResponseType    &ns1__BMSetInventoryResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__BMGetButtonDetails                                                *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__BMGetButtonDetails" of service binding "PayPalAPISoapBinding".

  - SOAP document/literal style messaging

  - Default endpoints:
    - https://api-aa.sandbox.paypal.com/2.0/
    - https://api.sandbox.paypal.com/2.0/

  - Addressing input action: ""

  - Addressing output action: "Response"

  - Request message has mandatory header part(s) (see @ref SOAP_ENV__Header):
    - ns1__RequesterCredentials

  - Response message has mandatory header part(s): (see @ref SOAP_ENV__Header)
    - ns1__RequesterCredentials

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__BMGetButtonDetails(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__BMGetButtonDetailsReq*        ns1__BMGetButtonDetailsReq,
    // output parameters:
    ns1__BMGetButtonDetailsResponseType&ns1__BMGetButtonDetailsResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__BMGetButtonDetails(
    struct soap *soap,
    // input parameters:
    _ns1__BMGetButtonDetailsReq*        ns1__BMGetButtonDetailsReq,
    // output parameters:
    ns1__BMGetButtonDetailsResponseType&ns1__BMGetButtonDetailsResponse
  );
@endcode

C++ proxy class (defined in soapPayPalAPISoapBindingProxy.h generated with soapcpp2):
@code
  class PayPalAPISoapBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapPayPalAPISoapBindingService.h generated with soapcpp2):
@code
  class PayPalAPISoapBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	BMGetButtonDetails SOAP
//gsoap ns1  service method-style:	BMGetButtonDetails document
//gsoap ns1  service method-encoding:	BMGetButtonDetails literal
//gsoap ns1  service method-action:	BMGetButtonDetails ""
//gsoap ns1  service method-output-action:	BMGetButtonDetails Response
//gsoap ns1  service method-input-header-part:	BMGetButtonDetails ns1__RequesterCredentials
//gsoap ns1  service method-output-header-part:	BMGetButtonDetails ns1__RequesterCredentials
int __ns1__BMGetButtonDetails(
    _ns1__BMGetButtonDetailsReq*        ns1__BMGetButtonDetailsReq,	///< Input parameter
    ns1__BMGetButtonDetailsResponseType&ns1__BMGetButtonDetailsResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__BMGetInventory                                                    *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__BMGetInventory" of service binding "PayPalAPISoapBinding".

  - SOAP document/literal style messaging

  - Default endpoints:
    - https://api-aa.sandbox.paypal.com/2.0/
    - https://api.sandbox.paypal.com/2.0/

  - Addressing input action: ""

  - Addressing output action: "Response"

  - Request message has mandatory header part(s) (see @ref SOAP_ENV__Header):
    - ns1__RequesterCredentials

  - Response message has mandatory header part(s): (see @ref SOAP_ENV__Header)
    - ns1__RequesterCredentials

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__BMGetInventory(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__BMGetInventoryReq*            ns1__BMGetInventoryReq,
    // output parameters:
    ns1__BMGetInventoryResponseType    &ns1__BMGetInventoryResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__BMGetInventory(
    struct soap *soap,
    // input parameters:
    _ns1__BMGetInventoryReq*            ns1__BMGetInventoryReq,
    // output parameters:
    ns1__BMGetInventoryResponseType    &ns1__BMGetInventoryResponse
  );
@endcode

C++ proxy class (defined in soapPayPalAPISoapBindingProxy.h generated with soapcpp2):
@code
  class PayPalAPISoapBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapPayPalAPISoapBindingService.h generated with soapcpp2):
@code
  class PayPalAPISoapBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	BMGetInventory SOAP
//gsoap ns1  service method-style:	BMGetInventory document
//gsoap ns1  service method-encoding:	BMGetInventory literal
//gsoap ns1  service method-action:	BMGetInventory ""
//gsoap ns1  service method-output-action:	BMGetInventory Response
//gsoap ns1  service method-input-header-part:	BMGetInventory ns1__RequesterCredentials
//gsoap ns1  service method-output-header-part:	BMGetInventory ns1__RequesterCredentials
int __ns1__BMGetInventory(
    _ns1__BMGetInventoryReq*            ns1__BMGetInventoryReq,	///< Input parameter
    ns1__BMGetInventoryResponseType    &ns1__BMGetInventoryResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__BMManageButtonStatus                                              *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__BMManageButtonStatus" of service binding "PayPalAPISoapBinding".

  - SOAP document/literal style messaging

  - Default endpoints:
    - https://api-aa.sandbox.paypal.com/2.0/
    - https://api.sandbox.paypal.com/2.0/

  - Addressing input action: ""

  - Addressing output action: "Response"

  - Request message has mandatory header part(s) (see @ref SOAP_ENV__Header):
    - ns1__RequesterCredentials

  - Response message has mandatory header part(s): (see @ref SOAP_ENV__Header)
    - ns1__RequesterCredentials

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__BMManageButtonStatus(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__BMManageButtonStatusReq*      ns1__BMManageButtonStatusReq,
    // output parameters:
    ns1__BMManageButtonStatusResponseType&ns1__BMManageButtonStatusResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__BMManageButtonStatus(
    struct soap *soap,
    // input parameters:
    _ns1__BMManageButtonStatusReq*      ns1__BMManageButtonStatusReq,
    // output parameters:
    ns1__BMManageButtonStatusResponseType&ns1__BMManageButtonStatusResponse
  );
@endcode

C++ proxy class (defined in soapPayPalAPISoapBindingProxy.h generated with soapcpp2):
@code
  class PayPalAPISoapBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapPayPalAPISoapBindingService.h generated with soapcpp2):
@code
  class PayPalAPISoapBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	BMManageButtonStatus SOAP
//gsoap ns1  service method-style:	BMManageButtonStatus document
//gsoap ns1  service method-encoding:	BMManageButtonStatus literal
//gsoap ns1  service method-action:	BMManageButtonStatus ""
//gsoap ns1  service method-output-action:	BMManageButtonStatus Response
//gsoap ns1  service method-input-header-part:	BMManageButtonStatus ns1__RequesterCredentials
//gsoap ns1  service method-output-header-part:	BMManageButtonStatus ns1__RequesterCredentials
int __ns1__BMManageButtonStatus(
    _ns1__BMManageButtonStatusReq*      ns1__BMManageButtonStatusReq,	///< Input parameter
    ns1__BMManageButtonStatusResponseType&ns1__BMManageButtonStatusResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__BMButtonSearch                                                    *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__BMButtonSearch" of service binding "PayPalAPISoapBinding".

  - SOAP document/literal style messaging

  - Default endpoints:
    - https://api-aa.sandbox.paypal.com/2.0/
    - https://api.sandbox.paypal.com/2.0/

  - Addressing input action: ""

  - Addressing output action: "Response"

  - Request message has mandatory header part(s) (see @ref SOAP_ENV__Header):
    - ns1__RequesterCredentials

  - Response message has mandatory header part(s): (see @ref SOAP_ENV__Header)
    - ns1__RequesterCredentials

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__BMButtonSearch(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__BMButtonSearchReq*            ns1__BMButtonSearchReq,
    // output parameters:
    ns1__BMButtonSearchResponseType    &ns1__BMButtonSearchResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__BMButtonSearch(
    struct soap *soap,
    // input parameters:
    _ns1__BMButtonSearchReq*            ns1__BMButtonSearchReq,
    // output parameters:
    ns1__BMButtonSearchResponseType    &ns1__BMButtonSearchResponse
  );
@endcode

C++ proxy class (defined in soapPayPalAPISoapBindingProxy.h generated with soapcpp2):
@code
  class PayPalAPISoapBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapPayPalAPISoapBindingService.h generated with soapcpp2):
@code
  class PayPalAPISoapBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	BMButtonSearch SOAP
//gsoap ns1  service method-style:	BMButtonSearch document
//gsoap ns1  service method-encoding:	BMButtonSearch literal
//gsoap ns1  service method-action:	BMButtonSearch ""
//gsoap ns1  service method-output-action:	BMButtonSearch Response
//gsoap ns1  service method-input-header-part:	BMButtonSearch ns1__RequesterCredentials
//gsoap ns1  service method-output-header-part:	BMButtonSearch ns1__RequesterCredentials
int __ns1__BMButtonSearch(
    _ns1__BMButtonSearchReq*            ns1__BMButtonSearchReq,	///< Input parameter
    ns1__BMButtonSearchResponseType    &ns1__BMButtonSearchResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__BillUser                                                          *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__BillUser" of service binding "PayPalAPISoapBinding".

  - SOAP document/literal style messaging

  - Default endpoints:
    - https://api-aa.sandbox.paypal.com/2.0/
    - https://api.sandbox.paypal.com/2.0/

  - Addressing input action: ""

  - Addressing output action: "Response"

  - Request message has mandatory header part(s) (see @ref SOAP_ENV__Header):
    - ns1__RequesterCredentials

  - Response message has mandatory header part(s): (see @ref SOAP_ENV__Header)
    - ns1__RequesterCredentials

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__BillUser(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__BillUserReq*                  ns1__BillUserReq,
    // output parameters:
    ns1__BillUserResponseType          &ns1__BillUserResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__BillUser(
    struct soap *soap,
    // input parameters:
    _ns1__BillUserReq*                  ns1__BillUserReq,
    // output parameters:
    ns1__BillUserResponseType          &ns1__BillUserResponse
  );
@endcode

C++ proxy class (defined in soapPayPalAPISoapBindingProxy.h generated with soapcpp2):
@code
  class PayPalAPISoapBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapPayPalAPISoapBindingService.h generated with soapcpp2):
@code
  class PayPalAPISoapBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	BillUser SOAP
//gsoap ns1  service method-style:	BillUser document
//gsoap ns1  service method-encoding:	BillUser literal
//gsoap ns1  service method-action:	BillUser ""
//gsoap ns1  service method-output-action:	BillUser Response
//gsoap ns1  service method-input-header-part:	BillUser ns1__RequesterCredentials
//gsoap ns1  service method-output-header-part:	BillUser ns1__RequesterCredentials
int __ns1__BillUser(
    _ns1__BillUserReq*                  ns1__BillUserReq,	///< Input parameter
    ns1__BillUserResponseType          &ns1__BillUserResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__TransactionSearch                                                 *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__TransactionSearch" of service binding "PayPalAPISoapBinding".

  - SOAP document/literal style messaging

  - Default endpoints:
    - https://api-aa.sandbox.paypal.com/2.0/
    - https://api.sandbox.paypal.com/2.0/

  - Addressing input action: ""

  - Addressing output action: "Response"

  - Request message has mandatory header part(s) (see @ref SOAP_ENV__Header):
    - ns1__RequesterCredentials

  - Response message has mandatory header part(s): (see @ref SOAP_ENV__Header)
    - ns1__RequesterCredentials

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__TransactionSearch(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__TransactionSearchReq*         ns1__TransactionSearchReq,
    // output parameters:
    ns1__TransactionSearchResponseType &ns1__TransactionSearchResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__TransactionSearch(
    struct soap *soap,
    // input parameters:
    _ns1__TransactionSearchReq*         ns1__TransactionSearchReq,
    // output parameters:
    ns1__TransactionSearchResponseType &ns1__TransactionSearchResponse
  );
@endcode

C++ proxy class (defined in soapPayPalAPISoapBindingProxy.h generated with soapcpp2):
@code
  class PayPalAPISoapBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapPayPalAPISoapBindingService.h generated with soapcpp2):
@code
  class PayPalAPISoapBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	TransactionSearch SOAP
//gsoap ns1  service method-style:	TransactionSearch document
//gsoap ns1  service method-encoding:	TransactionSearch literal
//gsoap ns1  service method-action:	TransactionSearch ""
//gsoap ns1  service method-output-action:	TransactionSearch Response
//gsoap ns1  service method-input-header-part:	TransactionSearch ns1__RequesterCredentials
//gsoap ns1  service method-output-header-part:	TransactionSearch ns1__RequesterCredentials
int __ns1__TransactionSearch(
    _ns1__TransactionSearchReq*         ns1__TransactionSearchReq,	///< Input parameter
    ns1__TransactionSearchResponseType &ns1__TransactionSearchResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__MassPay                                                           *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__MassPay" of service binding "PayPalAPISoapBinding".

  - SOAP document/literal style messaging

  - Default endpoints:
    - https://api-aa.sandbox.paypal.com/2.0/
    - https://api.sandbox.paypal.com/2.0/

  - Addressing input action: ""

  - Addressing output action: "Response"

  - Request message has mandatory header part(s) (see @ref SOAP_ENV__Header):
    - ns1__RequesterCredentials

  - Response message has mandatory header part(s): (see @ref SOAP_ENV__Header)
    - ns1__RequesterCredentials

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__MassPay(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__MassPayReq*                   ns1__MassPayReq,
    // output parameters:
    ns1__MassPayResponseType           &ns1__MassPayResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__MassPay(
    struct soap *soap,
    // input parameters:
    _ns1__MassPayReq*                   ns1__MassPayReq,
    // output parameters:
    ns1__MassPayResponseType           &ns1__MassPayResponse
  );
@endcode

C++ proxy class (defined in soapPayPalAPISoapBindingProxy.h generated with soapcpp2):
@code
  class PayPalAPISoapBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapPayPalAPISoapBindingService.h generated with soapcpp2):
@code
  class PayPalAPISoapBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	MassPay SOAP
//gsoap ns1  service method-style:	MassPay document
//gsoap ns1  service method-encoding:	MassPay literal
//gsoap ns1  service method-action:	MassPay ""
//gsoap ns1  service method-output-action:	MassPay Response
//gsoap ns1  service method-input-header-part:	MassPay ns1__RequesterCredentials
//gsoap ns1  service method-output-header-part:	MassPay ns1__RequesterCredentials
int __ns1__MassPay(
    _ns1__MassPayReq*                   ns1__MassPayReq,	///< Input parameter
    ns1__MassPayResponseType           &ns1__MassPayResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__BillAgreementUpdate                                               *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__BillAgreementUpdate" of service binding "PayPalAPISoapBinding".

  - SOAP document/literal style messaging

  - Default endpoints:
    - https://api-aa.sandbox.paypal.com/2.0/
    - https://api.sandbox.paypal.com/2.0/

  - Addressing input action: ""

  - Addressing output action: "Response"

  - Request message has mandatory header part(s) (see @ref SOAP_ENV__Header):
    - ns1__RequesterCredentials

  - Response message has mandatory header part(s): (see @ref SOAP_ENV__Header)
    - ns1__RequesterCredentials

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__BillAgreementUpdate(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__BillAgreementUpdateReq*       ns1__BillAgreementUpdateReq,
    // output parameters:
    ns1__BAUpdateResponseType          &ns1__BAUpdateResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__BillAgreementUpdate(
    struct soap *soap,
    // input parameters:
    _ns1__BillAgreementUpdateReq*       ns1__BillAgreementUpdateReq,
    // output parameters:
    ns1__BAUpdateResponseType          &ns1__BAUpdateResponse
  );
@endcode

C++ proxy class (defined in soapPayPalAPISoapBindingProxy.h generated with soapcpp2):
@code
  class PayPalAPISoapBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapPayPalAPISoapBindingService.h generated with soapcpp2):
@code
  class PayPalAPISoapBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	BillAgreementUpdate SOAP
//gsoap ns1  service method-style:	BillAgreementUpdate document
//gsoap ns1  service method-encoding:	BillAgreementUpdate literal
//gsoap ns1  service method-action:	BillAgreementUpdate ""
//gsoap ns1  service method-output-action:	BillAgreementUpdate Response
//gsoap ns1  service method-input-header-part:	BillAgreementUpdate ns1__RequesterCredentials
//gsoap ns1  service method-output-header-part:	BillAgreementUpdate ns1__RequesterCredentials
int __ns1__BillAgreementUpdate(
    _ns1__BillAgreementUpdateReq*       ns1__BillAgreementUpdateReq,	///< Input parameter
    ns1__BAUpdateResponseType          &ns1__BAUpdateResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__AddressVerify                                                     *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__AddressVerify" of service binding "PayPalAPISoapBinding".

  - SOAP document/literal style messaging

  - Default endpoints:
    - https://api-aa.sandbox.paypal.com/2.0/
    - https://api.sandbox.paypal.com/2.0/

  - Addressing input action: ""

  - Addressing output action: "Response"

  - Request message has mandatory header part(s) (see @ref SOAP_ENV__Header):
    - ns1__RequesterCredentials

  - Response message has mandatory header part(s): (see @ref SOAP_ENV__Header)
    - ns1__RequesterCredentials

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__AddressVerify(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__AddressVerifyReq*             ns1__AddressVerifyReq,
    // output parameters:
    ns1__AddressVerifyResponseType     &ns1__AddressVerifyResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__AddressVerify(
    struct soap *soap,
    // input parameters:
    _ns1__AddressVerifyReq*             ns1__AddressVerifyReq,
    // output parameters:
    ns1__AddressVerifyResponseType     &ns1__AddressVerifyResponse
  );
@endcode

C++ proxy class (defined in soapPayPalAPISoapBindingProxy.h generated with soapcpp2):
@code
  class PayPalAPISoapBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapPayPalAPISoapBindingService.h generated with soapcpp2):
@code
  class PayPalAPISoapBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	AddressVerify SOAP
//gsoap ns1  service method-style:	AddressVerify document
//gsoap ns1  service method-encoding:	AddressVerify literal
//gsoap ns1  service method-action:	AddressVerify ""
//gsoap ns1  service method-output-action:	AddressVerify Response
//gsoap ns1  service method-input-header-part:	AddressVerify ns1__RequesterCredentials
//gsoap ns1  service method-output-header-part:	AddressVerify ns1__RequesterCredentials
int __ns1__AddressVerify(
    _ns1__AddressVerifyReq*             ns1__AddressVerifyReq,	///< Input parameter
    ns1__AddressVerifyResponseType     &ns1__AddressVerifyResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__EnterBoarding                                                     *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__EnterBoarding" of service binding "PayPalAPISoapBinding".

  - SOAP document/literal style messaging

  - Default endpoints:
    - https://api-aa.sandbox.paypal.com/2.0/
    - https://api.sandbox.paypal.com/2.0/

  - Addressing input action: ""

  - Addressing output action: "Response"

  - Request message has mandatory header part(s) (see @ref SOAP_ENV__Header):
    - ns1__RequesterCredentials

  - Response message has mandatory header part(s): (see @ref SOAP_ENV__Header)
    - ns1__RequesterCredentials

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__EnterBoarding(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__EnterBoardingReq*             ns1__EnterBoardingReq,
    // output parameters:
    ns1__EnterBoardingResponseType     &ns1__EnterBoardingResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__EnterBoarding(
    struct soap *soap,
    // input parameters:
    _ns1__EnterBoardingReq*             ns1__EnterBoardingReq,
    // output parameters:
    ns1__EnterBoardingResponseType     &ns1__EnterBoardingResponse
  );
@endcode

C++ proxy class (defined in soapPayPalAPISoapBindingProxy.h generated with soapcpp2):
@code
  class PayPalAPISoapBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapPayPalAPISoapBindingService.h generated with soapcpp2):
@code
  class PayPalAPISoapBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	EnterBoarding SOAP
//gsoap ns1  service method-style:	EnterBoarding document
//gsoap ns1  service method-encoding:	EnterBoarding literal
//gsoap ns1  service method-action:	EnterBoarding ""
//gsoap ns1  service method-output-action:	EnterBoarding Response
//gsoap ns1  service method-input-header-part:	EnterBoarding ns1__RequesterCredentials
//gsoap ns1  service method-output-header-part:	EnterBoarding ns1__RequesterCredentials
int __ns1__EnterBoarding(
    _ns1__EnterBoardingReq*             ns1__EnterBoardingReq,	///< Input parameter
    ns1__EnterBoardingResponseType     &ns1__EnterBoardingResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__GetBoardingDetails                                                *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__GetBoardingDetails" of service binding "PayPalAPISoapBinding".

  - SOAP document/literal style messaging

  - Default endpoints:
    - https://api-aa.sandbox.paypal.com/2.0/
    - https://api.sandbox.paypal.com/2.0/

  - Addressing input action: ""

  - Addressing output action: "Response"

  - Request message has mandatory header part(s) (see @ref SOAP_ENV__Header):
    - ns1__RequesterCredentials

  - Response message has mandatory header part(s): (see @ref SOAP_ENV__Header)
    - ns1__RequesterCredentials

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__GetBoardingDetails(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__GetBoardingDetailsReq*        ns1__GetBoardingDetailsReq,
    // output parameters:
    ns1__GetBoardingDetailsResponseType&ns1__GetBoardingDetailsResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__GetBoardingDetails(
    struct soap *soap,
    // input parameters:
    _ns1__GetBoardingDetailsReq*        ns1__GetBoardingDetailsReq,
    // output parameters:
    ns1__GetBoardingDetailsResponseType&ns1__GetBoardingDetailsResponse
  );
@endcode

C++ proxy class (defined in soapPayPalAPISoapBindingProxy.h generated with soapcpp2):
@code
  class PayPalAPISoapBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapPayPalAPISoapBindingService.h generated with soapcpp2):
@code
  class PayPalAPISoapBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	GetBoardingDetails SOAP
//gsoap ns1  service method-style:	GetBoardingDetails document
//gsoap ns1  service method-encoding:	GetBoardingDetails literal
//gsoap ns1  service method-action:	GetBoardingDetails ""
//gsoap ns1  service method-output-action:	GetBoardingDetails Response
//gsoap ns1  service method-input-header-part:	GetBoardingDetails ns1__RequesterCredentials
//gsoap ns1  service method-output-header-part:	GetBoardingDetails ns1__RequesterCredentials
int __ns1__GetBoardingDetails(
    _ns1__GetBoardingDetailsReq*        ns1__GetBoardingDetailsReq,	///< Input parameter
    ns1__GetBoardingDetailsResponseType&ns1__GetBoardingDetailsResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__CreateMobilePayment                                               *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__CreateMobilePayment" of service binding "PayPalAPISoapBinding".

  - SOAP document/literal style messaging

  - Default endpoints:
    - https://api-aa.sandbox.paypal.com/2.0/
    - https://api.sandbox.paypal.com/2.0/

  - Addressing input action: ""

  - Addressing output action: "Response"

  - Request message has mandatory header part(s) (see @ref SOAP_ENV__Header):
    - ns1__RequesterCredentials

  - Response message has mandatory header part(s): (see @ref SOAP_ENV__Header)
    - ns1__RequesterCredentials

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__CreateMobilePayment(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__CreateMobilePaymentReq*       ns1__CreateMobilePaymentReq,
    // output parameters:
    ns1__CreateMobilePaymentResponseType&ns1__CreateMobilePaymentResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__CreateMobilePayment(
    struct soap *soap,
    // input parameters:
    _ns1__CreateMobilePaymentReq*       ns1__CreateMobilePaymentReq,
    // output parameters:
    ns1__CreateMobilePaymentResponseType&ns1__CreateMobilePaymentResponse
  );
@endcode

C++ proxy class (defined in soapPayPalAPISoapBindingProxy.h generated with soapcpp2):
@code
  class PayPalAPISoapBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapPayPalAPISoapBindingService.h generated with soapcpp2):
@code
  class PayPalAPISoapBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	CreateMobilePayment SOAP
//gsoap ns1  service method-style:	CreateMobilePayment document
//gsoap ns1  service method-encoding:	CreateMobilePayment literal
//gsoap ns1  service method-action:	CreateMobilePayment ""
//gsoap ns1  service method-output-action:	CreateMobilePayment Response
//gsoap ns1  service method-input-header-part:	CreateMobilePayment ns1__RequesterCredentials
//gsoap ns1  service method-output-header-part:	CreateMobilePayment ns1__RequesterCredentials
int __ns1__CreateMobilePayment(
    _ns1__CreateMobilePaymentReq*       ns1__CreateMobilePaymentReq,	///< Input parameter
    ns1__CreateMobilePaymentResponseType&ns1__CreateMobilePaymentResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__GetMobileStatus                                                   *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__GetMobileStatus" of service binding "PayPalAPISoapBinding".

  - SOAP document/literal style messaging

  - Default endpoints:
    - https://api-aa.sandbox.paypal.com/2.0/
    - https://api.sandbox.paypal.com/2.0/

  - Addressing input action: ""

  - Addressing output action: "Response"

  - Request message has mandatory header part(s) (see @ref SOAP_ENV__Header):
    - ns1__RequesterCredentials

  - Response message has mandatory header part(s): (see @ref SOAP_ENV__Header)
    - ns1__RequesterCredentials

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__GetMobileStatus(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__GetMobileStatusReq*           ns1__GetMobileStatusReq,
    // output parameters:
    ns1__GetMobileStatusResponseType   &ns1__GetMobileStatusResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__GetMobileStatus(
    struct soap *soap,
    // input parameters:
    _ns1__GetMobileStatusReq*           ns1__GetMobileStatusReq,
    // output parameters:
    ns1__GetMobileStatusResponseType   &ns1__GetMobileStatusResponse
  );
@endcode

C++ proxy class (defined in soapPayPalAPISoapBindingProxy.h generated with soapcpp2):
@code
  class PayPalAPISoapBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapPayPalAPISoapBindingService.h generated with soapcpp2):
@code
  class PayPalAPISoapBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	GetMobileStatus SOAP
//gsoap ns1  service method-style:	GetMobileStatus document
//gsoap ns1  service method-encoding:	GetMobileStatus literal
//gsoap ns1  service method-action:	GetMobileStatus ""
//gsoap ns1  service method-output-action:	GetMobileStatus Response
//gsoap ns1  service method-input-header-part:	GetMobileStatus ns1__RequesterCredentials
//gsoap ns1  service method-output-header-part:	GetMobileStatus ns1__RequesterCredentials
int __ns1__GetMobileStatus(
    _ns1__GetMobileStatusReq*           ns1__GetMobileStatusReq,	///< Input parameter
    ns1__GetMobileStatusResponseType   &ns1__GetMobileStatusResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__SetMobileCheckout                                                 *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__SetMobileCheckout" of service binding "PayPalAPISoapBinding".

  - SOAP document/literal style messaging

  - Default endpoints:
    - https://api-aa.sandbox.paypal.com/2.0/
    - https://api.sandbox.paypal.com/2.0/

  - Addressing input action: ""

  - Addressing output action: "Response"

  - Request message has mandatory header part(s) (see @ref SOAP_ENV__Header):
    - ns1__RequesterCredentials

  - Response message has mandatory header part(s): (see @ref SOAP_ENV__Header)
    - ns1__RequesterCredentials

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__SetMobileCheckout(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__SetMobileCheckoutReq*         ns1__SetMobileCheckoutReq,
    // output parameters:
    ns1__SetMobileCheckoutResponseType &ns1__SetMobileCheckoutResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__SetMobileCheckout(
    struct soap *soap,
    // input parameters:
    _ns1__SetMobileCheckoutReq*         ns1__SetMobileCheckoutReq,
    // output parameters:
    ns1__SetMobileCheckoutResponseType &ns1__SetMobileCheckoutResponse
  );
@endcode

C++ proxy class (defined in soapPayPalAPISoapBindingProxy.h generated with soapcpp2):
@code
  class PayPalAPISoapBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapPayPalAPISoapBindingService.h generated with soapcpp2):
@code
  class PayPalAPISoapBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	SetMobileCheckout SOAP
//gsoap ns1  service method-style:	SetMobileCheckout document
//gsoap ns1  service method-encoding:	SetMobileCheckout literal
//gsoap ns1  service method-action:	SetMobileCheckout ""
//gsoap ns1  service method-output-action:	SetMobileCheckout Response
//gsoap ns1  service method-input-header-part:	SetMobileCheckout ns1__RequesterCredentials
//gsoap ns1  service method-output-header-part:	SetMobileCheckout ns1__RequesterCredentials
int __ns1__SetMobileCheckout(
    _ns1__SetMobileCheckoutReq*         ns1__SetMobileCheckoutReq,	///< Input parameter
    ns1__SetMobileCheckoutResponseType &ns1__SetMobileCheckoutResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__DoMobileCheckoutPayment                                           *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__DoMobileCheckoutPayment" of service binding "PayPalAPISoapBinding".

  - SOAP document/literal style messaging

  - Default endpoints:
    - https://api-aa.sandbox.paypal.com/2.0/
    - https://api.sandbox.paypal.com/2.0/

  - Addressing input action: ""

  - Addressing output action: "Response"

  - Request message has mandatory header part(s) (see @ref SOAP_ENV__Header):
    - ns1__RequesterCredentials

  - Response message has mandatory header part(s): (see @ref SOAP_ENV__Header)
    - ns1__RequesterCredentials

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__DoMobileCheckoutPayment(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__DoMobileCheckoutPaymentReq*   ns1__DoMobileCheckoutPaymentReq,
    // output parameters:
    ns1__DoMobileCheckoutPaymentResponseType&ns1__DoMobileCheckoutPaymentResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__DoMobileCheckoutPayment(
    struct soap *soap,
    // input parameters:
    _ns1__DoMobileCheckoutPaymentReq*   ns1__DoMobileCheckoutPaymentReq,
    // output parameters:
    ns1__DoMobileCheckoutPaymentResponseType&ns1__DoMobileCheckoutPaymentResponse
  );
@endcode

C++ proxy class (defined in soapPayPalAPISoapBindingProxy.h generated with soapcpp2):
@code
  class PayPalAPISoapBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapPayPalAPISoapBindingService.h generated with soapcpp2):
@code
  class PayPalAPISoapBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	DoMobileCheckoutPayment SOAP
//gsoap ns1  service method-style:	DoMobileCheckoutPayment document
//gsoap ns1  service method-encoding:	DoMobileCheckoutPayment literal
//gsoap ns1  service method-action:	DoMobileCheckoutPayment ""
//gsoap ns1  service method-output-action:	DoMobileCheckoutPayment Response
//gsoap ns1  service method-input-header-part:	DoMobileCheckoutPayment ns1__RequesterCredentials
//gsoap ns1  service method-output-header-part:	DoMobileCheckoutPayment ns1__RequesterCredentials
int __ns1__DoMobileCheckoutPayment(
    _ns1__DoMobileCheckoutPaymentReq*   ns1__DoMobileCheckoutPaymentReq,	///< Input parameter
    ns1__DoMobileCheckoutPaymentResponseType&ns1__DoMobileCheckoutPaymentResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__GetBalance                                                        *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__GetBalance" of service binding "PayPalAPISoapBinding".

  - SOAP document/literal style messaging

  - Default endpoints:
    - https://api-aa.sandbox.paypal.com/2.0/
    - https://api.sandbox.paypal.com/2.0/

  - Addressing input action: ""

  - Addressing output action: "Response"

  - Request message has mandatory header part(s) (see @ref SOAP_ENV__Header):
    - ns1__RequesterCredentials

  - Response message has mandatory header part(s): (see @ref SOAP_ENV__Header)
    - ns1__RequesterCredentials

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__GetBalance(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__GetBalanceReq*                ns1__GetBalanceReq,
    // output parameters:
    ns1__GetBalanceResponseType        &ns1__GetBalanceResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__GetBalance(
    struct soap *soap,
    // input parameters:
    _ns1__GetBalanceReq*                ns1__GetBalanceReq,
    // output parameters:
    ns1__GetBalanceResponseType        &ns1__GetBalanceResponse
  );
@endcode

C++ proxy class (defined in soapPayPalAPISoapBindingProxy.h generated with soapcpp2):
@code
  class PayPalAPISoapBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapPayPalAPISoapBindingService.h generated with soapcpp2):
@code
  class PayPalAPISoapBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	GetBalance SOAP
//gsoap ns1  service method-style:	GetBalance document
//gsoap ns1  service method-encoding:	GetBalance literal
//gsoap ns1  service method-action:	GetBalance ""
//gsoap ns1  service method-output-action:	GetBalance Response
//gsoap ns1  service method-input-header-part:	GetBalance ns1__RequesterCredentials
//gsoap ns1  service method-output-header-part:	GetBalance ns1__RequesterCredentials
int __ns1__GetBalance(
    _ns1__GetBalanceReq*                ns1__GetBalanceReq,	///< Input parameter
    ns1__GetBalanceResponseType        &ns1__GetBalanceResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__GetPalDetails                                                     *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__GetPalDetails" of service binding "PayPalAPISoapBinding".

  - SOAP document/literal style messaging

  - Default endpoints:
    - https://api-aa.sandbox.paypal.com/2.0/
    - https://api.sandbox.paypal.com/2.0/

  - Addressing input action: ""

  - Addressing output action: "Response"

  - Request message has mandatory header part(s) (see @ref SOAP_ENV__Header):
    - ns1__RequesterCredentials

  - Response message has mandatory header part(s): (see @ref SOAP_ENV__Header)
    - ns1__RequesterCredentials

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__GetPalDetails(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__GetPalDetailsReq*             ns1__GetPalDetailsReq,
    // output parameters:
    ns1__GetPalDetailsResponseType     &ns1__GetPalDetailsResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__GetPalDetails(
    struct soap *soap,
    // input parameters:
    _ns1__GetPalDetailsReq*             ns1__GetPalDetailsReq,
    // output parameters:
    ns1__GetPalDetailsResponseType     &ns1__GetPalDetailsResponse
  );
@endcode

C++ proxy class (defined in soapPayPalAPISoapBindingProxy.h generated with soapcpp2):
@code
  class PayPalAPISoapBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapPayPalAPISoapBindingService.h generated with soapcpp2):
@code
  class PayPalAPISoapBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	GetPalDetails SOAP
//gsoap ns1  service method-style:	GetPalDetails document
//gsoap ns1  service method-encoding:	GetPalDetails literal
//gsoap ns1  service method-action:	GetPalDetails ""
//gsoap ns1  service method-output-action:	GetPalDetails Response
//gsoap ns1  service method-input-header-part:	GetPalDetails ns1__RequesterCredentials
//gsoap ns1  service method-output-header-part:	GetPalDetails ns1__RequesterCredentials
int __ns1__GetPalDetails(
    _ns1__GetPalDetailsReq*             ns1__GetPalDetailsReq,	///< Input parameter
    ns1__GetPalDetailsResponseType     &ns1__GetPalDetailsResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__DoExpressCheckoutPayment                                          *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__DoExpressCheckoutPayment" of service binding "PayPalAPISoapBinding".

  - SOAP document/literal style messaging

  - Default endpoints:
    - https://api-aa.sandbox.paypal.com/2.0/
    - https://api.sandbox.paypal.com/2.0/

  - Addressing input action: ""

  - Addressing output action: "Response"

  - Request message has mandatory header part(s) (see @ref SOAP_ENV__Header):
    - ns1__RequesterCredentials

  - Response message has mandatory header part(s): (see @ref SOAP_ENV__Header)
    - ns1__RequesterCredentials

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__DoExpressCheckoutPayment(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__DoExpressCheckoutPaymentReq*  ns1__DoExpressCheckoutPaymentReq,
    // output parameters:
    ns1__DoExpressCheckoutPaymentResponseType&ns1__DoExpressCheckoutPaymentResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__DoExpressCheckoutPayment(
    struct soap *soap,
    // input parameters:
    _ns1__DoExpressCheckoutPaymentReq*  ns1__DoExpressCheckoutPaymentReq,
    // output parameters:
    ns1__DoExpressCheckoutPaymentResponseType&ns1__DoExpressCheckoutPaymentResponse
  );
@endcode

C++ proxy class (defined in soapPayPalAPISoapBindingProxy.h generated with soapcpp2):
@code
  class PayPalAPISoapBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapPayPalAPISoapBindingService.h generated with soapcpp2):
@code
  class PayPalAPISoapBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	DoExpressCheckoutPayment SOAP
//gsoap ns1  service method-style:	DoExpressCheckoutPayment document
//gsoap ns1  service method-encoding:	DoExpressCheckoutPayment literal
//gsoap ns1  service method-action:	DoExpressCheckoutPayment ""
//gsoap ns1  service method-output-action:	DoExpressCheckoutPayment Response
//gsoap ns1  service method-input-header-part:	DoExpressCheckoutPayment ns1__RequesterCredentials
//gsoap ns1  service method-output-header-part:	DoExpressCheckoutPayment ns1__RequesterCredentials
int __ns1__DoExpressCheckoutPayment(
    _ns1__DoExpressCheckoutPaymentReq*  ns1__DoExpressCheckoutPaymentReq,	///< Input parameter
    ns1__DoExpressCheckoutPaymentResponseType&ns1__DoExpressCheckoutPaymentResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__DoUATPExpressCheckoutPayment                                      *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__DoUATPExpressCheckoutPayment" of service binding "PayPalAPISoapBinding".

  - SOAP document/literal style messaging

  - Default endpoints:
    - https://api-aa.sandbox.paypal.com/2.0/
    - https://api.sandbox.paypal.com/2.0/

  - Addressing input action: ""

  - Addressing output action: "Response"

  - Request message has mandatory header part(s) (see @ref SOAP_ENV__Header):
    - ns1__RequesterCredentials

  - Response message has mandatory header part(s): (see @ref SOAP_ENV__Header)
    - ns1__RequesterCredentials

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__DoUATPExpressCheckoutPayment(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__DoUATPExpressCheckoutPaymentReq* ns1__DoUATPExpressCheckoutPaymentReq,
    // output parameters:
    ns1__DoUATPExpressCheckoutPaymentResponseType&ns1__DoUATPExpressCheckoutPaymentResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__DoUATPExpressCheckoutPayment(
    struct soap *soap,
    // input parameters:
    _ns1__DoUATPExpressCheckoutPaymentReq* ns1__DoUATPExpressCheckoutPaymentReq,
    // output parameters:
    ns1__DoUATPExpressCheckoutPaymentResponseType&ns1__DoUATPExpressCheckoutPaymentResponse
  );
@endcode

C++ proxy class (defined in soapPayPalAPISoapBindingProxy.h generated with soapcpp2):
@code
  class PayPalAPISoapBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapPayPalAPISoapBindingService.h generated with soapcpp2):
@code
  class PayPalAPISoapBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	DoUATPExpressCheckoutPayment SOAP
//gsoap ns1  service method-style:	DoUATPExpressCheckoutPayment document
//gsoap ns1  service method-encoding:	DoUATPExpressCheckoutPayment literal
//gsoap ns1  service method-action:	DoUATPExpressCheckoutPayment ""
//gsoap ns1  service method-output-action:	DoUATPExpressCheckoutPayment Response
//gsoap ns1  service method-input-header-part:	DoUATPExpressCheckoutPayment ns1__RequesterCredentials
//gsoap ns1  service method-output-header-part:	DoUATPExpressCheckoutPayment ns1__RequesterCredentials
int __ns1__DoUATPExpressCheckoutPayment(
    _ns1__DoUATPExpressCheckoutPaymentReq* ns1__DoUATPExpressCheckoutPaymentReq,	///< Input parameter
    ns1__DoUATPExpressCheckoutPaymentResponseType&ns1__DoUATPExpressCheckoutPaymentResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__SetAuthFlowParam                                                  *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__SetAuthFlowParam" of service binding "PayPalAPISoapBinding".

  - SOAP document/literal style messaging

  - Default endpoints:
    - https://api-aa.sandbox.paypal.com/2.0/
    - https://api.sandbox.paypal.com/2.0/

  - Addressing input action: ""

  - Addressing output action: "Response"

  - Request message has mandatory header part(s) (see @ref SOAP_ENV__Header):
    - ns1__RequesterCredentials

  - Response message has mandatory header part(s): (see @ref SOAP_ENV__Header)
    - ns1__RequesterCredentials

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__SetAuthFlowParam(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__SetAuthFlowParamReq*          ns1__SetAuthFlowParamReq,
    // output parameters:
    ns1__SetAuthFlowParamResponseType  &ns1__SetAuthFlowParamResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__SetAuthFlowParam(
    struct soap *soap,
    // input parameters:
    _ns1__SetAuthFlowParamReq*          ns1__SetAuthFlowParamReq,
    // output parameters:
    ns1__SetAuthFlowParamResponseType  &ns1__SetAuthFlowParamResponse
  );
@endcode

C++ proxy class (defined in soapPayPalAPISoapBindingProxy.h generated with soapcpp2):
@code
  class PayPalAPISoapBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapPayPalAPISoapBindingService.h generated with soapcpp2):
@code
  class PayPalAPISoapBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	SetAuthFlowParam SOAP
//gsoap ns1  service method-style:	SetAuthFlowParam document
//gsoap ns1  service method-encoding:	SetAuthFlowParam literal
//gsoap ns1  service method-action:	SetAuthFlowParam ""
//gsoap ns1  service method-output-action:	SetAuthFlowParam Response
//gsoap ns1  service method-input-header-part:	SetAuthFlowParam ns1__RequesterCredentials
//gsoap ns1  service method-output-header-part:	SetAuthFlowParam ns1__RequesterCredentials
int __ns1__SetAuthFlowParam(
    _ns1__SetAuthFlowParamReq*          ns1__SetAuthFlowParamReq,	///< Input parameter
    ns1__SetAuthFlowParamResponseType  &ns1__SetAuthFlowParamResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__GetAuthDetails                                                    *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__GetAuthDetails" of service binding "PayPalAPISoapBinding".

  - SOAP document/literal style messaging

  - Default endpoints:
    - https://api-aa.sandbox.paypal.com/2.0/
    - https://api.sandbox.paypal.com/2.0/

  - Addressing input action: ""

  - Addressing output action: "Response"

  - Request message has mandatory header part(s) (see @ref SOAP_ENV__Header):
    - ns1__RequesterCredentials

  - Response message has mandatory header part(s): (see @ref SOAP_ENV__Header)
    - ns1__RequesterCredentials

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__GetAuthDetails(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__GetAuthDetailsReq*            ns1__GetAuthDetailsReq,
    // output parameters:
    ns1__GetAuthDetailsResponseType    &ns1__GetAuthDetailsResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__GetAuthDetails(
    struct soap *soap,
    // input parameters:
    _ns1__GetAuthDetailsReq*            ns1__GetAuthDetailsReq,
    // output parameters:
    ns1__GetAuthDetailsResponseType    &ns1__GetAuthDetailsResponse
  );
@endcode

C++ proxy class (defined in soapPayPalAPISoapBindingProxy.h generated with soapcpp2):
@code
  class PayPalAPISoapBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapPayPalAPISoapBindingService.h generated with soapcpp2):
@code
  class PayPalAPISoapBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	GetAuthDetails SOAP
//gsoap ns1  service method-style:	GetAuthDetails document
//gsoap ns1  service method-encoding:	GetAuthDetails literal
//gsoap ns1  service method-action:	GetAuthDetails ""
//gsoap ns1  service method-output-action:	GetAuthDetails Response
//gsoap ns1  service method-input-header-part:	GetAuthDetails ns1__RequesterCredentials
//gsoap ns1  service method-output-header-part:	GetAuthDetails ns1__RequesterCredentials
int __ns1__GetAuthDetails(
    _ns1__GetAuthDetailsReq*            ns1__GetAuthDetailsReq,	///< Input parameter
    ns1__GetAuthDetailsResponseType    &ns1__GetAuthDetailsResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__SetAccessPermissions                                              *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__SetAccessPermissions" of service binding "PayPalAPISoapBinding".

  - SOAP document/literal style messaging

  - Default endpoints:
    - https://api-aa.sandbox.paypal.com/2.0/
    - https://api.sandbox.paypal.com/2.0/

  - Addressing input action: ""

  - Addressing output action: "Response"

  - Request message has mandatory header part(s) (see @ref SOAP_ENV__Header):
    - ns1__RequesterCredentials

  - Response message has mandatory header part(s): (see @ref SOAP_ENV__Header)
    - ns1__RequesterCredentials

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__SetAccessPermissions(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__SetAccessPermissionsReq*      ns1__SetAccessPermissionsReq,
    // output parameters:
    ns1__SetAccessPermissionsResponseType&ns1__SetAccessPermissionsResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__SetAccessPermissions(
    struct soap *soap,
    // input parameters:
    _ns1__SetAccessPermissionsReq*      ns1__SetAccessPermissionsReq,
    // output parameters:
    ns1__SetAccessPermissionsResponseType&ns1__SetAccessPermissionsResponse
  );
@endcode

C++ proxy class (defined in soapPayPalAPISoapBindingProxy.h generated with soapcpp2):
@code
  class PayPalAPISoapBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapPayPalAPISoapBindingService.h generated with soapcpp2):
@code
  class PayPalAPISoapBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	SetAccessPermissions SOAP
//gsoap ns1  service method-style:	SetAccessPermissions document
//gsoap ns1  service method-encoding:	SetAccessPermissions literal
//gsoap ns1  service method-action:	SetAccessPermissions ""
//gsoap ns1  service method-output-action:	SetAccessPermissions Response
//gsoap ns1  service method-input-header-part:	SetAccessPermissions ns1__RequesterCredentials
//gsoap ns1  service method-output-header-part:	SetAccessPermissions ns1__RequesterCredentials
int __ns1__SetAccessPermissions(
    _ns1__SetAccessPermissionsReq*      ns1__SetAccessPermissionsReq,	///< Input parameter
    ns1__SetAccessPermissionsResponseType&ns1__SetAccessPermissionsResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__UpdateAccessPermissions                                           *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__UpdateAccessPermissions" of service binding "PayPalAPISoapBinding".

  - SOAP document/literal style messaging

  - Default endpoints:
    - https://api-aa.sandbox.paypal.com/2.0/
    - https://api.sandbox.paypal.com/2.0/

  - Addressing input action: ""

  - Addressing output action: "Response"

  - Request message has mandatory header part(s) (see @ref SOAP_ENV__Header):
    - ns1__RequesterCredentials

  - Response message has mandatory header part(s): (see @ref SOAP_ENV__Header)
    - ns1__RequesterCredentials

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__UpdateAccessPermissions(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__UpdateAccessPermissionsReq*   ns1__UpdateAccessPermissionsReq,
    // output parameters:
    ns1__UpdateAccessPermissionsResponseType&ns1__UpdateAccessPermissionsResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__UpdateAccessPermissions(
    struct soap *soap,
    // input parameters:
    _ns1__UpdateAccessPermissionsReq*   ns1__UpdateAccessPermissionsReq,
    // output parameters:
    ns1__UpdateAccessPermissionsResponseType&ns1__UpdateAccessPermissionsResponse
  );
@endcode

C++ proxy class (defined in soapPayPalAPISoapBindingProxy.h generated with soapcpp2):
@code
  class PayPalAPISoapBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapPayPalAPISoapBindingService.h generated with soapcpp2):
@code
  class PayPalAPISoapBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	UpdateAccessPermissions SOAP
//gsoap ns1  service method-style:	UpdateAccessPermissions document
//gsoap ns1  service method-encoding:	UpdateAccessPermissions literal
//gsoap ns1  service method-action:	UpdateAccessPermissions ""
//gsoap ns1  service method-output-action:	UpdateAccessPermissions Response
//gsoap ns1  service method-input-header-part:	UpdateAccessPermissions ns1__RequesterCredentials
//gsoap ns1  service method-output-header-part:	UpdateAccessPermissions ns1__RequesterCredentials
int __ns1__UpdateAccessPermissions(
    _ns1__UpdateAccessPermissionsReq*   ns1__UpdateAccessPermissionsReq,	///< Input parameter
    ns1__UpdateAccessPermissionsResponseType&ns1__UpdateAccessPermissionsResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__GetAccessPermissionDetails                                        *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__GetAccessPermissionDetails" of service binding "PayPalAPISoapBinding".

  - SOAP document/literal style messaging

  - Default endpoints:
    - https://api-aa.sandbox.paypal.com/2.0/
    - https://api.sandbox.paypal.com/2.0/

  - Addressing input action: ""

  - Addressing output action: "Response"

  - Request message has mandatory header part(s) (see @ref SOAP_ENV__Header):
    - ns1__RequesterCredentials

  - Response message has mandatory header part(s): (see @ref SOAP_ENV__Header)
    - ns1__RequesterCredentials

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__GetAccessPermissionDetails(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__GetAccessPermissionDetailsReq* ns1__GetAccessPermissionDetailsReq,
    // output parameters:
    ns1__GetAccessPermissionDetailsResponseType&ns1__GetAccessPermissionDetailsResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__GetAccessPermissionDetails(
    struct soap *soap,
    // input parameters:
    _ns1__GetAccessPermissionDetailsReq* ns1__GetAccessPermissionDetailsReq,
    // output parameters:
    ns1__GetAccessPermissionDetailsResponseType&ns1__GetAccessPermissionDetailsResponse
  );
@endcode

C++ proxy class (defined in soapPayPalAPISoapBindingProxy.h generated with soapcpp2):
@code
  class PayPalAPISoapBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapPayPalAPISoapBindingService.h generated with soapcpp2):
@code
  class PayPalAPISoapBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	GetAccessPermissionDetails SOAP
//gsoap ns1  service method-style:	GetAccessPermissionDetails document
//gsoap ns1  service method-encoding:	GetAccessPermissionDetails literal
//gsoap ns1  service method-action:	GetAccessPermissionDetails ""
//gsoap ns1  service method-output-action:	GetAccessPermissionDetails Response
//gsoap ns1  service method-input-header-part:	GetAccessPermissionDetails ns1__RequesterCredentials
//gsoap ns1  service method-output-header-part:	GetAccessPermissionDetails ns1__RequesterCredentials
int __ns1__GetAccessPermissionDetails(
    _ns1__GetAccessPermissionDetailsReq* ns1__GetAccessPermissionDetailsReq,	///< Input parameter
    ns1__GetAccessPermissionDetailsResponseType&ns1__GetAccessPermissionDetailsResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__GetIncentiveEvaluation                                            *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__GetIncentiveEvaluation" of service binding "PayPalAPISoapBinding".

  - SOAP document/literal style messaging

  - Default endpoints:
    - https://api-aa.sandbox.paypal.com/2.0/
    - https://api.sandbox.paypal.com/2.0/

  - Addressing input action: ""

  - Addressing output action: "Response"

  - Request message has mandatory header part(s) (see @ref SOAP_ENV__Header):
    - ns1__RequesterCredentials

  - Response message has mandatory header part(s): (see @ref SOAP_ENV__Header)
    - ns1__RequesterCredentials

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__GetIncentiveEvaluation(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__GetIncentiveEvaluationReq*    ns1__GetIncentiveEvaluationReq,
    // output parameters:
    ns1__GetIncentiveEvaluationResponseType&ns1__GetIncentiveEvaluationResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__GetIncentiveEvaluation(
    struct soap *soap,
    // input parameters:
    _ns1__GetIncentiveEvaluationReq*    ns1__GetIncentiveEvaluationReq,
    // output parameters:
    ns1__GetIncentiveEvaluationResponseType&ns1__GetIncentiveEvaluationResponse
  );
@endcode

C++ proxy class (defined in soapPayPalAPISoapBindingProxy.h generated with soapcpp2):
@code
  class PayPalAPISoapBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapPayPalAPISoapBindingService.h generated with soapcpp2):
@code
  class PayPalAPISoapBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	GetIncentiveEvaluation SOAP
//gsoap ns1  service method-style:	GetIncentiveEvaluation document
//gsoap ns1  service method-encoding:	GetIncentiveEvaluation literal
//gsoap ns1  service method-action:	GetIncentiveEvaluation ""
//gsoap ns1  service method-output-action:	GetIncentiveEvaluation Response
//gsoap ns1  service method-input-header-part:	GetIncentiveEvaluation ns1__RequesterCredentials
//gsoap ns1  service method-output-header-part:	GetIncentiveEvaluation ns1__RequesterCredentials
int __ns1__GetIncentiveEvaluation(
    _ns1__GetIncentiveEvaluationReq*    ns1__GetIncentiveEvaluationReq,	///< Input parameter
    ns1__GetIncentiveEvaluationResponseType&ns1__GetIncentiveEvaluationResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__SetExpressCheckout                                                *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__SetExpressCheckout" of service binding "PayPalAPISoapBinding".

  - SOAP document/literal style messaging

  - Default endpoints:
    - https://api-aa.sandbox.paypal.com/2.0/
    - https://api.sandbox.paypal.com/2.0/

  - Addressing input action: ""

  - Addressing output action: "Response"

  - Request message has mandatory header part(s) (see @ref SOAP_ENV__Header):
    - ns1__RequesterCredentials

  - Response message has mandatory header part(s): (see @ref SOAP_ENV__Header)
    - ns1__RequesterCredentials

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__SetExpressCheckout(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__SetExpressCheckoutReq*        ns1__SetExpressCheckoutReq,
    // output parameters:
    ns1__SetExpressCheckoutResponseType&ns1__SetExpressCheckoutResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__SetExpressCheckout(
    struct soap *soap,
    // input parameters:
    _ns1__SetExpressCheckoutReq*        ns1__SetExpressCheckoutReq,
    // output parameters:
    ns1__SetExpressCheckoutResponseType&ns1__SetExpressCheckoutResponse
  );
@endcode

C++ proxy class (defined in soapPayPalAPISoapBindingProxy.h generated with soapcpp2):
@code
  class PayPalAPISoapBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapPayPalAPISoapBindingService.h generated with soapcpp2):
@code
  class PayPalAPISoapBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	SetExpressCheckout SOAP
//gsoap ns1  service method-style:	SetExpressCheckout document
//gsoap ns1  service method-encoding:	SetExpressCheckout literal
//gsoap ns1  service method-action:	SetExpressCheckout ""
//gsoap ns1  service method-output-action:	SetExpressCheckout Response
//gsoap ns1  service method-input-header-part:	SetExpressCheckout ns1__RequesterCredentials
//gsoap ns1  service method-output-header-part:	SetExpressCheckout ns1__RequesterCredentials
int __ns1__SetExpressCheckout(
    _ns1__SetExpressCheckoutReq*        ns1__SetExpressCheckoutReq,	///< Input parameter
    ns1__SetExpressCheckoutResponseType&ns1__SetExpressCheckoutResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__ExecuteCheckoutOperations                                         *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__ExecuteCheckoutOperations" of service binding "PayPalAPISoapBinding".

  - SOAP document/literal style messaging

  - Default endpoints:
    - https://api-aa.sandbox.paypal.com/2.0/
    - https://api.sandbox.paypal.com/2.0/

  - Addressing input action: ""

  - Addressing output action: "Response"

  - Request message has mandatory header part(s) (see @ref SOAP_ENV__Header):
    - ns1__RequesterCredentials

  - Response message has mandatory header part(s): (see @ref SOAP_ENV__Header)
    - ns1__RequesterCredentials

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__ExecuteCheckoutOperations(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__ExecuteCheckoutOperationsReq* ns1__ExecuteCheckoutOperationsReq,
    // output parameters:
    ns1__ExecuteCheckoutOperationsResponseType&ns1__ExecuteCheckoutOperationsResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__ExecuteCheckoutOperations(
    struct soap *soap,
    // input parameters:
    _ns1__ExecuteCheckoutOperationsReq* ns1__ExecuteCheckoutOperationsReq,
    // output parameters:
    ns1__ExecuteCheckoutOperationsResponseType&ns1__ExecuteCheckoutOperationsResponse
  );
@endcode

C++ proxy class (defined in soapPayPalAPISoapBindingProxy.h generated with soapcpp2):
@code
  class PayPalAPISoapBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapPayPalAPISoapBindingService.h generated with soapcpp2):
@code
  class PayPalAPISoapBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	ExecuteCheckoutOperations SOAP
//gsoap ns1  service method-style:	ExecuteCheckoutOperations document
//gsoap ns1  service method-encoding:	ExecuteCheckoutOperations literal
//gsoap ns1  service method-action:	ExecuteCheckoutOperations ""
//gsoap ns1  service method-output-action:	ExecuteCheckoutOperations Response
//gsoap ns1  service method-input-header-part:	ExecuteCheckoutOperations ns1__RequesterCredentials
//gsoap ns1  service method-output-header-part:	ExecuteCheckoutOperations ns1__RequesterCredentials
int __ns1__ExecuteCheckoutOperations(
    _ns1__ExecuteCheckoutOperationsReq* ns1__ExecuteCheckoutOperationsReq,	///< Input parameter
    ns1__ExecuteCheckoutOperationsResponseType&ns1__ExecuteCheckoutOperationsResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__GetExpressCheckoutDetails                                         *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__GetExpressCheckoutDetails" of service binding "PayPalAPISoapBinding".

  - SOAP document/literal style messaging

  - Default endpoints:
    - https://api-aa.sandbox.paypal.com/2.0/
    - https://api.sandbox.paypal.com/2.0/

  - Addressing input action: ""

  - Addressing output action: "Response"

  - Request message has mandatory header part(s) (see @ref SOAP_ENV__Header):
    - ns1__RequesterCredentials

  - Response message has mandatory header part(s): (see @ref SOAP_ENV__Header)
    - ns1__RequesterCredentials

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__GetExpressCheckoutDetails(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__GetExpressCheckoutDetailsReq* ns1__GetExpressCheckoutDetailsReq,
    // output parameters:
    ns1__GetExpressCheckoutDetailsResponseType&ns1__GetExpressCheckoutDetailsResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__GetExpressCheckoutDetails(
    struct soap *soap,
    // input parameters:
    _ns1__GetExpressCheckoutDetailsReq* ns1__GetExpressCheckoutDetailsReq,
    // output parameters:
    ns1__GetExpressCheckoutDetailsResponseType&ns1__GetExpressCheckoutDetailsResponse
  );
@endcode

C++ proxy class (defined in soapPayPalAPISoapBindingProxy.h generated with soapcpp2):
@code
  class PayPalAPISoapBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapPayPalAPISoapBindingService.h generated with soapcpp2):
@code
  class PayPalAPISoapBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	GetExpressCheckoutDetails SOAP
//gsoap ns1  service method-style:	GetExpressCheckoutDetails document
//gsoap ns1  service method-encoding:	GetExpressCheckoutDetails literal
//gsoap ns1  service method-action:	GetExpressCheckoutDetails ""
//gsoap ns1  service method-output-action:	GetExpressCheckoutDetails Response
//gsoap ns1  service method-input-header-part:	GetExpressCheckoutDetails ns1__RequesterCredentials
//gsoap ns1  service method-output-header-part:	GetExpressCheckoutDetails ns1__RequesterCredentials
int __ns1__GetExpressCheckoutDetails(
    _ns1__GetExpressCheckoutDetailsReq* ns1__GetExpressCheckoutDetailsReq,	///< Input parameter
    ns1__GetExpressCheckoutDetailsResponseType&ns1__GetExpressCheckoutDetailsResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__DoDirectPayment                                                   *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__DoDirectPayment" of service binding "PayPalAPISoapBinding".

  - SOAP document/literal style messaging

  - Default endpoints:
    - https://api-aa.sandbox.paypal.com/2.0/
    - https://api.sandbox.paypal.com/2.0/

  - Addressing input action: ""

  - Addressing output action: "Response"

  - Request message has mandatory header part(s) (see @ref SOAP_ENV__Header):
    - ns1__RequesterCredentials

  - Response message has mandatory header part(s): (see @ref SOAP_ENV__Header)
    - ns1__RequesterCredentials

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__DoDirectPayment(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__DoDirectPaymentReq*           ns1__DoDirectPaymentReq,
    // output parameters:
    ns1__DoDirectPaymentResponseType   &ns1__DoDirectPaymentResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__DoDirectPayment(
    struct soap *soap,
    // input parameters:
    _ns1__DoDirectPaymentReq*           ns1__DoDirectPaymentReq,
    // output parameters:
    ns1__DoDirectPaymentResponseType   &ns1__DoDirectPaymentResponse
  );
@endcode

C++ proxy class (defined in soapPayPalAPISoapBindingProxy.h generated with soapcpp2):
@code
  class PayPalAPISoapBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapPayPalAPISoapBindingService.h generated with soapcpp2):
@code
  class PayPalAPISoapBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	DoDirectPayment SOAP
//gsoap ns1  service method-style:	DoDirectPayment document
//gsoap ns1  service method-encoding:	DoDirectPayment literal
//gsoap ns1  service method-action:	DoDirectPayment ""
//gsoap ns1  service method-output-action:	DoDirectPayment Response
//gsoap ns1  service method-input-header-part:	DoDirectPayment ns1__RequesterCredentials
//gsoap ns1  service method-output-header-part:	DoDirectPayment ns1__RequesterCredentials
int __ns1__DoDirectPayment(
    _ns1__DoDirectPaymentReq*           ns1__DoDirectPaymentReq,	///< Input parameter
    ns1__DoDirectPaymentResponseType   &ns1__DoDirectPaymentResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__ManagePendingTransactionStatus                                    *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__ManagePendingTransactionStatus" of service binding "PayPalAPISoapBinding".

  - SOAP document/literal style messaging

  - Default endpoints:
    - https://api-aa.sandbox.paypal.com/2.0/
    - https://api.sandbox.paypal.com/2.0/

  - Addressing input action: ""

  - Addressing output action: "Response"

  - Request message has mandatory header part(s) (see @ref SOAP_ENV__Header):
    - ns1__RequesterCredentials

  - Response message has mandatory header part(s): (see @ref SOAP_ENV__Header)
    - ns1__RequesterCredentials

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__ManagePendingTransactionStatus(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__ManagePendingTransactionStatusReq* ns1__ManagePendingTransactionStatusReq,
    // output parameters:
    ns1__ManagePendingTransactionStatusResponseType&ns1__ManagePendingTransactionStatusResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__ManagePendingTransactionStatus(
    struct soap *soap,
    // input parameters:
    _ns1__ManagePendingTransactionStatusReq* ns1__ManagePendingTransactionStatusReq,
    // output parameters:
    ns1__ManagePendingTransactionStatusResponseType&ns1__ManagePendingTransactionStatusResponse
  );
@endcode

C++ proxy class (defined in soapPayPalAPISoapBindingProxy.h generated with soapcpp2):
@code
  class PayPalAPISoapBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapPayPalAPISoapBindingService.h generated with soapcpp2):
@code
  class PayPalAPISoapBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	ManagePendingTransactionStatus SOAP
//gsoap ns1  service method-style:	ManagePendingTransactionStatus document
//gsoap ns1  service method-encoding:	ManagePendingTransactionStatus literal
//gsoap ns1  service method-action:	ManagePendingTransactionStatus ""
//gsoap ns1  service method-output-action:	ManagePendingTransactionStatus Response
//gsoap ns1  service method-input-header-part:	ManagePendingTransactionStatus ns1__RequesterCredentials
//gsoap ns1  service method-output-header-part:	ManagePendingTransactionStatus ns1__RequesterCredentials
int __ns1__ManagePendingTransactionStatus(
    _ns1__ManagePendingTransactionStatusReq* ns1__ManagePendingTransactionStatusReq,	///< Input parameter
    ns1__ManagePendingTransactionStatusResponseType&ns1__ManagePendingTransactionStatusResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__DoCancel                                                          *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__DoCancel" of service binding "PayPalAPISoapBinding".

  - SOAP document/literal style messaging

  - Default endpoints:
    - https://api-aa.sandbox.paypal.com/2.0/
    - https://api.sandbox.paypal.com/2.0/

  - Addressing input action: ""

  - Addressing output action: "Response"

  - Request message has mandatory header part(s) (see @ref SOAP_ENV__Header):
    - ns1__RequesterCredentials

  - Response message has mandatory header part(s): (see @ref SOAP_ENV__Header)
    - ns1__RequesterCredentials

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__DoCancel(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__DoCancelReq*                  ns1__DoCancelReq,
    // output parameters:
    ns1__DoCancelResponseType          &ns1__DoCancelResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__DoCancel(
    struct soap *soap,
    // input parameters:
    _ns1__DoCancelReq*                  ns1__DoCancelReq,
    // output parameters:
    ns1__DoCancelResponseType          &ns1__DoCancelResponse
  );
@endcode

C++ proxy class (defined in soapPayPalAPISoapBindingProxy.h generated with soapcpp2):
@code
  class PayPalAPISoapBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapPayPalAPISoapBindingService.h generated with soapcpp2):
@code
  class PayPalAPISoapBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	DoCancel SOAP
//gsoap ns1  service method-style:	DoCancel document
//gsoap ns1  service method-encoding:	DoCancel literal
//gsoap ns1  service method-action:	DoCancel ""
//gsoap ns1  service method-output-action:	DoCancel Response
//gsoap ns1  service method-input-header-part:	DoCancel ns1__RequesterCredentials
//gsoap ns1  service method-output-header-part:	DoCancel ns1__RequesterCredentials
int __ns1__DoCancel(
    _ns1__DoCancelReq*                  ns1__DoCancelReq,	///< Input parameter
    ns1__DoCancelResponseType          &ns1__DoCancelResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__DoCapture                                                         *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__DoCapture" of service binding "PayPalAPISoapBinding".

  - SOAP document/literal style messaging

  - Default endpoints:
    - https://api-aa.sandbox.paypal.com/2.0/
    - https://api.sandbox.paypal.com/2.0/

  - Addressing input action: ""

  - Addressing output action: "Response"

  - Request message has mandatory header part(s) (see @ref SOAP_ENV__Header):
    - ns1__RequesterCredentials

  - Response message has mandatory header part(s): (see @ref SOAP_ENV__Header)
    - ns1__RequesterCredentials

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__DoCapture(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__DoCaptureReq*                 ns1__DoCaptureReq,
    // output parameters:
    ns1__DoCaptureResponseType         &ns1__DoCaptureResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__DoCapture(
    struct soap *soap,
    // input parameters:
    _ns1__DoCaptureReq*                 ns1__DoCaptureReq,
    // output parameters:
    ns1__DoCaptureResponseType         &ns1__DoCaptureResponse
  );
@endcode

C++ proxy class (defined in soapPayPalAPISoapBindingProxy.h generated with soapcpp2):
@code
  class PayPalAPISoapBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapPayPalAPISoapBindingService.h generated with soapcpp2):
@code
  class PayPalAPISoapBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	DoCapture SOAP
//gsoap ns1  service method-style:	DoCapture document
//gsoap ns1  service method-encoding:	DoCapture literal
//gsoap ns1  service method-action:	DoCapture ""
//gsoap ns1  service method-output-action:	DoCapture Response
//gsoap ns1  service method-input-header-part:	DoCapture ns1__RequesterCredentials
//gsoap ns1  service method-output-header-part:	DoCapture ns1__RequesterCredentials
int __ns1__DoCapture(
    _ns1__DoCaptureReq*                 ns1__DoCaptureReq,	///< Input parameter
    ns1__DoCaptureResponseType         &ns1__DoCaptureResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__DoReauthorization                                                 *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__DoReauthorization" of service binding "PayPalAPISoapBinding".

  - SOAP document/literal style messaging

  - Default endpoints:
    - https://api-aa.sandbox.paypal.com/2.0/
    - https://api.sandbox.paypal.com/2.0/

  - Addressing input action: ""

  - Addressing output action: "Response"

  - Request message has mandatory header part(s) (see @ref SOAP_ENV__Header):
    - ns1__RequesterCredentials

  - Response message has mandatory header part(s): (see @ref SOAP_ENV__Header)
    - ns1__RequesterCredentials

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__DoReauthorization(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__DoReauthorizationReq*         ns1__DoReauthorizationReq,
    // output parameters:
    ns1__DoReauthorizationResponseType &ns1__DoReauthorizationResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__DoReauthorization(
    struct soap *soap,
    // input parameters:
    _ns1__DoReauthorizationReq*         ns1__DoReauthorizationReq,
    // output parameters:
    ns1__DoReauthorizationResponseType &ns1__DoReauthorizationResponse
  );
@endcode

C++ proxy class (defined in soapPayPalAPISoapBindingProxy.h generated with soapcpp2):
@code
  class PayPalAPISoapBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapPayPalAPISoapBindingService.h generated with soapcpp2):
@code
  class PayPalAPISoapBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	DoReauthorization SOAP
//gsoap ns1  service method-style:	DoReauthorization document
//gsoap ns1  service method-encoding:	DoReauthorization literal
//gsoap ns1  service method-action:	DoReauthorization ""
//gsoap ns1  service method-output-action:	DoReauthorization Response
//gsoap ns1  service method-input-header-part:	DoReauthorization ns1__RequesterCredentials
//gsoap ns1  service method-output-header-part:	DoReauthorization ns1__RequesterCredentials
int __ns1__DoReauthorization(
    _ns1__DoReauthorizationReq*         ns1__DoReauthorizationReq,	///< Input parameter
    ns1__DoReauthorizationResponseType &ns1__DoReauthorizationResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__DoVoid                                                            *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__DoVoid" of service binding "PayPalAPISoapBinding".

  - SOAP document/literal style messaging

  - Default endpoints:
    - https://api-aa.sandbox.paypal.com/2.0/
    - https://api.sandbox.paypal.com/2.0/

  - Addressing input action: ""

  - Addressing output action: "Response"

  - Request message has mandatory header part(s) (see @ref SOAP_ENV__Header):
    - ns1__RequesterCredentials

  - Response message has mandatory header part(s): (see @ref SOAP_ENV__Header)
    - ns1__RequesterCredentials

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__DoVoid(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__DoVoidReq*                    ns1__DoVoidReq,
    // output parameters:
    ns1__DoVoidResponseType            &ns1__DoVoidResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__DoVoid(
    struct soap *soap,
    // input parameters:
    _ns1__DoVoidReq*                    ns1__DoVoidReq,
    // output parameters:
    ns1__DoVoidResponseType            &ns1__DoVoidResponse
  );
@endcode

C++ proxy class (defined in soapPayPalAPISoapBindingProxy.h generated with soapcpp2):
@code
  class PayPalAPISoapBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapPayPalAPISoapBindingService.h generated with soapcpp2):
@code
  class PayPalAPISoapBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	DoVoid SOAP
//gsoap ns1  service method-style:	DoVoid document
//gsoap ns1  service method-encoding:	DoVoid literal
//gsoap ns1  service method-action:	DoVoid ""
//gsoap ns1  service method-output-action:	DoVoid Response
//gsoap ns1  service method-input-header-part:	DoVoid ns1__RequesterCredentials
//gsoap ns1  service method-output-header-part:	DoVoid ns1__RequesterCredentials
int __ns1__DoVoid(
    _ns1__DoVoidReq*                    ns1__DoVoidReq,	///< Input parameter
    ns1__DoVoidResponseType            &ns1__DoVoidResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__DoAuthorization                                                   *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__DoAuthorization" of service binding "PayPalAPISoapBinding".

  - SOAP document/literal style messaging

  - Default endpoints:
    - https://api-aa.sandbox.paypal.com/2.0/
    - https://api.sandbox.paypal.com/2.0/

  - Addressing input action: ""

  - Addressing output action: "Response"

  - Request message has mandatory header part(s) (see @ref SOAP_ENV__Header):
    - ns1__RequesterCredentials

  - Response message has mandatory header part(s): (see @ref SOAP_ENV__Header)
    - ns1__RequesterCredentials

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__DoAuthorization(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__DoAuthorizationReq*           ns1__DoAuthorizationReq,
    // output parameters:
    ns1__DoAuthorizationResponseType   &ns1__DoAuthorizationResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__DoAuthorization(
    struct soap *soap,
    // input parameters:
    _ns1__DoAuthorizationReq*           ns1__DoAuthorizationReq,
    // output parameters:
    ns1__DoAuthorizationResponseType   &ns1__DoAuthorizationResponse
  );
@endcode

C++ proxy class (defined in soapPayPalAPISoapBindingProxy.h generated with soapcpp2):
@code
  class PayPalAPISoapBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapPayPalAPISoapBindingService.h generated with soapcpp2):
@code
  class PayPalAPISoapBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	DoAuthorization SOAP
//gsoap ns1  service method-style:	DoAuthorization document
//gsoap ns1  service method-encoding:	DoAuthorization literal
//gsoap ns1  service method-action:	DoAuthorization ""
//gsoap ns1  service method-output-action:	DoAuthorization Response
//gsoap ns1  service method-input-header-part:	DoAuthorization ns1__RequesterCredentials
//gsoap ns1  service method-output-header-part:	DoAuthorization ns1__RequesterCredentials
int __ns1__DoAuthorization(
    _ns1__DoAuthorizationReq*           ns1__DoAuthorizationReq,	///< Input parameter
    ns1__DoAuthorizationResponseType   &ns1__DoAuthorizationResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__UpdateAuthorization                                               *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__UpdateAuthorization" of service binding "PayPalAPISoapBinding".

  - SOAP document/literal style messaging

  - Default endpoints:
    - https://api-aa.sandbox.paypal.com/2.0/
    - https://api.sandbox.paypal.com/2.0/

  - Addressing input action: ""

  - Addressing output action: "Response"

  - Request message has mandatory header part(s) (see @ref SOAP_ENV__Header):
    - ns1__RequesterCredentials

  - Response message has mandatory header part(s): (see @ref SOAP_ENV__Header)
    - ns1__RequesterCredentials

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__UpdateAuthorization(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__UpdateAuthorizationReq*       ns1__UpdateAuthorizationReq,
    // output parameters:
    ns1__UpdateAuthorizationResponseType&ns1__UpdateAuthorizationResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__UpdateAuthorization(
    struct soap *soap,
    // input parameters:
    _ns1__UpdateAuthorizationReq*       ns1__UpdateAuthorizationReq,
    // output parameters:
    ns1__UpdateAuthorizationResponseType&ns1__UpdateAuthorizationResponse
  );
@endcode

C++ proxy class (defined in soapPayPalAPISoapBindingProxy.h generated with soapcpp2):
@code
  class PayPalAPISoapBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapPayPalAPISoapBindingService.h generated with soapcpp2):
@code
  class PayPalAPISoapBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	UpdateAuthorization SOAP
//gsoap ns1  service method-style:	UpdateAuthorization document
//gsoap ns1  service method-encoding:	UpdateAuthorization literal
//gsoap ns1  service method-action:	UpdateAuthorization ""
//gsoap ns1  service method-output-action:	UpdateAuthorization Response
//gsoap ns1  service method-input-header-part:	UpdateAuthorization ns1__RequesterCredentials
//gsoap ns1  service method-output-header-part:	UpdateAuthorization ns1__RequesterCredentials
int __ns1__UpdateAuthorization(
    _ns1__UpdateAuthorizationReq*       ns1__UpdateAuthorizationReq,	///< Input parameter
    ns1__UpdateAuthorizationResponseType&ns1__UpdateAuthorizationResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__DoUATPAuthorization                                               *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__DoUATPAuthorization" of service binding "PayPalAPISoapBinding".

  - SOAP document/literal style messaging

  - Default endpoints:
    - https://api-aa.sandbox.paypal.com/2.0/
    - https://api.sandbox.paypal.com/2.0/

  - Addressing input action: ""

  - Addressing output action: "Response"

  - Request message has mandatory header part(s) (see @ref SOAP_ENV__Header):
    - ns1__RequesterCredentials

  - Response message has mandatory header part(s): (see @ref SOAP_ENV__Header)
    - ns1__RequesterCredentials

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__DoUATPAuthorization(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__DoUATPAuthorizationReq*       ns1__DoUATPAuthorizationReq,
    // output parameters:
    ns1__DoUATPAuthorizationResponseType&ns1__DoUATPAuthorizationResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__DoUATPAuthorization(
    struct soap *soap,
    // input parameters:
    _ns1__DoUATPAuthorizationReq*       ns1__DoUATPAuthorizationReq,
    // output parameters:
    ns1__DoUATPAuthorizationResponseType&ns1__DoUATPAuthorizationResponse
  );
@endcode

C++ proxy class (defined in soapPayPalAPISoapBindingProxy.h generated with soapcpp2):
@code
  class PayPalAPISoapBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapPayPalAPISoapBindingService.h generated with soapcpp2):
@code
  class PayPalAPISoapBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	DoUATPAuthorization SOAP
//gsoap ns1  service method-style:	DoUATPAuthorization document
//gsoap ns1  service method-encoding:	DoUATPAuthorization literal
//gsoap ns1  service method-action:	DoUATPAuthorization ""
//gsoap ns1  service method-output-action:	DoUATPAuthorization Response
//gsoap ns1  service method-input-header-part:	DoUATPAuthorization ns1__RequesterCredentials
//gsoap ns1  service method-output-header-part:	DoUATPAuthorization ns1__RequesterCredentials
int __ns1__DoUATPAuthorization(
    _ns1__DoUATPAuthorizationReq*       ns1__DoUATPAuthorizationReq,	///< Input parameter
    ns1__DoUATPAuthorizationResponseType&ns1__DoUATPAuthorizationResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__SetCustomerBillingAgreement                                       *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__SetCustomerBillingAgreement" of service binding "PayPalAPISoapBinding".

  - SOAP document/literal style messaging

  - Default endpoints:
    - https://api-aa.sandbox.paypal.com/2.0/
    - https://api.sandbox.paypal.com/2.0/

  - Addressing input action: ""

  - Addressing output action: "Response"

  - Request message has mandatory header part(s) (see @ref SOAP_ENV__Header):
    - ns1__RequesterCredentials

  - Response message has mandatory header part(s): (see @ref SOAP_ENV__Header)
    - ns1__RequesterCredentials

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__SetCustomerBillingAgreement(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__SetCustomerBillingAgreementReq* ns1__SetCustomerBillingAgreementReq,
    // output parameters:
    ns1__SetCustomerBillingAgreementResponseType&ns1__SetCustomerBillingAgreementResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__SetCustomerBillingAgreement(
    struct soap *soap,
    // input parameters:
    _ns1__SetCustomerBillingAgreementReq* ns1__SetCustomerBillingAgreementReq,
    // output parameters:
    ns1__SetCustomerBillingAgreementResponseType&ns1__SetCustomerBillingAgreementResponse
  );
@endcode

C++ proxy class (defined in soapPayPalAPISoapBindingProxy.h generated with soapcpp2):
@code
  class PayPalAPISoapBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapPayPalAPISoapBindingService.h generated with soapcpp2):
@code
  class PayPalAPISoapBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	SetCustomerBillingAgreement SOAP
//gsoap ns1  service method-style:	SetCustomerBillingAgreement document
//gsoap ns1  service method-encoding:	SetCustomerBillingAgreement literal
//gsoap ns1  service method-action:	SetCustomerBillingAgreement ""
//gsoap ns1  service method-output-action:	SetCustomerBillingAgreement Response
//gsoap ns1  service method-input-header-part:	SetCustomerBillingAgreement ns1__RequesterCredentials
//gsoap ns1  service method-output-header-part:	SetCustomerBillingAgreement ns1__RequesterCredentials
int __ns1__SetCustomerBillingAgreement(
    _ns1__SetCustomerBillingAgreementReq* ns1__SetCustomerBillingAgreementReq,	///< Input parameter
    ns1__SetCustomerBillingAgreementResponseType&ns1__SetCustomerBillingAgreementResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__GetBillingAgreementCustomerDetails                                *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__GetBillingAgreementCustomerDetails" of service binding "PayPalAPISoapBinding".

  - SOAP document/literal style messaging

  - Default endpoints:
    - https://api-aa.sandbox.paypal.com/2.0/
    - https://api.sandbox.paypal.com/2.0/

  - Addressing input action: ""

  - Addressing output action: "Response"

  - Request message has mandatory header part(s) (see @ref SOAP_ENV__Header):
    - ns1__RequesterCredentials

  - Response message has mandatory header part(s): (see @ref SOAP_ENV__Header)
    - ns1__RequesterCredentials

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__GetBillingAgreementCustomerDetails(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__GetBillingAgreementCustomerDetailsReq* ns1__GetBillingAgreementCustomerDetailsReq,
    // output parameters:
    ns1__GetBillingAgreementCustomerDetailsResponseType&ns1__GetBillingAgreementCustomerDetailsResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__GetBillingAgreementCustomerDetails(
    struct soap *soap,
    // input parameters:
    _ns1__GetBillingAgreementCustomerDetailsReq* ns1__GetBillingAgreementCustomerDetailsReq,
    // output parameters:
    ns1__GetBillingAgreementCustomerDetailsResponseType&ns1__GetBillingAgreementCustomerDetailsResponse
  );
@endcode

C++ proxy class (defined in soapPayPalAPISoapBindingProxy.h generated with soapcpp2):
@code
  class PayPalAPISoapBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapPayPalAPISoapBindingService.h generated with soapcpp2):
@code
  class PayPalAPISoapBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	GetBillingAgreementCustomerDetails SOAP
//gsoap ns1  service method-style:	GetBillingAgreementCustomerDetails document
//gsoap ns1  service method-encoding:	GetBillingAgreementCustomerDetails literal
//gsoap ns1  service method-action:	GetBillingAgreementCustomerDetails ""
//gsoap ns1  service method-output-action:	GetBillingAgreementCustomerDetails Response
//gsoap ns1  service method-input-header-part:	GetBillingAgreementCustomerDetails ns1__RequesterCredentials
//gsoap ns1  service method-output-header-part:	GetBillingAgreementCustomerDetails ns1__RequesterCredentials
int __ns1__GetBillingAgreementCustomerDetails(
    _ns1__GetBillingAgreementCustomerDetailsReq* ns1__GetBillingAgreementCustomerDetailsReq,	///< Input parameter
    ns1__GetBillingAgreementCustomerDetailsResponseType&ns1__GetBillingAgreementCustomerDetailsResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__CreateBillingAgreement                                            *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__CreateBillingAgreement" of service binding "PayPalAPISoapBinding".

  - SOAP document/literal style messaging

  - Default endpoints:
    - https://api-aa.sandbox.paypal.com/2.0/
    - https://api.sandbox.paypal.com/2.0/

  - Addressing input action: ""

  - Addressing output action: "Response"

  - Request message has mandatory header part(s) (see @ref SOAP_ENV__Header):
    - ns1__RequesterCredentials

  - Response message has mandatory header part(s): (see @ref SOAP_ENV__Header)
    - ns1__RequesterCredentials

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__CreateBillingAgreement(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__CreateBillingAgreementReq*    ns1__CreateBillingAgreementReq,
    // output parameters:
    ns1__CreateBillingAgreementResponseType&ns1__CreateBillingAgreementResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__CreateBillingAgreement(
    struct soap *soap,
    // input parameters:
    _ns1__CreateBillingAgreementReq*    ns1__CreateBillingAgreementReq,
    // output parameters:
    ns1__CreateBillingAgreementResponseType&ns1__CreateBillingAgreementResponse
  );
@endcode

C++ proxy class (defined in soapPayPalAPISoapBindingProxy.h generated with soapcpp2):
@code
  class PayPalAPISoapBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapPayPalAPISoapBindingService.h generated with soapcpp2):
@code
  class PayPalAPISoapBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	CreateBillingAgreement SOAP
//gsoap ns1  service method-style:	CreateBillingAgreement document
//gsoap ns1  service method-encoding:	CreateBillingAgreement literal
//gsoap ns1  service method-action:	CreateBillingAgreement ""
//gsoap ns1  service method-output-action:	CreateBillingAgreement Response
//gsoap ns1  service method-input-header-part:	CreateBillingAgreement ns1__RequesterCredentials
//gsoap ns1  service method-output-header-part:	CreateBillingAgreement ns1__RequesterCredentials
int __ns1__CreateBillingAgreement(
    _ns1__CreateBillingAgreementReq*    ns1__CreateBillingAgreementReq,	///< Input parameter
    ns1__CreateBillingAgreementResponseType&ns1__CreateBillingAgreementResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__DoReferenceTransaction                                            *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__DoReferenceTransaction" of service binding "PayPalAPISoapBinding".

  - SOAP document/literal style messaging

  - Default endpoints:
    - https://api-aa.sandbox.paypal.com/2.0/
    - https://api.sandbox.paypal.com/2.0/

  - Addressing input action: ""

  - Addressing output action: "Response"

  - Request message has mandatory header part(s) (see @ref SOAP_ENV__Header):
    - ns1__RequesterCredentials

  - Response message has mandatory header part(s): (see @ref SOAP_ENV__Header)
    - ns1__RequesterCredentials

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__DoReferenceTransaction(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__DoReferenceTransactionReq*    ns1__DoReferenceTransactionReq,
    // output parameters:
    ns1__DoReferenceTransactionResponseType&ns1__DoReferenceTransactionResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__DoReferenceTransaction(
    struct soap *soap,
    // input parameters:
    _ns1__DoReferenceTransactionReq*    ns1__DoReferenceTransactionReq,
    // output parameters:
    ns1__DoReferenceTransactionResponseType&ns1__DoReferenceTransactionResponse
  );
@endcode

C++ proxy class (defined in soapPayPalAPISoapBindingProxy.h generated with soapcpp2):
@code
  class PayPalAPISoapBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapPayPalAPISoapBindingService.h generated with soapcpp2):
@code
  class PayPalAPISoapBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	DoReferenceTransaction SOAP
//gsoap ns1  service method-style:	DoReferenceTransaction document
//gsoap ns1  service method-encoding:	DoReferenceTransaction literal
//gsoap ns1  service method-action:	DoReferenceTransaction ""
//gsoap ns1  service method-output-action:	DoReferenceTransaction Response
//gsoap ns1  service method-input-header-part:	DoReferenceTransaction ns1__RequesterCredentials
//gsoap ns1  service method-output-header-part:	DoReferenceTransaction ns1__RequesterCredentials
int __ns1__DoReferenceTransaction(
    _ns1__DoReferenceTransactionReq*    ns1__DoReferenceTransactionReq,	///< Input parameter
    ns1__DoReferenceTransactionResponseType&ns1__DoReferenceTransactionResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__CreateRecurringPaymentsProfile                                    *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__CreateRecurringPaymentsProfile" of service binding "PayPalAPISoapBinding".

  - SOAP document/literal style messaging

  - Default endpoints:
    - https://api-aa.sandbox.paypal.com/2.0/
    - https://api.sandbox.paypal.com/2.0/

  - Addressing input action: ""

  - Addressing output action: "Response"

  - Request message has mandatory header part(s) (see @ref SOAP_ENV__Header):
    - ns1__RequesterCredentials

  - Response message has mandatory header part(s): (see @ref SOAP_ENV__Header)
    - ns1__RequesterCredentials

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__CreateRecurringPaymentsProfile(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__CreateRecurringPaymentsProfileReq* ns1__CreateRecurringPaymentsProfileReq,
    // output parameters:
    ns1__CreateRecurringPaymentsProfileResponseType&ns1__CreateRecurringPaymentsProfileResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__CreateRecurringPaymentsProfile(
    struct soap *soap,
    // input parameters:
    _ns1__CreateRecurringPaymentsProfileReq* ns1__CreateRecurringPaymentsProfileReq,
    // output parameters:
    ns1__CreateRecurringPaymentsProfileResponseType&ns1__CreateRecurringPaymentsProfileResponse
  );
@endcode

C++ proxy class (defined in soapPayPalAPISoapBindingProxy.h generated with soapcpp2):
@code
  class PayPalAPISoapBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapPayPalAPISoapBindingService.h generated with soapcpp2):
@code
  class PayPalAPISoapBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	CreateRecurringPaymentsProfile SOAP
//gsoap ns1  service method-style:	CreateRecurringPaymentsProfile document
//gsoap ns1  service method-encoding:	CreateRecurringPaymentsProfile literal
//gsoap ns1  service method-action:	CreateRecurringPaymentsProfile ""
//gsoap ns1  service method-output-action:	CreateRecurringPaymentsProfile Response
//gsoap ns1  service method-input-header-part:	CreateRecurringPaymentsProfile ns1__RequesterCredentials
//gsoap ns1  service method-output-header-part:	CreateRecurringPaymentsProfile ns1__RequesterCredentials
int __ns1__CreateRecurringPaymentsProfile(
    _ns1__CreateRecurringPaymentsProfileReq* ns1__CreateRecurringPaymentsProfileReq,	///< Input parameter
    ns1__CreateRecurringPaymentsProfileResponseType&ns1__CreateRecurringPaymentsProfileResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__GetRecurringPaymentsProfileDetails                                *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__GetRecurringPaymentsProfileDetails" of service binding "PayPalAPISoapBinding".

  - SOAP document/literal style messaging

  - Default endpoints:
    - https://api-aa.sandbox.paypal.com/2.0/
    - https://api.sandbox.paypal.com/2.0/

  - Addressing input action: ""

  - Addressing output action: "Response"

  - Request message has mandatory header part(s) (see @ref SOAP_ENV__Header):
    - ns1__RequesterCredentials

  - Response message has mandatory header part(s): (see @ref SOAP_ENV__Header)
    - ns1__RequesterCredentials

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__GetRecurringPaymentsProfileDetails(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__GetRecurringPaymentsProfileDetailsReq* ns1__GetRecurringPaymentsProfileDetailsReq,
    // output parameters:
    ns1__GetRecurringPaymentsProfileDetailsResponseType&ns1__GetRecurringPaymentsProfileDetailsResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__GetRecurringPaymentsProfileDetails(
    struct soap *soap,
    // input parameters:
    _ns1__GetRecurringPaymentsProfileDetailsReq* ns1__GetRecurringPaymentsProfileDetailsReq,
    // output parameters:
    ns1__GetRecurringPaymentsProfileDetailsResponseType&ns1__GetRecurringPaymentsProfileDetailsResponse
  );
@endcode

C++ proxy class (defined in soapPayPalAPISoapBindingProxy.h generated with soapcpp2):
@code
  class PayPalAPISoapBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapPayPalAPISoapBindingService.h generated with soapcpp2):
@code
  class PayPalAPISoapBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	GetRecurringPaymentsProfileDetails SOAP
//gsoap ns1  service method-style:	GetRecurringPaymentsProfileDetails document
//gsoap ns1  service method-encoding:	GetRecurringPaymentsProfileDetails literal
//gsoap ns1  service method-action:	GetRecurringPaymentsProfileDetails ""
//gsoap ns1  service method-output-action:	GetRecurringPaymentsProfileDetails Response
//gsoap ns1  service method-input-header-part:	GetRecurringPaymentsProfileDetails ns1__RequesterCredentials
//gsoap ns1  service method-output-header-part:	GetRecurringPaymentsProfileDetails ns1__RequesterCredentials
int __ns1__GetRecurringPaymentsProfileDetails(
    _ns1__GetRecurringPaymentsProfileDetailsReq* ns1__GetRecurringPaymentsProfileDetailsReq,	///< Input parameter
    ns1__GetRecurringPaymentsProfileDetailsResponseType&ns1__GetRecurringPaymentsProfileDetailsResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__ManageRecurringPaymentsProfileStatus                              *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__ManageRecurringPaymentsProfileStatus" of service binding "PayPalAPISoapBinding".

  - SOAP document/literal style messaging

  - Default endpoints:
    - https://api-aa.sandbox.paypal.com/2.0/
    - https://api.sandbox.paypal.com/2.0/

  - Addressing input action: ""

  - Addressing output action: "Response"

  - Request message has mandatory header part(s) (see @ref SOAP_ENV__Header):
    - ns1__RequesterCredentials

  - Response message has mandatory header part(s): (see @ref SOAP_ENV__Header)
    - ns1__RequesterCredentials

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__ManageRecurringPaymentsProfileStatus(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__ManageRecurringPaymentsProfileStatusReq* ns1__ManageRecurringPaymentsProfileStatusReq,
    // output parameters:
    ns1__ManageRecurringPaymentsProfileStatusResponseType&ns1__ManageRecurringPaymentsProfileStatusResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__ManageRecurringPaymentsProfileStatus(
    struct soap *soap,
    // input parameters:
    _ns1__ManageRecurringPaymentsProfileStatusReq* ns1__ManageRecurringPaymentsProfileStatusReq,
    // output parameters:
    ns1__ManageRecurringPaymentsProfileStatusResponseType&ns1__ManageRecurringPaymentsProfileStatusResponse
  );
@endcode

C++ proxy class (defined in soapPayPalAPISoapBindingProxy.h generated with soapcpp2):
@code
  class PayPalAPISoapBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapPayPalAPISoapBindingService.h generated with soapcpp2):
@code
  class PayPalAPISoapBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	ManageRecurringPaymentsProfileStatus SOAP
//gsoap ns1  service method-style:	ManageRecurringPaymentsProfileStatus document
//gsoap ns1  service method-encoding:	ManageRecurringPaymentsProfileStatus literal
//gsoap ns1  service method-action:	ManageRecurringPaymentsProfileStatus ""
//gsoap ns1  service method-output-action:	ManageRecurringPaymentsProfileStatus Response
//gsoap ns1  service method-input-header-part:	ManageRecurringPaymentsProfileStatus ns1__RequesterCredentials
//gsoap ns1  service method-output-header-part:	ManageRecurringPaymentsProfileStatus ns1__RequesterCredentials
int __ns1__ManageRecurringPaymentsProfileStatus(
    _ns1__ManageRecurringPaymentsProfileStatusReq* ns1__ManageRecurringPaymentsProfileStatusReq,	///< Input parameter
    ns1__ManageRecurringPaymentsProfileStatusResponseType&ns1__ManageRecurringPaymentsProfileStatusResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__BillOutstandingAmount                                             *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__BillOutstandingAmount" of service binding "PayPalAPISoapBinding".

  - SOAP document/literal style messaging

  - Default endpoints:
    - https://api-aa.sandbox.paypal.com/2.0/
    - https://api.sandbox.paypal.com/2.0/

  - Addressing input action: ""

  - Addressing output action: "Response"

  - Request message has mandatory header part(s) (see @ref SOAP_ENV__Header):
    - ns1__RequesterCredentials

  - Response message has mandatory header part(s): (see @ref SOAP_ENV__Header)
    - ns1__RequesterCredentials

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__BillOutstandingAmount(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__BillOutstandingAmountReq*     ns1__BillOutstandingAmountReq,
    // output parameters:
    ns1__BillOutstandingAmountResponseType&ns1__BillOutstandingAmountResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__BillOutstandingAmount(
    struct soap *soap,
    // input parameters:
    _ns1__BillOutstandingAmountReq*     ns1__BillOutstandingAmountReq,
    // output parameters:
    ns1__BillOutstandingAmountResponseType&ns1__BillOutstandingAmountResponse
  );
@endcode

C++ proxy class (defined in soapPayPalAPISoapBindingProxy.h generated with soapcpp2):
@code
  class PayPalAPISoapBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapPayPalAPISoapBindingService.h generated with soapcpp2):
@code
  class PayPalAPISoapBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	BillOutstandingAmount SOAP
//gsoap ns1  service method-style:	BillOutstandingAmount document
//gsoap ns1  service method-encoding:	BillOutstandingAmount literal
//gsoap ns1  service method-action:	BillOutstandingAmount ""
//gsoap ns1  service method-output-action:	BillOutstandingAmount Response
//gsoap ns1  service method-input-header-part:	BillOutstandingAmount ns1__RequesterCredentials
//gsoap ns1  service method-output-header-part:	BillOutstandingAmount ns1__RequesterCredentials
int __ns1__BillOutstandingAmount(
    _ns1__BillOutstandingAmountReq*     ns1__BillOutstandingAmountReq,	///< Input parameter
    ns1__BillOutstandingAmountResponseType&ns1__BillOutstandingAmountResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__UpdateRecurringPaymentsProfile                                    *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__UpdateRecurringPaymentsProfile" of service binding "PayPalAPISoapBinding".

  - SOAP document/literal style messaging

  - Default endpoints:
    - https://api-aa.sandbox.paypal.com/2.0/
    - https://api.sandbox.paypal.com/2.0/

  - Addressing input action: ""

  - Addressing output action: "Response"

  - Request message has mandatory header part(s) (see @ref SOAP_ENV__Header):
    - ns1__RequesterCredentials

  - Response message has mandatory header part(s): (see @ref SOAP_ENV__Header)
    - ns1__RequesterCredentials

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__UpdateRecurringPaymentsProfile(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__UpdateRecurringPaymentsProfileReq* ns1__UpdateRecurringPaymentsProfileReq,
    // output parameters:
    ns1__UpdateRecurringPaymentsProfileResponseType&ns1__UpdateRecurringPaymentsProfileResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__UpdateRecurringPaymentsProfile(
    struct soap *soap,
    // input parameters:
    _ns1__UpdateRecurringPaymentsProfileReq* ns1__UpdateRecurringPaymentsProfileReq,
    // output parameters:
    ns1__UpdateRecurringPaymentsProfileResponseType&ns1__UpdateRecurringPaymentsProfileResponse
  );
@endcode

C++ proxy class (defined in soapPayPalAPISoapBindingProxy.h generated with soapcpp2):
@code
  class PayPalAPISoapBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapPayPalAPISoapBindingService.h generated with soapcpp2):
@code
  class PayPalAPISoapBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	UpdateRecurringPaymentsProfile SOAP
//gsoap ns1  service method-style:	UpdateRecurringPaymentsProfile document
//gsoap ns1  service method-encoding:	UpdateRecurringPaymentsProfile literal
//gsoap ns1  service method-action:	UpdateRecurringPaymentsProfile ""
//gsoap ns1  service method-output-action:	UpdateRecurringPaymentsProfile Response
//gsoap ns1  service method-input-header-part:	UpdateRecurringPaymentsProfile ns1__RequesterCredentials
//gsoap ns1  service method-output-header-part:	UpdateRecurringPaymentsProfile ns1__RequesterCredentials
int __ns1__UpdateRecurringPaymentsProfile(
    _ns1__UpdateRecurringPaymentsProfileReq* ns1__UpdateRecurringPaymentsProfileReq,	///< Input parameter
    ns1__UpdateRecurringPaymentsProfileResponseType&ns1__UpdateRecurringPaymentsProfileResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__DoNonReferencedCredit                                             *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__DoNonReferencedCredit" of service binding "PayPalAPISoapBinding".

  - SOAP document/literal style messaging

  - Default endpoints:
    - https://api-aa.sandbox.paypal.com/2.0/
    - https://api.sandbox.paypal.com/2.0/

  - Addressing input action: ""

  - Addressing output action: "Response"

  - Request message has mandatory header part(s) (see @ref SOAP_ENV__Header):
    - ns1__RequesterCredentials

  - Response message has mandatory header part(s): (see @ref SOAP_ENV__Header)
    - ns1__RequesterCredentials

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__DoNonReferencedCredit(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__DoNonReferencedCreditReq*     ns1__DoNonReferencedCreditReq,
    // output parameters:
    ns1__DoNonReferencedCreditResponseType&ns1__DoNonReferencedCreditResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__DoNonReferencedCredit(
    struct soap *soap,
    // input parameters:
    _ns1__DoNonReferencedCreditReq*     ns1__DoNonReferencedCreditReq,
    // output parameters:
    ns1__DoNonReferencedCreditResponseType&ns1__DoNonReferencedCreditResponse
  );
@endcode

C++ proxy class (defined in soapPayPalAPISoapBindingProxy.h generated with soapcpp2):
@code
  class PayPalAPISoapBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapPayPalAPISoapBindingService.h generated with soapcpp2):
@code
  class PayPalAPISoapBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	DoNonReferencedCredit SOAP
//gsoap ns1  service method-style:	DoNonReferencedCredit document
//gsoap ns1  service method-encoding:	DoNonReferencedCredit literal
//gsoap ns1  service method-action:	DoNonReferencedCredit ""
//gsoap ns1  service method-output-action:	DoNonReferencedCredit Response
//gsoap ns1  service method-input-header-part:	DoNonReferencedCredit ns1__RequesterCredentials
//gsoap ns1  service method-output-header-part:	DoNonReferencedCredit ns1__RequesterCredentials
int __ns1__DoNonReferencedCredit(
    _ns1__DoNonReferencedCreditReq*     ns1__DoNonReferencedCreditReq,	///< Input parameter
    ns1__DoNonReferencedCreditResponseType&ns1__DoNonReferencedCreditResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__ReverseTransaction                                                *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__ReverseTransaction" of service binding "PayPalAPISoapBinding".

  - SOAP document/literal style messaging

  - Default endpoints:
    - https://api-aa.sandbox.paypal.com/2.0/
    - https://api.sandbox.paypal.com/2.0/

  - Addressing input action: ""

  - Addressing output action: "Response"

  - Request message has mandatory header part(s) (see @ref SOAP_ENV__Header):
    - ns1__RequesterCredentials

  - Response message has mandatory header part(s): (see @ref SOAP_ENV__Header)
    - ns1__RequesterCredentials

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__ReverseTransaction(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__ReverseTransactionReq*        ns1__ReverseTransactionReq,
    // output parameters:
    ns1__ReverseTransactionResponseType&ns1__ReverseTransactionResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__ReverseTransaction(
    struct soap *soap,
    // input parameters:
    _ns1__ReverseTransactionReq*        ns1__ReverseTransactionReq,
    // output parameters:
    ns1__ReverseTransactionResponseType&ns1__ReverseTransactionResponse
  );
@endcode

C++ proxy class (defined in soapPayPalAPISoapBindingProxy.h generated with soapcpp2):
@code
  class PayPalAPISoapBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapPayPalAPISoapBindingService.h generated with soapcpp2):
@code
  class PayPalAPISoapBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	ReverseTransaction SOAP
//gsoap ns1  service method-style:	ReverseTransaction document
//gsoap ns1  service method-encoding:	ReverseTransaction literal
//gsoap ns1  service method-action:	ReverseTransaction ""
//gsoap ns1  service method-output-action:	ReverseTransaction Response
//gsoap ns1  service method-input-header-part:	ReverseTransaction ns1__RequesterCredentials
//gsoap ns1  service method-output-header-part:	ReverseTransaction ns1__RequesterCredentials
int __ns1__ReverseTransaction(
    _ns1__ReverseTransactionReq*        ns1__ReverseTransactionReq,	///< Input parameter
    ns1__ReverseTransactionResponseType&ns1__ReverseTransactionResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__ExternalRememberMeOptOut                                          *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__ExternalRememberMeOptOut" of service binding "PayPalAPISoapBinding".

  - SOAP document/literal style messaging

  - Default endpoints:
    - https://api-aa.sandbox.paypal.com/2.0/
    - https://api.sandbox.paypal.com/2.0/

  - Addressing input action: ""

  - Addressing output action: "Response"

  - Request message has mandatory header part(s) (see @ref SOAP_ENV__Header):
    - ns1__RequesterCredentials

  - Response message has mandatory header part(s): (see @ref SOAP_ENV__Header)
    - ns1__RequesterCredentials

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__ExternalRememberMeOptOut(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__ExternalRememberMeOptOutReq*  ns1__ExternalRememberMeOptOutReq,
    // output parameters:
    ns1__ExternalRememberMeOptOutResponseType&ns1__ExternalRememberMeOptOutResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__ExternalRememberMeOptOut(
    struct soap *soap,
    // input parameters:
    _ns1__ExternalRememberMeOptOutReq*  ns1__ExternalRememberMeOptOutReq,
    // output parameters:
    ns1__ExternalRememberMeOptOutResponseType&ns1__ExternalRememberMeOptOutResponse
  );
@endcode

C++ proxy class (defined in soapPayPalAPISoapBindingProxy.h generated with soapcpp2):
@code
  class PayPalAPISoapBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapPayPalAPISoapBindingService.h generated with soapcpp2):
@code
  class PayPalAPISoapBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	ExternalRememberMeOptOut SOAP
//gsoap ns1  service method-style:	ExternalRememberMeOptOut document
//gsoap ns1  service method-encoding:	ExternalRememberMeOptOut literal
//gsoap ns1  service method-action:	ExternalRememberMeOptOut ""
//gsoap ns1  service method-output-action:	ExternalRememberMeOptOut Response
//gsoap ns1  service method-input-header-part:	ExternalRememberMeOptOut ns1__RequesterCredentials
//gsoap ns1  service method-output-header-part:	ExternalRememberMeOptOut ns1__RequesterCredentials
int __ns1__ExternalRememberMeOptOut(
    _ns1__ExternalRememberMeOptOutReq*  ns1__ExternalRememberMeOptOutReq,	///< Input parameter
    ns1__ExternalRememberMeOptOutResponseType&ns1__ExternalRememberMeOptOutResponse	///< Output parameter
);

/**

@page PayPalAPISoapBinding Binding "PayPalAPISoapBinding"

@section PayPalAPISoapBinding_policy_enablers Policy Enablers of Binding "PayPalAPISoapBinding"

None specified.

*/

/******************************************************************************\
 *                                                                            *
 * XML Data Binding                                                           *
 *                                                                            *
\******************************************************************************/


/**

@page page_XMLDataBinding XML Data Binding

SOAP/XML services use data bindings contractually bound by WSDL and auto-
generated by wsdl2h and soapcpp2 (see Service Bindings). Plain data bindings
are adopted from XML schemas as part of the WSDL types section or when running
wsdl2h on a set of schemas to produce non-SOAP-based XML data bindings.

The following readers and writers are C/C++ data type (de)serializers auto-
generated by wsdl2h and soapcpp2. Run soapcpp2 on this file to generate the
(de)serialization code, which is stored in soapC.c[pp]. Include "soapH.h" in
your code to import these data type and function declarations. Only use the
soapcpp2-generated files in your project build. Do not include the wsdl2h-
generated .h file in your code.

Data can be read and deserialized from:
  - an int file descriptor, using soap->recvfd = fd
  - a socket, using soap->socket = (int)...
  - a C++ stream (istream, stringstream), using soap->is = (istream*)...
  - a C string, using soap->is = (const char*)...
  - any input, using the soap->frecv() callback

Data can be serialized and written to:
  - an int file descriptor, using soap->sendfd = (int)...
  - a socket, using soap->socket = (int)...
  - a C++ stream (ostream, stringstream), using soap->os = (ostream*)...
  - a C string, using soap->os = (const char**)...
  - any output, using the soap->fsend() callback

The following options are available for (de)serialization control:
  - soap->encodingStyle = NULL; to remove SOAP 1.1/1.2 encodingStyle
  - soap_mode(soap, SOAP_XML_TREE); XML without id-ref (no cycles!)
  - soap_mode(soap, SOAP_XML_GRAPH); XML with id-ref (including cycles)
  - soap_set_namespaces(soap, struct Namespace *nsmap); to set xmlns bindings


@section ns1 Top-level root elements of schema "urn:ebay:api:PayPalAPI"

  - <ns1:RequesterCredentials> (use wsdl2h option -g to auto-generate type _ns1__RequesterCredentials)

  - <ns1:BMCreateButtonRequest> (use wsdl2h option -g to auto-generate type _ns1__BMCreateButtonRequest)

  - <ns1:BMCreateButtonResponse> (use wsdl2h option -g to auto-generate type _ns1__BMCreateButtonResponse)

  - <ns1:BMCreateButtonReq> @ref _ns1__BMCreateButtonReq
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__BMCreateButtonReq(struct soap*, _ns1__BMCreateButtonReq*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__BMCreateButtonReq(struct soap*, _ns1__BMCreateButtonReq*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__BMCreateButtonReq(struct soap*, const char *URL, _ns1__BMCreateButtonReq*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__BMCreateButtonReq(struct soap*, const char *URL, _ns1__BMCreateButtonReq*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__BMCreateButtonReq(struct soap*, const char *URL, _ns1__BMCreateButtonReq*);
    soap_POST_recv__ns1__BMCreateButtonReq(struct soap*, _ns1__BMCreateButtonReq*);
    @endcode

  - <ns1:BMUpdateButtonRequest> (use wsdl2h option -g to auto-generate type _ns1__BMUpdateButtonRequest)

  - <ns1:BMUpdateButtonResponse> (use wsdl2h option -g to auto-generate type _ns1__BMUpdateButtonResponse)

  - <ns1:BMUpdateButtonReq> @ref _ns1__BMUpdateButtonReq
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__BMUpdateButtonReq(struct soap*, _ns1__BMUpdateButtonReq*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__BMUpdateButtonReq(struct soap*, _ns1__BMUpdateButtonReq*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__BMUpdateButtonReq(struct soap*, const char *URL, _ns1__BMUpdateButtonReq*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__BMUpdateButtonReq(struct soap*, const char *URL, _ns1__BMUpdateButtonReq*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__BMUpdateButtonReq(struct soap*, const char *URL, _ns1__BMUpdateButtonReq*);
    soap_POST_recv__ns1__BMUpdateButtonReq(struct soap*, _ns1__BMUpdateButtonReq*);
    @endcode

  - <ns1:BMManageButtonStatusRequest> (use wsdl2h option -g to auto-generate type _ns1__BMManageButtonStatusRequest)

  - <ns1:BMManageButtonStatusResponse> (use wsdl2h option -g to auto-generate type _ns1__BMManageButtonStatusResponse)

  - <ns1:BMManageButtonStatusReq> @ref _ns1__BMManageButtonStatusReq
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__BMManageButtonStatusReq(struct soap*, _ns1__BMManageButtonStatusReq*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__BMManageButtonStatusReq(struct soap*, _ns1__BMManageButtonStatusReq*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__BMManageButtonStatusReq(struct soap*, const char *URL, _ns1__BMManageButtonStatusReq*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__BMManageButtonStatusReq(struct soap*, const char *URL, _ns1__BMManageButtonStatusReq*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__BMManageButtonStatusReq(struct soap*, const char *URL, _ns1__BMManageButtonStatusReq*);
    soap_POST_recv__ns1__BMManageButtonStatusReq(struct soap*, _ns1__BMManageButtonStatusReq*);
    @endcode

  - <ns1:BMGetButtonDetailsRequest> (use wsdl2h option -g to auto-generate type _ns1__BMGetButtonDetailsRequest)

  - <ns1:BMGetButtonDetailsResponse> (use wsdl2h option -g to auto-generate type _ns1__BMGetButtonDetailsResponse)

  - <ns1:BMGetButtonDetailsReq> @ref _ns1__BMGetButtonDetailsReq
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__BMGetButtonDetailsReq(struct soap*, _ns1__BMGetButtonDetailsReq*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__BMGetButtonDetailsReq(struct soap*, _ns1__BMGetButtonDetailsReq*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__BMGetButtonDetailsReq(struct soap*, const char *URL, _ns1__BMGetButtonDetailsReq*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__BMGetButtonDetailsReq(struct soap*, const char *URL, _ns1__BMGetButtonDetailsReq*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__BMGetButtonDetailsReq(struct soap*, const char *URL, _ns1__BMGetButtonDetailsReq*);
    soap_POST_recv__ns1__BMGetButtonDetailsReq(struct soap*, _ns1__BMGetButtonDetailsReq*);
    @endcode

  - <ns1:BMSetInventoryRequest> (use wsdl2h option -g to auto-generate type _ns1__BMSetInventoryRequest)

  - <ns1:BMSetInventoryResponse> (use wsdl2h option -g to auto-generate type _ns1__BMSetInventoryResponse)

  - <ns1:BMSetInventoryReq> @ref _ns1__BMSetInventoryReq
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__BMSetInventoryReq(struct soap*, _ns1__BMSetInventoryReq*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__BMSetInventoryReq(struct soap*, _ns1__BMSetInventoryReq*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__BMSetInventoryReq(struct soap*, const char *URL, _ns1__BMSetInventoryReq*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__BMSetInventoryReq(struct soap*, const char *URL, _ns1__BMSetInventoryReq*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__BMSetInventoryReq(struct soap*, const char *URL, _ns1__BMSetInventoryReq*);
    soap_POST_recv__ns1__BMSetInventoryReq(struct soap*, _ns1__BMSetInventoryReq*);
    @endcode

  - <ns1:BMGetInventoryRequest> (use wsdl2h option -g to auto-generate type _ns1__BMGetInventoryRequest)

  - <ns1:BMGetInventoryResponse> (use wsdl2h option -g to auto-generate type _ns1__BMGetInventoryResponse)

  - <ns1:BMGetInventoryReq> @ref _ns1__BMGetInventoryReq
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__BMGetInventoryReq(struct soap*, _ns1__BMGetInventoryReq*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__BMGetInventoryReq(struct soap*, _ns1__BMGetInventoryReq*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__BMGetInventoryReq(struct soap*, const char *URL, _ns1__BMGetInventoryReq*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__BMGetInventoryReq(struct soap*, const char *URL, _ns1__BMGetInventoryReq*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__BMGetInventoryReq(struct soap*, const char *URL, _ns1__BMGetInventoryReq*);
    soap_POST_recv__ns1__BMGetInventoryReq(struct soap*, _ns1__BMGetInventoryReq*);
    @endcode

  - <ns1:BMButtonSearchRequest> (use wsdl2h option -g to auto-generate type _ns1__BMButtonSearchRequest)

  - <ns1:BMButtonSearchResponse> (use wsdl2h option -g to auto-generate type _ns1__BMButtonSearchResponse)

  - <ns1:BMButtonSearchReq> @ref _ns1__BMButtonSearchReq
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__BMButtonSearchReq(struct soap*, _ns1__BMButtonSearchReq*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__BMButtonSearchReq(struct soap*, _ns1__BMButtonSearchReq*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__BMButtonSearchReq(struct soap*, const char *URL, _ns1__BMButtonSearchReq*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__BMButtonSearchReq(struct soap*, const char *URL, _ns1__BMButtonSearchReq*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__BMButtonSearchReq(struct soap*, const char *URL, _ns1__BMButtonSearchReq*);
    soap_POST_recv__ns1__BMButtonSearchReq(struct soap*, _ns1__BMButtonSearchReq*);
    @endcode

  - <ns1:RefundTransactionRequest> (use wsdl2h option -g to auto-generate type _ns1__RefundTransactionRequest)

  - <ns1:RefundTransactionResponse> (use wsdl2h option -g to auto-generate type _ns1__RefundTransactionResponse)

  - <ns1:RefundTransactionReq> @ref _ns1__RefundTransactionReq
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__RefundTransactionReq(struct soap*, _ns1__RefundTransactionReq*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__RefundTransactionReq(struct soap*, _ns1__RefundTransactionReq*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__RefundTransactionReq(struct soap*, const char *URL, _ns1__RefundTransactionReq*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__RefundTransactionReq(struct soap*, const char *URL, _ns1__RefundTransactionReq*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__RefundTransactionReq(struct soap*, const char *URL, _ns1__RefundTransactionReq*);
    soap_POST_recv__ns1__RefundTransactionReq(struct soap*, _ns1__RefundTransactionReq*);
    @endcode

  - <ns1:InitiateRecoupRequest> (use wsdl2h option -g to auto-generate type _ns1__InitiateRecoupRequest)

  - <ns1:InitiateRecoupResponse> (use wsdl2h option -g to auto-generate type _ns1__InitiateRecoupResponse)

  - <ns1:InitiateRecoupReq> @ref _ns1__InitiateRecoupReq
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__InitiateRecoupReq(struct soap*, _ns1__InitiateRecoupReq*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__InitiateRecoupReq(struct soap*, _ns1__InitiateRecoupReq*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__InitiateRecoupReq(struct soap*, const char *URL, _ns1__InitiateRecoupReq*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__InitiateRecoupReq(struct soap*, const char *URL, _ns1__InitiateRecoupReq*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__InitiateRecoupReq(struct soap*, const char *URL, _ns1__InitiateRecoupReq*);
    soap_POST_recv__ns1__InitiateRecoupReq(struct soap*, _ns1__InitiateRecoupReq*);
    @endcode

  - <ns1:CompleteRecoupRequest> (use wsdl2h option -g to auto-generate type _ns1__CompleteRecoupRequest)

  - <ns1:CompleteRecoupResponse> (use wsdl2h option -g to auto-generate type _ns1__CompleteRecoupResponse)

  - <ns1:CompleteRecoupReq> @ref _ns1__CompleteRecoupReq
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__CompleteRecoupReq(struct soap*, _ns1__CompleteRecoupReq*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__CompleteRecoupReq(struct soap*, _ns1__CompleteRecoupReq*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__CompleteRecoupReq(struct soap*, const char *URL, _ns1__CompleteRecoupReq*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__CompleteRecoupReq(struct soap*, const char *URL, _ns1__CompleteRecoupReq*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__CompleteRecoupReq(struct soap*, const char *URL, _ns1__CompleteRecoupReq*);
    soap_POST_recv__ns1__CompleteRecoupReq(struct soap*, _ns1__CompleteRecoupReq*);
    @endcode

  - <ns1:CancelRecoupRequest> (use wsdl2h option -g to auto-generate type _ns1__CancelRecoupRequest)

  - <ns1:CancelRecoupResponse> (use wsdl2h option -g to auto-generate type _ns1__CancelRecoupResponse)

  - <ns1:CancelRecoupReq> @ref _ns1__CancelRecoupReq
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__CancelRecoupReq(struct soap*, _ns1__CancelRecoupReq*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__CancelRecoupReq(struct soap*, _ns1__CancelRecoupReq*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__CancelRecoupReq(struct soap*, const char *URL, _ns1__CancelRecoupReq*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__CancelRecoupReq(struct soap*, const char *URL, _ns1__CancelRecoupReq*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__CancelRecoupReq(struct soap*, const char *URL, _ns1__CancelRecoupReq*);
    soap_POST_recv__ns1__CancelRecoupReq(struct soap*, _ns1__CancelRecoupReq*);
    @endcode

  - <ns1:GetTransactionDetailsRequest> (use wsdl2h option -g to auto-generate type _ns1__GetTransactionDetailsRequest)

  - <ns1:GetTransactionDetailsResponse> (use wsdl2h option -g to auto-generate type _ns1__GetTransactionDetailsResponse)

  - <ns1:GetTransactionDetailsReq> @ref _ns1__GetTransactionDetailsReq
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__GetTransactionDetailsReq(struct soap*, _ns1__GetTransactionDetailsReq*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__GetTransactionDetailsReq(struct soap*, _ns1__GetTransactionDetailsReq*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__GetTransactionDetailsReq(struct soap*, const char *URL, _ns1__GetTransactionDetailsReq*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__GetTransactionDetailsReq(struct soap*, const char *URL, _ns1__GetTransactionDetailsReq*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__GetTransactionDetailsReq(struct soap*, const char *URL, _ns1__GetTransactionDetailsReq*);
    soap_POST_recv__ns1__GetTransactionDetailsReq(struct soap*, _ns1__GetTransactionDetailsReq*);
    @endcode

  - <ns1:BillUserRequest> (use wsdl2h option -g to auto-generate type _ns1__BillUserRequest)

  - <ns1:BillUserResponse> (use wsdl2h option -g to auto-generate type _ns1__BillUserResponse)

  - <ns1:BillUserReq> @ref _ns1__BillUserReq
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__BillUserReq(struct soap*, _ns1__BillUserReq*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__BillUserReq(struct soap*, _ns1__BillUserReq*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__BillUserReq(struct soap*, const char *URL, _ns1__BillUserReq*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__BillUserReq(struct soap*, const char *URL, _ns1__BillUserReq*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__BillUserReq(struct soap*, const char *URL, _ns1__BillUserReq*);
    soap_POST_recv__ns1__BillUserReq(struct soap*, _ns1__BillUserReq*);
    @endcode

  - <ns1:TransactionSearchRequest> (use wsdl2h option -g to auto-generate type _ns1__TransactionSearchRequest)

  - <ns1:TransactionSearchResponse> (use wsdl2h option -g to auto-generate type _ns1__TransactionSearchResponse)

  - <ns1:TransactionSearchReq> @ref _ns1__TransactionSearchReq
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__TransactionSearchReq(struct soap*, _ns1__TransactionSearchReq*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__TransactionSearchReq(struct soap*, _ns1__TransactionSearchReq*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__TransactionSearchReq(struct soap*, const char *URL, _ns1__TransactionSearchReq*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__TransactionSearchReq(struct soap*, const char *URL, _ns1__TransactionSearchReq*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__TransactionSearchReq(struct soap*, const char *URL, _ns1__TransactionSearchReq*);
    soap_POST_recv__ns1__TransactionSearchReq(struct soap*, _ns1__TransactionSearchReq*);
    @endcode

  - <ns1:MassPayRequest> (use wsdl2h option -g to auto-generate type _ns1__MassPayRequest)

  - <ns1:MassPayResponse> (use wsdl2h option -g to auto-generate type _ns1__MassPayResponse)

  - <ns1:MassPayReq> @ref _ns1__MassPayReq
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__MassPayReq(struct soap*, _ns1__MassPayReq*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__MassPayReq(struct soap*, _ns1__MassPayReq*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__MassPayReq(struct soap*, const char *URL, _ns1__MassPayReq*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__MassPayReq(struct soap*, const char *URL, _ns1__MassPayReq*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__MassPayReq(struct soap*, const char *URL, _ns1__MassPayReq*);
    soap_POST_recv__ns1__MassPayReq(struct soap*, _ns1__MassPayReq*);
    @endcode

  - <ns1:BAUpdateRequest> (use wsdl2h option -g to auto-generate type _ns1__BAUpdateRequest)

  - <ns1:BAUpdateResponse> (use wsdl2h option -g to auto-generate type _ns1__BAUpdateResponse)

  - <ns1:BillAgreementUpdateReq> @ref _ns1__BillAgreementUpdateReq
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__BillAgreementUpdateReq(struct soap*, _ns1__BillAgreementUpdateReq*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__BillAgreementUpdateReq(struct soap*, _ns1__BillAgreementUpdateReq*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__BillAgreementUpdateReq(struct soap*, const char *URL, _ns1__BillAgreementUpdateReq*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__BillAgreementUpdateReq(struct soap*, const char *URL, _ns1__BillAgreementUpdateReq*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__BillAgreementUpdateReq(struct soap*, const char *URL, _ns1__BillAgreementUpdateReq*);
    soap_POST_recv__ns1__BillAgreementUpdateReq(struct soap*, _ns1__BillAgreementUpdateReq*);
    @endcode

  - <ns1:AddressVerifyRequest> (use wsdl2h option -g to auto-generate type _ns1__AddressVerifyRequest)

  - <ns1:AddressVerifyResponse> (use wsdl2h option -g to auto-generate type _ns1__AddressVerifyResponse)

  - <ns1:AddressVerifyReq> @ref _ns1__AddressVerifyReq
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__AddressVerifyReq(struct soap*, _ns1__AddressVerifyReq*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__AddressVerifyReq(struct soap*, _ns1__AddressVerifyReq*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__AddressVerifyReq(struct soap*, const char *URL, _ns1__AddressVerifyReq*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__AddressVerifyReq(struct soap*, const char *URL, _ns1__AddressVerifyReq*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__AddressVerifyReq(struct soap*, const char *URL, _ns1__AddressVerifyReq*);
    soap_POST_recv__ns1__AddressVerifyReq(struct soap*, _ns1__AddressVerifyReq*);
    @endcode

  - <ns1:EnterBoardingRequest> (use wsdl2h option -g to auto-generate type _ns1__EnterBoardingRequest)

  - <ns1:EnterBoardingResponse> (use wsdl2h option -g to auto-generate type _ns1__EnterBoardingResponse)

  - <ns1:EnterBoardingReq> @ref _ns1__EnterBoardingReq
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__EnterBoardingReq(struct soap*, _ns1__EnterBoardingReq*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__EnterBoardingReq(struct soap*, _ns1__EnterBoardingReq*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__EnterBoardingReq(struct soap*, const char *URL, _ns1__EnterBoardingReq*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__EnterBoardingReq(struct soap*, const char *URL, _ns1__EnterBoardingReq*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__EnterBoardingReq(struct soap*, const char *URL, _ns1__EnterBoardingReq*);
    soap_POST_recv__ns1__EnterBoardingReq(struct soap*, _ns1__EnterBoardingReq*);
    @endcode

  - <ns1:GetBoardingDetailsRequest> (use wsdl2h option -g to auto-generate type _ns1__GetBoardingDetailsRequest)

  - <ns1:GetBoardingDetailsResponse> (use wsdl2h option -g to auto-generate type _ns1__GetBoardingDetailsResponse)

  - <ns1:GetBoardingDetailsReq> @ref _ns1__GetBoardingDetailsReq
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__GetBoardingDetailsReq(struct soap*, _ns1__GetBoardingDetailsReq*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__GetBoardingDetailsReq(struct soap*, _ns1__GetBoardingDetailsReq*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__GetBoardingDetailsReq(struct soap*, const char *URL, _ns1__GetBoardingDetailsReq*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__GetBoardingDetailsReq(struct soap*, const char *URL, _ns1__GetBoardingDetailsReq*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__GetBoardingDetailsReq(struct soap*, const char *URL, _ns1__GetBoardingDetailsReq*);
    soap_POST_recv__ns1__GetBoardingDetailsReq(struct soap*, _ns1__GetBoardingDetailsReq*);
    @endcode

  - <ns1:SetAuthFlowParamRequest> (use wsdl2h option -g to auto-generate type _ns1__SetAuthFlowParamRequest)

  - <ns1:SetAuthFlowParamResponse> (use wsdl2h option -g to auto-generate type _ns1__SetAuthFlowParamResponse)

  - <ns1:SetAuthFlowParamReq> @ref _ns1__SetAuthFlowParamReq
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__SetAuthFlowParamReq(struct soap*, _ns1__SetAuthFlowParamReq*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__SetAuthFlowParamReq(struct soap*, _ns1__SetAuthFlowParamReq*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__SetAuthFlowParamReq(struct soap*, const char *URL, _ns1__SetAuthFlowParamReq*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__SetAuthFlowParamReq(struct soap*, const char *URL, _ns1__SetAuthFlowParamReq*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__SetAuthFlowParamReq(struct soap*, const char *URL, _ns1__SetAuthFlowParamReq*);
    soap_POST_recv__ns1__SetAuthFlowParamReq(struct soap*, _ns1__SetAuthFlowParamReq*);
    @endcode

  - <ns1:GetAuthDetailsRequest> (use wsdl2h option -g to auto-generate type _ns1__GetAuthDetailsRequest)

  - <ns1:GetAuthDetailsResponse> (use wsdl2h option -g to auto-generate type _ns1__GetAuthDetailsResponse)

  - <ns1:GetAuthDetailsReq> @ref _ns1__GetAuthDetailsReq
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__GetAuthDetailsReq(struct soap*, _ns1__GetAuthDetailsReq*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__GetAuthDetailsReq(struct soap*, _ns1__GetAuthDetailsReq*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__GetAuthDetailsReq(struct soap*, const char *URL, _ns1__GetAuthDetailsReq*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__GetAuthDetailsReq(struct soap*, const char *URL, _ns1__GetAuthDetailsReq*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__GetAuthDetailsReq(struct soap*, const char *URL, _ns1__GetAuthDetailsReq*);
    soap_POST_recv__ns1__GetAuthDetailsReq(struct soap*, _ns1__GetAuthDetailsReq*);
    @endcode

  - <ns1:SetAccessPermissionsRequest> (use wsdl2h option -g to auto-generate type _ns1__SetAccessPermissionsRequest)

  - <ns1:SetAccessPermissionsResponse> (use wsdl2h option -g to auto-generate type _ns1__SetAccessPermissionsResponse)

  - <ns1:SetAccessPermissionsReq> @ref _ns1__SetAccessPermissionsReq
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__SetAccessPermissionsReq(struct soap*, _ns1__SetAccessPermissionsReq*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__SetAccessPermissionsReq(struct soap*, _ns1__SetAccessPermissionsReq*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__SetAccessPermissionsReq(struct soap*, const char *URL, _ns1__SetAccessPermissionsReq*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__SetAccessPermissionsReq(struct soap*, const char *URL, _ns1__SetAccessPermissionsReq*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__SetAccessPermissionsReq(struct soap*, const char *URL, _ns1__SetAccessPermissionsReq*);
    soap_POST_recv__ns1__SetAccessPermissionsReq(struct soap*, _ns1__SetAccessPermissionsReq*);
    @endcode

  - <ns1:UpdateAccessPermissionsRequest> (use wsdl2h option -g to auto-generate type _ns1__UpdateAccessPermissionsRequest)

  - <ns1:UpdateAccessPermissionsResponse> (use wsdl2h option -g to auto-generate type _ns1__UpdateAccessPermissionsResponse)

  - <ns1:UpdateAccessPermissionsReq> @ref _ns1__UpdateAccessPermissionsReq
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__UpdateAccessPermissionsReq(struct soap*, _ns1__UpdateAccessPermissionsReq*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__UpdateAccessPermissionsReq(struct soap*, _ns1__UpdateAccessPermissionsReq*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__UpdateAccessPermissionsReq(struct soap*, const char *URL, _ns1__UpdateAccessPermissionsReq*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__UpdateAccessPermissionsReq(struct soap*, const char *URL, _ns1__UpdateAccessPermissionsReq*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__UpdateAccessPermissionsReq(struct soap*, const char *URL, _ns1__UpdateAccessPermissionsReq*);
    soap_POST_recv__ns1__UpdateAccessPermissionsReq(struct soap*, _ns1__UpdateAccessPermissionsReq*);
    @endcode

  - <ns1:GetAccessPermissionDetailsRequest> (use wsdl2h option -g to auto-generate type _ns1__GetAccessPermissionDetailsRequest)

  - <ns1:GetAccessPermissionDetailsResponse> (use wsdl2h option -g to auto-generate type _ns1__GetAccessPermissionDetailsResponse)

  - <ns1:GetAccessPermissionDetailsReq> @ref _ns1__GetAccessPermissionDetailsReq
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__GetAccessPermissionDetailsReq(struct soap*, _ns1__GetAccessPermissionDetailsReq*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__GetAccessPermissionDetailsReq(struct soap*, _ns1__GetAccessPermissionDetailsReq*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__GetAccessPermissionDetailsReq(struct soap*, const char *URL, _ns1__GetAccessPermissionDetailsReq*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__GetAccessPermissionDetailsReq(struct soap*, const char *URL, _ns1__GetAccessPermissionDetailsReq*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__GetAccessPermissionDetailsReq(struct soap*, const char *URL, _ns1__GetAccessPermissionDetailsReq*);
    soap_POST_recv__ns1__GetAccessPermissionDetailsReq(struct soap*, _ns1__GetAccessPermissionDetailsReq*);
    @endcode

  - <ns1:GetIncentiveEvaluationRequest> (use wsdl2h option -g to auto-generate type _ns1__GetIncentiveEvaluationRequest)

  - <ns1:GetIncentiveEvaluationResponse> (use wsdl2h option -g to auto-generate type _ns1__GetIncentiveEvaluationResponse)

  - <ns1:GetIncentiveEvaluationReq> @ref _ns1__GetIncentiveEvaluationReq
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__GetIncentiveEvaluationReq(struct soap*, _ns1__GetIncentiveEvaluationReq*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__GetIncentiveEvaluationReq(struct soap*, _ns1__GetIncentiveEvaluationReq*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__GetIncentiveEvaluationReq(struct soap*, const char *URL, _ns1__GetIncentiveEvaluationReq*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__GetIncentiveEvaluationReq(struct soap*, const char *URL, _ns1__GetIncentiveEvaluationReq*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__GetIncentiveEvaluationReq(struct soap*, const char *URL, _ns1__GetIncentiveEvaluationReq*);
    soap_POST_recv__ns1__GetIncentiveEvaluationReq(struct soap*, _ns1__GetIncentiveEvaluationReq*);
    @endcode

  - <ns1:SetExpressCheckoutRequest> (use wsdl2h option -g to auto-generate type _ns1__SetExpressCheckoutRequest)

  - <ns1:SetExpressCheckoutResponse> (use wsdl2h option -g to auto-generate type _ns1__SetExpressCheckoutResponse)

  - <ns1:SetExpressCheckoutReq> @ref _ns1__SetExpressCheckoutReq
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__SetExpressCheckoutReq(struct soap*, _ns1__SetExpressCheckoutReq*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__SetExpressCheckoutReq(struct soap*, _ns1__SetExpressCheckoutReq*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__SetExpressCheckoutReq(struct soap*, const char *URL, _ns1__SetExpressCheckoutReq*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__SetExpressCheckoutReq(struct soap*, const char *URL, _ns1__SetExpressCheckoutReq*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__SetExpressCheckoutReq(struct soap*, const char *URL, _ns1__SetExpressCheckoutReq*);
    soap_POST_recv__ns1__SetExpressCheckoutReq(struct soap*, _ns1__SetExpressCheckoutReq*);
    @endcode

  - <ns1:ExecuteCheckoutOperationsRequest> (use wsdl2h option -g to auto-generate type _ns1__ExecuteCheckoutOperationsRequest)

  - <ns1:ExecuteCheckoutOperationsResponse> (use wsdl2h option -g to auto-generate type _ns1__ExecuteCheckoutOperationsResponse)

  - <ns1:ExecuteCheckoutOperationsReq> @ref _ns1__ExecuteCheckoutOperationsReq
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__ExecuteCheckoutOperationsReq(struct soap*, _ns1__ExecuteCheckoutOperationsReq*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__ExecuteCheckoutOperationsReq(struct soap*, _ns1__ExecuteCheckoutOperationsReq*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__ExecuteCheckoutOperationsReq(struct soap*, const char *URL, _ns1__ExecuteCheckoutOperationsReq*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__ExecuteCheckoutOperationsReq(struct soap*, const char *URL, _ns1__ExecuteCheckoutOperationsReq*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__ExecuteCheckoutOperationsReq(struct soap*, const char *URL, _ns1__ExecuteCheckoutOperationsReq*);
    soap_POST_recv__ns1__ExecuteCheckoutOperationsReq(struct soap*, _ns1__ExecuteCheckoutOperationsReq*);
    @endcode

  - <ns1:GetExpressCheckoutDetailsRequest> (use wsdl2h option -g to auto-generate type _ns1__GetExpressCheckoutDetailsRequest)

  - <ns1:GetExpressCheckoutDetailsResponse> (use wsdl2h option -g to auto-generate type _ns1__GetExpressCheckoutDetailsResponse)

  - <ns1:GetExpressCheckoutDetailsReq> @ref _ns1__GetExpressCheckoutDetailsReq
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__GetExpressCheckoutDetailsReq(struct soap*, _ns1__GetExpressCheckoutDetailsReq*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__GetExpressCheckoutDetailsReq(struct soap*, _ns1__GetExpressCheckoutDetailsReq*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__GetExpressCheckoutDetailsReq(struct soap*, const char *URL, _ns1__GetExpressCheckoutDetailsReq*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__GetExpressCheckoutDetailsReq(struct soap*, const char *URL, _ns1__GetExpressCheckoutDetailsReq*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__GetExpressCheckoutDetailsReq(struct soap*, const char *URL, _ns1__GetExpressCheckoutDetailsReq*);
    soap_POST_recv__ns1__GetExpressCheckoutDetailsReq(struct soap*, _ns1__GetExpressCheckoutDetailsReq*);
    @endcode

  - <ns1:DoExpressCheckoutPaymentRequest> (use wsdl2h option -g to auto-generate type _ns1__DoExpressCheckoutPaymentRequest)

  - <ns1:DoExpressCheckoutPaymentResponse> (use wsdl2h option -g to auto-generate type _ns1__DoExpressCheckoutPaymentResponse)

  - <ns1:DoExpressCheckoutPaymentReq> @ref _ns1__DoExpressCheckoutPaymentReq
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__DoExpressCheckoutPaymentReq(struct soap*, _ns1__DoExpressCheckoutPaymentReq*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__DoExpressCheckoutPaymentReq(struct soap*, _ns1__DoExpressCheckoutPaymentReq*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__DoExpressCheckoutPaymentReq(struct soap*, const char *URL, _ns1__DoExpressCheckoutPaymentReq*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__DoExpressCheckoutPaymentReq(struct soap*, const char *URL, _ns1__DoExpressCheckoutPaymentReq*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__DoExpressCheckoutPaymentReq(struct soap*, const char *URL, _ns1__DoExpressCheckoutPaymentReq*);
    soap_POST_recv__ns1__DoExpressCheckoutPaymentReq(struct soap*, _ns1__DoExpressCheckoutPaymentReq*);
    @endcode

  - <ns1:DoUATPExpressCheckoutPaymentRequest> (use wsdl2h option -g to auto-generate type _ns1__DoUATPExpressCheckoutPaymentRequest)

  - <ns1:DoUATPExpressCheckoutPaymentResponse> (use wsdl2h option -g to auto-generate type _ns1__DoUATPExpressCheckoutPaymentResponse)

  - <ns1:DoUATPExpressCheckoutPaymentReq> @ref _ns1__DoUATPExpressCheckoutPaymentReq
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__DoUATPExpressCheckoutPaymentReq(struct soap*, _ns1__DoUATPExpressCheckoutPaymentReq*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__DoUATPExpressCheckoutPaymentReq(struct soap*, _ns1__DoUATPExpressCheckoutPaymentReq*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__DoUATPExpressCheckoutPaymentReq(struct soap*, const char *URL, _ns1__DoUATPExpressCheckoutPaymentReq*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__DoUATPExpressCheckoutPaymentReq(struct soap*, const char *URL, _ns1__DoUATPExpressCheckoutPaymentReq*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__DoUATPExpressCheckoutPaymentReq(struct soap*, const char *URL, _ns1__DoUATPExpressCheckoutPaymentReq*);
    soap_POST_recv__ns1__DoUATPExpressCheckoutPaymentReq(struct soap*, _ns1__DoUATPExpressCheckoutPaymentReq*);
    @endcode

  - <ns1:ManagePendingTransactionStatusRequest> (use wsdl2h option -g to auto-generate type _ns1__ManagePendingTransactionStatusRequest)

  - <ns1:ManagePendingTransactionStatusResponse> (use wsdl2h option -g to auto-generate type _ns1__ManagePendingTransactionStatusResponse)

  - <ns1:ManagePendingTransactionStatusReq> @ref _ns1__ManagePendingTransactionStatusReq
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__ManagePendingTransactionStatusReq(struct soap*, _ns1__ManagePendingTransactionStatusReq*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__ManagePendingTransactionStatusReq(struct soap*, _ns1__ManagePendingTransactionStatusReq*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__ManagePendingTransactionStatusReq(struct soap*, const char *URL, _ns1__ManagePendingTransactionStatusReq*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__ManagePendingTransactionStatusReq(struct soap*, const char *URL, _ns1__ManagePendingTransactionStatusReq*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__ManagePendingTransactionStatusReq(struct soap*, const char *URL, _ns1__ManagePendingTransactionStatusReq*);
    soap_POST_recv__ns1__ManagePendingTransactionStatusReq(struct soap*, _ns1__ManagePendingTransactionStatusReq*);
    @endcode

  - <ns1:DoDirectPaymentRequest> (use wsdl2h option -g to auto-generate type _ns1__DoDirectPaymentRequest)

  - <ns1:DoDirectPaymentResponse> (use wsdl2h option -g to auto-generate type _ns1__DoDirectPaymentResponse)

  - <ns1:DoDirectPaymentReq> @ref _ns1__DoDirectPaymentReq
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__DoDirectPaymentReq(struct soap*, _ns1__DoDirectPaymentReq*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__DoDirectPaymentReq(struct soap*, _ns1__DoDirectPaymentReq*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__DoDirectPaymentReq(struct soap*, const char *URL, _ns1__DoDirectPaymentReq*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__DoDirectPaymentReq(struct soap*, const char *URL, _ns1__DoDirectPaymentReq*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__DoDirectPaymentReq(struct soap*, const char *URL, _ns1__DoDirectPaymentReq*);
    soap_POST_recv__ns1__DoDirectPaymentReq(struct soap*, _ns1__DoDirectPaymentReq*);
    @endcode

  - <ns1:DoCancelRequest> (use wsdl2h option -g to auto-generate type _ns1__DoCancelRequest)

  - <ns1:DoCancelResponse> (use wsdl2h option -g to auto-generate type _ns1__DoCancelResponse)

  - <ns1:DoCancelReq> @ref _ns1__DoCancelReq
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__DoCancelReq(struct soap*, _ns1__DoCancelReq*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__DoCancelReq(struct soap*, _ns1__DoCancelReq*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__DoCancelReq(struct soap*, const char *URL, _ns1__DoCancelReq*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__DoCancelReq(struct soap*, const char *URL, _ns1__DoCancelReq*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__DoCancelReq(struct soap*, const char *URL, _ns1__DoCancelReq*);
    soap_POST_recv__ns1__DoCancelReq(struct soap*, _ns1__DoCancelReq*);
    @endcode

  - <ns1:DoCaptureRequest> (use wsdl2h option -g to auto-generate type _ns1__DoCaptureRequest)

  - <ns1:DoCaptureResponse> (use wsdl2h option -g to auto-generate type _ns1__DoCaptureResponse)

  - <ns1:DoCaptureReq> @ref _ns1__DoCaptureReq
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__DoCaptureReq(struct soap*, _ns1__DoCaptureReq*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__DoCaptureReq(struct soap*, _ns1__DoCaptureReq*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__DoCaptureReq(struct soap*, const char *URL, _ns1__DoCaptureReq*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__DoCaptureReq(struct soap*, const char *URL, _ns1__DoCaptureReq*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__DoCaptureReq(struct soap*, const char *URL, _ns1__DoCaptureReq*);
    soap_POST_recv__ns1__DoCaptureReq(struct soap*, _ns1__DoCaptureReq*);
    @endcode

  - <ns1:DoReauthorizationRequest> (use wsdl2h option -g to auto-generate type _ns1__DoReauthorizationRequest)

  - <ns1:DoReauthorizationResponse> (use wsdl2h option -g to auto-generate type _ns1__DoReauthorizationResponse)

  - <ns1:DoReauthorizationReq> @ref _ns1__DoReauthorizationReq
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__DoReauthorizationReq(struct soap*, _ns1__DoReauthorizationReq*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__DoReauthorizationReq(struct soap*, _ns1__DoReauthorizationReq*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__DoReauthorizationReq(struct soap*, const char *URL, _ns1__DoReauthorizationReq*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__DoReauthorizationReq(struct soap*, const char *URL, _ns1__DoReauthorizationReq*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__DoReauthorizationReq(struct soap*, const char *URL, _ns1__DoReauthorizationReq*);
    soap_POST_recv__ns1__DoReauthorizationReq(struct soap*, _ns1__DoReauthorizationReq*);
    @endcode

  - <ns1:DoVoidRequest> (use wsdl2h option -g to auto-generate type _ns1__DoVoidRequest)

  - <ns1:DoVoidResponse> (use wsdl2h option -g to auto-generate type _ns1__DoVoidResponse)

  - <ns1:DoVoidReq> @ref _ns1__DoVoidReq
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__DoVoidReq(struct soap*, _ns1__DoVoidReq*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__DoVoidReq(struct soap*, _ns1__DoVoidReq*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__DoVoidReq(struct soap*, const char *URL, _ns1__DoVoidReq*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__DoVoidReq(struct soap*, const char *URL, _ns1__DoVoidReq*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__DoVoidReq(struct soap*, const char *URL, _ns1__DoVoidReq*);
    soap_POST_recv__ns1__DoVoidReq(struct soap*, _ns1__DoVoidReq*);
    @endcode

  - <ns1:DoAuthorizationRequest> (use wsdl2h option -g to auto-generate type _ns1__DoAuthorizationRequest)

  - <ns1:DoAuthorizationResponse> (use wsdl2h option -g to auto-generate type _ns1__DoAuthorizationResponse)

  - <ns1:DoAuthorizationReq> @ref _ns1__DoAuthorizationReq
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__DoAuthorizationReq(struct soap*, _ns1__DoAuthorizationReq*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__DoAuthorizationReq(struct soap*, _ns1__DoAuthorizationReq*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__DoAuthorizationReq(struct soap*, const char *URL, _ns1__DoAuthorizationReq*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__DoAuthorizationReq(struct soap*, const char *URL, _ns1__DoAuthorizationReq*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__DoAuthorizationReq(struct soap*, const char *URL, _ns1__DoAuthorizationReq*);
    soap_POST_recv__ns1__DoAuthorizationReq(struct soap*, _ns1__DoAuthorizationReq*);
    @endcode

  - <ns1:UpdateAuthorizationRequest> (use wsdl2h option -g to auto-generate type _ns1__UpdateAuthorizationRequest)

  - <ns1:UpdateAuthorizationResponse> (use wsdl2h option -g to auto-generate type _ns1__UpdateAuthorizationResponse)

  - <ns1:UpdateAuthorizationReq> @ref _ns1__UpdateAuthorizationReq
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__UpdateAuthorizationReq(struct soap*, _ns1__UpdateAuthorizationReq*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__UpdateAuthorizationReq(struct soap*, _ns1__UpdateAuthorizationReq*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__UpdateAuthorizationReq(struct soap*, const char *URL, _ns1__UpdateAuthorizationReq*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__UpdateAuthorizationReq(struct soap*, const char *URL, _ns1__UpdateAuthorizationReq*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__UpdateAuthorizationReq(struct soap*, const char *URL, _ns1__UpdateAuthorizationReq*);
    soap_POST_recv__ns1__UpdateAuthorizationReq(struct soap*, _ns1__UpdateAuthorizationReq*);
    @endcode

  - <ns1:DoUATPAuthorizationRequest> (use wsdl2h option -g to auto-generate type _ns1__DoUATPAuthorizationRequest)

  - <ns1:DoUATPAuthorizationResponse> (use wsdl2h option -g to auto-generate type _ns1__DoUATPAuthorizationResponse)

  - <ns1:DoUATPAuthorizationReq> @ref _ns1__DoUATPAuthorizationReq
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__DoUATPAuthorizationReq(struct soap*, _ns1__DoUATPAuthorizationReq*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__DoUATPAuthorizationReq(struct soap*, _ns1__DoUATPAuthorizationReq*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__DoUATPAuthorizationReq(struct soap*, const char *URL, _ns1__DoUATPAuthorizationReq*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__DoUATPAuthorizationReq(struct soap*, const char *URL, _ns1__DoUATPAuthorizationReq*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__DoUATPAuthorizationReq(struct soap*, const char *URL, _ns1__DoUATPAuthorizationReq*);
    soap_POST_recv__ns1__DoUATPAuthorizationReq(struct soap*, _ns1__DoUATPAuthorizationReq*);
    @endcode

  - <ns1:CreateMobilePaymentRequest> (use wsdl2h option -g to auto-generate type _ns1__CreateMobilePaymentRequest)

  - <ns1:CreateMobilePaymentResponse> (use wsdl2h option -g to auto-generate type _ns1__CreateMobilePaymentResponse)

  - <ns1:CreateMobilePaymentReq> @ref _ns1__CreateMobilePaymentReq
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__CreateMobilePaymentReq(struct soap*, _ns1__CreateMobilePaymentReq*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__CreateMobilePaymentReq(struct soap*, _ns1__CreateMobilePaymentReq*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__CreateMobilePaymentReq(struct soap*, const char *URL, _ns1__CreateMobilePaymentReq*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__CreateMobilePaymentReq(struct soap*, const char *URL, _ns1__CreateMobilePaymentReq*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__CreateMobilePaymentReq(struct soap*, const char *URL, _ns1__CreateMobilePaymentReq*);
    soap_POST_recv__ns1__CreateMobilePaymentReq(struct soap*, _ns1__CreateMobilePaymentReq*);
    @endcode

  - <ns1:GetMobileStatusRequest> (use wsdl2h option -g to auto-generate type _ns1__GetMobileStatusRequest)

  - <ns1:GetMobileStatusResponse> (use wsdl2h option -g to auto-generate type _ns1__GetMobileStatusResponse)

  - <ns1:GetMobileStatusReq> @ref _ns1__GetMobileStatusReq
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__GetMobileStatusReq(struct soap*, _ns1__GetMobileStatusReq*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__GetMobileStatusReq(struct soap*, _ns1__GetMobileStatusReq*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__GetMobileStatusReq(struct soap*, const char *URL, _ns1__GetMobileStatusReq*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__GetMobileStatusReq(struct soap*, const char *URL, _ns1__GetMobileStatusReq*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__GetMobileStatusReq(struct soap*, const char *URL, _ns1__GetMobileStatusReq*);
    soap_POST_recv__ns1__GetMobileStatusReq(struct soap*, _ns1__GetMobileStatusReq*);
    @endcode

  - <ns1:SetMobileCheckoutRequest> (use wsdl2h option -g to auto-generate type _ns1__SetMobileCheckoutRequest)

  - <ns1:SetMobileCheckoutResponse> (use wsdl2h option -g to auto-generate type _ns1__SetMobileCheckoutResponse)

  - <ns1:SetMobileCheckoutReq> @ref _ns1__SetMobileCheckoutReq
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__SetMobileCheckoutReq(struct soap*, _ns1__SetMobileCheckoutReq*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__SetMobileCheckoutReq(struct soap*, _ns1__SetMobileCheckoutReq*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__SetMobileCheckoutReq(struct soap*, const char *URL, _ns1__SetMobileCheckoutReq*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__SetMobileCheckoutReq(struct soap*, const char *URL, _ns1__SetMobileCheckoutReq*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__SetMobileCheckoutReq(struct soap*, const char *URL, _ns1__SetMobileCheckoutReq*);
    soap_POST_recv__ns1__SetMobileCheckoutReq(struct soap*, _ns1__SetMobileCheckoutReq*);
    @endcode

  - <ns1:DoMobileCheckoutPaymentRequest> (use wsdl2h option -g to auto-generate type _ns1__DoMobileCheckoutPaymentRequest)

  - <ns1:DoMobileCheckoutPaymentResponse> (use wsdl2h option -g to auto-generate type _ns1__DoMobileCheckoutPaymentResponse)

  - <ns1:DoMobileCheckoutPaymentReq> @ref _ns1__DoMobileCheckoutPaymentReq
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__DoMobileCheckoutPaymentReq(struct soap*, _ns1__DoMobileCheckoutPaymentReq*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__DoMobileCheckoutPaymentReq(struct soap*, _ns1__DoMobileCheckoutPaymentReq*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__DoMobileCheckoutPaymentReq(struct soap*, const char *URL, _ns1__DoMobileCheckoutPaymentReq*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__DoMobileCheckoutPaymentReq(struct soap*, const char *URL, _ns1__DoMobileCheckoutPaymentReq*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__DoMobileCheckoutPaymentReq(struct soap*, const char *URL, _ns1__DoMobileCheckoutPaymentReq*);
    soap_POST_recv__ns1__DoMobileCheckoutPaymentReq(struct soap*, _ns1__DoMobileCheckoutPaymentReq*);
    @endcode

  - <ns1:GetBalanceRequest> (use wsdl2h option -g to auto-generate type _ns1__GetBalanceRequest)

  - <ns1:GetBalanceResponse> (use wsdl2h option -g to auto-generate type _ns1__GetBalanceResponse)

  - <ns1:GetBalanceReq> @ref _ns1__GetBalanceReq
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__GetBalanceReq(struct soap*, _ns1__GetBalanceReq*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__GetBalanceReq(struct soap*, _ns1__GetBalanceReq*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__GetBalanceReq(struct soap*, const char *URL, _ns1__GetBalanceReq*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__GetBalanceReq(struct soap*, const char *URL, _ns1__GetBalanceReq*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__GetBalanceReq(struct soap*, const char *URL, _ns1__GetBalanceReq*);
    soap_POST_recv__ns1__GetBalanceReq(struct soap*, _ns1__GetBalanceReq*);
    @endcode

  - <ns1:SetCustomerBillingAgreementRequest> (use wsdl2h option -g to auto-generate type _ns1__SetCustomerBillingAgreementRequest)

  - <ns1:SetCustomerBillingAgreementResponse> (use wsdl2h option -g to auto-generate type _ns1__SetCustomerBillingAgreementResponse)

  - <ns1:SetCustomerBillingAgreementReq> @ref _ns1__SetCustomerBillingAgreementReq
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__SetCustomerBillingAgreementReq(struct soap*, _ns1__SetCustomerBillingAgreementReq*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__SetCustomerBillingAgreementReq(struct soap*, _ns1__SetCustomerBillingAgreementReq*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__SetCustomerBillingAgreementReq(struct soap*, const char *URL, _ns1__SetCustomerBillingAgreementReq*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__SetCustomerBillingAgreementReq(struct soap*, const char *URL, _ns1__SetCustomerBillingAgreementReq*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__SetCustomerBillingAgreementReq(struct soap*, const char *URL, _ns1__SetCustomerBillingAgreementReq*);
    soap_POST_recv__ns1__SetCustomerBillingAgreementReq(struct soap*, _ns1__SetCustomerBillingAgreementReq*);
    @endcode

  - <ns1:GetBillingAgreementCustomerDetailsRequest> (use wsdl2h option -g to auto-generate type _ns1__GetBillingAgreementCustomerDetailsRequest)

  - <ns1:GetBillingAgreementCustomerDetailsResponse> (use wsdl2h option -g to auto-generate type _ns1__GetBillingAgreementCustomerDetailsResponse)

  - <ns1:GetBillingAgreementCustomerDetailsReq> @ref _ns1__GetBillingAgreementCustomerDetailsReq
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__GetBillingAgreementCustomerDetailsReq(struct soap*, _ns1__GetBillingAgreementCustomerDetailsReq*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__GetBillingAgreementCustomerDetailsReq(struct soap*, _ns1__GetBillingAgreementCustomerDetailsReq*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__GetBillingAgreementCustomerDetailsReq(struct soap*, const char *URL, _ns1__GetBillingAgreementCustomerDetailsReq*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__GetBillingAgreementCustomerDetailsReq(struct soap*, const char *URL, _ns1__GetBillingAgreementCustomerDetailsReq*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__GetBillingAgreementCustomerDetailsReq(struct soap*, const char *URL, _ns1__GetBillingAgreementCustomerDetailsReq*);
    soap_POST_recv__ns1__GetBillingAgreementCustomerDetailsReq(struct soap*, _ns1__GetBillingAgreementCustomerDetailsReq*);
    @endcode

  - <ns1:CreateBillingAgreementRequest> (use wsdl2h option -g to auto-generate type _ns1__CreateBillingAgreementRequest)

  - <ns1:CreateBillingAgreementResponse> (use wsdl2h option -g to auto-generate type _ns1__CreateBillingAgreementResponse)

  - <ns1:CreateBillingAgreementReq> @ref _ns1__CreateBillingAgreementReq
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__CreateBillingAgreementReq(struct soap*, _ns1__CreateBillingAgreementReq*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__CreateBillingAgreementReq(struct soap*, _ns1__CreateBillingAgreementReq*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__CreateBillingAgreementReq(struct soap*, const char *URL, _ns1__CreateBillingAgreementReq*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__CreateBillingAgreementReq(struct soap*, const char *URL, _ns1__CreateBillingAgreementReq*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__CreateBillingAgreementReq(struct soap*, const char *URL, _ns1__CreateBillingAgreementReq*);
    soap_POST_recv__ns1__CreateBillingAgreementReq(struct soap*, _ns1__CreateBillingAgreementReq*);
    @endcode

  - <ns1:DoReferenceTransactionRequest> (use wsdl2h option -g to auto-generate type _ns1__DoReferenceTransactionRequest)

  - <ns1:DoReferenceTransactionResponse> (use wsdl2h option -g to auto-generate type _ns1__DoReferenceTransactionResponse)

  - <ns1:DoReferenceTransactionReq> @ref _ns1__DoReferenceTransactionReq
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__DoReferenceTransactionReq(struct soap*, _ns1__DoReferenceTransactionReq*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__DoReferenceTransactionReq(struct soap*, _ns1__DoReferenceTransactionReq*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__DoReferenceTransactionReq(struct soap*, const char *URL, _ns1__DoReferenceTransactionReq*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__DoReferenceTransactionReq(struct soap*, const char *URL, _ns1__DoReferenceTransactionReq*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__DoReferenceTransactionReq(struct soap*, const char *URL, _ns1__DoReferenceTransactionReq*);
    soap_POST_recv__ns1__DoReferenceTransactionReq(struct soap*, _ns1__DoReferenceTransactionReq*);
    @endcode

  - <ns1:DoNonReferencedCreditRequest> (use wsdl2h option -g to auto-generate type _ns1__DoNonReferencedCreditRequest)

  - <ns1:DoNonReferencedCreditResponse> (use wsdl2h option -g to auto-generate type _ns1__DoNonReferencedCreditResponse)

  - <ns1:DoNonReferencedCreditReq> @ref _ns1__DoNonReferencedCreditReq
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__DoNonReferencedCreditReq(struct soap*, _ns1__DoNonReferencedCreditReq*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__DoNonReferencedCreditReq(struct soap*, _ns1__DoNonReferencedCreditReq*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__DoNonReferencedCreditReq(struct soap*, const char *URL, _ns1__DoNonReferencedCreditReq*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__DoNonReferencedCreditReq(struct soap*, const char *URL, _ns1__DoNonReferencedCreditReq*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__DoNonReferencedCreditReq(struct soap*, const char *URL, _ns1__DoNonReferencedCreditReq*);
    soap_POST_recv__ns1__DoNonReferencedCreditReq(struct soap*, _ns1__DoNonReferencedCreditReq*);
    @endcode

  - <ns1:CreateRecurringPaymentsProfileRequest> (use wsdl2h option -g to auto-generate type _ns1__CreateRecurringPaymentsProfileRequest)

  - <ns1:CreateRecurringPaymentsProfileResponse> (use wsdl2h option -g to auto-generate type _ns1__CreateRecurringPaymentsProfileResponse)

  - <ns1:CreateRecurringPaymentsProfileReq> @ref _ns1__CreateRecurringPaymentsProfileReq
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__CreateRecurringPaymentsProfileReq(struct soap*, _ns1__CreateRecurringPaymentsProfileReq*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__CreateRecurringPaymentsProfileReq(struct soap*, _ns1__CreateRecurringPaymentsProfileReq*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__CreateRecurringPaymentsProfileReq(struct soap*, const char *URL, _ns1__CreateRecurringPaymentsProfileReq*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__CreateRecurringPaymentsProfileReq(struct soap*, const char *URL, _ns1__CreateRecurringPaymentsProfileReq*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__CreateRecurringPaymentsProfileReq(struct soap*, const char *URL, _ns1__CreateRecurringPaymentsProfileReq*);
    soap_POST_recv__ns1__CreateRecurringPaymentsProfileReq(struct soap*, _ns1__CreateRecurringPaymentsProfileReq*);
    @endcode

  - <ns1:GetRecurringPaymentsProfileDetailsRequest> (use wsdl2h option -g to auto-generate type _ns1__GetRecurringPaymentsProfileDetailsRequest)

  - <ns1:GetRecurringPaymentsProfileDetailsResponse> (use wsdl2h option -g to auto-generate type _ns1__GetRecurringPaymentsProfileDetailsResponse)

  - <ns1:GetRecurringPaymentsProfileDetailsReq> @ref _ns1__GetRecurringPaymentsProfileDetailsReq
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__GetRecurringPaymentsProfileDetailsReq(struct soap*, _ns1__GetRecurringPaymentsProfileDetailsReq*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__GetRecurringPaymentsProfileDetailsReq(struct soap*, _ns1__GetRecurringPaymentsProfileDetailsReq*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__GetRecurringPaymentsProfileDetailsReq(struct soap*, const char *URL, _ns1__GetRecurringPaymentsProfileDetailsReq*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__GetRecurringPaymentsProfileDetailsReq(struct soap*, const char *URL, _ns1__GetRecurringPaymentsProfileDetailsReq*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__GetRecurringPaymentsProfileDetailsReq(struct soap*, const char *URL, _ns1__GetRecurringPaymentsProfileDetailsReq*);
    soap_POST_recv__ns1__GetRecurringPaymentsProfileDetailsReq(struct soap*, _ns1__GetRecurringPaymentsProfileDetailsReq*);
    @endcode

  - <ns1:ManageRecurringPaymentsProfileStatusRequest> (use wsdl2h option -g to auto-generate type _ns1__ManageRecurringPaymentsProfileStatusRequest)

  - <ns1:ManageRecurringPaymentsProfileStatusResponse> (use wsdl2h option -g to auto-generate type _ns1__ManageRecurringPaymentsProfileStatusResponse)

  - <ns1:ManageRecurringPaymentsProfileStatusReq> @ref _ns1__ManageRecurringPaymentsProfileStatusReq
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__ManageRecurringPaymentsProfileStatusReq(struct soap*, _ns1__ManageRecurringPaymentsProfileStatusReq*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__ManageRecurringPaymentsProfileStatusReq(struct soap*, _ns1__ManageRecurringPaymentsProfileStatusReq*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__ManageRecurringPaymentsProfileStatusReq(struct soap*, const char *URL, _ns1__ManageRecurringPaymentsProfileStatusReq*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__ManageRecurringPaymentsProfileStatusReq(struct soap*, const char *URL, _ns1__ManageRecurringPaymentsProfileStatusReq*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__ManageRecurringPaymentsProfileStatusReq(struct soap*, const char *URL, _ns1__ManageRecurringPaymentsProfileStatusReq*);
    soap_POST_recv__ns1__ManageRecurringPaymentsProfileStatusReq(struct soap*, _ns1__ManageRecurringPaymentsProfileStatusReq*);
    @endcode

  - <ns1:BillOutstandingAmountRequest> (use wsdl2h option -g to auto-generate type _ns1__BillOutstandingAmountRequest)

  - <ns1:BillOutstandingAmountResponse> (use wsdl2h option -g to auto-generate type _ns1__BillOutstandingAmountResponse)

  - <ns1:BillOutstandingAmountReq> @ref _ns1__BillOutstandingAmountReq
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__BillOutstandingAmountReq(struct soap*, _ns1__BillOutstandingAmountReq*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__BillOutstandingAmountReq(struct soap*, _ns1__BillOutstandingAmountReq*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__BillOutstandingAmountReq(struct soap*, const char *URL, _ns1__BillOutstandingAmountReq*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__BillOutstandingAmountReq(struct soap*, const char *URL, _ns1__BillOutstandingAmountReq*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__BillOutstandingAmountReq(struct soap*, const char *URL, _ns1__BillOutstandingAmountReq*);
    soap_POST_recv__ns1__BillOutstandingAmountReq(struct soap*, _ns1__BillOutstandingAmountReq*);
    @endcode

  - <ns1:UpdateRecurringPaymentsProfileRequest> (use wsdl2h option -g to auto-generate type _ns1__UpdateRecurringPaymentsProfileRequest)

  - <ns1:UpdateRecurringPaymentsProfileResponse> (use wsdl2h option -g to auto-generate type _ns1__UpdateRecurringPaymentsProfileResponse)

  - <ns1:UpdateRecurringPaymentsProfileReq> @ref _ns1__UpdateRecurringPaymentsProfileReq
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__UpdateRecurringPaymentsProfileReq(struct soap*, _ns1__UpdateRecurringPaymentsProfileReq*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__UpdateRecurringPaymentsProfileReq(struct soap*, _ns1__UpdateRecurringPaymentsProfileReq*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__UpdateRecurringPaymentsProfileReq(struct soap*, const char *URL, _ns1__UpdateRecurringPaymentsProfileReq*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__UpdateRecurringPaymentsProfileReq(struct soap*, const char *URL, _ns1__UpdateRecurringPaymentsProfileReq*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__UpdateRecurringPaymentsProfileReq(struct soap*, const char *URL, _ns1__UpdateRecurringPaymentsProfileReq*);
    soap_POST_recv__ns1__UpdateRecurringPaymentsProfileReq(struct soap*, _ns1__UpdateRecurringPaymentsProfileReq*);
    @endcode

  - <ns1:GetPalDetailsRequest> (use wsdl2h option -g to auto-generate type _ns1__GetPalDetailsRequest)

  - <ns1:GetPalDetailsResponse> (use wsdl2h option -g to auto-generate type _ns1__GetPalDetailsResponse)

  - <ns1:GetPalDetailsReq> @ref _ns1__GetPalDetailsReq
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__GetPalDetailsReq(struct soap*, _ns1__GetPalDetailsReq*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__GetPalDetailsReq(struct soap*, _ns1__GetPalDetailsReq*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__GetPalDetailsReq(struct soap*, const char *URL, _ns1__GetPalDetailsReq*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__GetPalDetailsReq(struct soap*, const char *URL, _ns1__GetPalDetailsReq*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__GetPalDetailsReq(struct soap*, const char *URL, _ns1__GetPalDetailsReq*);
    soap_POST_recv__ns1__GetPalDetailsReq(struct soap*, _ns1__GetPalDetailsReq*);
    @endcode

  - <ns1:ReverseTransactionRequest> (use wsdl2h option -g to auto-generate type _ns1__ReverseTransactionRequest)

  - <ns1:ReverseTransactionResponse> (use wsdl2h option -g to auto-generate type _ns1__ReverseTransactionResponse)

  - <ns1:ReverseTransactionReq> @ref _ns1__ReverseTransactionReq
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__ReverseTransactionReq(struct soap*, _ns1__ReverseTransactionReq*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__ReverseTransactionReq(struct soap*, _ns1__ReverseTransactionReq*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__ReverseTransactionReq(struct soap*, const char *URL, _ns1__ReverseTransactionReq*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__ReverseTransactionReq(struct soap*, const char *URL, _ns1__ReverseTransactionReq*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__ReverseTransactionReq(struct soap*, const char *URL, _ns1__ReverseTransactionReq*);
    soap_POST_recv__ns1__ReverseTransactionReq(struct soap*, _ns1__ReverseTransactionReq*);
    @endcode

  - <ns1:ExternalRememberMeOptOutRequest> (use wsdl2h option -g to auto-generate type _ns1__ExternalRememberMeOptOutRequest)

  - <ns1:ExternalRememberMeOptOutResponse> (use wsdl2h option -g to auto-generate type _ns1__ExternalRememberMeOptOutResponse)

  - <ns1:ExternalRememberMeOptOutReq> @ref _ns1__ExternalRememberMeOptOutReq
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__ExternalRememberMeOptOutReq(struct soap*, _ns1__ExternalRememberMeOptOutReq*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__ExternalRememberMeOptOutReq(struct soap*, _ns1__ExternalRememberMeOptOutReq*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__ExternalRememberMeOptOutReq(struct soap*, const char *URL, _ns1__ExternalRememberMeOptOutReq*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__ExternalRememberMeOptOutReq(struct soap*, const char *URL, _ns1__ExternalRememberMeOptOutReq*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__ExternalRememberMeOptOutReq(struct soap*, const char *URL, _ns1__ExternalRememberMeOptOutReq*);
    soap_POST_recv__ns1__ExternalRememberMeOptOutReq(struct soap*, _ns1__ExternalRememberMeOptOutReq*);
    @endcode

@section ns2 Top-level root elements of schema "urn:ebay:apis:CoreComponentTypes"

@section ns3 Top-level root elements of schema "urn:ebay:apis:eBLBaseComponents"

  - <ns3:AccountCode> (use wsdl2h option -g to auto-generate type _ns3__AccountCode)

  - <ns3:AccountSummary> (use wsdl2h option -g to auto-generate type _ns3__AccountSummary)

  - <ns3:AmountPaid> (use wsdl2h option -g to auto-generate type _ns3__AmountPaid)

  - <ns3:AmountPastDue> (use wsdl2h option -g to auto-generate type _ns3__AmountPastDue)

  - <ns3:Balance> (use wsdl2h option -g to auto-generate type _ns3__Balance)

  - <ns3:Buyer> (use wsdl2h option -g to auto-generate type _ns3__Buyer)

  - <ns3:Category> (use wsdl2h option -g to auto-generate type _ns3__Category)

  - <ns3:CheckoutEnabled> (use wsdl2h option -g to auto-generate type _ns3__CheckoutEnabled)

  - <ns3:CurrentBalance> (use wsdl2h option -g to auto-generate type _ns3__CurrentBalance)

  - <ns3:FeedbackScore> (use wsdl2h option -g to auto-generate type _ns3__FeedbackScore)

  - <ns3:Fees> (use wsdl2h option -g to auto-generate type _ns3__Fees)

  - <ns3:HighBidder> (use wsdl2h option -g to auto-generate type _ns3__HighBidder)

  - <ns3:InsuranceFee> (use wsdl2h option -g to auto-generate type _ns3__InsuranceFee)

  - <ns3:InsuranceOption> (use wsdl2h option -g to auto-generate type _ns3__InsuranceOption)

  - <ns3:Item> (use wsdl2h option -g to auto-generate type _ns3__Item)

  - <ns3:ItemID> (use wsdl2h option -g to auto-generate type _ns3__ItemID)

  - <ns3:ListingDuration> (use wsdl2h option -g to auto-generate type _ns3__ListingDuration)

  - <ns3:PaymentMeans> (use wsdl2h option -g to auto-generate type _ns3__PaymentMeans)

  - <ns3:PaymentMethods> (use wsdl2h option -g to auto-generate type _ns3__PaymentMethods)

  - <ns3:PaymentType> (use wsdl2h option -g to auto-generate type _ns3__PaymentType)

  - <ns3:Region> (use wsdl2h option -g to auto-generate type _ns3__Region)

  - <ns3:RegionID> (use wsdl2h option -g to auto-generate type _ns3__RegionID)

  - <ns3:RegistrationAddress> (use wsdl2h option -g to auto-generate type _ns3__RegistrationAddress)

  - <ns3:ReviseStatus> (use wsdl2h option -g to auto-generate type _ns3__ReviseStatus)

  - <ns3:Seller> (use wsdl2h option -g to auto-generate type _ns3__Seller)

  - <ns3:SellerLevel> (use wsdl2h option -g to auto-generate type _ns3__SellerLevel)

  - <ns3:SellingStatus> (use wsdl2h option -g to auto-generate type _ns3__SellingStatus)

  - <ns3:ShippingService> (use wsdl2h option -g to auto-generate type _ns3__ShippingService)

  - <ns3:Site> (use wsdl2h option -g to auto-generate type _ns3__Site)

  - <ns3:StoreCategoryID> (use wsdl2h option -g to auto-generate type _ns3__StoreCategoryID)

  - <ns3:StoreOwner> (use wsdl2h option -g to auto-generate type _ns3__StoreOwner)

  - <ns3:StoreURL> (use wsdl2h option -g to auto-generate type _ns3__StoreURL)

  - <ns3:ItemArray> (use wsdl2h option -g to auto-generate type _ns3__ItemArray)

  - <ns3:CategoryArray> (use wsdl2h option -g to auto-generate type _ns3__CategoryArray)

  - <ns3:Pagination> (use wsdl2h option -g to auto-generate type _ns3__Pagination)

  - <ns3:PaginationResult> (use wsdl2h option -g to auto-generate type _ns3__PaginationResult)

  - <ns3:ShippingAddress> (use wsdl2h option -g to auto-generate type _ns3__ShippingAddress)

  - <ns3:ShippingInfo> (use wsdl2h option -g to auto-generate type _ns3__ShippingInfo)

  - <ns3:TaxInfo> (use wsdl2h option -g to auto-generate type _ns3__TaxInfo)

  - <ns3:Error> (use wsdl2h option -g to auto-generate type _ns3__Error)

  - <ns3:ThreeDSecureRequest> (use wsdl2h option -g to auto-generate type _ns3__ThreeDSecureRequest)

  - <ns3:CreditCardInfo> (use wsdl2h option -g to auto-generate type _ns3__CreditCardInfo)

  - <ns3:SellerPaymentAddress> (use wsdl2h option -g to auto-generate type _ns3__SellerPaymentAddress)

  - <ns3:ShippingRegions> (use wsdl2h option -g to auto-generate type _ns3__ShippingRegions)

  - <ns3:ShippingDetails> (use wsdl2h option -g to auto-generate type _ns3__ShippingDetails)

  - <ns3:ShippingTerm> (use wsdl2h option -g to auto-generate type _ns3__ShippingTerm)

  - <ns3:Transaction> (use wsdl2h option -g to auto-generate type _ns3__Transaction)

  - <ns3:Transactions> (use wsdl2h option -g to auto-generate type _ns3__Transactions)

  - <ns3:TransactionID> (use wsdl2h option -g to auto-generate type _ns3__TransactionID)

  - <ns3:EbayTransactionID> (use wsdl2h option -g to auto-generate type _ns3__EbayTransactionID)

  - <ns3:AuthorizationID> (use wsdl2h option -g to auto-generate type _ns3__AuthorizationID)

  - <ns3:UserID> (use wsdl2h option -g to auto-generate type _ns3__UserID)

  - <ns3:User> (use wsdl2h option -g to auto-generate type _ns3__User)

  - <ns3:Country> (use wsdl2h option -g to auto-generate type _ns3__Country)

  - <ns3:CountryName> (use wsdl2h option -g to auto-generate type _ns3__CountryName)

  - <ns3:Currency> (use wsdl2h option -g to auto-generate type _ns3__Currency)

  - <ns3:Email> (use wsdl2h option -g to auto-generate type _ns3__Email)

  - <ns3:StateOrProvince> (use wsdl2h option -g to auto-generate type _ns3__StateOrProvince)

  - <ns3:UUID> (use wsdl2h option -g to auto-generate type _ns3__UUID)

  - <ns3:APIType> (use wsdl2h option -g to auto-generate type _ns3__APIType)

  - <ns3:RefundType> (use wsdl2h option -g to auto-generate type _ns3__RefundType)

  - <ns3:ReceiptID> (use wsdl2h option -g to auto-generate type _ns3__ReceiptID)

  - <ns3:SubscriptionID> (use wsdl2h option -g to auto-generate type _ns3__SubscriptionID)

  - <ns3:OptionTrackingDetails> (use wsdl2h option -g to auto-generate type _ns3__OptionTrackingDetails)

  - <ns3:ItemTrackingDetails> (use wsdl2h option -g to auto-generate type _ns3__ItemTrackingDetails)

  - <ns3:ButtonSearchResult> (use wsdl2h option -g to auto-generate type _ns3__ButtonSearchResult)

  - <ns3:PaymentTransactions> (use wsdl2h option -g to auto-generate type _ns3__PaymentTransactions)

  - <ns3:PaymentTransactionDetails> (use wsdl2h option -g to auto-generate type _ns3__PaymentTransactionDetails)

  - <ns3:ThreeDSecureDetails> (use wsdl2h option -g to auto-generate type _ns3__ThreeDSecureDetails)

  - <ns3:MerchantPullPaymentDetails> (use wsdl2h option -g to auto-generate type _ns3__MerchantPullPaymentDetails)

  - <ns3:BillUserResponseDetails> (use wsdl2h option -g to auto-generate type _ns3__BillUserResponseDetails)

  - <ns3:BAUpdateResponseDetails> (use wsdl2h option -g to auto-generate type _ns3__BAUpdateResponseDetails)

  - <ns3:SetAuthFlowParamRequestDetails> (use wsdl2h option -g to auto-generate type _ns3__SetAuthFlowParamRequestDetails)

  - <ns3:GetAuthDetailsResponseDetails> (use wsdl2h option -g to auto-generate type _ns3__GetAuthDetailsResponseDetails)

  - <ns3:SetAccessPermissionsRequestDetails> (use wsdl2h option -g to auto-generate type _ns3__SetAccessPermissionsRequestDetails)

  - <ns3:GetAccessPermissionDetailsResponseDetails> (use wsdl2h option -g to auto-generate type _ns3__GetAccessPermissionDetailsResponseDetails)

  - <ns3:SetExpressCheckoutRequestDetails> (use wsdl2h option -g to auto-generate type _ns3__SetExpressCheckoutRequestDetails)

  - <ns3:ExecuteCheckoutOperationsRequestDetails> (use wsdl2h option -g to auto-generate type _ns3__ExecuteCheckoutOperationsRequestDetails)

  - <ns3:ExecuteCheckoutOperationsResponseDetails> (use wsdl2h option -g to auto-generate type _ns3__ExecuteCheckoutOperationsResponseDetails)

  - <ns3:GetExpressCheckoutDetailsResponseDetails> (use wsdl2h option -g to auto-generate type _ns3__GetExpressCheckoutDetailsResponseDetails)

  - <ns3:DoExpressCheckoutPaymentResponseDetails> (use wsdl2h option -g to auto-generate type _ns3__DoExpressCheckoutPaymentResponseDetails)

  - <ns3:DoExpressCheckoutPaymentRequestDetails> (use wsdl2h option -g to auto-generate type _ns3__DoExpressCheckoutPaymentRequestDetails)

  - <ns3:DoCaptureResponseDetails> (use wsdl2h option -g to auto-generate type _ns3__DoCaptureResponseDetails)

  - <ns3:DoDirectPaymentRequestDetails> (use wsdl2h option -g to auto-generate type _ns3__DoDirectPaymentRequestDetails)

  - <ns3:CreateMobilePaymentRequestDetails> (use wsdl2h option -g to auto-generate type _ns3__CreateMobilePaymentRequestDetails)

  - <ns3:GetMobileStatusRequestDetails> (use wsdl2h option -g to auto-generate type _ns3__GetMobileStatusRequestDetails)

  - <ns3:SetCustomerBillingAgreementRequestDetails> (use wsdl2h option -g to auto-generate type _ns3__SetCustomerBillingAgreementRequestDetails)

  - <ns3:GetBillingAgreementCustomerDetailsResponseDetails> (use wsdl2h option -g to auto-generate type _ns3__GetBillingAgreementCustomerDetailsResponseDetails)

  - <ns3:DoReferenceTransactionRequestDetails> (use wsdl2h option -g to auto-generate type _ns3__DoReferenceTransactionRequestDetails)

  - <ns3:DoReferenceTransactionResponseDetails> (use wsdl2h option -g to auto-generate type _ns3__DoReferenceTransactionResponseDetails)

  - <ns3:DoNonReferencedCreditRequestDetails> (use wsdl2h option -g to auto-generate type _ns3__DoNonReferencedCreditRequestDetails)

  - <ns3:DoNonReferencedCreditResponseDetails> (use wsdl2h option -g to auto-generate type _ns3__DoNonReferencedCreditResponseDetails)

  - <ns3:UATPDetails> (use wsdl2h option -g to auto-generate type _ns3__UATPDetails)

  - <ns3:CreateRecurringPaymentsProfileResponseDetails> (use wsdl2h option -g to auto-generate type _ns3__CreateRecurringPaymentsProfileResponseDetails)

  - <ns3:CreateRecurringPaymentsProfileRequestDetails> (use wsdl2h option -g to auto-generate type _ns3__CreateRecurringPaymentsProfileRequestDetails)

  - <ns3:EnhancedData> (use wsdl2h option -g to auto-generate type _ns3__EnhancedData)

  - <ns3:AirlineItinerary> (use wsdl2h option -g to auto-generate type _ns3__AirlineItinerary)

  - <ns3:InstrumentDetails> (use wsdl2h option -g to auto-generate type _ns3__InstrumentDetails)

  - <ns3:OfferDetails> (use wsdl2h option -g to auto-generate type _ns3__OfferDetails)

  - <ns3:GetRecurringPaymentsProfileDetailsResponseDetails> (use wsdl2h option -g to auto-generate type _ns3__GetRecurringPaymentsProfileDetailsResponseDetails)

  - <ns3:ManageRecurringPaymentsProfileStatusRequestDetails> (use wsdl2h option -g to auto-generate type _ns3__ManageRecurringPaymentsProfileStatusRequestDetails)

  - <ns3:ManageRecurringPaymentsProfileStatusResponseDetails> (use wsdl2h option -g to auto-generate type _ns3__ManageRecurringPaymentsProfileStatusResponseDetails)

  - <ns3:BillOutstandingAmountRequestDetails> (use wsdl2h option -g to auto-generate type _ns3__BillOutstandingAmountRequestDetails)

  - <ns3:BillOutstandingAmountResponseDetails> (use wsdl2h option -g to auto-generate type _ns3__BillOutstandingAmountResponseDetails)

  - <ns3:UpdateRecurringPaymentsProfileRequestDetails> (use wsdl2h option -g to auto-generate type _ns3__UpdateRecurringPaymentsProfileRequestDetails)

  - <ns3:UpdateRecurringPaymentsProfileResponseDetails> (use wsdl2h option -g to auto-generate type _ns3__UpdateRecurringPaymentsProfileResponseDetails)

  - <ns3:AuthorizationInfo> (use wsdl2h option -g to auto-generate type _ns3__AuthorizationInfo)

  - <ns3:GetIncentiveEvaluationRequestDetails> (use wsdl2h option -g to auto-generate type _ns3__GetIncentiveEvaluationRequestDetails)

  - <ns3:GetIncentiveEvaluationResponseDetails> (use wsdl2h option -g to auto-generate type _ns3__GetIncentiveEvaluationResponseDetails)

  - <ns3:MerchantStoreDetails> (use wsdl2h option -g to auto-generate type _ns3__MerchantStoreDetails)

  - <ns3:RefundItemDetails> (use wsdl2h option -g to auto-generate type _ns3__RefundItemDetails)

  - <ns3:MerchantData> (use wsdl2h option -g to auto-generate type _ns3__MerchantData)

  - <ns3:MerchantDataMap> (use wsdl2h option -g to auto-generate type _ns3__MerchantDataMap)

  - <ns3:ShipToAddress> (use wsdl2h option -g to auto-generate type _ns3__ShipToAddress)

  - <ns3:PaymentDetailsItem> (use wsdl2h option -g to auto-generate type _ns3__PaymentDetailsItem)

  - <ns3:EnterBoardingRequestDetails> (use wsdl2h option -g to auto-generate type _ns3__EnterBoardingRequestDetails)

  - <ns3:GetBoardingDetailsResponseDetails> (use wsdl2h option -g to auto-generate type _ns3__GetBoardingDetailsResponseDetails)

  - <ns3:SetMobileCheckoutRequestDetails> (use wsdl2h option -g to auto-generate type _ns3__SetMobileCheckoutRequestDetails)

  - <ns3:DoMobileCheckoutPaymentResponseDetails> (use wsdl2h option -g to auto-generate type _ns3__DoMobileCheckoutPaymentResponseDetails)

  - <ns3:SetEbayMobileCheckoutRequestDetails> (use wsdl2h option -g to auto-generate type _ns3__SetEbayMobileCheckoutRequestDetails)

  - <ns3:ReverseTransactionRequestDetails> (use wsdl2h option -g to auto-generate type _ns3__ReverseTransactionRequestDetails)

  - <ns3:ReverseTransactionResponseDetails> (use wsdl2h option -g to auto-generate type _ns3__ReverseTransactionResponseDetails)

  - <ns3:RefundInfo> (use wsdl2h option -g to auto-generate type _ns3__RefundInfo)

@section ns4 Top-level root elements of schema "urn:ebay:apis:EnhancedDataTypes"

  - <ns4:EnhancedInitiateRecoupRequestDetails> (use wsdl2h option -g to auto-generate type _ns4__EnhancedInitiateRecoupRequestDetails)

  - <ns4:EnhancedCompleteRecoupRequestDetails> (use wsdl2h option -g to auto-generate type _ns4__EnhancedCompleteRecoupRequestDetails)

  - <ns4:EnhancedCompleteRecoupResponseDetails> (use wsdl2h option -g to auto-generate type _ns4__EnhancedCompleteRecoupResponseDetails)

  - <ns4:EnhancedCancelRecoupRequestDetails> (use wsdl2h option -g to auto-generate type _ns4__EnhancedCancelRecoupRequestDetails)

*/

/* End of paypal.h */
