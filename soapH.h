/* soapH.h
   Generated by gSOAP 2.8.54 for paypal.h

gSOAP XML Web services tools
Copyright (C) 2000-2017, Robert van Engelen, Genivia Inc. All Rights Reserved.
The soapcpp2 tool and its generated software are released under the GPL.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

#ifndef soapH_H
#define soapH_H
#include "soapStub.h"
#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_markelement(struct soap*, const void*, int);

#ifdef __cplusplus
}
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_putindependent(struct soap*);
SOAP_FMAC3 int SOAP_FMAC4 soap_getindependent(struct soap*);
#endif

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void * SOAP_FMAC4 soap_getelement(struct soap*, int*);
SOAP_FMAC3 int SOAP_FMAC4 soap_putelement(struct soap*, const void*, const char*, int, int);
SOAP_FMAC3 void * SOAP_FMAC4 soap_dupelement(struct soap*, const void*, int);
SOAP_FMAC3 void SOAP_FMAC4 soap_delelement(const void*, int);

#ifdef __cplusplus
}
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_ignore_element(struct soap*);

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultcode(struct soap *soap);
SOAP_FMAC3 void * SOAP_FMAC4 soap_instantiate(struct soap*, int, const char*, const char*, size_t*);
SOAP_FMAC3 int SOAP_FMAC4 soap_fdelete(struct soap_clist*);
SOAP_FMAC3 int SOAP_FMAC4 soap_fbase(int, int);
SOAP_FMAC3 void SOAP_FMAC4 soap_finsert(struct soap*, int, int, void*, size_t, const void*, void**);

#ifndef SOAP_TYPE_byte_DEFINED
#define SOAP_TYPE_byte_DEFINED

inline void soap_default_byte(struct soap *soap, char *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_byte
	*a = SOAP_DEFAULT_byte;
#else
	*a = (char)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_byte(struct soap*, const char*, int, const char *, const char*);
SOAP_FMAC3 char * SOAP_FMAC4 soap_in_byte(struct soap*, const char*, char *, const char*);

SOAP_FMAC3 char * SOAP_FMAC4 soap_new_byte(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_byte(struct soap*, const char *, const char*, const char*);

inline int soap_write_byte(struct soap *soap, char const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_byte(soap, p, "byte", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_byte(struct soap *soap, const char *URL, char const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_byte(soap, p, "byte", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_byte(struct soap *soap, const char *URL, char const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_byte(soap, p, "byte", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 char * SOAP_FMAC4 soap_get_byte(struct soap*, char *, const char*, const char*);

inline int soap_read_byte(struct soap *soap, char *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_byte(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_byte(struct soap *soap, const char *URL, char *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_byte(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_byte(struct soap *soap, char *p)
{
	if (soap_read_byte(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_int_DEFINED
#define SOAP_TYPE_int_DEFINED

inline void soap_default_int(struct soap *soap, int *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_int
	*a = SOAP_DEFAULT_int;
#else
	*a = (int)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_int(struct soap*, const char*, int, const int *, const char*);
SOAP_FMAC3 int * SOAP_FMAC4 soap_in_int(struct soap*, const char*, int *, const char*);

SOAP_FMAC3 int * SOAP_FMAC4 soap_new_int(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_int(struct soap*, const int *, const char*, const char*);

inline int soap_write_int(struct soap *soap, int const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_int(soap, p, "int", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_int(struct soap *soap, const char *URL, int const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_int(soap, p, "int", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_int(struct soap *soap, const char *URL, int const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_int(soap, p, "int", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 int * SOAP_FMAC4 soap_get_int(struct soap*, int *, const char*, const char*);

inline int soap_read_int(struct soap *soap, int *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_int(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_int(struct soap *soap, const char *URL, int *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_int(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_int(struct soap *soap, int *p)
{
	if (soap_read_int(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_float_DEFINED
#define SOAP_TYPE_float_DEFINED

inline void soap_default_float(struct soap *soap, float *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_float
	*a = SOAP_DEFAULT_float;
#else
	*a = (float)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_float(struct soap*, const char*, int, const float *, const char*);
SOAP_FMAC3 float * SOAP_FMAC4 soap_in_float(struct soap*, const char*, float *, const char*);

SOAP_FMAC3 float * SOAP_FMAC4 soap_new_float(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_float(struct soap*, const float *, const char*, const char*);

inline int soap_write_float(struct soap *soap, float const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_float(soap, p, "float", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_float(struct soap *soap, const char *URL, float const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_float(soap, p, "float", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_float(struct soap *soap, const char *URL, float const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_float(soap, p, "float", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 float * SOAP_FMAC4 soap_get_float(struct soap*, float *, const char*, const char*);

inline int soap_read_float(struct soap *soap, float *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_float(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_float(struct soap *soap, const char *URL, float *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_float(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_float(struct soap *soap, float *p)
{
	if (soap_read_float(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_double_DEFINED
#define SOAP_TYPE_double_DEFINED

inline void soap_default_double(struct soap *soap, double *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_double
	*a = SOAP_DEFAULT_double;
#else
	*a = (double)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_double(struct soap*, const char*, int, const double *, const char*);
SOAP_FMAC3 double * SOAP_FMAC4 soap_in_double(struct soap*, const char*, double *, const char*);

SOAP_FMAC3 double * SOAP_FMAC4 soap_new_double(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_double(struct soap*, const double *, const char*, const char*);

inline int soap_write_double(struct soap *soap, double const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_double(soap, p, "double", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_double(struct soap *soap, const char *URL, double const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_double(soap, p, "double", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_double(struct soap *soap, const char *URL, double const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_double(soap, p, "double", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 double * SOAP_FMAC4 soap_get_double(struct soap*, double *, const char*, const char*);

inline int soap_read_double(struct soap *soap, double *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_double(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_double(struct soap *soap, const char *URL, double *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_double(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_double(struct soap *soap, double *p)
{
	if (soap_read_double(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_dateTime_DEFINED
#define SOAP_TYPE_dateTime_DEFINED

inline void soap_default_dateTime(struct soap *soap, time_t *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_dateTime
	*a = SOAP_DEFAULT_dateTime;
#else
	*a = (time_t)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_dateTime(struct soap*, const char*, int, const time_t *, const char*);
SOAP_FMAC3 time_t * SOAP_FMAC4 soap_in_dateTime(struct soap*, const char*, time_t *, const char*);

SOAP_FMAC3 time_t * SOAP_FMAC4 soap_new_dateTime(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_dateTime(struct soap*, const time_t *, const char*, const char*);

inline int soap_write_dateTime(struct soap *soap, time_t const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_dateTime(soap, p, "dateTime", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_dateTime(struct soap *soap, const char *URL, time_t const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_dateTime(soap, p, "dateTime", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_dateTime(struct soap *soap, const char *URL, time_t const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_dateTime(soap, p, "dateTime", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 time_t * SOAP_FMAC4 soap_get_dateTime(struct soap*, time_t *, const char*, const char*);

inline int soap_read_dateTime(struct soap *soap, time_t *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_dateTime(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_dateTime(struct soap *soap, const char *URL, time_t *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_dateTime(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_dateTime(struct soap *soap, time_t *p)
{
	if (soap_read_dateTime(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_bool_DEFINED
#define SOAP_TYPE_bool_DEFINED

inline void soap_default_bool(struct soap *soap, bool *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_bool
	*a = SOAP_DEFAULT_bool;
#else
	*a = (bool)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_bool(struct soap*, const char*, int, const bool *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_bool2s(struct soap*, bool);
SOAP_FMAC3 bool * SOAP_FMAC4 soap_in_bool(struct soap*, const char*, bool *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2bool(struct soap*, const char*, bool *);

SOAP_FMAC3 bool * SOAP_FMAC4 soap_new_bool(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_bool(struct soap*, const bool *, const char*, const char*);

inline int soap_write_bool(struct soap *soap, bool const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_bool(soap, p, "boolean", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_bool(struct soap *soap, const char *URL, bool const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_bool(soap, p, "boolean", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_bool(struct soap *soap, const char *URL, bool const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_bool(soap, p, "boolean", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 bool * SOAP_FMAC4 soap_get_bool(struct soap*, bool *, const char*, const char*);

inline int soap_read_bool(struct soap *soap, bool *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_bool(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_bool(struct soap *soap, const char *URL, bool *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_bool(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_bool(struct soap *soap, bool *p)
{
	if (soap_read_bool(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__WalletItemType_DEFINED
#define SOAP_TYPE_ns3__WalletItemType_DEFINED

inline void soap_default_ns3__WalletItemType(struct soap *soap, enum ns3__WalletItemType *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_ns3__WalletItemType
	*a = SOAP_DEFAULT_ns3__WalletItemType;
#else
	*a = (enum ns3__WalletItemType)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__WalletItemType(struct soap*, const char*, int, const enum ns3__WalletItemType *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns3__WalletItemType2s(struct soap*, enum ns3__WalletItemType);
SOAP_FMAC3 enum ns3__WalletItemType * SOAP_FMAC4 soap_in_ns3__WalletItemType(struct soap*, const char*, enum ns3__WalletItemType *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns3__WalletItemType(struct soap*, const char*, enum ns3__WalletItemType *);

SOAP_FMAC3 enum ns3__WalletItemType * SOAP_FMAC4 soap_new_ns3__WalletItemType(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns3__WalletItemType(struct soap*, const enum ns3__WalletItemType *, const char*, const char*);

inline int soap_write_ns3__WalletItemType(struct soap *soap, enum ns3__WalletItemType const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_ns3__WalletItemType(soap, p, "ns3:WalletItemType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_ns3__WalletItemType(struct soap *soap, const char *URL, enum ns3__WalletItemType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ns3__WalletItemType(soap, p, "ns3:WalletItemType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__WalletItemType(struct soap *soap, const char *URL, enum ns3__WalletItemType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ns3__WalletItemType(soap, p, "ns3:WalletItemType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum ns3__WalletItemType * SOAP_FMAC4 soap_get_ns3__WalletItemType(struct soap*, enum ns3__WalletItemType *, const char*, const char*);

inline int soap_read_ns3__WalletItemType(struct soap *soap, enum ns3__WalletItemType *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_ns3__WalletItemType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__WalletItemType(struct soap *soap, const char *URL, enum ns3__WalletItemType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__WalletItemType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__WalletItemType(struct soap *soap, enum ns3__WalletItemType *p)
{
	if (soap_read_ns3__WalletItemType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__LocationType_DEFINED
#define SOAP_TYPE_ns3__LocationType_DEFINED

inline void soap_default_ns3__LocationType(struct soap *soap, enum ns3__LocationType *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_ns3__LocationType
	*a = SOAP_DEFAULT_ns3__LocationType;
#else
	*a = (enum ns3__LocationType)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__LocationType(struct soap*, const char*, int, const enum ns3__LocationType *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns3__LocationType2s(struct soap*, enum ns3__LocationType);
SOAP_FMAC3 enum ns3__LocationType * SOAP_FMAC4 soap_in_ns3__LocationType(struct soap*, const char*, enum ns3__LocationType *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns3__LocationType(struct soap*, const char*, enum ns3__LocationType *);

SOAP_FMAC3 enum ns3__LocationType * SOAP_FMAC4 soap_new_ns3__LocationType(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns3__LocationType(struct soap*, const enum ns3__LocationType *, const char*, const char*);

inline int soap_write_ns3__LocationType(struct soap *soap, enum ns3__LocationType const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_ns3__LocationType(soap, p, "ns3:LocationType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_ns3__LocationType(struct soap *soap, const char *URL, enum ns3__LocationType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ns3__LocationType(soap, p, "ns3:LocationType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__LocationType(struct soap *soap, const char *URL, enum ns3__LocationType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ns3__LocationType(soap, p, "ns3:LocationType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum ns3__LocationType * SOAP_FMAC4 soap_get_ns3__LocationType(struct soap*, enum ns3__LocationType *, const char*, const char*);

inline int soap_read_ns3__LocationType(struct soap *soap, enum ns3__LocationType *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_ns3__LocationType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__LocationType(struct soap *soap, const char *URL, enum ns3__LocationType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__LocationType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__LocationType(struct soap *soap, enum ns3__LocationType *p)
{
	if (soap_read_ns3__LocationType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__PaymentCategoryType_DEFINED
#define SOAP_TYPE_ns3__PaymentCategoryType_DEFINED

inline void soap_default_ns3__PaymentCategoryType(struct soap *soap, enum ns3__PaymentCategoryType *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_ns3__PaymentCategoryType
	*a = SOAP_DEFAULT_ns3__PaymentCategoryType;
#else
	*a = (enum ns3__PaymentCategoryType)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__PaymentCategoryType(struct soap*, const char*, int, const enum ns3__PaymentCategoryType *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns3__PaymentCategoryType2s(struct soap*, enum ns3__PaymentCategoryType);
SOAP_FMAC3 enum ns3__PaymentCategoryType * SOAP_FMAC4 soap_in_ns3__PaymentCategoryType(struct soap*, const char*, enum ns3__PaymentCategoryType *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns3__PaymentCategoryType(struct soap*, const char*, enum ns3__PaymentCategoryType *);

SOAP_FMAC3 enum ns3__PaymentCategoryType * SOAP_FMAC4 soap_new_ns3__PaymentCategoryType(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns3__PaymentCategoryType(struct soap*, const enum ns3__PaymentCategoryType *, const char*, const char*);

inline int soap_write_ns3__PaymentCategoryType(struct soap *soap, enum ns3__PaymentCategoryType const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_ns3__PaymentCategoryType(soap, p, "ns3:PaymentCategoryType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_ns3__PaymentCategoryType(struct soap *soap, const char *URL, enum ns3__PaymentCategoryType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ns3__PaymentCategoryType(soap, p, "ns3:PaymentCategoryType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__PaymentCategoryType(struct soap *soap, const char *URL, enum ns3__PaymentCategoryType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ns3__PaymentCategoryType(soap, p, "ns3:PaymentCategoryType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum ns3__PaymentCategoryType * SOAP_FMAC4 soap_get_ns3__PaymentCategoryType(struct soap*, enum ns3__PaymentCategoryType *, const char*, const char*);

inline int soap_read_ns3__PaymentCategoryType(struct soap *soap, enum ns3__PaymentCategoryType *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_ns3__PaymentCategoryType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__PaymentCategoryType(struct soap *soap, const char *URL, enum ns3__PaymentCategoryType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__PaymentCategoryType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__PaymentCategoryType(struct soap *soap, enum ns3__PaymentCategoryType *p)
{
	if (soap_read_ns3__PaymentCategoryType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__CoupleType_DEFINED
#define SOAP_TYPE_ns3__CoupleType_DEFINED

inline void soap_default_ns3__CoupleType(struct soap *soap, enum ns3__CoupleType *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_ns3__CoupleType
	*a = SOAP_DEFAULT_ns3__CoupleType;
#else
	*a = (enum ns3__CoupleType)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__CoupleType(struct soap*, const char*, int, const enum ns3__CoupleType *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns3__CoupleType2s(struct soap*, enum ns3__CoupleType);
SOAP_FMAC3 enum ns3__CoupleType * SOAP_FMAC4 soap_in_ns3__CoupleType(struct soap*, const char*, enum ns3__CoupleType *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns3__CoupleType(struct soap*, const char*, enum ns3__CoupleType *);

SOAP_FMAC3 enum ns3__CoupleType * SOAP_FMAC4 soap_new_ns3__CoupleType(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns3__CoupleType(struct soap*, const enum ns3__CoupleType *, const char*, const char*);

inline int soap_write_ns3__CoupleType(struct soap *soap, enum ns3__CoupleType const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_ns3__CoupleType(soap, p, "ns3:CoupleType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_ns3__CoupleType(struct soap *soap, const char *URL, enum ns3__CoupleType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ns3__CoupleType(soap, p, "ns3:CoupleType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__CoupleType(struct soap *soap, const char *URL, enum ns3__CoupleType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ns3__CoupleType(soap, p, "ns3:CoupleType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum ns3__CoupleType * SOAP_FMAC4 soap_get_ns3__CoupleType(struct soap*, enum ns3__CoupleType *, const char*, const char*);

inline int soap_read_ns3__CoupleType(struct soap *soap, enum ns3__CoupleType *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_ns3__CoupleType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__CoupleType(struct soap *soap, const char *URL, enum ns3__CoupleType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__CoupleType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__CoupleType(struct soap *soap, enum ns3__CoupleType *p)
{
	if (soap_read_ns3__CoupleType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__RecurringFlagType_DEFINED
#define SOAP_TYPE_ns3__RecurringFlagType_DEFINED

inline void soap_default_ns3__RecurringFlagType(struct soap *soap, enum ns3__RecurringFlagType *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_ns3__RecurringFlagType
	*a = SOAP_DEFAULT_ns3__RecurringFlagType;
#else
	*a = (enum ns3__RecurringFlagType)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__RecurringFlagType(struct soap*, const char*, int, const enum ns3__RecurringFlagType *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns3__RecurringFlagType2s(struct soap*, enum ns3__RecurringFlagType);
SOAP_FMAC3 enum ns3__RecurringFlagType * SOAP_FMAC4 soap_in_ns3__RecurringFlagType(struct soap*, const char*, enum ns3__RecurringFlagType *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns3__RecurringFlagType(struct soap*, const char*, enum ns3__RecurringFlagType *);

SOAP_FMAC3 enum ns3__RecurringFlagType * SOAP_FMAC4 soap_new_ns3__RecurringFlagType(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns3__RecurringFlagType(struct soap*, const enum ns3__RecurringFlagType *, const char*, const char*);

inline int soap_write_ns3__RecurringFlagType(struct soap *soap, enum ns3__RecurringFlagType const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_ns3__RecurringFlagType(soap, p, "ns3:RecurringFlagType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_ns3__RecurringFlagType(struct soap *soap, const char *URL, enum ns3__RecurringFlagType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ns3__RecurringFlagType(soap, p, "ns3:RecurringFlagType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__RecurringFlagType(struct soap *soap, const char *URL, enum ns3__RecurringFlagType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ns3__RecurringFlagType(soap, p, "ns3:RecurringFlagType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum ns3__RecurringFlagType * SOAP_FMAC4 soap_get_ns3__RecurringFlagType(struct soap*, enum ns3__RecurringFlagType *, const char*, const char*);

inline int soap_read_ns3__RecurringFlagType(struct soap *soap, enum ns3__RecurringFlagType *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_ns3__RecurringFlagType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__RecurringFlagType(struct soap *soap, const char *URL, enum ns3__RecurringFlagType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__RecurringFlagType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__RecurringFlagType(struct soap *soap, enum ns3__RecurringFlagType *p)
{
	if (soap_read_ns3__RecurringFlagType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__ItemCategoryType_DEFINED
#define SOAP_TYPE_ns3__ItemCategoryType_DEFINED

inline void soap_default_ns3__ItemCategoryType(struct soap *soap, enum ns3__ItemCategoryType *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_ns3__ItemCategoryType
	*a = SOAP_DEFAULT_ns3__ItemCategoryType;
#else
	*a = (enum ns3__ItemCategoryType)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__ItemCategoryType(struct soap*, const char*, int, const enum ns3__ItemCategoryType *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns3__ItemCategoryType2s(struct soap*, enum ns3__ItemCategoryType);
SOAP_FMAC3 enum ns3__ItemCategoryType * SOAP_FMAC4 soap_in_ns3__ItemCategoryType(struct soap*, const char*, enum ns3__ItemCategoryType *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns3__ItemCategoryType(struct soap*, const char*, enum ns3__ItemCategoryType *);

SOAP_FMAC3 enum ns3__ItemCategoryType * SOAP_FMAC4 soap_new_ns3__ItemCategoryType(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns3__ItemCategoryType(struct soap*, const enum ns3__ItemCategoryType *, const char*, const char*);

inline int soap_write_ns3__ItemCategoryType(struct soap *soap, enum ns3__ItemCategoryType const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_ns3__ItemCategoryType(soap, p, "ns3:ItemCategoryType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_ns3__ItemCategoryType(struct soap *soap, const char *URL, enum ns3__ItemCategoryType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ns3__ItemCategoryType(soap, p, "ns3:ItemCategoryType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__ItemCategoryType(struct soap *soap, const char *URL, enum ns3__ItemCategoryType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ns3__ItemCategoryType(soap, p, "ns3:ItemCategoryType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum ns3__ItemCategoryType * SOAP_FMAC4 soap_get_ns3__ItemCategoryType(struct soap*, enum ns3__ItemCategoryType *, const char*, const char*);

inline int soap_read_ns3__ItemCategoryType(struct soap *soap, enum ns3__ItemCategoryType *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_ns3__ItemCategoryType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__ItemCategoryType(struct soap *soap, const char *URL, enum ns3__ItemCategoryType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__ItemCategoryType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__ItemCategoryType(struct soap *soap, enum ns3__ItemCategoryType *p)
{
	if (soap_read_ns3__ItemCategoryType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__UserSelectedFundingSourceType_DEFINED
#define SOAP_TYPE_ns3__UserSelectedFundingSourceType_DEFINED

inline void soap_default_ns3__UserSelectedFundingSourceType(struct soap *soap, enum ns3__UserSelectedFundingSourceType *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_ns3__UserSelectedFundingSourceType
	*a = SOAP_DEFAULT_ns3__UserSelectedFundingSourceType;
#else
	*a = (enum ns3__UserSelectedFundingSourceType)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__UserSelectedFundingSourceType(struct soap*, const char*, int, const enum ns3__UserSelectedFundingSourceType *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns3__UserSelectedFundingSourceType2s(struct soap*, enum ns3__UserSelectedFundingSourceType);
SOAP_FMAC3 enum ns3__UserSelectedFundingSourceType * SOAP_FMAC4 soap_in_ns3__UserSelectedFundingSourceType(struct soap*, const char*, enum ns3__UserSelectedFundingSourceType *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns3__UserSelectedFundingSourceType(struct soap*, const char*, enum ns3__UserSelectedFundingSourceType *);

SOAP_FMAC3 enum ns3__UserSelectedFundingSourceType * SOAP_FMAC4 soap_new_ns3__UserSelectedFundingSourceType(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns3__UserSelectedFundingSourceType(struct soap*, const enum ns3__UserSelectedFundingSourceType *, const char*, const char*);

inline int soap_write_ns3__UserSelectedFundingSourceType(struct soap *soap, enum ns3__UserSelectedFundingSourceType const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_ns3__UserSelectedFundingSourceType(soap, p, "ns3:UserSelectedFundingSourceType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_ns3__UserSelectedFundingSourceType(struct soap *soap, const char *URL, enum ns3__UserSelectedFundingSourceType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ns3__UserSelectedFundingSourceType(soap, p, "ns3:UserSelectedFundingSourceType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__UserSelectedFundingSourceType(struct soap *soap, const char *URL, enum ns3__UserSelectedFundingSourceType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ns3__UserSelectedFundingSourceType(soap, p, "ns3:UserSelectedFundingSourceType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum ns3__UserSelectedFundingSourceType * SOAP_FMAC4 soap_get_ns3__UserSelectedFundingSourceType(struct soap*, enum ns3__UserSelectedFundingSourceType *, const char*, const char*);

inline int soap_read_ns3__UserSelectedFundingSourceType(struct soap *soap, enum ns3__UserSelectedFundingSourceType *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_ns3__UserSelectedFundingSourceType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__UserSelectedFundingSourceType(struct soap *soap, const char *URL, enum ns3__UserSelectedFundingSourceType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__UserSelectedFundingSourceType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__UserSelectedFundingSourceType(struct soap *soap, enum ns3__UserSelectedFundingSourceType *p)
{
	if (soap_read_ns3__UserSelectedFundingSourceType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__OptionTypeListType_DEFINED
#define SOAP_TYPE_ns3__OptionTypeListType_DEFINED

inline void soap_default_ns3__OptionTypeListType(struct soap *soap, enum ns3__OptionTypeListType *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_ns3__OptionTypeListType
	*a = SOAP_DEFAULT_ns3__OptionTypeListType;
#else
	*a = (enum ns3__OptionTypeListType)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__OptionTypeListType(struct soap*, const char*, int, const enum ns3__OptionTypeListType *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns3__OptionTypeListType2s(struct soap*, enum ns3__OptionTypeListType);
SOAP_FMAC3 enum ns3__OptionTypeListType * SOAP_FMAC4 soap_in_ns3__OptionTypeListType(struct soap*, const char*, enum ns3__OptionTypeListType *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns3__OptionTypeListType(struct soap*, const char*, enum ns3__OptionTypeListType *);

SOAP_FMAC3 enum ns3__OptionTypeListType * SOAP_FMAC4 soap_new_ns3__OptionTypeListType(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns3__OptionTypeListType(struct soap*, const enum ns3__OptionTypeListType *, const char*, const char*);

inline int soap_write_ns3__OptionTypeListType(struct soap *soap, enum ns3__OptionTypeListType const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_ns3__OptionTypeListType(soap, p, "ns3:OptionTypeListType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_ns3__OptionTypeListType(struct soap *soap, const char *URL, enum ns3__OptionTypeListType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ns3__OptionTypeListType(soap, p, "ns3:OptionTypeListType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__OptionTypeListType(struct soap *soap, const char *URL, enum ns3__OptionTypeListType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ns3__OptionTypeListType(soap, p, "ns3:OptionTypeListType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum ns3__OptionTypeListType * SOAP_FMAC4 soap_get_ns3__OptionTypeListType(struct soap*, enum ns3__OptionTypeListType *, const char*, const char*);

inline int soap_read_ns3__OptionTypeListType(struct soap *soap, enum ns3__OptionTypeListType *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_ns3__OptionTypeListType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__OptionTypeListType(struct soap *soap, const char *URL, enum ns3__OptionTypeListType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__OptionTypeListType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__OptionTypeListType(struct soap *soap, enum ns3__OptionTypeListType *p)
{
	if (soap_read_ns3__OptionTypeListType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__ButtonStatusType_DEFINED
#define SOAP_TYPE_ns3__ButtonStatusType_DEFINED

inline void soap_default_ns3__ButtonStatusType(struct soap *soap, enum ns3__ButtonStatusType *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_ns3__ButtonStatusType
	*a = SOAP_DEFAULT_ns3__ButtonStatusType;
#else
	*a = (enum ns3__ButtonStatusType)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__ButtonStatusType(struct soap*, const char*, int, const enum ns3__ButtonStatusType *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns3__ButtonStatusType2s(struct soap*, enum ns3__ButtonStatusType);
SOAP_FMAC3 enum ns3__ButtonStatusType * SOAP_FMAC4 soap_in_ns3__ButtonStatusType(struct soap*, const char*, enum ns3__ButtonStatusType *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns3__ButtonStatusType(struct soap*, const char*, enum ns3__ButtonStatusType *);

SOAP_FMAC3 enum ns3__ButtonStatusType * SOAP_FMAC4 soap_new_ns3__ButtonStatusType(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns3__ButtonStatusType(struct soap*, const enum ns3__ButtonStatusType *, const char*, const char*);

inline int soap_write_ns3__ButtonStatusType(struct soap *soap, enum ns3__ButtonStatusType const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_ns3__ButtonStatusType(soap, p, "ns3:ButtonStatusType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_ns3__ButtonStatusType(struct soap *soap, const char *URL, enum ns3__ButtonStatusType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ns3__ButtonStatusType(soap, p, "ns3:ButtonStatusType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__ButtonStatusType(struct soap *soap, const char *URL, enum ns3__ButtonStatusType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ns3__ButtonStatusType(soap, p, "ns3:ButtonStatusType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum ns3__ButtonStatusType * SOAP_FMAC4 soap_get_ns3__ButtonStatusType(struct soap*, enum ns3__ButtonStatusType *, const char*, const char*);

inline int soap_read_ns3__ButtonStatusType(struct soap *soap, enum ns3__ButtonStatusType *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_ns3__ButtonStatusType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__ButtonStatusType(struct soap *soap, const char *URL, enum ns3__ButtonStatusType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__ButtonStatusType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__ButtonStatusType(struct soap *soap, enum ns3__ButtonStatusType *p)
{
	if (soap_read_ns3__ButtonStatusType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__SubscribeTextType_DEFINED
#define SOAP_TYPE_ns3__SubscribeTextType_DEFINED

inline void soap_default_ns3__SubscribeTextType(struct soap *soap, enum ns3__SubscribeTextType *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_ns3__SubscribeTextType
	*a = SOAP_DEFAULT_ns3__SubscribeTextType;
#else
	*a = (enum ns3__SubscribeTextType)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__SubscribeTextType(struct soap*, const char*, int, const enum ns3__SubscribeTextType *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns3__SubscribeTextType2s(struct soap*, enum ns3__SubscribeTextType);
SOAP_FMAC3 enum ns3__SubscribeTextType * SOAP_FMAC4 soap_in_ns3__SubscribeTextType(struct soap*, const char*, enum ns3__SubscribeTextType *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns3__SubscribeTextType(struct soap*, const char*, enum ns3__SubscribeTextType *);

SOAP_FMAC3 enum ns3__SubscribeTextType * SOAP_FMAC4 soap_new_ns3__SubscribeTextType(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns3__SubscribeTextType(struct soap*, const enum ns3__SubscribeTextType *, const char*, const char*);

inline int soap_write_ns3__SubscribeTextType(struct soap *soap, enum ns3__SubscribeTextType const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_ns3__SubscribeTextType(soap, p, "ns3:SubscribeTextType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_ns3__SubscribeTextType(struct soap *soap, const char *URL, enum ns3__SubscribeTextType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ns3__SubscribeTextType(soap, p, "ns3:SubscribeTextType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__SubscribeTextType(struct soap *soap, const char *URL, enum ns3__SubscribeTextType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ns3__SubscribeTextType(soap, p, "ns3:SubscribeTextType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum ns3__SubscribeTextType * SOAP_FMAC4 soap_get_ns3__SubscribeTextType(struct soap*, enum ns3__SubscribeTextType *, const char*, const char*);

inline int soap_read_ns3__SubscribeTextType(struct soap *soap, enum ns3__SubscribeTextType *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_ns3__SubscribeTextType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__SubscribeTextType(struct soap *soap, const char *URL, enum ns3__SubscribeTextType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__SubscribeTextType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__SubscribeTextType(struct soap *soap, enum ns3__SubscribeTextType *p)
{
	if (soap_read_ns3__SubscribeTextType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__BuyNowTextType_DEFINED
#define SOAP_TYPE_ns3__BuyNowTextType_DEFINED

inline void soap_default_ns3__BuyNowTextType(struct soap *soap, enum ns3__BuyNowTextType *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_ns3__BuyNowTextType
	*a = SOAP_DEFAULT_ns3__BuyNowTextType;
#else
	*a = (enum ns3__BuyNowTextType)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__BuyNowTextType(struct soap*, const char*, int, const enum ns3__BuyNowTextType *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns3__BuyNowTextType2s(struct soap*, enum ns3__BuyNowTextType);
SOAP_FMAC3 enum ns3__BuyNowTextType * SOAP_FMAC4 soap_in_ns3__BuyNowTextType(struct soap*, const char*, enum ns3__BuyNowTextType *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns3__BuyNowTextType(struct soap*, const char*, enum ns3__BuyNowTextType *);

SOAP_FMAC3 enum ns3__BuyNowTextType * SOAP_FMAC4 soap_new_ns3__BuyNowTextType(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns3__BuyNowTextType(struct soap*, const enum ns3__BuyNowTextType *, const char*, const char*);

inline int soap_write_ns3__BuyNowTextType(struct soap *soap, enum ns3__BuyNowTextType const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_ns3__BuyNowTextType(soap, p, "ns3:BuyNowTextType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_ns3__BuyNowTextType(struct soap *soap, const char *URL, enum ns3__BuyNowTextType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ns3__BuyNowTextType(soap, p, "ns3:BuyNowTextType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__BuyNowTextType(struct soap *soap, const char *URL, enum ns3__BuyNowTextType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ns3__BuyNowTextType(soap, p, "ns3:BuyNowTextType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum ns3__BuyNowTextType * SOAP_FMAC4 soap_get_ns3__BuyNowTextType(struct soap*, enum ns3__BuyNowTextType *, const char*, const char*);

inline int soap_read_ns3__BuyNowTextType(struct soap *soap, enum ns3__BuyNowTextType *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_ns3__BuyNowTextType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__BuyNowTextType(struct soap *soap, const char *URL, enum ns3__BuyNowTextType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__BuyNowTextType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__BuyNowTextType(struct soap *soap, enum ns3__BuyNowTextType *p)
{
	if (soap_read_ns3__BuyNowTextType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__ButtonImageType_DEFINED
#define SOAP_TYPE_ns3__ButtonImageType_DEFINED

inline void soap_default_ns3__ButtonImageType(struct soap *soap, enum ns3__ButtonImageType *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_ns3__ButtonImageType
	*a = SOAP_DEFAULT_ns3__ButtonImageType;
#else
	*a = (enum ns3__ButtonImageType)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__ButtonImageType(struct soap*, const char*, int, const enum ns3__ButtonImageType *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns3__ButtonImageType2s(struct soap*, enum ns3__ButtonImageType);
SOAP_FMAC3 enum ns3__ButtonImageType * SOAP_FMAC4 soap_in_ns3__ButtonImageType(struct soap*, const char*, enum ns3__ButtonImageType *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns3__ButtonImageType(struct soap*, const char*, enum ns3__ButtonImageType *);

SOAP_FMAC3 enum ns3__ButtonImageType * SOAP_FMAC4 soap_new_ns3__ButtonImageType(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns3__ButtonImageType(struct soap*, const enum ns3__ButtonImageType *, const char*, const char*);

inline int soap_write_ns3__ButtonImageType(struct soap *soap, enum ns3__ButtonImageType const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_ns3__ButtonImageType(soap, p, "ns3:ButtonImageType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_ns3__ButtonImageType(struct soap *soap, const char *URL, enum ns3__ButtonImageType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ns3__ButtonImageType(soap, p, "ns3:ButtonImageType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__ButtonImageType(struct soap *soap, const char *URL, enum ns3__ButtonImageType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ns3__ButtonImageType(soap, p, "ns3:ButtonImageType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum ns3__ButtonImageType * SOAP_FMAC4 soap_get_ns3__ButtonImageType(struct soap*, enum ns3__ButtonImageType *, const char*, const char*);

inline int soap_read_ns3__ButtonImageType(struct soap *soap, enum ns3__ButtonImageType *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_ns3__ButtonImageType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__ButtonImageType(struct soap *soap, const char *URL, enum ns3__ButtonImageType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__ButtonImageType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__ButtonImageType(struct soap *soap, enum ns3__ButtonImageType *p)
{
	if (soap_read_ns3__ButtonImageType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__ButtonSubTypeType_DEFINED
#define SOAP_TYPE_ns3__ButtonSubTypeType_DEFINED

inline void soap_default_ns3__ButtonSubTypeType(struct soap *soap, enum ns3__ButtonSubTypeType *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_ns3__ButtonSubTypeType
	*a = SOAP_DEFAULT_ns3__ButtonSubTypeType;
#else
	*a = (enum ns3__ButtonSubTypeType)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__ButtonSubTypeType(struct soap*, const char*, int, const enum ns3__ButtonSubTypeType *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns3__ButtonSubTypeType2s(struct soap*, enum ns3__ButtonSubTypeType);
SOAP_FMAC3 enum ns3__ButtonSubTypeType * SOAP_FMAC4 soap_in_ns3__ButtonSubTypeType(struct soap*, const char*, enum ns3__ButtonSubTypeType *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns3__ButtonSubTypeType(struct soap*, const char*, enum ns3__ButtonSubTypeType *);

SOAP_FMAC3 enum ns3__ButtonSubTypeType * SOAP_FMAC4 soap_new_ns3__ButtonSubTypeType(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns3__ButtonSubTypeType(struct soap*, const enum ns3__ButtonSubTypeType *, const char*, const char*);

inline int soap_write_ns3__ButtonSubTypeType(struct soap *soap, enum ns3__ButtonSubTypeType const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_ns3__ButtonSubTypeType(soap, p, "ns3:ButtonSubTypeType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_ns3__ButtonSubTypeType(struct soap *soap, const char *URL, enum ns3__ButtonSubTypeType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ns3__ButtonSubTypeType(soap, p, "ns3:ButtonSubTypeType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__ButtonSubTypeType(struct soap *soap, const char *URL, enum ns3__ButtonSubTypeType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ns3__ButtonSubTypeType(soap, p, "ns3:ButtonSubTypeType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum ns3__ButtonSubTypeType * SOAP_FMAC4 soap_get_ns3__ButtonSubTypeType(struct soap*, enum ns3__ButtonSubTypeType *, const char*, const char*);

inline int soap_read_ns3__ButtonSubTypeType(struct soap *soap, enum ns3__ButtonSubTypeType *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_ns3__ButtonSubTypeType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__ButtonSubTypeType(struct soap *soap, const char *URL, enum ns3__ButtonSubTypeType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__ButtonSubTypeType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__ButtonSubTypeType(struct soap *soap, enum ns3__ButtonSubTypeType *p)
{
	if (soap_read_ns3__ButtonSubTypeType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__ButtonTypeType_DEFINED
#define SOAP_TYPE_ns3__ButtonTypeType_DEFINED

inline void soap_default_ns3__ButtonTypeType(struct soap *soap, enum ns3__ButtonTypeType *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_ns3__ButtonTypeType
	*a = SOAP_DEFAULT_ns3__ButtonTypeType;
#else
	*a = (enum ns3__ButtonTypeType)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__ButtonTypeType(struct soap*, const char*, int, const enum ns3__ButtonTypeType *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns3__ButtonTypeType2s(struct soap*, enum ns3__ButtonTypeType);
SOAP_FMAC3 enum ns3__ButtonTypeType * SOAP_FMAC4 soap_in_ns3__ButtonTypeType(struct soap*, const char*, enum ns3__ButtonTypeType *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns3__ButtonTypeType(struct soap*, const char*, enum ns3__ButtonTypeType *);

SOAP_FMAC3 enum ns3__ButtonTypeType * SOAP_FMAC4 soap_new_ns3__ButtonTypeType(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns3__ButtonTypeType(struct soap*, const enum ns3__ButtonTypeType *, const char*, const char*);

inline int soap_write_ns3__ButtonTypeType(struct soap *soap, enum ns3__ButtonTypeType const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_ns3__ButtonTypeType(soap, p, "ns3:ButtonTypeType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_ns3__ButtonTypeType(struct soap *soap, const char *URL, enum ns3__ButtonTypeType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ns3__ButtonTypeType(soap, p, "ns3:ButtonTypeType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__ButtonTypeType(struct soap *soap, const char *URL, enum ns3__ButtonTypeType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ns3__ButtonTypeType(soap, p, "ns3:ButtonTypeType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum ns3__ButtonTypeType * SOAP_FMAC4 soap_get_ns3__ButtonTypeType(struct soap*, enum ns3__ButtonTypeType *, const char*, const char*);

inline int soap_read_ns3__ButtonTypeType(struct soap *soap, enum ns3__ButtonTypeType *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_ns3__ButtonTypeType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__ButtonTypeType(struct soap *soap, const char *URL, enum ns3__ButtonTypeType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__ButtonTypeType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__ButtonTypeType(struct soap *soap, enum ns3__ButtonTypeType *p)
{
	if (soap_read_ns3__ButtonTypeType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__ButtonCodeType_DEFINED
#define SOAP_TYPE_ns3__ButtonCodeType_DEFINED

inline void soap_default_ns3__ButtonCodeType(struct soap *soap, enum ns3__ButtonCodeType *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_ns3__ButtonCodeType
	*a = SOAP_DEFAULT_ns3__ButtonCodeType;
#else
	*a = (enum ns3__ButtonCodeType)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__ButtonCodeType(struct soap*, const char*, int, const enum ns3__ButtonCodeType *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns3__ButtonCodeType2s(struct soap*, enum ns3__ButtonCodeType);
SOAP_FMAC3 enum ns3__ButtonCodeType * SOAP_FMAC4 soap_in_ns3__ButtonCodeType(struct soap*, const char*, enum ns3__ButtonCodeType *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns3__ButtonCodeType(struct soap*, const char*, enum ns3__ButtonCodeType *);

SOAP_FMAC3 enum ns3__ButtonCodeType * SOAP_FMAC4 soap_new_ns3__ButtonCodeType(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns3__ButtonCodeType(struct soap*, const enum ns3__ButtonCodeType *, const char*, const char*);

inline int soap_write_ns3__ButtonCodeType(struct soap *soap, enum ns3__ButtonCodeType const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_ns3__ButtonCodeType(soap, p, "ns3:ButtonCodeType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_ns3__ButtonCodeType(struct soap *soap, const char *URL, enum ns3__ButtonCodeType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ns3__ButtonCodeType(soap, p, "ns3:ButtonCodeType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__ButtonCodeType(struct soap *soap, const char *URL, enum ns3__ButtonCodeType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ns3__ButtonCodeType(soap, p, "ns3:ButtonCodeType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum ns3__ButtonCodeType * SOAP_FMAC4 soap_get_ns3__ButtonCodeType(struct soap*, enum ns3__ButtonCodeType *, const char*, const char*);

inline int soap_read_ns3__ButtonCodeType(struct soap *soap, enum ns3__ButtonCodeType *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_ns3__ButtonCodeType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__ButtonCodeType(struct soap *soap, const char *URL, enum ns3__ButtonCodeType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__ButtonCodeType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__ButtonCodeType(struct soap *soap, enum ns3__ButtonCodeType *p)
{
	if (soap_read_ns3__ButtonCodeType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__ProductCategoryType_DEFINED
#define SOAP_TYPE_ns3__ProductCategoryType_DEFINED

inline void soap_default_ns3__ProductCategoryType(struct soap *soap, enum ns3__ProductCategoryType *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_ns3__ProductCategoryType
	*a = SOAP_DEFAULT_ns3__ProductCategoryType;
#else
	*a = (enum ns3__ProductCategoryType)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__ProductCategoryType(struct soap*, const char*, int, const enum ns3__ProductCategoryType *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns3__ProductCategoryType2s(struct soap*, enum ns3__ProductCategoryType);
SOAP_FMAC3 enum ns3__ProductCategoryType * SOAP_FMAC4 soap_in_ns3__ProductCategoryType(struct soap*, const char*, enum ns3__ProductCategoryType *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns3__ProductCategoryType(struct soap*, const char*, enum ns3__ProductCategoryType *);

SOAP_FMAC3 enum ns3__ProductCategoryType * SOAP_FMAC4 soap_new_ns3__ProductCategoryType(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns3__ProductCategoryType(struct soap*, const enum ns3__ProductCategoryType *, const char*, const char*);

inline int soap_write_ns3__ProductCategoryType(struct soap *soap, enum ns3__ProductCategoryType const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_ns3__ProductCategoryType(soap, p, "ns3:ProductCategoryType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_ns3__ProductCategoryType(struct soap *soap, const char *URL, enum ns3__ProductCategoryType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ns3__ProductCategoryType(soap, p, "ns3:ProductCategoryType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__ProductCategoryType(struct soap *soap, const char *URL, enum ns3__ProductCategoryType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ns3__ProductCategoryType(soap, p, "ns3:ProductCategoryType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum ns3__ProductCategoryType * SOAP_FMAC4 soap_get_ns3__ProductCategoryType(struct soap*, enum ns3__ProductCategoryType *, const char*, const char*);

inline int soap_read_ns3__ProductCategoryType(struct soap *soap, enum ns3__ProductCategoryType *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_ns3__ProductCategoryType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__ProductCategoryType(struct soap *soap, const char *URL, enum ns3__ProductCategoryType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__ProductCategoryType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__ProductCategoryType(struct soap *soap, enum ns3__ProductCategoryType *p)
{
	if (soap_read_ns3__ProductCategoryType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__BillingPeriodType_DEFINED
#define SOAP_TYPE_ns3__BillingPeriodType_DEFINED

inline void soap_default_ns3__BillingPeriodType(struct soap *soap, enum ns3__BillingPeriodType *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_ns3__BillingPeriodType
	*a = SOAP_DEFAULT_ns3__BillingPeriodType;
#else
	*a = (enum ns3__BillingPeriodType)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__BillingPeriodType(struct soap*, const char*, int, const enum ns3__BillingPeriodType *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns3__BillingPeriodType2s(struct soap*, enum ns3__BillingPeriodType);
SOAP_FMAC3 enum ns3__BillingPeriodType * SOAP_FMAC4 soap_in_ns3__BillingPeriodType(struct soap*, const char*, enum ns3__BillingPeriodType *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns3__BillingPeriodType(struct soap*, const char*, enum ns3__BillingPeriodType *);

SOAP_FMAC3 enum ns3__BillingPeriodType * SOAP_FMAC4 soap_new_ns3__BillingPeriodType(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns3__BillingPeriodType(struct soap*, const enum ns3__BillingPeriodType *, const char*, const char*);

inline int soap_write_ns3__BillingPeriodType(struct soap *soap, enum ns3__BillingPeriodType const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_ns3__BillingPeriodType(soap, p, "ns3:BillingPeriodType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_ns3__BillingPeriodType(struct soap *soap, const char *URL, enum ns3__BillingPeriodType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ns3__BillingPeriodType(soap, p, "ns3:BillingPeriodType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__BillingPeriodType(struct soap *soap, const char *URL, enum ns3__BillingPeriodType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ns3__BillingPeriodType(soap, p, "ns3:BillingPeriodType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum ns3__BillingPeriodType * SOAP_FMAC4 soap_get_ns3__BillingPeriodType(struct soap*, enum ns3__BillingPeriodType *, const char*, const char*);

inline int soap_read_ns3__BillingPeriodType(struct soap *soap, enum ns3__BillingPeriodType *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_ns3__BillingPeriodType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__BillingPeriodType(struct soap *soap, const char *URL, enum ns3__BillingPeriodType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__BillingPeriodType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__BillingPeriodType(struct soap *soap, enum ns3__BillingPeriodType *p)
{
	if (soap_read_ns3__BillingPeriodType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__StatusChangeActionType_DEFINED
#define SOAP_TYPE_ns3__StatusChangeActionType_DEFINED

inline void soap_default_ns3__StatusChangeActionType(struct soap *soap, enum ns3__StatusChangeActionType *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_ns3__StatusChangeActionType
	*a = SOAP_DEFAULT_ns3__StatusChangeActionType;
#else
	*a = (enum ns3__StatusChangeActionType)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__StatusChangeActionType(struct soap*, const char*, int, const enum ns3__StatusChangeActionType *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns3__StatusChangeActionType2s(struct soap*, enum ns3__StatusChangeActionType);
SOAP_FMAC3 enum ns3__StatusChangeActionType * SOAP_FMAC4 soap_in_ns3__StatusChangeActionType(struct soap*, const char*, enum ns3__StatusChangeActionType *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns3__StatusChangeActionType(struct soap*, const char*, enum ns3__StatusChangeActionType *);

SOAP_FMAC3 enum ns3__StatusChangeActionType * SOAP_FMAC4 soap_new_ns3__StatusChangeActionType(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns3__StatusChangeActionType(struct soap*, const enum ns3__StatusChangeActionType *, const char*, const char*);

inline int soap_write_ns3__StatusChangeActionType(struct soap *soap, enum ns3__StatusChangeActionType const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_ns3__StatusChangeActionType(soap, p, "ns3:StatusChangeActionType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_ns3__StatusChangeActionType(struct soap *soap, const char *URL, enum ns3__StatusChangeActionType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ns3__StatusChangeActionType(soap, p, "ns3:StatusChangeActionType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__StatusChangeActionType(struct soap *soap, const char *URL, enum ns3__StatusChangeActionType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ns3__StatusChangeActionType(soap, p, "ns3:StatusChangeActionType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum ns3__StatusChangeActionType * SOAP_FMAC4 soap_get_ns3__StatusChangeActionType(struct soap*, enum ns3__StatusChangeActionType *, const char*, const char*);

inline int soap_read_ns3__StatusChangeActionType(struct soap *soap, enum ns3__StatusChangeActionType *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_ns3__StatusChangeActionType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__StatusChangeActionType(struct soap *soap, const char *URL, enum ns3__StatusChangeActionType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__StatusChangeActionType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__StatusChangeActionType(struct soap *soap, enum ns3__StatusChangeActionType *p)
{
	if (soap_read_ns3__StatusChangeActionType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__AutoBillType_DEFINED
#define SOAP_TYPE_ns3__AutoBillType_DEFINED

inline void soap_default_ns3__AutoBillType(struct soap *soap, enum ns3__AutoBillType *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_ns3__AutoBillType
	*a = SOAP_DEFAULT_ns3__AutoBillType;
#else
	*a = (enum ns3__AutoBillType)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__AutoBillType(struct soap*, const char*, int, const enum ns3__AutoBillType *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns3__AutoBillType2s(struct soap*, enum ns3__AutoBillType);
SOAP_FMAC3 enum ns3__AutoBillType * SOAP_FMAC4 soap_in_ns3__AutoBillType(struct soap*, const char*, enum ns3__AutoBillType *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns3__AutoBillType(struct soap*, const char*, enum ns3__AutoBillType *);

SOAP_FMAC3 enum ns3__AutoBillType * SOAP_FMAC4 soap_new_ns3__AutoBillType(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns3__AutoBillType(struct soap*, const enum ns3__AutoBillType *, const char*, const char*);

inline int soap_write_ns3__AutoBillType(struct soap *soap, enum ns3__AutoBillType const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_ns3__AutoBillType(soap, p, "ns3:AutoBillType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_ns3__AutoBillType(struct soap *soap, const char *URL, enum ns3__AutoBillType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ns3__AutoBillType(soap, p, "ns3:AutoBillType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__AutoBillType(struct soap *soap, const char *URL, enum ns3__AutoBillType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ns3__AutoBillType(soap, p, "ns3:AutoBillType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum ns3__AutoBillType * SOAP_FMAC4 soap_get_ns3__AutoBillType(struct soap*, enum ns3__AutoBillType *, const char*, const char*);

inline int soap_read_ns3__AutoBillType(struct soap *soap, enum ns3__AutoBillType *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_ns3__AutoBillType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__AutoBillType(struct soap *soap, const char *URL, enum ns3__AutoBillType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__AutoBillType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__AutoBillType(struct soap *soap, enum ns3__AutoBillType *p)
{
	if (soap_read_ns3__AutoBillType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__FailedPaymentActionType_DEFINED
#define SOAP_TYPE_ns3__FailedPaymentActionType_DEFINED

inline void soap_default_ns3__FailedPaymentActionType(struct soap *soap, enum ns3__FailedPaymentActionType *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_ns3__FailedPaymentActionType
	*a = SOAP_DEFAULT_ns3__FailedPaymentActionType;
#else
	*a = (enum ns3__FailedPaymentActionType)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__FailedPaymentActionType(struct soap*, const char*, int, const enum ns3__FailedPaymentActionType *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns3__FailedPaymentActionType2s(struct soap*, enum ns3__FailedPaymentActionType);
SOAP_FMAC3 enum ns3__FailedPaymentActionType * SOAP_FMAC4 soap_in_ns3__FailedPaymentActionType(struct soap*, const char*, enum ns3__FailedPaymentActionType *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns3__FailedPaymentActionType(struct soap*, const char*, enum ns3__FailedPaymentActionType *);

SOAP_FMAC3 enum ns3__FailedPaymentActionType * SOAP_FMAC4 soap_new_ns3__FailedPaymentActionType(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns3__FailedPaymentActionType(struct soap*, const enum ns3__FailedPaymentActionType *, const char*, const char*);

inline int soap_write_ns3__FailedPaymentActionType(struct soap *soap, enum ns3__FailedPaymentActionType const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_ns3__FailedPaymentActionType(soap, p, "ns3:FailedPaymentActionType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_ns3__FailedPaymentActionType(struct soap *soap, const char *URL, enum ns3__FailedPaymentActionType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ns3__FailedPaymentActionType(soap, p, "ns3:FailedPaymentActionType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__FailedPaymentActionType(struct soap *soap, const char *URL, enum ns3__FailedPaymentActionType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ns3__FailedPaymentActionType(soap, p, "ns3:FailedPaymentActionType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum ns3__FailedPaymentActionType * SOAP_FMAC4 soap_get_ns3__FailedPaymentActionType(struct soap*, enum ns3__FailedPaymentActionType *, const char*, const char*);

inline int soap_read_ns3__FailedPaymentActionType(struct soap *soap, enum ns3__FailedPaymentActionType *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_ns3__FailedPaymentActionType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__FailedPaymentActionType(struct soap *soap, const char *URL, enum ns3__FailedPaymentActionType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__FailedPaymentActionType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__FailedPaymentActionType(struct soap *soap, enum ns3__FailedPaymentActionType *p)
{
	if (soap_read_ns3__FailedPaymentActionType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__RecurringPaymentsProfileStatusType_DEFINED
#define SOAP_TYPE_ns3__RecurringPaymentsProfileStatusType_DEFINED

inline void soap_default_ns3__RecurringPaymentsProfileStatusType(struct soap *soap, enum ns3__RecurringPaymentsProfileStatusType *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_ns3__RecurringPaymentsProfileStatusType
	*a = SOAP_DEFAULT_ns3__RecurringPaymentsProfileStatusType;
#else
	*a = (enum ns3__RecurringPaymentsProfileStatusType)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__RecurringPaymentsProfileStatusType(struct soap*, const char*, int, const enum ns3__RecurringPaymentsProfileStatusType *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns3__RecurringPaymentsProfileStatusType2s(struct soap*, enum ns3__RecurringPaymentsProfileStatusType);
SOAP_FMAC3 enum ns3__RecurringPaymentsProfileStatusType * SOAP_FMAC4 soap_in_ns3__RecurringPaymentsProfileStatusType(struct soap*, const char*, enum ns3__RecurringPaymentsProfileStatusType *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns3__RecurringPaymentsProfileStatusType(struct soap*, const char*, enum ns3__RecurringPaymentsProfileStatusType *);

SOAP_FMAC3 enum ns3__RecurringPaymentsProfileStatusType * SOAP_FMAC4 soap_new_ns3__RecurringPaymentsProfileStatusType(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns3__RecurringPaymentsProfileStatusType(struct soap*, const enum ns3__RecurringPaymentsProfileStatusType *, const char*, const char*);

inline int soap_write_ns3__RecurringPaymentsProfileStatusType(struct soap *soap, enum ns3__RecurringPaymentsProfileStatusType const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_ns3__RecurringPaymentsProfileStatusType(soap, p, "ns3:RecurringPaymentsProfileStatusType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_ns3__RecurringPaymentsProfileStatusType(struct soap *soap, const char *URL, enum ns3__RecurringPaymentsProfileStatusType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ns3__RecurringPaymentsProfileStatusType(soap, p, "ns3:RecurringPaymentsProfileStatusType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__RecurringPaymentsProfileStatusType(struct soap *soap, const char *URL, enum ns3__RecurringPaymentsProfileStatusType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ns3__RecurringPaymentsProfileStatusType(soap, p, "ns3:RecurringPaymentsProfileStatusType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum ns3__RecurringPaymentsProfileStatusType * SOAP_FMAC4 soap_get_ns3__RecurringPaymentsProfileStatusType(struct soap*, enum ns3__RecurringPaymentsProfileStatusType *, const char*, const char*);

inline int soap_read_ns3__RecurringPaymentsProfileStatusType(struct soap *soap, enum ns3__RecurringPaymentsProfileStatusType *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_ns3__RecurringPaymentsProfileStatusType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__RecurringPaymentsProfileStatusType(struct soap *soap, const char *URL, enum ns3__RecurringPaymentsProfileStatusType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__RecurringPaymentsProfileStatusType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__RecurringPaymentsProfileStatusType(struct soap *soap, enum ns3__RecurringPaymentsProfileStatusType *p)
{
	if (soap_read_ns3__RecurringPaymentsProfileStatusType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__DyneticClientType_DEFINED
#define SOAP_TYPE_ns3__DyneticClientType_DEFINED

inline void soap_default_ns3__DyneticClientType(struct soap *soap, enum ns3__DyneticClientType *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_ns3__DyneticClientType
	*a = SOAP_DEFAULT_ns3__DyneticClientType;
#else
	*a = (enum ns3__DyneticClientType)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__DyneticClientType(struct soap*, const char*, int, const enum ns3__DyneticClientType *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns3__DyneticClientType2s(struct soap*, enum ns3__DyneticClientType);
SOAP_FMAC3 enum ns3__DyneticClientType * SOAP_FMAC4 soap_in_ns3__DyneticClientType(struct soap*, const char*, enum ns3__DyneticClientType *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns3__DyneticClientType(struct soap*, const char*, enum ns3__DyneticClientType *);

SOAP_FMAC3 enum ns3__DyneticClientType * SOAP_FMAC4 soap_new_ns3__DyneticClientType(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns3__DyneticClientType(struct soap*, const enum ns3__DyneticClientType *, const char*, const char*);

inline int soap_write_ns3__DyneticClientType(struct soap *soap, enum ns3__DyneticClientType const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_ns3__DyneticClientType(soap, p, "ns3:DyneticClientType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_ns3__DyneticClientType(struct soap *soap, const char *URL, enum ns3__DyneticClientType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ns3__DyneticClientType(soap, p, "ns3:DyneticClientType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__DyneticClientType(struct soap *soap, const char *URL, enum ns3__DyneticClientType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ns3__DyneticClientType(soap, p, "ns3:DyneticClientType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum ns3__DyneticClientType * SOAP_FMAC4 soap_get_ns3__DyneticClientType(struct soap*, enum ns3__DyneticClientType *, const char*, const char*);

inline int soap_read_ns3__DyneticClientType(struct soap *soap, enum ns3__DyneticClientType *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_ns3__DyneticClientType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__DyneticClientType(struct soap *soap, const char *URL, enum ns3__DyneticClientType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__DyneticClientType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__DyneticClientType(struct soap *soap, enum ns3__DyneticClientType *p)
{
	if (soap_read_ns3__DyneticClientType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__EbayCheckoutType_DEFINED
#define SOAP_TYPE_ns3__EbayCheckoutType_DEFINED

inline void soap_default_ns3__EbayCheckoutType(struct soap *soap, enum ns3__EbayCheckoutType *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_ns3__EbayCheckoutType
	*a = SOAP_DEFAULT_ns3__EbayCheckoutType;
#else
	*a = (enum ns3__EbayCheckoutType)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__EbayCheckoutType(struct soap*, const char*, int, const enum ns3__EbayCheckoutType *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns3__EbayCheckoutType2s(struct soap*, enum ns3__EbayCheckoutType);
SOAP_FMAC3 enum ns3__EbayCheckoutType * SOAP_FMAC4 soap_in_ns3__EbayCheckoutType(struct soap*, const char*, enum ns3__EbayCheckoutType *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns3__EbayCheckoutType(struct soap*, const char*, enum ns3__EbayCheckoutType *);

SOAP_FMAC3 enum ns3__EbayCheckoutType * SOAP_FMAC4 soap_new_ns3__EbayCheckoutType(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns3__EbayCheckoutType(struct soap*, const enum ns3__EbayCheckoutType *, const char*, const char*);

inline int soap_write_ns3__EbayCheckoutType(struct soap *soap, enum ns3__EbayCheckoutType const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_ns3__EbayCheckoutType(soap, p, "ns3:EbayCheckoutType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_ns3__EbayCheckoutType(struct soap *soap, const char *URL, enum ns3__EbayCheckoutType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ns3__EbayCheckoutType(soap, p, "ns3:EbayCheckoutType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__EbayCheckoutType(struct soap *soap, const char *URL, enum ns3__EbayCheckoutType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ns3__EbayCheckoutType(soap, p, "ns3:EbayCheckoutType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum ns3__EbayCheckoutType * SOAP_FMAC4 soap_get_ns3__EbayCheckoutType(struct soap*, enum ns3__EbayCheckoutType *, const char*, const char*);

inline int soap_read_ns3__EbayCheckoutType(struct soap *soap, enum ns3__EbayCheckoutType *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_ns3__EbayCheckoutType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__EbayCheckoutType(struct soap *soap, const char *URL, enum ns3__EbayCheckoutType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__EbayCheckoutType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__EbayCheckoutType(struct soap *soap, enum ns3__EbayCheckoutType *p)
{
	if (soap_read_ns3__EbayCheckoutType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__APIAuthenticationType_DEFINED
#define SOAP_TYPE_ns3__APIAuthenticationType_DEFINED

inline void soap_default_ns3__APIAuthenticationType(struct soap *soap, enum ns3__APIAuthenticationType *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_ns3__APIAuthenticationType
	*a = SOAP_DEFAULT_ns3__APIAuthenticationType;
#else
	*a = (enum ns3__APIAuthenticationType)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__APIAuthenticationType(struct soap*, const char*, int, const enum ns3__APIAuthenticationType *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns3__APIAuthenticationType2s(struct soap*, enum ns3__APIAuthenticationType);
SOAP_FMAC3 enum ns3__APIAuthenticationType * SOAP_FMAC4 soap_in_ns3__APIAuthenticationType(struct soap*, const char*, enum ns3__APIAuthenticationType *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns3__APIAuthenticationType(struct soap*, const char*, enum ns3__APIAuthenticationType *);

SOAP_FMAC3 enum ns3__APIAuthenticationType * SOAP_FMAC4 soap_new_ns3__APIAuthenticationType(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns3__APIAuthenticationType(struct soap*, const enum ns3__APIAuthenticationType *, const char*, const char*);

inline int soap_write_ns3__APIAuthenticationType(struct soap *soap, enum ns3__APIAuthenticationType const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_ns3__APIAuthenticationType(soap, p, "ns3:APIAuthenticationType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_ns3__APIAuthenticationType(struct soap *soap, const char *URL, enum ns3__APIAuthenticationType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ns3__APIAuthenticationType(soap, p, "ns3:APIAuthenticationType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__APIAuthenticationType(struct soap *soap, const char *URL, enum ns3__APIAuthenticationType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ns3__APIAuthenticationType(soap, p, "ns3:APIAuthenticationType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum ns3__APIAuthenticationType * SOAP_FMAC4 soap_get_ns3__APIAuthenticationType(struct soap*, enum ns3__APIAuthenticationType *, const char*, const char*);

inline int soap_read_ns3__APIAuthenticationType(struct soap *soap, enum ns3__APIAuthenticationType *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_ns3__APIAuthenticationType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__APIAuthenticationType(struct soap *soap, const char *URL, enum ns3__APIAuthenticationType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__APIAuthenticationType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__APIAuthenticationType(struct soap *soap, enum ns3__APIAuthenticationType *p)
{
	if (soap_read_ns3__APIAuthenticationType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__UserWithdrawalLimitTypeType_DEFINED
#define SOAP_TYPE_ns3__UserWithdrawalLimitTypeType_DEFINED

inline void soap_default_ns3__UserWithdrawalLimitTypeType(struct soap *soap, enum ns3__UserWithdrawalLimitTypeType *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_ns3__UserWithdrawalLimitTypeType
	*a = SOAP_DEFAULT_ns3__UserWithdrawalLimitTypeType;
#else
	*a = (enum ns3__UserWithdrawalLimitTypeType)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__UserWithdrawalLimitTypeType(struct soap*, const char*, int, const enum ns3__UserWithdrawalLimitTypeType *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns3__UserWithdrawalLimitTypeType2s(struct soap*, enum ns3__UserWithdrawalLimitTypeType);
SOAP_FMAC3 enum ns3__UserWithdrawalLimitTypeType * SOAP_FMAC4 soap_in_ns3__UserWithdrawalLimitTypeType(struct soap*, const char*, enum ns3__UserWithdrawalLimitTypeType *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns3__UserWithdrawalLimitTypeType(struct soap*, const char*, enum ns3__UserWithdrawalLimitTypeType *);

SOAP_FMAC3 enum ns3__UserWithdrawalLimitTypeType * SOAP_FMAC4 soap_new_ns3__UserWithdrawalLimitTypeType(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns3__UserWithdrawalLimitTypeType(struct soap*, const enum ns3__UserWithdrawalLimitTypeType *, const char*, const char*);

inline int soap_write_ns3__UserWithdrawalLimitTypeType(struct soap *soap, enum ns3__UserWithdrawalLimitTypeType const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_ns3__UserWithdrawalLimitTypeType(soap, p, "ns3:UserWithdrawalLimitTypeType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_ns3__UserWithdrawalLimitTypeType(struct soap *soap, const char *URL, enum ns3__UserWithdrawalLimitTypeType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ns3__UserWithdrawalLimitTypeType(soap, p, "ns3:UserWithdrawalLimitTypeType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__UserWithdrawalLimitTypeType(struct soap *soap, const char *URL, enum ns3__UserWithdrawalLimitTypeType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ns3__UserWithdrawalLimitTypeType(soap, p, "ns3:UserWithdrawalLimitTypeType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum ns3__UserWithdrawalLimitTypeType * SOAP_FMAC4 soap_get_ns3__UserWithdrawalLimitTypeType(struct soap*, enum ns3__UserWithdrawalLimitTypeType *, const char*, const char*);

inline int soap_read_ns3__UserWithdrawalLimitTypeType(struct soap *soap, enum ns3__UserWithdrawalLimitTypeType *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_ns3__UserWithdrawalLimitTypeType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__UserWithdrawalLimitTypeType(struct soap *soap, const char *URL, enum ns3__UserWithdrawalLimitTypeType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__UserWithdrawalLimitTypeType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__UserWithdrawalLimitTypeType(struct soap *soap, enum ns3__UserWithdrawalLimitTypeType *p)
{
	if (soap_read_ns3__UserWithdrawalLimitTypeType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__BoardingStatusType_DEFINED
#define SOAP_TYPE_ns3__BoardingStatusType_DEFINED

inline void soap_default_ns3__BoardingStatusType(struct soap *soap, enum ns3__BoardingStatusType *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_ns3__BoardingStatusType
	*a = SOAP_DEFAULT_ns3__BoardingStatusType;
#else
	*a = (enum ns3__BoardingStatusType)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__BoardingStatusType(struct soap*, const char*, int, const enum ns3__BoardingStatusType *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns3__BoardingStatusType2s(struct soap*, enum ns3__BoardingStatusType);
SOAP_FMAC3 enum ns3__BoardingStatusType * SOAP_FMAC4 soap_in_ns3__BoardingStatusType(struct soap*, const char*, enum ns3__BoardingStatusType *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns3__BoardingStatusType(struct soap*, const char*, enum ns3__BoardingStatusType *);

SOAP_FMAC3 enum ns3__BoardingStatusType * SOAP_FMAC4 soap_new_ns3__BoardingStatusType(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns3__BoardingStatusType(struct soap*, const enum ns3__BoardingStatusType *, const char*, const char*);

inline int soap_write_ns3__BoardingStatusType(struct soap *soap, enum ns3__BoardingStatusType const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_ns3__BoardingStatusType(soap, p, "ns3:BoardingStatusType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_ns3__BoardingStatusType(struct soap *soap, const char *URL, enum ns3__BoardingStatusType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ns3__BoardingStatusType(soap, p, "ns3:BoardingStatusType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__BoardingStatusType(struct soap *soap, const char *URL, enum ns3__BoardingStatusType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ns3__BoardingStatusType(soap, p, "ns3:BoardingStatusType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum ns3__BoardingStatusType * SOAP_FMAC4 soap_get_ns3__BoardingStatusType(struct soap*, enum ns3__BoardingStatusType *, const char*, const char*);

inline int soap_read_ns3__BoardingStatusType(struct soap *soap, enum ns3__BoardingStatusType *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_ns3__BoardingStatusType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__BoardingStatusType(struct soap *soap, const char *URL, enum ns3__BoardingStatusType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__BoardingStatusType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__BoardingStatusType(struct soap *soap, enum ns3__BoardingStatusType *p)
{
	if (soap_read_ns3__BoardingStatusType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__BankAccountTypeType_DEFINED
#define SOAP_TYPE_ns3__BankAccountTypeType_DEFINED

inline void soap_default_ns3__BankAccountTypeType(struct soap *soap, enum ns3__BankAccountTypeType *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_ns3__BankAccountTypeType
	*a = SOAP_DEFAULT_ns3__BankAccountTypeType;
#else
	*a = (enum ns3__BankAccountTypeType)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__BankAccountTypeType(struct soap*, const char*, int, const enum ns3__BankAccountTypeType *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns3__BankAccountTypeType2s(struct soap*, enum ns3__BankAccountTypeType);
SOAP_FMAC3 enum ns3__BankAccountTypeType * SOAP_FMAC4 soap_in_ns3__BankAccountTypeType(struct soap*, const char*, enum ns3__BankAccountTypeType *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns3__BankAccountTypeType(struct soap*, const char*, enum ns3__BankAccountTypeType *);

SOAP_FMAC3 enum ns3__BankAccountTypeType * SOAP_FMAC4 soap_new_ns3__BankAccountTypeType(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns3__BankAccountTypeType(struct soap*, const enum ns3__BankAccountTypeType *, const char*, const char*);

inline int soap_write_ns3__BankAccountTypeType(struct soap *soap, enum ns3__BankAccountTypeType const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_ns3__BankAccountTypeType(soap, p, "ns3:BankAccountTypeType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_ns3__BankAccountTypeType(struct soap *soap, const char *URL, enum ns3__BankAccountTypeType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ns3__BankAccountTypeType(soap, p, "ns3:BankAccountTypeType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__BankAccountTypeType(struct soap *soap, const char *URL, enum ns3__BankAccountTypeType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ns3__BankAccountTypeType(soap, p, "ns3:BankAccountTypeType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum ns3__BankAccountTypeType * SOAP_FMAC4 soap_get_ns3__BankAccountTypeType(struct soap*, enum ns3__BankAccountTypeType *, const char*, const char*);

inline int soap_read_ns3__BankAccountTypeType(struct soap *soap, enum ns3__BankAccountTypeType *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_ns3__BankAccountTypeType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__BankAccountTypeType(struct soap *soap, const char *URL, enum ns3__BankAccountTypeType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__BankAccountTypeType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__BankAccountTypeType(struct soap *soap, enum ns3__BankAccountTypeType *p)
{
	if (soap_read_ns3__BankAccountTypeType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__PercentageRevenueFromOnlineSalesType_DEFINED
#define SOAP_TYPE_ns3__PercentageRevenueFromOnlineSalesType_DEFINED

inline void soap_default_ns3__PercentageRevenueFromOnlineSalesType(struct soap *soap, enum ns3__PercentageRevenueFromOnlineSalesType *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_ns3__PercentageRevenueFromOnlineSalesType
	*a = SOAP_DEFAULT_ns3__PercentageRevenueFromOnlineSalesType;
#else
	*a = (enum ns3__PercentageRevenueFromOnlineSalesType)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__PercentageRevenueFromOnlineSalesType(struct soap*, const char*, int, const enum ns3__PercentageRevenueFromOnlineSalesType *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns3__PercentageRevenueFromOnlineSalesType2s(struct soap*, enum ns3__PercentageRevenueFromOnlineSalesType);
SOAP_FMAC3 enum ns3__PercentageRevenueFromOnlineSalesType * SOAP_FMAC4 soap_in_ns3__PercentageRevenueFromOnlineSalesType(struct soap*, const char*, enum ns3__PercentageRevenueFromOnlineSalesType *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns3__PercentageRevenueFromOnlineSalesType(struct soap*, const char*, enum ns3__PercentageRevenueFromOnlineSalesType *);

SOAP_FMAC3 enum ns3__PercentageRevenueFromOnlineSalesType * SOAP_FMAC4 soap_new_ns3__PercentageRevenueFromOnlineSalesType(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns3__PercentageRevenueFromOnlineSalesType(struct soap*, const enum ns3__PercentageRevenueFromOnlineSalesType *, const char*, const char*);

inline int soap_write_ns3__PercentageRevenueFromOnlineSalesType(struct soap *soap, enum ns3__PercentageRevenueFromOnlineSalesType const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_ns3__PercentageRevenueFromOnlineSalesType(soap, p, "ns3:PercentageRevenueFromOnlineSalesType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_ns3__PercentageRevenueFromOnlineSalesType(struct soap *soap, const char *URL, enum ns3__PercentageRevenueFromOnlineSalesType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ns3__PercentageRevenueFromOnlineSalesType(soap, p, "ns3:PercentageRevenueFromOnlineSalesType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__PercentageRevenueFromOnlineSalesType(struct soap *soap, const char *URL, enum ns3__PercentageRevenueFromOnlineSalesType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ns3__PercentageRevenueFromOnlineSalesType(soap, p, "ns3:PercentageRevenueFromOnlineSalesType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum ns3__PercentageRevenueFromOnlineSalesType * SOAP_FMAC4 soap_get_ns3__PercentageRevenueFromOnlineSalesType(struct soap*, enum ns3__PercentageRevenueFromOnlineSalesType *, const char*, const char*);

inline int soap_read_ns3__PercentageRevenueFromOnlineSalesType(struct soap *soap, enum ns3__PercentageRevenueFromOnlineSalesType *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_ns3__PercentageRevenueFromOnlineSalesType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__PercentageRevenueFromOnlineSalesType(struct soap *soap, const char *URL, enum ns3__PercentageRevenueFromOnlineSalesType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__PercentageRevenueFromOnlineSalesType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__PercentageRevenueFromOnlineSalesType(struct soap *soap, enum ns3__PercentageRevenueFromOnlineSalesType *p)
{
	if (soap_read_ns3__PercentageRevenueFromOnlineSalesType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__SalesVenueType_DEFINED
#define SOAP_TYPE_ns3__SalesVenueType_DEFINED

inline void soap_default_ns3__SalesVenueType(struct soap *soap, enum ns3__SalesVenueType *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_ns3__SalesVenueType
	*a = SOAP_DEFAULT_ns3__SalesVenueType;
#else
	*a = (enum ns3__SalesVenueType)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__SalesVenueType(struct soap*, const char*, int, const enum ns3__SalesVenueType *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns3__SalesVenueType2s(struct soap*, enum ns3__SalesVenueType);
SOAP_FMAC3 enum ns3__SalesVenueType * SOAP_FMAC4 soap_in_ns3__SalesVenueType(struct soap*, const char*, enum ns3__SalesVenueType *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns3__SalesVenueType(struct soap*, const char*, enum ns3__SalesVenueType *);

SOAP_FMAC3 enum ns3__SalesVenueType * SOAP_FMAC4 soap_new_ns3__SalesVenueType(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns3__SalesVenueType(struct soap*, const enum ns3__SalesVenueType *, const char*, const char*);

inline int soap_write_ns3__SalesVenueType(struct soap *soap, enum ns3__SalesVenueType const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_ns3__SalesVenueType(soap, p, "ns3:SalesVenueType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_ns3__SalesVenueType(struct soap *soap, const char *URL, enum ns3__SalesVenueType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ns3__SalesVenueType(soap, p, "ns3:SalesVenueType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__SalesVenueType(struct soap *soap, const char *URL, enum ns3__SalesVenueType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ns3__SalesVenueType(soap, p, "ns3:SalesVenueType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum ns3__SalesVenueType * SOAP_FMAC4 soap_get_ns3__SalesVenueType(struct soap*, enum ns3__SalesVenueType *, const char*, const char*);

inline int soap_read_ns3__SalesVenueType(struct soap *soap, enum ns3__SalesVenueType *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_ns3__SalesVenueType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__SalesVenueType(struct soap *soap, const char *URL, enum ns3__SalesVenueType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__SalesVenueType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__SalesVenueType(struct soap *soap, enum ns3__SalesVenueType *p)
{
	if (soap_read_ns3__SalesVenueType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__AverageMonthlyVolumeType_DEFINED
#define SOAP_TYPE_ns3__AverageMonthlyVolumeType_DEFINED

inline void soap_default_ns3__AverageMonthlyVolumeType(struct soap *soap, enum ns3__AverageMonthlyVolumeType *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_ns3__AverageMonthlyVolumeType
	*a = SOAP_DEFAULT_ns3__AverageMonthlyVolumeType;
#else
	*a = (enum ns3__AverageMonthlyVolumeType)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__AverageMonthlyVolumeType(struct soap*, const char*, int, const enum ns3__AverageMonthlyVolumeType *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns3__AverageMonthlyVolumeType2s(struct soap*, enum ns3__AverageMonthlyVolumeType);
SOAP_FMAC3 enum ns3__AverageMonthlyVolumeType * SOAP_FMAC4 soap_in_ns3__AverageMonthlyVolumeType(struct soap*, const char*, enum ns3__AverageMonthlyVolumeType *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns3__AverageMonthlyVolumeType(struct soap*, const char*, enum ns3__AverageMonthlyVolumeType *);

SOAP_FMAC3 enum ns3__AverageMonthlyVolumeType * SOAP_FMAC4 soap_new_ns3__AverageMonthlyVolumeType(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns3__AverageMonthlyVolumeType(struct soap*, const enum ns3__AverageMonthlyVolumeType *, const char*, const char*);

inline int soap_write_ns3__AverageMonthlyVolumeType(struct soap *soap, enum ns3__AverageMonthlyVolumeType const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_ns3__AverageMonthlyVolumeType(soap, p, "ns3:AverageMonthlyVolumeType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_ns3__AverageMonthlyVolumeType(struct soap *soap, const char *URL, enum ns3__AverageMonthlyVolumeType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ns3__AverageMonthlyVolumeType(soap, p, "ns3:AverageMonthlyVolumeType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__AverageMonthlyVolumeType(struct soap *soap, const char *URL, enum ns3__AverageMonthlyVolumeType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ns3__AverageMonthlyVolumeType(soap, p, "ns3:AverageMonthlyVolumeType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum ns3__AverageMonthlyVolumeType * SOAP_FMAC4 soap_get_ns3__AverageMonthlyVolumeType(struct soap*, enum ns3__AverageMonthlyVolumeType *, const char*, const char*);

inline int soap_read_ns3__AverageMonthlyVolumeType(struct soap *soap, enum ns3__AverageMonthlyVolumeType *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_ns3__AverageMonthlyVolumeType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__AverageMonthlyVolumeType(struct soap *soap, const char *URL, enum ns3__AverageMonthlyVolumeType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__AverageMonthlyVolumeType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__AverageMonthlyVolumeType(struct soap *soap, enum ns3__AverageMonthlyVolumeType *p)
{
	if (soap_read_ns3__AverageMonthlyVolumeType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__AverageTransactionPriceType_DEFINED
#define SOAP_TYPE_ns3__AverageTransactionPriceType_DEFINED

inline void soap_default_ns3__AverageTransactionPriceType(struct soap *soap, enum ns3__AverageTransactionPriceType *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_ns3__AverageTransactionPriceType
	*a = SOAP_DEFAULT_ns3__AverageTransactionPriceType;
#else
	*a = (enum ns3__AverageTransactionPriceType)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__AverageTransactionPriceType(struct soap*, const char*, int, const enum ns3__AverageTransactionPriceType *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns3__AverageTransactionPriceType2s(struct soap*, enum ns3__AverageTransactionPriceType);
SOAP_FMAC3 enum ns3__AverageTransactionPriceType * SOAP_FMAC4 soap_in_ns3__AverageTransactionPriceType(struct soap*, const char*, enum ns3__AverageTransactionPriceType *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns3__AverageTransactionPriceType(struct soap*, const char*, enum ns3__AverageTransactionPriceType *);

SOAP_FMAC3 enum ns3__AverageTransactionPriceType * SOAP_FMAC4 soap_new_ns3__AverageTransactionPriceType(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns3__AverageTransactionPriceType(struct soap*, const enum ns3__AverageTransactionPriceType *, const char*, const char*);

inline int soap_write_ns3__AverageTransactionPriceType(struct soap *soap, enum ns3__AverageTransactionPriceType const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_ns3__AverageTransactionPriceType(soap, p, "ns3:AverageTransactionPriceType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_ns3__AverageTransactionPriceType(struct soap *soap, const char *URL, enum ns3__AverageTransactionPriceType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ns3__AverageTransactionPriceType(soap, p, "ns3:AverageTransactionPriceType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__AverageTransactionPriceType(struct soap *soap, const char *URL, enum ns3__AverageTransactionPriceType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ns3__AverageTransactionPriceType(soap, p, "ns3:AverageTransactionPriceType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum ns3__AverageTransactionPriceType * SOAP_FMAC4 soap_get_ns3__AverageTransactionPriceType(struct soap*, enum ns3__AverageTransactionPriceType *, const char*, const char*);

inline int soap_read_ns3__AverageTransactionPriceType(struct soap *soap, enum ns3__AverageTransactionPriceType *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_ns3__AverageTransactionPriceType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__AverageTransactionPriceType(struct soap *soap, const char *URL, enum ns3__AverageTransactionPriceType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__AverageTransactionPriceType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__AverageTransactionPriceType(struct soap *soap, enum ns3__AverageTransactionPriceType *p)
{
	if (soap_read_ns3__AverageTransactionPriceType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__BusinessSubCategoryType_DEFINED
#define SOAP_TYPE_ns3__BusinessSubCategoryType_DEFINED

inline void soap_default_ns3__BusinessSubCategoryType(struct soap *soap, enum ns3__BusinessSubCategoryType *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_ns3__BusinessSubCategoryType
	*a = SOAP_DEFAULT_ns3__BusinessSubCategoryType;
#else
	*a = (enum ns3__BusinessSubCategoryType)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__BusinessSubCategoryType(struct soap*, const char*, int, const enum ns3__BusinessSubCategoryType *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns3__BusinessSubCategoryType2s(struct soap*, enum ns3__BusinessSubCategoryType);
SOAP_FMAC3 enum ns3__BusinessSubCategoryType * SOAP_FMAC4 soap_in_ns3__BusinessSubCategoryType(struct soap*, const char*, enum ns3__BusinessSubCategoryType *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns3__BusinessSubCategoryType(struct soap*, const char*, enum ns3__BusinessSubCategoryType *);

SOAP_FMAC3 enum ns3__BusinessSubCategoryType * SOAP_FMAC4 soap_new_ns3__BusinessSubCategoryType(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns3__BusinessSubCategoryType(struct soap*, const enum ns3__BusinessSubCategoryType *, const char*, const char*);

inline int soap_write_ns3__BusinessSubCategoryType(struct soap *soap, enum ns3__BusinessSubCategoryType const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_ns3__BusinessSubCategoryType(soap, p, "ns3:BusinessSubCategoryType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_ns3__BusinessSubCategoryType(struct soap *soap, const char *URL, enum ns3__BusinessSubCategoryType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ns3__BusinessSubCategoryType(soap, p, "ns3:BusinessSubCategoryType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__BusinessSubCategoryType(struct soap *soap, const char *URL, enum ns3__BusinessSubCategoryType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ns3__BusinessSubCategoryType(soap, p, "ns3:BusinessSubCategoryType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum ns3__BusinessSubCategoryType * SOAP_FMAC4 soap_get_ns3__BusinessSubCategoryType(struct soap*, enum ns3__BusinessSubCategoryType *, const char*, const char*);

inline int soap_read_ns3__BusinessSubCategoryType(struct soap *soap, enum ns3__BusinessSubCategoryType *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_ns3__BusinessSubCategoryType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__BusinessSubCategoryType(struct soap *soap, const char *URL, enum ns3__BusinessSubCategoryType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__BusinessSubCategoryType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__BusinessSubCategoryType(struct soap *soap, enum ns3__BusinessSubCategoryType *p)
{
	if (soap_read_ns3__BusinessSubCategoryType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__BusinessCategoryType_DEFINED
#define SOAP_TYPE_ns3__BusinessCategoryType_DEFINED

inline void soap_default_ns3__BusinessCategoryType(struct soap *soap, enum ns3__BusinessCategoryType *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_ns3__BusinessCategoryType
	*a = SOAP_DEFAULT_ns3__BusinessCategoryType;
#else
	*a = (enum ns3__BusinessCategoryType)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__BusinessCategoryType(struct soap*, const char*, int, const enum ns3__BusinessCategoryType *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns3__BusinessCategoryType2s(struct soap*, enum ns3__BusinessCategoryType);
SOAP_FMAC3 enum ns3__BusinessCategoryType * SOAP_FMAC4 soap_in_ns3__BusinessCategoryType(struct soap*, const char*, enum ns3__BusinessCategoryType *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns3__BusinessCategoryType(struct soap*, const char*, enum ns3__BusinessCategoryType *);

SOAP_FMAC3 enum ns3__BusinessCategoryType * SOAP_FMAC4 soap_new_ns3__BusinessCategoryType(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns3__BusinessCategoryType(struct soap*, const enum ns3__BusinessCategoryType *, const char*, const char*);

inline int soap_write_ns3__BusinessCategoryType(struct soap *soap, enum ns3__BusinessCategoryType const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_ns3__BusinessCategoryType(soap, p, "ns3:BusinessCategoryType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_ns3__BusinessCategoryType(struct soap *soap, const char *URL, enum ns3__BusinessCategoryType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ns3__BusinessCategoryType(soap, p, "ns3:BusinessCategoryType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__BusinessCategoryType(struct soap *soap, const char *URL, enum ns3__BusinessCategoryType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ns3__BusinessCategoryType(soap, p, "ns3:BusinessCategoryType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum ns3__BusinessCategoryType * SOAP_FMAC4 soap_get_ns3__BusinessCategoryType(struct soap*, enum ns3__BusinessCategoryType *, const char*, const char*);

inline int soap_read_ns3__BusinessCategoryType(struct soap *soap, enum ns3__BusinessCategoryType *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_ns3__BusinessCategoryType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__BusinessCategoryType(struct soap *soap, const char *URL, enum ns3__BusinessCategoryType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__BusinessCategoryType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__BusinessCategoryType(struct soap *soap, enum ns3__BusinessCategoryType *p)
{
	if (soap_read_ns3__BusinessCategoryType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__BusinessTypeType_DEFINED
#define SOAP_TYPE_ns3__BusinessTypeType_DEFINED

inline void soap_default_ns3__BusinessTypeType(struct soap *soap, enum ns3__BusinessTypeType *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_ns3__BusinessTypeType
	*a = SOAP_DEFAULT_ns3__BusinessTypeType;
#else
	*a = (enum ns3__BusinessTypeType)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__BusinessTypeType(struct soap*, const char*, int, const enum ns3__BusinessTypeType *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns3__BusinessTypeType2s(struct soap*, enum ns3__BusinessTypeType);
SOAP_FMAC3 enum ns3__BusinessTypeType * SOAP_FMAC4 soap_in_ns3__BusinessTypeType(struct soap*, const char*, enum ns3__BusinessTypeType *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns3__BusinessTypeType(struct soap*, const char*, enum ns3__BusinessTypeType *);

SOAP_FMAC3 enum ns3__BusinessTypeType * SOAP_FMAC4 soap_new_ns3__BusinessTypeType(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns3__BusinessTypeType(struct soap*, const enum ns3__BusinessTypeType *, const char*, const char*);

inline int soap_write_ns3__BusinessTypeType(struct soap *soap, enum ns3__BusinessTypeType const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_ns3__BusinessTypeType(soap, p, "ns3:BusinessTypeType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_ns3__BusinessTypeType(struct soap *soap, const char *URL, enum ns3__BusinessTypeType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ns3__BusinessTypeType(soap, p, "ns3:BusinessTypeType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__BusinessTypeType(struct soap *soap, const char *URL, enum ns3__BusinessTypeType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ns3__BusinessTypeType(soap, p, "ns3:BusinessTypeType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum ns3__BusinessTypeType * SOAP_FMAC4 soap_get_ns3__BusinessTypeType(struct soap*, enum ns3__BusinessTypeType *, const char*, const char*);

inline int soap_read_ns3__BusinessTypeType(struct soap *soap, enum ns3__BusinessTypeType *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_ns3__BusinessTypeType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__BusinessTypeType(struct soap *soap, const char *URL, enum ns3__BusinessTypeType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__BusinessTypeType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__BusinessTypeType(struct soap *soap, enum ns3__BusinessTypeType *p)
{
	if (soap_read_ns3__BusinessTypeType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__MarketingCategoryType_DEFINED
#define SOAP_TYPE_ns3__MarketingCategoryType_DEFINED

inline void soap_default_ns3__MarketingCategoryType(struct soap *soap, enum ns3__MarketingCategoryType *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_ns3__MarketingCategoryType
	*a = SOAP_DEFAULT_ns3__MarketingCategoryType;
#else
	*a = (enum ns3__MarketingCategoryType)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__MarketingCategoryType(struct soap*, const char*, int, const enum ns3__MarketingCategoryType *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns3__MarketingCategoryType2s(struct soap*, enum ns3__MarketingCategoryType);
SOAP_FMAC3 enum ns3__MarketingCategoryType * SOAP_FMAC4 soap_in_ns3__MarketingCategoryType(struct soap*, const char*, enum ns3__MarketingCategoryType *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns3__MarketingCategoryType(struct soap*, const char*, enum ns3__MarketingCategoryType *);

SOAP_FMAC3 enum ns3__MarketingCategoryType * SOAP_FMAC4 soap_new_ns3__MarketingCategoryType(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns3__MarketingCategoryType(struct soap*, const enum ns3__MarketingCategoryType *, const char*, const char*);

inline int soap_write_ns3__MarketingCategoryType(struct soap *soap, enum ns3__MarketingCategoryType const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_ns3__MarketingCategoryType(soap, p, "ns3:MarketingCategoryType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_ns3__MarketingCategoryType(struct soap *soap, const char *URL, enum ns3__MarketingCategoryType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ns3__MarketingCategoryType(soap, p, "ns3:MarketingCategoryType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__MarketingCategoryType(struct soap *soap, const char *URL, enum ns3__MarketingCategoryType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ns3__MarketingCategoryType(soap, p, "ns3:MarketingCategoryType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum ns3__MarketingCategoryType * SOAP_FMAC4 soap_get_ns3__MarketingCategoryType(struct soap*, enum ns3__MarketingCategoryType *, const char*, const char*);

inline int soap_read_ns3__MarketingCategoryType(struct soap *soap, enum ns3__MarketingCategoryType *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_ns3__MarketingCategoryType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__MarketingCategoryType(struct soap *soap, const char *URL, enum ns3__MarketingCategoryType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__MarketingCategoryType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__MarketingCategoryType(struct soap *soap, enum ns3__MarketingCategoryType *p)
{
	if (soap_read_ns3__MarketingCategoryType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__MobilePaymentCodeType_DEFINED
#define SOAP_TYPE_ns3__MobilePaymentCodeType_DEFINED

inline void soap_default_ns3__MobilePaymentCodeType(struct soap *soap, enum ns3__MobilePaymentCodeType *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_ns3__MobilePaymentCodeType
	*a = SOAP_DEFAULT_ns3__MobilePaymentCodeType;
#else
	*a = (enum ns3__MobilePaymentCodeType)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__MobilePaymentCodeType(struct soap*, const char*, int, const enum ns3__MobilePaymentCodeType *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns3__MobilePaymentCodeType2s(struct soap*, enum ns3__MobilePaymentCodeType);
SOAP_FMAC3 enum ns3__MobilePaymentCodeType * SOAP_FMAC4 soap_in_ns3__MobilePaymentCodeType(struct soap*, const char*, enum ns3__MobilePaymentCodeType *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns3__MobilePaymentCodeType(struct soap*, const char*, enum ns3__MobilePaymentCodeType *);

SOAP_FMAC3 enum ns3__MobilePaymentCodeType * SOAP_FMAC4 soap_new_ns3__MobilePaymentCodeType(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns3__MobilePaymentCodeType(struct soap*, const enum ns3__MobilePaymentCodeType *, const char*, const char*);

inline int soap_write_ns3__MobilePaymentCodeType(struct soap *soap, enum ns3__MobilePaymentCodeType const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_ns3__MobilePaymentCodeType(soap, p, "ns3:MobilePaymentCodeType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_ns3__MobilePaymentCodeType(struct soap *soap, const char *URL, enum ns3__MobilePaymentCodeType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ns3__MobilePaymentCodeType(soap, p, "ns3:MobilePaymentCodeType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__MobilePaymentCodeType(struct soap *soap, const char *URL, enum ns3__MobilePaymentCodeType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ns3__MobilePaymentCodeType(soap, p, "ns3:MobilePaymentCodeType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum ns3__MobilePaymentCodeType * SOAP_FMAC4 soap_get_ns3__MobilePaymentCodeType(struct soap*, enum ns3__MobilePaymentCodeType *, const char*, const char*);

inline int soap_read_ns3__MobilePaymentCodeType(struct soap *soap, enum ns3__MobilePaymentCodeType *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_ns3__MobilePaymentCodeType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__MobilePaymentCodeType(struct soap *soap, const char *URL, enum ns3__MobilePaymentCodeType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__MobilePaymentCodeType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__MobilePaymentCodeType(struct soap *soap, enum ns3__MobilePaymentCodeType *p)
{
	if (soap_read_ns3__MobilePaymentCodeType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__MobileRecipientCodeType_DEFINED
#define SOAP_TYPE_ns3__MobileRecipientCodeType_DEFINED

inline void soap_default_ns3__MobileRecipientCodeType(struct soap *soap, enum ns3__MobileRecipientCodeType *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_ns3__MobileRecipientCodeType
	*a = SOAP_DEFAULT_ns3__MobileRecipientCodeType;
#else
	*a = (enum ns3__MobileRecipientCodeType)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__MobileRecipientCodeType(struct soap*, const char*, int, const enum ns3__MobileRecipientCodeType *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns3__MobileRecipientCodeType2s(struct soap*, enum ns3__MobileRecipientCodeType);
SOAP_FMAC3 enum ns3__MobileRecipientCodeType * SOAP_FMAC4 soap_in_ns3__MobileRecipientCodeType(struct soap*, const char*, enum ns3__MobileRecipientCodeType *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns3__MobileRecipientCodeType(struct soap*, const char*, enum ns3__MobileRecipientCodeType *);

SOAP_FMAC3 enum ns3__MobileRecipientCodeType * SOAP_FMAC4 soap_new_ns3__MobileRecipientCodeType(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns3__MobileRecipientCodeType(struct soap*, const enum ns3__MobileRecipientCodeType *, const char*, const char*);

inline int soap_write_ns3__MobileRecipientCodeType(struct soap *soap, enum ns3__MobileRecipientCodeType const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_ns3__MobileRecipientCodeType(soap, p, "ns3:MobileRecipientCodeType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_ns3__MobileRecipientCodeType(struct soap *soap, const char *URL, enum ns3__MobileRecipientCodeType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ns3__MobileRecipientCodeType(soap, p, "ns3:MobileRecipientCodeType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__MobileRecipientCodeType(struct soap *soap, const char *URL, enum ns3__MobileRecipientCodeType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ns3__MobileRecipientCodeType(soap, p, "ns3:MobileRecipientCodeType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum ns3__MobileRecipientCodeType * SOAP_FMAC4 soap_get_ns3__MobileRecipientCodeType(struct soap*, enum ns3__MobileRecipientCodeType *, const char*, const char*);

inline int soap_read_ns3__MobileRecipientCodeType(struct soap *soap, enum ns3__MobileRecipientCodeType *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_ns3__MobileRecipientCodeType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__MobileRecipientCodeType(struct soap *soap, const char *URL, enum ns3__MobileRecipientCodeType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__MobileRecipientCodeType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__MobileRecipientCodeType(struct soap *soap, enum ns3__MobileRecipientCodeType *p)
{
	if (soap_read_ns3__MobileRecipientCodeType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__TransactionEntityType_DEFINED
#define SOAP_TYPE_ns3__TransactionEntityType_DEFINED

inline void soap_default_ns3__TransactionEntityType(struct soap *soap, enum ns3__TransactionEntityType *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_ns3__TransactionEntityType
	*a = SOAP_DEFAULT_ns3__TransactionEntityType;
#else
	*a = (enum ns3__TransactionEntityType)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__TransactionEntityType(struct soap*, const char*, int, const enum ns3__TransactionEntityType *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns3__TransactionEntityType2s(struct soap*, enum ns3__TransactionEntityType);
SOAP_FMAC3 enum ns3__TransactionEntityType * SOAP_FMAC4 soap_in_ns3__TransactionEntityType(struct soap*, const char*, enum ns3__TransactionEntityType *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns3__TransactionEntityType(struct soap*, const char*, enum ns3__TransactionEntityType *);

SOAP_FMAC3 enum ns3__TransactionEntityType * SOAP_FMAC4 soap_new_ns3__TransactionEntityType(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns3__TransactionEntityType(struct soap*, const enum ns3__TransactionEntityType *, const char*, const char*);

inline int soap_write_ns3__TransactionEntityType(struct soap *soap, enum ns3__TransactionEntityType const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_ns3__TransactionEntityType(soap, p, "ns3:TransactionEntityType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_ns3__TransactionEntityType(struct soap *soap, const char *URL, enum ns3__TransactionEntityType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ns3__TransactionEntityType(soap, p, "ns3:TransactionEntityType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__TransactionEntityType(struct soap *soap, const char *URL, enum ns3__TransactionEntityType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ns3__TransactionEntityType(soap, p, "ns3:TransactionEntityType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum ns3__TransactionEntityType * SOAP_FMAC4 soap_get_ns3__TransactionEntityType(struct soap*, enum ns3__TransactionEntityType *, const char*, const char*);

inline int soap_read_ns3__TransactionEntityType(struct soap *soap, enum ns3__TransactionEntityType *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_ns3__TransactionEntityType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__TransactionEntityType(struct soap *soap, const char *URL, enum ns3__TransactionEntityType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__TransactionEntityType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__TransactionEntityType(struct soap *soap, enum ns3__TransactionEntityType *p)
{
	if (soap_read_ns3__TransactionEntityType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__CompleteCodeType_DEFINED
#define SOAP_TYPE_ns3__CompleteCodeType_DEFINED

inline void soap_default_ns3__CompleteCodeType(struct soap *soap, enum ns3__CompleteCodeType *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_ns3__CompleteCodeType
	*a = SOAP_DEFAULT_ns3__CompleteCodeType;
#else
	*a = (enum ns3__CompleteCodeType)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__CompleteCodeType(struct soap*, const char*, int, const enum ns3__CompleteCodeType *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns3__CompleteCodeType2s(struct soap*, enum ns3__CompleteCodeType);
SOAP_FMAC3 enum ns3__CompleteCodeType * SOAP_FMAC4 soap_in_ns3__CompleteCodeType(struct soap*, const char*, enum ns3__CompleteCodeType *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns3__CompleteCodeType(struct soap*, const char*, enum ns3__CompleteCodeType *);

SOAP_FMAC3 enum ns3__CompleteCodeType * SOAP_FMAC4 soap_new_ns3__CompleteCodeType(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns3__CompleteCodeType(struct soap*, const enum ns3__CompleteCodeType *, const char*, const char*);

inline int soap_write_ns3__CompleteCodeType(struct soap *soap, enum ns3__CompleteCodeType const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_ns3__CompleteCodeType(soap, p, "ns3:CompleteCodeType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_ns3__CompleteCodeType(struct soap *soap, const char *URL, enum ns3__CompleteCodeType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ns3__CompleteCodeType(soap, p, "ns3:CompleteCodeType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__CompleteCodeType(struct soap *soap, const char *URL, enum ns3__CompleteCodeType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ns3__CompleteCodeType(soap, p, "ns3:CompleteCodeType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum ns3__CompleteCodeType * SOAP_FMAC4 soap_get_ns3__CompleteCodeType(struct soap*, enum ns3__CompleteCodeType *, const char*, const char*);

inline int soap_read_ns3__CompleteCodeType(struct soap *soap, enum ns3__CompleteCodeType *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_ns3__CompleteCodeType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__CompleteCodeType(struct soap *soap, const char *URL, enum ns3__CompleteCodeType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__CompleteCodeType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__CompleteCodeType(struct soap *soap, enum ns3__CompleteCodeType *p)
{
	if (soap_read_ns3__CompleteCodeType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__MatchStatusCodeType_DEFINED
#define SOAP_TYPE_ns3__MatchStatusCodeType_DEFINED

inline void soap_default_ns3__MatchStatusCodeType(struct soap *soap, enum ns3__MatchStatusCodeType *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_ns3__MatchStatusCodeType
	*a = SOAP_DEFAULT_ns3__MatchStatusCodeType;
#else
	*a = (enum ns3__MatchStatusCodeType)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__MatchStatusCodeType(struct soap*, const char*, int, const enum ns3__MatchStatusCodeType *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns3__MatchStatusCodeType2s(struct soap*, enum ns3__MatchStatusCodeType);
SOAP_FMAC3 enum ns3__MatchStatusCodeType * SOAP_FMAC4 soap_in_ns3__MatchStatusCodeType(struct soap*, const char*, enum ns3__MatchStatusCodeType *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns3__MatchStatusCodeType(struct soap*, const char*, enum ns3__MatchStatusCodeType *);

SOAP_FMAC3 enum ns3__MatchStatusCodeType * SOAP_FMAC4 soap_new_ns3__MatchStatusCodeType(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns3__MatchStatusCodeType(struct soap*, const enum ns3__MatchStatusCodeType *, const char*, const char*);

inline int soap_write_ns3__MatchStatusCodeType(struct soap *soap, enum ns3__MatchStatusCodeType const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_ns3__MatchStatusCodeType(soap, p, "ns3:MatchStatusCodeType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_ns3__MatchStatusCodeType(struct soap *soap, const char *URL, enum ns3__MatchStatusCodeType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ns3__MatchStatusCodeType(soap, p, "ns3:MatchStatusCodeType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__MatchStatusCodeType(struct soap *soap, const char *URL, enum ns3__MatchStatusCodeType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ns3__MatchStatusCodeType(soap, p, "ns3:MatchStatusCodeType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum ns3__MatchStatusCodeType * SOAP_FMAC4 soap_get_ns3__MatchStatusCodeType(struct soap*, enum ns3__MatchStatusCodeType *, const char*, const char*);

inline int soap_read_ns3__MatchStatusCodeType(struct soap *soap, enum ns3__MatchStatusCodeType *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_ns3__MatchStatusCodeType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__MatchStatusCodeType(struct soap *soap, const char *URL, enum ns3__MatchStatusCodeType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__MatchStatusCodeType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__MatchStatusCodeType(struct soap *soap, enum ns3__MatchStatusCodeType *p)
{
	if (soap_read_ns3__MatchStatusCodeType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__PaymentTransactionClassCodeType_DEFINED
#define SOAP_TYPE_ns3__PaymentTransactionClassCodeType_DEFINED

inline void soap_default_ns3__PaymentTransactionClassCodeType(struct soap *soap, enum ns3__PaymentTransactionClassCodeType *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_ns3__PaymentTransactionClassCodeType
	*a = SOAP_DEFAULT_ns3__PaymentTransactionClassCodeType;
#else
	*a = (enum ns3__PaymentTransactionClassCodeType)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__PaymentTransactionClassCodeType(struct soap*, const char*, int, const enum ns3__PaymentTransactionClassCodeType *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns3__PaymentTransactionClassCodeType2s(struct soap*, enum ns3__PaymentTransactionClassCodeType);
SOAP_FMAC3 enum ns3__PaymentTransactionClassCodeType * SOAP_FMAC4 soap_in_ns3__PaymentTransactionClassCodeType(struct soap*, const char*, enum ns3__PaymentTransactionClassCodeType *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns3__PaymentTransactionClassCodeType(struct soap*, const char*, enum ns3__PaymentTransactionClassCodeType *);

SOAP_FMAC3 enum ns3__PaymentTransactionClassCodeType * SOAP_FMAC4 soap_new_ns3__PaymentTransactionClassCodeType(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns3__PaymentTransactionClassCodeType(struct soap*, const enum ns3__PaymentTransactionClassCodeType *, const char*, const char*);

inline int soap_write_ns3__PaymentTransactionClassCodeType(struct soap *soap, enum ns3__PaymentTransactionClassCodeType const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_ns3__PaymentTransactionClassCodeType(soap, p, "ns3:PaymentTransactionClassCodeType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_ns3__PaymentTransactionClassCodeType(struct soap *soap, const char *URL, enum ns3__PaymentTransactionClassCodeType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ns3__PaymentTransactionClassCodeType(soap, p, "ns3:PaymentTransactionClassCodeType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__PaymentTransactionClassCodeType(struct soap *soap, const char *URL, enum ns3__PaymentTransactionClassCodeType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ns3__PaymentTransactionClassCodeType(soap, p, "ns3:PaymentTransactionClassCodeType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum ns3__PaymentTransactionClassCodeType * SOAP_FMAC4 soap_get_ns3__PaymentTransactionClassCodeType(struct soap*, enum ns3__PaymentTransactionClassCodeType *, const char*, const char*);

inline int soap_read_ns3__PaymentTransactionClassCodeType(struct soap *soap, enum ns3__PaymentTransactionClassCodeType *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_ns3__PaymentTransactionClassCodeType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__PaymentTransactionClassCodeType(struct soap *soap, const char *URL, enum ns3__PaymentTransactionClassCodeType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__PaymentTransactionClassCodeType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__PaymentTransactionClassCodeType(struct soap *soap, enum ns3__PaymentTransactionClassCodeType *p)
{
	if (soap_read_ns3__PaymentTransactionClassCodeType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__PaymentTransactionStatusCodeType_DEFINED
#define SOAP_TYPE_ns3__PaymentTransactionStatusCodeType_DEFINED

inline void soap_default_ns3__PaymentTransactionStatusCodeType(struct soap *soap, enum ns3__PaymentTransactionStatusCodeType *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_ns3__PaymentTransactionStatusCodeType
	*a = SOAP_DEFAULT_ns3__PaymentTransactionStatusCodeType;
#else
	*a = (enum ns3__PaymentTransactionStatusCodeType)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__PaymentTransactionStatusCodeType(struct soap*, const char*, int, const enum ns3__PaymentTransactionStatusCodeType *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns3__PaymentTransactionStatusCodeType2s(struct soap*, enum ns3__PaymentTransactionStatusCodeType);
SOAP_FMAC3 enum ns3__PaymentTransactionStatusCodeType * SOAP_FMAC4 soap_in_ns3__PaymentTransactionStatusCodeType(struct soap*, const char*, enum ns3__PaymentTransactionStatusCodeType *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns3__PaymentTransactionStatusCodeType(struct soap*, const char*, enum ns3__PaymentTransactionStatusCodeType *);

SOAP_FMAC3 enum ns3__PaymentTransactionStatusCodeType * SOAP_FMAC4 soap_new_ns3__PaymentTransactionStatusCodeType(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns3__PaymentTransactionStatusCodeType(struct soap*, const enum ns3__PaymentTransactionStatusCodeType *, const char*, const char*);

inline int soap_write_ns3__PaymentTransactionStatusCodeType(struct soap *soap, enum ns3__PaymentTransactionStatusCodeType const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_ns3__PaymentTransactionStatusCodeType(soap, p, "ns3:PaymentTransactionStatusCodeType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_ns3__PaymentTransactionStatusCodeType(struct soap *soap, const char *URL, enum ns3__PaymentTransactionStatusCodeType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ns3__PaymentTransactionStatusCodeType(soap, p, "ns3:PaymentTransactionStatusCodeType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__PaymentTransactionStatusCodeType(struct soap *soap, const char *URL, enum ns3__PaymentTransactionStatusCodeType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ns3__PaymentTransactionStatusCodeType(soap, p, "ns3:PaymentTransactionStatusCodeType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum ns3__PaymentTransactionStatusCodeType * SOAP_FMAC4 soap_get_ns3__PaymentTransactionStatusCodeType(struct soap*, enum ns3__PaymentTransactionStatusCodeType *, const char*, const char*);

inline int soap_read_ns3__PaymentTransactionStatusCodeType(struct soap *soap, enum ns3__PaymentTransactionStatusCodeType *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_ns3__PaymentTransactionStatusCodeType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__PaymentTransactionStatusCodeType(struct soap *soap, const char *URL, enum ns3__PaymentTransactionStatusCodeType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__PaymentTransactionStatusCodeType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__PaymentTransactionStatusCodeType(struct soap *soap, enum ns3__PaymentTransactionStatusCodeType *p)
{
	if (soap_read_ns3__PaymentTransactionStatusCodeType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__MerchantPullStatusCodeType_DEFINED
#define SOAP_TYPE_ns3__MerchantPullStatusCodeType_DEFINED

inline void soap_default_ns3__MerchantPullStatusCodeType(struct soap *soap, enum ns3__MerchantPullStatusCodeType *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_ns3__MerchantPullStatusCodeType
	*a = SOAP_DEFAULT_ns3__MerchantPullStatusCodeType;
#else
	*a = (enum ns3__MerchantPullStatusCodeType)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__MerchantPullStatusCodeType(struct soap*, const char*, int, const enum ns3__MerchantPullStatusCodeType *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns3__MerchantPullStatusCodeType2s(struct soap*, enum ns3__MerchantPullStatusCodeType);
SOAP_FMAC3 enum ns3__MerchantPullStatusCodeType * SOAP_FMAC4 soap_in_ns3__MerchantPullStatusCodeType(struct soap*, const char*, enum ns3__MerchantPullStatusCodeType *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns3__MerchantPullStatusCodeType(struct soap*, const char*, enum ns3__MerchantPullStatusCodeType *);

SOAP_FMAC3 enum ns3__MerchantPullStatusCodeType * SOAP_FMAC4 soap_new_ns3__MerchantPullStatusCodeType(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns3__MerchantPullStatusCodeType(struct soap*, const enum ns3__MerchantPullStatusCodeType *, const char*, const char*);

inline int soap_write_ns3__MerchantPullStatusCodeType(struct soap *soap, enum ns3__MerchantPullStatusCodeType const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_ns3__MerchantPullStatusCodeType(soap, p, "ns3:MerchantPullStatusCodeType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_ns3__MerchantPullStatusCodeType(struct soap *soap, const char *URL, enum ns3__MerchantPullStatusCodeType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ns3__MerchantPullStatusCodeType(soap, p, "ns3:MerchantPullStatusCodeType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__MerchantPullStatusCodeType(struct soap *soap, const char *URL, enum ns3__MerchantPullStatusCodeType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ns3__MerchantPullStatusCodeType(soap, p, "ns3:MerchantPullStatusCodeType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum ns3__MerchantPullStatusCodeType * SOAP_FMAC4 soap_get_ns3__MerchantPullStatusCodeType(struct soap*, enum ns3__MerchantPullStatusCodeType *, const char*, const char*);

inline int soap_read_ns3__MerchantPullStatusCodeType(struct soap *soap, enum ns3__MerchantPullStatusCodeType *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_ns3__MerchantPullStatusCodeType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__MerchantPullStatusCodeType(struct soap *soap, const char *URL, enum ns3__MerchantPullStatusCodeType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__MerchantPullStatusCodeType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__MerchantPullStatusCodeType(struct soap *soap, enum ns3__MerchantPullStatusCodeType *p)
{
	if (soap_read_ns3__MerchantPullStatusCodeType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__MerchantPullPaymentCodeType_DEFINED
#define SOAP_TYPE_ns3__MerchantPullPaymentCodeType_DEFINED

inline void soap_default_ns3__MerchantPullPaymentCodeType(struct soap *soap, enum ns3__MerchantPullPaymentCodeType *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_ns3__MerchantPullPaymentCodeType
	*a = SOAP_DEFAULT_ns3__MerchantPullPaymentCodeType;
#else
	*a = (enum ns3__MerchantPullPaymentCodeType)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__MerchantPullPaymentCodeType(struct soap*, const char*, int, const enum ns3__MerchantPullPaymentCodeType *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns3__MerchantPullPaymentCodeType2s(struct soap*, enum ns3__MerchantPullPaymentCodeType);
SOAP_FMAC3 enum ns3__MerchantPullPaymentCodeType * SOAP_FMAC4 soap_in_ns3__MerchantPullPaymentCodeType(struct soap*, const char*, enum ns3__MerchantPullPaymentCodeType *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns3__MerchantPullPaymentCodeType(struct soap*, const char*, enum ns3__MerchantPullPaymentCodeType *);

SOAP_FMAC3 enum ns3__MerchantPullPaymentCodeType * SOAP_FMAC4 soap_new_ns3__MerchantPullPaymentCodeType(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns3__MerchantPullPaymentCodeType(struct soap*, const enum ns3__MerchantPullPaymentCodeType *, const char*, const char*);

inline int soap_write_ns3__MerchantPullPaymentCodeType(struct soap *soap, enum ns3__MerchantPullPaymentCodeType const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_ns3__MerchantPullPaymentCodeType(soap, p, "ns3:MerchantPullPaymentCodeType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_ns3__MerchantPullPaymentCodeType(struct soap *soap, const char *URL, enum ns3__MerchantPullPaymentCodeType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ns3__MerchantPullPaymentCodeType(soap, p, "ns3:MerchantPullPaymentCodeType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__MerchantPullPaymentCodeType(struct soap *soap, const char *URL, enum ns3__MerchantPullPaymentCodeType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ns3__MerchantPullPaymentCodeType(soap, p, "ns3:MerchantPullPaymentCodeType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum ns3__MerchantPullPaymentCodeType * SOAP_FMAC4 soap_get_ns3__MerchantPullPaymentCodeType(struct soap*, enum ns3__MerchantPullPaymentCodeType *, const char*, const char*);

inline int soap_read_ns3__MerchantPullPaymentCodeType(struct soap *soap, enum ns3__MerchantPullPaymentCodeType *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_ns3__MerchantPullPaymentCodeType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__MerchantPullPaymentCodeType(struct soap *soap, const char *URL, enum ns3__MerchantPullPaymentCodeType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__MerchantPullPaymentCodeType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__MerchantPullPaymentCodeType(struct soap *soap, enum ns3__MerchantPullPaymentCodeType *p)
{
	if (soap_read_ns3__MerchantPullPaymentCodeType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__PayPalUserStatusCodeType_DEFINED
#define SOAP_TYPE_ns3__PayPalUserStatusCodeType_DEFINED

inline void soap_default_ns3__PayPalUserStatusCodeType(struct soap *soap, enum ns3__PayPalUserStatusCodeType *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_ns3__PayPalUserStatusCodeType
	*a = SOAP_DEFAULT_ns3__PayPalUserStatusCodeType;
#else
	*a = (enum ns3__PayPalUserStatusCodeType)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__PayPalUserStatusCodeType(struct soap*, const char*, int, const enum ns3__PayPalUserStatusCodeType *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns3__PayPalUserStatusCodeType2s(struct soap*, enum ns3__PayPalUserStatusCodeType);
SOAP_FMAC3 enum ns3__PayPalUserStatusCodeType * SOAP_FMAC4 soap_in_ns3__PayPalUserStatusCodeType(struct soap*, const char*, enum ns3__PayPalUserStatusCodeType *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns3__PayPalUserStatusCodeType(struct soap*, const char*, enum ns3__PayPalUserStatusCodeType *);

SOAP_FMAC3 enum ns3__PayPalUserStatusCodeType * SOAP_FMAC4 soap_new_ns3__PayPalUserStatusCodeType(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns3__PayPalUserStatusCodeType(struct soap*, const enum ns3__PayPalUserStatusCodeType *, const char*, const char*);

inline int soap_write_ns3__PayPalUserStatusCodeType(struct soap *soap, enum ns3__PayPalUserStatusCodeType const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_ns3__PayPalUserStatusCodeType(soap, p, "ns3:PayPalUserStatusCodeType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_ns3__PayPalUserStatusCodeType(struct soap *soap, const char *URL, enum ns3__PayPalUserStatusCodeType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ns3__PayPalUserStatusCodeType(soap, p, "ns3:PayPalUserStatusCodeType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__PayPalUserStatusCodeType(struct soap *soap, const char *URL, enum ns3__PayPalUserStatusCodeType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ns3__PayPalUserStatusCodeType(soap, p, "ns3:PayPalUserStatusCodeType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum ns3__PayPalUserStatusCodeType * SOAP_FMAC4 soap_get_ns3__PayPalUserStatusCodeType(struct soap*, enum ns3__PayPalUserStatusCodeType *, const char*, const char*);

inline int soap_read_ns3__PayPalUserStatusCodeType(struct soap *soap, enum ns3__PayPalUserStatusCodeType *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_ns3__PayPalUserStatusCodeType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__PayPalUserStatusCodeType(struct soap *soap, const char *URL, enum ns3__PayPalUserStatusCodeType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__PayPalUserStatusCodeType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__PayPalUserStatusCodeType(struct soap *soap, enum ns3__PayPalUserStatusCodeType *p)
{
	if (soap_read_ns3__PayPalUserStatusCodeType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__RefundSourceCodeType_DEFINED
#define SOAP_TYPE_ns3__RefundSourceCodeType_DEFINED

inline void soap_default_ns3__RefundSourceCodeType(struct soap *soap, enum ns3__RefundSourceCodeType *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_ns3__RefundSourceCodeType
	*a = SOAP_DEFAULT_ns3__RefundSourceCodeType;
#else
	*a = (enum ns3__RefundSourceCodeType)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__RefundSourceCodeType(struct soap*, const char*, int, const enum ns3__RefundSourceCodeType *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns3__RefundSourceCodeType2s(struct soap*, enum ns3__RefundSourceCodeType);
SOAP_FMAC3 enum ns3__RefundSourceCodeType * SOAP_FMAC4 soap_in_ns3__RefundSourceCodeType(struct soap*, const char*, enum ns3__RefundSourceCodeType *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns3__RefundSourceCodeType(struct soap*, const char*, enum ns3__RefundSourceCodeType *);

SOAP_FMAC3 enum ns3__RefundSourceCodeType * SOAP_FMAC4 soap_new_ns3__RefundSourceCodeType(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns3__RefundSourceCodeType(struct soap*, const enum ns3__RefundSourceCodeType *, const char*, const char*);

inline int soap_write_ns3__RefundSourceCodeType(struct soap *soap, enum ns3__RefundSourceCodeType const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_ns3__RefundSourceCodeType(soap, p, "ns3:RefundSourceCodeType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_ns3__RefundSourceCodeType(struct soap *soap, const char *URL, enum ns3__RefundSourceCodeType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ns3__RefundSourceCodeType(soap, p, "ns3:RefundSourceCodeType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__RefundSourceCodeType(struct soap *soap, const char *URL, enum ns3__RefundSourceCodeType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ns3__RefundSourceCodeType(soap, p, "ns3:RefundSourceCodeType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum ns3__RefundSourceCodeType * SOAP_FMAC4 soap_get_ns3__RefundSourceCodeType(struct soap*, enum ns3__RefundSourceCodeType *, const char*, const char*);

inline int soap_read_ns3__RefundSourceCodeType(struct soap *soap, enum ns3__RefundSourceCodeType *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_ns3__RefundSourceCodeType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__RefundSourceCodeType(struct soap *soap, const char *URL, enum ns3__RefundSourceCodeType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__RefundSourceCodeType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__RefundSourceCodeType(struct soap *soap, enum ns3__RefundSourceCodeType *p)
{
	if (soap_read_ns3__RefundSourceCodeType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__PaymentCodeType_DEFINED
#define SOAP_TYPE_ns3__PaymentCodeType_DEFINED

inline void soap_default_ns3__PaymentCodeType(struct soap *soap, enum ns3__PaymentCodeType *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_ns3__PaymentCodeType
	*a = SOAP_DEFAULT_ns3__PaymentCodeType;
#else
	*a = (enum ns3__PaymentCodeType)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__PaymentCodeType(struct soap*, const char*, int, const enum ns3__PaymentCodeType *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns3__PaymentCodeType2s(struct soap*, enum ns3__PaymentCodeType);
SOAP_FMAC3 enum ns3__PaymentCodeType * SOAP_FMAC4 soap_in_ns3__PaymentCodeType(struct soap*, const char*, enum ns3__PaymentCodeType *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns3__PaymentCodeType(struct soap*, const char*, enum ns3__PaymentCodeType *);

SOAP_FMAC3 enum ns3__PaymentCodeType * SOAP_FMAC4 soap_new_ns3__PaymentCodeType(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns3__PaymentCodeType(struct soap*, const enum ns3__PaymentCodeType *, const char*, const char*);

inline int soap_write_ns3__PaymentCodeType(struct soap *soap, enum ns3__PaymentCodeType const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_ns3__PaymentCodeType(soap, p, "ns3:PaymentCodeType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_ns3__PaymentCodeType(struct soap *soap, const char *URL, enum ns3__PaymentCodeType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ns3__PaymentCodeType(soap, p, "ns3:PaymentCodeType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__PaymentCodeType(struct soap *soap, const char *URL, enum ns3__PaymentCodeType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ns3__PaymentCodeType(soap, p, "ns3:PaymentCodeType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum ns3__PaymentCodeType * SOAP_FMAC4 soap_get_ns3__PaymentCodeType(struct soap*, enum ns3__PaymentCodeType *, const char*, const char*);

inline int soap_read_ns3__PaymentCodeType(struct soap *soap, enum ns3__PaymentCodeType *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_ns3__PaymentCodeType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__PaymentCodeType(struct soap *soap, const char *URL, enum ns3__PaymentCodeType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__PaymentCodeType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__PaymentCodeType(struct soap *soap, enum ns3__PaymentCodeType *p)
{
	if (soap_read_ns3__PaymentCodeType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__POSTransactionCodeType_DEFINED
#define SOAP_TYPE_ns3__POSTransactionCodeType_DEFINED

inline void soap_default_ns3__POSTransactionCodeType(struct soap *soap, enum ns3__POSTransactionCodeType *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_ns3__POSTransactionCodeType
	*a = SOAP_DEFAULT_ns3__POSTransactionCodeType;
#else
	*a = (enum ns3__POSTransactionCodeType)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__POSTransactionCodeType(struct soap*, const char*, int, const enum ns3__POSTransactionCodeType *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns3__POSTransactionCodeType2s(struct soap*, enum ns3__POSTransactionCodeType);
SOAP_FMAC3 enum ns3__POSTransactionCodeType * SOAP_FMAC4 soap_in_ns3__POSTransactionCodeType(struct soap*, const char*, enum ns3__POSTransactionCodeType *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns3__POSTransactionCodeType(struct soap*, const char*, enum ns3__POSTransactionCodeType *);

SOAP_FMAC3 enum ns3__POSTransactionCodeType * SOAP_FMAC4 soap_new_ns3__POSTransactionCodeType(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns3__POSTransactionCodeType(struct soap*, const enum ns3__POSTransactionCodeType *, const char*, const char*);

inline int soap_write_ns3__POSTransactionCodeType(struct soap *soap, enum ns3__POSTransactionCodeType const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_ns3__POSTransactionCodeType(soap, p, "ns3:POSTransactionCodeType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_ns3__POSTransactionCodeType(struct soap *soap, const char *URL, enum ns3__POSTransactionCodeType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ns3__POSTransactionCodeType(soap, p, "ns3:POSTransactionCodeType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__POSTransactionCodeType(struct soap *soap, const char *URL, enum ns3__POSTransactionCodeType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ns3__POSTransactionCodeType(soap, p, "ns3:POSTransactionCodeType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum ns3__POSTransactionCodeType * SOAP_FMAC4 soap_get_ns3__POSTransactionCodeType(struct soap*, enum ns3__POSTransactionCodeType *, const char*, const char*);

inline int soap_read_ns3__POSTransactionCodeType(struct soap *soap, enum ns3__POSTransactionCodeType *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_ns3__POSTransactionCodeType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__POSTransactionCodeType(struct soap *soap, const char *URL, enum ns3__POSTransactionCodeType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__POSTransactionCodeType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__POSTransactionCodeType(struct soap *soap, enum ns3__POSTransactionCodeType *p)
{
	if (soap_read_ns3__POSTransactionCodeType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__ReversalReasonCodeType_DEFINED
#define SOAP_TYPE_ns3__ReversalReasonCodeType_DEFINED

inline void soap_default_ns3__ReversalReasonCodeType(struct soap *soap, enum ns3__ReversalReasonCodeType *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_ns3__ReversalReasonCodeType
	*a = SOAP_DEFAULT_ns3__ReversalReasonCodeType;
#else
	*a = (enum ns3__ReversalReasonCodeType)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__ReversalReasonCodeType(struct soap*, const char*, int, const enum ns3__ReversalReasonCodeType *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns3__ReversalReasonCodeType2s(struct soap*, enum ns3__ReversalReasonCodeType);
SOAP_FMAC3 enum ns3__ReversalReasonCodeType * SOAP_FMAC4 soap_in_ns3__ReversalReasonCodeType(struct soap*, const char*, enum ns3__ReversalReasonCodeType *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns3__ReversalReasonCodeType(struct soap*, const char*, enum ns3__ReversalReasonCodeType *);

SOAP_FMAC3 enum ns3__ReversalReasonCodeType * SOAP_FMAC4 soap_new_ns3__ReversalReasonCodeType(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns3__ReversalReasonCodeType(struct soap*, const enum ns3__ReversalReasonCodeType *, const char*, const char*);

inline int soap_write_ns3__ReversalReasonCodeType(struct soap *soap, enum ns3__ReversalReasonCodeType const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_ns3__ReversalReasonCodeType(soap, p, "ns3:ReversalReasonCodeType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_ns3__ReversalReasonCodeType(struct soap *soap, const char *URL, enum ns3__ReversalReasonCodeType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ns3__ReversalReasonCodeType(soap, p, "ns3:ReversalReasonCodeType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__ReversalReasonCodeType(struct soap *soap, const char *URL, enum ns3__ReversalReasonCodeType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ns3__ReversalReasonCodeType(soap, p, "ns3:ReversalReasonCodeType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum ns3__ReversalReasonCodeType * SOAP_FMAC4 soap_get_ns3__ReversalReasonCodeType(struct soap*, enum ns3__ReversalReasonCodeType *, const char*, const char*);

inline int soap_read_ns3__ReversalReasonCodeType(struct soap *soap, enum ns3__ReversalReasonCodeType *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_ns3__ReversalReasonCodeType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__ReversalReasonCodeType(struct soap *soap, const char *URL, enum ns3__ReversalReasonCodeType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__ReversalReasonCodeType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__ReversalReasonCodeType(struct soap *soap, enum ns3__ReversalReasonCodeType *p)
{
	if (soap_read_ns3__ReversalReasonCodeType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__ReceiverInfoCodeType_DEFINED
#define SOAP_TYPE_ns3__ReceiverInfoCodeType_DEFINED

inline void soap_default_ns3__ReceiverInfoCodeType(struct soap *soap, enum ns3__ReceiverInfoCodeType *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_ns3__ReceiverInfoCodeType
	*a = SOAP_DEFAULT_ns3__ReceiverInfoCodeType;
#else
	*a = (enum ns3__ReceiverInfoCodeType)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__ReceiverInfoCodeType(struct soap*, const char*, int, const enum ns3__ReceiverInfoCodeType *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns3__ReceiverInfoCodeType2s(struct soap*, enum ns3__ReceiverInfoCodeType);
SOAP_FMAC3 enum ns3__ReceiverInfoCodeType * SOAP_FMAC4 soap_in_ns3__ReceiverInfoCodeType(struct soap*, const char*, enum ns3__ReceiverInfoCodeType *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns3__ReceiverInfoCodeType(struct soap*, const char*, enum ns3__ReceiverInfoCodeType *);

SOAP_FMAC3 enum ns3__ReceiverInfoCodeType * SOAP_FMAC4 soap_new_ns3__ReceiverInfoCodeType(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns3__ReceiverInfoCodeType(struct soap*, const enum ns3__ReceiverInfoCodeType *, const char*, const char*);

inline int soap_write_ns3__ReceiverInfoCodeType(struct soap *soap, enum ns3__ReceiverInfoCodeType const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_ns3__ReceiverInfoCodeType(soap, p, "ns3:ReceiverInfoCodeType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_ns3__ReceiverInfoCodeType(struct soap *soap, const char *URL, enum ns3__ReceiverInfoCodeType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ns3__ReceiverInfoCodeType(soap, p, "ns3:ReceiverInfoCodeType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__ReceiverInfoCodeType(struct soap *soap, const char *URL, enum ns3__ReceiverInfoCodeType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ns3__ReceiverInfoCodeType(soap, p, "ns3:ReceiverInfoCodeType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum ns3__ReceiverInfoCodeType * SOAP_FMAC4 soap_get_ns3__ReceiverInfoCodeType(struct soap*, enum ns3__ReceiverInfoCodeType *, const char*, const char*);

inline int soap_read_ns3__ReceiverInfoCodeType(struct soap *soap, enum ns3__ReceiverInfoCodeType *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_ns3__ReceiverInfoCodeType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__ReceiverInfoCodeType(struct soap *soap, const char *URL, enum ns3__ReceiverInfoCodeType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__ReceiverInfoCodeType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__ReceiverInfoCodeType(struct soap *soap, enum ns3__ReceiverInfoCodeType *p)
{
	if (soap_read_ns3__ReceiverInfoCodeType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__PendingStatusCodeType_DEFINED
#define SOAP_TYPE_ns3__PendingStatusCodeType_DEFINED

inline void soap_default_ns3__PendingStatusCodeType(struct soap *soap, enum ns3__PendingStatusCodeType *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_ns3__PendingStatusCodeType
	*a = SOAP_DEFAULT_ns3__PendingStatusCodeType;
#else
	*a = (enum ns3__PendingStatusCodeType)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__PendingStatusCodeType(struct soap*, const char*, int, const enum ns3__PendingStatusCodeType *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns3__PendingStatusCodeType2s(struct soap*, enum ns3__PendingStatusCodeType);
SOAP_FMAC3 enum ns3__PendingStatusCodeType * SOAP_FMAC4 soap_in_ns3__PendingStatusCodeType(struct soap*, const char*, enum ns3__PendingStatusCodeType *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns3__PendingStatusCodeType(struct soap*, const char*, enum ns3__PendingStatusCodeType *);

SOAP_FMAC3 enum ns3__PendingStatusCodeType * SOAP_FMAC4 soap_new_ns3__PendingStatusCodeType(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns3__PendingStatusCodeType(struct soap*, const enum ns3__PendingStatusCodeType *, const char*, const char*);

inline int soap_write_ns3__PendingStatusCodeType(struct soap *soap, enum ns3__PendingStatusCodeType const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_ns3__PendingStatusCodeType(soap, p, "ns3:PendingStatusCodeType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_ns3__PendingStatusCodeType(struct soap *soap, const char *URL, enum ns3__PendingStatusCodeType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ns3__PendingStatusCodeType(soap, p, "ns3:PendingStatusCodeType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__PendingStatusCodeType(struct soap *soap, const char *URL, enum ns3__PendingStatusCodeType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ns3__PendingStatusCodeType(soap, p, "ns3:PendingStatusCodeType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum ns3__PendingStatusCodeType * SOAP_FMAC4 soap_get_ns3__PendingStatusCodeType(struct soap*, enum ns3__PendingStatusCodeType *, const char*, const char*);

inline int soap_read_ns3__PendingStatusCodeType(struct soap *soap, enum ns3__PendingStatusCodeType *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_ns3__PendingStatusCodeType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__PendingStatusCodeType(struct soap *soap, const char *URL, enum ns3__PendingStatusCodeType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__PendingStatusCodeType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__PendingStatusCodeType(struct soap *soap, enum ns3__PendingStatusCodeType *p)
{
	if (soap_read_ns3__PendingStatusCodeType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__ApprovalSubTypeType_DEFINED
#define SOAP_TYPE_ns3__ApprovalSubTypeType_DEFINED

inline void soap_default_ns3__ApprovalSubTypeType(struct soap *soap, enum ns3__ApprovalSubTypeType *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_ns3__ApprovalSubTypeType
	*a = SOAP_DEFAULT_ns3__ApprovalSubTypeType;
#else
	*a = (enum ns3__ApprovalSubTypeType)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__ApprovalSubTypeType(struct soap*, const char*, int, const enum ns3__ApprovalSubTypeType *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns3__ApprovalSubTypeType2s(struct soap*, enum ns3__ApprovalSubTypeType);
SOAP_FMAC3 enum ns3__ApprovalSubTypeType * SOAP_FMAC4 soap_in_ns3__ApprovalSubTypeType(struct soap*, const char*, enum ns3__ApprovalSubTypeType *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns3__ApprovalSubTypeType(struct soap*, const char*, enum ns3__ApprovalSubTypeType *);

SOAP_FMAC3 enum ns3__ApprovalSubTypeType * SOAP_FMAC4 soap_new_ns3__ApprovalSubTypeType(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns3__ApprovalSubTypeType(struct soap*, const enum ns3__ApprovalSubTypeType *, const char*, const char*);

inline int soap_write_ns3__ApprovalSubTypeType(struct soap *soap, enum ns3__ApprovalSubTypeType const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_ns3__ApprovalSubTypeType(soap, p, "ns3:ApprovalSubTypeType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_ns3__ApprovalSubTypeType(struct soap *soap, const char *URL, enum ns3__ApprovalSubTypeType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ns3__ApprovalSubTypeType(soap, p, "ns3:ApprovalSubTypeType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__ApprovalSubTypeType(struct soap *soap, const char *URL, enum ns3__ApprovalSubTypeType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ns3__ApprovalSubTypeType(soap, p, "ns3:ApprovalSubTypeType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum ns3__ApprovalSubTypeType * SOAP_FMAC4 soap_get_ns3__ApprovalSubTypeType(struct soap*, enum ns3__ApprovalSubTypeType *, const char*, const char*);

inline int soap_read_ns3__ApprovalSubTypeType(struct soap *soap, enum ns3__ApprovalSubTypeType *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_ns3__ApprovalSubTypeType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__ApprovalSubTypeType(struct soap *soap, const char *URL, enum ns3__ApprovalSubTypeType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__ApprovalSubTypeType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__ApprovalSubTypeType(struct soap *soap, enum ns3__ApprovalSubTypeType *p)
{
	if (soap_read_ns3__ApprovalSubTypeType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__ApprovalTypeType_DEFINED
#define SOAP_TYPE_ns3__ApprovalTypeType_DEFINED

inline void soap_default_ns3__ApprovalTypeType(struct soap *soap, enum ns3__ApprovalTypeType *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_ns3__ApprovalTypeType
	*a = SOAP_DEFAULT_ns3__ApprovalTypeType;
#else
	*a = (enum ns3__ApprovalTypeType)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__ApprovalTypeType(struct soap*, const char*, int, const enum ns3__ApprovalTypeType *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns3__ApprovalTypeType2s(struct soap*, enum ns3__ApprovalTypeType);
SOAP_FMAC3 enum ns3__ApprovalTypeType * SOAP_FMAC4 soap_in_ns3__ApprovalTypeType(struct soap*, const char*, enum ns3__ApprovalTypeType *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns3__ApprovalTypeType(struct soap*, const char*, enum ns3__ApprovalTypeType *);

SOAP_FMAC3 enum ns3__ApprovalTypeType * SOAP_FMAC4 soap_new_ns3__ApprovalTypeType(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns3__ApprovalTypeType(struct soap*, const enum ns3__ApprovalTypeType *, const char*, const char*);

inline int soap_write_ns3__ApprovalTypeType(struct soap *soap, enum ns3__ApprovalTypeType const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_ns3__ApprovalTypeType(soap, p, "ns3:ApprovalTypeType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_ns3__ApprovalTypeType(struct soap *soap, const char *URL, enum ns3__ApprovalTypeType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ns3__ApprovalTypeType(soap, p, "ns3:ApprovalTypeType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__ApprovalTypeType(struct soap *soap, const char *URL, enum ns3__ApprovalTypeType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ns3__ApprovalTypeType(soap, p, "ns3:ApprovalTypeType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum ns3__ApprovalTypeType * SOAP_FMAC4 soap_get_ns3__ApprovalTypeType(struct soap*, enum ns3__ApprovalTypeType *, const char*, const char*);

inline int soap_read_ns3__ApprovalTypeType(struct soap *soap, enum ns3__ApprovalTypeType *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_ns3__ApprovalTypeType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__ApprovalTypeType(struct soap *soap, const char *URL, enum ns3__ApprovalTypeType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__ApprovalTypeType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__ApprovalTypeType(struct soap *soap, enum ns3__ApprovalTypeType *p)
{
	if (soap_read_ns3__ApprovalTypeType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__BillingCodeType_DEFINED
#define SOAP_TYPE_ns3__BillingCodeType_DEFINED

inline void soap_default_ns3__BillingCodeType(struct soap *soap, enum ns3__BillingCodeType *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_ns3__BillingCodeType
	*a = SOAP_DEFAULT_ns3__BillingCodeType;
#else
	*a = (enum ns3__BillingCodeType)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__BillingCodeType(struct soap*, const char*, int, const enum ns3__BillingCodeType *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns3__BillingCodeType2s(struct soap*, enum ns3__BillingCodeType);
SOAP_FMAC3 enum ns3__BillingCodeType * SOAP_FMAC4 soap_in_ns3__BillingCodeType(struct soap*, const char*, enum ns3__BillingCodeType *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns3__BillingCodeType(struct soap*, const char*, enum ns3__BillingCodeType *);

SOAP_FMAC3 enum ns3__BillingCodeType * SOAP_FMAC4 soap_new_ns3__BillingCodeType(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns3__BillingCodeType(struct soap*, const enum ns3__BillingCodeType *, const char*, const char*);

inline int soap_write_ns3__BillingCodeType(struct soap *soap, enum ns3__BillingCodeType const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_ns3__BillingCodeType(soap, p, "ns3:BillingCodeType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_ns3__BillingCodeType(struct soap *soap, const char *URL, enum ns3__BillingCodeType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ns3__BillingCodeType(soap, p, "ns3:BillingCodeType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__BillingCodeType(struct soap *soap, const char *URL, enum ns3__BillingCodeType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ns3__BillingCodeType(soap, p, "ns3:BillingCodeType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum ns3__BillingCodeType * SOAP_FMAC4 soap_get_ns3__BillingCodeType(struct soap*, enum ns3__BillingCodeType *, const char*, const char*);

inline int soap_read_ns3__BillingCodeType(struct soap *soap, enum ns3__BillingCodeType *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_ns3__BillingCodeType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__BillingCodeType(struct soap *soap, const char *URL, enum ns3__BillingCodeType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__BillingCodeType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__BillingCodeType(struct soap *soap, enum ns3__BillingCodeType *p)
{
	if (soap_read_ns3__BillingCodeType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__LandingPageType_DEFINED
#define SOAP_TYPE_ns3__LandingPageType_DEFINED

inline void soap_default_ns3__LandingPageType(struct soap *soap, enum ns3__LandingPageType *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_ns3__LandingPageType
	*a = SOAP_DEFAULT_ns3__LandingPageType;
#else
	*a = (enum ns3__LandingPageType)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__LandingPageType(struct soap*, const char*, int, const enum ns3__LandingPageType *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns3__LandingPageType2s(struct soap*, enum ns3__LandingPageType);
SOAP_FMAC3 enum ns3__LandingPageType * SOAP_FMAC4 soap_in_ns3__LandingPageType(struct soap*, const char*, enum ns3__LandingPageType *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns3__LandingPageType(struct soap*, const char*, enum ns3__LandingPageType *);

SOAP_FMAC3 enum ns3__LandingPageType * SOAP_FMAC4 soap_new_ns3__LandingPageType(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns3__LandingPageType(struct soap*, const enum ns3__LandingPageType *, const char*, const char*);

inline int soap_write_ns3__LandingPageType(struct soap *soap, enum ns3__LandingPageType const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_ns3__LandingPageType(soap, p, "ns3:LandingPageType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_ns3__LandingPageType(struct soap *soap, const char *URL, enum ns3__LandingPageType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ns3__LandingPageType(soap, p, "ns3:LandingPageType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__LandingPageType(struct soap *soap, const char *URL, enum ns3__LandingPageType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ns3__LandingPageType(soap, p, "ns3:LandingPageType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum ns3__LandingPageType * SOAP_FMAC4 soap_get_ns3__LandingPageType(struct soap*, enum ns3__LandingPageType *, const char*, const char*);

inline int soap_read_ns3__LandingPageType(struct soap *soap, enum ns3__LandingPageType *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_ns3__LandingPageType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__LandingPageType(struct soap *soap, const char *URL, enum ns3__LandingPageType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__LandingPageType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__LandingPageType(struct soap *soap, enum ns3__LandingPageType *p)
{
	if (soap_read_ns3__LandingPageType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__AllowedPaymentMethodType_DEFINED
#define SOAP_TYPE_ns3__AllowedPaymentMethodType_DEFINED

inline void soap_default_ns3__AllowedPaymentMethodType(struct soap *soap, enum ns3__AllowedPaymentMethodType *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_ns3__AllowedPaymentMethodType
	*a = SOAP_DEFAULT_ns3__AllowedPaymentMethodType;
#else
	*a = (enum ns3__AllowedPaymentMethodType)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__AllowedPaymentMethodType(struct soap*, const char*, int, const enum ns3__AllowedPaymentMethodType *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns3__AllowedPaymentMethodType2s(struct soap*, enum ns3__AllowedPaymentMethodType);
SOAP_FMAC3 enum ns3__AllowedPaymentMethodType * SOAP_FMAC4 soap_in_ns3__AllowedPaymentMethodType(struct soap*, const char*, enum ns3__AllowedPaymentMethodType *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns3__AllowedPaymentMethodType(struct soap*, const char*, enum ns3__AllowedPaymentMethodType *);

SOAP_FMAC3 enum ns3__AllowedPaymentMethodType * SOAP_FMAC4 soap_new_ns3__AllowedPaymentMethodType(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns3__AllowedPaymentMethodType(struct soap*, const enum ns3__AllowedPaymentMethodType *, const char*, const char*);

inline int soap_write_ns3__AllowedPaymentMethodType(struct soap *soap, enum ns3__AllowedPaymentMethodType const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_ns3__AllowedPaymentMethodType(soap, p, "ns3:AllowedPaymentMethodType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_ns3__AllowedPaymentMethodType(struct soap *soap, const char *URL, enum ns3__AllowedPaymentMethodType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ns3__AllowedPaymentMethodType(soap, p, "ns3:AllowedPaymentMethodType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__AllowedPaymentMethodType(struct soap *soap, const char *URL, enum ns3__AllowedPaymentMethodType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ns3__AllowedPaymentMethodType(soap, p, "ns3:AllowedPaymentMethodType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum ns3__AllowedPaymentMethodType * SOAP_FMAC4 soap_get_ns3__AllowedPaymentMethodType(struct soap*, enum ns3__AllowedPaymentMethodType *, const char*, const char*);

inline int soap_read_ns3__AllowedPaymentMethodType(struct soap *soap, enum ns3__AllowedPaymentMethodType *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_ns3__AllowedPaymentMethodType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__AllowedPaymentMethodType(struct soap *soap, const char *URL, enum ns3__AllowedPaymentMethodType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__AllowedPaymentMethodType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__AllowedPaymentMethodType(struct soap *soap, enum ns3__AllowedPaymentMethodType *p)
{
	if (soap_read_ns3__AllowedPaymentMethodType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__SolutionTypeType_DEFINED
#define SOAP_TYPE_ns3__SolutionTypeType_DEFINED

inline void soap_default_ns3__SolutionTypeType(struct soap *soap, enum ns3__SolutionTypeType *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_ns3__SolutionTypeType
	*a = SOAP_DEFAULT_ns3__SolutionTypeType;
#else
	*a = (enum ns3__SolutionTypeType)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__SolutionTypeType(struct soap*, const char*, int, const enum ns3__SolutionTypeType *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns3__SolutionTypeType2s(struct soap*, enum ns3__SolutionTypeType);
SOAP_FMAC3 enum ns3__SolutionTypeType * SOAP_FMAC4 soap_in_ns3__SolutionTypeType(struct soap*, const char*, enum ns3__SolutionTypeType *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns3__SolutionTypeType(struct soap*, const char*, enum ns3__SolutionTypeType *);

SOAP_FMAC3 enum ns3__SolutionTypeType * SOAP_FMAC4 soap_new_ns3__SolutionTypeType(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns3__SolutionTypeType(struct soap*, const enum ns3__SolutionTypeType *, const char*, const char*);

inline int soap_write_ns3__SolutionTypeType(struct soap *soap, enum ns3__SolutionTypeType const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_ns3__SolutionTypeType(soap, p, "ns3:SolutionTypeType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_ns3__SolutionTypeType(struct soap *soap, const char *URL, enum ns3__SolutionTypeType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ns3__SolutionTypeType(soap, p, "ns3:SolutionTypeType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__SolutionTypeType(struct soap *soap, const char *URL, enum ns3__SolutionTypeType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ns3__SolutionTypeType(soap, p, "ns3:SolutionTypeType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum ns3__SolutionTypeType * SOAP_FMAC4 soap_get_ns3__SolutionTypeType(struct soap*, enum ns3__SolutionTypeType *, const char*, const char*);

inline int soap_read_ns3__SolutionTypeType(struct soap *soap, enum ns3__SolutionTypeType *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_ns3__SolutionTypeType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__SolutionTypeType(struct soap *soap, const char *URL, enum ns3__SolutionTypeType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__SolutionTypeType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__SolutionTypeType(struct soap *soap, enum ns3__SolutionTypeType *p)
{
	if (soap_read_ns3__SolutionTypeType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__TotalType_DEFINED
#define SOAP_TYPE_ns3__TotalType_DEFINED

inline void soap_default_ns3__TotalType(struct soap *soap, enum ns3__TotalType *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_ns3__TotalType
	*a = SOAP_DEFAULT_ns3__TotalType;
#else
	*a = (enum ns3__TotalType)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__TotalType(struct soap*, const char*, int, const enum ns3__TotalType *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns3__TotalType2s(struct soap*, enum ns3__TotalType);
SOAP_FMAC3 enum ns3__TotalType * SOAP_FMAC4 soap_in_ns3__TotalType(struct soap*, const char*, enum ns3__TotalType *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns3__TotalType(struct soap*, const char*, enum ns3__TotalType *);

SOAP_FMAC3 enum ns3__TotalType * SOAP_FMAC4 soap_new_ns3__TotalType(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns3__TotalType(struct soap*, const enum ns3__TotalType *, const char*, const char*);

inline int soap_write_ns3__TotalType(struct soap *soap, enum ns3__TotalType const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_ns3__TotalType(soap, p, "ns3:TotalType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_ns3__TotalType(struct soap *soap, const char *URL, enum ns3__TotalType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ns3__TotalType(soap, p, "ns3:TotalType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__TotalType(struct soap *soap, const char *URL, enum ns3__TotalType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ns3__TotalType(soap, p, "ns3:TotalType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum ns3__TotalType * SOAP_FMAC4 soap_get_ns3__TotalType(struct soap*, enum ns3__TotalType *, const char*, const char*);

inline int soap_read_ns3__TotalType(struct soap *soap, enum ns3__TotalType *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_ns3__TotalType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__TotalType(struct soap *soap, const char *URL, enum ns3__TotalType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__TotalType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__TotalType(struct soap *soap, enum ns3__TotalType *p)
{
	if (soap_read_ns3__TotalType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__ChannelType_DEFINED
#define SOAP_TYPE_ns3__ChannelType_DEFINED

inline void soap_default_ns3__ChannelType(struct soap *soap, enum ns3__ChannelType *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_ns3__ChannelType
	*a = SOAP_DEFAULT_ns3__ChannelType;
#else
	*a = (enum ns3__ChannelType)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__ChannelType(struct soap*, const char*, int, const enum ns3__ChannelType *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns3__ChannelType2s(struct soap*, enum ns3__ChannelType);
SOAP_FMAC3 enum ns3__ChannelType * SOAP_FMAC4 soap_in_ns3__ChannelType(struct soap*, const char*, enum ns3__ChannelType *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns3__ChannelType(struct soap*, const char*, enum ns3__ChannelType *);

SOAP_FMAC3 enum ns3__ChannelType * SOAP_FMAC4 soap_new_ns3__ChannelType(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns3__ChannelType(struct soap*, const enum ns3__ChannelType *, const char*, const char*);

inline int soap_write_ns3__ChannelType(struct soap *soap, enum ns3__ChannelType const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_ns3__ChannelType(soap, p, "ns3:ChannelType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_ns3__ChannelType(struct soap *soap, const char *URL, enum ns3__ChannelType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ns3__ChannelType(soap, p, "ns3:ChannelType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__ChannelType(struct soap *soap, const char *URL, enum ns3__ChannelType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ns3__ChannelType(soap, p, "ns3:ChannelType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum ns3__ChannelType * SOAP_FMAC4 soap_get_ns3__ChannelType(struct soap*, enum ns3__ChannelType *, const char*, const char*);

inline int soap_read_ns3__ChannelType(struct soap *soap, enum ns3__ChannelType *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_ns3__ChannelType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__ChannelType(struct soap *soap, const char *URL, enum ns3__ChannelType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__ChannelType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__ChannelType(struct soap *soap, enum ns3__ChannelType *p)
{
	if (soap_read_ns3__ChannelType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__FMFPendingTransactionActionType_DEFINED
#define SOAP_TYPE_ns3__FMFPendingTransactionActionType_DEFINED

inline void soap_default_ns3__FMFPendingTransactionActionType(struct soap *soap, enum ns3__FMFPendingTransactionActionType *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_ns3__FMFPendingTransactionActionType
	*a = SOAP_DEFAULT_ns3__FMFPendingTransactionActionType;
#else
	*a = (enum ns3__FMFPendingTransactionActionType)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__FMFPendingTransactionActionType(struct soap*, const char*, int, const enum ns3__FMFPendingTransactionActionType *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns3__FMFPendingTransactionActionType2s(struct soap*, enum ns3__FMFPendingTransactionActionType);
SOAP_FMAC3 enum ns3__FMFPendingTransactionActionType * SOAP_FMAC4 soap_in_ns3__FMFPendingTransactionActionType(struct soap*, const char*, enum ns3__FMFPendingTransactionActionType *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns3__FMFPendingTransactionActionType(struct soap*, const char*, enum ns3__FMFPendingTransactionActionType *);

SOAP_FMAC3 enum ns3__FMFPendingTransactionActionType * SOAP_FMAC4 soap_new_ns3__FMFPendingTransactionActionType(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns3__FMFPendingTransactionActionType(struct soap*, const enum ns3__FMFPendingTransactionActionType *, const char*, const char*);

inline int soap_write_ns3__FMFPendingTransactionActionType(struct soap *soap, enum ns3__FMFPendingTransactionActionType const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_ns3__FMFPendingTransactionActionType(soap, p, "ns3:FMFPendingTransactionActionType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_ns3__FMFPendingTransactionActionType(struct soap *soap, const char *URL, enum ns3__FMFPendingTransactionActionType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ns3__FMFPendingTransactionActionType(soap, p, "ns3:FMFPendingTransactionActionType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__FMFPendingTransactionActionType(struct soap *soap, const char *URL, enum ns3__FMFPendingTransactionActionType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ns3__FMFPendingTransactionActionType(soap, p, "ns3:FMFPendingTransactionActionType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum ns3__FMFPendingTransactionActionType * SOAP_FMAC4 soap_get_ns3__FMFPendingTransactionActionType(struct soap*, enum ns3__FMFPendingTransactionActionType *, const char*, const char*);

inline int soap_read_ns3__FMFPendingTransactionActionType(struct soap *soap, enum ns3__FMFPendingTransactionActionType *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_ns3__FMFPendingTransactionActionType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__FMFPendingTransactionActionType(struct soap *soap, const char *URL, enum ns3__FMFPendingTransactionActionType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__FMFPendingTransactionActionType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__FMFPendingTransactionActionType(struct soap *soap, enum ns3__FMFPendingTransactionActionType *p)
{
	if (soap_read_ns3__FMFPendingTransactionActionType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__PaymentActionCodeType_DEFINED
#define SOAP_TYPE_ns3__PaymentActionCodeType_DEFINED

inline void soap_default_ns3__PaymentActionCodeType(struct soap *soap, enum ns3__PaymentActionCodeType *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_ns3__PaymentActionCodeType
	*a = SOAP_DEFAULT_ns3__PaymentActionCodeType;
#else
	*a = (enum ns3__PaymentActionCodeType)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__PaymentActionCodeType(struct soap*, const char*, int, const enum ns3__PaymentActionCodeType *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns3__PaymentActionCodeType2s(struct soap*, enum ns3__PaymentActionCodeType);
SOAP_FMAC3 enum ns3__PaymentActionCodeType * SOAP_FMAC4 soap_in_ns3__PaymentActionCodeType(struct soap*, const char*, enum ns3__PaymentActionCodeType *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns3__PaymentActionCodeType(struct soap*, const char*, enum ns3__PaymentActionCodeType *);

SOAP_FMAC3 enum ns3__PaymentActionCodeType * SOAP_FMAC4 soap_new_ns3__PaymentActionCodeType(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns3__PaymentActionCodeType(struct soap*, const enum ns3__PaymentActionCodeType *, const char*, const char*);

inline int soap_write_ns3__PaymentActionCodeType(struct soap *soap, enum ns3__PaymentActionCodeType const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_ns3__PaymentActionCodeType(soap, p, "ns3:PaymentActionCodeType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_ns3__PaymentActionCodeType(struct soap *soap, const char *URL, enum ns3__PaymentActionCodeType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ns3__PaymentActionCodeType(soap, p, "ns3:PaymentActionCodeType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__PaymentActionCodeType(struct soap *soap, const char *URL, enum ns3__PaymentActionCodeType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ns3__PaymentActionCodeType(soap, p, "ns3:PaymentActionCodeType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum ns3__PaymentActionCodeType * SOAP_FMAC4 soap_get_ns3__PaymentActionCodeType(struct soap*, enum ns3__PaymentActionCodeType *, const char*, const char*);

inline int soap_read_ns3__PaymentActionCodeType(struct soap *soap, enum ns3__PaymentActionCodeType *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_ns3__PaymentActionCodeType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__PaymentActionCodeType(struct soap *soap, const char *URL, enum ns3__PaymentActionCodeType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__PaymentActionCodeType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__PaymentActionCodeType(struct soap *soap, enum ns3__PaymentActionCodeType *p)
{
	if (soap_read_ns3__PaymentActionCodeType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__AddressNormalizationStatusCodeType_DEFINED
#define SOAP_TYPE_ns3__AddressNormalizationStatusCodeType_DEFINED

inline void soap_default_ns3__AddressNormalizationStatusCodeType(struct soap *soap, enum ns3__AddressNormalizationStatusCodeType *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_ns3__AddressNormalizationStatusCodeType
	*a = SOAP_DEFAULT_ns3__AddressNormalizationStatusCodeType;
#else
	*a = (enum ns3__AddressNormalizationStatusCodeType)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__AddressNormalizationStatusCodeType(struct soap*, const char*, int, const enum ns3__AddressNormalizationStatusCodeType *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns3__AddressNormalizationStatusCodeType2s(struct soap*, enum ns3__AddressNormalizationStatusCodeType);
SOAP_FMAC3 enum ns3__AddressNormalizationStatusCodeType * SOAP_FMAC4 soap_in_ns3__AddressNormalizationStatusCodeType(struct soap*, const char*, enum ns3__AddressNormalizationStatusCodeType *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns3__AddressNormalizationStatusCodeType(struct soap*, const char*, enum ns3__AddressNormalizationStatusCodeType *);

SOAP_FMAC3 enum ns3__AddressNormalizationStatusCodeType * SOAP_FMAC4 soap_new_ns3__AddressNormalizationStatusCodeType(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns3__AddressNormalizationStatusCodeType(struct soap*, const enum ns3__AddressNormalizationStatusCodeType *, const char*, const char*);

inline int soap_write_ns3__AddressNormalizationStatusCodeType(struct soap *soap, enum ns3__AddressNormalizationStatusCodeType const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_ns3__AddressNormalizationStatusCodeType(soap, p, "ns3:AddressNormalizationStatusCodeType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_ns3__AddressNormalizationStatusCodeType(struct soap *soap, const char *URL, enum ns3__AddressNormalizationStatusCodeType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ns3__AddressNormalizationStatusCodeType(soap, p, "ns3:AddressNormalizationStatusCodeType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__AddressNormalizationStatusCodeType(struct soap *soap, const char *URL, enum ns3__AddressNormalizationStatusCodeType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ns3__AddressNormalizationStatusCodeType(soap, p, "ns3:AddressNormalizationStatusCodeType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum ns3__AddressNormalizationStatusCodeType * SOAP_FMAC4 soap_get_ns3__AddressNormalizationStatusCodeType(struct soap*, enum ns3__AddressNormalizationStatusCodeType *, const char*, const char*);

inline int soap_read_ns3__AddressNormalizationStatusCodeType(struct soap *soap, enum ns3__AddressNormalizationStatusCodeType *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_ns3__AddressNormalizationStatusCodeType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__AddressNormalizationStatusCodeType(struct soap *soap, const char *URL, enum ns3__AddressNormalizationStatusCodeType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__AddressNormalizationStatusCodeType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__AddressNormalizationStatusCodeType(struct soap *soap, enum ns3__AddressNormalizationStatusCodeType *p)
{
	if (soap_read_ns3__AddressNormalizationStatusCodeType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__AddressStatusCodeType_DEFINED
#define SOAP_TYPE_ns3__AddressStatusCodeType_DEFINED

inline void soap_default_ns3__AddressStatusCodeType(struct soap *soap, enum ns3__AddressStatusCodeType *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_ns3__AddressStatusCodeType
	*a = SOAP_DEFAULT_ns3__AddressStatusCodeType;
#else
	*a = (enum ns3__AddressStatusCodeType)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__AddressStatusCodeType(struct soap*, const char*, int, const enum ns3__AddressStatusCodeType *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns3__AddressStatusCodeType2s(struct soap*, enum ns3__AddressStatusCodeType);
SOAP_FMAC3 enum ns3__AddressStatusCodeType * SOAP_FMAC4 soap_in_ns3__AddressStatusCodeType(struct soap*, const char*, enum ns3__AddressStatusCodeType *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns3__AddressStatusCodeType(struct soap*, const char*, enum ns3__AddressStatusCodeType *);

SOAP_FMAC3 enum ns3__AddressStatusCodeType * SOAP_FMAC4 soap_new_ns3__AddressStatusCodeType(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns3__AddressStatusCodeType(struct soap*, const enum ns3__AddressStatusCodeType *, const char*, const char*);

inline int soap_write_ns3__AddressStatusCodeType(struct soap *soap, enum ns3__AddressStatusCodeType const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_ns3__AddressStatusCodeType(soap, p, "ns3:AddressStatusCodeType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_ns3__AddressStatusCodeType(struct soap *soap, const char *URL, enum ns3__AddressStatusCodeType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ns3__AddressStatusCodeType(soap, p, "ns3:AddressStatusCodeType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__AddressStatusCodeType(struct soap *soap, const char *URL, enum ns3__AddressStatusCodeType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ns3__AddressStatusCodeType(soap, p, "ns3:AddressStatusCodeType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum ns3__AddressStatusCodeType * SOAP_FMAC4 soap_get_ns3__AddressStatusCodeType(struct soap*, enum ns3__AddressStatusCodeType *, const char*, const char*);

inline int soap_read_ns3__AddressStatusCodeType(struct soap *soap, enum ns3__AddressStatusCodeType *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_ns3__AddressStatusCodeType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__AddressStatusCodeType(struct soap *soap, const char *URL, enum ns3__AddressStatusCodeType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__AddressStatusCodeType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__AddressStatusCodeType(struct soap *soap, enum ns3__AddressStatusCodeType *p)
{
	if (soap_read_ns3__AddressStatusCodeType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__PaymentStatusCodeType_DEFINED
#define SOAP_TYPE_ns3__PaymentStatusCodeType_DEFINED

inline void soap_default_ns3__PaymentStatusCodeType(struct soap *soap, enum ns3__PaymentStatusCodeType *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_ns3__PaymentStatusCodeType
	*a = SOAP_DEFAULT_ns3__PaymentStatusCodeType;
#else
	*a = (enum ns3__PaymentStatusCodeType)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__PaymentStatusCodeType(struct soap*, const char*, int, const enum ns3__PaymentStatusCodeType *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns3__PaymentStatusCodeType2s(struct soap*, enum ns3__PaymentStatusCodeType);
SOAP_FMAC3 enum ns3__PaymentStatusCodeType * SOAP_FMAC4 soap_in_ns3__PaymentStatusCodeType(struct soap*, const char*, enum ns3__PaymentStatusCodeType *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns3__PaymentStatusCodeType(struct soap*, const char*, enum ns3__PaymentStatusCodeType *);

SOAP_FMAC3 enum ns3__PaymentStatusCodeType * SOAP_FMAC4 soap_new_ns3__PaymentStatusCodeType(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns3__PaymentStatusCodeType(struct soap*, const enum ns3__PaymentStatusCodeType *, const char*, const char*);

inline int soap_write_ns3__PaymentStatusCodeType(struct soap *soap, enum ns3__PaymentStatusCodeType const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_ns3__PaymentStatusCodeType(soap, p, "ns3:PaymentStatusCodeType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_ns3__PaymentStatusCodeType(struct soap *soap, const char *URL, enum ns3__PaymentStatusCodeType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ns3__PaymentStatusCodeType(soap, p, "ns3:PaymentStatusCodeType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__PaymentStatusCodeType(struct soap *soap, const char *URL, enum ns3__PaymentStatusCodeType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ns3__PaymentStatusCodeType(soap, p, "ns3:PaymentStatusCodeType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum ns3__PaymentStatusCodeType * SOAP_FMAC4 soap_get_ns3__PaymentStatusCodeType(struct soap*, enum ns3__PaymentStatusCodeType *, const char*, const char*);

inline int soap_read_ns3__PaymentStatusCodeType(struct soap *soap, enum ns3__PaymentStatusCodeType *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_ns3__PaymentStatusCodeType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__PaymentStatusCodeType(struct soap *soap, const char *URL, enum ns3__PaymentStatusCodeType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__PaymentStatusCodeType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__PaymentStatusCodeType(struct soap *soap, enum ns3__PaymentStatusCodeType *p)
{
	if (soap_read_ns3__PaymentStatusCodeType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__PaymentTransactionCodeType_DEFINED
#define SOAP_TYPE_ns3__PaymentTransactionCodeType_DEFINED

inline void soap_default_ns3__PaymentTransactionCodeType(struct soap *soap, enum ns3__PaymentTransactionCodeType *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_ns3__PaymentTransactionCodeType
	*a = SOAP_DEFAULT_ns3__PaymentTransactionCodeType;
#else
	*a = (enum ns3__PaymentTransactionCodeType)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__PaymentTransactionCodeType(struct soap*, const char*, int, const enum ns3__PaymentTransactionCodeType *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns3__PaymentTransactionCodeType2s(struct soap*, enum ns3__PaymentTransactionCodeType);
SOAP_FMAC3 enum ns3__PaymentTransactionCodeType * SOAP_FMAC4 soap_in_ns3__PaymentTransactionCodeType(struct soap*, const char*, enum ns3__PaymentTransactionCodeType *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns3__PaymentTransactionCodeType(struct soap*, const char*, enum ns3__PaymentTransactionCodeType *);

SOAP_FMAC3 enum ns3__PaymentTransactionCodeType * SOAP_FMAC4 soap_new_ns3__PaymentTransactionCodeType(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns3__PaymentTransactionCodeType(struct soap*, const enum ns3__PaymentTransactionCodeType *, const char*, const char*);

inline int soap_write_ns3__PaymentTransactionCodeType(struct soap *soap, enum ns3__PaymentTransactionCodeType const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_ns3__PaymentTransactionCodeType(soap, p, "ns3:PaymentTransactionCodeType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_ns3__PaymentTransactionCodeType(struct soap *soap, const char *URL, enum ns3__PaymentTransactionCodeType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ns3__PaymentTransactionCodeType(soap, p, "ns3:PaymentTransactionCodeType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__PaymentTransactionCodeType(struct soap *soap, const char *URL, enum ns3__PaymentTransactionCodeType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ns3__PaymentTransactionCodeType(soap, p, "ns3:PaymentTransactionCodeType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum ns3__PaymentTransactionCodeType * SOAP_FMAC4 soap_get_ns3__PaymentTransactionCodeType(struct soap*, enum ns3__PaymentTransactionCodeType *, const char*, const char*);

inline int soap_read_ns3__PaymentTransactionCodeType(struct soap *soap, enum ns3__PaymentTransactionCodeType *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_ns3__PaymentTransactionCodeType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__PaymentTransactionCodeType(struct soap *soap, const char *URL, enum ns3__PaymentTransactionCodeType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__PaymentTransactionCodeType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__PaymentTransactionCodeType(struct soap *soap, enum ns3__PaymentTransactionCodeType *p)
{
	if (soap_read_ns3__PaymentTransactionCodeType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__UserChannelCodeType_DEFINED
#define SOAP_TYPE_ns3__UserChannelCodeType_DEFINED

inline void soap_default_ns3__UserChannelCodeType(struct soap *soap, enum ns3__UserChannelCodeType *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_ns3__UserChannelCodeType
	*a = SOAP_DEFAULT_ns3__UserChannelCodeType;
#else
	*a = (enum ns3__UserChannelCodeType)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__UserChannelCodeType(struct soap*, const char*, int, const enum ns3__UserChannelCodeType *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns3__UserChannelCodeType2s(struct soap*, enum ns3__UserChannelCodeType);
SOAP_FMAC3 enum ns3__UserChannelCodeType * SOAP_FMAC4 soap_in_ns3__UserChannelCodeType(struct soap*, const char*, enum ns3__UserChannelCodeType *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns3__UserChannelCodeType(struct soap*, const char*, enum ns3__UserChannelCodeType *);

SOAP_FMAC3 enum ns3__UserChannelCodeType * SOAP_FMAC4 soap_new_ns3__UserChannelCodeType(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns3__UserChannelCodeType(struct soap*, const enum ns3__UserChannelCodeType *, const char*, const char*);

inline int soap_write_ns3__UserChannelCodeType(struct soap *soap, enum ns3__UserChannelCodeType const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_ns3__UserChannelCodeType(soap, p, "ns3:UserChannelCodeType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_ns3__UserChannelCodeType(struct soap *soap, const char *URL, enum ns3__UserChannelCodeType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ns3__UserChannelCodeType(soap, p, "ns3:UserChannelCodeType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__UserChannelCodeType(struct soap *soap, const char *URL, enum ns3__UserChannelCodeType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ns3__UserChannelCodeType(soap, p, "ns3:UserChannelCodeType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum ns3__UserChannelCodeType * SOAP_FMAC4 soap_get_ns3__UserChannelCodeType(struct soap*, enum ns3__UserChannelCodeType *, const char*, const char*);

inline int soap_read_ns3__UserChannelCodeType(struct soap *soap, enum ns3__UserChannelCodeType *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_ns3__UserChannelCodeType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__UserChannelCodeType(struct soap *soap, const char *URL, enum ns3__UserChannelCodeType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__UserChannelCodeType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__UserChannelCodeType(struct soap *soap, enum ns3__UserChannelCodeType *p)
{
	if (soap_read_ns3__UserChannelCodeType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__IncentiveTypeCodeType_DEFINED
#define SOAP_TYPE_ns3__IncentiveTypeCodeType_DEFINED

inline void soap_default_ns3__IncentiveTypeCodeType(struct soap *soap, enum ns3__IncentiveTypeCodeType *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_ns3__IncentiveTypeCodeType
	*a = SOAP_DEFAULT_ns3__IncentiveTypeCodeType;
#else
	*a = (enum ns3__IncentiveTypeCodeType)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__IncentiveTypeCodeType(struct soap*, const char*, int, const enum ns3__IncentiveTypeCodeType *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns3__IncentiveTypeCodeType2s(struct soap*, enum ns3__IncentiveTypeCodeType);
SOAP_FMAC3 enum ns3__IncentiveTypeCodeType * SOAP_FMAC4 soap_in_ns3__IncentiveTypeCodeType(struct soap*, const char*, enum ns3__IncentiveTypeCodeType *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns3__IncentiveTypeCodeType(struct soap*, const char*, enum ns3__IncentiveTypeCodeType *);

SOAP_FMAC3 enum ns3__IncentiveTypeCodeType * SOAP_FMAC4 soap_new_ns3__IncentiveTypeCodeType(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns3__IncentiveTypeCodeType(struct soap*, const enum ns3__IncentiveTypeCodeType *, const char*, const char*);

inline int soap_write_ns3__IncentiveTypeCodeType(struct soap *soap, enum ns3__IncentiveTypeCodeType const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_ns3__IncentiveTypeCodeType(soap, p, "ns3:IncentiveTypeCodeType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_ns3__IncentiveTypeCodeType(struct soap *soap, const char *URL, enum ns3__IncentiveTypeCodeType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ns3__IncentiveTypeCodeType(soap, p, "ns3:IncentiveTypeCodeType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__IncentiveTypeCodeType(struct soap *soap, const char *URL, enum ns3__IncentiveTypeCodeType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ns3__IncentiveTypeCodeType(soap, p, "ns3:IncentiveTypeCodeType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum ns3__IncentiveTypeCodeType * SOAP_FMAC4 soap_get_ns3__IncentiveTypeCodeType(struct soap*, enum ns3__IncentiveTypeCodeType *, const char*, const char*);

inline int soap_read_ns3__IncentiveTypeCodeType(struct soap *soap, enum ns3__IncentiveTypeCodeType *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_ns3__IncentiveTypeCodeType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__IncentiveTypeCodeType(struct soap *soap, const char *URL, enum ns3__IncentiveTypeCodeType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__IncentiveTypeCodeType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__IncentiveTypeCodeType(struct soap *soap, enum ns3__IncentiveTypeCodeType *p)
{
	if (soap_read_ns3__IncentiveTypeCodeType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__IncentiveRequestDetailLevelCodeType_DEFINED
#define SOAP_TYPE_ns3__IncentiveRequestDetailLevelCodeType_DEFINED

inline void soap_default_ns3__IncentiveRequestDetailLevelCodeType(struct soap *soap, enum ns3__IncentiveRequestDetailLevelCodeType *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_ns3__IncentiveRequestDetailLevelCodeType
	*a = SOAP_DEFAULT_ns3__IncentiveRequestDetailLevelCodeType;
#else
	*a = (enum ns3__IncentiveRequestDetailLevelCodeType)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__IncentiveRequestDetailLevelCodeType(struct soap*, const char*, int, const enum ns3__IncentiveRequestDetailLevelCodeType *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns3__IncentiveRequestDetailLevelCodeType2s(struct soap*, enum ns3__IncentiveRequestDetailLevelCodeType);
SOAP_FMAC3 enum ns3__IncentiveRequestDetailLevelCodeType * SOAP_FMAC4 soap_in_ns3__IncentiveRequestDetailLevelCodeType(struct soap*, const char*, enum ns3__IncentiveRequestDetailLevelCodeType *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns3__IncentiveRequestDetailLevelCodeType(struct soap*, const char*, enum ns3__IncentiveRequestDetailLevelCodeType *);

SOAP_FMAC3 enum ns3__IncentiveRequestDetailLevelCodeType * SOAP_FMAC4 soap_new_ns3__IncentiveRequestDetailLevelCodeType(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns3__IncentiveRequestDetailLevelCodeType(struct soap*, const enum ns3__IncentiveRequestDetailLevelCodeType *, const char*, const char*);

inline int soap_write_ns3__IncentiveRequestDetailLevelCodeType(struct soap *soap, enum ns3__IncentiveRequestDetailLevelCodeType const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_ns3__IncentiveRequestDetailLevelCodeType(soap, p, "ns3:IncentiveRequestDetailLevelCodeType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_ns3__IncentiveRequestDetailLevelCodeType(struct soap *soap, const char *URL, enum ns3__IncentiveRequestDetailLevelCodeType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ns3__IncentiveRequestDetailLevelCodeType(soap, p, "ns3:IncentiveRequestDetailLevelCodeType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__IncentiveRequestDetailLevelCodeType(struct soap *soap, const char *URL, enum ns3__IncentiveRequestDetailLevelCodeType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ns3__IncentiveRequestDetailLevelCodeType(soap, p, "ns3:IncentiveRequestDetailLevelCodeType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum ns3__IncentiveRequestDetailLevelCodeType * SOAP_FMAC4 soap_get_ns3__IncentiveRequestDetailLevelCodeType(struct soap*, enum ns3__IncentiveRequestDetailLevelCodeType *, const char*, const char*);

inline int soap_read_ns3__IncentiveRequestDetailLevelCodeType(struct soap *soap, enum ns3__IncentiveRequestDetailLevelCodeType *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_ns3__IncentiveRequestDetailLevelCodeType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__IncentiveRequestDetailLevelCodeType(struct soap *soap, const char *URL, enum ns3__IncentiveRequestDetailLevelCodeType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__IncentiveRequestDetailLevelCodeType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__IncentiveRequestDetailLevelCodeType(struct soap *soap, enum ns3__IncentiveRequestDetailLevelCodeType *p)
{
	if (soap_read_ns3__IncentiveRequestDetailLevelCodeType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__IncentiveRequestCodeType_DEFINED
#define SOAP_TYPE_ns3__IncentiveRequestCodeType_DEFINED

inline void soap_default_ns3__IncentiveRequestCodeType(struct soap *soap, enum ns3__IncentiveRequestCodeType *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_ns3__IncentiveRequestCodeType
	*a = SOAP_DEFAULT_ns3__IncentiveRequestCodeType;
#else
	*a = (enum ns3__IncentiveRequestCodeType)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__IncentiveRequestCodeType(struct soap*, const char*, int, const enum ns3__IncentiveRequestCodeType *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns3__IncentiveRequestCodeType2s(struct soap*, enum ns3__IncentiveRequestCodeType);
SOAP_FMAC3 enum ns3__IncentiveRequestCodeType * SOAP_FMAC4 soap_in_ns3__IncentiveRequestCodeType(struct soap*, const char*, enum ns3__IncentiveRequestCodeType *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns3__IncentiveRequestCodeType(struct soap*, const char*, enum ns3__IncentiveRequestCodeType *);

SOAP_FMAC3 enum ns3__IncentiveRequestCodeType * SOAP_FMAC4 soap_new_ns3__IncentiveRequestCodeType(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns3__IncentiveRequestCodeType(struct soap*, const enum ns3__IncentiveRequestCodeType *, const char*, const char*);

inline int soap_write_ns3__IncentiveRequestCodeType(struct soap *soap, enum ns3__IncentiveRequestCodeType const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_ns3__IncentiveRequestCodeType(soap, p, "ns3:IncentiveRequestCodeType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_ns3__IncentiveRequestCodeType(struct soap *soap, const char *URL, enum ns3__IncentiveRequestCodeType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ns3__IncentiveRequestCodeType(soap, p, "ns3:IncentiveRequestCodeType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__IncentiveRequestCodeType(struct soap *soap, const char *URL, enum ns3__IncentiveRequestCodeType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ns3__IncentiveRequestCodeType(soap, p, "ns3:IncentiveRequestCodeType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum ns3__IncentiveRequestCodeType * SOAP_FMAC4 soap_get_ns3__IncentiveRequestCodeType(struct soap*, enum ns3__IncentiveRequestCodeType *, const char*, const char*);

inline int soap_read_ns3__IncentiveRequestCodeType(struct soap *soap, enum ns3__IncentiveRequestCodeType *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_ns3__IncentiveRequestCodeType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__IncentiveRequestCodeType(struct soap *soap, const char *URL, enum ns3__IncentiveRequestCodeType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__IncentiveRequestCodeType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__IncentiveRequestCodeType(struct soap *soap, enum ns3__IncentiveRequestCodeType *p)
{
	if (soap_read_ns3__IncentiveRequestCodeType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__APIType_DEFINED
#define SOAP_TYPE_ns3__APIType_DEFINED

inline void soap_default_ns3__APIType(struct soap *soap, enum ns3__APIType *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_ns3__APIType
	*a = SOAP_DEFAULT_ns3__APIType;
#else
	*a = (enum ns3__APIType)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__APIType(struct soap*, const char*, int, const enum ns3__APIType *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns3__APIType2s(struct soap*, enum ns3__APIType);
SOAP_FMAC3 enum ns3__APIType * SOAP_FMAC4 soap_in_ns3__APIType(struct soap*, const char*, enum ns3__APIType *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns3__APIType(struct soap*, const char*, enum ns3__APIType *);

SOAP_FMAC3 enum ns3__APIType * SOAP_FMAC4 soap_new_ns3__APIType(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns3__APIType(struct soap*, const enum ns3__APIType *, const char*, const char*);

inline int soap_write_ns3__APIType(struct soap *soap, enum ns3__APIType const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_ns3__APIType(soap, p, "ns3:APIType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_ns3__APIType(struct soap *soap, const char *URL, enum ns3__APIType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ns3__APIType(soap, p, "ns3:APIType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__APIType(struct soap *soap, const char *URL, enum ns3__APIType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ns3__APIType(soap, p, "ns3:APIType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum ns3__APIType * SOAP_FMAC4 soap_get_ns3__APIType(struct soap*, enum ns3__APIType *, const char*, const char*);

inline int soap_read_ns3__APIType(struct soap *soap, enum ns3__APIType *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_ns3__APIType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__APIType(struct soap *soap, const char *URL, enum ns3__APIType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__APIType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__APIType(struct soap *soap, enum ns3__APIType *p)
{
	if (soap_read_ns3__APIType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__RedeemedOfferType_DEFINED
#define SOAP_TYPE_ns3__RedeemedOfferType_DEFINED

inline void soap_default_ns3__RedeemedOfferType(struct soap *soap, enum ns3__RedeemedOfferType *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_ns3__RedeemedOfferType
	*a = SOAP_DEFAULT_ns3__RedeemedOfferType;
#else
	*a = (enum ns3__RedeemedOfferType)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__RedeemedOfferType(struct soap*, const char*, int, const enum ns3__RedeemedOfferType *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns3__RedeemedOfferType2s(struct soap*, enum ns3__RedeemedOfferType);
SOAP_FMAC3 enum ns3__RedeemedOfferType * SOAP_FMAC4 soap_in_ns3__RedeemedOfferType(struct soap*, const char*, enum ns3__RedeemedOfferType *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns3__RedeemedOfferType(struct soap*, const char*, enum ns3__RedeemedOfferType *);

SOAP_FMAC3 enum ns3__RedeemedOfferType * SOAP_FMAC4 soap_new_ns3__RedeemedOfferType(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns3__RedeemedOfferType(struct soap*, const enum ns3__RedeemedOfferType *, const char*, const char*);

inline int soap_write_ns3__RedeemedOfferType(struct soap *soap, enum ns3__RedeemedOfferType const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_ns3__RedeemedOfferType(soap, p, "ns3:RedeemedOfferType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_ns3__RedeemedOfferType(struct soap *soap, const char *URL, enum ns3__RedeemedOfferType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ns3__RedeemedOfferType(soap, p, "ns3:RedeemedOfferType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__RedeemedOfferType(struct soap *soap, const char *URL, enum ns3__RedeemedOfferType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ns3__RedeemedOfferType(soap, p, "ns3:RedeemedOfferType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum ns3__RedeemedOfferType * SOAP_FMAC4 soap_get_ns3__RedeemedOfferType(struct soap*, enum ns3__RedeemedOfferType *, const char*, const char*);

inline int soap_read_ns3__RedeemedOfferType(struct soap *soap, enum ns3__RedeemedOfferType *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_ns3__RedeemedOfferType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__RedeemedOfferType(struct soap *soap, const char *URL, enum ns3__RedeemedOfferType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__RedeemedOfferType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__RedeemedOfferType(struct soap *soap, enum ns3__RedeemedOfferType *p)
{
	if (soap_read_ns3__RedeemedOfferType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__UnitOfMeasure_DEFINED
#define SOAP_TYPE_ns3__UnitOfMeasure_DEFINED

inline void soap_default_ns3__UnitOfMeasure(struct soap *soap, enum ns3__UnitOfMeasure *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_ns3__UnitOfMeasure
	*a = SOAP_DEFAULT_ns3__UnitOfMeasure;
#else
	*a = (enum ns3__UnitOfMeasure)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__UnitOfMeasure(struct soap*, const char*, int, const enum ns3__UnitOfMeasure *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns3__UnitOfMeasure2s(struct soap*, enum ns3__UnitOfMeasure);
SOAP_FMAC3 enum ns3__UnitOfMeasure * SOAP_FMAC4 soap_in_ns3__UnitOfMeasure(struct soap*, const char*, enum ns3__UnitOfMeasure *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns3__UnitOfMeasure(struct soap*, const char*, enum ns3__UnitOfMeasure *);

SOAP_FMAC3 enum ns3__UnitOfMeasure * SOAP_FMAC4 soap_new_ns3__UnitOfMeasure(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns3__UnitOfMeasure(struct soap*, const enum ns3__UnitOfMeasure *, const char*, const char*);

inline int soap_write_ns3__UnitOfMeasure(struct soap *soap, enum ns3__UnitOfMeasure const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_ns3__UnitOfMeasure(soap, p, "ns3:UnitOfMeasure", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_ns3__UnitOfMeasure(struct soap *soap, const char *URL, enum ns3__UnitOfMeasure const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ns3__UnitOfMeasure(soap, p, "ns3:UnitOfMeasure", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__UnitOfMeasure(struct soap *soap, const char *URL, enum ns3__UnitOfMeasure const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ns3__UnitOfMeasure(soap, p, "ns3:UnitOfMeasure", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum ns3__UnitOfMeasure * SOAP_FMAC4 soap_get_ns3__UnitOfMeasure(struct soap*, enum ns3__UnitOfMeasure *, const char*, const char*);

inline int soap_read_ns3__UnitOfMeasure(struct soap *soap, enum ns3__UnitOfMeasure *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_ns3__UnitOfMeasure(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__UnitOfMeasure(struct soap *soap, const char *URL, enum ns3__UnitOfMeasure *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__UnitOfMeasure(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__UnitOfMeasure(struct soap *soap, enum ns3__UnitOfMeasure *p)
{
	if (soap_read_ns3__UnitOfMeasure(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__RefundType_DEFINED
#define SOAP_TYPE_ns3__RefundType_DEFINED

inline void soap_default_ns3__RefundType(struct soap *soap, enum ns3__RefundType *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_ns3__RefundType
	*a = SOAP_DEFAULT_ns3__RefundType;
#else
	*a = (enum ns3__RefundType)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__RefundType(struct soap*, const char*, int, const enum ns3__RefundType *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns3__RefundType2s(struct soap*, enum ns3__RefundType);
SOAP_FMAC3 enum ns3__RefundType * SOAP_FMAC4 soap_in_ns3__RefundType(struct soap*, const char*, enum ns3__RefundType *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns3__RefundType(struct soap*, const char*, enum ns3__RefundType *);

SOAP_FMAC3 enum ns3__RefundType * SOAP_FMAC4 soap_new_ns3__RefundType(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns3__RefundType(struct soap*, const enum ns3__RefundType *, const char*, const char*);

inline int soap_write_ns3__RefundType(struct soap *soap, enum ns3__RefundType const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_ns3__RefundType(soap, p, "ns3:RefundType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_ns3__RefundType(struct soap *soap, const char *URL, enum ns3__RefundType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ns3__RefundType(soap, p, "ns3:RefundType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__RefundType(struct soap *soap, const char *URL, enum ns3__RefundType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ns3__RefundType(soap, p, "ns3:RefundType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum ns3__RefundType * SOAP_FMAC4 soap_get_ns3__RefundType(struct soap*, enum ns3__RefundType *, const char*, const char*);

inline int soap_read_ns3__RefundType(struct soap *soap, enum ns3__RefundType *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_ns3__RefundType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__RefundType(struct soap *soap, const char *URL, enum ns3__RefundType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__RefundType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__RefundType(struct soap *soap, enum ns3__RefundType *p)
{
	if (soap_read_ns3__RefundType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__BankIDCodeType_DEFINED
#define SOAP_TYPE_ns3__BankIDCodeType_DEFINED

inline void soap_default_ns3__BankIDCodeType(struct soap *soap, enum ns3__BankIDCodeType *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_ns3__BankIDCodeType
	*a = SOAP_DEFAULT_ns3__BankIDCodeType;
#else
	*a = (enum ns3__BankIDCodeType)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__BankIDCodeType(struct soap*, const char*, int, const enum ns3__BankIDCodeType *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns3__BankIDCodeType2s(struct soap*, enum ns3__BankIDCodeType);
SOAP_FMAC3 enum ns3__BankIDCodeType * SOAP_FMAC4 soap_in_ns3__BankIDCodeType(struct soap*, const char*, enum ns3__BankIDCodeType *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns3__BankIDCodeType(struct soap*, const char*, enum ns3__BankIDCodeType *);

SOAP_FMAC3 enum ns3__BankIDCodeType * SOAP_FMAC4 soap_new_ns3__BankIDCodeType(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns3__BankIDCodeType(struct soap*, const enum ns3__BankIDCodeType *, const char*, const char*);

inline int soap_write_ns3__BankIDCodeType(struct soap *soap, enum ns3__BankIDCodeType const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_ns3__BankIDCodeType(soap, p, "ns3:BankIDCodeType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_ns3__BankIDCodeType(struct soap *soap, const char *URL, enum ns3__BankIDCodeType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ns3__BankIDCodeType(soap, p, "ns3:BankIDCodeType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__BankIDCodeType(struct soap *soap, const char *URL, enum ns3__BankIDCodeType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ns3__BankIDCodeType(soap, p, "ns3:BankIDCodeType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum ns3__BankIDCodeType * SOAP_FMAC4 soap_get_ns3__BankIDCodeType(struct soap*, enum ns3__BankIDCodeType *, const char*, const char*);

inline int soap_read_ns3__BankIDCodeType(struct soap *soap, enum ns3__BankIDCodeType *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_ns3__BankIDCodeType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__BankIDCodeType(struct soap *soap, const char *URL, enum ns3__BankIDCodeType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__BankIDCodeType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__BankIDCodeType(struct soap *soap, enum ns3__BankIDCodeType *p)
{
	if (soap_read_ns3__BankIDCodeType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__PaymentNotificationServiceCodeType_DEFINED
#define SOAP_TYPE_ns3__PaymentNotificationServiceCodeType_DEFINED

inline void soap_default_ns3__PaymentNotificationServiceCodeType(struct soap *soap, enum ns3__PaymentNotificationServiceCodeType *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_ns3__PaymentNotificationServiceCodeType
	*a = SOAP_DEFAULT_ns3__PaymentNotificationServiceCodeType;
#else
	*a = (enum ns3__PaymentNotificationServiceCodeType)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__PaymentNotificationServiceCodeType(struct soap*, const char*, int, const enum ns3__PaymentNotificationServiceCodeType *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns3__PaymentNotificationServiceCodeType2s(struct soap*, enum ns3__PaymentNotificationServiceCodeType);
SOAP_FMAC3 enum ns3__PaymentNotificationServiceCodeType * SOAP_FMAC4 soap_in_ns3__PaymentNotificationServiceCodeType(struct soap*, const char*, enum ns3__PaymentNotificationServiceCodeType *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns3__PaymentNotificationServiceCodeType(struct soap*, const char*, enum ns3__PaymentNotificationServiceCodeType *);

SOAP_FMAC3 enum ns3__PaymentNotificationServiceCodeType * SOAP_FMAC4 soap_new_ns3__PaymentNotificationServiceCodeType(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns3__PaymentNotificationServiceCodeType(struct soap*, const enum ns3__PaymentNotificationServiceCodeType *, const char*, const char*);

inline int soap_write_ns3__PaymentNotificationServiceCodeType(struct soap *soap, enum ns3__PaymentNotificationServiceCodeType const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_ns3__PaymentNotificationServiceCodeType(soap, p, "ns3:PaymentNotificationServiceCodeType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_ns3__PaymentNotificationServiceCodeType(struct soap *soap, const char *URL, enum ns3__PaymentNotificationServiceCodeType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ns3__PaymentNotificationServiceCodeType(soap, p, "ns3:PaymentNotificationServiceCodeType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__PaymentNotificationServiceCodeType(struct soap *soap, const char *URL, enum ns3__PaymentNotificationServiceCodeType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ns3__PaymentNotificationServiceCodeType(soap, p, "ns3:PaymentNotificationServiceCodeType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum ns3__PaymentNotificationServiceCodeType * SOAP_FMAC4 soap_get_ns3__PaymentNotificationServiceCodeType(struct soap*, enum ns3__PaymentNotificationServiceCodeType *, const char*, const char*);

inline int soap_read_ns3__PaymentNotificationServiceCodeType(struct soap *soap, enum ns3__PaymentNotificationServiceCodeType *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_ns3__PaymentNotificationServiceCodeType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__PaymentNotificationServiceCodeType(struct soap *soap, const char *URL, enum ns3__PaymentNotificationServiceCodeType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__PaymentNotificationServiceCodeType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__PaymentNotificationServiceCodeType(struct soap *soap, enum ns3__PaymentNotificationServiceCodeType *p)
{
	if (soap_read_ns3__PaymentNotificationServiceCodeType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__CreditCardTypeType_DEFINED
#define SOAP_TYPE_ns3__CreditCardTypeType_DEFINED

inline void soap_default_ns3__CreditCardTypeType(struct soap *soap, enum ns3__CreditCardTypeType *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_ns3__CreditCardTypeType
	*a = SOAP_DEFAULT_ns3__CreditCardTypeType;
#else
	*a = (enum ns3__CreditCardTypeType)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__CreditCardTypeType(struct soap*, const char*, int, const enum ns3__CreditCardTypeType *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns3__CreditCardTypeType2s(struct soap*, enum ns3__CreditCardTypeType);
SOAP_FMAC3 enum ns3__CreditCardTypeType * SOAP_FMAC4 soap_in_ns3__CreditCardTypeType(struct soap*, const char*, enum ns3__CreditCardTypeType *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns3__CreditCardTypeType(struct soap*, const char*, enum ns3__CreditCardTypeType *);

SOAP_FMAC3 enum ns3__CreditCardTypeType * SOAP_FMAC4 soap_new_ns3__CreditCardTypeType(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns3__CreditCardTypeType(struct soap*, const enum ns3__CreditCardTypeType *, const char*, const char*);

inline int soap_write_ns3__CreditCardTypeType(struct soap *soap, enum ns3__CreditCardTypeType const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_ns3__CreditCardTypeType(soap, p, "ns3:CreditCardTypeType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_ns3__CreditCardTypeType(struct soap *soap, const char *URL, enum ns3__CreditCardTypeType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ns3__CreditCardTypeType(soap, p, "ns3:CreditCardTypeType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__CreditCardTypeType(struct soap *soap, const char *URL, enum ns3__CreditCardTypeType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ns3__CreditCardTypeType(soap, p, "ns3:CreditCardTypeType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum ns3__CreditCardTypeType * SOAP_FMAC4 soap_get_ns3__CreditCardTypeType(struct soap*, enum ns3__CreditCardTypeType *, const char*, const char*);

inline int soap_read_ns3__CreditCardTypeType(struct soap *soap, enum ns3__CreditCardTypeType *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_ns3__CreditCardTypeType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__CreditCardTypeType(struct soap *soap, const char *URL, enum ns3__CreditCardTypeType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__CreditCardTypeType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__CreditCardTypeType(struct soap *soap, enum ns3__CreditCardTypeType *p)
{
	if (soap_read_ns3__CreditCardTypeType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__VATStatusCodeType_DEFINED
#define SOAP_TYPE_ns3__VATStatusCodeType_DEFINED

inline void soap_default_ns3__VATStatusCodeType(struct soap *soap, enum ns3__VATStatusCodeType *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_ns3__VATStatusCodeType
	*a = SOAP_DEFAULT_ns3__VATStatusCodeType;
#else
	*a = (enum ns3__VATStatusCodeType)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__VATStatusCodeType(struct soap*, const char*, int, const enum ns3__VATStatusCodeType *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns3__VATStatusCodeType2s(struct soap*, enum ns3__VATStatusCodeType);
SOAP_FMAC3 enum ns3__VATStatusCodeType * SOAP_FMAC4 soap_in_ns3__VATStatusCodeType(struct soap*, const char*, enum ns3__VATStatusCodeType *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns3__VATStatusCodeType(struct soap*, const char*, enum ns3__VATStatusCodeType *);

SOAP_FMAC3 enum ns3__VATStatusCodeType * SOAP_FMAC4 soap_new_ns3__VATStatusCodeType(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns3__VATStatusCodeType(struct soap*, const enum ns3__VATStatusCodeType *, const char*, const char*);

inline int soap_write_ns3__VATStatusCodeType(struct soap *soap, enum ns3__VATStatusCodeType const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_ns3__VATStatusCodeType(soap, p, "ns3:VATStatusCodeType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_ns3__VATStatusCodeType(struct soap *soap, const char *URL, enum ns3__VATStatusCodeType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ns3__VATStatusCodeType(soap, p, "ns3:VATStatusCodeType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__VATStatusCodeType(struct soap *soap, const char *URL, enum ns3__VATStatusCodeType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ns3__VATStatusCodeType(soap, p, "ns3:VATStatusCodeType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum ns3__VATStatusCodeType * SOAP_FMAC4 soap_get_ns3__VATStatusCodeType(struct soap*, enum ns3__VATStatusCodeType *, const char*, const char*);

inline int soap_read_ns3__VATStatusCodeType(struct soap *soap, enum ns3__VATStatusCodeType *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_ns3__VATStatusCodeType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__VATStatusCodeType(struct soap *soap, const char *URL, enum ns3__VATStatusCodeType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__VATStatusCodeType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__VATStatusCodeType(struct soap *soap, enum ns3__VATStatusCodeType *p)
{
	if (soap_read_ns3__VATStatusCodeType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__UserStatusCodeType_DEFINED
#define SOAP_TYPE_ns3__UserStatusCodeType_DEFINED

inline void soap_default_ns3__UserStatusCodeType(struct soap *soap, enum ns3__UserStatusCodeType *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_ns3__UserStatusCodeType
	*a = SOAP_DEFAULT_ns3__UserStatusCodeType;
#else
	*a = (enum ns3__UserStatusCodeType)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__UserStatusCodeType(struct soap*, const char*, int, const enum ns3__UserStatusCodeType *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns3__UserStatusCodeType2s(struct soap*, enum ns3__UserStatusCodeType);
SOAP_FMAC3 enum ns3__UserStatusCodeType * SOAP_FMAC4 soap_in_ns3__UserStatusCodeType(struct soap*, const char*, enum ns3__UserStatusCodeType *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns3__UserStatusCodeType(struct soap*, const char*, enum ns3__UserStatusCodeType *);

SOAP_FMAC3 enum ns3__UserStatusCodeType * SOAP_FMAC4 soap_new_ns3__UserStatusCodeType(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns3__UserStatusCodeType(struct soap*, const enum ns3__UserStatusCodeType *, const char*, const char*);

inline int soap_write_ns3__UserStatusCodeType(struct soap *soap, enum ns3__UserStatusCodeType const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_ns3__UserStatusCodeType(soap, p, "ns3:UserStatusCodeType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_ns3__UserStatusCodeType(struct soap *soap, const char *URL, enum ns3__UserStatusCodeType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ns3__UserStatusCodeType(soap, p, "ns3:UserStatusCodeType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__UserStatusCodeType(struct soap *soap, const char *URL, enum ns3__UserStatusCodeType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ns3__UserStatusCodeType(soap, p, "ns3:UserStatusCodeType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum ns3__UserStatusCodeType * SOAP_FMAC4 soap_get_ns3__UserStatusCodeType(struct soap*, enum ns3__UserStatusCodeType *, const char*, const char*);

inline int soap_read_ns3__UserStatusCodeType(struct soap *soap, enum ns3__UserStatusCodeType *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_ns3__UserStatusCodeType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__UserStatusCodeType(struct soap *soap, const char *URL, enum ns3__UserStatusCodeType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__UserStatusCodeType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__UserStatusCodeType(struct soap *soap, enum ns3__UserStatusCodeType *p)
{
	if (soap_read_ns3__UserStatusCodeType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__UnitCodeType_DEFINED
#define SOAP_TYPE_ns3__UnitCodeType_DEFINED

inline void soap_default_ns3__UnitCodeType(struct soap *soap, enum ns3__UnitCodeType *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_ns3__UnitCodeType
	*a = SOAP_DEFAULT_ns3__UnitCodeType;
#else
	*a = (enum ns3__UnitCodeType)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__UnitCodeType(struct soap*, const char*, int, const enum ns3__UnitCodeType *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns3__UnitCodeType2s(struct soap*, enum ns3__UnitCodeType);
SOAP_FMAC3 enum ns3__UnitCodeType * SOAP_FMAC4 soap_in_ns3__UnitCodeType(struct soap*, const char*, enum ns3__UnitCodeType *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns3__UnitCodeType(struct soap*, const char*, enum ns3__UnitCodeType *);

SOAP_FMAC3 enum ns3__UnitCodeType * SOAP_FMAC4 soap_new_ns3__UnitCodeType(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns3__UnitCodeType(struct soap*, const enum ns3__UnitCodeType *, const char*, const char*);

inline int soap_write_ns3__UnitCodeType(struct soap *soap, enum ns3__UnitCodeType const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_ns3__UnitCodeType(soap, p, "ns3:UnitCodeType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_ns3__UnitCodeType(struct soap *soap, const char *URL, enum ns3__UnitCodeType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ns3__UnitCodeType(soap, p, "ns3:UnitCodeType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__UnitCodeType(struct soap *soap, const char *URL, enum ns3__UnitCodeType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ns3__UnitCodeType(soap, p, "ns3:UnitCodeType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum ns3__UnitCodeType * SOAP_FMAC4 soap_get_ns3__UnitCodeType(struct soap*, enum ns3__UnitCodeType *, const char*, const char*);

inline int soap_read_ns3__UnitCodeType(struct soap *soap, enum ns3__UnitCodeType *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_ns3__UnitCodeType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__UnitCodeType(struct soap *soap, const char *URL, enum ns3__UnitCodeType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__UnitCodeType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__UnitCodeType(struct soap *soap, enum ns3__UnitCodeType *p)
{
	if (soap_read_ns3__UnitCodeType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__StoreVisibilityStatusType_DEFINED
#define SOAP_TYPE_ns3__StoreVisibilityStatusType_DEFINED

inline void soap_default_ns3__StoreVisibilityStatusType(struct soap *soap, enum ns3__StoreVisibilityStatusType *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_ns3__StoreVisibilityStatusType
	*a = SOAP_DEFAULT_ns3__StoreVisibilityStatusType;
#else
	*a = (enum ns3__StoreVisibilityStatusType)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__StoreVisibilityStatusType(struct soap*, const char*, int, const enum ns3__StoreVisibilityStatusType *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns3__StoreVisibilityStatusType2s(struct soap*, enum ns3__StoreVisibilityStatusType);
SOAP_FMAC3 enum ns3__StoreVisibilityStatusType * SOAP_FMAC4 soap_in_ns3__StoreVisibilityStatusType(struct soap*, const char*, enum ns3__StoreVisibilityStatusType *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns3__StoreVisibilityStatusType(struct soap*, const char*, enum ns3__StoreVisibilityStatusType *);

SOAP_FMAC3 enum ns3__StoreVisibilityStatusType * SOAP_FMAC4 soap_new_ns3__StoreVisibilityStatusType(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns3__StoreVisibilityStatusType(struct soap*, const enum ns3__StoreVisibilityStatusType *, const char*, const char*);

inline int soap_write_ns3__StoreVisibilityStatusType(struct soap *soap, enum ns3__StoreVisibilityStatusType const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_ns3__StoreVisibilityStatusType(soap, p, "ns3:StoreVisibilityStatusType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_ns3__StoreVisibilityStatusType(struct soap *soap, const char *URL, enum ns3__StoreVisibilityStatusType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ns3__StoreVisibilityStatusType(soap, p, "ns3:StoreVisibilityStatusType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__StoreVisibilityStatusType(struct soap *soap, const char *URL, enum ns3__StoreVisibilityStatusType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ns3__StoreVisibilityStatusType(soap, p, "ns3:StoreVisibilityStatusType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum ns3__StoreVisibilityStatusType * SOAP_FMAC4 soap_get_ns3__StoreVisibilityStatusType(struct soap*, enum ns3__StoreVisibilityStatusType *, const char*, const char*);

inline int soap_read_ns3__StoreVisibilityStatusType(struct soap *soap, enum ns3__StoreVisibilityStatusType *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_ns3__StoreVisibilityStatusType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__StoreVisibilityStatusType(struct soap *soap, const char *URL, enum ns3__StoreVisibilityStatusType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__StoreVisibilityStatusType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__StoreVisibilityStatusType(struct soap *soap, enum ns3__StoreVisibilityStatusType *p)
{
	if (soap_read_ns3__StoreVisibilityStatusType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__SiteCodeType_DEFINED
#define SOAP_TYPE_ns3__SiteCodeType_DEFINED

inline void soap_default_ns3__SiteCodeType(struct soap *soap, enum ns3__SiteCodeType *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_ns3__SiteCodeType
	*a = SOAP_DEFAULT_ns3__SiteCodeType;
#else
	*a = (enum ns3__SiteCodeType)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__SiteCodeType(struct soap*, const char*, int, const enum ns3__SiteCodeType *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns3__SiteCodeType2s(struct soap*, enum ns3__SiteCodeType);
SOAP_FMAC3 enum ns3__SiteCodeType * SOAP_FMAC4 soap_in_ns3__SiteCodeType(struct soap*, const char*, enum ns3__SiteCodeType *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns3__SiteCodeType(struct soap*, const char*, enum ns3__SiteCodeType *);

SOAP_FMAC3 enum ns3__SiteCodeType * SOAP_FMAC4 soap_new_ns3__SiteCodeType(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns3__SiteCodeType(struct soap*, const enum ns3__SiteCodeType *, const char*, const char*);

inline int soap_write_ns3__SiteCodeType(struct soap *soap, enum ns3__SiteCodeType const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_ns3__SiteCodeType(soap, p, "ns3:SiteCodeType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_ns3__SiteCodeType(struct soap *soap, const char *URL, enum ns3__SiteCodeType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ns3__SiteCodeType(soap, p, "ns3:SiteCodeType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__SiteCodeType(struct soap *soap, const char *URL, enum ns3__SiteCodeType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ns3__SiteCodeType(soap, p, "ns3:SiteCodeType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum ns3__SiteCodeType * SOAP_FMAC4 soap_get_ns3__SiteCodeType(struct soap*, enum ns3__SiteCodeType *, const char*, const char*);

inline int soap_read_ns3__SiteCodeType(struct soap *soap, enum ns3__SiteCodeType *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_ns3__SiteCodeType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__SiteCodeType(struct soap *soap, const char *URL, enum ns3__SiteCodeType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__SiteCodeType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__SiteCodeType(struct soap *soap, enum ns3__SiteCodeType *p)
{
	if (soap_read_ns3__SiteCodeType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__ShippingTermsCodeType_DEFINED
#define SOAP_TYPE_ns3__ShippingTermsCodeType_DEFINED

inline void soap_default_ns3__ShippingTermsCodeType(struct soap *soap, enum ns3__ShippingTermsCodeType *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_ns3__ShippingTermsCodeType
	*a = SOAP_DEFAULT_ns3__ShippingTermsCodeType;
#else
	*a = (enum ns3__ShippingTermsCodeType)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__ShippingTermsCodeType(struct soap*, const char*, int, const enum ns3__ShippingTermsCodeType *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns3__ShippingTermsCodeType2s(struct soap*, enum ns3__ShippingTermsCodeType);
SOAP_FMAC3 enum ns3__ShippingTermsCodeType * SOAP_FMAC4 soap_in_ns3__ShippingTermsCodeType(struct soap*, const char*, enum ns3__ShippingTermsCodeType *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns3__ShippingTermsCodeType(struct soap*, const char*, enum ns3__ShippingTermsCodeType *);

SOAP_FMAC3 enum ns3__ShippingTermsCodeType * SOAP_FMAC4 soap_new_ns3__ShippingTermsCodeType(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns3__ShippingTermsCodeType(struct soap*, const enum ns3__ShippingTermsCodeType *, const char*, const char*);

inline int soap_write_ns3__ShippingTermsCodeType(struct soap *soap, enum ns3__ShippingTermsCodeType const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_ns3__ShippingTermsCodeType(soap, p, "ns3:ShippingTermsCodeType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_ns3__ShippingTermsCodeType(struct soap *soap, const char *URL, enum ns3__ShippingTermsCodeType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ns3__ShippingTermsCodeType(soap, p, "ns3:ShippingTermsCodeType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__ShippingTermsCodeType(struct soap *soap, const char *URL, enum ns3__ShippingTermsCodeType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ns3__ShippingTermsCodeType(soap, p, "ns3:ShippingTermsCodeType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum ns3__ShippingTermsCodeType * SOAP_FMAC4 soap_get_ns3__ShippingTermsCodeType(struct soap*, enum ns3__ShippingTermsCodeType *, const char*, const char*);

inline int soap_read_ns3__ShippingTermsCodeType(struct soap *soap, enum ns3__ShippingTermsCodeType *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_ns3__ShippingTermsCodeType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__ShippingTermsCodeType(struct soap *soap, const char *URL, enum ns3__ShippingTermsCodeType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__ShippingTermsCodeType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__ShippingTermsCodeType(struct soap *soap, enum ns3__ShippingTermsCodeType *p)
{
	if (soap_read_ns3__ShippingTermsCodeType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__ShippingServiceCodeType_DEFINED
#define SOAP_TYPE_ns3__ShippingServiceCodeType_DEFINED

inline void soap_default_ns3__ShippingServiceCodeType(struct soap *soap, enum ns3__ShippingServiceCodeType *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_ns3__ShippingServiceCodeType
	*a = SOAP_DEFAULT_ns3__ShippingServiceCodeType;
#else
	*a = (enum ns3__ShippingServiceCodeType)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__ShippingServiceCodeType(struct soap*, const char*, int, const enum ns3__ShippingServiceCodeType *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns3__ShippingServiceCodeType2s(struct soap*, enum ns3__ShippingServiceCodeType);
SOAP_FMAC3 enum ns3__ShippingServiceCodeType * SOAP_FMAC4 soap_in_ns3__ShippingServiceCodeType(struct soap*, const char*, enum ns3__ShippingServiceCodeType *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns3__ShippingServiceCodeType(struct soap*, const char*, enum ns3__ShippingServiceCodeType *);

SOAP_FMAC3 enum ns3__ShippingServiceCodeType * SOAP_FMAC4 soap_new_ns3__ShippingServiceCodeType(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns3__ShippingServiceCodeType(struct soap*, const enum ns3__ShippingServiceCodeType *, const char*, const char*);

inline int soap_write_ns3__ShippingServiceCodeType(struct soap *soap, enum ns3__ShippingServiceCodeType const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_ns3__ShippingServiceCodeType(soap, p, "ns3:ShippingServiceCodeType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_ns3__ShippingServiceCodeType(struct soap *soap, const char *URL, enum ns3__ShippingServiceCodeType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ns3__ShippingServiceCodeType(soap, p, "ns3:ShippingServiceCodeType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__ShippingServiceCodeType(struct soap *soap, const char *URL, enum ns3__ShippingServiceCodeType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ns3__ShippingServiceCodeType(soap, p, "ns3:ShippingServiceCodeType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum ns3__ShippingServiceCodeType * SOAP_FMAC4 soap_get_ns3__ShippingServiceCodeType(struct soap*, enum ns3__ShippingServiceCodeType *, const char*, const char*);

inline int soap_read_ns3__ShippingServiceCodeType(struct soap *soap, enum ns3__ShippingServiceCodeType *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_ns3__ShippingServiceCodeType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__ShippingServiceCodeType(struct soap *soap, const char *URL, enum ns3__ShippingServiceCodeType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__ShippingServiceCodeType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__ShippingServiceCodeType(struct soap *soap, enum ns3__ShippingServiceCodeType *p)
{
	if (soap_read_ns3__ShippingServiceCodeType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__ShippingRegionCodeType_DEFINED
#define SOAP_TYPE_ns3__ShippingRegionCodeType_DEFINED

inline void soap_default_ns3__ShippingRegionCodeType(struct soap *soap, enum ns3__ShippingRegionCodeType *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_ns3__ShippingRegionCodeType
	*a = SOAP_DEFAULT_ns3__ShippingRegionCodeType;
#else
	*a = (enum ns3__ShippingRegionCodeType)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__ShippingRegionCodeType(struct soap*, const char*, int, const enum ns3__ShippingRegionCodeType *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns3__ShippingRegionCodeType2s(struct soap*, enum ns3__ShippingRegionCodeType);
SOAP_FMAC3 enum ns3__ShippingRegionCodeType * SOAP_FMAC4 soap_in_ns3__ShippingRegionCodeType(struct soap*, const char*, enum ns3__ShippingRegionCodeType *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns3__ShippingRegionCodeType(struct soap*, const char*, enum ns3__ShippingRegionCodeType *);

SOAP_FMAC3 enum ns3__ShippingRegionCodeType * SOAP_FMAC4 soap_new_ns3__ShippingRegionCodeType(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns3__ShippingRegionCodeType(struct soap*, const enum ns3__ShippingRegionCodeType *, const char*, const char*);

inline int soap_write_ns3__ShippingRegionCodeType(struct soap *soap, enum ns3__ShippingRegionCodeType const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_ns3__ShippingRegionCodeType(soap, p, "ns3:ShippingRegionCodeType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_ns3__ShippingRegionCodeType(struct soap *soap, const char *URL, enum ns3__ShippingRegionCodeType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ns3__ShippingRegionCodeType(soap, p, "ns3:ShippingRegionCodeType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__ShippingRegionCodeType(struct soap *soap, const char *URL, enum ns3__ShippingRegionCodeType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ns3__ShippingRegionCodeType(soap, p, "ns3:ShippingRegionCodeType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum ns3__ShippingRegionCodeType * SOAP_FMAC4 soap_get_ns3__ShippingRegionCodeType(struct soap*, enum ns3__ShippingRegionCodeType *, const char*, const char*);

inline int soap_read_ns3__ShippingRegionCodeType(struct soap *soap, enum ns3__ShippingRegionCodeType *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_ns3__ShippingRegionCodeType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__ShippingRegionCodeType(struct soap *soap, const char *URL, enum ns3__ShippingRegionCodeType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__ShippingRegionCodeType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__ShippingRegionCodeType(struct soap *soap, enum ns3__ShippingRegionCodeType *p)
{
	if (soap_read_ns3__ShippingRegionCodeType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__ShippingRatesTypeCodeType_DEFINED
#define SOAP_TYPE_ns3__ShippingRatesTypeCodeType_DEFINED

inline void soap_default_ns3__ShippingRatesTypeCodeType(struct soap *soap, enum ns3__ShippingRatesTypeCodeType *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_ns3__ShippingRatesTypeCodeType
	*a = SOAP_DEFAULT_ns3__ShippingRatesTypeCodeType;
#else
	*a = (enum ns3__ShippingRatesTypeCodeType)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__ShippingRatesTypeCodeType(struct soap*, const char*, int, const enum ns3__ShippingRatesTypeCodeType *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns3__ShippingRatesTypeCodeType2s(struct soap*, enum ns3__ShippingRatesTypeCodeType);
SOAP_FMAC3 enum ns3__ShippingRatesTypeCodeType * SOAP_FMAC4 soap_in_ns3__ShippingRatesTypeCodeType(struct soap*, const char*, enum ns3__ShippingRatesTypeCodeType *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns3__ShippingRatesTypeCodeType(struct soap*, const char*, enum ns3__ShippingRatesTypeCodeType *);

SOAP_FMAC3 enum ns3__ShippingRatesTypeCodeType * SOAP_FMAC4 soap_new_ns3__ShippingRatesTypeCodeType(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns3__ShippingRatesTypeCodeType(struct soap*, const enum ns3__ShippingRatesTypeCodeType *, const char*, const char*);

inline int soap_write_ns3__ShippingRatesTypeCodeType(struct soap *soap, enum ns3__ShippingRatesTypeCodeType const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_ns3__ShippingRatesTypeCodeType(soap, p, "ns3:ShippingRatesTypeCodeType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_ns3__ShippingRatesTypeCodeType(struct soap *soap, const char *URL, enum ns3__ShippingRatesTypeCodeType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ns3__ShippingRatesTypeCodeType(soap, p, "ns3:ShippingRatesTypeCodeType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__ShippingRatesTypeCodeType(struct soap *soap, const char *URL, enum ns3__ShippingRatesTypeCodeType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ns3__ShippingRatesTypeCodeType(soap, p, "ns3:ShippingRatesTypeCodeType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum ns3__ShippingRatesTypeCodeType * SOAP_FMAC4 soap_get_ns3__ShippingRatesTypeCodeType(struct soap*, enum ns3__ShippingRatesTypeCodeType *, const char*, const char*);

inline int soap_read_ns3__ShippingRatesTypeCodeType(struct soap *soap, enum ns3__ShippingRatesTypeCodeType *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_ns3__ShippingRatesTypeCodeType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__ShippingRatesTypeCodeType(struct soap *soap, const char *URL, enum ns3__ShippingRatesTypeCodeType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__ShippingRatesTypeCodeType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__ShippingRatesTypeCodeType(struct soap *soap, enum ns3__ShippingRatesTypeCodeType *p)
{
	if (soap_read_ns3__ShippingRatesTypeCodeType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__ShippingPackageCodeType_DEFINED
#define SOAP_TYPE_ns3__ShippingPackageCodeType_DEFINED

inline void soap_default_ns3__ShippingPackageCodeType(struct soap *soap, enum ns3__ShippingPackageCodeType *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_ns3__ShippingPackageCodeType
	*a = SOAP_DEFAULT_ns3__ShippingPackageCodeType;
#else
	*a = (enum ns3__ShippingPackageCodeType)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__ShippingPackageCodeType(struct soap*, const char*, int, const enum ns3__ShippingPackageCodeType *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns3__ShippingPackageCodeType2s(struct soap*, enum ns3__ShippingPackageCodeType);
SOAP_FMAC3 enum ns3__ShippingPackageCodeType * SOAP_FMAC4 soap_in_ns3__ShippingPackageCodeType(struct soap*, const char*, enum ns3__ShippingPackageCodeType *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns3__ShippingPackageCodeType(struct soap*, const char*, enum ns3__ShippingPackageCodeType *);

SOAP_FMAC3 enum ns3__ShippingPackageCodeType * SOAP_FMAC4 soap_new_ns3__ShippingPackageCodeType(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns3__ShippingPackageCodeType(struct soap*, const enum ns3__ShippingPackageCodeType *, const char*, const char*);

inline int soap_write_ns3__ShippingPackageCodeType(struct soap *soap, enum ns3__ShippingPackageCodeType const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_ns3__ShippingPackageCodeType(soap, p, "ns3:ShippingPackageCodeType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_ns3__ShippingPackageCodeType(struct soap *soap, const char *URL, enum ns3__ShippingPackageCodeType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ns3__ShippingPackageCodeType(soap, p, "ns3:ShippingPackageCodeType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__ShippingPackageCodeType(struct soap *soap, const char *URL, enum ns3__ShippingPackageCodeType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ns3__ShippingPackageCodeType(soap, p, "ns3:ShippingPackageCodeType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum ns3__ShippingPackageCodeType * SOAP_FMAC4 soap_get_ns3__ShippingPackageCodeType(struct soap*, enum ns3__ShippingPackageCodeType *, const char*, const char*);

inline int soap_read_ns3__ShippingPackageCodeType(struct soap *soap, enum ns3__ShippingPackageCodeType *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_ns3__ShippingPackageCodeType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__ShippingPackageCodeType(struct soap *soap, const char *URL, enum ns3__ShippingPackageCodeType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__ShippingPackageCodeType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__ShippingPackageCodeType(struct soap *soap, enum ns3__ShippingPackageCodeType *p)
{
	if (soap_read_ns3__ShippingPackageCodeType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__ShippingOptionCodeType_DEFINED
#define SOAP_TYPE_ns3__ShippingOptionCodeType_DEFINED

inline void soap_default_ns3__ShippingOptionCodeType(struct soap *soap, enum ns3__ShippingOptionCodeType *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_ns3__ShippingOptionCodeType
	*a = SOAP_DEFAULT_ns3__ShippingOptionCodeType;
#else
	*a = (enum ns3__ShippingOptionCodeType)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__ShippingOptionCodeType(struct soap*, const char*, int, const enum ns3__ShippingOptionCodeType *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns3__ShippingOptionCodeType2s(struct soap*, enum ns3__ShippingOptionCodeType);
SOAP_FMAC3 enum ns3__ShippingOptionCodeType * SOAP_FMAC4 soap_in_ns3__ShippingOptionCodeType(struct soap*, const char*, enum ns3__ShippingOptionCodeType *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns3__ShippingOptionCodeType(struct soap*, const char*, enum ns3__ShippingOptionCodeType *);

SOAP_FMAC3 enum ns3__ShippingOptionCodeType * SOAP_FMAC4 soap_new_ns3__ShippingOptionCodeType(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns3__ShippingOptionCodeType(struct soap*, const enum ns3__ShippingOptionCodeType *, const char*, const char*);

inline int soap_write_ns3__ShippingOptionCodeType(struct soap *soap, enum ns3__ShippingOptionCodeType const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_ns3__ShippingOptionCodeType(soap, p, "ns3:ShippingOptionCodeType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_ns3__ShippingOptionCodeType(struct soap *soap, const char *URL, enum ns3__ShippingOptionCodeType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ns3__ShippingOptionCodeType(soap, p, "ns3:ShippingOptionCodeType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__ShippingOptionCodeType(struct soap *soap, const char *URL, enum ns3__ShippingOptionCodeType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ns3__ShippingOptionCodeType(soap, p, "ns3:ShippingOptionCodeType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum ns3__ShippingOptionCodeType * SOAP_FMAC4 soap_get_ns3__ShippingOptionCodeType(struct soap*, enum ns3__ShippingOptionCodeType *, const char*, const char*);

inline int soap_read_ns3__ShippingOptionCodeType(struct soap *soap, enum ns3__ShippingOptionCodeType *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_ns3__ShippingOptionCodeType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__ShippingOptionCodeType(struct soap *soap, const char *URL, enum ns3__ShippingOptionCodeType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__ShippingOptionCodeType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__ShippingOptionCodeType(struct soap *soap, enum ns3__ShippingOptionCodeType *p)
{
	if (soap_read_ns3__ShippingOptionCodeType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__SeverityCodeType_DEFINED
#define SOAP_TYPE_ns3__SeverityCodeType_DEFINED

inline void soap_default_ns3__SeverityCodeType(struct soap *soap, enum ns3__SeverityCodeType *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_ns3__SeverityCodeType
	*a = SOAP_DEFAULT_ns3__SeverityCodeType;
#else
	*a = (enum ns3__SeverityCodeType)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__SeverityCodeType(struct soap*, const char*, int, const enum ns3__SeverityCodeType *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns3__SeverityCodeType2s(struct soap*, enum ns3__SeverityCodeType);
SOAP_FMAC3 enum ns3__SeverityCodeType * SOAP_FMAC4 soap_in_ns3__SeverityCodeType(struct soap*, const char*, enum ns3__SeverityCodeType *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns3__SeverityCodeType(struct soap*, const char*, enum ns3__SeverityCodeType *);

SOAP_FMAC3 enum ns3__SeverityCodeType * SOAP_FMAC4 soap_new_ns3__SeverityCodeType(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns3__SeverityCodeType(struct soap*, const enum ns3__SeverityCodeType *, const char*, const char*);

inline int soap_write_ns3__SeverityCodeType(struct soap *soap, enum ns3__SeverityCodeType const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_ns3__SeverityCodeType(soap, p, "ns3:SeverityCodeType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_ns3__SeverityCodeType(struct soap *soap, const char *URL, enum ns3__SeverityCodeType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ns3__SeverityCodeType(soap, p, "ns3:SeverityCodeType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__SeverityCodeType(struct soap *soap, const char *URL, enum ns3__SeverityCodeType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ns3__SeverityCodeType(soap, p, "ns3:SeverityCodeType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum ns3__SeverityCodeType * SOAP_FMAC4 soap_get_ns3__SeverityCodeType(struct soap*, enum ns3__SeverityCodeType *, const char*, const char*);

inline int soap_read_ns3__SeverityCodeType(struct soap *soap, enum ns3__SeverityCodeType *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_ns3__SeverityCodeType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__SeverityCodeType(struct soap *soap, const char *URL, enum ns3__SeverityCodeType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__SeverityCodeType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__SeverityCodeType(struct soap *soap, enum ns3__SeverityCodeType *p)
{
	if (soap_read_ns3__SeverityCodeType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__SellerPaymentMethodCodeType_DEFINED
#define SOAP_TYPE_ns3__SellerPaymentMethodCodeType_DEFINED

inline void soap_default_ns3__SellerPaymentMethodCodeType(struct soap *soap, enum ns3__SellerPaymentMethodCodeType *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_ns3__SellerPaymentMethodCodeType
	*a = SOAP_DEFAULT_ns3__SellerPaymentMethodCodeType;
#else
	*a = (enum ns3__SellerPaymentMethodCodeType)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__SellerPaymentMethodCodeType(struct soap*, const char*, int, const enum ns3__SellerPaymentMethodCodeType *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns3__SellerPaymentMethodCodeType2s(struct soap*, enum ns3__SellerPaymentMethodCodeType);
SOAP_FMAC3 enum ns3__SellerPaymentMethodCodeType * SOAP_FMAC4 soap_in_ns3__SellerPaymentMethodCodeType(struct soap*, const char*, enum ns3__SellerPaymentMethodCodeType *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns3__SellerPaymentMethodCodeType(struct soap*, const char*, enum ns3__SellerPaymentMethodCodeType *);

SOAP_FMAC3 enum ns3__SellerPaymentMethodCodeType * SOAP_FMAC4 soap_new_ns3__SellerPaymentMethodCodeType(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns3__SellerPaymentMethodCodeType(struct soap*, const enum ns3__SellerPaymentMethodCodeType *, const char*, const char*);

inline int soap_write_ns3__SellerPaymentMethodCodeType(struct soap *soap, enum ns3__SellerPaymentMethodCodeType const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_ns3__SellerPaymentMethodCodeType(soap, p, "ns3:SellerPaymentMethodCodeType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_ns3__SellerPaymentMethodCodeType(struct soap *soap, const char *URL, enum ns3__SellerPaymentMethodCodeType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ns3__SellerPaymentMethodCodeType(soap, p, "ns3:SellerPaymentMethodCodeType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__SellerPaymentMethodCodeType(struct soap *soap, const char *URL, enum ns3__SellerPaymentMethodCodeType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ns3__SellerPaymentMethodCodeType(soap, p, "ns3:SellerPaymentMethodCodeType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum ns3__SellerPaymentMethodCodeType * SOAP_FMAC4 soap_get_ns3__SellerPaymentMethodCodeType(struct soap*, enum ns3__SellerPaymentMethodCodeType *, const char*, const char*);

inline int soap_read_ns3__SellerPaymentMethodCodeType(struct soap *soap, enum ns3__SellerPaymentMethodCodeType *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_ns3__SellerPaymentMethodCodeType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__SellerPaymentMethodCodeType(struct soap *soap, const char *URL, enum ns3__SellerPaymentMethodCodeType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__SellerPaymentMethodCodeType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__SellerPaymentMethodCodeType(struct soap *soap, enum ns3__SellerPaymentMethodCodeType *p)
{
	if (soap_read_ns3__SellerPaymentMethodCodeType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__SellerLevelCodeType_DEFINED
#define SOAP_TYPE_ns3__SellerLevelCodeType_DEFINED

inline void soap_default_ns3__SellerLevelCodeType(struct soap *soap, enum ns3__SellerLevelCodeType *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_ns3__SellerLevelCodeType
	*a = SOAP_DEFAULT_ns3__SellerLevelCodeType;
#else
	*a = (enum ns3__SellerLevelCodeType)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__SellerLevelCodeType(struct soap*, const char*, int, const enum ns3__SellerLevelCodeType *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns3__SellerLevelCodeType2s(struct soap*, enum ns3__SellerLevelCodeType);
SOAP_FMAC3 enum ns3__SellerLevelCodeType * SOAP_FMAC4 soap_in_ns3__SellerLevelCodeType(struct soap*, const char*, enum ns3__SellerLevelCodeType *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns3__SellerLevelCodeType(struct soap*, const char*, enum ns3__SellerLevelCodeType *);

SOAP_FMAC3 enum ns3__SellerLevelCodeType * SOAP_FMAC4 soap_new_ns3__SellerLevelCodeType(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns3__SellerLevelCodeType(struct soap*, const enum ns3__SellerLevelCodeType *, const char*, const char*);

inline int soap_write_ns3__SellerLevelCodeType(struct soap *soap, enum ns3__SellerLevelCodeType const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_ns3__SellerLevelCodeType(soap, p, "ns3:SellerLevelCodeType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_ns3__SellerLevelCodeType(struct soap *soap, const char *URL, enum ns3__SellerLevelCodeType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ns3__SellerLevelCodeType(soap, p, "ns3:SellerLevelCodeType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__SellerLevelCodeType(struct soap *soap, const char *URL, enum ns3__SellerLevelCodeType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ns3__SellerLevelCodeType(soap, p, "ns3:SellerLevelCodeType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum ns3__SellerLevelCodeType * SOAP_FMAC4 soap_get_ns3__SellerLevelCodeType(struct soap*, enum ns3__SellerLevelCodeType *, const char*, const char*);

inline int soap_read_ns3__SellerLevelCodeType(struct soap *soap, enum ns3__SellerLevelCodeType *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_ns3__SellerLevelCodeType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__SellerLevelCodeType(struct soap *soap, const char *URL, enum ns3__SellerLevelCodeType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__SellerLevelCodeType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__SellerLevelCodeType(struct soap *soap, enum ns3__SellerLevelCodeType *p)
{
	if (soap_read_ns3__SellerLevelCodeType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__PurchasePurposeTypeCodeType_DEFINED
#define SOAP_TYPE_ns3__PurchasePurposeTypeCodeType_DEFINED

inline void soap_default_ns3__PurchasePurposeTypeCodeType(struct soap *soap, enum ns3__PurchasePurposeTypeCodeType *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_ns3__PurchasePurposeTypeCodeType
	*a = SOAP_DEFAULT_ns3__PurchasePurposeTypeCodeType;
#else
	*a = (enum ns3__PurchasePurposeTypeCodeType)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__PurchasePurposeTypeCodeType(struct soap*, const char*, int, const enum ns3__PurchasePurposeTypeCodeType *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns3__PurchasePurposeTypeCodeType2s(struct soap*, enum ns3__PurchasePurposeTypeCodeType);
SOAP_FMAC3 enum ns3__PurchasePurposeTypeCodeType * SOAP_FMAC4 soap_in_ns3__PurchasePurposeTypeCodeType(struct soap*, const char*, enum ns3__PurchasePurposeTypeCodeType *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns3__PurchasePurposeTypeCodeType(struct soap*, const char*, enum ns3__PurchasePurposeTypeCodeType *);

SOAP_FMAC3 enum ns3__PurchasePurposeTypeCodeType * SOAP_FMAC4 soap_new_ns3__PurchasePurposeTypeCodeType(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns3__PurchasePurposeTypeCodeType(struct soap*, const enum ns3__PurchasePurposeTypeCodeType *, const char*, const char*);

inline int soap_write_ns3__PurchasePurposeTypeCodeType(struct soap *soap, enum ns3__PurchasePurposeTypeCodeType const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_ns3__PurchasePurposeTypeCodeType(soap, p, "ns3:PurchasePurposeTypeCodeType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_ns3__PurchasePurposeTypeCodeType(struct soap *soap, const char *URL, enum ns3__PurchasePurposeTypeCodeType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ns3__PurchasePurposeTypeCodeType(soap, p, "ns3:PurchasePurposeTypeCodeType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__PurchasePurposeTypeCodeType(struct soap *soap, const char *URL, enum ns3__PurchasePurposeTypeCodeType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ns3__PurchasePurposeTypeCodeType(soap, p, "ns3:PurchasePurposeTypeCodeType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum ns3__PurchasePurposeTypeCodeType * SOAP_FMAC4 soap_get_ns3__PurchasePurposeTypeCodeType(struct soap*, enum ns3__PurchasePurposeTypeCodeType *, const char*, const char*);

inline int soap_read_ns3__PurchasePurposeTypeCodeType(struct soap *soap, enum ns3__PurchasePurposeTypeCodeType *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_ns3__PurchasePurposeTypeCodeType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__PurchasePurposeTypeCodeType(struct soap *soap, const char *URL, enum ns3__PurchasePurposeTypeCodeType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__PurchasePurposeTypeCodeType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__PurchasePurposeTypeCodeType(struct soap *soap, enum ns3__PurchasePurposeTypeCodeType *p)
{
	if (soap_read_ns3__PurchasePurposeTypeCodeType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__PromotionSchemeCodeType_DEFINED
#define SOAP_TYPE_ns3__PromotionSchemeCodeType_DEFINED

inline void soap_default_ns3__PromotionSchemeCodeType(struct soap *soap, enum ns3__PromotionSchemeCodeType *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_ns3__PromotionSchemeCodeType
	*a = SOAP_DEFAULT_ns3__PromotionSchemeCodeType;
#else
	*a = (enum ns3__PromotionSchemeCodeType)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__PromotionSchemeCodeType(struct soap*, const char*, int, const enum ns3__PromotionSchemeCodeType *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns3__PromotionSchemeCodeType2s(struct soap*, enum ns3__PromotionSchemeCodeType);
SOAP_FMAC3 enum ns3__PromotionSchemeCodeType * SOAP_FMAC4 soap_in_ns3__PromotionSchemeCodeType(struct soap*, const char*, enum ns3__PromotionSchemeCodeType *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns3__PromotionSchemeCodeType(struct soap*, const char*, enum ns3__PromotionSchemeCodeType *);

SOAP_FMAC3 enum ns3__PromotionSchemeCodeType * SOAP_FMAC4 soap_new_ns3__PromotionSchemeCodeType(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns3__PromotionSchemeCodeType(struct soap*, const enum ns3__PromotionSchemeCodeType *, const char*, const char*);

inline int soap_write_ns3__PromotionSchemeCodeType(struct soap *soap, enum ns3__PromotionSchemeCodeType const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_ns3__PromotionSchemeCodeType(soap, p, "ns3:PromotionSchemeCodeType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_ns3__PromotionSchemeCodeType(struct soap *soap, const char *URL, enum ns3__PromotionSchemeCodeType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ns3__PromotionSchemeCodeType(soap, p, "ns3:PromotionSchemeCodeType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__PromotionSchemeCodeType(struct soap *soap, const char *URL, enum ns3__PromotionSchemeCodeType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ns3__PromotionSchemeCodeType(soap, p, "ns3:PromotionSchemeCodeType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum ns3__PromotionSchemeCodeType * SOAP_FMAC4 soap_get_ns3__PromotionSchemeCodeType(struct soap*, enum ns3__PromotionSchemeCodeType *, const char*, const char*);

inline int soap_read_ns3__PromotionSchemeCodeType(struct soap *soap, enum ns3__PromotionSchemeCodeType *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_ns3__PromotionSchemeCodeType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__PromotionSchemeCodeType(struct soap *soap, const char *URL, enum ns3__PromotionSchemeCodeType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__PromotionSchemeCodeType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__PromotionSchemeCodeType(struct soap *soap, enum ns3__PromotionSchemeCodeType *p)
{
	if (soap_read_ns3__PromotionSchemeCodeType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__PromotionMethodCodeType_DEFINED
#define SOAP_TYPE_ns3__PromotionMethodCodeType_DEFINED

inline void soap_default_ns3__PromotionMethodCodeType(struct soap *soap, enum ns3__PromotionMethodCodeType *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_ns3__PromotionMethodCodeType
	*a = SOAP_DEFAULT_ns3__PromotionMethodCodeType;
#else
	*a = (enum ns3__PromotionMethodCodeType)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__PromotionMethodCodeType(struct soap*, const char*, int, const enum ns3__PromotionMethodCodeType *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns3__PromotionMethodCodeType2s(struct soap*, enum ns3__PromotionMethodCodeType);
SOAP_FMAC3 enum ns3__PromotionMethodCodeType * SOAP_FMAC4 soap_in_ns3__PromotionMethodCodeType(struct soap*, const char*, enum ns3__PromotionMethodCodeType *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns3__PromotionMethodCodeType(struct soap*, const char*, enum ns3__PromotionMethodCodeType *);

SOAP_FMAC3 enum ns3__PromotionMethodCodeType * SOAP_FMAC4 soap_new_ns3__PromotionMethodCodeType(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns3__PromotionMethodCodeType(struct soap*, const enum ns3__PromotionMethodCodeType *, const char*, const char*);

inline int soap_write_ns3__PromotionMethodCodeType(struct soap *soap, enum ns3__PromotionMethodCodeType const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_ns3__PromotionMethodCodeType(soap, p, "ns3:PromotionMethodCodeType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_ns3__PromotionMethodCodeType(struct soap *soap, const char *URL, enum ns3__PromotionMethodCodeType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ns3__PromotionMethodCodeType(soap, p, "ns3:PromotionMethodCodeType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__PromotionMethodCodeType(struct soap *soap, const char *URL, enum ns3__PromotionMethodCodeType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ns3__PromotionMethodCodeType(soap, p, "ns3:PromotionMethodCodeType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum ns3__PromotionMethodCodeType * SOAP_FMAC4 soap_get_ns3__PromotionMethodCodeType(struct soap*, enum ns3__PromotionMethodCodeType *, const char*, const char*);

inline int soap_read_ns3__PromotionMethodCodeType(struct soap *soap, enum ns3__PromotionMethodCodeType *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_ns3__PromotionMethodCodeType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__PromotionMethodCodeType(struct soap *soap, const char *URL, enum ns3__PromotionMethodCodeType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__PromotionMethodCodeType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__PromotionMethodCodeType(struct soap *soap, enum ns3__PromotionMethodCodeType *p)
{
	if (soap_read_ns3__PromotionMethodCodeType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__PromotionItemSelectionCodeType_DEFINED
#define SOAP_TYPE_ns3__PromotionItemSelectionCodeType_DEFINED

inline void soap_default_ns3__PromotionItemSelectionCodeType(struct soap *soap, enum ns3__PromotionItemSelectionCodeType *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_ns3__PromotionItemSelectionCodeType
	*a = SOAP_DEFAULT_ns3__PromotionItemSelectionCodeType;
#else
	*a = (enum ns3__PromotionItemSelectionCodeType)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__PromotionItemSelectionCodeType(struct soap*, const char*, int, const enum ns3__PromotionItemSelectionCodeType *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns3__PromotionItemSelectionCodeType2s(struct soap*, enum ns3__PromotionItemSelectionCodeType);
SOAP_FMAC3 enum ns3__PromotionItemSelectionCodeType * SOAP_FMAC4 soap_in_ns3__PromotionItemSelectionCodeType(struct soap*, const char*, enum ns3__PromotionItemSelectionCodeType *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns3__PromotionItemSelectionCodeType(struct soap*, const char*, enum ns3__PromotionItemSelectionCodeType *);

SOAP_FMAC3 enum ns3__PromotionItemSelectionCodeType * SOAP_FMAC4 soap_new_ns3__PromotionItemSelectionCodeType(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns3__PromotionItemSelectionCodeType(struct soap*, const enum ns3__PromotionItemSelectionCodeType *, const char*, const char*);

inline int soap_write_ns3__PromotionItemSelectionCodeType(struct soap *soap, enum ns3__PromotionItemSelectionCodeType const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_ns3__PromotionItemSelectionCodeType(soap, p, "ns3:PromotionItemSelectionCodeType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_ns3__PromotionItemSelectionCodeType(struct soap *soap, const char *URL, enum ns3__PromotionItemSelectionCodeType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ns3__PromotionItemSelectionCodeType(soap, p, "ns3:PromotionItemSelectionCodeType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__PromotionItemSelectionCodeType(struct soap *soap, const char *URL, enum ns3__PromotionItemSelectionCodeType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ns3__PromotionItemSelectionCodeType(soap, p, "ns3:PromotionItemSelectionCodeType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum ns3__PromotionItemSelectionCodeType * SOAP_FMAC4 soap_get_ns3__PromotionItemSelectionCodeType(struct soap*, enum ns3__PromotionItemSelectionCodeType *, const char*, const char*);

inline int soap_read_ns3__PromotionItemSelectionCodeType(struct soap *soap, enum ns3__PromotionItemSelectionCodeType *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_ns3__PromotionItemSelectionCodeType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__PromotionItemSelectionCodeType(struct soap *soap, const char *URL, enum ns3__PromotionItemSelectionCodeType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__PromotionItemSelectionCodeType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__PromotionItemSelectionCodeType(struct soap *soap, enum ns3__PromotionItemSelectionCodeType *p)
{
	if (soap_read_ns3__PromotionItemSelectionCodeType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__PromotionItemPriceTypeCodeType_DEFINED
#define SOAP_TYPE_ns3__PromotionItemPriceTypeCodeType_DEFINED

inline void soap_default_ns3__PromotionItemPriceTypeCodeType(struct soap *soap, enum ns3__PromotionItemPriceTypeCodeType *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_ns3__PromotionItemPriceTypeCodeType
	*a = SOAP_DEFAULT_ns3__PromotionItemPriceTypeCodeType;
#else
	*a = (enum ns3__PromotionItemPriceTypeCodeType)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__PromotionItemPriceTypeCodeType(struct soap*, const char*, int, const enum ns3__PromotionItemPriceTypeCodeType *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns3__PromotionItemPriceTypeCodeType2s(struct soap*, enum ns3__PromotionItemPriceTypeCodeType);
SOAP_FMAC3 enum ns3__PromotionItemPriceTypeCodeType * SOAP_FMAC4 soap_in_ns3__PromotionItemPriceTypeCodeType(struct soap*, const char*, enum ns3__PromotionItemPriceTypeCodeType *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns3__PromotionItemPriceTypeCodeType(struct soap*, const char*, enum ns3__PromotionItemPriceTypeCodeType *);

SOAP_FMAC3 enum ns3__PromotionItemPriceTypeCodeType * SOAP_FMAC4 soap_new_ns3__PromotionItemPriceTypeCodeType(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns3__PromotionItemPriceTypeCodeType(struct soap*, const enum ns3__PromotionItemPriceTypeCodeType *, const char*, const char*);

inline int soap_write_ns3__PromotionItemPriceTypeCodeType(struct soap *soap, enum ns3__PromotionItemPriceTypeCodeType const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_ns3__PromotionItemPriceTypeCodeType(soap, p, "ns3:PromotionItemPriceTypeCodeType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_ns3__PromotionItemPriceTypeCodeType(struct soap *soap, const char *URL, enum ns3__PromotionItemPriceTypeCodeType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ns3__PromotionItemPriceTypeCodeType(soap, p, "ns3:PromotionItemPriceTypeCodeType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__PromotionItemPriceTypeCodeType(struct soap *soap, const char *URL, enum ns3__PromotionItemPriceTypeCodeType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ns3__PromotionItemPriceTypeCodeType(soap, p, "ns3:PromotionItemPriceTypeCodeType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum ns3__PromotionItemPriceTypeCodeType * SOAP_FMAC4 soap_get_ns3__PromotionItemPriceTypeCodeType(struct soap*, enum ns3__PromotionItemPriceTypeCodeType *, const char*, const char*);

inline int soap_read_ns3__PromotionItemPriceTypeCodeType(struct soap *soap, enum ns3__PromotionItemPriceTypeCodeType *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_ns3__PromotionItemPriceTypeCodeType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__PromotionItemPriceTypeCodeType(struct soap *soap, const char *URL, enum ns3__PromotionItemPriceTypeCodeType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__PromotionItemPriceTypeCodeType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__PromotionItemPriceTypeCodeType(struct soap *soap, enum ns3__PromotionItemPriceTypeCodeType *p)
{
	if (soap_read_ns3__PromotionItemPriceTypeCodeType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__PhotoDisplayCodeType_DEFINED
#define SOAP_TYPE_ns3__PhotoDisplayCodeType_DEFINED

inline void soap_default_ns3__PhotoDisplayCodeType(struct soap *soap, enum ns3__PhotoDisplayCodeType *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_ns3__PhotoDisplayCodeType
	*a = SOAP_DEFAULT_ns3__PhotoDisplayCodeType;
#else
	*a = (enum ns3__PhotoDisplayCodeType)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__PhotoDisplayCodeType(struct soap*, const char*, int, const enum ns3__PhotoDisplayCodeType *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns3__PhotoDisplayCodeType2s(struct soap*, enum ns3__PhotoDisplayCodeType);
SOAP_FMAC3 enum ns3__PhotoDisplayCodeType * SOAP_FMAC4 soap_in_ns3__PhotoDisplayCodeType(struct soap*, const char*, enum ns3__PhotoDisplayCodeType *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns3__PhotoDisplayCodeType(struct soap*, const char*, enum ns3__PhotoDisplayCodeType *);

SOAP_FMAC3 enum ns3__PhotoDisplayCodeType * SOAP_FMAC4 soap_new_ns3__PhotoDisplayCodeType(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns3__PhotoDisplayCodeType(struct soap*, const enum ns3__PhotoDisplayCodeType *, const char*, const char*);

inline int soap_write_ns3__PhotoDisplayCodeType(struct soap *soap, enum ns3__PhotoDisplayCodeType const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_ns3__PhotoDisplayCodeType(soap, p, "ns3:PhotoDisplayCodeType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_ns3__PhotoDisplayCodeType(struct soap *soap, const char *URL, enum ns3__PhotoDisplayCodeType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ns3__PhotoDisplayCodeType(soap, p, "ns3:PhotoDisplayCodeType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__PhotoDisplayCodeType(struct soap *soap, const char *URL, enum ns3__PhotoDisplayCodeType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ns3__PhotoDisplayCodeType(soap, p, "ns3:PhotoDisplayCodeType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum ns3__PhotoDisplayCodeType * SOAP_FMAC4 soap_get_ns3__PhotoDisplayCodeType(struct soap*, enum ns3__PhotoDisplayCodeType *, const char*, const char*);

inline int soap_read_ns3__PhotoDisplayCodeType(struct soap *soap, enum ns3__PhotoDisplayCodeType *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_ns3__PhotoDisplayCodeType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__PhotoDisplayCodeType(struct soap *soap, const char *URL, enum ns3__PhotoDisplayCodeType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__PhotoDisplayCodeType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__PhotoDisplayCodeType(struct soap *soap, enum ns3__PhotoDisplayCodeType *p)
{
	if (soap_read_ns3__PhotoDisplayCodeType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__ModifyCodeType_DEFINED
#define SOAP_TYPE_ns3__ModifyCodeType_DEFINED

inline void soap_default_ns3__ModifyCodeType(struct soap *soap, enum ns3__ModifyCodeType *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_ns3__ModifyCodeType
	*a = SOAP_DEFAULT_ns3__ModifyCodeType;
#else
	*a = (enum ns3__ModifyCodeType)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__ModifyCodeType(struct soap*, const char*, int, const enum ns3__ModifyCodeType *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns3__ModifyCodeType2s(struct soap*, enum ns3__ModifyCodeType);
SOAP_FMAC3 enum ns3__ModifyCodeType * SOAP_FMAC4 soap_in_ns3__ModifyCodeType(struct soap*, const char*, enum ns3__ModifyCodeType *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns3__ModifyCodeType(struct soap*, const char*, enum ns3__ModifyCodeType *);

SOAP_FMAC3 enum ns3__ModifyCodeType * SOAP_FMAC4 soap_new_ns3__ModifyCodeType(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns3__ModifyCodeType(struct soap*, const enum ns3__ModifyCodeType *, const char*, const char*);

inline int soap_write_ns3__ModifyCodeType(struct soap *soap, enum ns3__ModifyCodeType const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_ns3__ModifyCodeType(soap, p, "ns3:ModifyCodeType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_ns3__ModifyCodeType(struct soap *soap, const char *URL, enum ns3__ModifyCodeType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ns3__ModifyCodeType(soap, p, "ns3:ModifyCodeType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__ModifyCodeType(struct soap *soap, const char *URL, enum ns3__ModifyCodeType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ns3__ModifyCodeType(soap, p, "ns3:ModifyCodeType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum ns3__ModifyCodeType * SOAP_FMAC4 soap_get_ns3__ModifyCodeType(struct soap*, enum ns3__ModifyCodeType *, const char*, const char*);

inline int soap_read_ns3__ModifyCodeType(struct soap *soap, enum ns3__ModifyCodeType *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_ns3__ModifyCodeType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__ModifyCodeType(struct soap *soap, const char *URL, enum ns3__ModifyCodeType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__ModifyCodeType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__ModifyCodeType(struct soap *soap, enum ns3__ModifyCodeType *p)
{
	if (soap_read_ns3__ModifyCodeType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__MerchandizingPrefCodeType_DEFINED
#define SOAP_TYPE_ns3__MerchandizingPrefCodeType_DEFINED

inline void soap_default_ns3__MerchandizingPrefCodeType(struct soap *soap, enum ns3__MerchandizingPrefCodeType *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_ns3__MerchandizingPrefCodeType
	*a = SOAP_DEFAULT_ns3__MerchandizingPrefCodeType;
#else
	*a = (enum ns3__MerchandizingPrefCodeType)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__MerchandizingPrefCodeType(struct soap*, const char*, int, const enum ns3__MerchandizingPrefCodeType *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns3__MerchandizingPrefCodeType2s(struct soap*, enum ns3__MerchandizingPrefCodeType);
SOAP_FMAC3 enum ns3__MerchandizingPrefCodeType * SOAP_FMAC4 soap_in_ns3__MerchandizingPrefCodeType(struct soap*, const char*, enum ns3__MerchandizingPrefCodeType *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns3__MerchandizingPrefCodeType(struct soap*, const char*, enum ns3__MerchandizingPrefCodeType *);

SOAP_FMAC3 enum ns3__MerchandizingPrefCodeType * SOAP_FMAC4 soap_new_ns3__MerchandizingPrefCodeType(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns3__MerchandizingPrefCodeType(struct soap*, const enum ns3__MerchandizingPrefCodeType *, const char*, const char*);

inline int soap_write_ns3__MerchandizingPrefCodeType(struct soap *soap, enum ns3__MerchandizingPrefCodeType const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_ns3__MerchandizingPrefCodeType(soap, p, "ns3:MerchandizingPrefCodeType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_ns3__MerchandizingPrefCodeType(struct soap *soap, const char *URL, enum ns3__MerchandizingPrefCodeType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ns3__MerchandizingPrefCodeType(soap, p, "ns3:MerchandizingPrefCodeType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__MerchandizingPrefCodeType(struct soap *soap, const char *URL, enum ns3__MerchandizingPrefCodeType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ns3__MerchandizingPrefCodeType(soap, p, "ns3:MerchandizingPrefCodeType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum ns3__MerchandizingPrefCodeType * SOAP_FMAC4 soap_get_ns3__MerchandizingPrefCodeType(struct soap*, enum ns3__MerchandizingPrefCodeType *, const char*, const char*);

inline int soap_read_ns3__MerchandizingPrefCodeType(struct soap *soap, enum ns3__MerchandizingPrefCodeType *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_ns3__MerchandizingPrefCodeType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__MerchandizingPrefCodeType(struct soap *soap, const char *URL, enum ns3__MerchandizingPrefCodeType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__MerchandizingPrefCodeType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__MerchandizingPrefCodeType(struct soap *soap, enum ns3__MerchandizingPrefCodeType *p)
{
	if (soap_read_ns3__MerchandizingPrefCodeType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__ListingTypeCodeType_DEFINED
#define SOAP_TYPE_ns3__ListingTypeCodeType_DEFINED

inline void soap_default_ns3__ListingTypeCodeType(struct soap *soap, enum ns3__ListingTypeCodeType *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_ns3__ListingTypeCodeType
	*a = SOAP_DEFAULT_ns3__ListingTypeCodeType;
#else
	*a = (enum ns3__ListingTypeCodeType)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__ListingTypeCodeType(struct soap*, const char*, int, const enum ns3__ListingTypeCodeType *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns3__ListingTypeCodeType2s(struct soap*, enum ns3__ListingTypeCodeType);
SOAP_FMAC3 enum ns3__ListingTypeCodeType * SOAP_FMAC4 soap_in_ns3__ListingTypeCodeType(struct soap*, const char*, enum ns3__ListingTypeCodeType *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns3__ListingTypeCodeType(struct soap*, const char*, enum ns3__ListingTypeCodeType *);

SOAP_FMAC3 enum ns3__ListingTypeCodeType * SOAP_FMAC4 soap_new_ns3__ListingTypeCodeType(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns3__ListingTypeCodeType(struct soap*, const enum ns3__ListingTypeCodeType *, const char*, const char*);

inline int soap_write_ns3__ListingTypeCodeType(struct soap *soap, enum ns3__ListingTypeCodeType const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_ns3__ListingTypeCodeType(soap, p, "ns3:ListingTypeCodeType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_ns3__ListingTypeCodeType(struct soap *soap, const char *URL, enum ns3__ListingTypeCodeType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ns3__ListingTypeCodeType(soap, p, "ns3:ListingTypeCodeType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__ListingTypeCodeType(struct soap *soap, const char *URL, enum ns3__ListingTypeCodeType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ns3__ListingTypeCodeType(soap, p, "ns3:ListingTypeCodeType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum ns3__ListingTypeCodeType * SOAP_FMAC4 soap_get_ns3__ListingTypeCodeType(struct soap*, enum ns3__ListingTypeCodeType *, const char*, const char*);

inline int soap_read_ns3__ListingTypeCodeType(struct soap *soap, enum ns3__ListingTypeCodeType *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_ns3__ListingTypeCodeType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__ListingTypeCodeType(struct soap *soap, const char *URL, enum ns3__ListingTypeCodeType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__ListingTypeCodeType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__ListingTypeCodeType(struct soap *soap, enum ns3__ListingTypeCodeType *p)
{
	if (soap_read_ns3__ListingTypeCodeType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__ListingEnhancementsCodeType_DEFINED
#define SOAP_TYPE_ns3__ListingEnhancementsCodeType_DEFINED

inline void soap_default_ns3__ListingEnhancementsCodeType(struct soap *soap, enum ns3__ListingEnhancementsCodeType *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_ns3__ListingEnhancementsCodeType
	*a = SOAP_DEFAULT_ns3__ListingEnhancementsCodeType;
#else
	*a = (enum ns3__ListingEnhancementsCodeType)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__ListingEnhancementsCodeType(struct soap*, const char*, int, const enum ns3__ListingEnhancementsCodeType *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns3__ListingEnhancementsCodeType2s(struct soap*, enum ns3__ListingEnhancementsCodeType);
SOAP_FMAC3 enum ns3__ListingEnhancementsCodeType * SOAP_FMAC4 soap_in_ns3__ListingEnhancementsCodeType(struct soap*, const char*, enum ns3__ListingEnhancementsCodeType *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns3__ListingEnhancementsCodeType(struct soap*, const char*, enum ns3__ListingEnhancementsCodeType *);

SOAP_FMAC3 enum ns3__ListingEnhancementsCodeType * SOAP_FMAC4 soap_new_ns3__ListingEnhancementsCodeType(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns3__ListingEnhancementsCodeType(struct soap*, const enum ns3__ListingEnhancementsCodeType *, const char*, const char*);

inline int soap_write_ns3__ListingEnhancementsCodeType(struct soap *soap, enum ns3__ListingEnhancementsCodeType const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_ns3__ListingEnhancementsCodeType(soap, p, "ns3:ListingEnhancementsCodeType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_ns3__ListingEnhancementsCodeType(struct soap *soap, const char *URL, enum ns3__ListingEnhancementsCodeType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ns3__ListingEnhancementsCodeType(soap, p, "ns3:ListingEnhancementsCodeType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__ListingEnhancementsCodeType(struct soap *soap, const char *URL, enum ns3__ListingEnhancementsCodeType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ns3__ListingEnhancementsCodeType(soap, p, "ns3:ListingEnhancementsCodeType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum ns3__ListingEnhancementsCodeType * SOAP_FMAC4 soap_get_ns3__ListingEnhancementsCodeType(struct soap*, enum ns3__ListingEnhancementsCodeType *, const char*, const char*);

inline int soap_read_ns3__ListingEnhancementsCodeType(struct soap *soap, enum ns3__ListingEnhancementsCodeType *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_ns3__ListingEnhancementsCodeType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__ListingEnhancementsCodeType(struct soap *soap, const char *URL, enum ns3__ListingEnhancementsCodeType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__ListingEnhancementsCodeType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__ListingEnhancementsCodeType(struct soap *soap, enum ns3__ListingEnhancementsCodeType *p)
{
	if (soap_read_ns3__ListingEnhancementsCodeType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__ListingDurationCodeType_DEFINED
#define SOAP_TYPE_ns3__ListingDurationCodeType_DEFINED

inline void soap_default_ns3__ListingDurationCodeType(struct soap *soap, enum ns3__ListingDurationCodeType *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_ns3__ListingDurationCodeType
	*a = SOAP_DEFAULT_ns3__ListingDurationCodeType;
#else
	*a = (enum ns3__ListingDurationCodeType)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__ListingDurationCodeType(struct soap*, const char*, int, const enum ns3__ListingDurationCodeType *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns3__ListingDurationCodeType2s(struct soap*, enum ns3__ListingDurationCodeType);
SOAP_FMAC3 enum ns3__ListingDurationCodeType * SOAP_FMAC4 soap_in_ns3__ListingDurationCodeType(struct soap*, const char*, enum ns3__ListingDurationCodeType *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns3__ListingDurationCodeType(struct soap*, const char*, enum ns3__ListingDurationCodeType *);

SOAP_FMAC3 enum ns3__ListingDurationCodeType * SOAP_FMAC4 soap_new_ns3__ListingDurationCodeType(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns3__ListingDurationCodeType(struct soap*, const enum ns3__ListingDurationCodeType *, const char*, const char*);

inline int soap_write_ns3__ListingDurationCodeType(struct soap *soap, enum ns3__ListingDurationCodeType const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_ns3__ListingDurationCodeType(soap, p, "ns3:ListingDurationCodeType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_ns3__ListingDurationCodeType(struct soap *soap, const char *URL, enum ns3__ListingDurationCodeType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ns3__ListingDurationCodeType(soap, p, "ns3:ListingDurationCodeType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__ListingDurationCodeType(struct soap *soap, const char *URL, enum ns3__ListingDurationCodeType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ns3__ListingDurationCodeType(soap, p, "ns3:ListingDurationCodeType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum ns3__ListingDurationCodeType * SOAP_FMAC4 soap_get_ns3__ListingDurationCodeType(struct soap*, enum ns3__ListingDurationCodeType *, const char*, const char*);

inline int soap_read_ns3__ListingDurationCodeType(struct soap *soap, enum ns3__ListingDurationCodeType *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_ns3__ListingDurationCodeType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__ListingDurationCodeType(struct soap *soap, const char *URL, enum ns3__ListingDurationCodeType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__ListingDurationCodeType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__ListingDurationCodeType(struct soap *soap, enum ns3__ListingDurationCodeType *p)
{
	if (soap_read_ns3__ListingDurationCodeType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__InsuranceOptionCodeType_DEFINED
#define SOAP_TYPE_ns3__InsuranceOptionCodeType_DEFINED

inline void soap_default_ns3__InsuranceOptionCodeType(struct soap *soap, enum ns3__InsuranceOptionCodeType *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_ns3__InsuranceOptionCodeType
	*a = SOAP_DEFAULT_ns3__InsuranceOptionCodeType;
#else
	*a = (enum ns3__InsuranceOptionCodeType)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__InsuranceOptionCodeType(struct soap*, const char*, int, const enum ns3__InsuranceOptionCodeType *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns3__InsuranceOptionCodeType2s(struct soap*, enum ns3__InsuranceOptionCodeType);
SOAP_FMAC3 enum ns3__InsuranceOptionCodeType * SOAP_FMAC4 soap_in_ns3__InsuranceOptionCodeType(struct soap*, const char*, enum ns3__InsuranceOptionCodeType *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns3__InsuranceOptionCodeType(struct soap*, const char*, enum ns3__InsuranceOptionCodeType *);

SOAP_FMAC3 enum ns3__InsuranceOptionCodeType * SOAP_FMAC4 soap_new_ns3__InsuranceOptionCodeType(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns3__InsuranceOptionCodeType(struct soap*, const enum ns3__InsuranceOptionCodeType *, const char*, const char*);

inline int soap_write_ns3__InsuranceOptionCodeType(struct soap *soap, enum ns3__InsuranceOptionCodeType const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_ns3__InsuranceOptionCodeType(soap, p, "ns3:InsuranceOptionCodeType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_ns3__InsuranceOptionCodeType(struct soap *soap, const char *URL, enum ns3__InsuranceOptionCodeType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ns3__InsuranceOptionCodeType(soap, p, "ns3:InsuranceOptionCodeType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__InsuranceOptionCodeType(struct soap *soap, const char *URL, enum ns3__InsuranceOptionCodeType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ns3__InsuranceOptionCodeType(soap, p, "ns3:InsuranceOptionCodeType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum ns3__InsuranceOptionCodeType * SOAP_FMAC4 soap_get_ns3__InsuranceOptionCodeType(struct soap*, enum ns3__InsuranceOptionCodeType *, const char*, const char*);

inline int soap_read_ns3__InsuranceOptionCodeType(struct soap *soap, enum ns3__InsuranceOptionCodeType *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_ns3__InsuranceOptionCodeType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__InsuranceOptionCodeType(struct soap *soap, const char *URL, enum ns3__InsuranceOptionCodeType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__InsuranceOptionCodeType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__InsuranceOptionCodeType(struct soap *soap, enum ns3__InsuranceOptionCodeType *p)
{
	if (soap_read_ns3__InsuranceOptionCodeType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__HitCounterCodeType_DEFINED
#define SOAP_TYPE_ns3__HitCounterCodeType_DEFINED

inline void soap_default_ns3__HitCounterCodeType(struct soap *soap, enum ns3__HitCounterCodeType *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_ns3__HitCounterCodeType
	*a = SOAP_DEFAULT_ns3__HitCounterCodeType;
#else
	*a = (enum ns3__HitCounterCodeType)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__HitCounterCodeType(struct soap*, const char*, int, const enum ns3__HitCounterCodeType *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns3__HitCounterCodeType2s(struct soap*, enum ns3__HitCounterCodeType);
SOAP_FMAC3 enum ns3__HitCounterCodeType * SOAP_FMAC4 soap_in_ns3__HitCounterCodeType(struct soap*, const char*, enum ns3__HitCounterCodeType *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns3__HitCounterCodeType(struct soap*, const char*, enum ns3__HitCounterCodeType *);

SOAP_FMAC3 enum ns3__HitCounterCodeType * SOAP_FMAC4 soap_new_ns3__HitCounterCodeType(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns3__HitCounterCodeType(struct soap*, const enum ns3__HitCounterCodeType *, const char*, const char*);

inline int soap_write_ns3__HitCounterCodeType(struct soap *soap, enum ns3__HitCounterCodeType const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_ns3__HitCounterCodeType(soap, p, "ns3:HitCounterCodeType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_ns3__HitCounterCodeType(struct soap *soap, const char *URL, enum ns3__HitCounterCodeType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ns3__HitCounterCodeType(soap, p, "ns3:HitCounterCodeType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__HitCounterCodeType(struct soap *soap, const char *URL, enum ns3__HitCounterCodeType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ns3__HitCounterCodeType(soap, p, "ns3:HitCounterCodeType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum ns3__HitCounterCodeType * SOAP_FMAC4 soap_get_ns3__HitCounterCodeType(struct soap*, enum ns3__HitCounterCodeType *, const char*, const char*);

inline int soap_read_ns3__HitCounterCodeType(struct soap *soap, enum ns3__HitCounterCodeType *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_ns3__HitCounterCodeType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__HitCounterCodeType(struct soap *soap, const char *URL, enum ns3__HitCounterCodeType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__HitCounterCodeType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__HitCounterCodeType(struct soap *soap, enum ns3__HitCounterCodeType *p)
{
	if (soap_read_ns3__HitCounterCodeType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__GiftServicesCodeType_DEFINED
#define SOAP_TYPE_ns3__GiftServicesCodeType_DEFINED

inline void soap_default_ns3__GiftServicesCodeType(struct soap *soap, enum ns3__GiftServicesCodeType *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_ns3__GiftServicesCodeType
	*a = SOAP_DEFAULT_ns3__GiftServicesCodeType;
#else
	*a = (enum ns3__GiftServicesCodeType)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__GiftServicesCodeType(struct soap*, const char*, int, const enum ns3__GiftServicesCodeType *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns3__GiftServicesCodeType2s(struct soap*, enum ns3__GiftServicesCodeType);
SOAP_FMAC3 enum ns3__GiftServicesCodeType * SOAP_FMAC4 soap_in_ns3__GiftServicesCodeType(struct soap*, const char*, enum ns3__GiftServicesCodeType *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns3__GiftServicesCodeType(struct soap*, const char*, enum ns3__GiftServicesCodeType *);

SOAP_FMAC3 enum ns3__GiftServicesCodeType * SOAP_FMAC4 soap_new_ns3__GiftServicesCodeType(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns3__GiftServicesCodeType(struct soap*, const enum ns3__GiftServicesCodeType *, const char*, const char*);

inline int soap_write_ns3__GiftServicesCodeType(struct soap *soap, enum ns3__GiftServicesCodeType const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_ns3__GiftServicesCodeType(soap, p, "ns3:GiftServicesCodeType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_ns3__GiftServicesCodeType(struct soap *soap, const char *URL, enum ns3__GiftServicesCodeType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ns3__GiftServicesCodeType(soap, p, "ns3:GiftServicesCodeType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__GiftServicesCodeType(struct soap *soap, const char *URL, enum ns3__GiftServicesCodeType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ns3__GiftServicesCodeType(soap, p, "ns3:GiftServicesCodeType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum ns3__GiftServicesCodeType * SOAP_FMAC4 soap_get_ns3__GiftServicesCodeType(struct soap*, enum ns3__GiftServicesCodeType *, const char*, const char*);

inline int soap_read_ns3__GiftServicesCodeType(struct soap *soap, enum ns3__GiftServicesCodeType *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_ns3__GiftServicesCodeType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__GiftServicesCodeType(struct soap *soap, const char *URL, enum ns3__GiftServicesCodeType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__GiftServicesCodeType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__GiftServicesCodeType(struct soap *soap, enum ns3__GiftServicesCodeType *p)
{
	if (soap_read_ns3__GiftServicesCodeType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__GeneralPaymentMethodCodeType_DEFINED
#define SOAP_TYPE_ns3__GeneralPaymentMethodCodeType_DEFINED

inline void soap_default_ns3__GeneralPaymentMethodCodeType(struct soap *soap, enum ns3__GeneralPaymentMethodCodeType *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_ns3__GeneralPaymentMethodCodeType
	*a = SOAP_DEFAULT_ns3__GeneralPaymentMethodCodeType;
#else
	*a = (enum ns3__GeneralPaymentMethodCodeType)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__GeneralPaymentMethodCodeType(struct soap*, const char*, int, const enum ns3__GeneralPaymentMethodCodeType *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns3__GeneralPaymentMethodCodeType2s(struct soap*, enum ns3__GeneralPaymentMethodCodeType);
SOAP_FMAC3 enum ns3__GeneralPaymentMethodCodeType * SOAP_FMAC4 soap_in_ns3__GeneralPaymentMethodCodeType(struct soap*, const char*, enum ns3__GeneralPaymentMethodCodeType *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns3__GeneralPaymentMethodCodeType(struct soap*, const char*, enum ns3__GeneralPaymentMethodCodeType *);

SOAP_FMAC3 enum ns3__GeneralPaymentMethodCodeType * SOAP_FMAC4 soap_new_ns3__GeneralPaymentMethodCodeType(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns3__GeneralPaymentMethodCodeType(struct soap*, const enum ns3__GeneralPaymentMethodCodeType *, const char*, const char*);

inline int soap_write_ns3__GeneralPaymentMethodCodeType(struct soap *soap, enum ns3__GeneralPaymentMethodCodeType const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_ns3__GeneralPaymentMethodCodeType(soap, p, "ns3:GeneralPaymentMethodCodeType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_ns3__GeneralPaymentMethodCodeType(struct soap *soap, const char *URL, enum ns3__GeneralPaymentMethodCodeType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ns3__GeneralPaymentMethodCodeType(soap, p, "ns3:GeneralPaymentMethodCodeType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__GeneralPaymentMethodCodeType(struct soap *soap, const char *URL, enum ns3__GeneralPaymentMethodCodeType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ns3__GeneralPaymentMethodCodeType(soap, p, "ns3:GeneralPaymentMethodCodeType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum ns3__GeneralPaymentMethodCodeType * SOAP_FMAC4 soap_get_ns3__GeneralPaymentMethodCodeType(struct soap*, enum ns3__GeneralPaymentMethodCodeType *, const char*, const char*);

inline int soap_read_ns3__GeneralPaymentMethodCodeType(struct soap *soap, enum ns3__GeneralPaymentMethodCodeType *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_ns3__GeneralPaymentMethodCodeType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__GeneralPaymentMethodCodeType(struct soap *soap, const char *URL, enum ns3__GeneralPaymentMethodCodeType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__GeneralPaymentMethodCodeType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__GeneralPaymentMethodCodeType(struct soap *soap, enum ns3__GeneralPaymentMethodCodeType *p)
{
	if (soap_read_ns3__GeneralPaymentMethodCodeType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__GalleryTypeCodeType_DEFINED
#define SOAP_TYPE_ns3__GalleryTypeCodeType_DEFINED

inline void soap_default_ns3__GalleryTypeCodeType(struct soap *soap, enum ns3__GalleryTypeCodeType *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_ns3__GalleryTypeCodeType
	*a = SOAP_DEFAULT_ns3__GalleryTypeCodeType;
#else
	*a = (enum ns3__GalleryTypeCodeType)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__GalleryTypeCodeType(struct soap*, const char*, int, const enum ns3__GalleryTypeCodeType *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns3__GalleryTypeCodeType2s(struct soap*, enum ns3__GalleryTypeCodeType);
SOAP_FMAC3 enum ns3__GalleryTypeCodeType * SOAP_FMAC4 soap_in_ns3__GalleryTypeCodeType(struct soap*, const char*, enum ns3__GalleryTypeCodeType *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns3__GalleryTypeCodeType(struct soap*, const char*, enum ns3__GalleryTypeCodeType *);

SOAP_FMAC3 enum ns3__GalleryTypeCodeType * SOAP_FMAC4 soap_new_ns3__GalleryTypeCodeType(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns3__GalleryTypeCodeType(struct soap*, const enum ns3__GalleryTypeCodeType *, const char*, const char*);

inline int soap_write_ns3__GalleryTypeCodeType(struct soap *soap, enum ns3__GalleryTypeCodeType const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_ns3__GalleryTypeCodeType(soap, p, "ns3:GalleryTypeCodeType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_ns3__GalleryTypeCodeType(struct soap *soap, const char *URL, enum ns3__GalleryTypeCodeType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ns3__GalleryTypeCodeType(soap, p, "ns3:GalleryTypeCodeType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__GalleryTypeCodeType(struct soap *soap, const char *URL, enum ns3__GalleryTypeCodeType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ns3__GalleryTypeCodeType(soap, p, "ns3:GalleryTypeCodeType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum ns3__GalleryTypeCodeType * SOAP_FMAC4 soap_get_ns3__GalleryTypeCodeType(struct soap*, enum ns3__GalleryTypeCodeType *, const char*, const char*);

inline int soap_read_ns3__GalleryTypeCodeType(struct soap *soap, enum ns3__GalleryTypeCodeType *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_ns3__GalleryTypeCodeType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__GalleryTypeCodeType(struct soap *soap, const char *URL, enum ns3__GalleryTypeCodeType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__GalleryTypeCodeType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__GalleryTypeCodeType(struct soap *soap, enum ns3__GalleryTypeCodeType *p)
{
	if (soap_read_ns3__GalleryTypeCodeType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__FeedbackRatingStarCodeType_DEFINED
#define SOAP_TYPE_ns3__FeedbackRatingStarCodeType_DEFINED

inline void soap_default_ns3__FeedbackRatingStarCodeType(struct soap *soap, enum ns3__FeedbackRatingStarCodeType *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_ns3__FeedbackRatingStarCodeType
	*a = SOAP_DEFAULT_ns3__FeedbackRatingStarCodeType;
#else
	*a = (enum ns3__FeedbackRatingStarCodeType)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__FeedbackRatingStarCodeType(struct soap*, const char*, int, const enum ns3__FeedbackRatingStarCodeType *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns3__FeedbackRatingStarCodeType2s(struct soap*, enum ns3__FeedbackRatingStarCodeType);
SOAP_FMAC3 enum ns3__FeedbackRatingStarCodeType * SOAP_FMAC4 soap_in_ns3__FeedbackRatingStarCodeType(struct soap*, const char*, enum ns3__FeedbackRatingStarCodeType *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns3__FeedbackRatingStarCodeType(struct soap*, const char*, enum ns3__FeedbackRatingStarCodeType *);

SOAP_FMAC3 enum ns3__FeedbackRatingStarCodeType * SOAP_FMAC4 soap_new_ns3__FeedbackRatingStarCodeType(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns3__FeedbackRatingStarCodeType(struct soap*, const enum ns3__FeedbackRatingStarCodeType *, const char*, const char*);

inline int soap_write_ns3__FeedbackRatingStarCodeType(struct soap *soap, enum ns3__FeedbackRatingStarCodeType const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_ns3__FeedbackRatingStarCodeType(soap, p, "ns3:FeedbackRatingStarCodeType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_ns3__FeedbackRatingStarCodeType(struct soap *soap, const char *URL, enum ns3__FeedbackRatingStarCodeType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ns3__FeedbackRatingStarCodeType(soap, p, "ns3:FeedbackRatingStarCodeType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__FeedbackRatingStarCodeType(struct soap *soap, const char *URL, enum ns3__FeedbackRatingStarCodeType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ns3__FeedbackRatingStarCodeType(soap, p, "ns3:FeedbackRatingStarCodeType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum ns3__FeedbackRatingStarCodeType * SOAP_FMAC4 soap_get_ns3__FeedbackRatingStarCodeType(struct soap*, enum ns3__FeedbackRatingStarCodeType *, const char*, const char*);

inline int soap_read_ns3__FeedbackRatingStarCodeType(struct soap *soap, enum ns3__FeedbackRatingStarCodeType *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_ns3__FeedbackRatingStarCodeType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__FeedbackRatingStarCodeType(struct soap *soap, const char *URL, enum ns3__FeedbackRatingStarCodeType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__FeedbackRatingStarCodeType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__FeedbackRatingStarCodeType(struct soap *soap, enum ns3__FeedbackRatingStarCodeType *p)
{
	if (soap_read_ns3__FeedbackRatingStarCodeType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__EscrowCodeType_DEFINED
#define SOAP_TYPE_ns3__EscrowCodeType_DEFINED

inline void soap_default_ns3__EscrowCodeType(struct soap *soap, enum ns3__EscrowCodeType *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_ns3__EscrowCodeType
	*a = SOAP_DEFAULT_ns3__EscrowCodeType;
#else
	*a = (enum ns3__EscrowCodeType)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__EscrowCodeType(struct soap*, const char*, int, const enum ns3__EscrowCodeType *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns3__EscrowCodeType2s(struct soap*, enum ns3__EscrowCodeType);
SOAP_FMAC3 enum ns3__EscrowCodeType * SOAP_FMAC4 soap_in_ns3__EscrowCodeType(struct soap*, const char*, enum ns3__EscrowCodeType *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns3__EscrowCodeType(struct soap*, const char*, enum ns3__EscrowCodeType *);

SOAP_FMAC3 enum ns3__EscrowCodeType * SOAP_FMAC4 soap_new_ns3__EscrowCodeType(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns3__EscrowCodeType(struct soap*, const enum ns3__EscrowCodeType *, const char*, const char*);

inline int soap_write_ns3__EscrowCodeType(struct soap *soap, enum ns3__EscrowCodeType const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_ns3__EscrowCodeType(soap, p, "ns3:EscrowCodeType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_ns3__EscrowCodeType(struct soap *soap, const char *URL, enum ns3__EscrowCodeType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ns3__EscrowCodeType(soap, p, "ns3:EscrowCodeType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__EscrowCodeType(struct soap *soap, const char *URL, enum ns3__EscrowCodeType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ns3__EscrowCodeType(soap, p, "ns3:EscrowCodeType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum ns3__EscrowCodeType * SOAP_FMAC4 soap_get_ns3__EscrowCodeType(struct soap*, enum ns3__EscrowCodeType *, const char*, const char*);

inline int soap_read_ns3__EscrowCodeType(struct soap *soap, enum ns3__EscrowCodeType *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_ns3__EscrowCodeType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__EscrowCodeType(struct soap *soap, const char *URL, enum ns3__EscrowCodeType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__EscrowCodeType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__EscrowCodeType(struct soap *soap, enum ns3__EscrowCodeType *p)
{
	if (soap_read_ns3__EscrowCodeType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__PaymentReasonType_DEFINED
#define SOAP_TYPE_ns3__PaymentReasonType_DEFINED

inline void soap_default_ns3__PaymentReasonType(struct soap *soap, enum ns3__PaymentReasonType *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_ns3__PaymentReasonType
	*a = SOAP_DEFAULT_ns3__PaymentReasonType;
#else
	*a = (enum ns3__PaymentReasonType)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__PaymentReasonType(struct soap*, const char*, int, const enum ns3__PaymentReasonType *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns3__PaymentReasonType2s(struct soap*, enum ns3__PaymentReasonType);
SOAP_FMAC3 enum ns3__PaymentReasonType * SOAP_FMAC4 soap_in_ns3__PaymentReasonType(struct soap*, const char*, enum ns3__PaymentReasonType *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns3__PaymentReasonType(struct soap*, const char*, enum ns3__PaymentReasonType *);

SOAP_FMAC3 enum ns3__PaymentReasonType * SOAP_FMAC4 soap_new_ns3__PaymentReasonType(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns3__PaymentReasonType(struct soap*, const enum ns3__PaymentReasonType *, const char*, const char*);

inline int soap_write_ns3__PaymentReasonType(struct soap *soap, enum ns3__PaymentReasonType const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_ns3__PaymentReasonType(soap, p, "ns3:PaymentReasonType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_ns3__PaymentReasonType(struct soap *soap, const char *URL, enum ns3__PaymentReasonType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ns3__PaymentReasonType(soap, p, "ns3:PaymentReasonType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__PaymentReasonType(struct soap *soap, const char *URL, enum ns3__PaymentReasonType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ns3__PaymentReasonType(soap, p, "ns3:PaymentReasonType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum ns3__PaymentReasonType * SOAP_FMAC4 soap_get_ns3__PaymentReasonType(struct soap*, enum ns3__PaymentReasonType *, const char*, const char*);

inline int soap_read_ns3__PaymentReasonType(struct soap *soap, enum ns3__PaymentReasonType *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_ns3__PaymentReasonType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__PaymentReasonType(struct soap *soap, const char *URL, enum ns3__PaymentReasonType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__PaymentReasonType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__PaymentReasonType(struct soap *soap, enum ns3__PaymentReasonType *p)
{
	if (soap_read_ns3__PaymentReasonType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__IncentiveAppliedStatusType_DEFINED
#define SOAP_TYPE_ns3__IncentiveAppliedStatusType_DEFINED

inline void soap_default_ns3__IncentiveAppliedStatusType(struct soap *soap, enum ns3__IncentiveAppliedStatusType *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_ns3__IncentiveAppliedStatusType
	*a = SOAP_DEFAULT_ns3__IncentiveAppliedStatusType;
#else
	*a = (enum ns3__IncentiveAppliedStatusType)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__IncentiveAppliedStatusType(struct soap*, const char*, int, const enum ns3__IncentiveAppliedStatusType *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns3__IncentiveAppliedStatusType2s(struct soap*, enum ns3__IncentiveAppliedStatusType);
SOAP_FMAC3 enum ns3__IncentiveAppliedStatusType * SOAP_FMAC4 soap_in_ns3__IncentiveAppliedStatusType(struct soap*, const char*, enum ns3__IncentiveAppliedStatusType *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns3__IncentiveAppliedStatusType(struct soap*, const char*, enum ns3__IncentiveAppliedStatusType *);

SOAP_FMAC3 enum ns3__IncentiveAppliedStatusType * SOAP_FMAC4 soap_new_ns3__IncentiveAppliedStatusType(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns3__IncentiveAppliedStatusType(struct soap*, const enum ns3__IncentiveAppliedStatusType *, const char*, const char*);

inline int soap_write_ns3__IncentiveAppliedStatusType(struct soap *soap, enum ns3__IncentiveAppliedStatusType const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_ns3__IncentiveAppliedStatusType(soap, p, "ns3:IncentiveAppliedStatusType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_ns3__IncentiveAppliedStatusType(struct soap *soap, const char *URL, enum ns3__IncentiveAppliedStatusType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ns3__IncentiveAppliedStatusType(soap, p, "ns3:IncentiveAppliedStatusType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__IncentiveAppliedStatusType(struct soap *soap, const char *URL, enum ns3__IncentiveAppliedStatusType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ns3__IncentiveAppliedStatusType(soap, p, "ns3:IncentiveAppliedStatusType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum ns3__IncentiveAppliedStatusType * SOAP_FMAC4 soap_get_ns3__IncentiveAppliedStatusType(struct soap*, enum ns3__IncentiveAppliedStatusType *, const char*, const char*);

inline int soap_read_ns3__IncentiveAppliedStatusType(struct soap *soap, enum ns3__IncentiveAppliedStatusType *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_ns3__IncentiveAppliedStatusType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__IncentiveAppliedStatusType(struct soap *soap, const char *URL, enum ns3__IncentiveAppliedStatusType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__IncentiveAppliedStatusType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__IncentiveAppliedStatusType(struct soap *soap, enum ns3__IncentiveAppliedStatusType *p)
{
	if (soap_read_ns3__IncentiveAppliedStatusType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__IncentiveSiteAppliedOnType_DEFINED
#define SOAP_TYPE_ns3__IncentiveSiteAppliedOnType_DEFINED

inline void soap_default_ns3__IncentiveSiteAppliedOnType(struct soap *soap, enum ns3__IncentiveSiteAppliedOnType *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_ns3__IncentiveSiteAppliedOnType
	*a = SOAP_DEFAULT_ns3__IncentiveSiteAppliedOnType;
#else
	*a = (enum ns3__IncentiveSiteAppliedOnType)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__IncentiveSiteAppliedOnType(struct soap*, const char*, int, const enum ns3__IncentiveSiteAppliedOnType *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns3__IncentiveSiteAppliedOnType2s(struct soap*, enum ns3__IncentiveSiteAppliedOnType);
SOAP_FMAC3 enum ns3__IncentiveSiteAppliedOnType * SOAP_FMAC4 soap_in_ns3__IncentiveSiteAppliedOnType(struct soap*, const char*, enum ns3__IncentiveSiteAppliedOnType *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns3__IncentiveSiteAppliedOnType(struct soap*, const char*, enum ns3__IncentiveSiteAppliedOnType *);

SOAP_FMAC3 enum ns3__IncentiveSiteAppliedOnType * SOAP_FMAC4 soap_new_ns3__IncentiveSiteAppliedOnType(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns3__IncentiveSiteAppliedOnType(struct soap*, const enum ns3__IncentiveSiteAppliedOnType *, const char*, const char*);

inline int soap_write_ns3__IncentiveSiteAppliedOnType(struct soap *soap, enum ns3__IncentiveSiteAppliedOnType const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_ns3__IncentiveSiteAppliedOnType(soap, p, "ns3:IncentiveSiteAppliedOnType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_ns3__IncentiveSiteAppliedOnType(struct soap *soap, const char *URL, enum ns3__IncentiveSiteAppliedOnType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ns3__IncentiveSiteAppliedOnType(soap, p, "ns3:IncentiveSiteAppliedOnType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__IncentiveSiteAppliedOnType(struct soap *soap, const char *URL, enum ns3__IncentiveSiteAppliedOnType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ns3__IncentiveSiteAppliedOnType(soap, p, "ns3:IncentiveSiteAppliedOnType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum ns3__IncentiveSiteAppliedOnType * SOAP_FMAC4 soap_get_ns3__IncentiveSiteAppliedOnType(struct soap*, enum ns3__IncentiveSiteAppliedOnType *, const char*, const char*);

inline int soap_read_ns3__IncentiveSiteAppliedOnType(struct soap *soap, enum ns3__IncentiveSiteAppliedOnType *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_ns3__IncentiveSiteAppliedOnType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__IncentiveSiteAppliedOnType(struct soap *soap, const char *URL, enum ns3__IncentiveSiteAppliedOnType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__IncentiveSiteAppliedOnType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__IncentiveSiteAppliedOnType(struct soap *soap, enum ns3__IncentiveSiteAppliedOnType *p)
{
	if (soap_read_ns3__IncentiveSiteAppliedOnType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__DetailLevelCodeType_DEFINED
#define SOAP_TYPE_ns3__DetailLevelCodeType_DEFINED

inline void soap_default_ns3__DetailLevelCodeType(struct soap *soap, enum ns3__DetailLevelCodeType *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_ns3__DetailLevelCodeType
	*a = SOAP_DEFAULT_ns3__DetailLevelCodeType;
#else
	*a = (enum ns3__DetailLevelCodeType)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__DetailLevelCodeType(struct soap*, const char*, int, const enum ns3__DetailLevelCodeType *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns3__DetailLevelCodeType2s(struct soap*, enum ns3__DetailLevelCodeType);
SOAP_FMAC3 enum ns3__DetailLevelCodeType * SOAP_FMAC4 soap_in_ns3__DetailLevelCodeType(struct soap*, const char*, enum ns3__DetailLevelCodeType *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns3__DetailLevelCodeType(struct soap*, const char*, enum ns3__DetailLevelCodeType *);

SOAP_FMAC3 enum ns3__DetailLevelCodeType * SOAP_FMAC4 soap_new_ns3__DetailLevelCodeType(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns3__DetailLevelCodeType(struct soap*, const enum ns3__DetailLevelCodeType *, const char*, const char*);

inline int soap_write_ns3__DetailLevelCodeType(struct soap *soap, enum ns3__DetailLevelCodeType const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_ns3__DetailLevelCodeType(soap, p, "ns3:DetailLevelCodeType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_ns3__DetailLevelCodeType(struct soap *soap, const char *URL, enum ns3__DetailLevelCodeType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ns3__DetailLevelCodeType(soap, p, "ns3:DetailLevelCodeType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__DetailLevelCodeType(struct soap *soap, const char *URL, enum ns3__DetailLevelCodeType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ns3__DetailLevelCodeType(soap, p, "ns3:DetailLevelCodeType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum ns3__DetailLevelCodeType * SOAP_FMAC4 soap_get_ns3__DetailLevelCodeType(struct soap*, enum ns3__DetailLevelCodeType *, const char*, const char*);

inline int soap_read_ns3__DetailLevelCodeType(struct soap *soap, enum ns3__DetailLevelCodeType *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_ns3__DetailLevelCodeType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__DetailLevelCodeType(struct soap *soap, const char *URL, enum ns3__DetailLevelCodeType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__DetailLevelCodeType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__DetailLevelCodeType(struct soap *soap, enum ns3__DetailLevelCodeType *p)
{
	if (soap_read_ns3__DetailLevelCodeType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__DepositTypeCodeType_DEFINED
#define SOAP_TYPE_ns3__DepositTypeCodeType_DEFINED

inline void soap_default_ns3__DepositTypeCodeType(struct soap *soap, enum ns3__DepositTypeCodeType *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_ns3__DepositTypeCodeType
	*a = SOAP_DEFAULT_ns3__DepositTypeCodeType;
#else
	*a = (enum ns3__DepositTypeCodeType)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__DepositTypeCodeType(struct soap*, const char*, int, const enum ns3__DepositTypeCodeType *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns3__DepositTypeCodeType2s(struct soap*, enum ns3__DepositTypeCodeType);
SOAP_FMAC3 enum ns3__DepositTypeCodeType * SOAP_FMAC4 soap_in_ns3__DepositTypeCodeType(struct soap*, const char*, enum ns3__DepositTypeCodeType *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns3__DepositTypeCodeType(struct soap*, const char*, enum ns3__DepositTypeCodeType *);

SOAP_FMAC3 enum ns3__DepositTypeCodeType * SOAP_FMAC4 soap_new_ns3__DepositTypeCodeType(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns3__DepositTypeCodeType(struct soap*, const enum ns3__DepositTypeCodeType *, const char*, const char*);

inline int soap_write_ns3__DepositTypeCodeType(struct soap *soap, enum ns3__DepositTypeCodeType const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_ns3__DepositTypeCodeType(soap, p, "ns3:DepositTypeCodeType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_ns3__DepositTypeCodeType(struct soap *soap, const char *URL, enum ns3__DepositTypeCodeType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ns3__DepositTypeCodeType(soap, p, "ns3:DepositTypeCodeType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__DepositTypeCodeType(struct soap *soap, const char *URL, enum ns3__DepositTypeCodeType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ns3__DepositTypeCodeType(soap, p, "ns3:DepositTypeCodeType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum ns3__DepositTypeCodeType * SOAP_FMAC4 soap_get_ns3__DepositTypeCodeType(struct soap*, enum ns3__DepositTypeCodeType *, const char*, const char*);

inline int soap_read_ns3__DepositTypeCodeType(struct soap *soap, enum ns3__DepositTypeCodeType *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_ns3__DepositTypeCodeType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__DepositTypeCodeType(struct soap *soap, const char *URL, enum ns3__DepositTypeCodeType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__DepositTypeCodeType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__DepositTypeCodeType(struct soap *soap, enum ns3__DepositTypeCodeType *p)
{
	if (soap_read_ns3__DepositTypeCodeType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__CurrencyCodeType_DEFINED
#define SOAP_TYPE_ns3__CurrencyCodeType_DEFINED

inline void soap_default_ns3__CurrencyCodeType(struct soap *soap, enum ns3__CurrencyCodeType *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_ns3__CurrencyCodeType
	*a = SOAP_DEFAULT_ns3__CurrencyCodeType;
#else
	*a = (enum ns3__CurrencyCodeType)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__CurrencyCodeType(struct soap*, const char*, int, const enum ns3__CurrencyCodeType *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns3__CurrencyCodeType2s(struct soap*, enum ns3__CurrencyCodeType);
SOAP_FMAC3 enum ns3__CurrencyCodeType * SOAP_FMAC4 soap_in_ns3__CurrencyCodeType(struct soap*, const char*, enum ns3__CurrencyCodeType *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns3__CurrencyCodeType(struct soap*, const char*, enum ns3__CurrencyCodeType *);

SOAP_FMAC3 enum ns3__CurrencyCodeType * SOAP_FMAC4 soap_new_ns3__CurrencyCodeType(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns3__CurrencyCodeType(struct soap*, const enum ns3__CurrencyCodeType *, const char*, const char*);

inline int soap_write_ns3__CurrencyCodeType(struct soap *soap, enum ns3__CurrencyCodeType const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_ns3__CurrencyCodeType(soap, p, "ns3:CurrencyCodeType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_ns3__CurrencyCodeType(struct soap *soap, const char *URL, enum ns3__CurrencyCodeType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ns3__CurrencyCodeType(soap, p, "ns3:CurrencyCodeType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__CurrencyCodeType(struct soap *soap, const char *URL, enum ns3__CurrencyCodeType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ns3__CurrencyCodeType(soap, p, "ns3:CurrencyCodeType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum ns3__CurrencyCodeType * SOAP_FMAC4 soap_get_ns3__CurrencyCodeType(struct soap*, enum ns3__CurrencyCodeType *, const char*, const char*);

inline int soap_read_ns3__CurrencyCodeType(struct soap *soap, enum ns3__CurrencyCodeType *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_ns3__CurrencyCodeType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__CurrencyCodeType(struct soap *soap, const char *URL, enum ns3__CurrencyCodeType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__CurrencyCodeType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__CurrencyCodeType(struct soap *soap, enum ns3__CurrencyCodeType *p)
{
	if (soap_read_ns3__CurrencyCodeType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__CountryCodeType_DEFINED
#define SOAP_TYPE_ns3__CountryCodeType_DEFINED

inline void soap_default_ns3__CountryCodeType(struct soap *soap, enum ns3__CountryCodeType *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_ns3__CountryCodeType
	*a = SOAP_DEFAULT_ns3__CountryCodeType;
#else
	*a = (enum ns3__CountryCodeType)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__CountryCodeType(struct soap*, const char*, int, const enum ns3__CountryCodeType *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns3__CountryCodeType2s(struct soap*, enum ns3__CountryCodeType);
SOAP_FMAC3 enum ns3__CountryCodeType * SOAP_FMAC4 soap_in_ns3__CountryCodeType(struct soap*, const char*, enum ns3__CountryCodeType *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns3__CountryCodeType(struct soap*, const char*, enum ns3__CountryCodeType *);

SOAP_FMAC3 enum ns3__CountryCodeType * SOAP_FMAC4 soap_new_ns3__CountryCodeType(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns3__CountryCodeType(struct soap*, const enum ns3__CountryCodeType *, const char*, const char*);

inline int soap_write_ns3__CountryCodeType(struct soap *soap, enum ns3__CountryCodeType const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_ns3__CountryCodeType(soap, p, "ns3:CountryCodeType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_ns3__CountryCodeType(struct soap *soap, const char *URL, enum ns3__CountryCodeType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ns3__CountryCodeType(soap, p, "ns3:CountryCodeType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__CountryCodeType(struct soap *soap, const char *URL, enum ns3__CountryCodeType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ns3__CountryCodeType(soap, p, "ns3:CountryCodeType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum ns3__CountryCodeType * SOAP_FMAC4 soap_get_ns3__CountryCodeType(struct soap*, enum ns3__CountryCodeType *, const char*, const char*);

inline int soap_read_ns3__CountryCodeType(struct soap *soap, enum ns3__CountryCodeType *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_ns3__CountryCodeType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__CountryCodeType(struct soap *soap, const char *URL, enum ns3__CountryCodeType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__CountryCodeType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__CountryCodeType(struct soap *soap, enum ns3__CountryCodeType *p)
{
	if (soap_read_ns3__CountryCodeType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__CheckoutStatusCodeType_DEFINED
#define SOAP_TYPE_ns3__CheckoutStatusCodeType_DEFINED

inline void soap_default_ns3__CheckoutStatusCodeType(struct soap *soap, enum ns3__CheckoutStatusCodeType *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_ns3__CheckoutStatusCodeType
	*a = SOAP_DEFAULT_ns3__CheckoutStatusCodeType;
#else
	*a = (enum ns3__CheckoutStatusCodeType)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__CheckoutStatusCodeType(struct soap*, const char*, int, const enum ns3__CheckoutStatusCodeType *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns3__CheckoutStatusCodeType2s(struct soap*, enum ns3__CheckoutStatusCodeType);
SOAP_FMAC3 enum ns3__CheckoutStatusCodeType * SOAP_FMAC4 soap_in_ns3__CheckoutStatusCodeType(struct soap*, const char*, enum ns3__CheckoutStatusCodeType *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns3__CheckoutStatusCodeType(struct soap*, const char*, enum ns3__CheckoutStatusCodeType *);

SOAP_FMAC3 enum ns3__CheckoutStatusCodeType * SOAP_FMAC4 soap_new_ns3__CheckoutStatusCodeType(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns3__CheckoutStatusCodeType(struct soap*, const enum ns3__CheckoutStatusCodeType *, const char*, const char*);

inline int soap_write_ns3__CheckoutStatusCodeType(struct soap *soap, enum ns3__CheckoutStatusCodeType const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_ns3__CheckoutStatusCodeType(soap, p, "ns3:CheckoutStatusCodeType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_ns3__CheckoutStatusCodeType(struct soap *soap, const char *URL, enum ns3__CheckoutStatusCodeType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ns3__CheckoutStatusCodeType(soap, p, "ns3:CheckoutStatusCodeType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__CheckoutStatusCodeType(struct soap *soap, const char *URL, enum ns3__CheckoutStatusCodeType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ns3__CheckoutStatusCodeType(soap, p, "ns3:CheckoutStatusCodeType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum ns3__CheckoutStatusCodeType * SOAP_FMAC4 soap_get_ns3__CheckoutStatusCodeType(struct soap*, enum ns3__CheckoutStatusCodeType *, const char*, const char*);

inline int soap_read_ns3__CheckoutStatusCodeType(struct soap *soap, enum ns3__CheckoutStatusCodeType *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_ns3__CheckoutStatusCodeType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__CheckoutStatusCodeType(struct soap *soap, const char *URL, enum ns3__CheckoutStatusCodeType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__CheckoutStatusCodeType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__CheckoutStatusCodeType(struct soap *soap, enum ns3__CheckoutStatusCodeType *p)
{
	if (soap_read_ns3__CheckoutStatusCodeType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__BuyerProtectionCodeType_DEFINED
#define SOAP_TYPE_ns3__BuyerProtectionCodeType_DEFINED

inline void soap_default_ns3__BuyerProtectionCodeType(struct soap *soap, enum ns3__BuyerProtectionCodeType *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_ns3__BuyerProtectionCodeType
	*a = SOAP_DEFAULT_ns3__BuyerProtectionCodeType;
#else
	*a = (enum ns3__BuyerProtectionCodeType)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__BuyerProtectionCodeType(struct soap*, const char*, int, const enum ns3__BuyerProtectionCodeType *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns3__BuyerProtectionCodeType2s(struct soap*, enum ns3__BuyerProtectionCodeType);
SOAP_FMAC3 enum ns3__BuyerProtectionCodeType * SOAP_FMAC4 soap_in_ns3__BuyerProtectionCodeType(struct soap*, const char*, enum ns3__BuyerProtectionCodeType *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns3__BuyerProtectionCodeType(struct soap*, const char*, enum ns3__BuyerProtectionCodeType *);

SOAP_FMAC3 enum ns3__BuyerProtectionCodeType * SOAP_FMAC4 soap_new_ns3__BuyerProtectionCodeType(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns3__BuyerProtectionCodeType(struct soap*, const enum ns3__BuyerProtectionCodeType *, const char*, const char*);

inline int soap_write_ns3__BuyerProtectionCodeType(struct soap *soap, enum ns3__BuyerProtectionCodeType const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_ns3__BuyerProtectionCodeType(soap, p, "ns3:BuyerProtectionCodeType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_ns3__BuyerProtectionCodeType(struct soap *soap, const char *URL, enum ns3__BuyerProtectionCodeType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ns3__BuyerProtectionCodeType(soap, p, "ns3:BuyerProtectionCodeType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__BuyerProtectionCodeType(struct soap *soap, const char *URL, enum ns3__BuyerProtectionCodeType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ns3__BuyerProtectionCodeType(soap, p, "ns3:BuyerProtectionCodeType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum ns3__BuyerProtectionCodeType * SOAP_FMAC4 soap_get_ns3__BuyerProtectionCodeType(struct soap*, enum ns3__BuyerProtectionCodeType *, const char*, const char*);

inline int soap_read_ns3__BuyerProtectionCodeType(struct soap *soap, enum ns3__BuyerProtectionCodeType *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_ns3__BuyerProtectionCodeType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__BuyerProtectionCodeType(struct soap *soap, const char *URL, enum ns3__BuyerProtectionCodeType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__BuyerProtectionCodeType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__BuyerProtectionCodeType(struct soap *soap, enum ns3__BuyerProtectionCodeType *p)
{
	if (soap_read_ns3__BuyerProtectionCodeType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__BuyerPaymentMethodCodeType_DEFINED
#define SOAP_TYPE_ns3__BuyerPaymentMethodCodeType_DEFINED

inline void soap_default_ns3__BuyerPaymentMethodCodeType(struct soap *soap, enum ns3__BuyerPaymentMethodCodeType *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_ns3__BuyerPaymentMethodCodeType
	*a = SOAP_DEFAULT_ns3__BuyerPaymentMethodCodeType;
#else
	*a = (enum ns3__BuyerPaymentMethodCodeType)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__BuyerPaymentMethodCodeType(struct soap*, const char*, int, const enum ns3__BuyerPaymentMethodCodeType *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns3__BuyerPaymentMethodCodeType2s(struct soap*, enum ns3__BuyerPaymentMethodCodeType);
SOAP_FMAC3 enum ns3__BuyerPaymentMethodCodeType * SOAP_FMAC4 soap_in_ns3__BuyerPaymentMethodCodeType(struct soap*, const char*, enum ns3__BuyerPaymentMethodCodeType *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns3__BuyerPaymentMethodCodeType(struct soap*, const char*, enum ns3__BuyerPaymentMethodCodeType *);

SOAP_FMAC3 enum ns3__BuyerPaymentMethodCodeType * SOAP_FMAC4 soap_new_ns3__BuyerPaymentMethodCodeType(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns3__BuyerPaymentMethodCodeType(struct soap*, const enum ns3__BuyerPaymentMethodCodeType *, const char*, const char*);

inline int soap_write_ns3__BuyerPaymentMethodCodeType(struct soap *soap, enum ns3__BuyerPaymentMethodCodeType const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_ns3__BuyerPaymentMethodCodeType(soap, p, "ns3:BuyerPaymentMethodCodeType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_ns3__BuyerPaymentMethodCodeType(struct soap *soap, const char *URL, enum ns3__BuyerPaymentMethodCodeType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ns3__BuyerPaymentMethodCodeType(soap, p, "ns3:BuyerPaymentMethodCodeType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__BuyerPaymentMethodCodeType(struct soap *soap, const char *URL, enum ns3__BuyerPaymentMethodCodeType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ns3__BuyerPaymentMethodCodeType(soap, p, "ns3:BuyerPaymentMethodCodeType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum ns3__BuyerPaymentMethodCodeType * SOAP_FMAC4 soap_get_ns3__BuyerPaymentMethodCodeType(struct soap*, enum ns3__BuyerPaymentMethodCodeType *, const char*, const char*);

inline int soap_read_ns3__BuyerPaymentMethodCodeType(struct soap *soap, enum ns3__BuyerPaymentMethodCodeType *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_ns3__BuyerPaymentMethodCodeType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__BuyerPaymentMethodCodeType(struct soap *soap, const char *URL, enum ns3__BuyerPaymentMethodCodeType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__BuyerPaymentMethodCodeType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__BuyerPaymentMethodCodeType(struct soap *soap, enum ns3__BuyerPaymentMethodCodeType *p)
{
	if (soap_read_ns3__BuyerPaymentMethodCodeType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__BalanceCodeType_DEFINED
#define SOAP_TYPE_ns3__BalanceCodeType_DEFINED

inline void soap_default_ns3__BalanceCodeType(struct soap *soap, enum ns3__BalanceCodeType *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_ns3__BalanceCodeType
	*a = SOAP_DEFAULT_ns3__BalanceCodeType;
#else
	*a = (enum ns3__BalanceCodeType)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__BalanceCodeType(struct soap*, const char*, int, const enum ns3__BalanceCodeType *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns3__BalanceCodeType2s(struct soap*, enum ns3__BalanceCodeType);
SOAP_FMAC3 enum ns3__BalanceCodeType * SOAP_FMAC4 soap_in_ns3__BalanceCodeType(struct soap*, const char*, enum ns3__BalanceCodeType *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns3__BalanceCodeType(struct soap*, const char*, enum ns3__BalanceCodeType *);

SOAP_FMAC3 enum ns3__BalanceCodeType * SOAP_FMAC4 soap_new_ns3__BalanceCodeType(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns3__BalanceCodeType(struct soap*, const enum ns3__BalanceCodeType *, const char*, const char*);

inline int soap_write_ns3__BalanceCodeType(struct soap *soap, enum ns3__BalanceCodeType const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_ns3__BalanceCodeType(soap, p, "ns3:BalanceCodeType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_ns3__BalanceCodeType(struct soap *soap, const char *URL, enum ns3__BalanceCodeType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ns3__BalanceCodeType(soap, p, "ns3:BalanceCodeType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__BalanceCodeType(struct soap *soap, const char *URL, enum ns3__BalanceCodeType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ns3__BalanceCodeType(soap, p, "ns3:BalanceCodeType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum ns3__BalanceCodeType * SOAP_FMAC4 soap_get_ns3__BalanceCodeType(struct soap*, enum ns3__BalanceCodeType *, const char*, const char*);

inline int soap_read_ns3__BalanceCodeType(struct soap *soap, enum ns3__BalanceCodeType *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_ns3__BalanceCodeType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__BalanceCodeType(struct soap *soap, const char *URL, enum ns3__BalanceCodeType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__BalanceCodeType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__BalanceCodeType(struct soap *soap, enum ns3__BalanceCodeType *p)
{
	if (soap_read_ns3__BalanceCodeType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__AuctionTypeCodeType_DEFINED
#define SOAP_TYPE_ns3__AuctionTypeCodeType_DEFINED

inline void soap_default_ns3__AuctionTypeCodeType(struct soap *soap, enum ns3__AuctionTypeCodeType *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_ns3__AuctionTypeCodeType
	*a = SOAP_DEFAULT_ns3__AuctionTypeCodeType;
#else
	*a = (enum ns3__AuctionTypeCodeType)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__AuctionTypeCodeType(struct soap*, const char*, int, const enum ns3__AuctionTypeCodeType *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns3__AuctionTypeCodeType2s(struct soap*, enum ns3__AuctionTypeCodeType);
SOAP_FMAC3 enum ns3__AuctionTypeCodeType * SOAP_FMAC4 soap_in_ns3__AuctionTypeCodeType(struct soap*, const char*, enum ns3__AuctionTypeCodeType *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns3__AuctionTypeCodeType(struct soap*, const char*, enum ns3__AuctionTypeCodeType *);

SOAP_FMAC3 enum ns3__AuctionTypeCodeType * SOAP_FMAC4 soap_new_ns3__AuctionTypeCodeType(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns3__AuctionTypeCodeType(struct soap*, const enum ns3__AuctionTypeCodeType *, const char*, const char*);

inline int soap_write_ns3__AuctionTypeCodeType(struct soap *soap, enum ns3__AuctionTypeCodeType const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_ns3__AuctionTypeCodeType(soap, p, "ns3:AuctionTypeCodeType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_ns3__AuctionTypeCodeType(struct soap *soap, const char *URL, enum ns3__AuctionTypeCodeType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ns3__AuctionTypeCodeType(soap, p, "ns3:AuctionTypeCodeType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__AuctionTypeCodeType(struct soap *soap, const char *URL, enum ns3__AuctionTypeCodeType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ns3__AuctionTypeCodeType(soap, p, "ns3:AuctionTypeCodeType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum ns3__AuctionTypeCodeType * SOAP_FMAC4 soap_get_ns3__AuctionTypeCodeType(struct soap*, enum ns3__AuctionTypeCodeType *, const char*, const char*);

inline int soap_read_ns3__AuctionTypeCodeType(struct soap *soap, enum ns3__AuctionTypeCodeType *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_ns3__AuctionTypeCodeType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__AuctionTypeCodeType(struct soap *soap, const char *URL, enum ns3__AuctionTypeCodeType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__AuctionTypeCodeType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__AuctionTypeCodeType(struct soap *soap, enum ns3__AuctionTypeCodeType *p)
{
	if (soap_read_ns3__AuctionTypeCodeType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__AddressOwnerCodeType_DEFINED
#define SOAP_TYPE_ns3__AddressOwnerCodeType_DEFINED

inline void soap_default_ns3__AddressOwnerCodeType(struct soap *soap, enum ns3__AddressOwnerCodeType *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_ns3__AddressOwnerCodeType
	*a = SOAP_DEFAULT_ns3__AddressOwnerCodeType;
#else
	*a = (enum ns3__AddressOwnerCodeType)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__AddressOwnerCodeType(struct soap*, const char*, int, const enum ns3__AddressOwnerCodeType *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns3__AddressOwnerCodeType2s(struct soap*, enum ns3__AddressOwnerCodeType);
SOAP_FMAC3 enum ns3__AddressOwnerCodeType * SOAP_FMAC4 soap_in_ns3__AddressOwnerCodeType(struct soap*, const char*, enum ns3__AddressOwnerCodeType *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns3__AddressOwnerCodeType(struct soap*, const char*, enum ns3__AddressOwnerCodeType *);

SOAP_FMAC3 enum ns3__AddressOwnerCodeType * SOAP_FMAC4 soap_new_ns3__AddressOwnerCodeType(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns3__AddressOwnerCodeType(struct soap*, const enum ns3__AddressOwnerCodeType *, const char*, const char*);

inline int soap_write_ns3__AddressOwnerCodeType(struct soap *soap, enum ns3__AddressOwnerCodeType const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_ns3__AddressOwnerCodeType(soap, p, "ns3:AddressOwnerCodeType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_ns3__AddressOwnerCodeType(struct soap *soap, const char *URL, enum ns3__AddressOwnerCodeType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ns3__AddressOwnerCodeType(soap, p, "ns3:AddressOwnerCodeType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__AddressOwnerCodeType(struct soap *soap, const char *URL, enum ns3__AddressOwnerCodeType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ns3__AddressOwnerCodeType(soap, p, "ns3:AddressOwnerCodeType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum ns3__AddressOwnerCodeType * SOAP_FMAC4 soap_get_ns3__AddressOwnerCodeType(struct soap*, enum ns3__AddressOwnerCodeType *, const char*, const char*);

inline int soap_read_ns3__AddressOwnerCodeType(struct soap *soap, enum ns3__AddressOwnerCodeType *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_ns3__AddressOwnerCodeType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__AddressOwnerCodeType(struct soap *soap, const char *URL, enum ns3__AddressOwnerCodeType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__AddressOwnerCodeType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__AddressOwnerCodeType(struct soap *soap, enum ns3__AddressOwnerCodeType *p)
{
	if (soap_read_ns3__AddressOwnerCodeType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__AckCodeType_DEFINED
#define SOAP_TYPE_ns3__AckCodeType_DEFINED

inline void soap_default_ns3__AckCodeType(struct soap *soap, enum ns3__AckCodeType *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_ns3__AckCodeType
	*a = SOAP_DEFAULT_ns3__AckCodeType;
#else
	*a = (enum ns3__AckCodeType)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__AckCodeType(struct soap*, const char*, int, const enum ns3__AckCodeType *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns3__AckCodeType2s(struct soap*, enum ns3__AckCodeType);
SOAP_FMAC3 enum ns3__AckCodeType * SOAP_FMAC4 soap_in_ns3__AckCodeType(struct soap*, const char*, enum ns3__AckCodeType *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns3__AckCodeType(struct soap*, const char*, enum ns3__AckCodeType *);

SOAP_FMAC3 enum ns3__AckCodeType * SOAP_FMAC4 soap_new_ns3__AckCodeType(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns3__AckCodeType(struct soap*, const enum ns3__AckCodeType *, const char*, const char*);

inline int soap_write_ns3__AckCodeType(struct soap *soap, enum ns3__AckCodeType const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_ns3__AckCodeType(soap, p, "ns3:AckCodeType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_ns3__AckCodeType(struct soap *soap, const char *URL, enum ns3__AckCodeType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ns3__AckCodeType(soap, p, "ns3:AckCodeType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__AckCodeType(struct soap *soap, const char *URL, enum ns3__AckCodeType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ns3__AckCodeType(soap, p, "ns3:AckCodeType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum ns3__AckCodeType * SOAP_FMAC4 soap_get_ns3__AckCodeType(struct soap*, enum ns3__AckCodeType *, const char*, const char*);

inline int soap_read_ns3__AckCodeType(struct soap *soap, enum ns3__AckCodeType *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_ns3__AckCodeType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__AckCodeType(struct soap *soap, const char *URL, enum ns3__AckCodeType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__AckCodeType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__AckCodeType(struct soap *soap, enum ns3__AckCodeType *p)
{
	if (soap_read_ns3__AckCodeType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__AccountStateCodeType_DEFINED
#define SOAP_TYPE_ns3__AccountStateCodeType_DEFINED

inline void soap_default_ns3__AccountStateCodeType(struct soap *soap, enum ns3__AccountStateCodeType *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_ns3__AccountStateCodeType
	*a = SOAP_DEFAULT_ns3__AccountStateCodeType;
#else
	*a = (enum ns3__AccountStateCodeType)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__AccountStateCodeType(struct soap*, const char*, int, const enum ns3__AccountStateCodeType *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns3__AccountStateCodeType2s(struct soap*, enum ns3__AccountStateCodeType);
SOAP_FMAC3 enum ns3__AccountStateCodeType * SOAP_FMAC4 soap_in_ns3__AccountStateCodeType(struct soap*, const char*, enum ns3__AccountStateCodeType *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns3__AccountStateCodeType(struct soap*, const char*, enum ns3__AccountStateCodeType *);

SOAP_FMAC3 enum ns3__AccountStateCodeType * SOAP_FMAC4 soap_new_ns3__AccountStateCodeType(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns3__AccountStateCodeType(struct soap*, const enum ns3__AccountStateCodeType *, const char*, const char*);

inline int soap_write_ns3__AccountStateCodeType(struct soap *soap, enum ns3__AccountStateCodeType const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_ns3__AccountStateCodeType(soap, p, "ns3:AccountStateCodeType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_ns3__AccountStateCodeType(struct soap *soap, const char *URL, enum ns3__AccountStateCodeType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ns3__AccountStateCodeType(soap, p, "ns3:AccountStateCodeType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__AccountStateCodeType(struct soap *soap, const char *URL, enum ns3__AccountStateCodeType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ns3__AccountStateCodeType(soap, p, "ns3:AccountStateCodeType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum ns3__AccountStateCodeType * SOAP_FMAC4 soap_get_ns3__AccountStateCodeType(struct soap*, enum ns3__AccountStateCodeType *, const char*, const char*);

inline int soap_read_ns3__AccountStateCodeType(struct soap *soap, enum ns3__AccountStateCodeType *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_ns3__AccountStateCodeType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__AccountStateCodeType(struct soap *soap, const char *URL, enum ns3__AccountStateCodeType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__AccountStateCodeType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__AccountStateCodeType(struct soap *soap, enum ns3__AccountStateCodeType *p)
{
	if (soap_read_ns3__AccountStateCodeType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns3__union_AccountSummaryType_DEFINED
#define SOAP_TYPE___ns3__union_AccountSummaryType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns3__union_AccountSummaryType(struct soap*, const char*, int, const __ns3__union_AccountSummaryType *, const char*);
SOAP_FMAC3 __ns3__union_AccountSummaryType * SOAP_FMAC4 soap_in___ns3__union_AccountSummaryType(struct soap*, const char*, __ns3__union_AccountSummaryType *, const char*);
SOAP_FMAC1 __ns3__union_AccountSummaryType * SOAP_FMAC2 soap_instantiate___ns3__union_AccountSummaryType(struct soap*, int, const char*, const char*, size_t*);

inline __ns3__union_AccountSummaryType * soap_new___ns3__union_AccountSummaryType(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns3__union_AccountSummaryType(soap, n, NULL, NULL, NULL);
}

inline __ns3__union_AccountSummaryType * soap_new_req___ns3__union_AccountSummaryType(
	struct soap *soap,
	const union _ns3__union_AccountSummaryType& union_AccountSummaryType)
{
	__ns3__union_AccountSummaryType *_p = soap_new___ns3__union_AccountSummaryType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->__ns3__union_AccountSummaryType::union_AccountSummaryType = union_AccountSummaryType;
	}
	return _p;
}

inline __ns3__union_AccountSummaryType * soap_new_set___ns3__union_AccountSummaryType(
	struct soap *soap,
	int __union_AccountSummaryType,
	const union _ns3__union_AccountSummaryType& union_AccountSummaryType)
{
	__ns3__union_AccountSummaryType *_p = soap_new___ns3__union_AccountSummaryType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->__ns3__union_AccountSummaryType::__union_AccountSummaryType = __union_AccountSummaryType;
		_p->__ns3__union_AccountSummaryType::union_AccountSummaryType = union_AccountSummaryType;
	}
	return _p;
}

inline int soap_write___ns3__union_AccountSummaryType(struct soap *soap, __ns3__union_AccountSummaryType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "-ns3:union-AccountSummaryType", p->soap_type() == SOAP_TYPE___ns3__union_AccountSummaryType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns3__union_AccountSummaryType(struct soap *soap, const char *URL, __ns3__union_AccountSummaryType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "-ns3:union-AccountSummaryType", p->soap_type() == SOAP_TYPE___ns3__union_AccountSummaryType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns3__union_AccountSummaryType(struct soap *soap, const char *URL, __ns3__union_AccountSummaryType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "-ns3:union-AccountSummaryType", p->soap_type() == SOAP_TYPE___ns3__union_AccountSummaryType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 __ns3__union_AccountSummaryType * SOAP_FMAC4 soap_get___ns3__union_AccountSummaryType(struct soap*, __ns3__union_AccountSummaryType *, const char*, const char*);

inline int soap_read___ns3__union_AccountSummaryType(struct soap *soap, __ns3__union_AccountSummaryType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get___ns3__union_AccountSummaryType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns3__union_AccountSummaryType(struct soap *soap, const char *URL, __ns3__union_AccountSummaryType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns3__union_AccountSummaryType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv___ns3__union_AccountSummaryType(struct soap *soap, __ns3__union_AccountSummaryType *p)
{
	if (soap_read___ns3__union_AccountSummaryType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__EnterBoardingTokenType_DEFINED
#define SOAP_TYPE_ns3__EnterBoardingTokenType_DEFINED

inline void soap_default_ns3__EnterBoardingTokenType(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns3__EnterBoardingTokenType(struct soap*, const std::string *);

#define soap_ns3__EnterBoardingTokenType2s(soap, a) ((a).c_str())
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__EnterBoardingTokenType(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2ns3__EnterBoardingTokenType(soap, s, a) soap_s2stdchar((soap), (s), (a), 1, 0, -1, NULL)
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_ns3__EnterBoardingTokenType(struct soap*, const char*, std::string*, const char*);

#define soap_instantiate_ns3__EnterBoardingTokenType soap_instantiate_std__string


#define soap_new_ns3__EnterBoardingTokenType soap_new_std__string

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns3__EnterBoardingTokenType(struct soap*, const std::string *, const char*, const char*);

inline int soap_write_ns3__EnterBoardingTokenType(struct soap *soap, std::string const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_ns3__EnterBoardingTokenType(soap, p, "ns3:EnterBoardingTokenType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_ns3__EnterBoardingTokenType(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ns3__EnterBoardingTokenType(soap, p, "ns3:EnterBoardingTokenType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__EnterBoardingTokenType(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ns3__EnterBoardingTokenType(soap, p, "ns3:EnterBoardingTokenType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_ns3__EnterBoardingTokenType(struct soap*, std::string *, const char*, const char*);

inline int soap_read_ns3__EnterBoardingTokenType(struct soap *soap, std::string *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_ns3__EnterBoardingTokenType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__EnterBoardingTokenType(struct soap *soap, const char *URL, std::string *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__EnterBoardingTokenType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__EnterBoardingTokenType(struct soap *soap, std::string *p)
{
	if (soap_read_ns3__EnterBoardingTokenType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif
/* ns3__PaymentStatusIDCodeType is a typedef synonym of xsd__integer */

#ifndef SOAP_TYPE_ns3__PaymentStatusIDCodeType_DEFINED
#define SOAP_TYPE_ns3__PaymentStatusIDCodeType_DEFINED

#define soap_default_ns3__PaymentStatusIDCodeType soap_default_xsd__integer


#define soap_serialize_ns3__PaymentStatusIDCodeType soap_serialize_xsd__integer


#define soap_ns3__PaymentStatusIDCodeType2s(soap, a) ((a).c_str())

#define soap_out_ns3__PaymentStatusIDCodeType soap_out_xsd__integer


#define soap_s2ns3__PaymentStatusIDCodeType(soap, s, a) soap_s2stdchar((soap), (s), (a), 5, 0, -1, "[-+]?\\d+")

#define soap_in_ns3__PaymentStatusIDCodeType soap_in_xsd__integer


#define soap_instantiate_ns3__PaymentStatusIDCodeType soap_instantiate_xsd__integer


#define soap_new_ns3__PaymentStatusIDCodeType soap_new_xsd__integer


#define soap_put_ns3__PaymentStatusIDCodeType soap_put_xsd__integer


#define soap_write_ns3__PaymentStatusIDCodeType soap_write_xsd__integer


#define soap_PUT_ns3__PaymentStatusIDCodeType soap_PUT_xsd__integer


#define soap_POST_send_ns3__PaymentStatusIDCodeType soap_POST_send_xsd__integer


#define soap_get_ns3__PaymentStatusIDCodeType soap_get_xsd__integer


#define soap_read_ns3__PaymentStatusIDCodeType soap_read_xsd__integer


#define soap_GET_ns3__PaymentStatusIDCodeType soap_GET_xsd__integer


#define soap_POST_recv_ns3__PaymentStatusIDCodeType soap_POST_recv_xsd__integer

#endif

#ifndef SOAP_TYPE_ns3__OrderID_DEFINED
#define SOAP_TYPE_ns3__OrderID_DEFINED

inline void soap_default_ns3__OrderID(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns3__OrderID(struct soap*, const std::string *);

#define soap_ns3__OrderID2s(soap, a) ((a).c_str())
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__OrderID(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2ns3__OrderID(soap, s, a) soap_s2stdchar((soap), (s), (a), 1, 0, -1, NULL)
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_ns3__OrderID(struct soap*, const char*, std::string*, const char*);

#define soap_instantiate_ns3__OrderID soap_instantiate_std__string


#define soap_new_ns3__OrderID soap_new_std__string

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns3__OrderID(struct soap*, const std::string *, const char*, const char*);

inline int soap_write_ns3__OrderID(struct soap *soap, std::string const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_ns3__OrderID(soap, p, "ns3:OrderID", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_ns3__OrderID(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ns3__OrderID(soap, p, "ns3:OrderID", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__OrderID(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ns3__OrderID(soap, p, "ns3:OrderID", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_ns3__OrderID(struct soap*, std::string *, const char*, const char*);

inline int soap_read_ns3__OrderID(struct soap *soap, std::string *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_ns3__OrderID(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__OrderID(struct soap *soap, const char *URL, std::string *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__OrderID(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__OrderID(struct soap *soap, std::string *p)
{
	if (soap_read_ns3__OrderID(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__LanguageCodeType_DEFINED
#define SOAP_TYPE_ns3__LanguageCodeType_DEFINED

inline void soap_default_ns3__LanguageCodeType(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns3__LanguageCodeType(struct soap*, const std::string *);

#define soap_ns3__LanguageCodeType2s(soap, a) ((a).c_str())
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__LanguageCodeType(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2ns3__LanguageCodeType(soap, s, a) soap_s2stdchar((soap), (s), (a), 1, 0, -1, NULL)
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_ns3__LanguageCodeType(struct soap*, const char*, std::string*, const char*);

#define soap_instantiate_ns3__LanguageCodeType soap_instantiate_std__string


#define soap_new_ns3__LanguageCodeType soap_new_std__string

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns3__LanguageCodeType(struct soap*, const std::string *, const char*, const char*);

inline int soap_write_ns3__LanguageCodeType(struct soap *soap, std::string const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_ns3__LanguageCodeType(soap, p, "ns3:LanguageCodeType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_ns3__LanguageCodeType(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ns3__LanguageCodeType(soap, p, "ns3:LanguageCodeType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__LanguageCodeType(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ns3__LanguageCodeType(soap, p, "ns3:LanguageCodeType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_ns3__LanguageCodeType(struct soap*, std::string *, const char*, const char*);

inline int soap_read_ns3__LanguageCodeType(struct soap *soap, std::string *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_ns3__LanguageCodeType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__LanguageCodeType(struct soap *soap, const char *URL, std::string *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__LanguageCodeType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__LanguageCodeType(struct soap *soap, std::string *p)
{
	if (soap_read_ns3__LanguageCodeType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__AuthFlowTokenType_DEFINED
#define SOAP_TYPE_ns3__AuthFlowTokenType_DEFINED

inline void soap_default_ns3__AuthFlowTokenType(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns3__AuthFlowTokenType(struct soap*, const std::string *);

#define soap_ns3__AuthFlowTokenType2s(soap, a) ((a).c_str())
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__AuthFlowTokenType(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2ns3__AuthFlowTokenType(soap, s, a) soap_s2stdchar((soap), (s), (a), 1, 0, -1, NULL)
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_ns3__AuthFlowTokenType(struct soap*, const char*, std::string*, const char*);

#define soap_instantiate_ns3__AuthFlowTokenType soap_instantiate_std__string


#define soap_new_ns3__AuthFlowTokenType soap_new_std__string

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns3__AuthFlowTokenType(struct soap*, const std::string *, const char*, const char*);

inline int soap_write_ns3__AuthFlowTokenType(struct soap *soap, std::string const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_ns3__AuthFlowTokenType(soap, p, "ns3:AuthFlowTokenType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_ns3__AuthFlowTokenType(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ns3__AuthFlowTokenType(soap, p, "ns3:AuthFlowTokenType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__AuthFlowTokenType(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ns3__AuthFlowTokenType(soap, p, "ns3:AuthFlowTokenType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_ns3__AuthFlowTokenType(struct soap*, std::string *, const char*, const char*);

inline int soap_read_ns3__AuthFlowTokenType(struct soap *soap, std::string *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_ns3__AuthFlowTokenType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__AuthFlowTokenType(struct soap *soap, const char *URL, std::string *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__AuthFlowTokenType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__AuthFlowTokenType(struct soap *soap, std::string *p)
{
	if (soap_read_ns3__AuthFlowTokenType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__ExpressCheckoutTokenType_DEFINED
#define SOAP_TYPE_ns3__ExpressCheckoutTokenType_DEFINED

inline void soap_default_ns3__ExpressCheckoutTokenType(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns3__ExpressCheckoutTokenType(struct soap*, const std::string *);

#define soap_ns3__ExpressCheckoutTokenType2s(soap, a) ((a).c_str())
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__ExpressCheckoutTokenType(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2ns3__ExpressCheckoutTokenType(soap, s, a) soap_s2stdchar((soap), (s), (a), 1, 0, -1, NULL)
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_ns3__ExpressCheckoutTokenType(struct soap*, const char*, std::string*, const char*);

#define soap_instantiate_ns3__ExpressCheckoutTokenType soap_instantiate_std__string


#define soap_new_ns3__ExpressCheckoutTokenType soap_new_std__string

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns3__ExpressCheckoutTokenType(struct soap*, const std::string *, const char*, const char*);

inline int soap_write_ns3__ExpressCheckoutTokenType(struct soap *soap, std::string const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_ns3__ExpressCheckoutTokenType(soap, p, "ns3:ExpressCheckoutTokenType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_ns3__ExpressCheckoutTokenType(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ns3__ExpressCheckoutTokenType(soap, p, "ns3:ExpressCheckoutTokenType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__ExpressCheckoutTokenType(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ns3__ExpressCheckoutTokenType(soap, p, "ns3:ExpressCheckoutTokenType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_ns3__ExpressCheckoutTokenType(struct soap*, std::string *, const char*, const char*);

inline int soap_read_ns3__ExpressCheckoutTokenType(struct soap *soap, std::string *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_ns3__ExpressCheckoutTokenType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__ExpressCheckoutTokenType(struct soap *soap, const char *URL, std::string *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__ExpressCheckoutTokenType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__ExpressCheckoutTokenType(struct soap *soap, std::string *p)
{
	if (soap_read_ns3__ExpressCheckoutTokenType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__EmailAddressType_DEFINED
#define SOAP_TYPE_ns3__EmailAddressType_DEFINED

inline void soap_default_ns3__EmailAddressType(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns3__EmailAddressType(struct soap*, const std::string *);

#define soap_ns3__EmailAddressType2s(soap, a) ((a).c_str())
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__EmailAddressType(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2ns3__EmailAddressType(soap, s, a) soap_s2stdchar((soap), (s), (a), 1, 0, -1, NULL)
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_ns3__EmailAddressType(struct soap*, const char*, std::string*, const char*);

#define soap_instantiate_ns3__EmailAddressType soap_instantiate_std__string


#define soap_new_ns3__EmailAddressType soap_new_std__string

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns3__EmailAddressType(struct soap*, const std::string *, const char*, const char*);

inline int soap_write_ns3__EmailAddressType(struct soap *soap, std::string const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_ns3__EmailAddressType(soap, p, "ns3:EmailAddressType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_ns3__EmailAddressType(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ns3__EmailAddressType(soap, p, "ns3:EmailAddressType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__EmailAddressType(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ns3__EmailAddressType(soap, p, "ns3:EmailAddressType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_ns3__EmailAddressType(struct soap*, std::string *, const char*, const char*);

inline int soap_read_ns3__EmailAddressType(struct soap *soap, std::string *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_ns3__EmailAddressType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__EmailAddressType(struct soap *soap, const char *URL, std::string *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__EmailAddressType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__EmailAddressType(struct soap *soap, std::string *p)
{
	if (soap_read_ns3__EmailAddressType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__MerchantPullIDType_DEFINED
#define SOAP_TYPE_ns3__MerchantPullIDType_DEFINED

inline void soap_default_ns3__MerchantPullIDType(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns3__MerchantPullIDType(struct soap*, const std::string *);

#define soap_ns3__MerchantPullIDType2s(soap, a) ((a).c_str())
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__MerchantPullIDType(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2ns3__MerchantPullIDType(soap, s, a) soap_s2stdchar((soap), (s), (a), 1, 0, -1, NULL)
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_ns3__MerchantPullIDType(struct soap*, const char*, std::string*, const char*);

#define soap_instantiate_ns3__MerchantPullIDType soap_instantiate_std__string


#define soap_new_ns3__MerchantPullIDType soap_new_std__string

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns3__MerchantPullIDType(struct soap*, const std::string *, const char*, const char*);

inline int soap_write_ns3__MerchantPullIDType(struct soap *soap, std::string const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_ns3__MerchantPullIDType(soap, p, "ns3:MerchantPullIDType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_ns3__MerchantPullIDType(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ns3__MerchantPullIDType(soap, p, "ns3:MerchantPullIDType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__MerchantPullIDType(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ns3__MerchantPullIDType(soap, p, "ns3:MerchantPullIDType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_ns3__MerchantPullIDType(struct soap*, std::string *, const char*, const char*);

inline int soap_read_ns3__MerchantPullIDType(struct soap *soap, std::string *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_ns3__MerchantPullIDType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__MerchantPullIDType(struct soap *soap, const char *URL, std::string *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__MerchantPullIDType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__MerchantPullIDType(struct soap *soap, std::string *p)
{
	if (soap_read_ns3__MerchantPullIDType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__AuthorizationId_DEFINED
#define SOAP_TYPE_ns3__AuthorizationId_DEFINED

inline void soap_default_ns3__AuthorizationId(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns3__AuthorizationId(struct soap*, const std::string *);

#define soap_ns3__AuthorizationId2s(soap, a) ((a).c_str())
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__AuthorizationId(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2ns3__AuthorizationId(soap, s, a) soap_s2stdchar((soap), (s), (a), 1, 0, -1, NULL)
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_ns3__AuthorizationId(struct soap*, const char*, std::string*, const char*);

#define soap_instantiate_ns3__AuthorizationId soap_instantiate_std__string


#define soap_new_ns3__AuthorizationId soap_new_std__string

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns3__AuthorizationId(struct soap*, const std::string *, const char*, const char*);

inline int soap_write_ns3__AuthorizationId(struct soap *soap, std::string const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_ns3__AuthorizationId(soap, p, "ns3:AuthorizationId", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_ns3__AuthorizationId(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ns3__AuthorizationId(soap, p, "ns3:AuthorizationId", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__AuthorizationId(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ns3__AuthorizationId(soap, p, "ns3:AuthorizationId", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_ns3__AuthorizationId(struct soap*, std::string *, const char*, const char*);

inline int soap_read_ns3__AuthorizationId(struct soap *soap, std::string *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_ns3__AuthorizationId(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__AuthorizationId(struct soap *soap, const char *URL, std::string *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__AuthorizationId(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__AuthorizationId(struct soap *soap, std::string *p)
{
	if (soap_read_ns3__AuthorizationId(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__TransactionId_DEFINED
#define SOAP_TYPE_ns3__TransactionId_DEFINED

inline void soap_default_ns3__TransactionId(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns3__TransactionId(struct soap*, const std::string *);

#define soap_ns3__TransactionId2s(soap, a) ((a).c_str())
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__TransactionId(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2ns3__TransactionId(soap, s, a) soap_s2stdchar((soap), (s), (a), 1, 0, -1, NULL)
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_ns3__TransactionId(struct soap*, const char*, std::string*, const char*);

#define soap_instantiate_ns3__TransactionId soap_instantiate_std__string


#define soap_new_ns3__TransactionId soap_new_std__string

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns3__TransactionId(struct soap*, const std::string *, const char*, const char*);

inline int soap_write_ns3__TransactionId(struct soap *soap, std::string const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_ns3__TransactionId(soap, p, "ns3:TransactionId", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_ns3__TransactionId(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ns3__TransactionId(soap, p, "ns3:TransactionId", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__TransactionId(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ns3__TransactionId(soap, p, "ns3:TransactionId", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_ns3__TransactionId(struct soap*, std::string *, const char*, const char*);

inline int soap_read_ns3__TransactionId(struct soap *soap, std::string *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_ns3__TransactionId(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__TransactionId(struct soap *soap, const char *URL, std::string *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__TransactionId(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__TransactionId(struct soap *soap, std::string *p)
{
	if (soap_read_ns3__TransactionId(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__SuffixType_DEFINED
#define SOAP_TYPE_ns3__SuffixType_DEFINED

inline void soap_default_ns3__SuffixType(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns3__SuffixType(struct soap*, const std::string *);

#define soap_ns3__SuffixType2s(soap, a) ((a).c_str())
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__SuffixType(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2ns3__SuffixType(soap, s, a) soap_s2stdchar((soap), (s), (a), 1, 0, 12, NULL)
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_ns3__SuffixType(struct soap*, const char*, std::string*, const char*);

#define soap_instantiate_ns3__SuffixType soap_instantiate_std__string


#define soap_new_ns3__SuffixType soap_new_std__string

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns3__SuffixType(struct soap*, const std::string *, const char*, const char*);

inline int soap_write_ns3__SuffixType(struct soap *soap, std::string const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_ns3__SuffixType(soap, p, "ns3:SuffixType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_ns3__SuffixType(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ns3__SuffixType(soap, p, "ns3:SuffixType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__SuffixType(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ns3__SuffixType(soap, p, "ns3:SuffixType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_ns3__SuffixType(struct soap*, std::string *, const char*, const char*);

inline int soap_read_ns3__SuffixType(struct soap *soap, std::string *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_ns3__SuffixType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__SuffixType(struct soap *soap, const char *URL, std::string *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__SuffixType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__SuffixType(struct soap *soap, std::string *p)
{
	if (soap_read_ns3__SuffixType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__SalutationType_DEFINED
#define SOAP_TYPE_ns3__SalutationType_DEFINED

inline void soap_default_ns3__SalutationType(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns3__SalutationType(struct soap*, const std::string *);

#define soap_ns3__SalutationType2s(soap, a) ((a).c_str())
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__SalutationType(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2ns3__SalutationType(soap, s, a) soap_s2stdchar((soap), (s), (a), 1, 0, 20, NULL)
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_ns3__SalutationType(struct soap*, const char*, std::string*, const char*);

#define soap_instantiate_ns3__SalutationType soap_instantiate_std__string


#define soap_new_ns3__SalutationType soap_new_std__string

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns3__SalutationType(struct soap*, const std::string *, const char*, const char*);

inline int soap_write_ns3__SalutationType(struct soap *soap, std::string const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_ns3__SalutationType(soap, p, "ns3:SalutationType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_ns3__SalutationType(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ns3__SalutationType(soap, p, "ns3:SalutationType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__SalutationType(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ns3__SalutationType(soap, p, "ns3:SalutationType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_ns3__SalutationType(struct soap*, std::string *, const char*, const char*);

inline int soap_read_ns3__SalutationType(struct soap *soap, std::string *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_ns3__SalutationType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__SalutationType(struct soap *soap, const char *URL, std::string *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__SalutationType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__SalutationType(struct soap *soap, std::string *p)
{
	if (soap_read_ns3__SalutationType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__NameType_DEFINED
#define SOAP_TYPE_ns3__NameType_DEFINED

inline void soap_default_ns3__NameType(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns3__NameType(struct soap*, const std::string *);

#define soap_ns3__NameType2s(soap, a) ((a).c_str())
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__NameType(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2ns3__NameType(soap, s, a) soap_s2stdchar((soap), (s), (a), 1, 0, 25, NULL)
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_ns3__NameType(struct soap*, const char*, std::string*, const char*);

#define soap_instantiate_ns3__NameType soap_instantiate_std__string


#define soap_new_ns3__NameType soap_new_std__string

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns3__NameType(struct soap*, const std::string *, const char*, const char*);

inline int soap_write_ns3__NameType(struct soap *soap, std::string const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_ns3__NameType(soap, p, "ns3:NameType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_ns3__NameType(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ns3__NameType(soap, p, "ns3:NameType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__NameType(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ns3__NameType(soap, p, "ns3:NameType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_ns3__NameType(struct soap*, std::string *, const char*, const char*);

inline int soap_read_ns3__NameType(struct soap *soap, std::string *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_ns3__NameType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__NameType(struct soap *soap, const char *URL, std::string *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__NameType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__NameType(struct soap *soap, std::string *p)
{
	if (soap_read_ns3__NameType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__UserIDType_DEFINED
#define SOAP_TYPE_ns3__UserIDType_DEFINED

inline void soap_default_ns3__UserIDType(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns3__UserIDType(struct soap*, const std::string *);

#define soap_ns3__UserIDType2s(soap, a) ((a).c_str())
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__UserIDType(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2ns3__UserIDType(soap, s, a) soap_s2stdchar((soap), (s), (a), 1, 0, 127, NULL)
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_ns3__UserIDType(struct soap*, const char*, std::string*, const char*);

#define soap_instantiate_ns3__UserIDType soap_instantiate_std__string


#define soap_new_ns3__UserIDType soap_new_std__string

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns3__UserIDType(struct soap*, const std::string *, const char*, const char*);

inline int soap_write_ns3__UserIDType(struct soap *soap, std::string const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_ns3__UserIDType(soap, p, "ns3:UserIDType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_ns3__UserIDType(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ns3__UserIDType(soap, p, "ns3:UserIDType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__UserIDType(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ns3__UserIDType(soap, p, "ns3:UserIDType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_ns3__UserIDType(struct soap*, std::string *, const char*, const char*);

inline int soap_read_ns3__UserIDType(struct soap *soap, std::string *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_ns3__UserIDType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__UserIDType(struct soap *soap, const char *URL, std::string *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__UserIDType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__UserIDType(struct soap *soap, std::string *p)
{
	if (soap_read_ns3__UserIDType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__ItemIDType_DEFINED
#define SOAP_TYPE_ns3__ItemIDType_DEFINED

inline void soap_default_ns3__ItemIDType(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns3__ItemIDType(struct soap*, const std::string *);

#define soap_ns3__ItemIDType2s(soap, a) ((a).c_str())
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__ItemIDType(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2ns3__ItemIDType(soap, s, a) soap_s2stdchar((soap), (s), (a), 1, 0, -1, NULL)
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_ns3__ItemIDType(struct soap*, const char*, std::string*, const char*);

#define soap_instantiate_ns3__ItemIDType soap_instantiate_std__string


#define soap_new_ns3__ItemIDType soap_new_std__string

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns3__ItemIDType(struct soap*, const std::string *, const char*, const char*);

inline int soap_write_ns3__ItemIDType(struct soap *soap, std::string const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_ns3__ItemIDType(soap, p, "ns3:ItemIDType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_ns3__ItemIDType(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ns3__ItemIDType(soap, p, "ns3:ItemIDType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__ItemIDType(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ns3__ItemIDType(soap, p, "ns3:ItemIDType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_ns3__ItemIDType(struct soap*, std::string *, const char*, const char*);

inline int soap_read_ns3__ItemIDType(struct soap *soap, std::string *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_ns3__ItemIDType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__ItemIDType(struct soap *soap, const char *URL, std::string *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__ItemIDType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__ItemIDType(struct soap *soap, std::string *p)
{
	if (soap_read_ns3__ItemIDType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns2__UUIDType_DEFINED
#define SOAP_TYPE_ns2__UUIDType_DEFINED

inline void soap_default_ns2__UUIDType(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns2__UUIDType(struct soap*, const std::string *);

#define soap_ns2__UUIDType2s(soap, a) ((a).c_str())
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__UUIDType(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2ns2__UUIDType(soap, s, a) soap_s2stdchar((soap), (s), (a), 1, 36, 36, NULL)
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_ns2__UUIDType(struct soap*, const char*, std::string*, const char*);

#define soap_instantiate_ns2__UUIDType soap_instantiate_std__string


#define soap_new_ns2__UUIDType soap_new_std__string

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__UUIDType(struct soap*, const std::string *, const char*, const char*);

inline int soap_write_ns2__UUIDType(struct soap *soap, std::string const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_ns2__UUIDType(soap, p, "ns2:UUIDType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_ns2__UUIDType(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ns2__UUIDType(soap, p, "ns2:UUIDType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__UUIDType(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ns2__UUIDType(soap, p, "ns2:UUIDType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_ns2__UUIDType(struct soap*, std::string *, const char*, const char*);

inline int soap_read_ns2__UUIDType(struct soap *soap, std::string *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_ns2__UUIDType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__UUIDType(struct soap *soap, const char *URL, std::string *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns2__UUIDType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns2__UUIDType(struct soap *soap, std::string *p)
{
	if (soap_read_ns2__UUIDType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns4__EnhancedPayerInfoType_DEFINED
#define SOAP_TYPE_ns4__EnhancedPayerInfoType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns4__EnhancedPayerInfoType(struct soap*, const char*, int, const ns4__EnhancedPayerInfoType *, const char*);
SOAP_FMAC3 ns4__EnhancedPayerInfoType * SOAP_FMAC4 soap_in_ns4__EnhancedPayerInfoType(struct soap*, const char*, ns4__EnhancedPayerInfoType *, const char*);
SOAP_FMAC1 ns4__EnhancedPayerInfoType * SOAP_FMAC2 soap_instantiate_ns4__EnhancedPayerInfoType(struct soap*, int, const char*, const char*, size_t*);

inline ns4__EnhancedPayerInfoType * soap_new_ns4__EnhancedPayerInfoType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns4__EnhancedPayerInfoType(soap, n, NULL, NULL, NULL);
}

inline ns4__EnhancedPayerInfoType * soap_new_req_ns4__EnhancedPayerInfoType(
	struct soap *soap)
{
	ns4__EnhancedPayerInfoType *_p = soap_new_ns4__EnhancedPayerInfoType(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns4__EnhancedPayerInfoType * soap_new_set_ns4__EnhancedPayerInfoType(
	struct soap *soap)
{
	ns4__EnhancedPayerInfoType *_p = soap_new_ns4__EnhancedPayerInfoType(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write_ns4__EnhancedPayerInfoType(struct soap *soap, ns4__EnhancedPayerInfoType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns4:EnhancedPayerInfoType", p->soap_type() == SOAP_TYPE_ns4__EnhancedPayerInfoType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns4__EnhancedPayerInfoType(struct soap *soap, const char *URL, ns4__EnhancedPayerInfoType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns4:EnhancedPayerInfoType", p->soap_type() == SOAP_TYPE_ns4__EnhancedPayerInfoType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns4__EnhancedPayerInfoType(struct soap *soap, const char *URL, ns4__EnhancedPayerInfoType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns4:EnhancedPayerInfoType", p->soap_type() == SOAP_TYPE_ns4__EnhancedPayerInfoType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns4__EnhancedPayerInfoType * SOAP_FMAC4 soap_get_ns4__EnhancedPayerInfoType(struct soap*, ns4__EnhancedPayerInfoType *, const char*, const char*);

inline int soap_read_ns4__EnhancedPayerInfoType(struct soap *soap, ns4__EnhancedPayerInfoType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns4__EnhancedPayerInfoType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns4__EnhancedPayerInfoType(struct soap *soap, const char *URL, ns4__EnhancedPayerInfoType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns4__EnhancedPayerInfoType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns4__EnhancedPayerInfoType(struct soap *soap, ns4__EnhancedPayerInfoType *p)
{
	if (soap_read_ns4__EnhancedPayerInfoType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns4__EnhancedCancelRecoupRequestDetailsType_DEFINED
#define SOAP_TYPE_ns4__EnhancedCancelRecoupRequestDetailsType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns4__EnhancedCancelRecoupRequestDetailsType(struct soap*, const char*, int, const ns4__EnhancedCancelRecoupRequestDetailsType *, const char*);
SOAP_FMAC3 ns4__EnhancedCancelRecoupRequestDetailsType * SOAP_FMAC4 soap_in_ns4__EnhancedCancelRecoupRequestDetailsType(struct soap*, const char*, ns4__EnhancedCancelRecoupRequestDetailsType *, const char*);
SOAP_FMAC1 ns4__EnhancedCancelRecoupRequestDetailsType * SOAP_FMAC2 soap_instantiate_ns4__EnhancedCancelRecoupRequestDetailsType(struct soap*, int, const char*, const char*, size_t*);

inline ns4__EnhancedCancelRecoupRequestDetailsType * soap_new_ns4__EnhancedCancelRecoupRequestDetailsType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns4__EnhancedCancelRecoupRequestDetailsType(soap, n, NULL, NULL, NULL);
}

inline ns4__EnhancedCancelRecoupRequestDetailsType * soap_new_req_ns4__EnhancedCancelRecoupRequestDetailsType(
	struct soap *soap)
{
	ns4__EnhancedCancelRecoupRequestDetailsType *_p = soap_new_ns4__EnhancedCancelRecoupRequestDetailsType(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns4__EnhancedCancelRecoupRequestDetailsType * soap_new_set_ns4__EnhancedCancelRecoupRequestDetailsType(
	struct soap *soap)
{
	ns4__EnhancedCancelRecoupRequestDetailsType *_p = soap_new_ns4__EnhancedCancelRecoupRequestDetailsType(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write_ns4__EnhancedCancelRecoupRequestDetailsType(struct soap *soap, ns4__EnhancedCancelRecoupRequestDetailsType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns4:EnhancedCancelRecoupRequestDetailsType", p->soap_type() == SOAP_TYPE_ns4__EnhancedCancelRecoupRequestDetailsType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns4__EnhancedCancelRecoupRequestDetailsType(struct soap *soap, const char *URL, ns4__EnhancedCancelRecoupRequestDetailsType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns4:EnhancedCancelRecoupRequestDetailsType", p->soap_type() == SOAP_TYPE_ns4__EnhancedCancelRecoupRequestDetailsType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns4__EnhancedCancelRecoupRequestDetailsType(struct soap *soap, const char *URL, ns4__EnhancedCancelRecoupRequestDetailsType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns4:EnhancedCancelRecoupRequestDetailsType", p->soap_type() == SOAP_TYPE_ns4__EnhancedCancelRecoupRequestDetailsType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns4__EnhancedCancelRecoupRequestDetailsType * SOAP_FMAC4 soap_get_ns4__EnhancedCancelRecoupRequestDetailsType(struct soap*, ns4__EnhancedCancelRecoupRequestDetailsType *, const char*, const char*);

inline int soap_read_ns4__EnhancedCancelRecoupRequestDetailsType(struct soap *soap, ns4__EnhancedCancelRecoupRequestDetailsType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns4__EnhancedCancelRecoupRequestDetailsType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns4__EnhancedCancelRecoupRequestDetailsType(struct soap *soap, const char *URL, ns4__EnhancedCancelRecoupRequestDetailsType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns4__EnhancedCancelRecoupRequestDetailsType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns4__EnhancedCancelRecoupRequestDetailsType(struct soap *soap, ns4__EnhancedCancelRecoupRequestDetailsType *p)
{
	if (soap_read_ns4__EnhancedCancelRecoupRequestDetailsType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns4__EnhancedCompleteRecoupResponseDetailsType_DEFINED
#define SOAP_TYPE_ns4__EnhancedCompleteRecoupResponseDetailsType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns4__EnhancedCompleteRecoupResponseDetailsType(struct soap*, const char*, int, const ns4__EnhancedCompleteRecoupResponseDetailsType *, const char*);
SOAP_FMAC3 ns4__EnhancedCompleteRecoupResponseDetailsType * SOAP_FMAC4 soap_in_ns4__EnhancedCompleteRecoupResponseDetailsType(struct soap*, const char*, ns4__EnhancedCompleteRecoupResponseDetailsType *, const char*);
SOAP_FMAC1 ns4__EnhancedCompleteRecoupResponseDetailsType * SOAP_FMAC2 soap_instantiate_ns4__EnhancedCompleteRecoupResponseDetailsType(struct soap*, int, const char*, const char*, size_t*);

inline ns4__EnhancedCompleteRecoupResponseDetailsType * soap_new_ns4__EnhancedCompleteRecoupResponseDetailsType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns4__EnhancedCompleteRecoupResponseDetailsType(soap, n, NULL, NULL, NULL);
}

inline ns4__EnhancedCompleteRecoupResponseDetailsType * soap_new_req_ns4__EnhancedCompleteRecoupResponseDetailsType(
	struct soap *soap)
{
	ns4__EnhancedCompleteRecoupResponseDetailsType *_p = soap_new_ns4__EnhancedCompleteRecoupResponseDetailsType(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns4__EnhancedCompleteRecoupResponseDetailsType * soap_new_set_ns4__EnhancedCompleteRecoupResponseDetailsType(
	struct soap *soap)
{
	ns4__EnhancedCompleteRecoupResponseDetailsType *_p = soap_new_ns4__EnhancedCompleteRecoupResponseDetailsType(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write_ns4__EnhancedCompleteRecoupResponseDetailsType(struct soap *soap, ns4__EnhancedCompleteRecoupResponseDetailsType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns4:EnhancedCompleteRecoupResponseDetailsType", p->soap_type() == SOAP_TYPE_ns4__EnhancedCompleteRecoupResponseDetailsType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns4__EnhancedCompleteRecoupResponseDetailsType(struct soap *soap, const char *URL, ns4__EnhancedCompleteRecoupResponseDetailsType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns4:EnhancedCompleteRecoupResponseDetailsType", p->soap_type() == SOAP_TYPE_ns4__EnhancedCompleteRecoupResponseDetailsType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns4__EnhancedCompleteRecoupResponseDetailsType(struct soap *soap, const char *URL, ns4__EnhancedCompleteRecoupResponseDetailsType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns4:EnhancedCompleteRecoupResponseDetailsType", p->soap_type() == SOAP_TYPE_ns4__EnhancedCompleteRecoupResponseDetailsType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns4__EnhancedCompleteRecoupResponseDetailsType * SOAP_FMAC4 soap_get_ns4__EnhancedCompleteRecoupResponseDetailsType(struct soap*, ns4__EnhancedCompleteRecoupResponseDetailsType *, const char*, const char*);

inline int soap_read_ns4__EnhancedCompleteRecoupResponseDetailsType(struct soap *soap, ns4__EnhancedCompleteRecoupResponseDetailsType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns4__EnhancedCompleteRecoupResponseDetailsType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns4__EnhancedCompleteRecoupResponseDetailsType(struct soap *soap, const char *URL, ns4__EnhancedCompleteRecoupResponseDetailsType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns4__EnhancedCompleteRecoupResponseDetailsType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns4__EnhancedCompleteRecoupResponseDetailsType(struct soap *soap, ns4__EnhancedCompleteRecoupResponseDetailsType *p)
{
	if (soap_read_ns4__EnhancedCompleteRecoupResponseDetailsType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns4__EnhancedCompleteRecoupRequestDetailsType_DEFINED
#define SOAP_TYPE_ns4__EnhancedCompleteRecoupRequestDetailsType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns4__EnhancedCompleteRecoupRequestDetailsType(struct soap*, const char*, int, const ns4__EnhancedCompleteRecoupRequestDetailsType *, const char*);
SOAP_FMAC3 ns4__EnhancedCompleteRecoupRequestDetailsType * SOAP_FMAC4 soap_in_ns4__EnhancedCompleteRecoupRequestDetailsType(struct soap*, const char*, ns4__EnhancedCompleteRecoupRequestDetailsType *, const char*);
SOAP_FMAC1 ns4__EnhancedCompleteRecoupRequestDetailsType * SOAP_FMAC2 soap_instantiate_ns4__EnhancedCompleteRecoupRequestDetailsType(struct soap*, int, const char*, const char*, size_t*);

inline ns4__EnhancedCompleteRecoupRequestDetailsType * soap_new_ns4__EnhancedCompleteRecoupRequestDetailsType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns4__EnhancedCompleteRecoupRequestDetailsType(soap, n, NULL, NULL, NULL);
}

inline ns4__EnhancedCompleteRecoupRequestDetailsType * soap_new_req_ns4__EnhancedCompleteRecoupRequestDetailsType(
	struct soap *soap)
{
	ns4__EnhancedCompleteRecoupRequestDetailsType *_p = soap_new_ns4__EnhancedCompleteRecoupRequestDetailsType(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns4__EnhancedCompleteRecoupRequestDetailsType * soap_new_set_ns4__EnhancedCompleteRecoupRequestDetailsType(
	struct soap *soap)
{
	ns4__EnhancedCompleteRecoupRequestDetailsType *_p = soap_new_ns4__EnhancedCompleteRecoupRequestDetailsType(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write_ns4__EnhancedCompleteRecoupRequestDetailsType(struct soap *soap, ns4__EnhancedCompleteRecoupRequestDetailsType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns4:EnhancedCompleteRecoupRequestDetailsType", p->soap_type() == SOAP_TYPE_ns4__EnhancedCompleteRecoupRequestDetailsType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns4__EnhancedCompleteRecoupRequestDetailsType(struct soap *soap, const char *URL, ns4__EnhancedCompleteRecoupRequestDetailsType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns4:EnhancedCompleteRecoupRequestDetailsType", p->soap_type() == SOAP_TYPE_ns4__EnhancedCompleteRecoupRequestDetailsType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns4__EnhancedCompleteRecoupRequestDetailsType(struct soap *soap, const char *URL, ns4__EnhancedCompleteRecoupRequestDetailsType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns4:EnhancedCompleteRecoupRequestDetailsType", p->soap_type() == SOAP_TYPE_ns4__EnhancedCompleteRecoupRequestDetailsType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns4__EnhancedCompleteRecoupRequestDetailsType * SOAP_FMAC4 soap_get_ns4__EnhancedCompleteRecoupRequestDetailsType(struct soap*, ns4__EnhancedCompleteRecoupRequestDetailsType *, const char*, const char*);

inline int soap_read_ns4__EnhancedCompleteRecoupRequestDetailsType(struct soap *soap, ns4__EnhancedCompleteRecoupRequestDetailsType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns4__EnhancedCompleteRecoupRequestDetailsType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns4__EnhancedCompleteRecoupRequestDetailsType(struct soap *soap, const char *URL, ns4__EnhancedCompleteRecoupRequestDetailsType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns4__EnhancedCompleteRecoupRequestDetailsType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns4__EnhancedCompleteRecoupRequestDetailsType(struct soap *soap, ns4__EnhancedCompleteRecoupRequestDetailsType *p)
{
	if (soap_read_ns4__EnhancedCompleteRecoupRequestDetailsType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns4__EnhancedInitiateRecoupRequestDetailsType_DEFINED
#define SOAP_TYPE_ns4__EnhancedInitiateRecoupRequestDetailsType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns4__EnhancedInitiateRecoupRequestDetailsType(struct soap*, const char*, int, const ns4__EnhancedInitiateRecoupRequestDetailsType *, const char*);
SOAP_FMAC3 ns4__EnhancedInitiateRecoupRequestDetailsType * SOAP_FMAC4 soap_in_ns4__EnhancedInitiateRecoupRequestDetailsType(struct soap*, const char*, ns4__EnhancedInitiateRecoupRequestDetailsType *, const char*);
SOAP_FMAC1 ns4__EnhancedInitiateRecoupRequestDetailsType * SOAP_FMAC2 soap_instantiate_ns4__EnhancedInitiateRecoupRequestDetailsType(struct soap*, int, const char*, const char*, size_t*);

inline ns4__EnhancedInitiateRecoupRequestDetailsType * soap_new_ns4__EnhancedInitiateRecoupRequestDetailsType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns4__EnhancedInitiateRecoupRequestDetailsType(soap, n, NULL, NULL, NULL);
}

inline ns4__EnhancedInitiateRecoupRequestDetailsType * soap_new_req_ns4__EnhancedInitiateRecoupRequestDetailsType(
	struct soap *soap)
{
	ns4__EnhancedInitiateRecoupRequestDetailsType *_p = soap_new_ns4__EnhancedInitiateRecoupRequestDetailsType(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns4__EnhancedInitiateRecoupRequestDetailsType * soap_new_set_ns4__EnhancedInitiateRecoupRequestDetailsType(
	struct soap *soap)
{
	ns4__EnhancedInitiateRecoupRequestDetailsType *_p = soap_new_ns4__EnhancedInitiateRecoupRequestDetailsType(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write_ns4__EnhancedInitiateRecoupRequestDetailsType(struct soap *soap, ns4__EnhancedInitiateRecoupRequestDetailsType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns4:EnhancedInitiateRecoupRequestDetailsType", p->soap_type() == SOAP_TYPE_ns4__EnhancedInitiateRecoupRequestDetailsType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns4__EnhancedInitiateRecoupRequestDetailsType(struct soap *soap, const char *URL, ns4__EnhancedInitiateRecoupRequestDetailsType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns4:EnhancedInitiateRecoupRequestDetailsType", p->soap_type() == SOAP_TYPE_ns4__EnhancedInitiateRecoupRequestDetailsType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns4__EnhancedInitiateRecoupRequestDetailsType(struct soap *soap, const char *URL, ns4__EnhancedInitiateRecoupRequestDetailsType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns4:EnhancedInitiateRecoupRequestDetailsType", p->soap_type() == SOAP_TYPE_ns4__EnhancedInitiateRecoupRequestDetailsType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns4__EnhancedInitiateRecoupRequestDetailsType * SOAP_FMAC4 soap_get_ns4__EnhancedInitiateRecoupRequestDetailsType(struct soap*, ns4__EnhancedInitiateRecoupRequestDetailsType *, const char*, const char*);

inline int soap_read_ns4__EnhancedInitiateRecoupRequestDetailsType(struct soap *soap, ns4__EnhancedInitiateRecoupRequestDetailsType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns4__EnhancedInitiateRecoupRequestDetailsType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns4__EnhancedInitiateRecoupRequestDetailsType(struct soap *soap, const char *URL, ns4__EnhancedInitiateRecoupRequestDetailsType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns4__EnhancedInitiateRecoupRequestDetailsType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns4__EnhancedInitiateRecoupRequestDetailsType(struct soap *soap, ns4__EnhancedInitiateRecoupRequestDetailsType *p)
{
	if (soap_read_ns4__EnhancedInitiateRecoupRequestDetailsType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns4__EnhancedItemDataType_DEFINED
#define SOAP_TYPE_ns4__EnhancedItemDataType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns4__EnhancedItemDataType(struct soap*, const char*, int, const ns4__EnhancedItemDataType *, const char*);
SOAP_FMAC3 ns4__EnhancedItemDataType * SOAP_FMAC4 soap_in_ns4__EnhancedItemDataType(struct soap*, const char*, ns4__EnhancedItemDataType *, const char*);
SOAP_FMAC1 ns4__EnhancedItemDataType * SOAP_FMAC2 soap_instantiate_ns4__EnhancedItemDataType(struct soap*, int, const char*, const char*, size_t*);

inline ns4__EnhancedItemDataType * soap_new_ns4__EnhancedItemDataType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns4__EnhancedItemDataType(soap, n, NULL, NULL, NULL);
}

inline ns4__EnhancedItemDataType * soap_new_req_ns4__EnhancedItemDataType(
	struct soap *soap)
{
	ns4__EnhancedItemDataType *_p = soap_new_ns4__EnhancedItemDataType(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns4__EnhancedItemDataType * soap_new_set_ns4__EnhancedItemDataType(
	struct soap *soap)
{
	ns4__EnhancedItemDataType *_p = soap_new_ns4__EnhancedItemDataType(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write_ns4__EnhancedItemDataType(struct soap *soap, ns4__EnhancedItemDataType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns4:EnhancedItemDataType", p->soap_type() == SOAP_TYPE_ns4__EnhancedItemDataType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns4__EnhancedItemDataType(struct soap *soap, const char *URL, ns4__EnhancedItemDataType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns4:EnhancedItemDataType", p->soap_type() == SOAP_TYPE_ns4__EnhancedItemDataType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns4__EnhancedItemDataType(struct soap *soap, const char *URL, ns4__EnhancedItemDataType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns4:EnhancedItemDataType", p->soap_type() == SOAP_TYPE_ns4__EnhancedItemDataType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns4__EnhancedItemDataType * SOAP_FMAC4 soap_get_ns4__EnhancedItemDataType(struct soap*, ns4__EnhancedItemDataType *, const char*, const char*);

inline int soap_read_ns4__EnhancedItemDataType(struct soap *soap, ns4__EnhancedItemDataType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns4__EnhancedItemDataType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns4__EnhancedItemDataType(struct soap *soap, const char *URL, ns4__EnhancedItemDataType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns4__EnhancedItemDataType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns4__EnhancedItemDataType(struct soap *soap, ns4__EnhancedItemDataType *p)
{
	if (soap_read_ns4__EnhancedItemDataType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns4__EnhancedPaymentInfoType_DEFINED
#define SOAP_TYPE_ns4__EnhancedPaymentInfoType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns4__EnhancedPaymentInfoType(struct soap*, const char*, int, const ns4__EnhancedPaymentInfoType *, const char*);
SOAP_FMAC3 ns4__EnhancedPaymentInfoType * SOAP_FMAC4 soap_in_ns4__EnhancedPaymentInfoType(struct soap*, const char*, ns4__EnhancedPaymentInfoType *, const char*);
SOAP_FMAC1 ns4__EnhancedPaymentInfoType * SOAP_FMAC2 soap_instantiate_ns4__EnhancedPaymentInfoType(struct soap*, int, const char*, const char*, size_t*);

inline ns4__EnhancedPaymentInfoType * soap_new_ns4__EnhancedPaymentInfoType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns4__EnhancedPaymentInfoType(soap, n, NULL, NULL, NULL);
}

inline ns4__EnhancedPaymentInfoType * soap_new_req_ns4__EnhancedPaymentInfoType(
	struct soap *soap)
{
	ns4__EnhancedPaymentInfoType *_p = soap_new_ns4__EnhancedPaymentInfoType(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns4__EnhancedPaymentInfoType * soap_new_set_ns4__EnhancedPaymentInfoType(
	struct soap *soap)
{
	ns4__EnhancedPaymentInfoType *_p = soap_new_ns4__EnhancedPaymentInfoType(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write_ns4__EnhancedPaymentInfoType(struct soap *soap, ns4__EnhancedPaymentInfoType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns4:EnhancedPaymentInfoType", p->soap_type() == SOAP_TYPE_ns4__EnhancedPaymentInfoType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns4__EnhancedPaymentInfoType(struct soap *soap, const char *URL, ns4__EnhancedPaymentInfoType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns4:EnhancedPaymentInfoType", p->soap_type() == SOAP_TYPE_ns4__EnhancedPaymentInfoType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns4__EnhancedPaymentInfoType(struct soap *soap, const char *URL, ns4__EnhancedPaymentInfoType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns4:EnhancedPaymentInfoType", p->soap_type() == SOAP_TYPE_ns4__EnhancedPaymentInfoType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns4__EnhancedPaymentInfoType * SOAP_FMAC4 soap_get_ns4__EnhancedPaymentInfoType(struct soap*, ns4__EnhancedPaymentInfoType *, const char*, const char*);

inline int soap_read_ns4__EnhancedPaymentInfoType(struct soap *soap, ns4__EnhancedPaymentInfoType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns4__EnhancedPaymentInfoType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns4__EnhancedPaymentInfoType(struct soap *soap, const char *URL, ns4__EnhancedPaymentInfoType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns4__EnhancedPaymentInfoType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns4__EnhancedPaymentInfoType(struct soap *soap, ns4__EnhancedPaymentInfoType *p)
{
	if (soap_read_ns4__EnhancedPaymentInfoType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns4__EnhancedPaymentDataType_DEFINED
#define SOAP_TYPE_ns4__EnhancedPaymentDataType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns4__EnhancedPaymentDataType(struct soap*, const char*, int, const ns4__EnhancedPaymentDataType *, const char*);
SOAP_FMAC3 ns4__EnhancedPaymentDataType * SOAP_FMAC4 soap_in_ns4__EnhancedPaymentDataType(struct soap*, const char*, ns4__EnhancedPaymentDataType *, const char*);
SOAP_FMAC1 ns4__EnhancedPaymentDataType * SOAP_FMAC2 soap_instantiate_ns4__EnhancedPaymentDataType(struct soap*, int, const char*, const char*, size_t*);

inline ns4__EnhancedPaymentDataType * soap_new_ns4__EnhancedPaymentDataType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns4__EnhancedPaymentDataType(soap, n, NULL, NULL, NULL);
}

inline ns4__EnhancedPaymentDataType * soap_new_req_ns4__EnhancedPaymentDataType(
	struct soap *soap)
{
	ns4__EnhancedPaymentDataType *_p = soap_new_ns4__EnhancedPaymentDataType(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns4__EnhancedPaymentDataType * soap_new_set_ns4__EnhancedPaymentDataType(
	struct soap *soap,
	ns3__AirlineItineraryType *ns3__AirlineItinerary)
{
	ns4__EnhancedPaymentDataType *_p = soap_new_ns4__EnhancedPaymentDataType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns4__EnhancedPaymentDataType::ns3__AirlineItinerary = ns3__AirlineItinerary;
	}
	return _p;
}

inline int soap_write_ns4__EnhancedPaymentDataType(struct soap *soap, ns4__EnhancedPaymentDataType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns4:EnhancedPaymentDataType", p->soap_type() == SOAP_TYPE_ns4__EnhancedPaymentDataType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns4__EnhancedPaymentDataType(struct soap *soap, const char *URL, ns4__EnhancedPaymentDataType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns4:EnhancedPaymentDataType", p->soap_type() == SOAP_TYPE_ns4__EnhancedPaymentDataType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns4__EnhancedPaymentDataType(struct soap *soap, const char *URL, ns4__EnhancedPaymentDataType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns4:EnhancedPaymentDataType", p->soap_type() == SOAP_TYPE_ns4__EnhancedPaymentDataType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns4__EnhancedPaymentDataType * SOAP_FMAC4 soap_get_ns4__EnhancedPaymentDataType(struct soap*, ns4__EnhancedPaymentDataType *, const char*, const char*);

inline int soap_read_ns4__EnhancedPaymentDataType(struct soap *soap, ns4__EnhancedPaymentDataType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns4__EnhancedPaymentDataType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns4__EnhancedPaymentDataType(struct soap *soap, const char *URL, ns4__EnhancedPaymentDataType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns4__EnhancedPaymentDataType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns4__EnhancedPaymentDataType(struct soap *soap, ns4__EnhancedPaymentDataType *p)
{
	if (soap_read_ns4__EnhancedPaymentDataType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns4__EnhancedCheckoutDataType_DEFINED
#define SOAP_TYPE_ns4__EnhancedCheckoutDataType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns4__EnhancedCheckoutDataType(struct soap*, const char*, int, const ns4__EnhancedCheckoutDataType *, const char*);
SOAP_FMAC3 ns4__EnhancedCheckoutDataType * SOAP_FMAC4 soap_in_ns4__EnhancedCheckoutDataType(struct soap*, const char*, ns4__EnhancedCheckoutDataType *, const char*);
SOAP_FMAC1 ns4__EnhancedCheckoutDataType * SOAP_FMAC2 soap_instantiate_ns4__EnhancedCheckoutDataType(struct soap*, int, const char*, const char*, size_t*);

inline ns4__EnhancedCheckoutDataType * soap_new_ns4__EnhancedCheckoutDataType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns4__EnhancedCheckoutDataType(soap, n, NULL, NULL, NULL);
}

inline ns4__EnhancedCheckoutDataType * soap_new_req_ns4__EnhancedCheckoutDataType(
	struct soap *soap)
{
	ns4__EnhancedCheckoutDataType *_p = soap_new_ns4__EnhancedCheckoutDataType(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns4__EnhancedCheckoutDataType * soap_new_set_ns4__EnhancedCheckoutDataType(
	struct soap *soap)
{
	ns4__EnhancedCheckoutDataType *_p = soap_new_ns4__EnhancedCheckoutDataType(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write_ns4__EnhancedCheckoutDataType(struct soap *soap, ns4__EnhancedCheckoutDataType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns4:EnhancedCheckoutDataType", p->soap_type() == SOAP_TYPE_ns4__EnhancedCheckoutDataType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns4__EnhancedCheckoutDataType(struct soap *soap, const char *URL, ns4__EnhancedCheckoutDataType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns4:EnhancedCheckoutDataType", p->soap_type() == SOAP_TYPE_ns4__EnhancedCheckoutDataType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns4__EnhancedCheckoutDataType(struct soap *soap, const char *URL, ns4__EnhancedCheckoutDataType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns4:EnhancedCheckoutDataType", p->soap_type() == SOAP_TYPE_ns4__EnhancedCheckoutDataType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns4__EnhancedCheckoutDataType * SOAP_FMAC4 soap_get_ns4__EnhancedCheckoutDataType(struct soap*, ns4__EnhancedCheckoutDataType *, const char*, const char*);

inline int soap_read_ns4__EnhancedCheckoutDataType(struct soap *soap, ns4__EnhancedCheckoutDataType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns4__EnhancedCheckoutDataType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns4__EnhancedCheckoutDataType(struct soap *soap, const char *URL, ns4__EnhancedCheckoutDataType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns4__EnhancedCheckoutDataType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns4__EnhancedCheckoutDataType(struct soap *soap, ns4__EnhancedCheckoutDataType *p)
{
	if (soap_read_ns4__EnhancedCheckoutDataType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__DiscountInfoType_DEFINED
#define SOAP_TYPE_ns3__DiscountInfoType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__DiscountInfoType(struct soap*, const char*, int, const ns3__DiscountInfoType *, const char*);
SOAP_FMAC3 ns3__DiscountInfoType * SOAP_FMAC4 soap_in_ns3__DiscountInfoType(struct soap*, const char*, ns3__DiscountInfoType *, const char*);
SOAP_FMAC1 ns3__DiscountInfoType * SOAP_FMAC2 soap_instantiate_ns3__DiscountInfoType(struct soap*, int, const char*, const char*, size_t*);

inline ns3__DiscountInfoType * soap_new_ns3__DiscountInfoType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__DiscountInfoType(soap, n, NULL, NULL, NULL);
}

inline ns3__DiscountInfoType * soap_new_req_ns3__DiscountInfoType(
	struct soap *soap)
{
	ns3__DiscountInfoType *_p = soap_new_ns3__DiscountInfoType(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns3__DiscountInfoType * soap_new_set_ns3__DiscountInfoType(
	struct soap *soap,
	std::string *Name,
	std::string *Description,
	ns2__BasicAmountType *Amount,
	enum ns3__RedeemedOfferType *RedeemedOfferType,
	std::string *RedeemedOfferId,
	std::string *PointsAccrued)
{
	ns3__DiscountInfoType *_p = soap_new_ns3__DiscountInfoType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__DiscountInfoType::Name = Name;
		_p->ns3__DiscountInfoType::Description = Description;
		_p->ns3__DiscountInfoType::Amount = Amount;
		_p->ns3__DiscountInfoType::RedeemedOfferType = RedeemedOfferType;
		_p->ns3__DiscountInfoType::RedeemedOfferId = RedeemedOfferId;
		_p->ns3__DiscountInfoType::PointsAccrued = PointsAccrued;
	}
	return _p;
}

inline int soap_write_ns3__DiscountInfoType(struct soap *soap, ns3__DiscountInfoType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:DiscountInfoType", p->soap_type() == SOAP_TYPE_ns3__DiscountInfoType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__DiscountInfoType(struct soap *soap, const char *URL, ns3__DiscountInfoType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:DiscountInfoType", p->soap_type() == SOAP_TYPE_ns3__DiscountInfoType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__DiscountInfoType(struct soap *soap, const char *URL, ns3__DiscountInfoType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:DiscountInfoType", p->soap_type() == SOAP_TYPE_ns3__DiscountInfoType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__DiscountInfoType * SOAP_FMAC4 soap_get_ns3__DiscountInfoType(struct soap*, ns3__DiscountInfoType *, const char*, const char*);

inline int soap_read_ns3__DiscountInfoType(struct soap *soap, ns3__DiscountInfoType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns3__DiscountInfoType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__DiscountInfoType(struct soap *soap, const char *URL, ns3__DiscountInfoType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__DiscountInfoType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__DiscountInfoType(struct soap *soap, ns3__DiscountInfoType *p)
{
	if (soap_read_ns3__DiscountInfoType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__WalletItemsType_DEFINED
#define SOAP_TYPE_ns3__WalletItemsType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__WalletItemsType(struct soap*, const char*, int, const ns3__WalletItemsType *, const char*);
SOAP_FMAC3 ns3__WalletItemsType * SOAP_FMAC4 soap_in_ns3__WalletItemsType(struct soap*, const char*, ns3__WalletItemsType *, const char*);
SOAP_FMAC1 ns3__WalletItemsType * SOAP_FMAC2 soap_instantiate_ns3__WalletItemsType(struct soap*, int, const char*, const char*, size_t*);

inline ns3__WalletItemsType * soap_new_ns3__WalletItemsType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__WalletItemsType(soap, n, NULL, NULL, NULL);
}

inline ns3__WalletItemsType * soap_new_req_ns3__WalletItemsType(
	struct soap *soap)
{
	ns3__WalletItemsType *_p = soap_new_ns3__WalletItemsType(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns3__WalletItemsType * soap_new_set_ns3__WalletItemsType(
	struct soap *soap,
	enum ns3__WalletItemType *Type,
	std::string *Id,
	std::string *Description)
{
	ns3__WalletItemsType *_p = soap_new_ns3__WalletItemsType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__WalletItemsType::Type = Type;
		_p->ns3__WalletItemsType::Id = Id;
		_p->ns3__WalletItemsType::Description = Description;
	}
	return _p;
}

inline int soap_write_ns3__WalletItemsType(struct soap *soap, ns3__WalletItemsType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:WalletItemsType", p->soap_type() == SOAP_TYPE_ns3__WalletItemsType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__WalletItemsType(struct soap *soap, const char *URL, ns3__WalletItemsType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:WalletItemsType", p->soap_type() == SOAP_TYPE_ns3__WalletItemsType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__WalletItemsType(struct soap *soap, const char *URL, ns3__WalletItemsType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:WalletItemsType", p->soap_type() == SOAP_TYPE_ns3__WalletItemsType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__WalletItemsType * SOAP_FMAC4 soap_get_ns3__WalletItemsType(struct soap*, ns3__WalletItemsType *, const char*, const char*);

inline int soap_read_ns3__WalletItemsType(struct soap *soap, ns3__WalletItemsType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns3__WalletItemsType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__WalletItemsType(struct soap *soap, const char *URL, ns3__WalletItemsType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__WalletItemsType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__WalletItemsType(struct soap *soap, ns3__WalletItemsType *p)
{
	if (soap_read_ns3__WalletItemsType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__MerchantDataType_DEFINED
#define SOAP_TYPE_ns3__MerchantDataType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__MerchantDataType(struct soap*, const char*, int, const ns3__MerchantDataType *, const char*);
SOAP_FMAC3 ns3__MerchantDataType * SOAP_FMAC4 soap_in_ns3__MerchantDataType(struct soap*, const char*, ns3__MerchantDataType *, const char*);
SOAP_FMAC1 ns3__MerchantDataType * SOAP_FMAC2 soap_instantiate_ns3__MerchantDataType(struct soap*, int, const char*, const char*, size_t*);

inline ns3__MerchantDataType * soap_new_ns3__MerchantDataType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__MerchantDataType(soap, n, NULL, NULL, NULL);
}

inline ns3__MerchantDataType * soap_new_req_ns3__MerchantDataType(
	struct soap *soap)
{
	ns3__MerchantDataType *_p = soap_new_ns3__MerchantDataType(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns3__MerchantDataType * soap_new_set_ns3__MerchantDataType(
	struct soap *soap,
	const std::vector<ns3__TupleType *> & MerchantDataTuple)
{
	ns3__MerchantDataType *_p = soap_new_ns3__MerchantDataType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__MerchantDataType::MerchantDataTuple = MerchantDataTuple;
	}
	return _p;
}

inline int soap_write_ns3__MerchantDataType(struct soap *soap, ns3__MerchantDataType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:MerchantDataType", p->soap_type() == SOAP_TYPE_ns3__MerchantDataType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__MerchantDataType(struct soap *soap, const char *URL, ns3__MerchantDataType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:MerchantDataType", p->soap_type() == SOAP_TYPE_ns3__MerchantDataType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__MerchantDataType(struct soap *soap, const char *URL, ns3__MerchantDataType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:MerchantDataType", p->soap_type() == SOAP_TYPE_ns3__MerchantDataType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__MerchantDataType * SOAP_FMAC4 soap_get_ns3__MerchantDataType(struct soap*, ns3__MerchantDataType *, const char*, const char*);

inline int soap_read_ns3__MerchantDataType(struct soap *soap, ns3__MerchantDataType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns3__MerchantDataType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__MerchantDataType(struct soap *soap, const char *URL, ns3__MerchantDataType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__MerchantDataType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__MerchantDataType(struct soap *soap, ns3__MerchantDataType *p)
{
	if (soap_read_ns3__MerchantDataType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__TupleType_DEFINED
#define SOAP_TYPE_ns3__TupleType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__TupleType(struct soap*, const char*, int, const ns3__TupleType *, const char*);
SOAP_FMAC3 ns3__TupleType * SOAP_FMAC4 soap_in_ns3__TupleType(struct soap*, const char*, ns3__TupleType *, const char*);
SOAP_FMAC1 ns3__TupleType * SOAP_FMAC2 soap_instantiate_ns3__TupleType(struct soap*, int, const char*, const char*, size_t*);

inline ns3__TupleType * soap_new_ns3__TupleType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__TupleType(soap, n, NULL, NULL, NULL);
}

inline ns3__TupleType * soap_new_req_ns3__TupleType(
	struct soap *soap,
	const std::string& Key,
	const std::string& Value)
{
	ns3__TupleType *_p = soap_new_ns3__TupleType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__TupleType::Key = Key;
		_p->ns3__TupleType::Value = Value;
	}
	return _p;
}

inline ns3__TupleType * soap_new_set_ns3__TupleType(
	struct soap *soap,
	const std::string& Key,
	const std::string& Value)
{
	ns3__TupleType *_p = soap_new_ns3__TupleType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__TupleType::Key = Key;
		_p->ns3__TupleType::Value = Value;
	}
	return _p;
}

inline int soap_write_ns3__TupleType(struct soap *soap, ns3__TupleType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:TupleType", p->soap_type() == SOAP_TYPE_ns3__TupleType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__TupleType(struct soap *soap, const char *URL, ns3__TupleType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:TupleType", p->soap_type() == SOAP_TYPE_ns3__TupleType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__TupleType(struct soap *soap, const char *URL, ns3__TupleType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:TupleType", p->soap_type() == SOAP_TYPE_ns3__TupleType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__TupleType * SOAP_FMAC4 soap_get_ns3__TupleType(struct soap*, ns3__TupleType *, const char*, const char*);

inline int soap_read_ns3__TupleType(struct soap *soap, ns3__TupleType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns3__TupleType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__TupleType(struct soap *soap, const char *URL, ns3__TupleType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__TupleType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__TupleType(struct soap *soap, ns3__TupleType *p)
{
	if (soap_read_ns3__TupleType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__CoupledPaymentInfoType_DEFINED
#define SOAP_TYPE_ns3__CoupledPaymentInfoType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__CoupledPaymentInfoType(struct soap*, const char*, int, const ns3__CoupledPaymentInfoType *, const char*);
SOAP_FMAC3 ns3__CoupledPaymentInfoType * SOAP_FMAC4 soap_in_ns3__CoupledPaymentInfoType(struct soap*, const char*, ns3__CoupledPaymentInfoType *, const char*);
SOAP_FMAC1 ns3__CoupledPaymentInfoType * SOAP_FMAC2 soap_instantiate_ns3__CoupledPaymentInfoType(struct soap*, int, const char*, const char*, size_t*);

inline ns3__CoupledPaymentInfoType * soap_new_ns3__CoupledPaymentInfoType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__CoupledPaymentInfoType(soap, n, NULL, NULL, NULL);
}

inline ns3__CoupledPaymentInfoType * soap_new_req_ns3__CoupledPaymentInfoType(
	struct soap *soap,
	const std::string& CoupledPaymentID)
{
	ns3__CoupledPaymentInfoType *_p = soap_new_ns3__CoupledPaymentInfoType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__CoupledPaymentInfoType::CoupledPaymentID = CoupledPaymentID;
	}
	return _p;
}

inline ns3__CoupledPaymentInfoType * soap_new_set_ns3__CoupledPaymentInfoType(
	struct soap *soap,
	std::string *CoupledPaymentRequestID,
	const std::string& CoupledPaymentID)
{
	ns3__CoupledPaymentInfoType *_p = soap_new_ns3__CoupledPaymentInfoType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__CoupledPaymentInfoType::CoupledPaymentRequestID = CoupledPaymentRequestID;
		_p->ns3__CoupledPaymentInfoType::CoupledPaymentID = CoupledPaymentID;
	}
	return _p;
}

inline int soap_write_ns3__CoupledPaymentInfoType(struct soap *soap, ns3__CoupledPaymentInfoType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:CoupledPaymentInfoType", p->soap_type() == SOAP_TYPE_ns3__CoupledPaymentInfoType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__CoupledPaymentInfoType(struct soap *soap, const char *URL, ns3__CoupledPaymentInfoType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:CoupledPaymentInfoType", p->soap_type() == SOAP_TYPE_ns3__CoupledPaymentInfoType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__CoupledPaymentInfoType(struct soap *soap, const char *URL, ns3__CoupledPaymentInfoType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:CoupledPaymentInfoType", p->soap_type() == SOAP_TYPE_ns3__CoupledPaymentInfoType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__CoupledPaymentInfoType * SOAP_FMAC4 soap_get_ns3__CoupledPaymentInfoType(struct soap*, ns3__CoupledPaymentInfoType *, const char*, const char*);

inline int soap_read_ns3__CoupledPaymentInfoType(struct soap *soap, ns3__CoupledPaymentInfoType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns3__CoupledPaymentInfoType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__CoupledPaymentInfoType(struct soap *soap, const char *URL, ns3__CoupledPaymentInfoType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__CoupledPaymentInfoType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__CoupledPaymentInfoType(struct soap *soap, ns3__CoupledPaymentInfoType *p)
{
	if (soap_read_ns3__CoupledPaymentInfoType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__CoupledBucketsType_DEFINED
#define SOAP_TYPE_ns3__CoupledBucketsType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__CoupledBucketsType(struct soap*, const char*, int, const ns3__CoupledBucketsType *, const char*);
SOAP_FMAC3 ns3__CoupledBucketsType * SOAP_FMAC4 soap_in_ns3__CoupledBucketsType(struct soap*, const char*, ns3__CoupledBucketsType *, const char*);
SOAP_FMAC1 ns3__CoupledBucketsType * SOAP_FMAC2 soap_instantiate_ns3__CoupledBucketsType(struct soap*, int, const char*, const char*, size_t*);

inline ns3__CoupledBucketsType * soap_new_ns3__CoupledBucketsType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__CoupledBucketsType(soap, n, NULL, NULL, NULL);
}

inline ns3__CoupledBucketsType * soap_new_req_ns3__CoupledBucketsType(
	struct soap *soap,
	const std::vector<std::string> & PaymentRequestID)
{
	ns3__CoupledBucketsType *_p = soap_new_ns3__CoupledBucketsType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__CoupledBucketsType::PaymentRequestID = PaymentRequestID;
	}
	return _p;
}

inline ns3__CoupledBucketsType * soap_new_set_ns3__CoupledBucketsType(
	struct soap *soap,
	enum ns3__CoupleType *CoupleType,
	std::string *CoupledPaymentRequestID,
	const std::vector<std::string> & PaymentRequestID)
{
	ns3__CoupledBucketsType *_p = soap_new_ns3__CoupledBucketsType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__CoupledBucketsType::CoupleType = CoupleType;
		_p->ns3__CoupledBucketsType::CoupledPaymentRequestID = CoupledPaymentRequestID;
		_p->ns3__CoupledBucketsType::PaymentRequestID = PaymentRequestID;
	}
	return _p;
}

inline int soap_write_ns3__CoupledBucketsType(struct soap *soap, ns3__CoupledBucketsType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:CoupledBucketsType", p->soap_type() == SOAP_TYPE_ns3__CoupledBucketsType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__CoupledBucketsType(struct soap *soap, const char *URL, ns3__CoupledBucketsType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:CoupledBucketsType", p->soap_type() == SOAP_TYPE_ns3__CoupledBucketsType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__CoupledBucketsType(struct soap *soap, const char *URL, ns3__CoupledBucketsType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:CoupledBucketsType", p->soap_type() == SOAP_TYPE_ns3__CoupledBucketsType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__CoupledBucketsType * SOAP_FMAC4 soap_get_ns3__CoupledBucketsType(struct soap*, ns3__CoupledBucketsType *, const char*, const char*);

inline int soap_read_ns3__CoupledBucketsType(struct soap *soap, ns3__CoupledBucketsType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns3__CoupledBucketsType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__CoupledBucketsType(struct soap *soap, const char *URL, ns3__CoupledBucketsType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__CoupledBucketsType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__CoupledBucketsType(struct soap *soap, ns3__CoupledBucketsType *p)
{
	if (soap_read_ns3__CoupledBucketsType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__RefundInfoType_DEFINED
#define SOAP_TYPE_ns3__RefundInfoType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__RefundInfoType(struct soap*, const char*, int, const ns3__RefundInfoType *, const char*);
SOAP_FMAC3 ns3__RefundInfoType * SOAP_FMAC4 soap_in_ns3__RefundInfoType(struct soap*, const char*, ns3__RefundInfoType *, const char*);
SOAP_FMAC1 ns3__RefundInfoType * SOAP_FMAC2 soap_instantiate_ns3__RefundInfoType(struct soap*, int, const char*, const char*, size_t*);

inline ns3__RefundInfoType * soap_new_ns3__RefundInfoType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__RefundInfoType(soap, n, NULL, NULL, NULL);
}

inline ns3__RefundInfoType * soap_new_req_ns3__RefundInfoType(
	struct soap *soap)
{
	ns3__RefundInfoType *_p = soap_new_ns3__RefundInfoType(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns3__RefundInfoType * soap_new_set_ns3__RefundInfoType(
	struct soap *soap,
	enum ns3__PaymentStatusCodeType *RefundStatus,
	enum ns3__PendingStatusCodeType *PendingReason)
{
	ns3__RefundInfoType *_p = soap_new_ns3__RefundInfoType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__RefundInfoType::RefundStatus = RefundStatus;
		_p->ns3__RefundInfoType::PendingReason = PendingReason;
	}
	return _p;
}

inline int soap_write_ns3__RefundInfoType(struct soap *soap, ns3__RefundInfoType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:RefundInfoType", p->soap_type() == SOAP_TYPE_ns3__RefundInfoType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__RefundInfoType(struct soap *soap, const char *URL, ns3__RefundInfoType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:RefundInfoType", p->soap_type() == SOAP_TYPE_ns3__RefundInfoType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__RefundInfoType(struct soap *soap, const char *URL, ns3__RefundInfoType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:RefundInfoType", p->soap_type() == SOAP_TYPE_ns3__RefundInfoType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__RefundInfoType * SOAP_FMAC4 soap_get_ns3__RefundInfoType(struct soap*, ns3__RefundInfoType *, const char*, const char*);

inline int soap_read_ns3__RefundInfoType(struct soap *soap, ns3__RefundInfoType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns3__RefundInfoType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__RefundInfoType(struct soap *soap, const char *URL, ns3__RefundInfoType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__RefundInfoType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__RefundInfoType(struct soap *soap, ns3__RefundInfoType *p)
{
	if (soap_read_ns3__RefundInfoType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__InvoiceItemType_DEFINED
#define SOAP_TYPE_ns3__InvoiceItemType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__InvoiceItemType(struct soap*, const char*, int, const ns3__InvoiceItemType *, const char*);
SOAP_FMAC3 ns3__InvoiceItemType * SOAP_FMAC4 soap_in_ns3__InvoiceItemType(struct soap*, const char*, ns3__InvoiceItemType *, const char*);
SOAP_FMAC1 ns3__InvoiceItemType * SOAP_FMAC2 soap_instantiate_ns3__InvoiceItemType(struct soap*, int, const char*, const char*, size_t*);

inline ns3__InvoiceItemType * soap_new_ns3__InvoiceItemType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__InvoiceItemType(soap, n, NULL, NULL, NULL);
}

inline ns3__InvoiceItemType * soap_new_req_ns3__InvoiceItemType(
	struct soap *soap)
{
	ns3__InvoiceItemType *_p = soap_new_ns3__InvoiceItemType(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns3__InvoiceItemType * soap_new_set_ns3__InvoiceItemType(
	struct soap *soap,
	std::string *Name,
	std::string *Description,
	std::string *EAN,
	std::string *SKU,
	std::string *ReturnPolicyIdentifier,
	ns2__BasicAmountType *Price,
	ns2__BasicAmountType *ItemPrice,
	double *ItemCount,
	enum ns3__UnitOfMeasure *ItemCountUnit,
	const std::vector<ns3__DiscountType *> & Discount,
	bool *Taxable,
	double *TaxRate,
	const std::vector<ns3__AdditionalFeeType *> & AdditionalFees,
	bool *Reimbursable,
	std::string *MPN,
	std::string *ISBN,
	std::string *PLU,
	std::string *ModelNumber,
	std::string *StyleNumber)
{
	ns3__InvoiceItemType *_p = soap_new_ns3__InvoiceItemType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__InvoiceItemType::Name = Name;
		_p->ns3__InvoiceItemType::Description = Description;
		_p->ns3__InvoiceItemType::EAN = EAN;
		_p->ns3__InvoiceItemType::SKU = SKU;
		_p->ns3__InvoiceItemType::ReturnPolicyIdentifier = ReturnPolicyIdentifier;
		_p->ns3__InvoiceItemType::Price = Price;
		_p->ns3__InvoiceItemType::ItemPrice = ItemPrice;
		_p->ns3__InvoiceItemType::ItemCount = ItemCount;
		_p->ns3__InvoiceItemType::ItemCountUnit = ItemCountUnit;
		_p->ns3__InvoiceItemType::Discount = Discount;
		_p->ns3__InvoiceItemType::Taxable = Taxable;
		_p->ns3__InvoiceItemType::TaxRate = TaxRate;
		_p->ns3__InvoiceItemType::AdditionalFees = AdditionalFees;
		_p->ns3__InvoiceItemType::Reimbursable = Reimbursable;
		_p->ns3__InvoiceItemType::MPN = MPN;
		_p->ns3__InvoiceItemType::ISBN = ISBN;
		_p->ns3__InvoiceItemType::PLU = PLU;
		_p->ns3__InvoiceItemType::ModelNumber = ModelNumber;
		_p->ns3__InvoiceItemType::StyleNumber = StyleNumber;
	}
	return _p;
}

inline int soap_write_ns3__InvoiceItemType(struct soap *soap, ns3__InvoiceItemType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:InvoiceItemType", p->soap_type() == SOAP_TYPE_ns3__InvoiceItemType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__InvoiceItemType(struct soap *soap, const char *URL, ns3__InvoiceItemType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:InvoiceItemType", p->soap_type() == SOAP_TYPE_ns3__InvoiceItemType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__InvoiceItemType(struct soap *soap, const char *URL, ns3__InvoiceItemType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:InvoiceItemType", p->soap_type() == SOAP_TYPE_ns3__InvoiceItemType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__InvoiceItemType * SOAP_FMAC4 soap_get_ns3__InvoiceItemType(struct soap*, ns3__InvoiceItemType *, const char*, const char*);

inline int soap_read_ns3__InvoiceItemType(struct soap *soap, ns3__InvoiceItemType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns3__InvoiceItemType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__InvoiceItemType(struct soap *soap, const char *URL, ns3__InvoiceItemType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__InvoiceItemType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__InvoiceItemType(struct soap *soap, ns3__InvoiceItemType *p)
{
	if (soap_read_ns3__InvoiceItemType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__DiscountType_DEFINED
#define SOAP_TYPE_ns3__DiscountType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__DiscountType(struct soap*, const char*, int, const ns3__DiscountType *, const char*);
SOAP_FMAC3 ns3__DiscountType * SOAP_FMAC4 soap_in_ns3__DiscountType(struct soap*, const char*, ns3__DiscountType *, const char*);
SOAP_FMAC1 ns3__DiscountType * SOAP_FMAC2 soap_instantiate_ns3__DiscountType(struct soap*, int, const char*, const char*, size_t*);

inline ns3__DiscountType * soap_new_ns3__DiscountType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__DiscountType(soap, n, NULL, NULL, NULL);
}

inline ns3__DiscountType * soap_new_req_ns3__DiscountType(
	struct soap *soap,
	ns2__BasicAmountType *Amount)
{
	ns3__DiscountType *_p = soap_new_ns3__DiscountType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__DiscountType::Amount = Amount;
	}
	return _p;
}

inline ns3__DiscountType * soap_new_set_ns3__DiscountType(
	struct soap *soap,
	std::string *Name,
	std::string *Description,
	ns2__BasicAmountType *Amount,
	enum ns3__RedeemedOfferType *RedeemedOfferType,
	std::string *RedeemedOfferID)
{
	ns3__DiscountType *_p = soap_new_ns3__DiscountType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__DiscountType::Name = Name;
		_p->ns3__DiscountType::Description = Description;
		_p->ns3__DiscountType::Amount = Amount;
		_p->ns3__DiscountType::RedeemedOfferType = RedeemedOfferType;
		_p->ns3__DiscountType::RedeemedOfferID = RedeemedOfferID;
	}
	return _p;
}

inline int soap_write_ns3__DiscountType(struct soap *soap, ns3__DiscountType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:DiscountType", p->soap_type() == SOAP_TYPE_ns3__DiscountType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__DiscountType(struct soap *soap, const char *URL, ns3__DiscountType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:DiscountType", p->soap_type() == SOAP_TYPE_ns3__DiscountType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__DiscountType(struct soap *soap, const char *URL, ns3__DiscountType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:DiscountType", p->soap_type() == SOAP_TYPE_ns3__DiscountType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__DiscountType * SOAP_FMAC4 soap_get_ns3__DiscountType(struct soap*, ns3__DiscountType *, const char*, const char*);

inline int soap_read_ns3__DiscountType(struct soap *soap, ns3__DiscountType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns3__DiscountType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__DiscountType(struct soap *soap, const char *URL, ns3__DiscountType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__DiscountType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__DiscountType(struct soap *soap, ns3__DiscountType *p)
{
	if (soap_read_ns3__DiscountType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__AdditionalFeeType_DEFINED
#define SOAP_TYPE_ns3__AdditionalFeeType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__AdditionalFeeType(struct soap*, const char*, int, const ns3__AdditionalFeeType *, const char*);
SOAP_FMAC3 ns3__AdditionalFeeType * SOAP_FMAC4 soap_in_ns3__AdditionalFeeType(struct soap*, const char*, ns3__AdditionalFeeType *, const char*);
SOAP_FMAC1 ns3__AdditionalFeeType * SOAP_FMAC2 soap_instantiate_ns3__AdditionalFeeType(struct soap*, int, const char*, const char*, size_t*);

inline ns3__AdditionalFeeType * soap_new_ns3__AdditionalFeeType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__AdditionalFeeType(soap, n, NULL, NULL, NULL);
}

inline ns3__AdditionalFeeType * soap_new_req_ns3__AdditionalFeeType(
	struct soap *soap)
{
	ns3__AdditionalFeeType *_p = soap_new_ns3__AdditionalFeeType(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns3__AdditionalFeeType * soap_new_set_ns3__AdditionalFeeType(
	struct soap *soap,
	std::string *Type,
	ns2__BasicAmountType *Amount)
{
	ns3__AdditionalFeeType *_p = soap_new_ns3__AdditionalFeeType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__AdditionalFeeType::Type = Type;
		_p->ns3__AdditionalFeeType::Amount = Amount;
	}
	return _p;
}

inline int soap_write_ns3__AdditionalFeeType(struct soap *soap, ns3__AdditionalFeeType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:AdditionalFeeType", p->soap_type() == SOAP_TYPE_ns3__AdditionalFeeType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__AdditionalFeeType(struct soap *soap, const char *URL, ns3__AdditionalFeeType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:AdditionalFeeType", p->soap_type() == SOAP_TYPE_ns3__AdditionalFeeType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__AdditionalFeeType(struct soap *soap, const char *URL, ns3__AdditionalFeeType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:AdditionalFeeType", p->soap_type() == SOAP_TYPE_ns3__AdditionalFeeType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__AdditionalFeeType * SOAP_FMAC4 soap_get_ns3__AdditionalFeeType(struct soap*, ns3__AdditionalFeeType *, const char*, const char*);

inline int soap_read_ns3__AdditionalFeeType(struct soap *soap, ns3__AdditionalFeeType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns3__AdditionalFeeType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__AdditionalFeeType(struct soap *soap, const char *URL, ns3__AdditionalFeeType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__AdditionalFeeType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__AdditionalFeeType(struct soap *soap, ns3__AdditionalFeeType *p)
{
	if (soap_read_ns3__AdditionalFeeType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__MerchantStoreDetailsType_DEFINED
#define SOAP_TYPE_ns3__MerchantStoreDetailsType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__MerchantStoreDetailsType(struct soap*, const char*, int, const ns3__MerchantStoreDetailsType *, const char*);
SOAP_FMAC3 ns3__MerchantStoreDetailsType * SOAP_FMAC4 soap_in_ns3__MerchantStoreDetailsType(struct soap*, const char*, ns3__MerchantStoreDetailsType *, const char*);
SOAP_FMAC1 ns3__MerchantStoreDetailsType * SOAP_FMAC2 soap_instantiate_ns3__MerchantStoreDetailsType(struct soap*, int, const char*, const char*, size_t*);

inline ns3__MerchantStoreDetailsType * soap_new_ns3__MerchantStoreDetailsType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__MerchantStoreDetailsType(soap, n, NULL, NULL, NULL);
}

inline ns3__MerchantStoreDetailsType * soap_new_req_ns3__MerchantStoreDetailsType(
	struct soap *soap,
	const std::string& StoreID)
{
	ns3__MerchantStoreDetailsType *_p = soap_new_ns3__MerchantStoreDetailsType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__MerchantStoreDetailsType::StoreID = StoreID;
	}
	return _p;
}

inline ns3__MerchantStoreDetailsType * soap_new_set_ns3__MerchantStoreDetailsType(
	struct soap *soap,
	const std::string& StoreID,
	std::string *TerminalID)
{
	ns3__MerchantStoreDetailsType *_p = soap_new_ns3__MerchantStoreDetailsType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__MerchantStoreDetailsType::StoreID = StoreID;
		_p->ns3__MerchantStoreDetailsType::TerminalID = TerminalID;
	}
	return _p;
}

inline int soap_write_ns3__MerchantStoreDetailsType(struct soap *soap, ns3__MerchantStoreDetailsType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:MerchantStoreDetailsType", p->soap_type() == SOAP_TYPE_ns3__MerchantStoreDetailsType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__MerchantStoreDetailsType(struct soap *soap, const char *URL, ns3__MerchantStoreDetailsType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:MerchantStoreDetailsType", p->soap_type() == SOAP_TYPE_ns3__MerchantStoreDetailsType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__MerchantStoreDetailsType(struct soap *soap, const char *URL, ns3__MerchantStoreDetailsType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:MerchantStoreDetailsType", p->soap_type() == SOAP_TYPE_ns3__MerchantStoreDetailsType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__MerchantStoreDetailsType * SOAP_FMAC4 soap_get_ns3__MerchantStoreDetailsType(struct soap*, ns3__MerchantStoreDetailsType *, const char*, const char*);

inline int soap_read_ns3__MerchantStoreDetailsType(struct soap *soap, ns3__MerchantStoreDetailsType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns3__MerchantStoreDetailsType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__MerchantStoreDetailsType(struct soap *soap, const char *URL, ns3__MerchantStoreDetailsType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__MerchantStoreDetailsType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__MerchantStoreDetailsType(struct soap *soap, ns3__MerchantStoreDetailsType *p)
{
	if (soap_read_ns3__MerchantStoreDetailsType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__ExternalPartnerTrackingDetailsType_DEFINED
#define SOAP_TYPE_ns3__ExternalPartnerTrackingDetailsType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__ExternalPartnerTrackingDetailsType(struct soap*, const char*, int, const ns3__ExternalPartnerTrackingDetailsType *, const char*);
SOAP_FMAC3 ns3__ExternalPartnerTrackingDetailsType * SOAP_FMAC4 soap_in_ns3__ExternalPartnerTrackingDetailsType(struct soap*, const char*, ns3__ExternalPartnerTrackingDetailsType *, const char*);
SOAP_FMAC1 ns3__ExternalPartnerTrackingDetailsType * SOAP_FMAC2 soap_instantiate_ns3__ExternalPartnerTrackingDetailsType(struct soap*, int, const char*, const char*, size_t*);

inline ns3__ExternalPartnerTrackingDetailsType * soap_new_ns3__ExternalPartnerTrackingDetailsType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__ExternalPartnerTrackingDetailsType(soap, n, NULL, NULL, NULL);
}

inline ns3__ExternalPartnerTrackingDetailsType * soap_new_req_ns3__ExternalPartnerTrackingDetailsType(
	struct soap *soap)
{
	ns3__ExternalPartnerTrackingDetailsType *_p = soap_new_ns3__ExternalPartnerTrackingDetailsType(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns3__ExternalPartnerTrackingDetailsType * soap_new_set_ns3__ExternalPartnerTrackingDetailsType(
	struct soap *soap,
	std::string *ExternalPartnerSegmentID)
{
	ns3__ExternalPartnerTrackingDetailsType *_p = soap_new_ns3__ExternalPartnerTrackingDetailsType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__ExternalPartnerTrackingDetailsType::ExternalPartnerSegmentID = ExternalPartnerSegmentID;
	}
	return _p;
}

inline int soap_write_ns3__ExternalPartnerTrackingDetailsType(struct soap *soap, ns3__ExternalPartnerTrackingDetailsType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:ExternalPartnerTrackingDetailsType", p->soap_type() == SOAP_TYPE_ns3__ExternalPartnerTrackingDetailsType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__ExternalPartnerTrackingDetailsType(struct soap *soap, const char *URL, ns3__ExternalPartnerTrackingDetailsType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:ExternalPartnerTrackingDetailsType", p->soap_type() == SOAP_TYPE_ns3__ExternalPartnerTrackingDetailsType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__ExternalPartnerTrackingDetailsType(struct soap *soap, const char *URL, ns3__ExternalPartnerTrackingDetailsType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:ExternalPartnerTrackingDetailsType", p->soap_type() == SOAP_TYPE_ns3__ExternalPartnerTrackingDetailsType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__ExternalPartnerTrackingDetailsType * SOAP_FMAC4 soap_get_ns3__ExternalPartnerTrackingDetailsType(struct soap*, ns3__ExternalPartnerTrackingDetailsType *, const char*, const char*);

inline int soap_read_ns3__ExternalPartnerTrackingDetailsType(struct soap *soap, ns3__ExternalPartnerTrackingDetailsType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns3__ExternalPartnerTrackingDetailsType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__ExternalPartnerTrackingDetailsType(struct soap *soap, const char *URL, ns3__ExternalPartnerTrackingDetailsType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__ExternalPartnerTrackingDetailsType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__ExternalPartnerTrackingDetailsType(struct soap *soap, ns3__ExternalPartnerTrackingDetailsType *p)
{
	if (soap_read_ns3__ExternalPartnerTrackingDetailsType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__DisplayControlDetailsType_DEFINED
#define SOAP_TYPE_ns3__DisplayControlDetailsType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__DisplayControlDetailsType(struct soap*, const char*, int, const ns3__DisplayControlDetailsType *, const char*);
SOAP_FMAC3 ns3__DisplayControlDetailsType * SOAP_FMAC4 soap_in_ns3__DisplayControlDetailsType(struct soap*, const char*, ns3__DisplayControlDetailsType *, const char*);
SOAP_FMAC1 ns3__DisplayControlDetailsType * SOAP_FMAC2 soap_instantiate_ns3__DisplayControlDetailsType(struct soap*, int, const char*, const char*, size_t*);

inline ns3__DisplayControlDetailsType * soap_new_ns3__DisplayControlDetailsType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__DisplayControlDetailsType(soap, n, NULL, NULL, NULL);
}

inline ns3__DisplayControlDetailsType * soap_new_req_ns3__DisplayControlDetailsType(
	struct soap *soap)
{
	ns3__DisplayControlDetailsType *_p = soap_new_ns3__DisplayControlDetailsType(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns3__DisplayControlDetailsType * soap_new_set_ns3__DisplayControlDetailsType(
	struct soap *soap,
	std::string *InContextPaymentButtonImage)
{
	ns3__DisplayControlDetailsType *_p = soap_new_ns3__DisplayControlDetailsType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__DisplayControlDetailsType::InContextPaymentButtonImage = InContextPaymentButtonImage;
	}
	return _p;
}

inline int soap_write_ns3__DisplayControlDetailsType(struct soap *soap, ns3__DisplayControlDetailsType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:DisplayControlDetailsType", p->soap_type() == SOAP_TYPE_ns3__DisplayControlDetailsType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__DisplayControlDetailsType(struct soap *soap, const char *URL, ns3__DisplayControlDetailsType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:DisplayControlDetailsType", p->soap_type() == SOAP_TYPE_ns3__DisplayControlDetailsType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__DisplayControlDetailsType(struct soap *soap, const char *URL, ns3__DisplayControlDetailsType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:DisplayControlDetailsType", p->soap_type() == SOAP_TYPE_ns3__DisplayControlDetailsType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__DisplayControlDetailsType * SOAP_FMAC4 soap_get_ns3__DisplayControlDetailsType(struct soap*, ns3__DisplayControlDetailsType *, const char*, const char*);

inline int soap_read_ns3__DisplayControlDetailsType(struct soap *soap, ns3__DisplayControlDetailsType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns3__DisplayControlDetailsType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__DisplayControlDetailsType(struct soap *soap, const char *URL, ns3__DisplayControlDetailsType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__DisplayControlDetailsType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__DisplayControlDetailsType(struct soap *soap, ns3__DisplayControlDetailsType *p)
{
	if (soap_read_ns3__DisplayControlDetailsType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__RefreshTokenStatusDetailsType_DEFINED
#define SOAP_TYPE_ns3__RefreshTokenStatusDetailsType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__RefreshTokenStatusDetailsType(struct soap*, const char*, int, const ns3__RefreshTokenStatusDetailsType *, const char*);
SOAP_FMAC3 ns3__RefreshTokenStatusDetailsType * SOAP_FMAC4 soap_in_ns3__RefreshTokenStatusDetailsType(struct soap*, const char*, ns3__RefreshTokenStatusDetailsType *, const char*);
SOAP_FMAC1 ns3__RefreshTokenStatusDetailsType * SOAP_FMAC2 soap_instantiate_ns3__RefreshTokenStatusDetailsType(struct soap*, int, const char*, const char*, size_t*);

inline ns3__RefreshTokenStatusDetailsType * soap_new_ns3__RefreshTokenStatusDetailsType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__RefreshTokenStatusDetailsType(soap, n, NULL, NULL, NULL);
}

inline ns3__RefreshTokenStatusDetailsType * soap_new_req_ns3__RefreshTokenStatusDetailsType(
	struct soap *soap,
	const std::string& RefreshTokenStatus)
{
	ns3__RefreshTokenStatusDetailsType *_p = soap_new_ns3__RefreshTokenStatusDetailsType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__RefreshTokenStatusDetailsType::RefreshTokenStatus = RefreshTokenStatus;
	}
	return _p;
}

inline ns3__RefreshTokenStatusDetailsType * soap_new_set_ns3__RefreshTokenStatusDetailsType(
	struct soap *soap,
	const std::string& RefreshTokenStatus,
	std::string *RefreshToken,
	std::string *ImmutableID)
{
	ns3__RefreshTokenStatusDetailsType *_p = soap_new_ns3__RefreshTokenStatusDetailsType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__RefreshTokenStatusDetailsType::RefreshTokenStatus = RefreshTokenStatus;
		_p->ns3__RefreshTokenStatusDetailsType::RefreshToken = RefreshToken;
		_p->ns3__RefreshTokenStatusDetailsType::ImmutableID = ImmutableID;
	}
	return _p;
}

inline int soap_write_ns3__RefreshTokenStatusDetailsType(struct soap *soap, ns3__RefreshTokenStatusDetailsType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:RefreshTokenStatusDetailsType", p->soap_type() == SOAP_TYPE_ns3__RefreshTokenStatusDetailsType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__RefreshTokenStatusDetailsType(struct soap *soap, const char *URL, ns3__RefreshTokenStatusDetailsType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:RefreshTokenStatusDetailsType", p->soap_type() == SOAP_TYPE_ns3__RefreshTokenStatusDetailsType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__RefreshTokenStatusDetailsType(struct soap *soap, const char *URL, ns3__RefreshTokenStatusDetailsType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:RefreshTokenStatusDetailsType", p->soap_type() == SOAP_TYPE_ns3__RefreshTokenStatusDetailsType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__RefreshTokenStatusDetailsType * SOAP_FMAC4 soap_get_ns3__RefreshTokenStatusDetailsType(struct soap*, ns3__RefreshTokenStatusDetailsType *, const char*, const char*);

inline int soap_read_ns3__RefreshTokenStatusDetailsType(struct soap *soap, ns3__RefreshTokenStatusDetailsType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns3__RefreshTokenStatusDetailsType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__RefreshTokenStatusDetailsType(struct soap *soap, const char *URL, ns3__RefreshTokenStatusDetailsType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__RefreshTokenStatusDetailsType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__RefreshTokenStatusDetailsType(struct soap *soap, ns3__RefreshTokenStatusDetailsType *p)
{
	if (soap_read_ns3__RefreshTokenStatusDetailsType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__ExternalRememberMeStatusDetailsType_DEFINED
#define SOAP_TYPE_ns3__ExternalRememberMeStatusDetailsType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__ExternalRememberMeStatusDetailsType(struct soap*, const char*, int, const ns3__ExternalRememberMeStatusDetailsType *, const char*);
SOAP_FMAC3 ns3__ExternalRememberMeStatusDetailsType * SOAP_FMAC4 soap_in_ns3__ExternalRememberMeStatusDetailsType(struct soap*, const char*, ns3__ExternalRememberMeStatusDetailsType *, const char*);
SOAP_FMAC1 ns3__ExternalRememberMeStatusDetailsType * SOAP_FMAC2 soap_instantiate_ns3__ExternalRememberMeStatusDetailsType(struct soap*, int, const char*, const char*, size_t*);

inline ns3__ExternalRememberMeStatusDetailsType * soap_new_ns3__ExternalRememberMeStatusDetailsType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__ExternalRememberMeStatusDetailsType(soap, n, NULL, NULL, NULL);
}

inline ns3__ExternalRememberMeStatusDetailsType * soap_new_req_ns3__ExternalRememberMeStatusDetailsType(
	struct soap *soap,
	const std::string& ExternalRememberMeStatus)
{
	ns3__ExternalRememberMeStatusDetailsType *_p = soap_new_ns3__ExternalRememberMeStatusDetailsType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__ExternalRememberMeStatusDetailsType::ExternalRememberMeStatus = ExternalRememberMeStatus;
	}
	return _p;
}

inline ns3__ExternalRememberMeStatusDetailsType * soap_new_set_ns3__ExternalRememberMeStatusDetailsType(
	struct soap *soap,
	const std::string& ExternalRememberMeStatus,
	std::string *ExternalRememberMeID)
{
	ns3__ExternalRememberMeStatusDetailsType *_p = soap_new_ns3__ExternalRememberMeStatusDetailsType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__ExternalRememberMeStatusDetailsType::ExternalRememberMeStatus = ExternalRememberMeStatus;
		_p->ns3__ExternalRememberMeStatusDetailsType::ExternalRememberMeID = ExternalRememberMeID;
	}
	return _p;
}

inline int soap_write_ns3__ExternalRememberMeStatusDetailsType(struct soap *soap, ns3__ExternalRememberMeStatusDetailsType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:ExternalRememberMeStatusDetailsType", p->soap_type() == SOAP_TYPE_ns3__ExternalRememberMeStatusDetailsType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__ExternalRememberMeStatusDetailsType(struct soap *soap, const char *URL, ns3__ExternalRememberMeStatusDetailsType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:ExternalRememberMeStatusDetailsType", p->soap_type() == SOAP_TYPE_ns3__ExternalRememberMeStatusDetailsType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__ExternalRememberMeStatusDetailsType(struct soap *soap, const char *URL, ns3__ExternalRememberMeStatusDetailsType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:ExternalRememberMeStatusDetailsType", p->soap_type() == SOAP_TYPE_ns3__ExternalRememberMeStatusDetailsType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__ExternalRememberMeStatusDetailsType * SOAP_FMAC4 soap_get_ns3__ExternalRememberMeStatusDetailsType(struct soap*, ns3__ExternalRememberMeStatusDetailsType *, const char*, const char*);

inline int soap_read_ns3__ExternalRememberMeStatusDetailsType(struct soap *soap, ns3__ExternalRememberMeStatusDetailsType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns3__ExternalRememberMeStatusDetailsType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__ExternalRememberMeStatusDetailsType(struct soap *soap, const char *URL, ns3__ExternalRememberMeStatusDetailsType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__ExternalRememberMeStatusDetailsType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__ExternalRememberMeStatusDetailsType(struct soap *soap, ns3__ExternalRememberMeStatusDetailsType *p)
{
	if (soap_read_ns3__ExternalRememberMeStatusDetailsType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__FlowControlDetailsType_DEFINED
#define SOAP_TYPE_ns3__FlowControlDetailsType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__FlowControlDetailsType(struct soap*, const char*, int, const ns3__FlowControlDetailsType *, const char*);
SOAP_FMAC3 ns3__FlowControlDetailsType * SOAP_FMAC4 soap_in_ns3__FlowControlDetailsType(struct soap*, const char*, ns3__FlowControlDetailsType *, const char*);
SOAP_FMAC1 ns3__FlowControlDetailsType * SOAP_FMAC2 soap_instantiate_ns3__FlowControlDetailsType(struct soap*, int, const char*, const char*, size_t*);

inline ns3__FlowControlDetailsType * soap_new_ns3__FlowControlDetailsType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__FlowControlDetailsType(soap, n, NULL, NULL, NULL);
}

inline ns3__FlowControlDetailsType * soap_new_req_ns3__FlowControlDetailsType(
	struct soap *soap)
{
	ns3__FlowControlDetailsType *_p = soap_new_ns3__FlowControlDetailsType(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns3__FlowControlDetailsType * soap_new_set_ns3__FlowControlDetailsType(
	struct soap *soap,
	std::string *ErrorURL,
	std::string *InContextReturnURL)
{
	ns3__FlowControlDetailsType *_p = soap_new_ns3__FlowControlDetailsType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__FlowControlDetailsType::ErrorURL = ErrorURL;
		_p->ns3__FlowControlDetailsType::InContextReturnURL = InContextReturnURL;
	}
	return _p;
}

inline int soap_write_ns3__FlowControlDetailsType(struct soap *soap, ns3__FlowControlDetailsType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:FlowControlDetailsType", p->soap_type() == SOAP_TYPE_ns3__FlowControlDetailsType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__FlowControlDetailsType(struct soap *soap, const char *URL, ns3__FlowControlDetailsType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:FlowControlDetailsType", p->soap_type() == SOAP_TYPE_ns3__FlowControlDetailsType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__FlowControlDetailsType(struct soap *soap, const char *URL, ns3__FlowControlDetailsType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:FlowControlDetailsType", p->soap_type() == SOAP_TYPE_ns3__FlowControlDetailsType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__FlowControlDetailsType * SOAP_FMAC4 soap_get_ns3__FlowControlDetailsType(struct soap*, ns3__FlowControlDetailsType *, const char*, const char*);

inline int soap_read_ns3__FlowControlDetailsType(struct soap *soap, ns3__FlowControlDetailsType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns3__FlowControlDetailsType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__FlowControlDetailsType(struct soap *soap, const char *URL, ns3__FlowControlDetailsType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__FlowControlDetailsType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__FlowControlDetailsType(struct soap *soap, ns3__FlowControlDetailsType *p)
{
	if (soap_read_ns3__FlowControlDetailsType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__ExternalRememberMeOptInDetailsType_DEFINED
#define SOAP_TYPE_ns3__ExternalRememberMeOptInDetailsType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__ExternalRememberMeOptInDetailsType(struct soap*, const char*, int, const ns3__ExternalRememberMeOptInDetailsType *, const char*);
SOAP_FMAC3 ns3__ExternalRememberMeOptInDetailsType * SOAP_FMAC4 soap_in_ns3__ExternalRememberMeOptInDetailsType(struct soap*, const char*, ns3__ExternalRememberMeOptInDetailsType *, const char*);
SOAP_FMAC1 ns3__ExternalRememberMeOptInDetailsType * SOAP_FMAC2 soap_instantiate_ns3__ExternalRememberMeOptInDetailsType(struct soap*, int, const char*, const char*, size_t*);

inline ns3__ExternalRememberMeOptInDetailsType * soap_new_ns3__ExternalRememberMeOptInDetailsType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__ExternalRememberMeOptInDetailsType(soap, n, NULL, NULL, NULL);
}

inline ns3__ExternalRememberMeOptInDetailsType * soap_new_req_ns3__ExternalRememberMeOptInDetailsType(
	struct soap *soap)
{
	ns3__ExternalRememberMeOptInDetailsType *_p = soap_new_ns3__ExternalRememberMeOptInDetailsType(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns3__ExternalRememberMeOptInDetailsType * soap_new_set_ns3__ExternalRememberMeOptInDetailsType(
	struct soap *soap,
	std::string *ExternalRememberMeOptIn,
	ns3__ExternalRememberMeOwnerDetailsType *ExternalRememberMeOwnerDetails)
{
	ns3__ExternalRememberMeOptInDetailsType *_p = soap_new_ns3__ExternalRememberMeOptInDetailsType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__ExternalRememberMeOptInDetailsType::ExternalRememberMeOptIn = ExternalRememberMeOptIn;
		_p->ns3__ExternalRememberMeOptInDetailsType::ExternalRememberMeOwnerDetails = ExternalRememberMeOwnerDetails;
	}
	return _p;
}

inline int soap_write_ns3__ExternalRememberMeOptInDetailsType(struct soap *soap, ns3__ExternalRememberMeOptInDetailsType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:ExternalRememberMeOptInDetailsType", p->soap_type() == SOAP_TYPE_ns3__ExternalRememberMeOptInDetailsType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__ExternalRememberMeOptInDetailsType(struct soap *soap, const char *URL, ns3__ExternalRememberMeOptInDetailsType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:ExternalRememberMeOptInDetailsType", p->soap_type() == SOAP_TYPE_ns3__ExternalRememberMeOptInDetailsType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__ExternalRememberMeOptInDetailsType(struct soap *soap, const char *URL, ns3__ExternalRememberMeOptInDetailsType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:ExternalRememberMeOptInDetailsType", p->soap_type() == SOAP_TYPE_ns3__ExternalRememberMeOptInDetailsType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__ExternalRememberMeOptInDetailsType * SOAP_FMAC4 soap_get_ns3__ExternalRememberMeOptInDetailsType(struct soap*, ns3__ExternalRememberMeOptInDetailsType *, const char*, const char*);

inline int soap_read_ns3__ExternalRememberMeOptInDetailsType(struct soap *soap, ns3__ExternalRememberMeOptInDetailsType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns3__ExternalRememberMeOptInDetailsType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__ExternalRememberMeOptInDetailsType(struct soap *soap, const char *URL, ns3__ExternalRememberMeOptInDetailsType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__ExternalRememberMeOptInDetailsType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__ExternalRememberMeOptInDetailsType(struct soap *soap, ns3__ExternalRememberMeOptInDetailsType *p)
{
	if (soap_read_ns3__ExternalRememberMeOptInDetailsType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__ExternalRememberMeOwnerDetailsType_DEFINED
#define SOAP_TYPE_ns3__ExternalRememberMeOwnerDetailsType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__ExternalRememberMeOwnerDetailsType(struct soap*, const char*, int, const ns3__ExternalRememberMeOwnerDetailsType *, const char*);
SOAP_FMAC3 ns3__ExternalRememberMeOwnerDetailsType * SOAP_FMAC4 soap_in_ns3__ExternalRememberMeOwnerDetailsType(struct soap*, const char*, ns3__ExternalRememberMeOwnerDetailsType *, const char*);
SOAP_FMAC1 ns3__ExternalRememberMeOwnerDetailsType * SOAP_FMAC2 soap_instantiate_ns3__ExternalRememberMeOwnerDetailsType(struct soap*, int, const char*, const char*, size_t*);

inline ns3__ExternalRememberMeOwnerDetailsType * soap_new_ns3__ExternalRememberMeOwnerDetailsType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__ExternalRememberMeOwnerDetailsType(soap, n, NULL, NULL, NULL);
}

inline ns3__ExternalRememberMeOwnerDetailsType * soap_new_req_ns3__ExternalRememberMeOwnerDetailsType(
	struct soap *soap)
{
	ns3__ExternalRememberMeOwnerDetailsType *_p = soap_new_ns3__ExternalRememberMeOwnerDetailsType(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns3__ExternalRememberMeOwnerDetailsType * soap_new_set_ns3__ExternalRememberMeOwnerDetailsType(
	struct soap *soap,
	std::string *ExternalRememberMeOwnerIDType,
	std::string *ExternalRememberMeOwnerID)
{
	ns3__ExternalRememberMeOwnerDetailsType *_p = soap_new_ns3__ExternalRememberMeOwnerDetailsType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__ExternalRememberMeOwnerDetailsType::ExternalRememberMeOwnerIDType = ExternalRememberMeOwnerIDType;
		_p->ns3__ExternalRememberMeOwnerDetailsType::ExternalRememberMeOwnerID = ExternalRememberMeOwnerID;
	}
	return _p;
}

inline int soap_write_ns3__ExternalRememberMeOwnerDetailsType(struct soap *soap, ns3__ExternalRememberMeOwnerDetailsType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:ExternalRememberMeOwnerDetailsType", p->soap_type() == SOAP_TYPE_ns3__ExternalRememberMeOwnerDetailsType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__ExternalRememberMeOwnerDetailsType(struct soap *soap, const char *URL, ns3__ExternalRememberMeOwnerDetailsType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:ExternalRememberMeOwnerDetailsType", p->soap_type() == SOAP_TYPE_ns3__ExternalRememberMeOwnerDetailsType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__ExternalRememberMeOwnerDetailsType(struct soap *soap, const char *URL, ns3__ExternalRememberMeOwnerDetailsType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:ExternalRememberMeOwnerDetailsType", p->soap_type() == SOAP_TYPE_ns3__ExternalRememberMeOwnerDetailsType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__ExternalRememberMeOwnerDetailsType * SOAP_FMAC4 soap_get_ns3__ExternalRememberMeOwnerDetailsType(struct soap*, ns3__ExternalRememberMeOwnerDetailsType *, const char*, const char*);

inline int soap_read_ns3__ExternalRememberMeOwnerDetailsType(struct soap *soap, ns3__ExternalRememberMeOwnerDetailsType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns3__ExternalRememberMeOwnerDetailsType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__ExternalRememberMeOwnerDetailsType(struct soap *soap, const char *URL, ns3__ExternalRememberMeOwnerDetailsType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__ExternalRememberMeOwnerDetailsType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__ExternalRememberMeOwnerDetailsType(struct soap *soap, ns3__ExternalRememberMeOwnerDetailsType *p)
{
	if (soap_read_ns3__ExternalRememberMeOwnerDetailsType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__PaymentRequestInfoType_DEFINED
#define SOAP_TYPE_ns3__PaymentRequestInfoType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__PaymentRequestInfoType(struct soap*, const char*, int, const ns3__PaymentRequestInfoType *, const char*);
SOAP_FMAC3 ns3__PaymentRequestInfoType * SOAP_FMAC4 soap_in_ns3__PaymentRequestInfoType(struct soap*, const char*, ns3__PaymentRequestInfoType *, const char*);
SOAP_FMAC1 ns3__PaymentRequestInfoType * SOAP_FMAC2 soap_instantiate_ns3__PaymentRequestInfoType(struct soap*, int, const char*, const char*, size_t*);

inline ns3__PaymentRequestInfoType * soap_new_ns3__PaymentRequestInfoType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__PaymentRequestInfoType(soap, n, NULL, NULL, NULL);
}

inline ns3__PaymentRequestInfoType * soap_new_req_ns3__PaymentRequestInfoType(
	struct soap *soap)
{
	ns3__PaymentRequestInfoType *_p = soap_new_ns3__PaymentRequestInfoType(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns3__PaymentRequestInfoType * soap_new_set_ns3__PaymentRequestInfoType(
	struct soap *soap,
	std::string *TransactionId,
	std::string *PaymentRequestID,
	ns3__ErrorType *PaymentError)
{
	ns3__PaymentRequestInfoType *_p = soap_new_ns3__PaymentRequestInfoType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__PaymentRequestInfoType::TransactionId = TransactionId;
		_p->ns3__PaymentRequestInfoType::PaymentRequestID = PaymentRequestID;
		_p->ns3__PaymentRequestInfoType::PaymentError = PaymentError;
	}
	return _p;
}

inline int soap_write_ns3__PaymentRequestInfoType(struct soap *soap, ns3__PaymentRequestInfoType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:PaymentRequestInfoType", p->soap_type() == SOAP_TYPE_ns3__PaymentRequestInfoType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__PaymentRequestInfoType(struct soap *soap, const char *URL, ns3__PaymentRequestInfoType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:PaymentRequestInfoType", p->soap_type() == SOAP_TYPE_ns3__PaymentRequestInfoType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__PaymentRequestInfoType(struct soap *soap, const char *URL, ns3__PaymentRequestInfoType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:PaymentRequestInfoType", p->soap_type() == SOAP_TYPE_ns3__PaymentRequestInfoType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__PaymentRequestInfoType * SOAP_FMAC4 soap_get_ns3__PaymentRequestInfoType(struct soap*, ns3__PaymentRequestInfoType *, const char*, const char*);

inline int soap_read_ns3__PaymentRequestInfoType(struct soap *soap, ns3__PaymentRequestInfoType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns3__PaymentRequestInfoType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__PaymentRequestInfoType(struct soap *soap, const char *URL, ns3__PaymentRequestInfoType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__PaymentRequestInfoType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__PaymentRequestInfoType(struct soap *soap, ns3__PaymentRequestInfoType *p)
{
	if (soap_read_ns3__PaymentRequestInfoType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__IncentiveApplyIndicationType_DEFINED
#define SOAP_TYPE_ns3__IncentiveApplyIndicationType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__IncentiveApplyIndicationType(struct soap*, const char*, int, const ns3__IncentiveApplyIndicationType *, const char*);
SOAP_FMAC3 ns3__IncentiveApplyIndicationType * SOAP_FMAC4 soap_in_ns3__IncentiveApplyIndicationType(struct soap*, const char*, ns3__IncentiveApplyIndicationType *, const char*);
SOAP_FMAC1 ns3__IncentiveApplyIndicationType * SOAP_FMAC2 soap_instantiate_ns3__IncentiveApplyIndicationType(struct soap*, int, const char*, const char*, size_t*);

inline ns3__IncentiveApplyIndicationType * soap_new_ns3__IncentiveApplyIndicationType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__IncentiveApplyIndicationType(soap, n, NULL, NULL, NULL);
}

inline ns3__IncentiveApplyIndicationType * soap_new_req_ns3__IncentiveApplyIndicationType(
	struct soap *soap)
{
	ns3__IncentiveApplyIndicationType *_p = soap_new_ns3__IncentiveApplyIndicationType(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns3__IncentiveApplyIndicationType * soap_new_set_ns3__IncentiveApplyIndicationType(
	struct soap *soap,
	std::string *PaymentRequestID,
	std::string *ItemId)
{
	ns3__IncentiveApplyIndicationType *_p = soap_new_ns3__IncentiveApplyIndicationType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__IncentiveApplyIndicationType::PaymentRequestID = PaymentRequestID;
		_p->ns3__IncentiveApplyIndicationType::ItemId = ItemId;
	}
	return _p;
}

inline int soap_write_ns3__IncentiveApplyIndicationType(struct soap *soap, ns3__IncentiveApplyIndicationType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:IncentiveApplyIndicationType", p->soap_type() == SOAP_TYPE_ns3__IncentiveApplyIndicationType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__IncentiveApplyIndicationType(struct soap *soap, const char *URL, ns3__IncentiveApplyIndicationType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:IncentiveApplyIndicationType", p->soap_type() == SOAP_TYPE_ns3__IncentiveApplyIndicationType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__IncentiveApplyIndicationType(struct soap *soap, const char *URL, ns3__IncentiveApplyIndicationType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:IncentiveApplyIndicationType", p->soap_type() == SOAP_TYPE_ns3__IncentiveApplyIndicationType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__IncentiveApplyIndicationType * SOAP_FMAC4 soap_get_ns3__IncentiveApplyIndicationType(struct soap*, ns3__IncentiveApplyIndicationType *, const char*, const char*);

inline int soap_read_ns3__IncentiveApplyIndicationType(struct soap *soap, ns3__IncentiveApplyIndicationType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns3__IncentiveApplyIndicationType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__IncentiveApplyIndicationType(struct soap *soap, const char *URL, ns3__IncentiveApplyIndicationType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__IncentiveApplyIndicationType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__IncentiveApplyIndicationType(struct soap *soap, ns3__IncentiveApplyIndicationType *p)
{
	if (soap_read_ns3__IncentiveApplyIndicationType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__IncentiveInfoType_DEFINED
#define SOAP_TYPE_ns3__IncentiveInfoType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__IncentiveInfoType(struct soap*, const char*, int, const ns3__IncentiveInfoType *, const char*);
SOAP_FMAC3 ns3__IncentiveInfoType * SOAP_FMAC4 soap_in_ns3__IncentiveInfoType(struct soap*, const char*, ns3__IncentiveInfoType *, const char*);
SOAP_FMAC1 ns3__IncentiveInfoType * SOAP_FMAC2 soap_instantiate_ns3__IncentiveInfoType(struct soap*, int, const char*, const char*, size_t*);

inline ns3__IncentiveInfoType * soap_new_ns3__IncentiveInfoType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__IncentiveInfoType(soap, n, NULL, NULL, NULL);
}

inline ns3__IncentiveInfoType * soap_new_req_ns3__IncentiveInfoType(
	struct soap *soap)
{
	ns3__IncentiveInfoType *_p = soap_new_ns3__IncentiveInfoType(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns3__IncentiveInfoType * soap_new_set_ns3__IncentiveInfoType(
	struct soap *soap,
	std::string *IncentiveCode,
	const std::vector<ns3__IncentiveApplyIndicationType *> & ApplyIndication)
{
	ns3__IncentiveInfoType *_p = soap_new_ns3__IncentiveInfoType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__IncentiveInfoType::IncentiveCode = IncentiveCode;
		_p->ns3__IncentiveInfoType::ApplyIndication = ApplyIndication;
	}
	return _p;
}

inline int soap_write_ns3__IncentiveInfoType(struct soap *soap, ns3__IncentiveInfoType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:IncentiveInfoType", p->soap_type() == SOAP_TYPE_ns3__IncentiveInfoType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__IncentiveInfoType(struct soap *soap, const char *URL, ns3__IncentiveInfoType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:IncentiveInfoType", p->soap_type() == SOAP_TYPE_ns3__IncentiveInfoType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__IncentiveInfoType(struct soap *soap, const char *URL, ns3__IncentiveInfoType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:IncentiveInfoType", p->soap_type() == SOAP_TYPE_ns3__IncentiveInfoType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__IncentiveInfoType * SOAP_FMAC4 soap_get_ns3__IncentiveInfoType(struct soap*, ns3__IncentiveInfoType *, const char*, const char*);

inline int soap_read_ns3__IncentiveInfoType(struct soap *soap, ns3__IncentiveInfoType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns3__IncentiveInfoType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__IncentiveInfoType(struct soap *soap, const char *URL, ns3__IncentiveInfoType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__IncentiveInfoType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__IncentiveInfoType(struct soap *soap, ns3__IncentiveInfoType *p)
{
	if (soap_read_ns3__IncentiveInfoType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__ReverseTransactionResponseDetailsType_DEFINED
#define SOAP_TYPE_ns3__ReverseTransactionResponseDetailsType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__ReverseTransactionResponseDetailsType(struct soap*, const char*, int, const ns3__ReverseTransactionResponseDetailsType *, const char*);
SOAP_FMAC3 ns3__ReverseTransactionResponseDetailsType * SOAP_FMAC4 soap_in_ns3__ReverseTransactionResponseDetailsType(struct soap*, const char*, ns3__ReverseTransactionResponseDetailsType *, const char*);
SOAP_FMAC1 ns3__ReverseTransactionResponseDetailsType * SOAP_FMAC2 soap_instantiate_ns3__ReverseTransactionResponseDetailsType(struct soap*, int, const char*, const char*, size_t*);

inline ns3__ReverseTransactionResponseDetailsType * soap_new_ns3__ReverseTransactionResponseDetailsType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__ReverseTransactionResponseDetailsType(soap, n, NULL, NULL, NULL);
}

inline ns3__ReverseTransactionResponseDetailsType * soap_new_req_ns3__ReverseTransactionResponseDetailsType(
	struct soap *soap,
	const std::string& Status)
{
	ns3__ReverseTransactionResponseDetailsType *_p = soap_new_ns3__ReverseTransactionResponseDetailsType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__ReverseTransactionResponseDetailsType::Status = Status;
	}
	return _p;
}

inline ns3__ReverseTransactionResponseDetailsType * soap_new_set_ns3__ReverseTransactionResponseDetailsType(
	struct soap *soap,
	std::string *ReverseTransactionID,
	const std::string& Status)
{
	ns3__ReverseTransactionResponseDetailsType *_p = soap_new_ns3__ReverseTransactionResponseDetailsType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__ReverseTransactionResponseDetailsType::ReverseTransactionID = ReverseTransactionID;
		_p->ns3__ReverseTransactionResponseDetailsType::Status = Status;
	}
	return _p;
}

inline int soap_write_ns3__ReverseTransactionResponseDetailsType(struct soap *soap, ns3__ReverseTransactionResponseDetailsType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:ReverseTransactionResponseDetailsType", p->soap_type() == SOAP_TYPE_ns3__ReverseTransactionResponseDetailsType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__ReverseTransactionResponseDetailsType(struct soap *soap, const char *URL, ns3__ReverseTransactionResponseDetailsType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:ReverseTransactionResponseDetailsType", p->soap_type() == SOAP_TYPE_ns3__ReverseTransactionResponseDetailsType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__ReverseTransactionResponseDetailsType(struct soap *soap, const char *URL, ns3__ReverseTransactionResponseDetailsType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:ReverseTransactionResponseDetailsType", p->soap_type() == SOAP_TYPE_ns3__ReverseTransactionResponseDetailsType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__ReverseTransactionResponseDetailsType * SOAP_FMAC4 soap_get_ns3__ReverseTransactionResponseDetailsType(struct soap*, ns3__ReverseTransactionResponseDetailsType *, const char*, const char*);

inline int soap_read_ns3__ReverseTransactionResponseDetailsType(struct soap *soap, ns3__ReverseTransactionResponseDetailsType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns3__ReverseTransactionResponseDetailsType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__ReverseTransactionResponseDetailsType(struct soap *soap, const char *URL, ns3__ReverseTransactionResponseDetailsType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__ReverseTransactionResponseDetailsType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__ReverseTransactionResponseDetailsType(struct soap *soap, ns3__ReverseTransactionResponseDetailsType *p)
{
	if (soap_read_ns3__ReverseTransactionResponseDetailsType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__ReverseTransactionRequestDetailsType_DEFINED
#define SOAP_TYPE_ns3__ReverseTransactionRequestDetailsType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__ReverseTransactionRequestDetailsType(struct soap*, const char*, int, const ns3__ReverseTransactionRequestDetailsType *, const char*);
SOAP_FMAC3 ns3__ReverseTransactionRequestDetailsType * SOAP_FMAC4 soap_in_ns3__ReverseTransactionRequestDetailsType(struct soap*, const char*, ns3__ReverseTransactionRequestDetailsType *, const char*);
SOAP_FMAC1 ns3__ReverseTransactionRequestDetailsType * SOAP_FMAC2 soap_instantiate_ns3__ReverseTransactionRequestDetailsType(struct soap*, int, const char*, const char*, size_t*);

inline ns3__ReverseTransactionRequestDetailsType * soap_new_ns3__ReverseTransactionRequestDetailsType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__ReverseTransactionRequestDetailsType(soap, n, NULL, NULL, NULL);
}

inline ns3__ReverseTransactionRequestDetailsType * soap_new_req_ns3__ReverseTransactionRequestDetailsType(
	struct soap *soap)
{
	ns3__ReverseTransactionRequestDetailsType *_p = soap_new_ns3__ReverseTransactionRequestDetailsType(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns3__ReverseTransactionRequestDetailsType * soap_new_set_ns3__ReverseTransactionRequestDetailsType(
	struct soap *soap,
	std::string *TransactionID)
{
	ns3__ReverseTransactionRequestDetailsType *_p = soap_new_ns3__ReverseTransactionRequestDetailsType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__ReverseTransactionRequestDetailsType::TransactionID = TransactionID;
	}
	return _p;
}

inline int soap_write_ns3__ReverseTransactionRequestDetailsType(struct soap *soap, ns3__ReverseTransactionRequestDetailsType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:ReverseTransactionRequestDetailsType", p->soap_type() == SOAP_TYPE_ns3__ReverseTransactionRequestDetailsType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__ReverseTransactionRequestDetailsType(struct soap *soap, const char *URL, ns3__ReverseTransactionRequestDetailsType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:ReverseTransactionRequestDetailsType", p->soap_type() == SOAP_TYPE_ns3__ReverseTransactionRequestDetailsType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__ReverseTransactionRequestDetailsType(struct soap *soap, const char *URL, ns3__ReverseTransactionRequestDetailsType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:ReverseTransactionRequestDetailsType", p->soap_type() == SOAP_TYPE_ns3__ReverseTransactionRequestDetailsType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__ReverseTransactionRequestDetailsType * SOAP_FMAC4 soap_get_ns3__ReverseTransactionRequestDetailsType(struct soap*, ns3__ReverseTransactionRequestDetailsType *, const char*, const char*);

inline int soap_read_ns3__ReverseTransactionRequestDetailsType(struct soap *soap, ns3__ReverseTransactionRequestDetailsType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns3__ReverseTransactionRequestDetailsType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__ReverseTransactionRequestDetailsType(struct soap *soap, const char *URL, ns3__ReverseTransactionRequestDetailsType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__ReverseTransactionRequestDetailsType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__ReverseTransactionRequestDetailsType(struct soap *soap, ns3__ReverseTransactionRequestDetailsType *p)
{
	if (soap_read_ns3__ReverseTransactionRequestDetailsType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__ButtonSearchResultType_DEFINED
#define SOAP_TYPE_ns3__ButtonSearchResultType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__ButtonSearchResultType(struct soap*, const char*, int, const ns3__ButtonSearchResultType *, const char*);
SOAP_FMAC3 ns3__ButtonSearchResultType * SOAP_FMAC4 soap_in_ns3__ButtonSearchResultType(struct soap*, const char*, ns3__ButtonSearchResultType *, const char*);
SOAP_FMAC1 ns3__ButtonSearchResultType * SOAP_FMAC2 soap_instantiate_ns3__ButtonSearchResultType(struct soap*, int, const char*, const char*, size_t*);

inline ns3__ButtonSearchResultType * soap_new_ns3__ButtonSearchResultType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__ButtonSearchResultType(soap, n, NULL, NULL, NULL);
}

inline ns3__ButtonSearchResultType * soap_new_req_ns3__ButtonSearchResultType(
	struct soap *soap)
{
	ns3__ButtonSearchResultType *_p = soap_new_ns3__ButtonSearchResultType(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns3__ButtonSearchResultType * soap_new_set_ns3__ButtonSearchResultType(
	struct soap *soap,
	std::string *HostedButtonID,
	std::string *ButtonType,
	std::string *ItemName,
	time_t *ModifyDate)
{
	ns3__ButtonSearchResultType *_p = soap_new_ns3__ButtonSearchResultType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__ButtonSearchResultType::HostedButtonID = HostedButtonID;
		_p->ns3__ButtonSearchResultType::ButtonType = ButtonType;
		_p->ns3__ButtonSearchResultType::ItemName = ItemName;
		_p->ns3__ButtonSearchResultType::ModifyDate = ModifyDate;
	}
	return _p;
}

inline int soap_write_ns3__ButtonSearchResultType(struct soap *soap, ns3__ButtonSearchResultType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:ButtonSearchResultType", p->soap_type() == SOAP_TYPE_ns3__ButtonSearchResultType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__ButtonSearchResultType(struct soap *soap, const char *URL, ns3__ButtonSearchResultType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:ButtonSearchResultType", p->soap_type() == SOAP_TYPE_ns3__ButtonSearchResultType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__ButtonSearchResultType(struct soap *soap, const char *URL, ns3__ButtonSearchResultType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:ButtonSearchResultType", p->soap_type() == SOAP_TYPE_ns3__ButtonSearchResultType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__ButtonSearchResultType * SOAP_FMAC4 soap_get_ns3__ButtonSearchResultType(struct soap*, ns3__ButtonSearchResultType *, const char*, const char*);

inline int soap_read_ns3__ButtonSearchResultType(struct soap *soap, ns3__ButtonSearchResultType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns3__ButtonSearchResultType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__ButtonSearchResultType(struct soap *soap, const char *URL, ns3__ButtonSearchResultType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__ButtonSearchResultType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__ButtonSearchResultType(struct soap *soap, ns3__ButtonSearchResultType *p)
{
	if (soap_read_ns3__ButtonSearchResultType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__ItemTrackingDetailsType_DEFINED
#define SOAP_TYPE_ns3__ItemTrackingDetailsType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__ItemTrackingDetailsType(struct soap*, const char*, int, const ns3__ItemTrackingDetailsType *, const char*);
SOAP_FMAC3 ns3__ItemTrackingDetailsType * SOAP_FMAC4 soap_in_ns3__ItemTrackingDetailsType(struct soap*, const char*, ns3__ItemTrackingDetailsType *, const char*);
SOAP_FMAC1 ns3__ItemTrackingDetailsType * SOAP_FMAC2 soap_instantiate_ns3__ItemTrackingDetailsType(struct soap*, int, const char*, const char*, size_t*);

inline ns3__ItemTrackingDetailsType * soap_new_ns3__ItemTrackingDetailsType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__ItemTrackingDetailsType(soap, n, NULL, NULL, NULL);
}

inline ns3__ItemTrackingDetailsType * soap_new_req_ns3__ItemTrackingDetailsType(
	struct soap *soap)
{
	ns3__ItemTrackingDetailsType *_p = soap_new_ns3__ItemTrackingDetailsType(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns3__ItemTrackingDetailsType * soap_new_set_ns3__ItemTrackingDetailsType(
	struct soap *soap,
	std::string *ItemNumber,
	std::string *ItemQty,
	std::string *ItemQtyDelta,
	std::string *ItemAlert,
	std::string *ItemCost)
{
	ns3__ItemTrackingDetailsType *_p = soap_new_ns3__ItemTrackingDetailsType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__ItemTrackingDetailsType::ItemNumber = ItemNumber;
		_p->ns3__ItemTrackingDetailsType::ItemQty = ItemQty;
		_p->ns3__ItemTrackingDetailsType::ItemQtyDelta = ItemQtyDelta;
		_p->ns3__ItemTrackingDetailsType::ItemAlert = ItemAlert;
		_p->ns3__ItemTrackingDetailsType::ItemCost = ItemCost;
	}
	return _p;
}

inline int soap_write_ns3__ItemTrackingDetailsType(struct soap *soap, ns3__ItemTrackingDetailsType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:ItemTrackingDetailsType", p->soap_type() == SOAP_TYPE_ns3__ItemTrackingDetailsType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__ItemTrackingDetailsType(struct soap *soap, const char *URL, ns3__ItemTrackingDetailsType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:ItemTrackingDetailsType", p->soap_type() == SOAP_TYPE_ns3__ItemTrackingDetailsType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__ItemTrackingDetailsType(struct soap *soap, const char *URL, ns3__ItemTrackingDetailsType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:ItemTrackingDetailsType", p->soap_type() == SOAP_TYPE_ns3__ItemTrackingDetailsType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__ItemTrackingDetailsType * SOAP_FMAC4 soap_get_ns3__ItemTrackingDetailsType(struct soap*, ns3__ItemTrackingDetailsType *, const char*, const char*);

inline int soap_read_ns3__ItemTrackingDetailsType(struct soap *soap, ns3__ItemTrackingDetailsType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns3__ItemTrackingDetailsType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__ItemTrackingDetailsType(struct soap *soap, const char *URL, ns3__ItemTrackingDetailsType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__ItemTrackingDetailsType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__ItemTrackingDetailsType(struct soap *soap, ns3__ItemTrackingDetailsType *p)
{
	if (soap_read_ns3__ItemTrackingDetailsType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__OptionTrackingDetailsType_DEFINED
#define SOAP_TYPE_ns3__OptionTrackingDetailsType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__OptionTrackingDetailsType(struct soap*, const char*, int, const ns3__OptionTrackingDetailsType *, const char*);
SOAP_FMAC3 ns3__OptionTrackingDetailsType * SOAP_FMAC4 soap_in_ns3__OptionTrackingDetailsType(struct soap*, const char*, ns3__OptionTrackingDetailsType *, const char*);
SOAP_FMAC1 ns3__OptionTrackingDetailsType * SOAP_FMAC2 soap_instantiate_ns3__OptionTrackingDetailsType(struct soap*, int, const char*, const char*, size_t*);

inline ns3__OptionTrackingDetailsType * soap_new_ns3__OptionTrackingDetailsType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__OptionTrackingDetailsType(soap, n, NULL, NULL, NULL);
}

inline ns3__OptionTrackingDetailsType * soap_new_req_ns3__OptionTrackingDetailsType(
	struct soap *soap)
{
	ns3__OptionTrackingDetailsType *_p = soap_new_ns3__OptionTrackingDetailsType(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns3__OptionTrackingDetailsType * soap_new_set_ns3__OptionTrackingDetailsType(
	struct soap *soap,
	std::string *OptionNumber,
	std::string *OptionQty,
	std::string *OptionSelect,
	std::string *OptionQtyDelta,
	std::string *OptionAlert,
	std::string *OptionCost)
{
	ns3__OptionTrackingDetailsType *_p = soap_new_ns3__OptionTrackingDetailsType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__OptionTrackingDetailsType::OptionNumber = OptionNumber;
		_p->ns3__OptionTrackingDetailsType::OptionQty = OptionQty;
		_p->ns3__OptionTrackingDetailsType::OptionSelect = OptionSelect;
		_p->ns3__OptionTrackingDetailsType::OptionQtyDelta = OptionQtyDelta;
		_p->ns3__OptionTrackingDetailsType::OptionAlert = OptionAlert;
		_p->ns3__OptionTrackingDetailsType::OptionCost = OptionCost;
	}
	return _p;
}

inline int soap_write_ns3__OptionTrackingDetailsType(struct soap *soap, ns3__OptionTrackingDetailsType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:OptionTrackingDetailsType", p->soap_type() == SOAP_TYPE_ns3__OptionTrackingDetailsType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__OptionTrackingDetailsType(struct soap *soap, const char *URL, ns3__OptionTrackingDetailsType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:OptionTrackingDetailsType", p->soap_type() == SOAP_TYPE_ns3__OptionTrackingDetailsType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__OptionTrackingDetailsType(struct soap *soap, const char *URL, ns3__OptionTrackingDetailsType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:OptionTrackingDetailsType", p->soap_type() == SOAP_TYPE_ns3__OptionTrackingDetailsType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__OptionTrackingDetailsType * SOAP_FMAC4 soap_get_ns3__OptionTrackingDetailsType(struct soap*, ns3__OptionTrackingDetailsType *, const char*, const char*);

inline int soap_read_ns3__OptionTrackingDetailsType(struct soap *soap, ns3__OptionTrackingDetailsType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns3__OptionTrackingDetailsType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__OptionTrackingDetailsType(struct soap *soap, const char *URL, ns3__OptionTrackingDetailsType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__OptionTrackingDetailsType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__OptionTrackingDetailsType(struct soap *soap, ns3__OptionTrackingDetailsType *p)
{
	if (soap_read_ns3__OptionTrackingDetailsType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__AuthorizationInfoType_DEFINED
#define SOAP_TYPE_ns3__AuthorizationInfoType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__AuthorizationInfoType(struct soap*, const char*, int, const ns3__AuthorizationInfoType *, const char*);
SOAP_FMAC3 ns3__AuthorizationInfoType * SOAP_FMAC4 soap_in_ns3__AuthorizationInfoType(struct soap*, const char*, ns3__AuthorizationInfoType *, const char*);
SOAP_FMAC1 ns3__AuthorizationInfoType * SOAP_FMAC2 soap_instantiate_ns3__AuthorizationInfoType(struct soap*, int, const char*, const char*, size_t*);

inline ns3__AuthorizationInfoType * soap_new_ns3__AuthorizationInfoType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__AuthorizationInfoType(soap, n, NULL, NULL, NULL);
}

inline ns3__AuthorizationInfoType * soap_new_req_ns3__AuthorizationInfoType(
	struct soap *soap,
	enum ns3__PaymentStatusCodeType PaymentStatus)
{
	ns3__AuthorizationInfoType *_p = soap_new_ns3__AuthorizationInfoType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__AuthorizationInfoType::PaymentStatus = PaymentStatus;
	}
	return _p;
}

inline ns3__AuthorizationInfoType * soap_new_set_ns3__AuthorizationInfoType(
	struct soap *soap,
	enum ns3__PaymentStatusCodeType PaymentStatus,
	enum ns3__PendingStatusCodeType *PendingReason,
	std::string *ProtectionEligibility,
	std::string *ProtectionEligibilityType)
{
	ns3__AuthorizationInfoType *_p = soap_new_ns3__AuthorizationInfoType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__AuthorizationInfoType::PaymentStatus = PaymentStatus;
		_p->ns3__AuthorizationInfoType::PendingReason = PendingReason;
		_p->ns3__AuthorizationInfoType::ProtectionEligibility = ProtectionEligibility;
		_p->ns3__AuthorizationInfoType::ProtectionEligibilityType = ProtectionEligibilityType;
	}
	return _p;
}

inline int soap_write_ns3__AuthorizationInfoType(struct soap *soap, ns3__AuthorizationInfoType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:AuthorizationInfoType", p->soap_type() == SOAP_TYPE_ns3__AuthorizationInfoType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__AuthorizationInfoType(struct soap *soap, const char *URL, ns3__AuthorizationInfoType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:AuthorizationInfoType", p->soap_type() == SOAP_TYPE_ns3__AuthorizationInfoType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__AuthorizationInfoType(struct soap *soap, const char *URL, ns3__AuthorizationInfoType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:AuthorizationInfoType", p->soap_type() == SOAP_TYPE_ns3__AuthorizationInfoType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__AuthorizationInfoType * SOAP_FMAC4 soap_get_ns3__AuthorizationInfoType(struct soap*, ns3__AuthorizationInfoType *, const char*, const char*);

inline int soap_read_ns3__AuthorizationInfoType(struct soap *soap, ns3__AuthorizationInfoType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns3__AuthorizationInfoType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__AuthorizationInfoType(struct soap *soap, const char *URL, ns3__AuthorizationInfoType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__AuthorizationInfoType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__AuthorizationInfoType(struct soap *soap, ns3__AuthorizationInfoType *p)
{
	if (soap_read_ns3__AuthorizationInfoType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__FlightDetailsType_DEFINED
#define SOAP_TYPE_ns3__FlightDetailsType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__FlightDetailsType(struct soap*, const char*, int, const ns3__FlightDetailsType *, const char*);
SOAP_FMAC3 ns3__FlightDetailsType * SOAP_FMAC4 soap_in_ns3__FlightDetailsType(struct soap*, const char*, ns3__FlightDetailsType *, const char*);
SOAP_FMAC1 ns3__FlightDetailsType * SOAP_FMAC2 soap_instantiate_ns3__FlightDetailsType(struct soap*, int, const char*, const char*, size_t*);

inline ns3__FlightDetailsType * soap_new_ns3__FlightDetailsType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__FlightDetailsType(soap, n, NULL, NULL, NULL);
}

inline ns3__FlightDetailsType * soap_new_req_ns3__FlightDetailsType(
	struct soap *soap)
{
	ns3__FlightDetailsType *_p = soap_new_ns3__FlightDetailsType(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns3__FlightDetailsType * soap_new_set_ns3__FlightDetailsType(
	struct soap *soap,
	std::string *ConjuctionTicket,
	std::string *ExchangeTicket,
	std::string *CouponNumber,
	std::string *ServiceClass,
	std::string *TravelDate,
	std::string *CarrierCode,
	std::string *StopOverPermitted,
	std::string *DepartureAirport,
	std::string *ArrivalAirport,
	std::string *FlightNumber,
	std::string *DepartureTime,
	std::string *ArrivalTime,
	std::string *FareBasisCode,
	ns2__BasicAmountType *Fare,
	ns2__BasicAmountType *Taxes,
	ns2__BasicAmountType *Fee,
	std::string *EndorsementOrRestrictions)
{
	ns3__FlightDetailsType *_p = soap_new_ns3__FlightDetailsType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__FlightDetailsType::ConjuctionTicket = ConjuctionTicket;
		_p->ns3__FlightDetailsType::ExchangeTicket = ExchangeTicket;
		_p->ns3__FlightDetailsType::CouponNumber = CouponNumber;
		_p->ns3__FlightDetailsType::ServiceClass = ServiceClass;
		_p->ns3__FlightDetailsType::TravelDate = TravelDate;
		_p->ns3__FlightDetailsType::CarrierCode = CarrierCode;
		_p->ns3__FlightDetailsType::StopOverPermitted = StopOverPermitted;
		_p->ns3__FlightDetailsType::DepartureAirport = DepartureAirport;
		_p->ns3__FlightDetailsType::ArrivalAirport = ArrivalAirport;
		_p->ns3__FlightDetailsType::FlightNumber = FlightNumber;
		_p->ns3__FlightDetailsType::DepartureTime = DepartureTime;
		_p->ns3__FlightDetailsType::ArrivalTime = ArrivalTime;
		_p->ns3__FlightDetailsType::FareBasisCode = FareBasisCode;
		_p->ns3__FlightDetailsType::Fare = Fare;
		_p->ns3__FlightDetailsType::Taxes = Taxes;
		_p->ns3__FlightDetailsType::Fee = Fee;
		_p->ns3__FlightDetailsType::EndorsementOrRestrictions = EndorsementOrRestrictions;
	}
	return _p;
}

inline int soap_write_ns3__FlightDetailsType(struct soap *soap, ns3__FlightDetailsType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:FlightDetailsType", p->soap_type() == SOAP_TYPE_ns3__FlightDetailsType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__FlightDetailsType(struct soap *soap, const char *URL, ns3__FlightDetailsType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:FlightDetailsType", p->soap_type() == SOAP_TYPE_ns3__FlightDetailsType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__FlightDetailsType(struct soap *soap, const char *URL, ns3__FlightDetailsType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:FlightDetailsType", p->soap_type() == SOAP_TYPE_ns3__FlightDetailsType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__FlightDetailsType * SOAP_FMAC4 soap_get_ns3__FlightDetailsType(struct soap*, ns3__FlightDetailsType *, const char*, const char*);

inline int soap_read_ns3__FlightDetailsType(struct soap *soap, ns3__FlightDetailsType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns3__FlightDetailsType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__FlightDetailsType(struct soap *soap, const char *URL, ns3__FlightDetailsType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__FlightDetailsType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__FlightDetailsType(struct soap *soap, ns3__FlightDetailsType *p)
{
	if (soap_read_ns3__FlightDetailsType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__AirlineItineraryType_DEFINED
#define SOAP_TYPE_ns3__AirlineItineraryType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__AirlineItineraryType(struct soap*, const char*, int, const ns3__AirlineItineraryType *, const char*);
SOAP_FMAC3 ns3__AirlineItineraryType * SOAP_FMAC4 soap_in_ns3__AirlineItineraryType(struct soap*, const char*, ns3__AirlineItineraryType *, const char*);
SOAP_FMAC1 ns3__AirlineItineraryType * SOAP_FMAC2 soap_instantiate_ns3__AirlineItineraryType(struct soap*, int, const char*, const char*, size_t*);

inline ns3__AirlineItineraryType * soap_new_ns3__AirlineItineraryType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__AirlineItineraryType(soap, n, NULL, NULL, NULL);
}

inline ns3__AirlineItineraryType * soap_new_req_ns3__AirlineItineraryType(
	struct soap *soap)
{
	ns3__AirlineItineraryType *_p = soap_new_ns3__AirlineItineraryType(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns3__AirlineItineraryType * soap_new_set_ns3__AirlineItineraryType(
	struct soap *soap,
	std::string *PassengerName,
	std::string *IssueDate,
	std::string *TravelAgencyName,
	std::string *TravelAgencyCode,
	std::string *TicketNumber,
	std::string *IssuingCarrierCode,
	std::string *CustomerCode,
	ns2__BasicAmountType *TotalFare,
	ns2__BasicAmountType *TotalTaxes,
	ns2__BasicAmountType *TotalFee,
	std::string *RestrictedTicket,
	std::string *ClearingSequence,
	std::string *ClearingCount,
	const std::vector<ns3__FlightDetailsType *> & FlightDetails)
{
	ns3__AirlineItineraryType *_p = soap_new_ns3__AirlineItineraryType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__AirlineItineraryType::PassengerName = PassengerName;
		_p->ns3__AirlineItineraryType::IssueDate = IssueDate;
		_p->ns3__AirlineItineraryType::TravelAgencyName = TravelAgencyName;
		_p->ns3__AirlineItineraryType::TravelAgencyCode = TravelAgencyCode;
		_p->ns3__AirlineItineraryType::TicketNumber = TicketNumber;
		_p->ns3__AirlineItineraryType::IssuingCarrierCode = IssuingCarrierCode;
		_p->ns3__AirlineItineraryType::CustomerCode = CustomerCode;
		_p->ns3__AirlineItineraryType::TotalFare = TotalFare;
		_p->ns3__AirlineItineraryType::TotalTaxes = TotalTaxes;
		_p->ns3__AirlineItineraryType::TotalFee = TotalFee;
		_p->ns3__AirlineItineraryType::RestrictedTicket = RestrictedTicket;
		_p->ns3__AirlineItineraryType::ClearingSequence = ClearingSequence;
		_p->ns3__AirlineItineraryType::ClearingCount = ClearingCount;
		_p->ns3__AirlineItineraryType::FlightDetails = FlightDetails;
	}
	return _p;
}

inline int soap_write_ns3__AirlineItineraryType(struct soap *soap, ns3__AirlineItineraryType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:AirlineItineraryType", p->soap_type() == SOAP_TYPE_ns3__AirlineItineraryType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__AirlineItineraryType(struct soap *soap, const char *URL, ns3__AirlineItineraryType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:AirlineItineraryType", p->soap_type() == SOAP_TYPE_ns3__AirlineItineraryType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__AirlineItineraryType(struct soap *soap, const char *URL, ns3__AirlineItineraryType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:AirlineItineraryType", p->soap_type() == SOAP_TYPE_ns3__AirlineItineraryType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__AirlineItineraryType * SOAP_FMAC4 soap_get_ns3__AirlineItineraryType(struct soap*, ns3__AirlineItineraryType *, const char*, const char*);

inline int soap_read_ns3__AirlineItineraryType(struct soap *soap, ns3__AirlineItineraryType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns3__AirlineItineraryType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__AirlineItineraryType(struct soap *soap, const char *URL, ns3__AirlineItineraryType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__AirlineItineraryType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__AirlineItineraryType(struct soap *soap, ns3__AirlineItineraryType *p)
{
	if (soap_read_ns3__AirlineItineraryType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__EnhancedDataType_DEFINED
#define SOAP_TYPE_ns3__EnhancedDataType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__EnhancedDataType(struct soap*, const char*, int, const ns3__EnhancedDataType *, const char*);
SOAP_FMAC3 ns3__EnhancedDataType * SOAP_FMAC4 soap_in_ns3__EnhancedDataType(struct soap*, const char*, ns3__EnhancedDataType *, const char*);
SOAP_FMAC1 ns3__EnhancedDataType * SOAP_FMAC2 soap_instantiate_ns3__EnhancedDataType(struct soap*, int, const char*, const char*, size_t*);

inline ns3__EnhancedDataType * soap_new_ns3__EnhancedDataType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__EnhancedDataType(soap, n, NULL, NULL, NULL);
}

inline ns3__EnhancedDataType * soap_new_req_ns3__EnhancedDataType(
	struct soap *soap)
{
	ns3__EnhancedDataType *_p = soap_new_ns3__EnhancedDataType(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns3__EnhancedDataType * soap_new_set_ns3__EnhancedDataType(
	struct soap *soap,
	ns3__AirlineItineraryType *AirlineItinerary)
{
	ns3__EnhancedDataType *_p = soap_new_ns3__EnhancedDataType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__EnhancedDataType::AirlineItinerary = AirlineItinerary;
	}
	return _p;
}

inline int soap_write_ns3__EnhancedDataType(struct soap *soap, ns3__EnhancedDataType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:EnhancedDataType", p->soap_type() == SOAP_TYPE_ns3__EnhancedDataType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__EnhancedDataType(struct soap *soap, const char *URL, ns3__EnhancedDataType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:EnhancedDataType", p->soap_type() == SOAP_TYPE_ns3__EnhancedDataType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__EnhancedDataType(struct soap *soap, const char *URL, ns3__EnhancedDataType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:EnhancedDataType", p->soap_type() == SOAP_TYPE_ns3__EnhancedDataType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__EnhancedDataType * SOAP_FMAC4 soap_get_ns3__EnhancedDataType(struct soap*, ns3__EnhancedDataType *, const char*, const char*);

inline int soap_read_ns3__EnhancedDataType(struct soap *soap, ns3__EnhancedDataType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns3__EnhancedDataType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__EnhancedDataType(struct soap *soap, const char *URL, ns3__EnhancedDataType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__EnhancedDataType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__EnhancedDataType(struct soap *soap, ns3__EnhancedDataType *p)
{
	if (soap_read_ns3__EnhancedDataType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__FMFDetailsType_DEFINED
#define SOAP_TYPE_ns3__FMFDetailsType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__FMFDetailsType(struct soap*, const char*, int, const ns3__FMFDetailsType *, const char*);
SOAP_FMAC3 ns3__FMFDetailsType * SOAP_FMAC4 soap_in_ns3__FMFDetailsType(struct soap*, const char*, ns3__FMFDetailsType *, const char*);
SOAP_FMAC1 ns3__FMFDetailsType * SOAP_FMAC2 soap_instantiate_ns3__FMFDetailsType(struct soap*, int, const char*, const char*, size_t*);

inline ns3__FMFDetailsType * soap_new_ns3__FMFDetailsType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__FMFDetailsType(soap, n, NULL, NULL, NULL);
}

inline ns3__FMFDetailsType * soap_new_req_ns3__FMFDetailsType(
	struct soap *soap)
{
	ns3__FMFDetailsType *_p = soap_new_ns3__FMFDetailsType(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns3__FMFDetailsType * soap_new_set_ns3__FMFDetailsType(
	struct soap *soap,
	ns3__RiskFilterListType *AcceptFilters,
	ns3__RiskFilterListType *PendingFilters,
	ns3__RiskFilterListType *DenyFilters,
	ns3__RiskFilterListType *ReportFilters)
{
	ns3__FMFDetailsType *_p = soap_new_ns3__FMFDetailsType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__FMFDetailsType::AcceptFilters = AcceptFilters;
		_p->ns3__FMFDetailsType::PendingFilters = PendingFilters;
		_p->ns3__FMFDetailsType::DenyFilters = DenyFilters;
		_p->ns3__FMFDetailsType::ReportFilters = ReportFilters;
	}
	return _p;
}

inline int soap_write_ns3__FMFDetailsType(struct soap *soap, ns3__FMFDetailsType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:FMFDetailsType", p->soap_type() == SOAP_TYPE_ns3__FMFDetailsType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__FMFDetailsType(struct soap *soap, const char *URL, ns3__FMFDetailsType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:FMFDetailsType", p->soap_type() == SOAP_TYPE_ns3__FMFDetailsType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__FMFDetailsType(struct soap *soap, const char *URL, ns3__FMFDetailsType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:FMFDetailsType", p->soap_type() == SOAP_TYPE_ns3__FMFDetailsType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__FMFDetailsType * SOAP_FMAC4 soap_get_ns3__FMFDetailsType(struct soap*, ns3__FMFDetailsType *, const char*, const char*);

inline int soap_read_ns3__FMFDetailsType(struct soap *soap, ns3__FMFDetailsType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns3__FMFDetailsType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__FMFDetailsType(struct soap *soap, const char *URL, ns3__FMFDetailsType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__FMFDetailsType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__FMFDetailsType(struct soap *soap, ns3__FMFDetailsType *p)
{
	if (soap_read_ns3__FMFDetailsType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__RiskFilterListType_DEFINED
#define SOAP_TYPE_ns3__RiskFilterListType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__RiskFilterListType(struct soap*, const char*, int, const ns3__RiskFilterListType *, const char*);
SOAP_FMAC3 ns3__RiskFilterListType * SOAP_FMAC4 soap_in_ns3__RiskFilterListType(struct soap*, const char*, ns3__RiskFilterListType *, const char*);
SOAP_FMAC1 ns3__RiskFilterListType * SOAP_FMAC2 soap_instantiate_ns3__RiskFilterListType(struct soap*, int, const char*, const char*, size_t*);

inline ns3__RiskFilterListType * soap_new_ns3__RiskFilterListType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__RiskFilterListType(soap, n, NULL, NULL, NULL);
}

inline ns3__RiskFilterListType * soap_new_req_ns3__RiskFilterListType(
	struct soap *soap,
	const std::vector<ns3__RiskFilterDetailsType *> & Filters)
{
	ns3__RiskFilterListType *_p = soap_new_ns3__RiskFilterListType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__RiskFilterListType::Filters = Filters;
	}
	return _p;
}

inline ns3__RiskFilterListType * soap_new_set_ns3__RiskFilterListType(
	struct soap *soap,
	const std::vector<ns3__RiskFilterDetailsType *> & Filters)
{
	ns3__RiskFilterListType *_p = soap_new_ns3__RiskFilterListType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__RiskFilterListType::Filters = Filters;
	}
	return _p;
}

inline int soap_write_ns3__RiskFilterListType(struct soap *soap, ns3__RiskFilterListType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:RiskFilterListType", p->soap_type() == SOAP_TYPE_ns3__RiskFilterListType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__RiskFilterListType(struct soap *soap, const char *URL, ns3__RiskFilterListType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:RiskFilterListType", p->soap_type() == SOAP_TYPE_ns3__RiskFilterListType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__RiskFilterListType(struct soap *soap, const char *URL, ns3__RiskFilterListType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:RiskFilterListType", p->soap_type() == SOAP_TYPE_ns3__RiskFilterListType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__RiskFilterListType * SOAP_FMAC4 soap_get_ns3__RiskFilterListType(struct soap*, ns3__RiskFilterListType *, const char*, const char*);

inline int soap_read_ns3__RiskFilterListType(struct soap *soap, ns3__RiskFilterListType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns3__RiskFilterListType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__RiskFilterListType(struct soap *soap, const char *URL, ns3__RiskFilterListType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__RiskFilterListType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__RiskFilterListType(struct soap *soap, ns3__RiskFilterListType *p)
{
	if (soap_read_ns3__RiskFilterListType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__RiskFilterDetailsType_DEFINED
#define SOAP_TYPE_ns3__RiskFilterDetailsType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__RiskFilterDetailsType(struct soap*, const char*, int, const ns3__RiskFilterDetailsType *, const char*);
SOAP_FMAC3 ns3__RiskFilterDetailsType * SOAP_FMAC4 soap_in_ns3__RiskFilterDetailsType(struct soap*, const char*, ns3__RiskFilterDetailsType *, const char*);
SOAP_FMAC1 ns3__RiskFilterDetailsType * SOAP_FMAC2 soap_instantiate_ns3__RiskFilterDetailsType(struct soap*, int, const char*, const char*, size_t*);

inline ns3__RiskFilterDetailsType * soap_new_ns3__RiskFilterDetailsType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__RiskFilterDetailsType(soap, n, NULL, NULL, NULL);
}

inline ns3__RiskFilterDetailsType * soap_new_req_ns3__RiskFilterDetailsType(
	struct soap *soap,
	int Id,
	const std::string& Name,
	const std::string& Description)
{
	ns3__RiskFilterDetailsType *_p = soap_new_ns3__RiskFilterDetailsType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__RiskFilterDetailsType::Id = Id;
		_p->ns3__RiskFilterDetailsType::Name = Name;
		_p->ns3__RiskFilterDetailsType::Description = Description;
	}
	return _p;
}

inline ns3__RiskFilterDetailsType * soap_new_set_ns3__RiskFilterDetailsType(
	struct soap *soap,
	int Id,
	const std::string& Name,
	const std::string& Description)
{
	ns3__RiskFilterDetailsType *_p = soap_new_ns3__RiskFilterDetailsType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__RiskFilterDetailsType::Id = Id;
		_p->ns3__RiskFilterDetailsType::Name = Name;
		_p->ns3__RiskFilterDetailsType::Description = Description;
	}
	return _p;
}

inline int soap_write_ns3__RiskFilterDetailsType(struct soap *soap, ns3__RiskFilterDetailsType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:RiskFilterDetailsType", p->soap_type() == SOAP_TYPE_ns3__RiskFilterDetailsType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__RiskFilterDetailsType(struct soap *soap, const char *URL, ns3__RiskFilterDetailsType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:RiskFilterDetailsType", p->soap_type() == SOAP_TYPE_ns3__RiskFilterDetailsType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__RiskFilterDetailsType(struct soap *soap, const char *URL, ns3__RiskFilterDetailsType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:RiskFilterDetailsType", p->soap_type() == SOAP_TYPE_ns3__RiskFilterDetailsType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__RiskFilterDetailsType * SOAP_FMAC4 soap_get_ns3__RiskFilterDetailsType(struct soap*, ns3__RiskFilterDetailsType *, const char*, const char*);

inline int soap_read_ns3__RiskFilterDetailsType(struct soap *soap, ns3__RiskFilterDetailsType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns3__RiskFilterDetailsType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__RiskFilterDetailsType(struct soap *soap, const char *URL, ns3__RiskFilterDetailsType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__RiskFilterDetailsType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__RiskFilterDetailsType(struct soap *soap, ns3__RiskFilterDetailsType *p)
{
	if (soap_read_ns3__RiskFilterDetailsType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__UpdateRecurringPaymentsProfileResponseDetailsType_DEFINED
#define SOAP_TYPE_ns3__UpdateRecurringPaymentsProfileResponseDetailsType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__UpdateRecurringPaymentsProfileResponseDetailsType(struct soap*, const char*, int, const ns3__UpdateRecurringPaymentsProfileResponseDetailsType *, const char*);
SOAP_FMAC3 ns3__UpdateRecurringPaymentsProfileResponseDetailsType * SOAP_FMAC4 soap_in_ns3__UpdateRecurringPaymentsProfileResponseDetailsType(struct soap*, const char*, ns3__UpdateRecurringPaymentsProfileResponseDetailsType *, const char*);
SOAP_FMAC1 ns3__UpdateRecurringPaymentsProfileResponseDetailsType * SOAP_FMAC2 soap_instantiate_ns3__UpdateRecurringPaymentsProfileResponseDetailsType(struct soap*, int, const char*, const char*, size_t*);

inline ns3__UpdateRecurringPaymentsProfileResponseDetailsType * soap_new_ns3__UpdateRecurringPaymentsProfileResponseDetailsType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__UpdateRecurringPaymentsProfileResponseDetailsType(soap, n, NULL, NULL, NULL);
}

inline ns3__UpdateRecurringPaymentsProfileResponseDetailsType * soap_new_req_ns3__UpdateRecurringPaymentsProfileResponseDetailsType(
	struct soap *soap,
	const std::string& ProfileID)
{
	ns3__UpdateRecurringPaymentsProfileResponseDetailsType *_p = soap_new_ns3__UpdateRecurringPaymentsProfileResponseDetailsType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__UpdateRecurringPaymentsProfileResponseDetailsType::ProfileID = ProfileID;
	}
	return _p;
}

inline ns3__UpdateRecurringPaymentsProfileResponseDetailsType * soap_new_set_ns3__UpdateRecurringPaymentsProfileResponseDetailsType(
	struct soap *soap,
	const std::string& ProfileID)
{
	ns3__UpdateRecurringPaymentsProfileResponseDetailsType *_p = soap_new_ns3__UpdateRecurringPaymentsProfileResponseDetailsType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__UpdateRecurringPaymentsProfileResponseDetailsType::ProfileID = ProfileID;
	}
	return _p;
}

inline int soap_write_ns3__UpdateRecurringPaymentsProfileResponseDetailsType(struct soap *soap, ns3__UpdateRecurringPaymentsProfileResponseDetailsType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:UpdateRecurringPaymentsProfileResponseDetailsType", p->soap_type() == SOAP_TYPE_ns3__UpdateRecurringPaymentsProfileResponseDetailsType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__UpdateRecurringPaymentsProfileResponseDetailsType(struct soap *soap, const char *URL, ns3__UpdateRecurringPaymentsProfileResponseDetailsType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:UpdateRecurringPaymentsProfileResponseDetailsType", p->soap_type() == SOAP_TYPE_ns3__UpdateRecurringPaymentsProfileResponseDetailsType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__UpdateRecurringPaymentsProfileResponseDetailsType(struct soap *soap, const char *URL, ns3__UpdateRecurringPaymentsProfileResponseDetailsType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:UpdateRecurringPaymentsProfileResponseDetailsType", p->soap_type() == SOAP_TYPE_ns3__UpdateRecurringPaymentsProfileResponseDetailsType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__UpdateRecurringPaymentsProfileResponseDetailsType * SOAP_FMAC4 soap_get_ns3__UpdateRecurringPaymentsProfileResponseDetailsType(struct soap*, ns3__UpdateRecurringPaymentsProfileResponseDetailsType *, const char*, const char*);

inline int soap_read_ns3__UpdateRecurringPaymentsProfileResponseDetailsType(struct soap *soap, ns3__UpdateRecurringPaymentsProfileResponseDetailsType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns3__UpdateRecurringPaymentsProfileResponseDetailsType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__UpdateRecurringPaymentsProfileResponseDetailsType(struct soap *soap, const char *URL, ns3__UpdateRecurringPaymentsProfileResponseDetailsType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__UpdateRecurringPaymentsProfileResponseDetailsType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__UpdateRecurringPaymentsProfileResponseDetailsType(struct soap *soap, ns3__UpdateRecurringPaymentsProfileResponseDetailsType *p)
{
	if (soap_read_ns3__UpdateRecurringPaymentsProfileResponseDetailsType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__UpdateRecurringPaymentsProfileRequestDetailsType_DEFINED
#define SOAP_TYPE_ns3__UpdateRecurringPaymentsProfileRequestDetailsType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__UpdateRecurringPaymentsProfileRequestDetailsType(struct soap*, const char*, int, const ns3__UpdateRecurringPaymentsProfileRequestDetailsType *, const char*);
SOAP_FMAC3 ns3__UpdateRecurringPaymentsProfileRequestDetailsType * SOAP_FMAC4 soap_in_ns3__UpdateRecurringPaymentsProfileRequestDetailsType(struct soap*, const char*, ns3__UpdateRecurringPaymentsProfileRequestDetailsType *, const char*);
SOAP_FMAC1 ns3__UpdateRecurringPaymentsProfileRequestDetailsType * SOAP_FMAC2 soap_instantiate_ns3__UpdateRecurringPaymentsProfileRequestDetailsType(struct soap*, int, const char*, const char*, size_t*);

inline ns3__UpdateRecurringPaymentsProfileRequestDetailsType * soap_new_ns3__UpdateRecurringPaymentsProfileRequestDetailsType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__UpdateRecurringPaymentsProfileRequestDetailsType(soap, n, NULL, NULL, NULL);
}

inline ns3__UpdateRecurringPaymentsProfileRequestDetailsType * soap_new_req_ns3__UpdateRecurringPaymentsProfileRequestDetailsType(
	struct soap *soap,
	const std::string& ProfileID)
{
	ns3__UpdateRecurringPaymentsProfileRequestDetailsType *_p = soap_new_ns3__UpdateRecurringPaymentsProfileRequestDetailsType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__UpdateRecurringPaymentsProfileRequestDetailsType::ProfileID = ProfileID;
	}
	return _p;
}

inline ns3__UpdateRecurringPaymentsProfileRequestDetailsType * soap_new_set_ns3__UpdateRecurringPaymentsProfileRequestDetailsType(
	struct soap *soap,
	const std::string& ProfileID,
	std::string *Note,
	std::string *Description,
	std::string *SubscriberName,
	ns3__AddressType *SubscriberShippingAddress,
	std::string *ProfileReference,
	int *AdditionalBillingCycles,
	ns2__BasicAmountType *Amount,
	ns2__BasicAmountType *ShippingAmount,
	ns2__BasicAmountType *TaxAmount,
	ns2__BasicAmountType *OutstandingBalance,
	enum ns3__AutoBillType *AutoBillOutstandingAmount,
	int *MaxFailedPayments,
	ns3__CreditCardDetailsType *CreditCard,
	time_t *BillingStartDate,
	ns3__BillingPeriodDetailsType_USCOREUpdate *TrialPeriod,
	ns3__BillingPeriodDetailsType_USCOREUpdate *PaymentPeriod)
{
	ns3__UpdateRecurringPaymentsProfileRequestDetailsType *_p = soap_new_ns3__UpdateRecurringPaymentsProfileRequestDetailsType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__UpdateRecurringPaymentsProfileRequestDetailsType::ProfileID = ProfileID;
		_p->ns3__UpdateRecurringPaymentsProfileRequestDetailsType::Note = Note;
		_p->ns3__UpdateRecurringPaymentsProfileRequestDetailsType::Description = Description;
		_p->ns3__UpdateRecurringPaymentsProfileRequestDetailsType::SubscriberName = SubscriberName;
		_p->ns3__UpdateRecurringPaymentsProfileRequestDetailsType::SubscriberShippingAddress = SubscriberShippingAddress;
		_p->ns3__UpdateRecurringPaymentsProfileRequestDetailsType::ProfileReference = ProfileReference;
		_p->ns3__UpdateRecurringPaymentsProfileRequestDetailsType::AdditionalBillingCycles = AdditionalBillingCycles;
		_p->ns3__UpdateRecurringPaymentsProfileRequestDetailsType::Amount = Amount;
		_p->ns3__UpdateRecurringPaymentsProfileRequestDetailsType::ShippingAmount = ShippingAmount;
		_p->ns3__UpdateRecurringPaymentsProfileRequestDetailsType::TaxAmount = TaxAmount;
		_p->ns3__UpdateRecurringPaymentsProfileRequestDetailsType::OutstandingBalance = OutstandingBalance;
		_p->ns3__UpdateRecurringPaymentsProfileRequestDetailsType::AutoBillOutstandingAmount = AutoBillOutstandingAmount;
		_p->ns3__UpdateRecurringPaymentsProfileRequestDetailsType::MaxFailedPayments = MaxFailedPayments;
		_p->ns3__UpdateRecurringPaymentsProfileRequestDetailsType::CreditCard = CreditCard;
		_p->ns3__UpdateRecurringPaymentsProfileRequestDetailsType::BillingStartDate = BillingStartDate;
		_p->ns3__UpdateRecurringPaymentsProfileRequestDetailsType::TrialPeriod = TrialPeriod;
		_p->ns3__UpdateRecurringPaymentsProfileRequestDetailsType::PaymentPeriod = PaymentPeriod;
	}
	return _p;
}

inline int soap_write_ns3__UpdateRecurringPaymentsProfileRequestDetailsType(struct soap *soap, ns3__UpdateRecurringPaymentsProfileRequestDetailsType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:UpdateRecurringPaymentsProfileRequestDetailsType", p->soap_type() == SOAP_TYPE_ns3__UpdateRecurringPaymentsProfileRequestDetailsType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__UpdateRecurringPaymentsProfileRequestDetailsType(struct soap *soap, const char *URL, ns3__UpdateRecurringPaymentsProfileRequestDetailsType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:UpdateRecurringPaymentsProfileRequestDetailsType", p->soap_type() == SOAP_TYPE_ns3__UpdateRecurringPaymentsProfileRequestDetailsType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__UpdateRecurringPaymentsProfileRequestDetailsType(struct soap *soap, const char *URL, ns3__UpdateRecurringPaymentsProfileRequestDetailsType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:UpdateRecurringPaymentsProfileRequestDetailsType", p->soap_type() == SOAP_TYPE_ns3__UpdateRecurringPaymentsProfileRequestDetailsType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__UpdateRecurringPaymentsProfileRequestDetailsType * SOAP_FMAC4 soap_get_ns3__UpdateRecurringPaymentsProfileRequestDetailsType(struct soap*, ns3__UpdateRecurringPaymentsProfileRequestDetailsType *, const char*, const char*);

inline int soap_read_ns3__UpdateRecurringPaymentsProfileRequestDetailsType(struct soap *soap, ns3__UpdateRecurringPaymentsProfileRequestDetailsType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns3__UpdateRecurringPaymentsProfileRequestDetailsType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__UpdateRecurringPaymentsProfileRequestDetailsType(struct soap *soap, const char *URL, ns3__UpdateRecurringPaymentsProfileRequestDetailsType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__UpdateRecurringPaymentsProfileRequestDetailsType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__UpdateRecurringPaymentsProfileRequestDetailsType(struct soap *soap, ns3__UpdateRecurringPaymentsProfileRequestDetailsType *p)
{
	if (soap_read_ns3__UpdateRecurringPaymentsProfileRequestDetailsType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__BillOutstandingAmountResponseDetailsType_DEFINED
#define SOAP_TYPE_ns3__BillOutstandingAmountResponseDetailsType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__BillOutstandingAmountResponseDetailsType(struct soap*, const char*, int, const ns3__BillOutstandingAmountResponseDetailsType *, const char*);
SOAP_FMAC3 ns3__BillOutstandingAmountResponseDetailsType * SOAP_FMAC4 soap_in_ns3__BillOutstandingAmountResponseDetailsType(struct soap*, const char*, ns3__BillOutstandingAmountResponseDetailsType *, const char*);
SOAP_FMAC1 ns3__BillOutstandingAmountResponseDetailsType * SOAP_FMAC2 soap_instantiate_ns3__BillOutstandingAmountResponseDetailsType(struct soap*, int, const char*, const char*, size_t*);

inline ns3__BillOutstandingAmountResponseDetailsType * soap_new_ns3__BillOutstandingAmountResponseDetailsType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__BillOutstandingAmountResponseDetailsType(soap, n, NULL, NULL, NULL);
}

inline ns3__BillOutstandingAmountResponseDetailsType * soap_new_req_ns3__BillOutstandingAmountResponseDetailsType(
	struct soap *soap,
	const std::string& ProfileID)
{
	ns3__BillOutstandingAmountResponseDetailsType *_p = soap_new_ns3__BillOutstandingAmountResponseDetailsType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__BillOutstandingAmountResponseDetailsType::ProfileID = ProfileID;
	}
	return _p;
}

inline ns3__BillOutstandingAmountResponseDetailsType * soap_new_set_ns3__BillOutstandingAmountResponseDetailsType(
	struct soap *soap,
	const std::string& ProfileID)
{
	ns3__BillOutstandingAmountResponseDetailsType *_p = soap_new_ns3__BillOutstandingAmountResponseDetailsType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__BillOutstandingAmountResponseDetailsType::ProfileID = ProfileID;
	}
	return _p;
}

inline int soap_write_ns3__BillOutstandingAmountResponseDetailsType(struct soap *soap, ns3__BillOutstandingAmountResponseDetailsType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:BillOutstandingAmountResponseDetailsType", p->soap_type() == SOAP_TYPE_ns3__BillOutstandingAmountResponseDetailsType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__BillOutstandingAmountResponseDetailsType(struct soap *soap, const char *URL, ns3__BillOutstandingAmountResponseDetailsType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:BillOutstandingAmountResponseDetailsType", p->soap_type() == SOAP_TYPE_ns3__BillOutstandingAmountResponseDetailsType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__BillOutstandingAmountResponseDetailsType(struct soap *soap, const char *URL, ns3__BillOutstandingAmountResponseDetailsType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:BillOutstandingAmountResponseDetailsType", p->soap_type() == SOAP_TYPE_ns3__BillOutstandingAmountResponseDetailsType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__BillOutstandingAmountResponseDetailsType * SOAP_FMAC4 soap_get_ns3__BillOutstandingAmountResponseDetailsType(struct soap*, ns3__BillOutstandingAmountResponseDetailsType *, const char*, const char*);

inline int soap_read_ns3__BillOutstandingAmountResponseDetailsType(struct soap *soap, ns3__BillOutstandingAmountResponseDetailsType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns3__BillOutstandingAmountResponseDetailsType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__BillOutstandingAmountResponseDetailsType(struct soap *soap, const char *URL, ns3__BillOutstandingAmountResponseDetailsType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__BillOutstandingAmountResponseDetailsType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__BillOutstandingAmountResponseDetailsType(struct soap *soap, ns3__BillOutstandingAmountResponseDetailsType *p)
{
	if (soap_read_ns3__BillOutstandingAmountResponseDetailsType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__BillOutstandingAmountRequestDetailsType_DEFINED
#define SOAP_TYPE_ns3__BillOutstandingAmountRequestDetailsType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__BillOutstandingAmountRequestDetailsType(struct soap*, const char*, int, const ns3__BillOutstandingAmountRequestDetailsType *, const char*);
SOAP_FMAC3 ns3__BillOutstandingAmountRequestDetailsType * SOAP_FMAC4 soap_in_ns3__BillOutstandingAmountRequestDetailsType(struct soap*, const char*, ns3__BillOutstandingAmountRequestDetailsType *, const char*);
SOAP_FMAC1 ns3__BillOutstandingAmountRequestDetailsType * SOAP_FMAC2 soap_instantiate_ns3__BillOutstandingAmountRequestDetailsType(struct soap*, int, const char*, const char*, size_t*);

inline ns3__BillOutstandingAmountRequestDetailsType * soap_new_ns3__BillOutstandingAmountRequestDetailsType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__BillOutstandingAmountRequestDetailsType(soap, n, NULL, NULL, NULL);
}

inline ns3__BillOutstandingAmountRequestDetailsType * soap_new_req_ns3__BillOutstandingAmountRequestDetailsType(
	struct soap *soap,
	const std::string& ProfileID)
{
	ns3__BillOutstandingAmountRequestDetailsType *_p = soap_new_ns3__BillOutstandingAmountRequestDetailsType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__BillOutstandingAmountRequestDetailsType::ProfileID = ProfileID;
	}
	return _p;
}

inline ns3__BillOutstandingAmountRequestDetailsType * soap_new_set_ns3__BillOutstandingAmountRequestDetailsType(
	struct soap *soap,
	const std::string& ProfileID,
	ns2__BasicAmountType *Amount,
	std::string *Note)
{
	ns3__BillOutstandingAmountRequestDetailsType *_p = soap_new_ns3__BillOutstandingAmountRequestDetailsType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__BillOutstandingAmountRequestDetailsType::ProfileID = ProfileID;
		_p->ns3__BillOutstandingAmountRequestDetailsType::Amount = Amount;
		_p->ns3__BillOutstandingAmountRequestDetailsType::Note = Note;
	}
	return _p;
}

inline int soap_write_ns3__BillOutstandingAmountRequestDetailsType(struct soap *soap, ns3__BillOutstandingAmountRequestDetailsType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:BillOutstandingAmountRequestDetailsType", p->soap_type() == SOAP_TYPE_ns3__BillOutstandingAmountRequestDetailsType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__BillOutstandingAmountRequestDetailsType(struct soap *soap, const char *URL, ns3__BillOutstandingAmountRequestDetailsType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:BillOutstandingAmountRequestDetailsType", p->soap_type() == SOAP_TYPE_ns3__BillOutstandingAmountRequestDetailsType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__BillOutstandingAmountRequestDetailsType(struct soap *soap, const char *URL, ns3__BillOutstandingAmountRequestDetailsType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:BillOutstandingAmountRequestDetailsType", p->soap_type() == SOAP_TYPE_ns3__BillOutstandingAmountRequestDetailsType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__BillOutstandingAmountRequestDetailsType * SOAP_FMAC4 soap_get_ns3__BillOutstandingAmountRequestDetailsType(struct soap*, ns3__BillOutstandingAmountRequestDetailsType *, const char*, const char*);

inline int soap_read_ns3__BillOutstandingAmountRequestDetailsType(struct soap *soap, ns3__BillOutstandingAmountRequestDetailsType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns3__BillOutstandingAmountRequestDetailsType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__BillOutstandingAmountRequestDetailsType(struct soap *soap, const char *URL, ns3__BillOutstandingAmountRequestDetailsType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__BillOutstandingAmountRequestDetailsType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__BillOutstandingAmountRequestDetailsType(struct soap *soap, ns3__BillOutstandingAmountRequestDetailsType *p)
{
	if (soap_read_ns3__BillOutstandingAmountRequestDetailsType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__ManageRecurringPaymentsProfileStatusResponseDetailsType_DEFINED
#define SOAP_TYPE_ns3__ManageRecurringPaymentsProfileStatusResponseDetailsType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__ManageRecurringPaymentsProfileStatusResponseDetailsType(struct soap*, const char*, int, const ns3__ManageRecurringPaymentsProfileStatusResponseDetailsType *, const char*);
SOAP_FMAC3 ns3__ManageRecurringPaymentsProfileStatusResponseDetailsType * SOAP_FMAC4 soap_in_ns3__ManageRecurringPaymentsProfileStatusResponseDetailsType(struct soap*, const char*, ns3__ManageRecurringPaymentsProfileStatusResponseDetailsType *, const char*);
SOAP_FMAC1 ns3__ManageRecurringPaymentsProfileStatusResponseDetailsType * SOAP_FMAC2 soap_instantiate_ns3__ManageRecurringPaymentsProfileStatusResponseDetailsType(struct soap*, int, const char*, const char*, size_t*);

inline ns3__ManageRecurringPaymentsProfileStatusResponseDetailsType * soap_new_ns3__ManageRecurringPaymentsProfileStatusResponseDetailsType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__ManageRecurringPaymentsProfileStatusResponseDetailsType(soap, n, NULL, NULL, NULL);
}

inline ns3__ManageRecurringPaymentsProfileStatusResponseDetailsType * soap_new_req_ns3__ManageRecurringPaymentsProfileStatusResponseDetailsType(
	struct soap *soap,
	const std::string& ProfileID)
{
	ns3__ManageRecurringPaymentsProfileStatusResponseDetailsType *_p = soap_new_ns3__ManageRecurringPaymentsProfileStatusResponseDetailsType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__ManageRecurringPaymentsProfileStatusResponseDetailsType::ProfileID = ProfileID;
	}
	return _p;
}

inline ns3__ManageRecurringPaymentsProfileStatusResponseDetailsType * soap_new_set_ns3__ManageRecurringPaymentsProfileStatusResponseDetailsType(
	struct soap *soap,
	const std::string& ProfileID)
{
	ns3__ManageRecurringPaymentsProfileStatusResponseDetailsType *_p = soap_new_ns3__ManageRecurringPaymentsProfileStatusResponseDetailsType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__ManageRecurringPaymentsProfileStatusResponseDetailsType::ProfileID = ProfileID;
	}
	return _p;
}

inline int soap_write_ns3__ManageRecurringPaymentsProfileStatusResponseDetailsType(struct soap *soap, ns3__ManageRecurringPaymentsProfileStatusResponseDetailsType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:ManageRecurringPaymentsProfileStatusResponseDetailsType", p->soap_type() == SOAP_TYPE_ns3__ManageRecurringPaymentsProfileStatusResponseDetailsType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__ManageRecurringPaymentsProfileStatusResponseDetailsType(struct soap *soap, const char *URL, ns3__ManageRecurringPaymentsProfileStatusResponseDetailsType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:ManageRecurringPaymentsProfileStatusResponseDetailsType", p->soap_type() == SOAP_TYPE_ns3__ManageRecurringPaymentsProfileStatusResponseDetailsType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__ManageRecurringPaymentsProfileStatusResponseDetailsType(struct soap *soap, const char *URL, ns3__ManageRecurringPaymentsProfileStatusResponseDetailsType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:ManageRecurringPaymentsProfileStatusResponseDetailsType", p->soap_type() == SOAP_TYPE_ns3__ManageRecurringPaymentsProfileStatusResponseDetailsType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__ManageRecurringPaymentsProfileStatusResponseDetailsType * SOAP_FMAC4 soap_get_ns3__ManageRecurringPaymentsProfileStatusResponseDetailsType(struct soap*, ns3__ManageRecurringPaymentsProfileStatusResponseDetailsType *, const char*, const char*);

inline int soap_read_ns3__ManageRecurringPaymentsProfileStatusResponseDetailsType(struct soap *soap, ns3__ManageRecurringPaymentsProfileStatusResponseDetailsType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns3__ManageRecurringPaymentsProfileStatusResponseDetailsType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__ManageRecurringPaymentsProfileStatusResponseDetailsType(struct soap *soap, const char *URL, ns3__ManageRecurringPaymentsProfileStatusResponseDetailsType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__ManageRecurringPaymentsProfileStatusResponseDetailsType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__ManageRecurringPaymentsProfileStatusResponseDetailsType(struct soap *soap, ns3__ManageRecurringPaymentsProfileStatusResponseDetailsType *p)
{
	if (soap_read_ns3__ManageRecurringPaymentsProfileStatusResponseDetailsType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__ManageRecurringPaymentsProfileStatusRequestDetailsType_DEFINED
#define SOAP_TYPE_ns3__ManageRecurringPaymentsProfileStatusRequestDetailsType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__ManageRecurringPaymentsProfileStatusRequestDetailsType(struct soap*, const char*, int, const ns3__ManageRecurringPaymentsProfileStatusRequestDetailsType *, const char*);
SOAP_FMAC3 ns3__ManageRecurringPaymentsProfileStatusRequestDetailsType * SOAP_FMAC4 soap_in_ns3__ManageRecurringPaymentsProfileStatusRequestDetailsType(struct soap*, const char*, ns3__ManageRecurringPaymentsProfileStatusRequestDetailsType *, const char*);
SOAP_FMAC1 ns3__ManageRecurringPaymentsProfileStatusRequestDetailsType * SOAP_FMAC2 soap_instantiate_ns3__ManageRecurringPaymentsProfileStatusRequestDetailsType(struct soap*, int, const char*, const char*, size_t*);

inline ns3__ManageRecurringPaymentsProfileStatusRequestDetailsType * soap_new_ns3__ManageRecurringPaymentsProfileStatusRequestDetailsType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__ManageRecurringPaymentsProfileStatusRequestDetailsType(soap, n, NULL, NULL, NULL);
}

inline ns3__ManageRecurringPaymentsProfileStatusRequestDetailsType * soap_new_req_ns3__ManageRecurringPaymentsProfileStatusRequestDetailsType(
	struct soap *soap,
	const std::string& ProfileID,
	enum ns3__StatusChangeActionType Action)
{
	ns3__ManageRecurringPaymentsProfileStatusRequestDetailsType *_p = soap_new_ns3__ManageRecurringPaymentsProfileStatusRequestDetailsType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__ManageRecurringPaymentsProfileStatusRequestDetailsType::ProfileID = ProfileID;
		_p->ns3__ManageRecurringPaymentsProfileStatusRequestDetailsType::Action = Action;
	}
	return _p;
}

inline ns3__ManageRecurringPaymentsProfileStatusRequestDetailsType * soap_new_set_ns3__ManageRecurringPaymentsProfileStatusRequestDetailsType(
	struct soap *soap,
	const std::string& ProfileID,
	enum ns3__StatusChangeActionType Action,
	std::string *Note)
{
	ns3__ManageRecurringPaymentsProfileStatusRequestDetailsType *_p = soap_new_ns3__ManageRecurringPaymentsProfileStatusRequestDetailsType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__ManageRecurringPaymentsProfileStatusRequestDetailsType::ProfileID = ProfileID;
		_p->ns3__ManageRecurringPaymentsProfileStatusRequestDetailsType::Action = Action;
		_p->ns3__ManageRecurringPaymentsProfileStatusRequestDetailsType::Note = Note;
	}
	return _p;
}

inline int soap_write_ns3__ManageRecurringPaymentsProfileStatusRequestDetailsType(struct soap *soap, ns3__ManageRecurringPaymentsProfileStatusRequestDetailsType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:ManageRecurringPaymentsProfileStatusRequestDetailsType", p->soap_type() == SOAP_TYPE_ns3__ManageRecurringPaymentsProfileStatusRequestDetailsType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__ManageRecurringPaymentsProfileStatusRequestDetailsType(struct soap *soap, const char *URL, ns3__ManageRecurringPaymentsProfileStatusRequestDetailsType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:ManageRecurringPaymentsProfileStatusRequestDetailsType", p->soap_type() == SOAP_TYPE_ns3__ManageRecurringPaymentsProfileStatusRequestDetailsType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__ManageRecurringPaymentsProfileStatusRequestDetailsType(struct soap *soap, const char *URL, ns3__ManageRecurringPaymentsProfileStatusRequestDetailsType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:ManageRecurringPaymentsProfileStatusRequestDetailsType", p->soap_type() == SOAP_TYPE_ns3__ManageRecurringPaymentsProfileStatusRequestDetailsType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__ManageRecurringPaymentsProfileStatusRequestDetailsType * SOAP_FMAC4 soap_get_ns3__ManageRecurringPaymentsProfileStatusRequestDetailsType(struct soap*, ns3__ManageRecurringPaymentsProfileStatusRequestDetailsType *, const char*, const char*);

inline int soap_read_ns3__ManageRecurringPaymentsProfileStatusRequestDetailsType(struct soap *soap, ns3__ManageRecurringPaymentsProfileStatusRequestDetailsType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns3__ManageRecurringPaymentsProfileStatusRequestDetailsType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__ManageRecurringPaymentsProfileStatusRequestDetailsType(struct soap *soap, const char *URL, ns3__ManageRecurringPaymentsProfileStatusRequestDetailsType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__ManageRecurringPaymentsProfileStatusRequestDetailsType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__ManageRecurringPaymentsProfileStatusRequestDetailsType(struct soap *soap, ns3__ManageRecurringPaymentsProfileStatusRequestDetailsType *p)
{
	if (soap_read_ns3__ManageRecurringPaymentsProfileStatusRequestDetailsType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__GetRecurringPaymentsProfileDetailsResponseDetailsType_DEFINED
#define SOAP_TYPE_ns3__GetRecurringPaymentsProfileDetailsResponseDetailsType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__GetRecurringPaymentsProfileDetailsResponseDetailsType(struct soap*, const char*, int, const ns3__GetRecurringPaymentsProfileDetailsResponseDetailsType *, const char*);
SOAP_FMAC3 ns3__GetRecurringPaymentsProfileDetailsResponseDetailsType * SOAP_FMAC4 soap_in_ns3__GetRecurringPaymentsProfileDetailsResponseDetailsType(struct soap*, const char*, ns3__GetRecurringPaymentsProfileDetailsResponseDetailsType *, const char*);
SOAP_FMAC1 ns3__GetRecurringPaymentsProfileDetailsResponseDetailsType * SOAP_FMAC2 soap_instantiate_ns3__GetRecurringPaymentsProfileDetailsResponseDetailsType(struct soap*, int, const char*, const char*, size_t*);

inline ns3__GetRecurringPaymentsProfileDetailsResponseDetailsType * soap_new_ns3__GetRecurringPaymentsProfileDetailsResponseDetailsType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__GetRecurringPaymentsProfileDetailsResponseDetailsType(soap, n, NULL, NULL, NULL);
}

inline ns3__GetRecurringPaymentsProfileDetailsResponseDetailsType * soap_new_req_ns3__GetRecurringPaymentsProfileDetailsResponseDetailsType(
	struct soap *soap,
	const std::string& ProfileID,
	enum ns3__RecurringPaymentsProfileStatusType ProfileStatus,
	const std::string& Description,
	enum ns3__AutoBillType AutoBillOutstandingAmount,
	int MaxFailedPayments,
	ns3__RecurringPaymentsProfileDetailsType *RecurringPaymentsProfileDetails,
	ns3__RecurringPaymentsSummaryType *RecurringPaymentsSummary)
{
	ns3__GetRecurringPaymentsProfileDetailsResponseDetailsType *_p = soap_new_ns3__GetRecurringPaymentsProfileDetailsResponseDetailsType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__GetRecurringPaymentsProfileDetailsResponseDetailsType::ProfileID = ProfileID;
		_p->ns3__GetRecurringPaymentsProfileDetailsResponseDetailsType::ProfileStatus = ProfileStatus;
		_p->ns3__GetRecurringPaymentsProfileDetailsResponseDetailsType::Description = Description;
		_p->ns3__GetRecurringPaymentsProfileDetailsResponseDetailsType::AutoBillOutstandingAmount = AutoBillOutstandingAmount;
		_p->ns3__GetRecurringPaymentsProfileDetailsResponseDetailsType::MaxFailedPayments = MaxFailedPayments;
		_p->ns3__GetRecurringPaymentsProfileDetailsResponseDetailsType::RecurringPaymentsProfileDetails = RecurringPaymentsProfileDetails;
		_p->ns3__GetRecurringPaymentsProfileDetailsResponseDetailsType::RecurringPaymentsSummary = RecurringPaymentsSummary;
	}
	return _p;
}

inline ns3__GetRecurringPaymentsProfileDetailsResponseDetailsType * soap_new_set_ns3__GetRecurringPaymentsProfileDetailsResponseDetailsType(
	struct soap *soap,
	const std::string& ProfileID,
	enum ns3__RecurringPaymentsProfileStatusType ProfileStatus,
	const std::string& Description,
	enum ns3__AutoBillType AutoBillOutstandingAmount,
	int MaxFailedPayments,
	ns3__RecurringPaymentsProfileDetailsType *RecurringPaymentsProfileDetails,
	ns3__BillingPeriodDetailsType *CurrentRecurringPaymentsPeriod,
	ns3__RecurringPaymentsSummaryType *RecurringPaymentsSummary,
	ns3__CreditCardDetailsType *CreditCard,
	ns3__BillingPeriodDetailsType *TrialRecurringPaymentsPeriod,
	ns3__BillingPeriodDetailsType *RegularRecurringPaymentsPeriod,
	ns2__BasicAmountType *TrialAmountPaid,
	ns2__BasicAmountType *RegularAmountPaid,
	ns2__BasicAmountType *AggregateAmount,
	ns2__BasicAmountType *AggregateOptionalAmount,
	time_t *FinalPaymentDueDate,
	std::string *SoftDescriptor,
	std::string *SoftDescriptorCity)
{
	ns3__GetRecurringPaymentsProfileDetailsResponseDetailsType *_p = soap_new_ns3__GetRecurringPaymentsProfileDetailsResponseDetailsType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__GetRecurringPaymentsProfileDetailsResponseDetailsType::ProfileID = ProfileID;
		_p->ns3__GetRecurringPaymentsProfileDetailsResponseDetailsType::ProfileStatus = ProfileStatus;
		_p->ns3__GetRecurringPaymentsProfileDetailsResponseDetailsType::Description = Description;
		_p->ns3__GetRecurringPaymentsProfileDetailsResponseDetailsType::AutoBillOutstandingAmount = AutoBillOutstandingAmount;
		_p->ns3__GetRecurringPaymentsProfileDetailsResponseDetailsType::MaxFailedPayments = MaxFailedPayments;
		_p->ns3__GetRecurringPaymentsProfileDetailsResponseDetailsType::RecurringPaymentsProfileDetails = RecurringPaymentsProfileDetails;
		_p->ns3__GetRecurringPaymentsProfileDetailsResponseDetailsType::CurrentRecurringPaymentsPeriod = CurrentRecurringPaymentsPeriod;
		_p->ns3__GetRecurringPaymentsProfileDetailsResponseDetailsType::RecurringPaymentsSummary = RecurringPaymentsSummary;
		_p->ns3__GetRecurringPaymentsProfileDetailsResponseDetailsType::CreditCard = CreditCard;
		_p->ns3__GetRecurringPaymentsProfileDetailsResponseDetailsType::TrialRecurringPaymentsPeriod = TrialRecurringPaymentsPeriod;
		_p->ns3__GetRecurringPaymentsProfileDetailsResponseDetailsType::RegularRecurringPaymentsPeriod = RegularRecurringPaymentsPeriod;
		_p->ns3__GetRecurringPaymentsProfileDetailsResponseDetailsType::TrialAmountPaid = TrialAmountPaid;
		_p->ns3__GetRecurringPaymentsProfileDetailsResponseDetailsType::RegularAmountPaid = RegularAmountPaid;
		_p->ns3__GetRecurringPaymentsProfileDetailsResponseDetailsType::AggregateAmount = AggregateAmount;
		_p->ns3__GetRecurringPaymentsProfileDetailsResponseDetailsType::AggregateOptionalAmount = AggregateOptionalAmount;
		_p->ns3__GetRecurringPaymentsProfileDetailsResponseDetailsType::FinalPaymentDueDate = FinalPaymentDueDate;
		_p->ns3__GetRecurringPaymentsProfileDetailsResponseDetailsType::SoftDescriptor = SoftDescriptor;
		_p->ns3__GetRecurringPaymentsProfileDetailsResponseDetailsType::SoftDescriptorCity = SoftDescriptorCity;
	}
	return _p;
}

inline int soap_write_ns3__GetRecurringPaymentsProfileDetailsResponseDetailsType(struct soap *soap, ns3__GetRecurringPaymentsProfileDetailsResponseDetailsType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:GetRecurringPaymentsProfileDetailsResponseDetailsType", p->soap_type() == SOAP_TYPE_ns3__GetRecurringPaymentsProfileDetailsResponseDetailsType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__GetRecurringPaymentsProfileDetailsResponseDetailsType(struct soap *soap, const char *URL, ns3__GetRecurringPaymentsProfileDetailsResponseDetailsType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:GetRecurringPaymentsProfileDetailsResponseDetailsType", p->soap_type() == SOAP_TYPE_ns3__GetRecurringPaymentsProfileDetailsResponseDetailsType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__GetRecurringPaymentsProfileDetailsResponseDetailsType(struct soap *soap, const char *URL, ns3__GetRecurringPaymentsProfileDetailsResponseDetailsType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:GetRecurringPaymentsProfileDetailsResponseDetailsType", p->soap_type() == SOAP_TYPE_ns3__GetRecurringPaymentsProfileDetailsResponseDetailsType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__GetRecurringPaymentsProfileDetailsResponseDetailsType * SOAP_FMAC4 soap_get_ns3__GetRecurringPaymentsProfileDetailsResponseDetailsType(struct soap*, ns3__GetRecurringPaymentsProfileDetailsResponseDetailsType *, const char*, const char*);

inline int soap_read_ns3__GetRecurringPaymentsProfileDetailsResponseDetailsType(struct soap *soap, ns3__GetRecurringPaymentsProfileDetailsResponseDetailsType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns3__GetRecurringPaymentsProfileDetailsResponseDetailsType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__GetRecurringPaymentsProfileDetailsResponseDetailsType(struct soap *soap, const char *URL, ns3__GetRecurringPaymentsProfileDetailsResponseDetailsType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__GetRecurringPaymentsProfileDetailsResponseDetailsType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__GetRecurringPaymentsProfileDetailsResponseDetailsType(struct soap *soap, ns3__GetRecurringPaymentsProfileDetailsResponseDetailsType *p)
{
	if (soap_read_ns3__GetRecurringPaymentsProfileDetailsResponseDetailsType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__CreateRecurringPaymentsProfileResponseDetailsType_DEFINED
#define SOAP_TYPE_ns3__CreateRecurringPaymentsProfileResponseDetailsType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__CreateRecurringPaymentsProfileResponseDetailsType(struct soap*, const char*, int, const ns3__CreateRecurringPaymentsProfileResponseDetailsType *, const char*);
SOAP_FMAC3 ns3__CreateRecurringPaymentsProfileResponseDetailsType * SOAP_FMAC4 soap_in_ns3__CreateRecurringPaymentsProfileResponseDetailsType(struct soap*, const char*, ns3__CreateRecurringPaymentsProfileResponseDetailsType *, const char*);
SOAP_FMAC1 ns3__CreateRecurringPaymentsProfileResponseDetailsType * SOAP_FMAC2 soap_instantiate_ns3__CreateRecurringPaymentsProfileResponseDetailsType(struct soap*, int, const char*, const char*, size_t*);

inline ns3__CreateRecurringPaymentsProfileResponseDetailsType * soap_new_ns3__CreateRecurringPaymentsProfileResponseDetailsType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__CreateRecurringPaymentsProfileResponseDetailsType(soap, n, NULL, NULL, NULL);
}

inline ns3__CreateRecurringPaymentsProfileResponseDetailsType * soap_new_req_ns3__CreateRecurringPaymentsProfileResponseDetailsType(
	struct soap *soap,
	const std::string& ProfileID)
{
	ns3__CreateRecurringPaymentsProfileResponseDetailsType *_p = soap_new_ns3__CreateRecurringPaymentsProfileResponseDetailsType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__CreateRecurringPaymentsProfileResponseDetailsType::ProfileID = ProfileID;
	}
	return _p;
}

inline ns3__CreateRecurringPaymentsProfileResponseDetailsType * soap_new_set_ns3__CreateRecurringPaymentsProfileResponseDetailsType(
	struct soap *soap,
	const std::string& ProfileID,
	enum ns3__RecurringPaymentsProfileStatusType *ProfileStatus,
	std::string *TransactionID,
	std::string *DCCProcessorResponse,
	std::string *DCCReturnCode,
	std::string *PendingReason)
{
	ns3__CreateRecurringPaymentsProfileResponseDetailsType *_p = soap_new_ns3__CreateRecurringPaymentsProfileResponseDetailsType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__CreateRecurringPaymentsProfileResponseDetailsType::ProfileID = ProfileID;
		_p->ns3__CreateRecurringPaymentsProfileResponseDetailsType::ProfileStatus = ProfileStatus;
		_p->ns3__CreateRecurringPaymentsProfileResponseDetailsType::TransactionID = TransactionID;
		_p->ns3__CreateRecurringPaymentsProfileResponseDetailsType::DCCProcessorResponse = DCCProcessorResponse;
		_p->ns3__CreateRecurringPaymentsProfileResponseDetailsType::DCCReturnCode = DCCReturnCode;
		_p->ns3__CreateRecurringPaymentsProfileResponseDetailsType::PendingReason = PendingReason;
	}
	return _p;
}

inline int soap_write_ns3__CreateRecurringPaymentsProfileResponseDetailsType(struct soap *soap, ns3__CreateRecurringPaymentsProfileResponseDetailsType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:CreateRecurringPaymentsProfileResponseDetailsType", p->soap_type() == SOAP_TYPE_ns3__CreateRecurringPaymentsProfileResponseDetailsType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__CreateRecurringPaymentsProfileResponseDetailsType(struct soap *soap, const char *URL, ns3__CreateRecurringPaymentsProfileResponseDetailsType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:CreateRecurringPaymentsProfileResponseDetailsType", p->soap_type() == SOAP_TYPE_ns3__CreateRecurringPaymentsProfileResponseDetailsType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__CreateRecurringPaymentsProfileResponseDetailsType(struct soap *soap, const char *URL, ns3__CreateRecurringPaymentsProfileResponseDetailsType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:CreateRecurringPaymentsProfileResponseDetailsType", p->soap_type() == SOAP_TYPE_ns3__CreateRecurringPaymentsProfileResponseDetailsType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__CreateRecurringPaymentsProfileResponseDetailsType * SOAP_FMAC4 soap_get_ns3__CreateRecurringPaymentsProfileResponseDetailsType(struct soap*, ns3__CreateRecurringPaymentsProfileResponseDetailsType *, const char*, const char*);

inline int soap_read_ns3__CreateRecurringPaymentsProfileResponseDetailsType(struct soap *soap, ns3__CreateRecurringPaymentsProfileResponseDetailsType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns3__CreateRecurringPaymentsProfileResponseDetailsType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__CreateRecurringPaymentsProfileResponseDetailsType(struct soap *soap, const char *URL, ns3__CreateRecurringPaymentsProfileResponseDetailsType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__CreateRecurringPaymentsProfileResponseDetailsType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__CreateRecurringPaymentsProfileResponseDetailsType(struct soap *soap, ns3__CreateRecurringPaymentsProfileResponseDetailsType *p)
{
	if (soap_read_ns3__CreateRecurringPaymentsProfileResponseDetailsType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__CreateRecurringPaymentsProfileRequestDetailsType_DEFINED
#define SOAP_TYPE_ns3__CreateRecurringPaymentsProfileRequestDetailsType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__CreateRecurringPaymentsProfileRequestDetailsType(struct soap*, const char*, int, const ns3__CreateRecurringPaymentsProfileRequestDetailsType *, const char*);
SOAP_FMAC3 ns3__CreateRecurringPaymentsProfileRequestDetailsType * SOAP_FMAC4 soap_in_ns3__CreateRecurringPaymentsProfileRequestDetailsType(struct soap*, const char*, ns3__CreateRecurringPaymentsProfileRequestDetailsType *, const char*);
SOAP_FMAC1 ns3__CreateRecurringPaymentsProfileRequestDetailsType * SOAP_FMAC2 soap_instantiate_ns3__CreateRecurringPaymentsProfileRequestDetailsType(struct soap*, int, const char*, const char*, size_t*);

inline ns3__CreateRecurringPaymentsProfileRequestDetailsType * soap_new_ns3__CreateRecurringPaymentsProfileRequestDetailsType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__CreateRecurringPaymentsProfileRequestDetailsType(soap, n, NULL, NULL, NULL);
}

inline ns3__CreateRecurringPaymentsProfileRequestDetailsType * soap_new_req_ns3__CreateRecurringPaymentsProfileRequestDetailsType(
	struct soap *soap,
	ns3__RecurringPaymentsProfileDetailsType *RecurringPaymentsProfileDetails,
	ns3__ScheduleDetailsType *ScheduleDetails)
{
	ns3__CreateRecurringPaymentsProfileRequestDetailsType *_p = soap_new_ns3__CreateRecurringPaymentsProfileRequestDetailsType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__CreateRecurringPaymentsProfileRequestDetailsType::RecurringPaymentsProfileDetails = RecurringPaymentsProfileDetails;
		_p->ns3__CreateRecurringPaymentsProfileRequestDetailsType::ScheduleDetails = ScheduleDetails;
	}
	return _p;
}

inline ns3__CreateRecurringPaymentsProfileRequestDetailsType * soap_new_set_ns3__CreateRecurringPaymentsProfileRequestDetailsType(
	struct soap *soap,
	std::string *Token,
	ns3__CreditCardDetailsType *CreditCard,
	ns3__RecurringPaymentsProfileDetailsType *RecurringPaymentsProfileDetails,
	ns3__ScheduleDetailsType *ScheduleDetails,
	const std::vector<ns3__PaymentDetailsItemType *> & PaymentDetailsItem,
	std::string *SoftDescriptor,
	std::string *SoftDescriptorCity)
{
	ns3__CreateRecurringPaymentsProfileRequestDetailsType *_p = soap_new_ns3__CreateRecurringPaymentsProfileRequestDetailsType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__CreateRecurringPaymentsProfileRequestDetailsType::Token = Token;
		_p->ns3__CreateRecurringPaymentsProfileRequestDetailsType::CreditCard = CreditCard;
		_p->ns3__CreateRecurringPaymentsProfileRequestDetailsType::RecurringPaymentsProfileDetails = RecurringPaymentsProfileDetails;
		_p->ns3__CreateRecurringPaymentsProfileRequestDetailsType::ScheduleDetails = ScheduleDetails;
		_p->ns3__CreateRecurringPaymentsProfileRequestDetailsType::PaymentDetailsItem = PaymentDetailsItem;
		_p->ns3__CreateRecurringPaymentsProfileRequestDetailsType::SoftDescriptor = SoftDescriptor;
		_p->ns3__CreateRecurringPaymentsProfileRequestDetailsType::SoftDescriptorCity = SoftDescriptorCity;
	}
	return _p;
}

inline int soap_write_ns3__CreateRecurringPaymentsProfileRequestDetailsType(struct soap *soap, ns3__CreateRecurringPaymentsProfileRequestDetailsType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:CreateRecurringPaymentsProfileRequestDetailsType", p->soap_type() == SOAP_TYPE_ns3__CreateRecurringPaymentsProfileRequestDetailsType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__CreateRecurringPaymentsProfileRequestDetailsType(struct soap *soap, const char *URL, ns3__CreateRecurringPaymentsProfileRequestDetailsType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:CreateRecurringPaymentsProfileRequestDetailsType", p->soap_type() == SOAP_TYPE_ns3__CreateRecurringPaymentsProfileRequestDetailsType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__CreateRecurringPaymentsProfileRequestDetailsType(struct soap *soap, const char *URL, ns3__CreateRecurringPaymentsProfileRequestDetailsType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:CreateRecurringPaymentsProfileRequestDetailsType", p->soap_type() == SOAP_TYPE_ns3__CreateRecurringPaymentsProfileRequestDetailsType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__CreateRecurringPaymentsProfileRequestDetailsType * SOAP_FMAC4 soap_get_ns3__CreateRecurringPaymentsProfileRequestDetailsType(struct soap*, ns3__CreateRecurringPaymentsProfileRequestDetailsType *, const char*, const char*);

inline int soap_read_ns3__CreateRecurringPaymentsProfileRequestDetailsType(struct soap *soap, ns3__CreateRecurringPaymentsProfileRequestDetailsType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns3__CreateRecurringPaymentsProfileRequestDetailsType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__CreateRecurringPaymentsProfileRequestDetailsType(struct soap *soap, const char *URL, ns3__CreateRecurringPaymentsProfileRequestDetailsType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__CreateRecurringPaymentsProfileRequestDetailsType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__CreateRecurringPaymentsProfileRequestDetailsType(struct soap *soap, ns3__CreateRecurringPaymentsProfileRequestDetailsType *p)
{
	if (soap_read_ns3__CreateRecurringPaymentsProfileRequestDetailsType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__RecurringPaymentsProfileDetailsType_DEFINED
#define SOAP_TYPE_ns3__RecurringPaymentsProfileDetailsType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__RecurringPaymentsProfileDetailsType(struct soap*, const char*, int, const ns3__RecurringPaymentsProfileDetailsType *, const char*);
SOAP_FMAC3 ns3__RecurringPaymentsProfileDetailsType * SOAP_FMAC4 soap_in_ns3__RecurringPaymentsProfileDetailsType(struct soap*, const char*, ns3__RecurringPaymentsProfileDetailsType *, const char*);
SOAP_FMAC1 ns3__RecurringPaymentsProfileDetailsType * SOAP_FMAC2 soap_instantiate_ns3__RecurringPaymentsProfileDetailsType(struct soap*, int, const char*, const char*, size_t*);

inline ns3__RecurringPaymentsProfileDetailsType * soap_new_ns3__RecurringPaymentsProfileDetailsType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__RecurringPaymentsProfileDetailsType(soap, n, NULL, NULL, NULL);
}

inline ns3__RecurringPaymentsProfileDetailsType * soap_new_req_ns3__RecurringPaymentsProfileDetailsType(
	struct soap *soap,
	time_t BillingStartDate)
{
	ns3__RecurringPaymentsProfileDetailsType *_p = soap_new_ns3__RecurringPaymentsProfileDetailsType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__RecurringPaymentsProfileDetailsType::BillingStartDate = BillingStartDate;
	}
	return _p;
}

inline ns3__RecurringPaymentsProfileDetailsType * soap_new_set_ns3__RecurringPaymentsProfileDetailsType(
	struct soap *soap,
	std::string *SubscriberName,
	ns3__AddressType *SubscriberShippingAddress,
	time_t BillingStartDate,
	std::string *ProfileReference)
{
	ns3__RecurringPaymentsProfileDetailsType *_p = soap_new_ns3__RecurringPaymentsProfileDetailsType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__RecurringPaymentsProfileDetailsType::SubscriberName = SubscriberName;
		_p->ns3__RecurringPaymentsProfileDetailsType::SubscriberShippingAddress = SubscriberShippingAddress;
		_p->ns3__RecurringPaymentsProfileDetailsType::BillingStartDate = BillingStartDate;
		_p->ns3__RecurringPaymentsProfileDetailsType::ProfileReference = ProfileReference;
	}
	return _p;
}

inline int soap_write_ns3__RecurringPaymentsProfileDetailsType(struct soap *soap, ns3__RecurringPaymentsProfileDetailsType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:RecurringPaymentsProfileDetailsType", p->soap_type() == SOAP_TYPE_ns3__RecurringPaymentsProfileDetailsType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__RecurringPaymentsProfileDetailsType(struct soap *soap, const char *URL, ns3__RecurringPaymentsProfileDetailsType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:RecurringPaymentsProfileDetailsType", p->soap_type() == SOAP_TYPE_ns3__RecurringPaymentsProfileDetailsType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__RecurringPaymentsProfileDetailsType(struct soap *soap, const char *URL, ns3__RecurringPaymentsProfileDetailsType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:RecurringPaymentsProfileDetailsType", p->soap_type() == SOAP_TYPE_ns3__RecurringPaymentsProfileDetailsType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__RecurringPaymentsProfileDetailsType * SOAP_FMAC4 soap_get_ns3__RecurringPaymentsProfileDetailsType(struct soap*, ns3__RecurringPaymentsProfileDetailsType *, const char*, const char*);

inline int soap_read_ns3__RecurringPaymentsProfileDetailsType(struct soap *soap, ns3__RecurringPaymentsProfileDetailsType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns3__RecurringPaymentsProfileDetailsType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__RecurringPaymentsProfileDetailsType(struct soap *soap, const char *URL, ns3__RecurringPaymentsProfileDetailsType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__RecurringPaymentsProfileDetailsType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__RecurringPaymentsProfileDetailsType(struct soap *soap, ns3__RecurringPaymentsProfileDetailsType *p)
{
	if (soap_read_ns3__RecurringPaymentsProfileDetailsType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__ScheduleDetailsType_DEFINED
#define SOAP_TYPE_ns3__ScheduleDetailsType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__ScheduleDetailsType(struct soap*, const char*, int, const ns3__ScheduleDetailsType *, const char*);
SOAP_FMAC3 ns3__ScheduleDetailsType * SOAP_FMAC4 soap_in_ns3__ScheduleDetailsType(struct soap*, const char*, ns3__ScheduleDetailsType *, const char*);
SOAP_FMAC1 ns3__ScheduleDetailsType * SOAP_FMAC2 soap_instantiate_ns3__ScheduleDetailsType(struct soap*, int, const char*, const char*, size_t*);

inline ns3__ScheduleDetailsType * soap_new_ns3__ScheduleDetailsType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__ScheduleDetailsType(soap, n, NULL, NULL, NULL);
}

inline ns3__ScheduleDetailsType * soap_new_req_ns3__ScheduleDetailsType(
	struct soap *soap,
	const std::string& Description,
	ns3__BillingPeriodDetailsType *PaymentPeriod)
{
	ns3__ScheduleDetailsType *_p = soap_new_ns3__ScheduleDetailsType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__ScheduleDetailsType::Description = Description;
		_p->ns3__ScheduleDetailsType::PaymentPeriod = PaymentPeriod;
	}
	return _p;
}

inline ns3__ScheduleDetailsType * soap_new_set_ns3__ScheduleDetailsType(
	struct soap *soap,
	const std::string& Description,
	ns3__BillingPeriodDetailsType *TrialPeriod,
	ns3__BillingPeriodDetailsType *PaymentPeriod,
	int *MaxFailedPayments,
	ns3__ActivationDetailsType *ActivationDetails,
	enum ns3__AutoBillType *AutoBillOutstandingAmount)
{
	ns3__ScheduleDetailsType *_p = soap_new_ns3__ScheduleDetailsType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__ScheduleDetailsType::Description = Description;
		_p->ns3__ScheduleDetailsType::TrialPeriod = TrialPeriod;
		_p->ns3__ScheduleDetailsType::PaymentPeriod = PaymentPeriod;
		_p->ns3__ScheduleDetailsType::MaxFailedPayments = MaxFailedPayments;
		_p->ns3__ScheduleDetailsType::ActivationDetails = ActivationDetails;
		_p->ns3__ScheduleDetailsType::AutoBillOutstandingAmount = AutoBillOutstandingAmount;
	}
	return _p;
}

inline int soap_write_ns3__ScheduleDetailsType(struct soap *soap, ns3__ScheduleDetailsType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:ScheduleDetailsType", p->soap_type() == SOAP_TYPE_ns3__ScheduleDetailsType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__ScheduleDetailsType(struct soap *soap, const char *URL, ns3__ScheduleDetailsType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:ScheduleDetailsType", p->soap_type() == SOAP_TYPE_ns3__ScheduleDetailsType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__ScheduleDetailsType(struct soap *soap, const char *URL, ns3__ScheduleDetailsType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:ScheduleDetailsType", p->soap_type() == SOAP_TYPE_ns3__ScheduleDetailsType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__ScheduleDetailsType * SOAP_FMAC4 soap_get_ns3__ScheduleDetailsType(struct soap*, ns3__ScheduleDetailsType *, const char*, const char*);

inline int soap_read_ns3__ScheduleDetailsType(struct soap *soap, ns3__ScheduleDetailsType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns3__ScheduleDetailsType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__ScheduleDetailsType(struct soap *soap, const char *URL, ns3__ScheduleDetailsType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__ScheduleDetailsType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__ScheduleDetailsType(struct soap *soap, ns3__ScheduleDetailsType *p)
{
	if (soap_read_ns3__ScheduleDetailsType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__BillingPeriodDetailsType_USCOREUpdate_DEFINED
#define SOAP_TYPE_ns3__BillingPeriodDetailsType_USCOREUpdate_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__BillingPeriodDetailsType_USCOREUpdate(struct soap*, const char*, int, const ns3__BillingPeriodDetailsType_USCOREUpdate *, const char*);
SOAP_FMAC3 ns3__BillingPeriodDetailsType_USCOREUpdate * SOAP_FMAC4 soap_in_ns3__BillingPeriodDetailsType_USCOREUpdate(struct soap*, const char*, ns3__BillingPeriodDetailsType_USCOREUpdate *, const char*);
SOAP_FMAC1 ns3__BillingPeriodDetailsType_USCOREUpdate * SOAP_FMAC2 soap_instantiate_ns3__BillingPeriodDetailsType_USCOREUpdate(struct soap*, int, const char*, const char*, size_t*);

inline ns3__BillingPeriodDetailsType_USCOREUpdate * soap_new_ns3__BillingPeriodDetailsType_USCOREUpdate(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__BillingPeriodDetailsType_USCOREUpdate(soap, n, NULL, NULL, NULL);
}

inline ns3__BillingPeriodDetailsType_USCOREUpdate * soap_new_req_ns3__BillingPeriodDetailsType_USCOREUpdate(
	struct soap *soap)
{
	ns3__BillingPeriodDetailsType_USCOREUpdate *_p = soap_new_ns3__BillingPeriodDetailsType_USCOREUpdate(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns3__BillingPeriodDetailsType_USCOREUpdate * soap_new_set_ns3__BillingPeriodDetailsType_USCOREUpdate(
	struct soap *soap,
	enum ns3__BillingPeriodType *BillingPeriod,
	int *BillingFrequency,
	int *TotalBillingCycles,
	ns2__BasicAmountType *Amount,
	ns2__BasicAmountType *ShippingAmount,
	ns2__BasicAmountType *TaxAmount)
{
	ns3__BillingPeriodDetailsType_USCOREUpdate *_p = soap_new_ns3__BillingPeriodDetailsType_USCOREUpdate(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__BillingPeriodDetailsType_USCOREUpdate::BillingPeriod = BillingPeriod;
		_p->ns3__BillingPeriodDetailsType_USCOREUpdate::BillingFrequency = BillingFrequency;
		_p->ns3__BillingPeriodDetailsType_USCOREUpdate::TotalBillingCycles = TotalBillingCycles;
		_p->ns3__BillingPeriodDetailsType_USCOREUpdate::Amount = Amount;
		_p->ns3__BillingPeriodDetailsType_USCOREUpdate::ShippingAmount = ShippingAmount;
		_p->ns3__BillingPeriodDetailsType_USCOREUpdate::TaxAmount = TaxAmount;
	}
	return _p;
}

inline int soap_write_ns3__BillingPeriodDetailsType_USCOREUpdate(struct soap *soap, ns3__BillingPeriodDetailsType_USCOREUpdate const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:BillingPeriodDetailsType_Update", p->soap_type() == SOAP_TYPE_ns3__BillingPeriodDetailsType_USCOREUpdate ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__BillingPeriodDetailsType_USCOREUpdate(struct soap *soap, const char *URL, ns3__BillingPeriodDetailsType_USCOREUpdate const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:BillingPeriodDetailsType_Update", p->soap_type() == SOAP_TYPE_ns3__BillingPeriodDetailsType_USCOREUpdate ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__BillingPeriodDetailsType_USCOREUpdate(struct soap *soap, const char *URL, ns3__BillingPeriodDetailsType_USCOREUpdate const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:BillingPeriodDetailsType_Update", p->soap_type() == SOAP_TYPE_ns3__BillingPeriodDetailsType_USCOREUpdate ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__BillingPeriodDetailsType_USCOREUpdate * SOAP_FMAC4 soap_get_ns3__BillingPeriodDetailsType_USCOREUpdate(struct soap*, ns3__BillingPeriodDetailsType_USCOREUpdate *, const char*, const char*);

inline int soap_read_ns3__BillingPeriodDetailsType_USCOREUpdate(struct soap *soap, ns3__BillingPeriodDetailsType_USCOREUpdate *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns3__BillingPeriodDetailsType_USCOREUpdate(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__BillingPeriodDetailsType_USCOREUpdate(struct soap *soap, const char *URL, ns3__BillingPeriodDetailsType_USCOREUpdate *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__BillingPeriodDetailsType_USCOREUpdate(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__BillingPeriodDetailsType_USCOREUpdate(struct soap *soap, ns3__BillingPeriodDetailsType_USCOREUpdate *p)
{
	if (soap_read_ns3__BillingPeriodDetailsType_USCOREUpdate(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__BillingPeriodDetailsType_DEFINED
#define SOAP_TYPE_ns3__BillingPeriodDetailsType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__BillingPeriodDetailsType(struct soap*, const char*, int, const ns3__BillingPeriodDetailsType *, const char*);
SOAP_FMAC3 ns3__BillingPeriodDetailsType * SOAP_FMAC4 soap_in_ns3__BillingPeriodDetailsType(struct soap*, const char*, ns3__BillingPeriodDetailsType *, const char*);
SOAP_FMAC1 ns3__BillingPeriodDetailsType * SOAP_FMAC2 soap_instantiate_ns3__BillingPeriodDetailsType(struct soap*, int, const char*, const char*, size_t*);

inline ns3__BillingPeriodDetailsType * soap_new_ns3__BillingPeriodDetailsType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__BillingPeriodDetailsType(soap, n, NULL, NULL, NULL);
}

inline ns3__BillingPeriodDetailsType * soap_new_req_ns3__BillingPeriodDetailsType(
	struct soap *soap,
	enum ns3__BillingPeriodType BillingPeriod,
	int BillingFrequency,
	ns2__BasicAmountType *Amount)
{
	ns3__BillingPeriodDetailsType *_p = soap_new_ns3__BillingPeriodDetailsType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__BillingPeriodDetailsType::BillingPeriod = BillingPeriod;
		_p->ns3__BillingPeriodDetailsType::BillingFrequency = BillingFrequency;
		_p->ns3__BillingPeriodDetailsType::Amount = Amount;
	}
	return _p;
}

inline ns3__BillingPeriodDetailsType * soap_new_set_ns3__BillingPeriodDetailsType(
	struct soap *soap,
	enum ns3__BillingPeriodType BillingPeriod,
	int BillingFrequency,
	int *TotalBillingCycles,
	ns2__BasicAmountType *Amount,
	ns2__BasicAmountType *ShippingAmount,
	ns2__BasicAmountType *TaxAmount)
{
	ns3__BillingPeriodDetailsType *_p = soap_new_ns3__BillingPeriodDetailsType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__BillingPeriodDetailsType::BillingPeriod = BillingPeriod;
		_p->ns3__BillingPeriodDetailsType::BillingFrequency = BillingFrequency;
		_p->ns3__BillingPeriodDetailsType::TotalBillingCycles = TotalBillingCycles;
		_p->ns3__BillingPeriodDetailsType::Amount = Amount;
		_p->ns3__BillingPeriodDetailsType::ShippingAmount = ShippingAmount;
		_p->ns3__BillingPeriodDetailsType::TaxAmount = TaxAmount;
	}
	return _p;
}

inline int soap_write_ns3__BillingPeriodDetailsType(struct soap *soap, ns3__BillingPeriodDetailsType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:BillingPeriodDetailsType", p->soap_type() == SOAP_TYPE_ns3__BillingPeriodDetailsType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__BillingPeriodDetailsType(struct soap *soap, const char *URL, ns3__BillingPeriodDetailsType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:BillingPeriodDetailsType", p->soap_type() == SOAP_TYPE_ns3__BillingPeriodDetailsType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__BillingPeriodDetailsType(struct soap *soap, const char *URL, ns3__BillingPeriodDetailsType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:BillingPeriodDetailsType", p->soap_type() == SOAP_TYPE_ns3__BillingPeriodDetailsType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__BillingPeriodDetailsType * SOAP_FMAC4 soap_get_ns3__BillingPeriodDetailsType(struct soap*, ns3__BillingPeriodDetailsType *, const char*, const char*);

inline int soap_read_ns3__BillingPeriodDetailsType(struct soap *soap, ns3__BillingPeriodDetailsType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns3__BillingPeriodDetailsType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__BillingPeriodDetailsType(struct soap *soap, const char *URL, ns3__BillingPeriodDetailsType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__BillingPeriodDetailsType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__BillingPeriodDetailsType(struct soap *soap, ns3__BillingPeriodDetailsType *p)
{
	if (soap_read_ns3__BillingPeriodDetailsType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__ActivationDetailsType_DEFINED
#define SOAP_TYPE_ns3__ActivationDetailsType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__ActivationDetailsType(struct soap*, const char*, int, const ns3__ActivationDetailsType *, const char*);
SOAP_FMAC3 ns3__ActivationDetailsType * SOAP_FMAC4 soap_in_ns3__ActivationDetailsType(struct soap*, const char*, ns3__ActivationDetailsType *, const char*);
SOAP_FMAC1 ns3__ActivationDetailsType * SOAP_FMAC2 soap_instantiate_ns3__ActivationDetailsType(struct soap*, int, const char*, const char*, size_t*);

inline ns3__ActivationDetailsType * soap_new_ns3__ActivationDetailsType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__ActivationDetailsType(soap, n, NULL, NULL, NULL);
}

inline ns3__ActivationDetailsType * soap_new_req_ns3__ActivationDetailsType(
	struct soap *soap,
	ns2__BasicAmountType *InitialAmount)
{
	ns3__ActivationDetailsType *_p = soap_new_ns3__ActivationDetailsType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__ActivationDetailsType::InitialAmount = InitialAmount;
	}
	return _p;
}

inline ns3__ActivationDetailsType * soap_new_set_ns3__ActivationDetailsType(
	struct soap *soap,
	ns2__BasicAmountType *InitialAmount,
	enum ns3__FailedPaymentActionType *FailedInitialAmountAction)
{
	ns3__ActivationDetailsType *_p = soap_new_ns3__ActivationDetailsType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__ActivationDetailsType::InitialAmount = InitialAmount;
		_p->ns3__ActivationDetailsType::FailedInitialAmountAction = FailedInitialAmountAction;
	}
	return _p;
}

inline int soap_write_ns3__ActivationDetailsType(struct soap *soap, ns3__ActivationDetailsType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:ActivationDetailsType", p->soap_type() == SOAP_TYPE_ns3__ActivationDetailsType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__ActivationDetailsType(struct soap *soap, const char *URL, ns3__ActivationDetailsType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:ActivationDetailsType", p->soap_type() == SOAP_TYPE_ns3__ActivationDetailsType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__ActivationDetailsType(struct soap *soap, const char *URL, ns3__ActivationDetailsType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:ActivationDetailsType", p->soap_type() == SOAP_TYPE_ns3__ActivationDetailsType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__ActivationDetailsType * SOAP_FMAC4 soap_get_ns3__ActivationDetailsType(struct soap*, ns3__ActivationDetailsType *, const char*, const char*);

inline int soap_read_ns3__ActivationDetailsType(struct soap *soap, ns3__ActivationDetailsType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns3__ActivationDetailsType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__ActivationDetailsType(struct soap *soap, const char *URL, ns3__ActivationDetailsType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__ActivationDetailsType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__ActivationDetailsType(struct soap *soap, ns3__ActivationDetailsType *p)
{
	if (soap_read_ns3__ActivationDetailsType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__RecurringPaymentsSummaryType_DEFINED
#define SOAP_TYPE_ns3__RecurringPaymentsSummaryType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__RecurringPaymentsSummaryType(struct soap*, const char*, int, const ns3__RecurringPaymentsSummaryType *, const char*);
SOAP_FMAC3 ns3__RecurringPaymentsSummaryType * SOAP_FMAC4 soap_in_ns3__RecurringPaymentsSummaryType(struct soap*, const char*, ns3__RecurringPaymentsSummaryType *, const char*);
SOAP_FMAC1 ns3__RecurringPaymentsSummaryType * SOAP_FMAC2 soap_instantiate_ns3__RecurringPaymentsSummaryType(struct soap*, int, const char*, const char*, size_t*);

inline ns3__RecurringPaymentsSummaryType * soap_new_ns3__RecurringPaymentsSummaryType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__RecurringPaymentsSummaryType(soap, n, NULL, NULL, NULL);
}

inline ns3__RecurringPaymentsSummaryType * soap_new_req_ns3__RecurringPaymentsSummaryType(
	struct soap *soap,
	int NumberCyclesCompleted,
	int NumberCyclesRemaining,
	ns2__BasicAmountType *OutstandingBalance,
	int FailedPaymentCount)
{
	ns3__RecurringPaymentsSummaryType *_p = soap_new_ns3__RecurringPaymentsSummaryType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__RecurringPaymentsSummaryType::NumberCyclesCompleted = NumberCyclesCompleted;
		_p->ns3__RecurringPaymentsSummaryType::NumberCyclesRemaining = NumberCyclesRemaining;
		_p->ns3__RecurringPaymentsSummaryType::OutstandingBalance = OutstandingBalance;
		_p->ns3__RecurringPaymentsSummaryType::FailedPaymentCount = FailedPaymentCount;
	}
	return _p;
}

inline ns3__RecurringPaymentsSummaryType * soap_new_set_ns3__RecurringPaymentsSummaryType(
	struct soap *soap,
	time_t *NextBillingDate,
	int NumberCyclesCompleted,
	int NumberCyclesRemaining,
	ns2__BasicAmountType *OutstandingBalance,
	int FailedPaymentCount,
	time_t *LastPaymentDate,
	ns2__BasicAmountType *LastPaymentAmount)
{
	ns3__RecurringPaymentsSummaryType *_p = soap_new_ns3__RecurringPaymentsSummaryType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__RecurringPaymentsSummaryType::NextBillingDate = NextBillingDate;
		_p->ns3__RecurringPaymentsSummaryType::NumberCyclesCompleted = NumberCyclesCompleted;
		_p->ns3__RecurringPaymentsSummaryType::NumberCyclesRemaining = NumberCyclesRemaining;
		_p->ns3__RecurringPaymentsSummaryType::OutstandingBalance = OutstandingBalance;
		_p->ns3__RecurringPaymentsSummaryType::FailedPaymentCount = FailedPaymentCount;
		_p->ns3__RecurringPaymentsSummaryType::LastPaymentDate = LastPaymentDate;
		_p->ns3__RecurringPaymentsSummaryType::LastPaymentAmount = LastPaymentAmount;
	}
	return _p;
}

inline int soap_write_ns3__RecurringPaymentsSummaryType(struct soap *soap, ns3__RecurringPaymentsSummaryType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:RecurringPaymentsSummaryType", p->soap_type() == SOAP_TYPE_ns3__RecurringPaymentsSummaryType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__RecurringPaymentsSummaryType(struct soap *soap, const char *URL, ns3__RecurringPaymentsSummaryType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:RecurringPaymentsSummaryType", p->soap_type() == SOAP_TYPE_ns3__RecurringPaymentsSummaryType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__RecurringPaymentsSummaryType(struct soap *soap, const char *URL, ns3__RecurringPaymentsSummaryType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:RecurringPaymentsSummaryType", p->soap_type() == SOAP_TYPE_ns3__RecurringPaymentsSummaryType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__RecurringPaymentsSummaryType * SOAP_FMAC4 soap_get_ns3__RecurringPaymentsSummaryType(struct soap*, ns3__RecurringPaymentsSummaryType *, const char*, const char*);

inline int soap_read_ns3__RecurringPaymentsSummaryType(struct soap *soap, ns3__RecurringPaymentsSummaryType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns3__RecurringPaymentsSummaryType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__RecurringPaymentsSummaryType(struct soap *soap, const char *URL, ns3__RecurringPaymentsSummaryType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__RecurringPaymentsSummaryType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__RecurringPaymentsSummaryType(struct soap *soap, ns3__RecurringPaymentsSummaryType *p)
{
	if (soap_read_ns3__RecurringPaymentsSummaryType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__UATPDetailsType_DEFINED
#define SOAP_TYPE_ns3__UATPDetailsType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__UATPDetailsType(struct soap*, const char*, int, const ns3__UATPDetailsType *, const char*);
SOAP_FMAC3 ns3__UATPDetailsType * SOAP_FMAC4 soap_in_ns3__UATPDetailsType(struct soap*, const char*, ns3__UATPDetailsType *, const char*);
SOAP_FMAC1 ns3__UATPDetailsType * SOAP_FMAC2 soap_instantiate_ns3__UATPDetailsType(struct soap*, int, const char*, const char*, size_t*);

inline ns3__UATPDetailsType * soap_new_ns3__UATPDetailsType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__UATPDetailsType(soap, n, NULL, NULL, NULL);
}

inline ns3__UATPDetailsType * soap_new_req_ns3__UATPDetailsType(
	struct soap *soap,
	const std::string& UATPNumber,
	int ExpMonth,
	int ExpYear)
{
	ns3__UATPDetailsType *_p = soap_new_ns3__UATPDetailsType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__UATPDetailsType::UATPNumber = UATPNumber;
		_p->ns3__UATPDetailsType::ExpMonth = ExpMonth;
		_p->ns3__UATPDetailsType::ExpYear = ExpYear;
	}
	return _p;
}

inline ns3__UATPDetailsType * soap_new_set_ns3__UATPDetailsType(
	struct soap *soap,
	const std::string& UATPNumber,
	int ExpMonth,
	int ExpYear)
{
	ns3__UATPDetailsType *_p = soap_new_ns3__UATPDetailsType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__UATPDetailsType::UATPNumber = UATPNumber;
		_p->ns3__UATPDetailsType::ExpMonth = ExpMonth;
		_p->ns3__UATPDetailsType::ExpYear = ExpYear;
	}
	return _p;
}

inline int soap_write_ns3__UATPDetailsType(struct soap *soap, ns3__UATPDetailsType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:UATPDetailsType", p->soap_type() == SOAP_TYPE_ns3__UATPDetailsType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__UATPDetailsType(struct soap *soap, const char *URL, ns3__UATPDetailsType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:UATPDetailsType", p->soap_type() == SOAP_TYPE_ns3__UATPDetailsType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__UATPDetailsType(struct soap *soap, const char *URL, ns3__UATPDetailsType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:UATPDetailsType", p->soap_type() == SOAP_TYPE_ns3__UATPDetailsType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__UATPDetailsType * SOAP_FMAC4 soap_get_ns3__UATPDetailsType(struct soap*, ns3__UATPDetailsType *, const char*, const char*);

inline int soap_read_ns3__UATPDetailsType(struct soap *soap, ns3__UATPDetailsType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns3__UATPDetailsType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__UATPDetailsType(struct soap *soap, const char *URL, ns3__UATPDetailsType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__UATPDetailsType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__UATPDetailsType(struct soap *soap, ns3__UATPDetailsType *p)
{
	if (soap_read_ns3__UATPDetailsType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__SetEbayMobileCheckoutRequestDetailsType_DEFINED
#define SOAP_TYPE_ns3__SetEbayMobileCheckoutRequestDetailsType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__SetEbayMobileCheckoutRequestDetailsType(struct soap*, const char*, int, const ns3__SetEbayMobileCheckoutRequestDetailsType *, const char*);
SOAP_FMAC3 ns3__SetEbayMobileCheckoutRequestDetailsType * SOAP_FMAC4 soap_in_ns3__SetEbayMobileCheckoutRequestDetailsType(struct soap*, const char*, ns3__SetEbayMobileCheckoutRequestDetailsType *, const char*);
SOAP_FMAC1 ns3__SetEbayMobileCheckoutRequestDetailsType * SOAP_FMAC2 soap_instantiate_ns3__SetEbayMobileCheckoutRequestDetailsType(struct soap*, int, const char*, const char*, size_t*);

inline ns3__SetEbayMobileCheckoutRequestDetailsType * soap_new_ns3__SetEbayMobileCheckoutRequestDetailsType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__SetEbayMobileCheckoutRequestDetailsType(soap, n, NULL, NULL, NULL);
}

inline ns3__SetEbayMobileCheckoutRequestDetailsType * soap_new_req_ns3__SetEbayMobileCheckoutRequestDetailsType(
	struct soap *soap,
	enum ns3__EbayCheckoutType CheckoutType,
	const std::string& ItemId,
	const std::string& TransactionId,
	const std::string& SiteId,
	const std::string& BuyerId,
	enum ns3__DyneticClientType ClientType)
{
	ns3__SetEbayMobileCheckoutRequestDetailsType *_p = soap_new_ns3__SetEbayMobileCheckoutRequestDetailsType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__SetEbayMobileCheckoutRequestDetailsType::CheckoutType = CheckoutType;
		_p->ns3__SetEbayMobileCheckoutRequestDetailsType::ItemId = ItemId;
		_p->ns3__SetEbayMobileCheckoutRequestDetailsType::TransactionId = TransactionId;
		_p->ns3__SetEbayMobileCheckoutRequestDetailsType::SiteId = SiteId;
		_p->ns3__SetEbayMobileCheckoutRequestDetailsType::BuyerId = BuyerId;
		_p->ns3__SetEbayMobileCheckoutRequestDetailsType::ClientType = ClientType;
	}
	return _p;
}

inline ns3__SetEbayMobileCheckoutRequestDetailsType * soap_new_set_ns3__SetEbayMobileCheckoutRequestDetailsType(
	struct soap *soap,
	enum ns3__EbayCheckoutType CheckoutType,
	const std::string& ItemId,
	const std::string& TransactionId,
	const std::string& SiteId,
	const std::string& BuyerId,
	enum ns3__DyneticClientType ClientType,
	ns3__PhoneNumberType *BuyerPhone,
	std::string *ReturnURL,
	std::string *CancelURL,
	int *Quantity,
	ns2__BasicAmountType *ItemAmount)
{
	ns3__SetEbayMobileCheckoutRequestDetailsType *_p = soap_new_ns3__SetEbayMobileCheckoutRequestDetailsType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__SetEbayMobileCheckoutRequestDetailsType::CheckoutType = CheckoutType;
		_p->ns3__SetEbayMobileCheckoutRequestDetailsType::ItemId = ItemId;
		_p->ns3__SetEbayMobileCheckoutRequestDetailsType::TransactionId = TransactionId;
		_p->ns3__SetEbayMobileCheckoutRequestDetailsType::SiteId = SiteId;
		_p->ns3__SetEbayMobileCheckoutRequestDetailsType::BuyerId = BuyerId;
		_p->ns3__SetEbayMobileCheckoutRequestDetailsType::ClientType = ClientType;
		_p->ns3__SetEbayMobileCheckoutRequestDetailsType::BuyerPhone = BuyerPhone;
		_p->ns3__SetEbayMobileCheckoutRequestDetailsType::ReturnURL = ReturnURL;
		_p->ns3__SetEbayMobileCheckoutRequestDetailsType::CancelURL = CancelURL;
		_p->ns3__SetEbayMobileCheckoutRequestDetailsType::Quantity = Quantity;
		_p->ns3__SetEbayMobileCheckoutRequestDetailsType::ItemAmount = ItemAmount;
	}
	return _p;
}

inline int soap_write_ns3__SetEbayMobileCheckoutRequestDetailsType(struct soap *soap, ns3__SetEbayMobileCheckoutRequestDetailsType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:SetEbayMobileCheckoutRequestDetailsType", p->soap_type() == SOAP_TYPE_ns3__SetEbayMobileCheckoutRequestDetailsType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__SetEbayMobileCheckoutRequestDetailsType(struct soap *soap, const char *URL, ns3__SetEbayMobileCheckoutRequestDetailsType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:SetEbayMobileCheckoutRequestDetailsType", p->soap_type() == SOAP_TYPE_ns3__SetEbayMobileCheckoutRequestDetailsType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__SetEbayMobileCheckoutRequestDetailsType(struct soap *soap, const char *URL, ns3__SetEbayMobileCheckoutRequestDetailsType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:SetEbayMobileCheckoutRequestDetailsType", p->soap_type() == SOAP_TYPE_ns3__SetEbayMobileCheckoutRequestDetailsType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__SetEbayMobileCheckoutRequestDetailsType * SOAP_FMAC4 soap_get_ns3__SetEbayMobileCheckoutRequestDetailsType(struct soap*, ns3__SetEbayMobileCheckoutRequestDetailsType *, const char*, const char*);

inline int soap_read_ns3__SetEbayMobileCheckoutRequestDetailsType(struct soap *soap, ns3__SetEbayMobileCheckoutRequestDetailsType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns3__SetEbayMobileCheckoutRequestDetailsType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__SetEbayMobileCheckoutRequestDetailsType(struct soap *soap, const char *URL, ns3__SetEbayMobileCheckoutRequestDetailsType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__SetEbayMobileCheckoutRequestDetailsType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__SetEbayMobileCheckoutRequestDetailsType(struct soap *soap, ns3__SetEbayMobileCheckoutRequestDetailsType *p)
{
	if (soap_read_ns3__SetEbayMobileCheckoutRequestDetailsType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__DoMobileCheckoutPaymentResponseDetailsType_DEFINED
#define SOAP_TYPE_ns3__DoMobileCheckoutPaymentResponseDetailsType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__DoMobileCheckoutPaymentResponseDetailsType(struct soap*, const char*, int, const ns3__DoMobileCheckoutPaymentResponseDetailsType *, const char*);
SOAP_FMAC3 ns3__DoMobileCheckoutPaymentResponseDetailsType * SOAP_FMAC4 soap_in_ns3__DoMobileCheckoutPaymentResponseDetailsType(struct soap*, const char*, ns3__DoMobileCheckoutPaymentResponseDetailsType *, const char*);
SOAP_FMAC1 ns3__DoMobileCheckoutPaymentResponseDetailsType * SOAP_FMAC2 soap_instantiate_ns3__DoMobileCheckoutPaymentResponseDetailsType(struct soap*, int, const char*, const char*, size_t*);

inline ns3__DoMobileCheckoutPaymentResponseDetailsType * soap_new_ns3__DoMobileCheckoutPaymentResponseDetailsType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__DoMobileCheckoutPaymentResponseDetailsType(soap, n, NULL, NULL, NULL);
}

inline ns3__DoMobileCheckoutPaymentResponseDetailsType * soap_new_req_ns3__DoMobileCheckoutPaymentResponseDetailsType(
	struct soap *soap,
	ns3__PayerInfoType *PayerInfo,
	ns3__PaymentInfoType *PaymentInfo)
{
	ns3__DoMobileCheckoutPaymentResponseDetailsType *_p = soap_new_ns3__DoMobileCheckoutPaymentResponseDetailsType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__DoMobileCheckoutPaymentResponseDetailsType::PayerInfo = PayerInfo;
		_p->ns3__DoMobileCheckoutPaymentResponseDetailsType::PaymentInfo = PaymentInfo;
	}
	return _p;
}

inline ns3__DoMobileCheckoutPaymentResponseDetailsType * soap_new_set_ns3__DoMobileCheckoutPaymentResponseDetailsType(
	struct soap *soap,
	std::string *Custom,
	std::string *InvoiceID,
	ns3__PayerInfoType *PayerInfo,
	ns3__PaymentInfoType *PaymentInfo)
{
	ns3__DoMobileCheckoutPaymentResponseDetailsType *_p = soap_new_ns3__DoMobileCheckoutPaymentResponseDetailsType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__DoMobileCheckoutPaymentResponseDetailsType::Custom = Custom;
		_p->ns3__DoMobileCheckoutPaymentResponseDetailsType::InvoiceID = InvoiceID;
		_p->ns3__DoMobileCheckoutPaymentResponseDetailsType::PayerInfo = PayerInfo;
		_p->ns3__DoMobileCheckoutPaymentResponseDetailsType::PaymentInfo = PaymentInfo;
	}
	return _p;
}

inline int soap_write_ns3__DoMobileCheckoutPaymentResponseDetailsType(struct soap *soap, ns3__DoMobileCheckoutPaymentResponseDetailsType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:DoMobileCheckoutPaymentResponseDetailsType", p->soap_type() == SOAP_TYPE_ns3__DoMobileCheckoutPaymentResponseDetailsType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__DoMobileCheckoutPaymentResponseDetailsType(struct soap *soap, const char *URL, ns3__DoMobileCheckoutPaymentResponseDetailsType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:DoMobileCheckoutPaymentResponseDetailsType", p->soap_type() == SOAP_TYPE_ns3__DoMobileCheckoutPaymentResponseDetailsType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__DoMobileCheckoutPaymentResponseDetailsType(struct soap *soap, const char *URL, ns3__DoMobileCheckoutPaymentResponseDetailsType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:DoMobileCheckoutPaymentResponseDetailsType", p->soap_type() == SOAP_TYPE_ns3__DoMobileCheckoutPaymentResponseDetailsType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__DoMobileCheckoutPaymentResponseDetailsType * SOAP_FMAC4 soap_get_ns3__DoMobileCheckoutPaymentResponseDetailsType(struct soap*, ns3__DoMobileCheckoutPaymentResponseDetailsType *, const char*, const char*);

inline int soap_read_ns3__DoMobileCheckoutPaymentResponseDetailsType(struct soap *soap, ns3__DoMobileCheckoutPaymentResponseDetailsType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns3__DoMobileCheckoutPaymentResponseDetailsType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__DoMobileCheckoutPaymentResponseDetailsType(struct soap *soap, const char *URL, ns3__DoMobileCheckoutPaymentResponseDetailsType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__DoMobileCheckoutPaymentResponseDetailsType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__DoMobileCheckoutPaymentResponseDetailsType(struct soap *soap, ns3__DoMobileCheckoutPaymentResponseDetailsType *p)
{
	if (soap_read_ns3__DoMobileCheckoutPaymentResponseDetailsType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__SetMobileCheckoutRequestDetailsType_DEFINED
#define SOAP_TYPE_ns3__SetMobileCheckoutRequestDetailsType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__SetMobileCheckoutRequestDetailsType(struct soap*, const char*, int, const ns3__SetMobileCheckoutRequestDetailsType *, const char*);
SOAP_FMAC3 ns3__SetMobileCheckoutRequestDetailsType * SOAP_FMAC4 soap_in_ns3__SetMobileCheckoutRequestDetailsType(struct soap*, const char*, ns3__SetMobileCheckoutRequestDetailsType *, const char*);
SOAP_FMAC1 ns3__SetMobileCheckoutRequestDetailsType * SOAP_FMAC2 soap_instantiate_ns3__SetMobileCheckoutRequestDetailsType(struct soap*, int, const char*, const char*, size_t*);

inline ns3__SetMobileCheckoutRequestDetailsType * soap_new_ns3__SetMobileCheckoutRequestDetailsType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__SetMobileCheckoutRequestDetailsType(soap, n, NULL, NULL, NULL);
}

inline ns3__SetMobileCheckoutRequestDetailsType * soap_new_req_ns3__SetMobileCheckoutRequestDetailsType(
	struct soap *soap,
	ns2__BasicAmountType *ItemAmount,
	const std::string& ItemName,
	const std::string& ReturnURL)
{
	ns3__SetMobileCheckoutRequestDetailsType *_p = soap_new_ns3__SetMobileCheckoutRequestDetailsType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__SetMobileCheckoutRequestDetailsType::ItemAmount = ItemAmount;
		_p->ns3__SetMobileCheckoutRequestDetailsType::ItemName = ItemName;
		_p->ns3__SetMobileCheckoutRequestDetailsType::ReturnURL = ReturnURL;
	}
	return _p;
}

inline ns3__SetMobileCheckoutRequestDetailsType * soap_new_set_ns3__SetMobileCheckoutRequestDetailsType(
	struct soap *soap,
	ns3__PhoneNumberType *BuyerPhone,
	ns2__BasicAmountType *ItemAmount,
	ns2__BasicAmountType *Tax,
	ns2__BasicAmountType *Shipping,
	const std::string& ItemName,
	std::string *ItemNumber,
	std::string *Custom,
	std::string *InvoiceID,
	const std::string& ReturnURL,
	std::string *CancelURL,
	int *AddressDisplayOptions,
	int *SharePhone,
	ns3__AddressType *ShipToAddress,
	std::string *BuyerEmail)
{
	ns3__SetMobileCheckoutRequestDetailsType *_p = soap_new_ns3__SetMobileCheckoutRequestDetailsType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__SetMobileCheckoutRequestDetailsType::BuyerPhone = BuyerPhone;
		_p->ns3__SetMobileCheckoutRequestDetailsType::ItemAmount = ItemAmount;
		_p->ns3__SetMobileCheckoutRequestDetailsType::Tax = Tax;
		_p->ns3__SetMobileCheckoutRequestDetailsType::Shipping = Shipping;
		_p->ns3__SetMobileCheckoutRequestDetailsType::ItemName = ItemName;
		_p->ns3__SetMobileCheckoutRequestDetailsType::ItemNumber = ItemNumber;
		_p->ns3__SetMobileCheckoutRequestDetailsType::Custom = Custom;
		_p->ns3__SetMobileCheckoutRequestDetailsType::InvoiceID = InvoiceID;
		_p->ns3__SetMobileCheckoutRequestDetailsType::ReturnURL = ReturnURL;
		_p->ns3__SetMobileCheckoutRequestDetailsType::CancelURL = CancelURL;
		_p->ns3__SetMobileCheckoutRequestDetailsType::AddressDisplayOptions = AddressDisplayOptions;
		_p->ns3__SetMobileCheckoutRequestDetailsType::SharePhone = SharePhone;
		_p->ns3__SetMobileCheckoutRequestDetailsType::ShipToAddress = ShipToAddress;
		_p->ns3__SetMobileCheckoutRequestDetailsType::BuyerEmail = BuyerEmail;
	}
	return _p;
}

inline int soap_write_ns3__SetMobileCheckoutRequestDetailsType(struct soap *soap, ns3__SetMobileCheckoutRequestDetailsType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:SetMobileCheckoutRequestDetailsType", p->soap_type() == SOAP_TYPE_ns3__SetMobileCheckoutRequestDetailsType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__SetMobileCheckoutRequestDetailsType(struct soap *soap, const char *URL, ns3__SetMobileCheckoutRequestDetailsType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:SetMobileCheckoutRequestDetailsType", p->soap_type() == SOAP_TYPE_ns3__SetMobileCheckoutRequestDetailsType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__SetMobileCheckoutRequestDetailsType(struct soap *soap, const char *URL, ns3__SetMobileCheckoutRequestDetailsType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:SetMobileCheckoutRequestDetailsType", p->soap_type() == SOAP_TYPE_ns3__SetMobileCheckoutRequestDetailsType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__SetMobileCheckoutRequestDetailsType * SOAP_FMAC4 soap_get_ns3__SetMobileCheckoutRequestDetailsType(struct soap*, ns3__SetMobileCheckoutRequestDetailsType *, const char*, const char*);

inline int soap_read_ns3__SetMobileCheckoutRequestDetailsType(struct soap *soap, ns3__SetMobileCheckoutRequestDetailsType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns3__SetMobileCheckoutRequestDetailsType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__SetMobileCheckoutRequestDetailsType(struct soap *soap, const char *URL, ns3__SetMobileCheckoutRequestDetailsType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__SetMobileCheckoutRequestDetailsType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__SetMobileCheckoutRequestDetailsType(struct soap *soap, ns3__SetMobileCheckoutRequestDetailsType *p)
{
	if (soap_read_ns3__SetMobileCheckoutRequestDetailsType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__APICredentialsType_DEFINED
#define SOAP_TYPE_ns3__APICredentialsType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__APICredentialsType(struct soap*, const char*, int, const ns3__APICredentialsType *, const char*);
SOAP_FMAC3 ns3__APICredentialsType * SOAP_FMAC4 soap_in_ns3__APICredentialsType(struct soap*, const char*, ns3__APICredentialsType *, const char*);
SOAP_FMAC1 ns3__APICredentialsType * SOAP_FMAC2 soap_instantiate_ns3__APICredentialsType(struct soap*, int, const char*, const char*, size_t*);

inline ns3__APICredentialsType * soap_new_ns3__APICredentialsType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__APICredentialsType(soap, n, NULL, NULL, NULL);
}

inline ns3__APICredentialsType * soap_new_req_ns3__APICredentialsType(
	struct soap *soap,
	const std::string& Username,
	const std::string& Password,
	enum ns3__APIAuthenticationType Type)
{
	ns3__APICredentialsType *_p = soap_new_ns3__APICredentialsType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__APICredentialsType::Username = Username;
		_p->ns3__APICredentialsType::Password = Password;
		_p->ns3__APICredentialsType::Type = Type;
	}
	return _p;
}

inline ns3__APICredentialsType * soap_new_set_ns3__APICredentialsType(
	struct soap *soap,
	const std::string& Username,
	const std::string& Password,
	std::string *Signature,
	std::string *Certificate,
	enum ns3__APIAuthenticationType Type)
{
	ns3__APICredentialsType *_p = soap_new_ns3__APICredentialsType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__APICredentialsType::Username = Username;
		_p->ns3__APICredentialsType::Password = Password;
		_p->ns3__APICredentialsType::Signature = Signature;
		_p->ns3__APICredentialsType::Certificate = Certificate;
		_p->ns3__APICredentialsType::Type = Type;
	}
	return _p;
}

inline int soap_write_ns3__APICredentialsType(struct soap *soap, ns3__APICredentialsType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:APICredentialsType", p->soap_type() == SOAP_TYPE_ns3__APICredentialsType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__APICredentialsType(struct soap *soap, const char *URL, ns3__APICredentialsType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:APICredentialsType", p->soap_type() == SOAP_TYPE_ns3__APICredentialsType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__APICredentialsType(struct soap *soap, const char *URL, ns3__APICredentialsType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:APICredentialsType", p->soap_type() == SOAP_TYPE_ns3__APICredentialsType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__APICredentialsType * SOAP_FMAC4 soap_get_ns3__APICredentialsType(struct soap*, ns3__APICredentialsType *, const char*, const char*);

inline int soap_read_ns3__APICredentialsType(struct soap *soap, ns3__APICredentialsType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns3__APICredentialsType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__APICredentialsType(struct soap *soap, const char *URL, ns3__APICredentialsType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__APICredentialsType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__APICredentialsType(struct soap *soap, ns3__APICredentialsType *p)
{
	if (soap_read_ns3__APICredentialsType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__GetBoardingDetailsResponseDetailsType_DEFINED
#define SOAP_TYPE_ns3__GetBoardingDetailsResponseDetailsType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__GetBoardingDetailsResponseDetailsType(struct soap*, const char*, int, const ns3__GetBoardingDetailsResponseDetailsType *, const char*);
SOAP_FMAC3 ns3__GetBoardingDetailsResponseDetailsType * SOAP_FMAC4 soap_in_ns3__GetBoardingDetailsResponseDetailsType(struct soap*, const char*, ns3__GetBoardingDetailsResponseDetailsType *, const char*);
SOAP_FMAC1 ns3__GetBoardingDetailsResponseDetailsType * SOAP_FMAC2 soap_instantiate_ns3__GetBoardingDetailsResponseDetailsType(struct soap*, int, const char*, const char*, size_t*);

inline ns3__GetBoardingDetailsResponseDetailsType * soap_new_ns3__GetBoardingDetailsResponseDetailsType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__GetBoardingDetailsResponseDetailsType(soap, n, NULL, NULL, NULL);
}

inline ns3__GetBoardingDetailsResponseDetailsType * soap_new_req_ns3__GetBoardingDetailsResponseDetailsType(
	struct soap *soap,
	enum ns3__BoardingStatusType Status,
	time_t StartDate,
	time_t LastUpdated,
	const std::string& ProgramName,
	const std::string& ProgramCode)
{
	ns3__GetBoardingDetailsResponseDetailsType *_p = soap_new_ns3__GetBoardingDetailsResponseDetailsType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__GetBoardingDetailsResponseDetailsType::Status = Status;
		_p->ns3__GetBoardingDetailsResponseDetailsType::StartDate = StartDate;
		_p->ns3__GetBoardingDetailsResponseDetailsType::LastUpdated = LastUpdated;
		_p->ns3__GetBoardingDetailsResponseDetailsType::ProgramName = ProgramName;
		_p->ns3__GetBoardingDetailsResponseDetailsType::ProgramCode = ProgramCode;
	}
	return _p;
}

inline ns3__GetBoardingDetailsResponseDetailsType * soap_new_set_ns3__GetBoardingDetailsResponseDetailsType(
	struct soap *soap,
	enum ns3__BoardingStatusType Status,
	time_t StartDate,
	time_t LastUpdated,
	std::string *Reason,
	const std::string& ProgramName,
	const std::string& ProgramCode,
	std::string *CampaignID,
	enum ns3__UserWithdrawalLimitTypeType *UserWithdrawalLimit,
	std::string *PartnerCustom,
	ns3__PayerInfoType *AccountOwner,
	ns3__APICredentialsType *Credentials,
	std::string *ConfigureAPIs,
	std::string *EmailVerificationStatus,
	std::string *VettingStatus,
	std::string *BankAccountVerificationStatus)
{
	ns3__GetBoardingDetailsResponseDetailsType *_p = soap_new_ns3__GetBoardingDetailsResponseDetailsType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__GetBoardingDetailsResponseDetailsType::Status = Status;
		_p->ns3__GetBoardingDetailsResponseDetailsType::StartDate = StartDate;
		_p->ns3__GetBoardingDetailsResponseDetailsType::LastUpdated = LastUpdated;
		_p->ns3__GetBoardingDetailsResponseDetailsType::Reason = Reason;
		_p->ns3__GetBoardingDetailsResponseDetailsType::ProgramName = ProgramName;
		_p->ns3__GetBoardingDetailsResponseDetailsType::ProgramCode = ProgramCode;
		_p->ns3__GetBoardingDetailsResponseDetailsType::CampaignID = CampaignID;
		_p->ns3__GetBoardingDetailsResponseDetailsType::UserWithdrawalLimit = UserWithdrawalLimit;
		_p->ns3__GetBoardingDetailsResponseDetailsType::PartnerCustom = PartnerCustom;
		_p->ns3__GetBoardingDetailsResponseDetailsType::AccountOwner = AccountOwner;
		_p->ns3__GetBoardingDetailsResponseDetailsType::Credentials = Credentials;
		_p->ns3__GetBoardingDetailsResponseDetailsType::ConfigureAPIs = ConfigureAPIs;
		_p->ns3__GetBoardingDetailsResponseDetailsType::EmailVerificationStatus = EmailVerificationStatus;
		_p->ns3__GetBoardingDetailsResponseDetailsType::VettingStatus = VettingStatus;
		_p->ns3__GetBoardingDetailsResponseDetailsType::BankAccountVerificationStatus = BankAccountVerificationStatus;
	}
	return _p;
}

inline int soap_write_ns3__GetBoardingDetailsResponseDetailsType(struct soap *soap, ns3__GetBoardingDetailsResponseDetailsType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:GetBoardingDetailsResponseDetailsType", p->soap_type() == SOAP_TYPE_ns3__GetBoardingDetailsResponseDetailsType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__GetBoardingDetailsResponseDetailsType(struct soap *soap, const char *URL, ns3__GetBoardingDetailsResponseDetailsType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:GetBoardingDetailsResponseDetailsType", p->soap_type() == SOAP_TYPE_ns3__GetBoardingDetailsResponseDetailsType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__GetBoardingDetailsResponseDetailsType(struct soap *soap, const char *URL, ns3__GetBoardingDetailsResponseDetailsType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:GetBoardingDetailsResponseDetailsType", p->soap_type() == SOAP_TYPE_ns3__GetBoardingDetailsResponseDetailsType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__GetBoardingDetailsResponseDetailsType * SOAP_FMAC4 soap_get_ns3__GetBoardingDetailsResponseDetailsType(struct soap*, ns3__GetBoardingDetailsResponseDetailsType *, const char*, const char*);

inline int soap_read_ns3__GetBoardingDetailsResponseDetailsType(struct soap *soap, ns3__GetBoardingDetailsResponseDetailsType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns3__GetBoardingDetailsResponseDetailsType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__GetBoardingDetailsResponseDetailsType(struct soap *soap, const char *URL, ns3__GetBoardingDetailsResponseDetailsType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__GetBoardingDetailsResponseDetailsType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__GetBoardingDetailsResponseDetailsType(struct soap *soap, ns3__GetBoardingDetailsResponseDetailsType *p)
{
	if (soap_read_ns3__GetBoardingDetailsResponseDetailsType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__BankAccountDetailsType_DEFINED
#define SOAP_TYPE_ns3__BankAccountDetailsType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__BankAccountDetailsType(struct soap*, const char*, int, const ns3__BankAccountDetailsType *, const char*);
SOAP_FMAC3 ns3__BankAccountDetailsType * SOAP_FMAC4 soap_in_ns3__BankAccountDetailsType(struct soap*, const char*, ns3__BankAccountDetailsType *, const char*);
SOAP_FMAC1 ns3__BankAccountDetailsType * SOAP_FMAC2 soap_instantiate_ns3__BankAccountDetailsType(struct soap*, int, const char*, const char*, size_t*);

inline ns3__BankAccountDetailsType * soap_new_ns3__BankAccountDetailsType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__BankAccountDetailsType(soap, n, NULL, NULL, NULL);
}

inline ns3__BankAccountDetailsType * soap_new_req_ns3__BankAccountDetailsType(
	struct soap *soap,
	const std::string& Name,
	enum ns3__BankAccountTypeType Type,
	const std::string& RoutingNumber,
	const std::string& AccountNumber)
{
	ns3__BankAccountDetailsType *_p = soap_new_ns3__BankAccountDetailsType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__BankAccountDetailsType::Name = Name;
		_p->ns3__BankAccountDetailsType::Type = Type;
		_p->ns3__BankAccountDetailsType::RoutingNumber = RoutingNumber;
		_p->ns3__BankAccountDetailsType::AccountNumber = AccountNumber;
	}
	return _p;
}

inline ns3__BankAccountDetailsType * soap_new_set_ns3__BankAccountDetailsType(
	struct soap *soap,
	const std::string& Name,
	enum ns3__BankAccountTypeType Type,
	const std::string& RoutingNumber,
	const std::string& AccountNumber)
{
	ns3__BankAccountDetailsType *_p = soap_new_ns3__BankAccountDetailsType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__BankAccountDetailsType::Name = Name;
		_p->ns3__BankAccountDetailsType::Type = Type;
		_p->ns3__BankAccountDetailsType::RoutingNumber = RoutingNumber;
		_p->ns3__BankAccountDetailsType::AccountNumber = AccountNumber;
	}
	return _p;
}

inline int soap_write_ns3__BankAccountDetailsType(struct soap *soap, ns3__BankAccountDetailsType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:BankAccountDetailsType", p->soap_type() == SOAP_TYPE_ns3__BankAccountDetailsType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__BankAccountDetailsType(struct soap *soap, const char *URL, ns3__BankAccountDetailsType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:BankAccountDetailsType", p->soap_type() == SOAP_TYPE_ns3__BankAccountDetailsType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__BankAccountDetailsType(struct soap *soap, const char *URL, ns3__BankAccountDetailsType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:BankAccountDetailsType", p->soap_type() == SOAP_TYPE_ns3__BankAccountDetailsType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__BankAccountDetailsType * SOAP_FMAC4 soap_get_ns3__BankAccountDetailsType(struct soap*, ns3__BankAccountDetailsType *, const char*, const char*);

inline int soap_read_ns3__BankAccountDetailsType(struct soap *soap, ns3__BankAccountDetailsType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns3__BankAccountDetailsType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__BankAccountDetailsType(struct soap *soap, const char *URL, ns3__BankAccountDetailsType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__BankAccountDetailsType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__BankAccountDetailsType(struct soap *soap, ns3__BankAccountDetailsType *p)
{
	if (soap_read_ns3__BankAccountDetailsType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__BusinessOwnerInfoType_DEFINED
#define SOAP_TYPE_ns3__BusinessOwnerInfoType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__BusinessOwnerInfoType(struct soap*, const char*, int, const ns3__BusinessOwnerInfoType *, const char*);
SOAP_FMAC3 ns3__BusinessOwnerInfoType * SOAP_FMAC4 soap_in_ns3__BusinessOwnerInfoType(struct soap*, const char*, ns3__BusinessOwnerInfoType *, const char*);
SOAP_FMAC1 ns3__BusinessOwnerInfoType * SOAP_FMAC2 soap_instantiate_ns3__BusinessOwnerInfoType(struct soap*, int, const char*, const char*, size_t*);

inline ns3__BusinessOwnerInfoType * soap_new_ns3__BusinessOwnerInfoType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__BusinessOwnerInfoType(soap, n, NULL, NULL, NULL);
}

inline ns3__BusinessOwnerInfoType * soap_new_req_ns3__BusinessOwnerInfoType(
	struct soap *soap)
{
	ns3__BusinessOwnerInfoType *_p = soap_new_ns3__BusinessOwnerInfoType(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns3__BusinessOwnerInfoType * soap_new_set_ns3__BusinessOwnerInfoType(
	struct soap *soap,
	ns3__PayerInfoType *Owner,
	std::string *HomePhone,
	std::string *MobilePhone,
	std::string *SSN)
{
	ns3__BusinessOwnerInfoType *_p = soap_new_ns3__BusinessOwnerInfoType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__BusinessOwnerInfoType::Owner = Owner;
		_p->ns3__BusinessOwnerInfoType::HomePhone = HomePhone;
		_p->ns3__BusinessOwnerInfoType::MobilePhone = MobilePhone;
		_p->ns3__BusinessOwnerInfoType::SSN = SSN;
	}
	return _p;
}

inline int soap_write_ns3__BusinessOwnerInfoType(struct soap *soap, ns3__BusinessOwnerInfoType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:BusinessOwnerInfoType", p->soap_type() == SOAP_TYPE_ns3__BusinessOwnerInfoType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__BusinessOwnerInfoType(struct soap *soap, const char *URL, ns3__BusinessOwnerInfoType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:BusinessOwnerInfoType", p->soap_type() == SOAP_TYPE_ns3__BusinessOwnerInfoType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__BusinessOwnerInfoType(struct soap *soap, const char *URL, ns3__BusinessOwnerInfoType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:BusinessOwnerInfoType", p->soap_type() == SOAP_TYPE_ns3__BusinessOwnerInfoType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__BusinessOwnerInfoType * SOAP_FMAC4 soap_get_ns3__BusinessOwnerInfoType(struct soap*, ns3__BusinessOwnerInfoType *, const char*, const char*);

inline int soap_read_ns3__BusinessOwnerInfoType(struct soap *soap, ns3__BusinessOwnerInfoType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns3__BusinessOwnerInfoType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__BusinessOwnerInfoType(struct soap *soap, const char *URL, ns3__BusinessOwnerInfoType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__BusinessOwnerInfoType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__BusinessOwnerInfoType(struct soap *soap, ns3__BusinessOwnerInfoType *p)
{
	if (soap_read_ns3__BusinessOwnerInfoType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__BusinessInfoType_DEFINED
#define SOAP_TYPE_ns3__BusinessInfoType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__BusinessInfoType(struct soap*, const char*, int, const ns3__BusinessInfoType *, const char*);
SOAP_FMAC3 ns3__BusinessInfoType * SOAP_FMAC4 soap_in_ns3__BusinessInfoType(struct soap*, const char*, ns3__BusinessInfoType *, const char*);
SOAP_FMAC1 ns3__BusinessInfoType * SOAP_FMAC2 soap_instantiate_ns3__BusinessInfoType(struct soap*, int, const char*, const char*, size_t*);

inline ns3__BusinessInfoType * soap_new_ns3__BusinessInfoType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__BusinessInfoType(soap, n, NULL, NULL, NULL);
}

inline ns3__BusinessInfoType * soap_new_req_ns3__BusinessInfoType(
	struct soap *soap)
{
	ns3__BusinessInfoType *_p = soap_new_ns3__BusinessInfoType(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns3__BusinessInfoType * soap_new_set_ns3__BusinessInfoType(
	struct soap *soap,
	enum ns3__BusinessTypeType *Type,
	std::string *Name,
	ns3__AddressType *Address,
	std::string *WorkPhone,
	enum ns3__BusinessCategoryType *Category,
	enum ns3__BusinessSubCategoryType *SubCategory,
	enum ns3__AverageTransactionPriceType *AveragePrice,
	enum ns3__AverageMonthlyVolumeType *AverageMonthlyVolume,
	enum ns3__SalesVenueType *SalesVenue,
	std::string *Website,
	enum ns3__PercentageRevenueFromOnlineSalesType *RevenueFromOnlineSales,
	time_t *BusinessEstablished,
	std::string *CustomerServiceEmail,
	std::string *CustomerServicePhone)
{
	ns3__BusinessInfoType *_p = soap_new_ns3__BusinessInfoType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__BusinessInfoType::Type = Type;
		_p->ns3__BusinessInfoType::Name = Name;
		_p->ns3__BusinessInfoType::Address = Address;
		_p->ns3__BusinessInfoType::WorkPhone = WorkPhone;
		_p->ns3__BusinessInfoType::Category = Category;
		_p->ns3__BusinessInfoType::SubCategory = SubCategory;
		_p->ns3__BusinessInfoType::AveragePrice = AveragePrice;
		_p->ns3__BusinessInfoType::AverageMonthlyVolume = AverageMonthlyVolume;
		_p->ns3__BusinessInfoType::SalesVenue = SalesVenue;
		_p->ns3__BusinessInfoType::Website = Website;
		_p->ns3__BusinessInfoType::RevenueFromOnlineSales = RevenueFromOnlineSales;
		_p->ns3__BusinessInfoType::BusinessEstablished = BusinessEstablished;
		_p->ns3__BusinessInfoType::CustomerServiceEmail = CustomerServiceEmail;
		_p->ns3__BusinessInfoType::CustomerServicePhone = CustomerServicePhone;
	}
	return _p;
}

inline int soap_write_ns3__BusinessInfoType(struct soap *soap, ns3__BusinessInfoType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:BusinessInfoType", p->soap_type() == SOAP_TYPE_ns3__BusinessInfoType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__BusinessInfoType(struct soap *soap, const char *URL, ns3__BusinessInfoType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:BusinessInfoType", p->soap_type() == SOAP_TYPE_ns3__BusinessInfoType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__BusinessInfoType(struct soap *soap, const char *URL, ns3__BusinessInfoType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:BusinessInfoType", p->soap_type() == SOAP_TYPE_ns3__BusinessInfoType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__BusinessInfoType * SOAP_FMAC4 soap_get_ns3__BusinessInfoType(struct soap*, ns3__BusinessInfoType *, const char*, const char*);

inline int soap_read_ns3__BusinessInfoType(struct soap *soap, ns3__BusinessInfoType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns3__BusinessInfoType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__BusinessInfoType(struct soap *soap, const char *URL, ns3__BusinessInfoType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__BusinessInfoType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__BusinessInfoType(struct soap *soap, ns3__BusinessInfoType *p)
{
	if (soap_read_ns3__BusinessInfoType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__EnterBoardingRequestDetailsType_DEFINED
#define SOAP_TYPE_ns3__EnterBoardingRequestDetailsType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__EnterBoardingRequestDetailsType(struct soap*, const char*, int, const ns3__EnterBoardingRequestDetailsType *, const char*);
SOAP_FMAC3 ns3__EnterBoardingRequestDetailsType * SOAP_FMAC4 soap_in_ns3__EnterBoardingRequestDetailsType(struct soap*, const char*, ns3__EnterBoardingRequestDetailsType *, const char*);
SOAP_FMAC1 ns3__EnterBoardingRequestDetailsType * SOAP_FMAC2 soap_instantiate_ns3__EnterBoardingRequestDetailsType(struct soap*, int, const char*, const char*, size_t*);

inline ns3__EnterBoardingRequestDetailsType * soap_new_ns3__EnterBoardingRequestDetailsType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__EnterBoardingRequestDetailsType(soap, n, NULL, NULL, NULL);
}

inline ns3__EnterBoardingRequestDetailsType * soap_new_req_ns3__EnterBoardingRequestDetailsType(
	struct soap *soap,
	const std::string& ProgramCode,
	const std::string& ProductList)
{
	ns3__EnterBoardingRequestDetailsType *_p = soap_new_ns3__EnterBoardingRequestDetailsType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__EnterBoardingRequestDetailsType::ProgramCode = ProgramCode;
		_p->ns3__EnterBoardingRequestDetailsType::ProductList = ProductList;
	}
	return _p;
}

inline ns3__EnterBoardingRequestDetailsType * soap_new_set_ns3__EnterBoardingRequestDetailsType(
	struct soap *soap,
	const std::string& ProgramCode,
	const std::string& ProductList,
	std::string *PartnerCustom,
	std::string *ImageUrl,
	enum ns3__MarketingCategoryType *MarketingCategory,
	ns3__BusinessInfoType *BusinessInfo,
	ns3__BusinessOwnerInfoType *OwnerInfo,
	ns3__BankAccountDetailsType *BankAccount)
{
	ns3__EnterBoardingRequestDetailsType *_p = soap_new_ns3__EnterBoardingRequestDetailsType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__EnterBoardingRequestDetailsType::ProgramCode = ProgramCode;
		_p->ns3__EnterBoardingRequestDetailsType::ProductList = ProductList;
		_p->ns3__EnterBoardingRequestDetailsType::PartnerCustom = PartnerCustom;
		_p->ns3__EnterBoardingRequestDetailsType::ImageUrl = ImageUrl;
		_p->ns3__EnterBoardingRequestDetailsType::MarketingCategory = MarketingCategory;
		_p->ns3__EnterBoardingRequestDetailsType::BusinessInfo = BusinessInfo;
		_p->ns3__EnterBoardingRequestDetailsType::OwnerInfo = OwnerInfo;
		_p->ns3__EnterBoardingRequestDetailsType::BankAccount = BankAccount;
	}
	return _p;
}

inline int soap_write_ns3__EnterBoardingRequestDetailsType(struct soap *soap, ns3__EnterBoardingRequestDetailsType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:EnterBoardingRequestDetailsType", p->soap_type() == SOAP_TYPE_ns3__EnterBoardingRequestDetailsType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__EnterBoardingRequestDetailsType(struct soap *soap, const char *URL, ns3__EnterBoardingRequestDetailsType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:EnterBoardingRequestDetailsType", p->soap_type() == SOAP_TYPE_ns3__EnterBoardingRequestDetailsType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__EnterBoardingRequestDetailsType(struct soap *soap, const char *URL, ns3__EnterBoardingRequestDetailsType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:EnterBoardingRequestDetailsType", p->soap_type() == SOAP_TYPE_ns3__EnterBoardingRequestDetailsType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__EnterBoardingRequestDetailsType * SOAP_FMAC4 soap_get_ns3__EnterBoardingRequestDetailsType(struct soap*, ns3__EnterBoardingRequestDetailsType *, const char*, const char*);

inline int soap_read_ns3__EnterBoardingRequestDetailsType(struct soap *soap, ns3__EnterBoardingRequestDetailsType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns3__EnterBoardingRequestDetailsType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__EnterBoardingRequestDetailsType(struct soap *soap, const char *URL, ns3__EnterBoardingRequestDetailsType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__EnterBoardingRequestDetailsType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__EnterBoardingRequestDetailsType(struct soap *soap, ns3__EnterBoardingRequestDetailsType *p)
{
	if (soap_read_ns3__EnterBoardingRequestDetailsType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__DoNonReferencedCreditResponseDetailsType_DEFINED
#define SOAP_TYPE_ns3__DoNonReferencedCreditResponseDetailsType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__DoNonReferencedCreditResponseDetailsType(struct soap*, const char*, int, const ns3__DoNonReferencedCreditResponseDetailsType *, const char*);
SOAP_FMAC3 ns3__DoNonReferencedCreditResponseDetailsType * SOAP_FMAC4 soap_in_ns3__DoNonReferencedCreditResponseDetailsType(struct soap*, const char*, ns3__DoNonReferencedCreditResponseDetailsType *, const char*);
SOAP_FMAC1 ns3__DoNonReferencedCreditResponseDetailsType * SOAP_FMAC2 soap_instantiate_ns3__DoNonReferencedCreditResponseDetailsType(struct soap*, int, const char*, const char*, size_t*);

inline ns3__DoNonReferencedCreditResponseDetailsType * soap_new_ns3__DoNonReferencedCreditResponseDetailsType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__DoNonReferencedCreditResponseDetailsType(soap, n, NULL, NULL, NULL);
}

inline ns3__DoNonReferencedCreditResponseDetailsType * soap_new_req_ns3__DoNonReferencedCreditResponseDetailsType(
	struct soap *soap,
	ns2__BasicAmountType *Amount,
	const std::string& TransactionID)
{
	ns3__DoNonReferencedCreditResponseDetailsType *_p = soap_new_ns3__DoNonReferencedCreditResponseDetailsType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__DoNonReferencedCreditResponseDetailsType::Amount = Amount;
		_p->ns3__DoNonReferencedCreditResponseDetailsType::TransactionID = TransactionID;
	}
	return _p;
}

inline ns3__DoNonReferencedCreditResponseDetailsType * soap_new_set_ns3__DoNonReferencedCreditResponseDetailsType(
	struct soap *soap,
	ns2__BasicAmountType *Amount,
	const std::string& TransactionID)
{
	ns3__DoNonReferencedCreditResponseDetailsType *_p = soap_new_ns3__DoNonReferencedCreditResponseDetailsType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__DoNonReferencedCreditResponseDetailsType::Amount = Amount;
		_p->ns3__DoNonReferencedCreditResponseDetailsType::TransactionID = TransactionID;
	}
	return _p;
}

inline int soap_write_ns3__DoNonReferencedCreditResponseDetailsType(struct soap *soap, ns3__DoNonReferencedCreditResponseDetailsType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:DoNonReferencedCreditResponseDetailsType", p->soap_type() == SOAP_TYPE_ns3__DoNonReferencedCreditResponseDetailsType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__DoNonReferencedCreditResponseDetailsType(struct soap *soap, const char *URL, ns3__DoNonReferencedCreditResponseDetailsType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:DoNonReferencedCreditResponseDetailsType", p->soap_type() == SOAP_TYPE_ns3__DoNonReferencedCreditResponseDetailsType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__DoNonReferencedCreditResponseDetailsType(struct soap *soap, const char *URL, ns3__DoNonReferencedCreditResponseDetailsType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:DoNonReferencedCreditResponseDetailsType", p->soap_type() == SOAP_TYPE_ns3__DoNonReferencedCreditResponseDetailsType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__DoNonReferencedCreditResponseDetailsType * SOAP_FMAC4 soap_get_ns3__DoNonReferencedCreditResponseDetailsType(struct soap*, ns3__DoNonReferencedCreditResponseDetailsType *, const char*, const char*);

inline int soap_read_ns3__DoNonReferencedCreditResponseDetailsType(struct soap *soap, ns3__DoNonReferencedCreditResponseDetailsType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns3__DoNonReferencedCreditResponseDetailsType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__DoNonReferencedCreditResponseDetailsType(struct soap *soap, const char *URL, ns3__DoNonReferencedCreditResponseDetailsType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__DoNonReferencedCreditResponseDetailsType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__DoNonReferencedCreditResponseDetailsType(struct soap *soap, ns3__DoNonReferencedCreditResponseDetailsType *p)
{
	if (soap_read_ns3__DoNonReferencedCreditResponseDetailsType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__DoNonReferencedCreditRequestDetailsType_DEFINED
#define SOAP_TYPE_ns3__DoNonReferencedCreditRequestDetailsType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__DoNonReferencedCreditRequestDetailsType(struct soap*, const char*, int, const ns3__DoNonReferencedCreditRequestDetailsType *, const char*);
SOAP_FMAC3 ns3__DoNonReferencedCreditRequestDetailsType * SOAP_FMAC4 soap_in_ns3__DoNonReferencedCreditRequestDetailsType(struct soap*, const char*, ns3__DoNonReferencedCreditRequestDetailsType *, const char*);
SOAP_FMAC1 ns3__DoNonReferencedCreditRequestDetailsType * SOAP_FMAC2 soap_instantiate_ns3__DoNonReferencedCreditRequestDetailsType(struct soap*, int, const char*, const char*, size_t*);

inline ns3__DoNonReferencedCreditRequestDetailsType * soap_new_ns3__DoNonReferencedCreditRequestDetailsType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__DoNonReferencedCreditRequestDetailsType(soap, n, NULL, NULL, NULL);
}

inline ns3__DoNonReferencedCreditRequestDetailsType * soap_new_req_ns3__DoNonReferencedCreditRequestDetailsType(
	struct soap *soap,
	ns2__BasicAmountType *Amount,
	ns3__CreditCardDetailsType *CreditCard)
{
	ns3__DoNonReferencedCreditRequestDetailsType *_p = soap_new_ns3__DoNonReferencedCreditRequestDetailsType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__DoNonReferencedCreditRequestDetailsType::Amount = Amount;
		_p->ns3__DoNonReferencedCreditRequestDetailsType::CreditCard = CreditCard;
	}
	return _p;
}

inline ns3__DoNonReferencedCreditRequestDetailsType * soap_new_set_ns3__DoNonReferencedCreditRequestDetailsType(
	struct soap *soap,
	ns2__BasicAmountType *Amount,
	ns2__BasicAmountType *NetAmount,
	ns2__BasicAmountType *TaxAmount,
	ns2__BasicAmountType *ShippingAmount,
	ns3__CreditCardDetailsType *CreditCard,
	std::string *ReceiverEmail,
	std::string *Comment)
{
	ns3__DoNonReferencedCreditRequestDetailsType *_p = soap_new_ns3__DoNonReferencedCreditRequestDetailsType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__DoNonReferencedCreditRequestDetailsType::Amount = Amount;
		_p->ns3__DoNonReferencedCreditRequestDetailsType::NetAmount = NetAmount;
		_p->ns3__DoNonReferencedCreditRequestDetailsType::TaxAmount = TaxAmount;
		_p->ns3__DoNonReferencedCreditRequestDetailsType::ShippingAmount = ShippingAmount;
		_p->ns3__DoNonReferencedCreditRequestDetailsType::CreditCard = CreditCard;
		_p->ns3__DoNonReferencedCreditRequestDetailsType::ReceiverEmail = ReceiverEmail;
		_p->ns3__DoNonReferencedCreditRequestDetailsType::Comment = Comment;
	}
	return _p;
}

inline int soap_write_ns3__DoNonReferencedCreditRequestDetailsType(struct soap *soap, ns3__DoNonReferencedCreditRequestDetailsType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:DoNonReferencedCreditRequestDetailsType", p->soap_type() == SOAP_TYPE_ns3__DoNonReferencedCreditRequestDetailsType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__DoNonReferencedCreditRequestDetailsType(struct soap *soap, const char *URL, ns3__DoNonReferencedCreditRequestDetailsType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:DoNonReferencedCreditRequestDetailsType", p->soap_type() == SOAP_TYPE_ns3__DoNonReferencedCreditRequestDetailsType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__DoNonReferencedCreditRequestDetailsType(struct soap *soap, const char *URL, ns3__DoNonReferencedCreditRequestDetailsType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:DoNonReferencedCreditRequestDetailsType", p->soap_type() == SOAP_TYPE_ns3__DoNonReferencedCreditRequestDetailsType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__DoNonReferencedCreditRequestDetailsType * SOAP_FMAC4 soap_get_ns3__DoNonReferencedCreditRequestDetailsType(struct soap*, ns3__DoNonReferencedCreditRequestDetailsType *, const char*, const char*);

inline int soap_read_ns3__DoNonReferencedCreditRequestDetailsType(struct soap *soap, ns3__DoNonReferencedCreditRequestDetailsType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns3__DoNonReferencedCreditRequestDetailsType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__DoNonReferencedCreditRequestDetailsType(struct soap *soap, const char *URL, ns3__DoNonReferencedCreditRequestDetailsType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__DoNonReferencedCreditRequestDetailsType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__DoNonReferencedCreditRequestDetailsType(struct soap *soap, ns3__DoNonReferencedCreditRequestDetailsType *p)
{
	if (soap_read_ns3__DoNonReferencedCreditRequestDetailsType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__DoReferenceTransactionResponseDetailsType_DEFINED
#define SOAP_TYPE_ns3__DoReferenceTransactionResponseDetailsType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__DoReferenceTransactionResponseDetailsType(struct soap*, const char*, int, const ns3__DoReferenceTransactionResponseDetailsType *, const char*);
SOAP_FMAC3 ns3__DoReferenceTransactionResponseDetailsType * SOAP_FMAC4 soap_in_ns3__DoReferenceTransactionResponseDetailsType(struct soap*, const char*, ns3__DoReferenceTransactionResponseDetailsType *, const char*);
SOAP_FMAC1 ns3__DoReferenceTransactionResponseDetailsType * SOAP_FMAC2 soap_instantiate_ns3__DoReferenceTransactionResponseDetailsType(struct soap*, int, const char*, const char*, size_t*);

inline ns3__DoReferenceTransactionResponseDetailsType * soap_new_ns3__DoReferenceTransactionResponseDetailsType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__DoReferenceTransactionResponseDetailsType(soap, n, NULL, NULL, NULL);
}

inline ns3__DoReferenceTransactionResponseDetailsType * soap_new_req_ns3__DoReferenceTransactionResponseDetailsType(
	struct soap *soap)
{
	ns3__DoReferenceTransactionResponseDetailsType *_p = soap_new_ns3__DoReferenceTransactionResponseDetailsType(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns3__DoReferenceTransactionResponseDetailsType * soap_new_set_ns3__DoReferenceTransactionResponseDetailsType(
	struct soap *soap,
	std::string *BillingAgreementID,
	ns3__PaymentInfoType *PaymentInfo,
	ns2__BasicAmountType *Amount,
	std::string *AVSCode,
	std::string *CVV2Code,
	std::string *TransactionID,
	std::string *PaymentAdviceCode,
	std::string *MsgSubID,
	std::string *PendingReason)
{
	ns3__DoReferenceTransactionResponseDetailsType *_p = soap_new_ns3__DoReferenceTransactionResponseDetailsType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__DoReferenceTransactionResponseDetailsType::BillingAgreementID = BillingAgreementID;
		_p->ns3__DoReferenceTransactionResponseDetailsType::PaymentInfo = PaymentInfo;
		_p->ns3__DoReferenceTransactionResponseDetailsType::Amount = Amount;
		_p->ns3__DoReferenceTransactionResponseDetailsType::AVSCode = AVSCode;
		_p->ns3__DoReferenceTransactionResponseDetailsType::CVV2Code = CVV2Code;
		_p->ns3__DoReferenceTransactionResponseDetailsType::TransactionID = TransactionID;
		_p->ns3__DoReferenceTransactionResponseDetailsType::PaymentAdviceCode = PaymentAdviceCode;
		_p->ns3__DoReferenceTransactionResponseDetailsType::MsgSubID = MsgSubID;
		_p->ns3__DoReferenceTransactionResponseDetailsType::PendingReason = PendingReason;
	}
	return _p;
}

inline int soap_write_ns3__DoReferenceTransactionResponseDetailsType(struct soap *soap, ns3__DoReferenceTransactionResponseDetailsType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:DoReferenceTransactionResponseDetailsType", p->soap_type() == SOAP_TYPE_ns3__DoReferenceTransactionResponseDetailsType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__DoReferenceTransactionResponseDetailsType(struct soap *soap, const char *URL, ns3__DoReferenceTransactionResponseDetailsType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:DoReferenceTransactionResponseDetailsType", p->soap_type() == SOAP_TYPE_ns3__DoReferenceTransactionResponseDetailsType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__DoReferenceTransactionResponseDetailsType(struct soap *soap, const char *URL, ns3__DoReferenceTransactionResponseDetailsType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:DoReferenceTransactionResponseDetailsType", p->soap_type() == SOAP_TYPE_ns3__DoReferenceTransactionResponseDetailsType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__DoReferenceTransactionResponseDetailsType * SOAP_FMAC4 soap_get_ns3__DoReferenceTransactionResponseDetailsType(struct soap*, ns3__DoReferenceTransactionResponseDetailsType *, const char*, const char*);

inline int soap_read_ns3__DoReferenceTransactionResponseDetailsType(struct soap *soap, ns3__DoReferenceTransactionResponseDetailsType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns3__DoReferenceTransactionResponseDetailsType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__DoReferenceTransactionResponseDetailsType(struct soap *soap, const char *URL, ns3__DoReferenceTransactionResponseDetailsType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__DoReferenceTransactionResponseDetailsType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__DoReferenceTransactionResponseDetailsType(struct soap *soap, ns3__DoReferenceTransactionResponseDetailsType *p)
{
	if (soap_read_ns3__DoReferenceTransactionResponseDetailsType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__DoReferenceTransactionRequestDetailsType_DEFINED
#define SOAP_TYPE_ns3__DoReferenceTransactionRequestDetailsType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__DoReferenceTransactionRequestDetailsType(struct soap*, const char*, int, const ns3__DoReferenceTransactionRequestDetailsType *, const char*);
SOAP_FMAC3 ns3__DoReferenceTransactionRequestDetailsType * SOAP_FMAC4 soap_in_ns3__DoReferenceTransactionRequestDetailsType(struct soap*, const char*, ns3__DoReferenceTransactionRequestDetailsType *, const char*);
SOAP_FMAC1 ns3__DoReferenceTransactionRequestDetailsType * SOAP_FMAC2 soap_instantiate_ns3__DoReferenceTransactionRequestDetailsType(struct soap*, int, const char*, const char*, size_t*);

inline ns3__DoReferenceTransactionRequestDetailsType * soap_new_ns3__DoReferenceTransactionRequestDetailsType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__DoReferenceTransactionRequestDetailsType(soap, n, NULL, NULL, NULL);
}

inline ns3__DoReferenceTransactionRequestDetailsType * soap_new_req_ns3__DoReferenceTransactionRequestDetailsType(
	struct soap *soap,
	const std::string& ReferenceID,
	enum ns3__PaymentActionCodeType PaymentAction,
	ns3__PaymentDetailsType *PaymentDetails)
{
	ns3__DoReferenceTransactionRequestDetailsType *_p = soap_new_ns3__DoReferenceTransactionRequestDetailsType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__DoReferenceTransactionRequestDetailsType::ReferenceID = ReferenceID;
		_p->ns3__DoReferenceTransactionRequestDetailsType::PaymentAction = PaymentAction;
		_p->ns3__DoReferenceTransactionRequestDetailsType::PaymentDetails = PaymentDetails;
	}
	return _p;
}

inline ns3__DoReferenceTransactionRequestDetailsType * soap_new_set_ns3__DoReferenceTransactionRequestDetailsType(
	struct soap *soap,
	const std::string& ReferenceID,
	enum ns3__PaymentActionCodeType PaymentAction,
	enum ns3__MerchantPullPaymentCodeType *PaymentType,
	ns3__PaymentDetailsType *PaymentDetails,
	ns3__ReferenceCreditCardDetailsType *CreditCard,
	std::string *IPAddress,
	std::string *RiskSessionCorrelationID,
	std::string *MerchantSessionId,
	std::string *ReqConfirmShipping,
	std::string *SoftDescriptor,
	std::string *SoftDescriptorCity,
	ns3__SenderDetailsType *SenderDetails,
	std::string *MsgSubID)
{
	ns3__DoReferenceTransactionRequestDetailsType *_p = soap_new_ns3__DoReferenceTransactionRequestDetailsType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__DoReferenceTransactionRequestDetailsType::ReferenceID = ReferenceID;
		_p->ns3__DoReferenceTransactionRequestDetailsType::PaymentAction = PaymentAction;
		_p->ns3__DoReferenceTransactionRequestDetailsType::PaymentType = PaymentType;
		_p->ns3__DoReferenceTransactionRequestDetailsType::PaymentDetails = PaymentDetails;
		_p->ns3__DoReferenceTransactionRequestDetailsType::CreditCard = CreditCard;
		_p->ns3__DoReferenceTransactionRequestDetailsType::IPAddress = IPAddress;
		_p->ns3__DoReferenceTransactionRequestDetailsType::RiskSessionCorrelationID = RiskSessionCorrelationID;
		_p->ns3__DoReferenceTransactionRequestDetailsType::MerchantSessionId = MerchantSessionId;
		_p->ns3__DoReferenceTransactionRequestDetailsType::ReqConfirmShipping = ReqConfirmShipping;
		_p->ns3__DoReferenceTransactionRequestDetailsType::SoftDescriptor = SoftDescriptor;
		_p->ns3__DoReferenceTransactionRequestDetailsType::SoftDescriptorCity = SoftDescriptorCity;
		_p->ns3__DoReferenceTransactionRequestDetailsType::SenderDetails = SenderDetails;
		_p->ns3__DoReferenceTransactionRequestDetailsType::MsgSubID = MsgSubID;
	}
	return _p;
}

inline int soap_write_ns3__DoReferenceTransactionRequestDetailsType(struct soap *soap, ns3__DoReferenceTransactionRequestDetailsType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:DoReferenceTransactionRequestDetailsType", p->soap_type() == SOAP_TYPE_ns3__DoReferenceTransactionRequestDetailsType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__DoReferenceTransactionRequestDetailsType(struct soap *soap, const char *URL, ns3__DoReferenceTransactionRequestDetailsType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:DoReferenceTransactionRequestDetailsType", p->soap_type() == SOAP_TYPE_ns3__DoReferenceTransactionRequestDetailsType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__DoReferenceTransactionRequestDetailsType(struct soap *soap, const char *URL, ns3__DoReferenceTransactionRequestDetailsType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:DoReferenceTransactionRequestDetailsType", p->soap_type() == SOAP_TYPE_ns3__DoReferenceTransactionRequestDetailsType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__DoReferenceTransactionRequestDetailsType * SOAP_FMAC4 soap_get_ns3__DoReferenceTransactionRequestDetailsType(struct soap*, ns3__DoReferenceTransactionRequestDetailsType *, const char*, const char*);

inline int soap_read_ns3__DoReferenceTransactionRequestDetailsType(struct soap *soap, ns3__DoReferenceTransactionRequestDetailsType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns3__DoReferenceTransactionRequestDetailsType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__DoReferenceTransactionRequestDetailsType(struct soap *soap, const char *URL, ns3__DoReferenceTransactionRequestDetailsType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__DoReferenceTransactionRequestDetailsType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__DoReferenceTransactionRequestDetailsType(struct soap *soap, ns3__DoReferenceTransactionRequestDetailsType *p)
{
	if (soap_read_ns3__DoReferenceTransactionRequestDetailsType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__SenderDetailsType_DEFINED
#define SOAP_TYPE_ns3__SenderDetailsType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__SenderDetailsType(struct soap*, const char*, int, const ns3__SenderDetailsType *, const char*);
SOAP_FMAC3 ns3__SenderDetailsType * SOAP_FMAC4 soap_in_ns3__SenderDetailsType(struct soap*, const char*, ns3__SenderDetailsType *, const char*);
SOAP_FMAC1 ns3__SenderDetailsType * SOAP_FMAC2 soap_instantiate_ns3__SenderDetailsType(struct soap*, int, const char*, const char*, size_t*);

inline ns3__SenderDetailsType * soap_new_ns3__SenderDetailsType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__SenderDetailsType(soap, n, NULL, NULL, NULL);
}

inline ns3__SenderDetailsType * soap_new_req_ns3__SenderDetailsType(
	struct soap *soap)
{
	ns3__SenderDetailsType *_p = soap_new_ns3__SenderDetailsType(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns3__SenderDetailsType * soap_new_set_ns3__SenderDetailsType(
	struct soap *soap,
	ns3__DeviceDetailsType *DeviceDetails)
{
	ns3__SenderDetailsType *_p = soap_new_ns3__SenderDetailsType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__SenderDetailsType::DeviceDetails = DeviceDetails;
	}
	return _p;
}

inline int soap_write_ns3__SenderDetailsType(struct soap *soap, ns3__SenderDetailsType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:SenderDetailsType", p->soap_type() == SOAP_TYPE_ns3__SenderDetailsType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__SenderDetailsType(struct soap *soap, const char *URL, ns3__SenderDetailsType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:SenderDetailsType", p->soap_type() == SOAP_TYPE_ns3__SenderDetailsType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__SenderDetailsType(struct soap *soap, const char *URL, ns3__SenderDetailsType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:SenderDetailsType", p->soap_type() == SOAP_TYPE_ns3__SenderDetailsType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__SenderDetailsType * SOAP_FMAC4 soap_get_ns3__SenderDetailsType(struct soap*, ns3__SenderDetailsType *, const char*, const char*);

inline int soap_read_ns3__SenderDetailsType(struct soap *soap, ns3__SenderDetailsType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns3__SenderDetailsType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__SenderDetailsType(struct soap *soap, const char *URL, ns3__SenderDetailsType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__SenderDetailsType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__SenderDetailsType(struct soap *soap, ns3__SenderDetailsType *p)
{
	if (soap_read_ns3__SenderDetailsType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__DeviceDetailsType_DEFINED
#define SOAP_TYPE_ns3__DeviceDetailsType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__DeviceDetailsType(struct soap*, const char*, int, const ns3__DeviceDetailsType *, const char*);
SOAP_FMAC3 ns3__DeviceDetailsType * SOAP_FMAC4 soap_in_ns3__DeviceDetailsType(struct soap*, const char*, ns3__DeviceDetailsType *, const char*);
SOAP_FMAC1 ns3__DeviceDetailsType * SOAP_FMAC2 soap_instantiate_ns3__DeviceDetailsType(struct soap*, int, const char*, const char*, size_t*);

inline ns3__DeviceDetailsType * soap_new_ns3__DeviceDetailsType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__DeviceDetailsType(soap, n, NULL, NULL, NULL);
}

inline ns3__DeviceDetailsType * soap_new_req_ns3__DeviceDetailsType(
	struct soap *soap)
{
	ns3__DeviceDetailsType *_p = soap_new_ns3__DeviceDetailsType(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns3__DeviceDetailsType * soap_new_set_ns3__DeviceDetailsType(
	struct soap *soap,
	std::string *DeviceID)
{
	ns3__DeviceDetailsType *_p = soap_new_ns3__DeviceDetailsType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__DeviceDetailsType::DeviceID = DeviceID;
	}
	return _p;
}

inline int soap_write_ns3__DeviceDetailsType(struct soap *soap, ns3__DeviceDetailsType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:DeviceDetailsType", p->soap_type() == SOAP_TYPE_ns3__DeviceDetailsType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__DeviceDetailsType(struct soap *soap, const char *URL, ns3__DeviceDetailsType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:DeviceDetailsType", p->soap_type() == SOAP_TYPE_ns3__DeviceDetailsType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__DeviceDetailsType(struct soap *soap, const char *URL, ns3__DeviceDetailsType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:DeviceDetailsType", p->soap_type() == SOAP_TYPE_ns3__DeviceDetailsType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__DeviceDetailsType * SOAP_FMAC4 soap_get_ns3__DeviceDetailsType(struct soap*, ns3__DeviceDetailsType *, const char*, const char*);

inline int soap_read_ns3__DeviceDetailsType(struct soap *soap, ns3__DeviceDetailsType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns3__DeviceDetailsType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__DeviceDetailsType(struct soap *soap, const char *URL, ns3__DeviceDetailsType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__DeviceDetailsType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__DeviceDetailsType(struct soap *soap, ns3__DeviceDetailsType *p)
{
	if (soap_read_ns3__DeviceDetailsType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__GetBillingAgreementCustomerDetailsResponseDetailsType_DEFINED
#define SOAP_TYPE_ns3__GetBillingAgreementCustomerDetailsResponseDetailsType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__GetBillingAgreementCustomerDetailsResponseDetailsType(struct soap*, const char*, int, const ns3__GetBillingAgreementCustomerDetailsResponseDetailsType *, const char*);
SOAP_FMAC3 ns3__GetBillingAgreementCustomerDetailsResponseDetailsType * SOAP_FMAC4 soap_in_ns3__GetBillingAgreementCustomerDetailsResponseDetailsType(struct soap*, const char*, ns3__GetBillingAgreementCustomerDetailsResponseDetailsType *, const char*);
SOAP_FMAC1 ns3__GetBillingAgreementCustomerDetailsResponseDetailsType * SOAP_FMAC2 soap_instantiate_ns3__GetBillingAgreementCustomerDetailsResponseDetailsType(struct soap*, int, const char*, const char*, size_t*);

inline ns3__GetBillingAgreementCustomerDetailsResponseDetailsType * soap_new_ns3__GetBillingAgreementCustomerDetailsResponseDetailsType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__GetBillingAgreementCustomerDetailsResponseDetailsType(soap, n, NULL, NULL, NULL);
}

inline ns3__GetBillingAgreementCustomerDetailsResponseDetailsType * soap_new_req_ns3__GetBillingAgreementCustomerDetailsResponseDetailsType(
	struct soap *soap,
	ns3__PayerInfoType *PayerInfo)
{
	ns3__GetBillingAgreementCustomerDetailsResponseDetailsType *_p = soap_new_ns3__GetBillingAgreementCustomerDetailsResponseDetailsType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__GetBillingAgreementCustomerDetailsResponseDetailsType::PayerInfo = PayerInfo;
	}
	return _p;
}

inline ns3__GetBillingAgreementCustomerDetailsResponseDetailsType * soap_new_set_ns3__GetBillingAgreementCustomerDetailsResponseDetailsType(
	struct soap *soap,
	ns3__PayerInfoType *PayerInfo,
	ns3__AddressType *BillingAddress)
{
	ns3__GetBillingAgreementCustomerDetailsResponseDetailsType *_p = soap_new_ns3__GetBillingAgreementCustomerDetailsResponseDetailsType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__GetBillingAgreementCustomerDetailsResponseDetailsType::PayerInfo = PayerInfo;
		_p->ns3__GetBillingAgreementCustomerDetailsResponseDetailsType::BillingAddress = BillingAddress;
	}
	return _p;
}

inline int soap_write_ns3__GetBillingAgreementCustomerDetailsResponseDetailsType(struct soap *soap, ns3__GetBillingAgreementCustomerDetailsResponseDetailsType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:GetBillingAgreementCustomerDetailsResponseDetailsType", p->soap_type() == SOAP_TYPE_ns3__GetBillingAgreementCustomerDetailsResponseDetailsType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__GetBillingAgreementCustomerDetailsResponseDetailsType(struct soap *soap, const char *URL, ns3__GetBillingAgreementCustomerDetailsResponseDetailsType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:GetBillingAgreementCustomerDetailsResponseDetailsType", p->soap_type() == SOAP_TYPE_ns3__GetBillingAgreementCustomerDetailsResponseDetailsType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__GetBillingAgreementCustomerDetailsResponseDetailsType(struct soap *soap, const char *URL, ns3__GetBillingAgreementCustomerDetailsResponseDetailsType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:GetBillingAgreementCustomerDetailsResponseDetailsType", p->soap_type() == SOAP_TYPE_ns3__GetBillingAgreementCustomerDetailsResponseDetailsType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__GetBillingAgreementCustomerDetailsResponseDetailsType * SOAP_FMAC4 soap_get_ns3__GetBillingAgreementCustomerDetailsResponseDetailsType(struct soap*, ns3__GetBillingAgreementCustomerDetailsResponseDetailsType *, const char*, const char*);

inline int soap_read_ns3__GetBillingAgreementCustomerDetailsResponseDetailsType(struct soap *soap, ns3__GetBillingAgreementCustomerDetailsResponseDetailsType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns3__GetBillingAgreementCustomerDetailsResponseDetailsType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__GetBillingAgreementCustomerDetailsResponseDetailsType(struct soap *soap, const char *URL, ns3__GetBillingAgreementCustomerDetailsResponseDetailsType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__GetBillingAgreementCustomerDetailsResponseDetailsType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__GetBillingAgreementCustomerDetailsResponseDetailsType(struct soap *soap, ns3__GetBillingAgreementCustomerDetailsResponseDetailsType *p)
{
	if (soap_read_ns3__GetBillingAgreementCustomerDetailsResponseDetailsType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__SetCustomerBillingAgreementRequestDetailsType_DEFINED
#define SOAP_TYPE_ns3__SetCustomerBillingAgreementRequestDetailsType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__SetCustomerBillingAgreementRequestDetailsType(struct soap*, const char*, int, const ns3__SetCustomerBillingAgreementRequestDetailsType *, const char*);
SOAP_FMAC3 ns3__SetCustomerBillingAgreementRequestDetailsType * SOAP_FMAC4 soap_in_ns3__SetCustomerBillingAgreementRequestDetailsType(struct soap*, const char*, ns3__SetCustomerBillingAgreementRequestDetailsType *, const char*);
SOAP_FMAC1 ns3__SetCustomerBillingAgreementRequestDetailsType * SOAP_FMAC2 soap_instantiate_ns3__SetCustomerBillingAgreementRequestDetailsType(struct soap*, int, const char*, const char*, size_t*);

inline ns3__SetCustomerBillingAgreementRequestDetailsType * soap_new_ns3__SetCustomerBillingAgreementRequestDetailsType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__SetCustomerBillingAgreementRequestDetailsType(soap, n, NULL, NULL, NULL);
}

inline ns3__SetCustomerBillingAgreementRequestDetailsType * soap_new_req_ns3__SetCustomerBillingAgreementRequestDetailsType(
	struct soap *soap,
	ns3__BillingAgreementDetailsType *BillingAgreementDetails,
	const std::string& ReturnURL,
	const std::string& CancelURL)
{
	ns3__SetCustomerBillingAgreementRequestDetailsType *_p = soap_new_ns3__SetCustomerBillingAgreementRequestDetailsType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__SetCustomerBillingAgreementRequestDetailsType::BillingAgreementDetails = BillingAgreementDetails;
		_p->ns3__SetCustomerBillingAgreementRequestDetailsType::ReturnURL = ReturnURL;
		_p->ns3__SetCustomerBillingAgreementRequestDetailsType::CancelURL = CancelURL;
	}
	return _p;
}

inline ns3__SetCustomerBillingAgreementRequestDetailsType * soap_new_set_ns3__SetCustomerBillingAgreementRequestDetailsType(
	struct soap *soap,
	ns3__BillingAgreementDetailsType *BillingAgreementDetails,
	const std::string& ReturnURL,
	const std::string& CancelURL,
	std::string *LocaleCode,
	std::string *PageStyle,
	std::string *cpp_header_image,
	std::string *cpp_header_border_color,
	std::string *cpp_header_back_color,
	std::string *cpp_payflow_color,
	std::string *BuyerEmail,
	std::string *ReqBillingAddress)
{
	ns3__SetCustomerBillingAgreementRequestDetailsType *_p = soap_new_ns3__SetCustomerBillingAgreementRequestDetailsType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__SetCustomerBillingAgreementRequestDetailsType::BillingAgreementDetails = BillingAgreementDetails;
		_p->ns3__SetCustomerBillingAgreementRequestDetailsType::ReturnURL = ReturnURL;
		_p->ns3__SetCustomerBillingAgreementRequestDetailsType::CancelURL = CancelURL;
		_p->ns3__SetCustomerBillingAgreementRequestDetailsType::LocaleCode = LocaleCode;
		_p->ns3__SetCustomerBillingAgreementRequestDetailsType::PageStyle = PageStyle;
		_p->ns3__SetCustomerBillingAgreementRequestDetailsType::cpp_header_image = cpp_header_image;
		_p->ns3__SetCustomerBillingAgreementRequestDetailsType::cpp_header_border_color = cpp_header_border_color;
		_p->ns3__SetCustomerBillingAgreementRequestDetailsType::cpp_header_back_color = cpp_header_back_color;
		_p->ns3__SetCustomerBillingAgreementRequestDetailsType::cpp_payflow_color = cpp_payflow_color;
		_p->ns3__SetCustomerBillingAgreementRequestDetailsType::BuyerEmail = BuyerEmail;
		_p->ns3__SetCustomerBillingAgreementRequestDetailsType::ReqBillingAddress = ReqBillingAddress;
	}
	return _p;
}

inline int soap_write_ns3__SetCustomerBillingAgreementRequestDetailsType(struct soap *soap, ns3__SetCustomerBillingAgreementRequestDetailsType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:SetCustomerBillingAgreementRequestDetailsType", p->soap_type() == SOAP_TYPE_ns3__SetCustomerBillingAgreementRequestDetailsType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__SetCustomerBillingAgreementRequestDetailsType(struct soap *soap, const char *URL, ns3__SetCustomerBillingAgreementRequestDetailsType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:SetCustomerBillingAgreementRequestDetailsType", p->soap_type() == SOAP_TYPE_ns3__SetCustomerBillingAgreementRequestDetailsType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__SetCustomerBillingAgreementRequestDetailsType(struct soap *soap, const char *URL, ns3__SetCustomerBillingAgreementRequestDetailsType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:SetCustomerBillingAgreementRequestDetailsType", p->soap_type() == SOAP_TYPE_ns3__SetCustomerBillingAgreementRequestDetailsType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__SetCustomerBillingAgreementRequestDetailsType * SOAP_FMAC4 soap_get_ns3__SetCustomerBillingAgreementRequestDetailsType(struct soap*, ns3__SetCustomerBillingAgreementRequestDetailsType *, const char*, const char*);

inline int soap_read_ns3__SetCustomerBillingAgreementRequestDetailsType(struct soap *soap, ns3__SetCustomerBillingAgreementRequestDetailsType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns3__SetCustomerBillingAgreementRequestDetailsType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__SetCustomerBillingAgreementRequestDetailsType(struct soap *soap, const char *URL, ns3__SetCustomerBillingAgreementRequestDetailsType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__SetCustomerBillingAgreementRequestDetailsType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__SetCustomerBillingAgreementRequestDetailsType(struct soap *soap, ns3__SetCustomerBillingAgreementRequestDetailsType *p)
{
	if (soap_read_ns3__SetCustomerBillingAgreementRequestDetailsType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__UserIdPasswordType_DEFINED
#define SOAP_TYPE_ns3__UserIdPasswordType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__UserIdPasswordType(struct soap*, const char*, int, const ns3__UserIdPasswordType *, const char*);
SOAP_FMAC3 ns3__UserIdPasswordType * SOAP_FMAC4 soap_in_ns3__UserIdPasswordType(struct soap*, const char*, ns3__UserIdPasswordType *, const char*);
SOAP_FMAC1 ns3__UserIdPasswordType * SOAP_FMAC2 soap_instantiate_ns3__UserIdPasswordType(struct soap*, int, const char*, const char*, size_t*);

inline ns3__UserIdPasswordType * soap_new_ns3__UserIdPasswordType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__UserIdPasswordType(soap, n, NULL, NULL, NULL);
}

inline ns3__UserIdPasswordType * soap_new_req_ns3__UserIdPasswordType(
	struct soap *soap,
	const std::string& Username,
	const std::string& Password)
{
	ns3__UserIdPasswordType *_p = soap_new_ns3__UserIdPasswordType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__UserIdPasswordType::Username = Username;
		_p->ns3__UserIdPasswordType::Password = Password;
	}
	return _p;
}

inline ns3__UserIdPasswordType * soap_new_set_ns3__UserIdPasswordType(
	struct soap *soap,
	std::string *AppId,
	std::string *DevId,
	std::string *AuthCert,
	const std::string& Username,
	const std::string& Password,
	std::string *Signature,
	std::string *Subject,
	std::string *AuthToken)
{
	ns3__UserIdPasswordType *_p = soap_new_ns3__UserIdPasswordType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__UserIdPasswordType::AppId = AppId;
		_p->ns3__UserIdPasswordType::DevId = DevId;
		_p->ns3__UserIdPasswordType::AuthCert = AuthCert;
		_p->ns3__UserIdPasswordType::Username = Username;
		_p->ns3__UserIdPasswordType::Password = Password;
		_p->ns3__UserIdPasswordType::Signature = Signature;
		_p->ns3__UserIdPasswordType::Subject = Subject;
		_p->ns3__UserIdPasswordType::AuthToken = AuthToken;
	}
	return _p;
}

inline int soap_write_ns3__UserIdPasswordType(struct soap *soap, ns3__UserIdPasswordType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:UserIdPasswordType", p->soap_type() == SOAP_TYPE_ns3__UserIdPasswordType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__UserIdPasswordType(struct soap *soap, const char *URL, ns3__UserIdPasswordType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:UserIdPasswordType", p->soap_type() == SOAP_TYPE_ns3__UserIdPasswordType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__UserIdPasswordType(struct soap *soap, const char *URL, ns3__UserIdPasswordType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:UserIdPasswordType", p->soap_type() == SOAP_TYPE_ns3__UserIdPasswordType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__UserIdPasswordType * SOAP_FMAC4 soap_get_ns3__UserIdPasswordType(struct soap*, ns3__UserIdPasswordType *, const char*, const char*);

inline int soap_read_ns3__UserIdPasswordType(struct soap *soap, ns3__UserIdPasswordType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns3__UserIdPasswordType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__UserIdPasswordType(struct soap *soap, const char *URL, ns3__UserIdPasswordType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__UserIdPasswordType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__UserIdPasswordType(struct soap *soap, ns3__UserIdPasswordType *p)
{
	if (soap_read_ns3__UserIdPasswordType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__CustomSecurityHeaderType_DEFINED
#define SOAP_TYPE_ns3__CustomSecurityHeaderType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__CustomSecurityHeaderType(struct soap*, const char*, int, const ns3__CustomSecurityHeaderType *, const char*);
SOAP_FMAC3 ns3__CustomSecurityHeaderType * SOAP_FMAC4 soap_in_ns3__CustomSecurityHeaderType(struct soap*, const char*, ns3__CustomSecurityHeaderType *, const char*);
SOAP_FMAC1 ns3__CustomSecurityHeaderType * SOAP_FMAC2 soap_instantiate_ns3__CustomSecurityHeaderType(struct soap*, int, const char*, const char*, size_t*);

inline ns3__CustomSecurityHeaderType * soap_new_ns3__CustomSecurityHeaderType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__CustomSecurityHeaderType(soap, n, NULL, NULL, NULL);
}

inline ns3__CustomSecurityHeaderType * soap_new_req_ns3__CustomSecurityHeaderType(
	struct soap *soap)
{
	ns3__CustomSecurityHeaderType *_p = soap_new_ns3__CustomSecurityHeaderType(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns3__CustomSecurityHeaderType * soap_new_set_ns3__CustomSecurityHeaderType(
	struct soap *soap,
	std::string *eBayAuthToken,
	std::string *HardExpirationWarning,
	ns3__UserIdPasswordType *Credentials)
{
	ns3__CustomSecurityHeaderType *_p = soap_new_ns3__CustomSecurityHeaderType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__CustomSecurityHeaderType::eBayAuthToken = eBayAuthToken;
		_p->ns3__CustomSecurityHeaderType::HardExpirationWarning = HardExpirationWarning;
		_p->ns3__CustomSecurityHeaderType::Credentials = Credentials;
	}
	return _p;
}

inline int soap_write_ns3__CustomSecurityHeaderType(struct soap *soap, ns3__CustomSecurityHeaderType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:CustomSecurityHeaderType", p->soap_type() == SOAP_TYPE_ns3__CustomSecurityHeaderType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__CustomSecurityHeaderType(struct soap *soap, const char *URL, ns3__CustomSecurityHeaderType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:CustomSecurityHeaderType", p->soap_type() == SOAP_TYPE_ns3__CustomSecurityHeaderType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__CustomSecurityHeaderType(struct soap *soap, const char *URL, ns3__CustomSecurityHeaderType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:CustomSecurityHeaderType", p->soap_type() == SOAP_TYPE_ns3__CustomSecurityHeaderType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__CustomSecurityHeaderType * SOAP_FMAC4 soap_get_ns3__CustomSecurityHeaderType(struct soap*, ns3__CustomSecurityHeaderType *, const char*, const char*);

inline int soap_read_ns3__CustomSecurityHeaderType(struct soap *soap, ns3__CustomSecurityHeaderType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns3__CustomSecurityHeaderType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__CustomSecurityHeaderType(struct soap *soap, const char *URL, ns3__CustomSecurityHeaderType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__CustomSecurityHeaderType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__CustomSecurityHeaderType(struct soap *soap, ns3__CustomSecurityHeaderType *p)
{
	if (soap_read_ns3__CustomSecurityHeaderType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__ReferenceCreditCardDetailsType_DEFINED
#define SOAP_TYPE_ns3__ReferenceCreditCardDetailsType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__ReferenceCreditCardDetailsType(struct soap*, const char*, int, const ns3__ReferenceCreditCardDetailsType *, const char*);
SOAP_FMAC3 ns3__ReferenceCreditCardDetailsType * SOAP_FMAC4 soap_in_ns3__ReferenceCreditCardDetailsType(struct soap*, const char*, ns3__ReferenceCreditCardDetailsType *, const char*);
SOAP_FMAC1 ns3__ReferenceCreditCardDetailsType * SOAP_FMAC2 soap_instantiate_ns3__ReferenceCreditCardDetailsType(struct soap*, int, const char*, const char*, size_t*);

inline ns3__ReferenceCreditCardDetailsType * soap_new_ns3__ReferenceCreditCardDetailsType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__ReferenceCreditCardDetailsType(soap, n, NULL, NULL, NULL);
}

inline ns3__ReferenceCreditCardDetailsType * soap_new_req_ns3__ReferenceCreditCardDetailsType(
	struct soap *soap)
{
	ns3__ReferenceCreditCardDetailsType *_p = soap_new_ns3__ReferenceCreditCardDetailsType(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns3__ReferenceCreditCardDetailsType * soap_new_set_ns3__ReferenceCreditCardDetailsType(
	struct soap *soap,
	ns3__CreditCardNumberTypeType *CreditCardNumberType,
	int *ExpMonth,
	int *ExpYear,
	ns3__PersonNameType *CardOwnerName,
	ns3__AddressType *BillingAddress,
	std::string *CVV2,
	int *StartMonth,
	int *StartYear,
	std::string *IssueNumber)
{
	ns3__ReferenceCreditCardDetailsType *_p = soap_new_ns3__ReferenceCreditCardDetailsType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__ReferenceCreditCardDetailsType::CreditCardNumberType = CreditCardNumberType;
		_p->ns3__ReferenceCreditCardDetailsType::ExpMonth = ExpMonth;
		_p->ns3__ReferenceCreditCardDetailsType::ExpYear = ExpYear;
		_p->ns3__ReferenceCreditCardDetailsType::CardOwnerName = CardOwnerName;
		_p->ns3__ReferenceCreditCardDetailsType::BillingAddress = BillingAddress;
		_p->ns3__ReferenceCreditCardDetailsType::CVV2 = CVV2;
		_p->ns3__ReferenceCreditCardDetailsType::StartMonth = StartMonth;
		_p->ns3__ReferenceCreditCardDetailsType::StartYear = StartYear;
		_p->ns3__ReferenceCreditCardDetailsType::IssueNumber = IssueNumber;
	}
	return _p;
}

inline int soap_write_ns3__ReferenceCreditCardDetailsType(struct soap *soap, ns3__ReferenceCreditCardDetailsType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:ReferenceCreditCardDetailsType", p->soap_type() == SOAP_TYPE_ns3__ReferenceCreditCardDetailsType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__ReferenceCreditCardDetailsType(struct soap *soap, const char *URL, ns3__ReferenceCreditCardDetailsType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:ReferenceCreditCardDetailsType", p->soap_type() == SOAP_TYPE_ns3__ReferenceCreditCardDetailsType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__ReferenceCreditCardDetailsType(struct soap *soap, const char *URL, ns3__ReferenceCreditCardDetailsType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:ReferenceCreditCardDetailsType", p->soap_type() == SOAP_TYPE_ns3__ReferenceCreditCardDetailsType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__ReferenceCreditCardDetailsType * SOAP_FMAC4 soap_get_ns3__ReferenceCreditCardDetailsType(struct soap*, ns3__ReferenceCreditCardDetailsType *, const char*, const char*);

inline int soap_read_ns3__ReferenceCreditCardDetailsType(struct soap *soap, ns3__ReferenceCreditCardDetailsType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns3__ReferenceCreditCardDetailsType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__ReferenceCreditCardDetailsType(struct soap *soap, const char *URL, ns3__ReferenceCreditCardDetailsType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__ReferenceCreditCardDetailsType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__ReferenceCreditCardDetailsType(struct soap *soap, ns3__ReferenceCreditCardDetailsType *p)
{
	if (soap_read_ns3__ReferenceCreditCardDetailsType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__CreditCardNumberTypeType_DEFINED
#define SOAP_TYPE_ns3__CreditCardNumberTypeType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__CreditCardNumberTypeType(struct soap*, const char*, int, const ns3__CreditCardNumberTypeType *, const char*);
SOAP_FMAC3 ns3__CreditCardNumberTypeType * SOAP_FMAC4 soap_in_ns3__CreditCardNumberTypeType(struct soap*, const char*, ns3__CreditCardNumberTypeType *, const char*);
SOAP_FMAC1 ns3__CreditCardNumberTypeType * SOAP_FMAC2 soap_instantiate_ns3__CreditCardNumberTypeType(struct soap*, int, const char*, const char*, size_t*);

inline ns3__CreditCardNumberTypeType * soap_new_ns3__CreditCardNumberTypeType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__CreditCardNumberTypeType(soap, n, NULL, NULL, NULL);
}

inline ns3__CreditCardNumberTypeType * soap_new_req_ns3__CreditCardNumberTypeType(
	struct soap *soap)
{
	ns3__CreditCardNumberTypeType *_p = soap_new_ns3__CreditCardNumberTypeType(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns3__CreditCardNumberTypeType * soap_new_set_ns3__CreditCardNumberTypeType(
	struct soap *soap,
	enum ns3__CreditCardTypeType *CreditCardType,
	std::string *CreditCardNumber)
{
	ns3__CreditCardNumberTypeType *_p = soap_new_ns3__CreditCardNumberTypeType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__CreditCardNumberTypeType::CreditCardType = CreditCardType;
		_p->ns3__CreditCardNumberTypeType::CreditCardNumber = CreditCardNumber;
	}
	return _p;
}

inline int soap_write_ns3__CreditCardNumberTypeType(struct soap *soap, ns3__CreditCardNumberTypeType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:CreditCardNumberTypeType", p->soap_type() == SOAP_TYPE_ns3__CreditCardNumberTypeType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__CreditCardNumberTypeType(struct soap *soap, const char *URL, ns3__CreditCardNumberTypeType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:CreditCardNumberTypeType", p->soap_type() == SOAP_TYPE_ns3__CreditCardNumberTypeType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__CreditCardNumberTypeType(struct soap *soap, const char *URL, ns3__CreditCardNumberTypeType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:CreditCardNumberTypeType", p->soap_type() == SOAP_TYPE_ns3__CreditCardNumberTypeType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__CreditCardNumberTypeType * SOAP_FMAC4 soap_get_ns3__CreditCardNumberTypeType(struct soap*, ns3__CreditCardNumberTypeType *, const char*, const char*);

inline int soap_read_ns3__CreditCardNumberTypeType(struct soap *soap, ns3__CreditCardNumberTypeType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns3__CreditCardNumberTypeType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__CreditCardNumberTypeType(struct soap *soap, const char *URL, ns3__CreditCardNumberTypeType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__CreditCardNumberTypeType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__CreditCardNumberTypeType(struct soap *soap, ns3__CreditCardNumberTypeType *p)
{
	if (soap_read_ns3__CreditCardNumberTypeType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__UserSelectedOptionType_DEFINED
#define SOAP_TYPE_ns3__UserSelectedOptionType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__UserSelectedOptionType(struct soap*, const char*, int, const ns3__UserSelectedOptionType *, const char*);
SOAP_FMAC3 ns3__UserSelectedOptionType * SOAP_FMAC4 soap_in_ns3__UserSelectedOptionType(struct soap*, const char*, ns3__UserSelectedOptionType *, const char*);
SOAP_FMAC1 ns3__UserSelectedOptionType * SOAP_FMAC2 soap_instantiate_ns3__UserSelectedOptionType(struct soap*, int, const char*, const char*, size_t*);

inline ns3__UserSelectedOptionType * soap_new_ns3__UserSelectedOptionType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__UserSelectedOptionType(soap, n, NULL, NULL, NULL);
}

inline ns3__UserSelectedOptionType * soap_new_req_ns3__UserSelectedOptionType(
	struct soap *soap)
{
	ns3__UserSelectedOptionType *_p = soap_new_ns3__UserSelectedOptionType(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns3__UserSelectedOptionType * soap_new_set_ns3__UserSelectedOptionType(
	struct soap *soap,
	std::string *ShippingCalculationMode,
	std::string *InsuranceOptionSelected,
	std::string *ShippingOptionIsDefault,
	ns2__BasicAmountType *ShippingOptionAmount,
	std::string *ShippingOptionName,
	std::string *ScheduledShippingDate,
	std::string *ScheduledShippingPeriod)
{
	ns3__UserSelectedOptionType *_p = soap_new_ns3__UserSelectedOptionType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__UserSelectedOptionType::ShippingCalculationMode = ShippingCalculationMode;
		_p->ns3__UserSelectedOptionType::InsuranceOptionSelected = InsuranceOptionSelected;
		_p->ns3__UserSelectedOptionType::ShippingOptionIsDefault = ShippingOptionIsDefault;
		_p->ns3__UserSelectedOptionType::ShippingOptionAmount = ShippingOptionAmount;
		_p->ns3__UserSelectedOptionType::ShippingOptionName = ShippingOptionName;
		_p->ns3__UserSelectedOptionType::ScheduledShippingDate = ScheduledShippingDate;
		_p->ns3__UserSelectedOptionType::ScheduledShippingPeriod = ScheduledShippingPeriod;
	}
	return _p;
}

inline int soap_write_ns3__UserSelectedOptionType(struct soap *soap, ns3__UserSelectedOptionType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:UserSelectedOptionType", p->soap_type() == SOAP_TYPE_ns3__UserSelectedOptionType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__UserSelectedOptionType(struct soap *soap, const char *URL, ns3__UserSelectedOptionType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:UserSelectedOptionType", p->soap_type() == SOAP_TYPE_ns3__UserSelectedOptionType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__UserSelectedOptionType(struct soap *soap, const char *URL, ns3__UserSelectedOptionType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:UserSelectedOptionType", p->soap_type() == SOAP_TYPE_ns3__UserSelectedOptionType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__UserSelectedOptionType * SOAP_FMAC4 soap_get_ns3__UserSelectedOptionType(struct soap*, ns3__UserSelectedOptionType *, const char*, const char*);

inline int soap_read_ns3__UserSelectedOptionType(struct soap *soap, ns3__UserSelectedOptionType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns3__UserSelectedOptionType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__UserSelectedOptionType(struct soap *soap, const char *URL, ns3__UserSelectedOptionType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__UserSelectedOptionType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__UserSelectedOptionType(struct soap *soap, ns3__UserSelectedOptionType *p)
{
	if (soap_read_ns3__UserSelectedOptionType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__ShippingOptionType_DEFINED
#define SOAP_TYPE_ns3__ShippingOptionType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__ShippingOptionType(struct soap*, const char*, int, const ns3__ShippingOptionType *, const char*);
SOAP_FMAC3 ns3__ShippingOptionType * SOAP_FMAC4 soap_in_ns3__ShippingOptionType(struct soap*, const char*, ns3__ShippingOptionType *, const char*);
SOAP_FMAC1 ns3__ShippingOptionType * SOAP_FMAC2 soap_instantiate_ns3__ShippingOptionType(struct soap*, int, const char*, const char*, size_t*);

inline ns3__ShippingOptionType * soap_new_ns3__ShippingOptionType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__ShippingOptionType(soap, n, NULL, NULL, NULL);
}

inline ns3__ShippingOptionType * soap_new_req_ns3__ShippingOptionType(
	struct soap *soap)
{
	ns3__ShippingOptionType *_p = soap_new_ns3__ShippingOptionType(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns3__ShippingOptionType * soap_new_set_ns3__ShippingOptionType(
	struct soap *soap,
	std::string *ShippingOptionIsDefault,
	ns2__BasicAmountType *ShippingOptionAmount,
	std::string *ShippingOptionName)
{
	ns3__ShippingOptionType *_p = soap_new_ns3__ShippingOptionType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__ShippingOptionType::ShippingOptionIsDefault = ShippingOptionIsDefault;
		_p->ns3__ShippingOptionType::ShippingOptionAmount = ShippingOptionAmount;
		_p->ns3__ShippingOptionType::ShippingOptionName = ShippingOptionName;
	}
	return _p;
}

inline int soap_write_ns3__ShippingOptionType(struct soap *soap, ns3__ShippingOptionType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:ShippingOptionType", p->soap_type() == SOAP_TYPE_ns3__ShippingOptionType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__ShippingOptionType(struct soap *soap, const char *URL, ns3__ShippingOptionType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:ShippingOptionType", p->soap_type() == SOAP_TYPE_ns3__ShippingOptionType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__ShippingOptionType(struct soap *soap, const char *URL, ns3__ShippingOptionType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:ShippingOptionType", p->soap_type() == SOAP_TYPE_ns3__ShippingOptionType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__ShippingOptionType * SOAP_FMAC4 soap_get_ns3__ShippingOptionType(struct soap*, ns3__ShippingOptionType *, const char*, const char*);

inline int soap_read_ns3__ShippingOptionType(struct soap *soap, ns3__ShippingOptionType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns3__ShippingOptionType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__ShippingOptionType(struct soap *soap, const char *URL, ns3__ShippingOptionType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__ShippingOptionType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__ShippingOptionType(struct soap *soap, ns3__ShippingOptionType *p)
{
	if (soap_read_ns3__ShippingOptionType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__CreditCardDetailsType_DEFINED
#define SOAP_TYPE_ns3__CreditCardDetailsType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__CreditCardDetailsType(struct soap*, const char*, int, const ns3__CreditCardDetailsType *, const char*);
SOAP_FMAC3 ns3__CreditCardDetailsType * SOAP_FMAC4 soap_in_ns3__CreditCardDetailsType(struct soap*, const char*, ns3__CreditCardDetailsType *, const char*);
SOAP_FMAC1 ns3__CreditCardDetailsType * SOAP_FMAC2 soap_instantiate_ns3__CreditCardDetailsType(struct soap*, int, const char*, const char*, size_t*);

inline ns3__CreditCardDetailsType * soap_new_ns3__CreditCardDetailsType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__CreditCardDetailsType(soap, n, NULL, NULL, NULL);
}

inline ns3__CreditCardDetailsType * soap_new_req_ns3__CreditCardDetailsType(
	struct soap *soap)
{
	ns3__CreditCardDetailsType *_p = soap_new_ns3__CreditCardDetailsType(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns3__CreditCardDetailsType * soap_new_set_ns3__CreditCardDetailsType(
	struct soap *soap,
	enum ns3__CreditCardTypeType *CreditCardType,
	std::string *CreditCardNumber,
	int *ExpMonth,
	int *ExpYear,
	ns3__PayerInfoType *CardOwner,
	std::string *CVV2,
	int *StartMonth,
	int *StartYear,
	std::string *IssueNumber,
	ns3__ThreeDSecureRequestType *ThreeDSecureRequest)
{
	ns3__CreditCardDetailsType *_p = soap_new_ns3__CreditCardDetailsType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__CreditCardDetailsType::CreditCardType = CreditCardType;
		_p->ns3__CreditCardDetailsType::CreditCardNumber = CreditCardNumber;
		_p->ns3__CreditCardDetailsType::ExpMonth = ExpMonth;
		_p->ns3__CreditCardDetailsType::ExpYear = ExpYear;
		_p->ns3__CreditCardDetailsType::CardOwner = CardOwner;
		_p->ns3__CreditCardDetailsType::CVV2 = CVV2;
		_p->ns3__CreditCardDetailsType::StartMonth = StartMonth;
		_p->ns3__CreditCardDetailsType::StartYear = StartYear;
		_p->ns3__CreditCardDetailsType::IssueNumber = IssueNumber;
		_p->ns3__CreditCardDetailsType::ThreeDSecureRequest = ThreeDSecureRequest;
	}
	return _p;
}

inline int soap_write_ns3__CreditCardDetailsType(struct soap *soap, ns3__CreditCardDetailsType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:CreditCardDetailsType", p->soap_type() == SOAP_TYPE_ns3__CreditCardDetailsType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__CreditCardDetailsType(struct soap *soap, const char *URL, ns3__CreditCardDetailsType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:CreditCardDetailsType", p->soap_type() == SOAP_TYPE_ns3__CreditCardDetailsType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__CreditCardDetailsType(struct soap *soap, const char *URL, ns3__CreditCardDetailsType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:CreditCardDetailsType", p->soap_type() == SOAP_TYPE_ns3__CreditCardDetailsType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__CreditCardDetailsType * SOAP_FMAC4 soap_get_ns3__CreditCardDetailsType(struct soap*, ns3__CreditCardDetailsType *, const char*, const char*);

inline int soap_read_ns3__CreditCardDetailsType(struct soap *soap, ns3__CreditCardDetailsType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns3__CreditCardDetailsType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__CreditCardDetailsType(struct soap *soap, const char *URL, ns3__CreditCardDetailsType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__CreditCardDetailsType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__CreditCardDetailsType(struct soap *soap, ns3__CreditCardDetailsType *p)
{
	if (soap_read_ns3__CreditCardDetailsType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__ThreeDSecureInfoType_DEFINED
#define SOAP_TYPE_ns3__ThreeDSecureInfoType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__ThreeDSecureInfoType(struct soap*, const char*, int, const ns3__ThreeDSecureInfoType *, const char*);
SOAP_FMAC3 ns3__ThreeDSecureInfoType * SOAP_FMAC4 soap_in_ns3__ThreeDSecureInfoType(struct soap*, const char*, ns3__ThreeDSecureInfoType *, const char*);
SOAP_FMAC1 ns3__ThreeDSecureInfoType * SOAP_FMAC2 soap_instantiate_ns3__ThreeDSecureInfoType(struct soap*, int, const char*, const char*, size_t*);

inline ns3__ThreeDSecureInfoType * soap_new_ns3__ThreeDSecureInfoType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__ThreeDSecureInfoType(soap, n, NULL, NULL, NULL);
}

inline ns3__ThreeDSecureInfoType * soap_new_req_ns3__ThreeDSecureInfoType(
	struct soap *soap)
{
	ns3__ThreeDSecureInfoType *_p = soap_new_ns3__ThreeDSecureInfoType(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns3__ThreeDSecureInfoType * soap_new_set_ns3__ThreeDSecureInfoType(
	struct soap *soap,
	ns3__ThreeDSecureRequestType *ThreeDSecureRequest,
	ns3__ThreeDSecureResponseType *ThreeDSecureResponse)
{
	ns3__ThreeDSecureInfoType *_p = soap_new_ns3__ThreeDSecureInfoType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__ThreeDSecureInfoType::ThreeDSecureRequest = ThreeDSecureRequest;
		_p->ns3__ThreeDSecureInfoType::ThreeDSecureResponse = ThreeDSecureResponse;
	}
	return _p;
}

inline int soap_write_ns3__ThreeDSecureInfoType(struct soap *soap, ns3__ThreeDSecureInfoType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:ThreeDSecureInfoType", p->soap_type() == SOAP_TYPE_ns3__ThreeDSecureInfoType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__ThreeDSecureInfoType(struct soap *soap, const char *URL, ns3__ThreeDSecureInfoType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:ThreeDSecureInfoType", p->soap_type() == SOAP_TYPE_ns3__ThreeDSecureInfoType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__ThreeDSecureInfoType(struct soap *soap, const char *URL, ns3__ThreeDSecureInfoType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:ThreeDSecureInfoType", p->soap_type() == SOAP_TYPE_ns3__ThreeDSecureInfoType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__ThreeDSecureInfoType * SOAP_FMAC4 soap_get_ns3__ThreeDSecureInfoType(struct soap*, ns3__ThreeDSecureInfoType *, const char*, const char*);

inline int soap_read_ns3__ThreeDSecureInfoType(struct soap *soap, ns3__ThreeDSecureInfoType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns3__ThreeDSecureInfoType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__ThreeDSecureInfoType(struct soap *soap, const char *URL, ns3__ThreeDSecureInfoType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__ThreeDSecureInfoType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__ThreeDSecureInfoType(struct soap *soap, ns3__ThreeDSecureInfoType *p)
{
	if (soap_read_ns3__ThreeDSecureInfoType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__ThreeDSecureResponseType_DEFINED
#define SOAP_TYPE_ns3__ThreeDSecureResponseType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__ThreeDSecureResponseType(struct soap*, const char*, int, const ns3__ThreeDSecureResponseType *, const char*);
SOAP_FMAC3 ns3__ThreeDSecureResponseType * SOAP_FMAC4 soap_in_ns3__ThreeDSecureResponseType(struct soap*, const char*, ns3__ThreeDSecureResponseType *, const char*);
SOAP_FMAC1 ns3__ThreeDSecureResponseType * SOAP_FMAC2 soap_instantiate_ns3__ThreeDSecureResponseType(struct soap*, int, const char*, const char*, size_t*);

inline ns3__ThreeDSecureResponseType * soap_new_ns3__ThreeDSecureResponseType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__ThreeDSecureResponseType(soap, n, NULL, NULL, NULL);
}

inline ns3__ThreeDSecureResponseType * soap_new_req_ns3__ThreeDSecureResponseType(
	struct soap *soap)
{
	ns3__ThreeDSecureResponseType *_p = soap_new_ns3__ThreeDSecureResponseType(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns3__ThreeDSecureResponseType * soap_new_set_ns3__ThreeDSecureResponseType(
	struct soap *soap,
	std::string *Vpas,
	std::string *EciSubmitted3DS)
{
	ns3__ThreeDSecureResponseType *_p = soap_new_ns3__ThreeDSecureResponseType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__ThreeDSecureResponseType::Vpas = Vpas;
		_p->ns3__ThreeDSecureResponseType::EciSubmitted3DS = EciSubmitted3DS;
	}
	return _p;
}

inline int soap_write_ns3__ThreeDSecureResponseType(struct soap *soap, ns3__ThreeDSecureResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:ThreeDSecureResponseType", p->soap_type() == SOAP_TYPE_ns3__ThreeDSecureResponseType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__ThreeDSecureResponseType(struct soap *soap, const char *URL, ns3__ThreeDSecureResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:ThreeDSecureResponseType", p->soap_type() == SOAP_TYPE_ns3__ThreeDSecureResponseType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__ThreeDSecureResponseType(struct soap *soap, const char *URL, ns3__ThreeDSecureResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:ThreeDSecureResponseType", p->soap_type() == SOAP_TYPE_ns3__ThreeDSecureResponseType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__ThreeDSecureResponseType * SOAP_FMAC4 soap_get_ns3__ThreeDSecureResponseType(struct soap*, ns3__ThreeDSecureResponseType *, const char*, const char*);

inline int soap_read_ns3__ThreeDSecureResponseType(struct soap *soap, ns3__ThreeDSecureResponseType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns3__ThreeDSecureResponseType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__ThreeDSecureResponseType(struct soap *soap, const char *URL, ns3__ThreeDSecureResponseType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__ThreeDSecureResponseType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__ThreeDSecureResponseType(struct soap *soap, ns3__ThreeDSecureResponseType *p)
{
	if (soap_read_ns3__ThreeDSecureResponseType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__ThreeDSecureRequestType_DEFINED
#define SOAP_TYPE_ns3__ThreeDSecureRequestType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__ThreeDSecureRequestType(struct soap*, const char*, int, const ns3__ThreeDSecureRequestType *, const char*);
SOAP_FMAC3 ns3__ThreeDSecureRequestType * SOAP_FMAC4 soap_in_ns3__ThreeDSecureRequestType(struct soap*, const char*, ns3__ThreeDSecureRequestType *, const char*);
SOAP_FMAC1 ns3__ThreeDSecureRequestType * SOAP_FMAC2 soap_instantiate_ns3__ThreeDSecureRequestType(struct soap*, int, const char*, const char*, size_t*);

inline ns3__ThreeDSecureRequestType * soap_new_ns3__ThreeDSecureRequestType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__ThreeDSecureRequestType(soap, n, NULL, NULL, NULL);
}

inline ns3__ThreeDSecureRequestType * soap_new_req_ns3__ThreeDSecureRequestType(
	struct soap *soap)
{
	ns3__ThreeDSecureRequestType *_p = soap_new_ns3__ThreeDSecureRequestType(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns3__ThreeDSecureRequestType * soap_new_set_ns3__ThreeDSecureRequestType(
	struct soap *soap,
	std::string *Eci3ds,
	std::string *Cavv,
	std::string *Xid,
	std::string *MpiVendor3ds,
	std::string *AuthStatus3ds)
{
	ns3__ThreeDSecureRequestType *_p = soap_new_ns3__ThreeDSecureRequestType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__ThreeDSecureRequestType::Eci3ds = Eci3ds;
		_p->ns3__ThreeDSecureRequestType::Cavv = Cavv;
		_p->ns3__ThreeDSecureRequestType::Xid = Xid;
		_p->ns3__ThreeDSecureRequestType::MpiVendor3ds = MpiVendor3ds;
		_p->ns3__ThreeDSecureRequestType::AuthStatus3ds = AuthStatus3ds;
	}
	return _p;
}

inline int soap_write_ns3__ThreeDSecureRequestType(struct soap *soap, ns3__ThreeDSecureRequestType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:ThreeDSecureRequestType", p->soap_type() == SOAP_TYPE_ns3__ThreeDSecureRequestType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__ThreeDSecureRequestType(struct soap *soap, const char *URL, ns3__ThreeDSecureRequestType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:ThreeDSecureRequestType", p->soap_type() == SOAP_TYPE_ns3__ThreeDSecureRequestType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__ThreeDSecureRequestType(struct soap *soap, const char *URL, ns3__ThreeDSecureRequestType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:ThreeDSecureRequestType", p->soap_type() == SOAP_TYPE_ns3__ThreeDSecureRequestType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__ThreeDSecureRequestType * SOAP_FMAC4 soap_get_ns3__ThreeDSecureRequestType(struct soap*, ns3__ThreeDSecureRequestType *, const char*, const char*);

inline int soap_read_ns3__ThreeDSecureRequestType(struct soap *soap, ns3__ThreeDSecureRequestType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns3__ThreeDSecureRequestType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__ThreeDSecureRequestType(struct soap *soap, const char *URL, ns3__ThreeDSecureRequestType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__ThreeDSecureRequestType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__ThreeDSecureRequestType(struct soap *soap, ns3__ThreeDSecureRequestType *p)
{
	if (soap_read_ns3__ThreeDSecureRequestType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__TaxIdDetailsType_DEFINED
#define SOAP_TYPE_ns3__TaxIdDetailsType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__TaxIdDetailsType(struct soap*, const char*, int, const ns3__TaxIdDetailsType *, const char*);
SOAP_FMAC3 ns3__TaxIdDetailsType * SOAP_FMAC4 soap_in_ns3__TaxIdDetailsType(struct soap*, const char*, ns3__TaxIdDetailsType *, const char*);
SOAP_FMAC1 ns3__TaxIdDetailsType * SOAP_FMAC2 soap_instantiate_ns3__TaxIdDetailsType(struct soap*, int, const char*, const char*, size_t*);

inline ns3__TaxIdDetailsType * soap_new_ns3__TaxIdDetailsType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__TaxIdDetailsType(soap, n, NULL, NULL, NULL);
}

inline ns3__TaxIdDetailsType * soap_new_req_ns3__TaxIdDetailsType(
	struct soap *soap)
{
	ns3__TaxIdDetailsType *_p = soap_new_ns3__TaxIdDetailsType(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns3__TaxIdDetailsType * soap_new_set_ns3__TaxIdDetailsType(
	struct soap *soap,
	std::string *TaxIdType,
	std::string *TaxId)
{
	ns3__TaxIdDetailsType *_p = soap_new_ns3__TaxIdDetailsType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__TaxIdDetailsType::TaxIdType = TaxIdType;
		_p->ns3__TaxIdDetailsType::TaxId = TaxId;
	}
	return _p;
}

inline int soap_write_ns3__TaxIdDetailsType(struct soap *soap, ns3__TaxIdDetailsType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:TaxIdDetailsType", p->soap_type() == SOAP_TYPE_ns3__TaxIdDetailsType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__TaxIdDetailsType(struct soap *soap, const char *URL, ns3__TaxIdDetailsType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:TaxIdDetailsType", p->soap_type() == SOAP_TYPE_ns3__TaxIdDetailsType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__TaxIdDetailsType(struct soap *soap, const char *URL, ns3__TaxIdDetailsType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:TaxIdDetailsType", p->soap_type() == SOAP_TYPE_ns3__TaxIdDetailsType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__TaxIdDetailsType * SOAP_FMAC4 soap_get_ns3__TaxIdDetailsType(struct soap*, ns3__TaxIdDetailsType *, const char*, const char*);

inline int soap_read_ns3__TaxIdDetailsType(struct soap *soap, ns3__TaxIdDetailsType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns3__TaxIdDetailsType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__TaxIdDetailsType(struct soap *soap, const char *URL, ns3__TaxIdDetailsType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__TaxIdDetailsType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__TaxIdDetailsType(struct soap *soap, ns3__TaxIdDetailsType *p)
{
	if (soap_read_ns3__TaxIdDetailsType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__BuyerDetailsType_DEFINED
#define SOAP_TYPE_ns3__BuyerDetailsType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__BuyerDetailsType(struct soap*, const char*, int, const ns3__BuyerDetailsType *, const char*);
SOAP_FMAC3 ns3__BuyerDetailsType * SOAP_FMAC4 soap_in_ns3__BuyerDetailsType(struct soap*, const char*, ns3__BuyerDetailsType *, const char*);
SOAP_FMAC1 ns3__BuyerDetailsType * SOAP_FMAC2 soap_instantiate_ns3__BuyerDetailsType(struct soap*, int, const char*, const char*, size_t*);

inline ns3__BuyerDetailsType * soap_new_ns3__BuyerDetailsType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__BuyerDetailsType(soap, n, NULL, NULL, NULL);
}

inline ns3__BuyerDetailsType * soap_new_req_ns3__BuyerDetailsType(
	struct soap *soap)
{
	ns3__BuyerDetailsType *_p = soap_new_ns3__BuyerDetailsType(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns3__BuyerDetailsType * soap_new_set_ns3__BuyerDetailsType(
	struct soap *soap,
	std::string *BuyerId,
	std::string *BuyerUserName,
	time_t *BuyerRegistrationDate,
	ns3__TaxIdDetailsType *TaxIdDetails,
	ns3__IdentificationInfoType *IdentificationInfo)
{
	ns3__BuyerDetailsType *_p = soap_new_ns3__BuyerDetailsType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__BuyerDetailsType::BuyerId = BuyerId;
		_p->ns3__BuyerDetailsType::BuyerUserName = BuyerUserName;
		_p->ns3__BuyerDetailsType::BuyerRegistrationDate = BuyerRegistrationDate;
		_p->ns3__BuyerDetailsType::TaxIdDetails = TaxIdDetails;
		_p->ns3__BuyerDetailsType::IdentificationInfo = IdentificationInfo;
	}
	return _p;
}

inline int soap_write_ns3__BuyerDetailsType(struct soap *soap, ns3__BuyerDetailsType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:BuyerDetailsType", p->soap_type() == SOAP_TYPE_ns3__BuyerDetailsType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__BuyerDetailsType(struct soap *soap, const char *URL, ns3__BuyerDetailsType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:BuyerDetailsType", p->soap_type() == SOAP_TYPE_ns3__BuyerDetailsType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__BuyerDetailsType(struct soap *soap, const char *URL, ns3__BuyerDetailsType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:BuyerDetailsType", p->soap_type() == SOAP_TYPE_ns3__BuyerDetailsType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__BuyerDetailsType * SOAP_FMAC4 soap_get_ns3__BuyerDetailsType(struct soap*, ns3__BuyerDetailsType *, const char*, const char*);

inline int soap_read_ns3__BuyerDetailsType(struct soap *soap, ns3__BuyerDetailsType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns3__BuyerDetailsType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__BuyerDetailsType(struct soap *soap, const char *URL, ns3__BuyerDetailsType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__BuyerDetailsType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__BuyerDetailsType(struct soap *soap, ns3__BuyerDetailsType *p)
{
	if (soap_read_ns3__BuyerDetailsType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__OtherPaymentMethodDetailsType_DEFINED
#define SOAP_TYPE_ns3__OtherPaymentMethodDetailsType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__OtherPaymentMethodDetailsType(struct soap*, const char*, int, const ns3__OtherPaymentMethodDetailsType *, const char*);
SOAP_FMAC3 ns3__OtherPaymentMethodDetailsType * SOAP_FMAC4 soap_in_ns3__OtherPaymentMethodDetailsType(struct soap*, const char*, ns3__OtherPaymentMethodDetailsType *, const char*);
SOAP_FMAC1 ns3__OtherPaymentMethodDetailsType * SOAP_FMAC2 soap_instantiate_ns3__OtherPaymentMethodDetailsType(struct soap*, int, const char*, const char*, size_t*);

inline ns3__OtherPaymentMethodDetailsType * soap_new_ns3__OtherPaymentMethodDetailsType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__OtherPaymentMethodDetailsType(soap, n, NULL, NULL, NULL);
}

inline ns3__OtherPaymentMethodDetailsType * soap_new_req_ns3__OtherPaymentMethodDetailsType(
	struct soap *soap)
{
	ns3__OtherPaymentMethodDetailsType *_p = soap_new_ns3__OtherPaymentMethodDetailsType(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns3__OtherPaymentMethodDetailsType * soap_new_set_ns3__OtherPaymentMethodDetailsType(
	struct soap *soap,
	std::string *OtherPaymentMethodId,
	std::string *OtherPaymentMethodType,
	std::string *OtherPaymentMethodLabel,
	std::string *OtherPaymentMethodLabelDescription,
	std::string *OtherPaymentMethodLongDescriptionTitle,
	std::string *OtherPaymentMethodLongDescription,
	std::string *OtherPaymentMethodIcon,
	bool *OtherPaymentMethodHideLabel)
{
	ns3__OtherPaymentMethodDetailsType *_p = soap_new_ns3__OtherPaymentMethodDetailsType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__OtherPaymentMethodDetailsType::OtherPaymentMethodId = OtherPaymentMethodId;
		_p->ns3__OtherPaymentMethodDetailsType::OtherPaymentMethodType = OtherPaymentMethodType;
		_p->ns3__OtherPaymentMethodDetailsType::OtherPaymentMethodLabel = OtherPaymentMethodLabel;
		_p->ns3__OtherPaymentMethodDetailsType::OtherPaymentMethodLabelDescription = OtherPaymentMethodLabelDescription;
		_p->ns3__OtherPaymentMethodDetailsType::OtherPaymentMethodLongDescriptionTitle = OtherPaymentMethodLongDescriptionTitle;
		_p->ns3__OtherPaymentMethodDetailsType::OtherPaymentMethodLongDescription = OtherPaymentMethodLongDescription;
		_p->ns3__OtherPaymentMethodDetailsType::OtherPaymentMethodIcon = OtherPaymentMethodIcon;
		_p->ns3__OtherPaymentMethodDetailsType::OtherPaymentMethodHideLabel = OtherPaymentMethodHideLabel;
	}
	return _p;
}

inline int soap_write_ns3__OtherPaymentMethodDetailsType(struct soap *soap, ns3__OtherPaymentMethodDetailsType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:OtherPaymentMethodDetailsType", p->soap_type() == SOAP_TYPE_ns3__OtherPaymentMethodDetailsType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__OtherPaymentMethodDetailsType(struct soap *soap, const char *URL, ns3__OtherPaymentMethodDetailsType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:OtherPaymentMethodDetailsType", p->soap_type() == SOAP_TYPE_ns3__OtherPaymentMethodDetailsType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__OtherPaymentMethodDetailsType(struct soap *soap, const char *URL, ns3__OtherPaymentMethodDetailsType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:OtherPaymentMethodDetailsType", p->soap_type() == SOAP_TYPE_ns3__OtherPaymentMethodDetailsType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__OtherPaymentMethodDetailsType * SOAP_FMAC4 soap_get_ns3__OtherPaymentMethodDetailsType(struct soap*, ns3__OtherPaymentMethodDetailsType *, const char*, const char*);

inline int soap_read_ns3__OtherPaymentMethodDetailsType(struct soap *soap, ns3__OtherPaymentMethodDetailsType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns3__OtherPaymentMethodDetailsType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__OtherPaymentMethodDetailsType(struct soap *soap, const char *URL, ns3__OtherPaymentMethodDetailsType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__OtherPaymentMethodDetailsType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__OtherPaymentMethodDetailsType(struct soap *soap, ns3__OtherPaymentMethodDetailsType *p)
{
	if (soap_read_ns3__OtherPaymentMethodDetailsType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__SellerDetailsType_DEFINED
#define SOAP_TYPE_ns3__SellerDetailsType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__SellerDetailsType(struct soap*, const char*, int, const ns3__SellerDetailsType *, const char*);
SOAP_FMAC3 ns3__SellerDetailsType * SOAP_FMAC4 soap_in_ns3__SellerDetailsType(struct soap*, const char*, ns3__SellerDetailsType *, const char*);
SOAP_FMAC1 ns3__SellerDetailsType * SOAP_FMAC2 soap_instantiate_ns3__SellerDetailsType(struct soap*, int, const char*, const char*, size_t*);

inline ns3__SellerDetailsType * soap_new_ns3__SellerDetailsType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__SellerDetailsType(soap, n, NULL, NULL, NULL);
}

inline ns3__SellerDetailsType * soap_new_req_ns3__SellerDetailsType(
	struct soap *soap)
{
	ns3__SellerDetailsType *_p = soap_new_ns3__SellerDetailsType(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns3__SellerDetailsType * soap_new_set_ns3__SellerDetailsType(
	struct soap *soap,
	std::string *SellerId,
	std::string *SellerUserName,
	time_t *SellerRegistrationDate,
	std::string *PayPalAccountID,
	std::string *SecureMerchantAccountID)
{
	ns3__SellerDetailsType *_p = soap_new_ns3__SellerDetailsType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__SellerDetailsType::SellerId = SellerId;
		_p->ns3__SellerDetailsType::SellerUserName = SellerUserName;
		_p->ns3__SellerDetailsType::SellerRegistrationDate = SellerRegistrationDate;
		_p->ns3__SellerDetailsType::PayPalAccountID = PayPalAccountID;
		_p->ns3__SellerDetailsType::SecureMerchantAccountID = SecureMerchantAccountID;
	}
	return _p;
}

inline int soap_write_ns3__SellerDetailsType(struct soap *soap, ns3__SellerDetailsType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:SellerDetailsType", p->soap_type() == SOAP_TYPE_ns3__SellerDetailsType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__SellerDetailsType(struct soap *soap, const char *URL, ns3__SellerDetailsType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:SellerDetailsType", p->soap_type() == SOAP_TYPE_ns3__SellerDetailsType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__SellerDetailsType(struct soap *soap, const char *URL, ns3__SellerDetailsType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:SellerDetailsType", p->soap_type() == SOAP_TYPE_ns3__SellerDetailsType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__SellerDetailsType * SOAP_FMAC4 soap_get_ns3__SellerDetailsType(struct soap*, ns3__SellerDetailsType *, const char*, const char*);

inline int soap_read_ns3__SellerDetailsType(struct soap *soap, ns3__SellerDetailsType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns3__SellerDetailsType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__SellerDetailsType(struct soap *soap, const char *URL, ns3__SellerDetailsType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__SellerDetailsType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__SellerDetailsType(struct soap *soap, ns3__SellerDetailsType *p)
{
	if (soap_read_ns3__SellerDetailsType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__IncentiveAppliedDetailsType_DEFINED
#define SOAP_TYPE_ns3__IncentiveAppliedDetailsType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__IncentiveAppliedDetailsType(struct soap*, const char*, int, const ns3__IncentiveAppliedDetailsType *, const char*);
SOAP_FMAC3 ns3__IncentiveAppliedDetailsType * SOAP_FMAC4 soap_in_ns3__IncentiveAppliedDetailsType(struct soap*, const char*, ns3__IncentiveAppliedDetailsType *, const char*);
SOAP_FMAC1 ns3__IncentiveAppliedDetailsType * SOAP_FMAC2 soap_instantiate_ns3__IncentiveAppliedDetailsType(struct soap*, int, const char*, const char*, size_t*);

inline ns3__IncentiveAppliedDetailsType * soap_new_ns3__IncentiveAppliedDetailsType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__IncentiveAppliedDetailsType(soap, n, NULL, NULL, NULL);
}

inline ns3__IncentiveAppliedDetailsType * soap_new_req_ns3__IncentiveAppliedDetailsType(
	struct soap *soap)
{
	ns3__IncentiveAppliedDetailsType *_p = soap_new_ns3__IncentiveAppliedDetailsType(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns3__IncentiveAppliedDetailsType * soap_new_set_ns3__IncentiveAppliedDetailsType(
	struct soap *soap,
	std::string *PaymentRequestID,
	std::string *ItemId,
	std::string *ExternalTxnId,
	ns2__BasicAmountType *DiscountAmount,
	std::string *SubType)
{
	ns3__IncentiveAppliedDetailsType *_p = soap_new_ns3__IncentiveAppliedDetailsType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__IncentiveAppliedDetailsType::PaymentRequestID = PaymentRequestID;
		_p->ns3__IncentiveAppliedDetailsType::ItemId = ItemId;
		_p->ns3__IncentiveAppliedDetailsType::ExternalTxnId = ExternalTxnId;
		_p->ns3__IncentiveAppliedDetailsType::DiscountAmount = DiscountAmount;
		_p->ns3__IncentiveAppliedDetailsType::SubType = SubType;
	}
	return _p;
}

inline int soap_write_ns3__IncentiveAppliedDetailsType(struct soap *soap, ns3__IncentiveAppliedDetailsType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:IncentiveAppliedDetailsType", p->soap_type() == SOAP_TYPE_ns3__IncentiveAppliedDetailsType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__IncentiveAppliedDetailsType(struct soap *soap, const char *URL, ns3__IncentiveAppliedDetailsType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:IncentiveAppliedDetailsType", p->soap_type() == SOAP_TYPE_ns3__IncentiveAppliedDetailsType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__IncentiveAppliedDetailsType(struct soap *soap, const char *URL, ns3__IncentiveAppliedDetailsType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:IncentiveAppliedDetailsType", p->soap_type() == SOAP_TYPE_ns3__IncentiveAppliedDetailsType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__IncentiveAppliedDetailsType * SOAP_FMAC4 soap_get_ns3__IncentiveAppliedDetailsType(struct soap*, ns3__IncentiveAppliedDetailsType *, const char*, const char*);

inline int soap_read_ns3__IncentiveAppliedDetailsType(struct soap *soap, ns3__IncentiveAppliedDetailsType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns3__IncentiveAppliedDetailsType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__IncentiveAppliedDetailsType(struct soap *soap, const char *URL, ns3__IncentiveAppliedDetailsType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__IncentiveAppliedDetailsType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__IncentiveAppliedDetailsType(struct soap *soap, ns3__IncentiveAppliedDetailsType *p)
{
	if (soap_read_ns3__IncentiveAppliedDetailsType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__IncentiveDetailsType_DEFINED
#define SOAP_TYPE_ns3__IncentiveDetailsType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__IncentiveDetailsType(struct soap*, const char*, int, const ns3__IncentiveDetailsType *, const char*);
SOAP_FMAC3 ns3__IncentiveDetailsType * SOAP_FMAC4 soap_in_ns3__IncentiveDetailsType(struct soap*, const char*, ns3__IncentiveDetailsType *, const char*);
SOAP_FMAC1 ns3__IncentiveDetailsType * SOAP_FMAC2 soap_instantiate_ns3__IncentiveDetailsType(struct soap*, int, const char*, const char*, size_t*);

inline ns3__IncentiveDetailsType * soap_new_ns3__IncentiveDetailsType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__IncentiveDetailsType(soap, n, NULL, NULL, NULL);
}

inline ns3__IncentiveDetailsType * soap_new_req_ns3__IncentiveDetailsType(
	struct soap *soap)
{
	ns3__IncentiveDetailsType *_p = soap_new_ns3__IncentiveDetailsType(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns3__IncentiveDetailsType * soap_new_set_ns3__IncentiveDetailsType(
	struct soap *soap,
	std::string *UniqueIdentifier,
	enum ns3__IncentiveSiteAppliedOnType *SiteAppliedOn,
	ns2__BasicAmountType *TotalDiscountAmount,
	enum ns3__IncentiveAppliedStatusType *Status,
	std::string *ErrorCode,
	const std::vector<ns3__IncentiveAppliedDetailsType *> & IncentiveAppliedDetails)
{
	ns3__IncentiveDetailsType *_p = soap_new_ns3__IncentiveDetailsType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__IncentiveDetailsType::UniqueIdentifier = UniqueIdentifier;
		_p->ns3__IncentiveDetailsType::SiteAppliedOn = SiteAppliedOn;
		_p->ns3__IncentiveDetailsType::TotalDiscountAmount = TotalDiscountAmount;
		_p->ns3__IncentiveDetailsType::Status = Status;
		_p->ns3__IncentiveDetailsType::ErrorCode = ErrorCode;
		_p->ns3__IncentiveDetailsType::IncentiveAppliedDetails = IncentiveAppliedDetails;
	}
	return _p;
}

inline int soap_write_ns3__IncentiveDetailsType(struct soap *soap, ns3__IncentiveDetailsType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:IncentiveDetailsType", p->soap_type() == SOAP_TYPE_ns3__IncentiveDetailsType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__IncentiveDetailsType(struct soap *soap, const char *URL, ns3__IncentiveDetailsType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:IncentiveDetailsType", p->soap_type() == SOAP_TYPE_ns3__IncentiveDetailsType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__IncentiveDetailsType(struct soap *soap, const char *URL, ns3__IncentiveDetailsType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:IncentiveDetailsType", p->soap_type() == SOAP_TYPE_ns3__IncentiveDetailsType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__IncentiveDetailsType * SOAP_FMAC4 soap_get_ns3__IncentiveDetailsType(struct soap*, ns3__IncentiveDetailsType *, const char*, const char*);

inline int soap_read_ns3__IncentiveDetailsType(struct soap *soap, ns3__IncentiveDetailsType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns3__IncentiveDetailsType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__IncentiveDetailsType(struct soap *soap, const char *URL, ns3__IncentiveDetailsType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__IncentiveDetailsType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__IncentiveDetailsType(struct soap *soap, ns3__IncentiveDetailsType *p)
{
	if (soap_read_ns3__IncentiveDetailsType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__PaymentDetailsType_DEFINED
#define SOAP_TYPE_ns3__PaymentDetailsType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__PaymentDetailsType(struct soap*, const char*, int, const ns3__PaymentDetailsType *, const char*);
SOAP_FMAC3 ns3__PaymentDetailsType * SOAP_FMAC4 soap_in_ns3__PaymentDetailsType(struct soap*, const char*, ns3__PaymentDetailsType *, const char*);
SOAP_FMAC1 ns3__PaymentDetailsType * SOAP_FMAC2 soap_instantiate_ns3__PaymentDetailsType(struct soap*, int, const char*, const char*, size_t*);

inline ns3__PaymentDetailsType * soap_new_ns3__PaymentDetailsType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__PaymentDetailsType(soap, n, NULL, NULL, NULL);
}

inline ns3__PaymentDetailsType * soap_new_req_ns3__PaymentDetailsType(
	struct soap *soap)
{
	ns3__PaymentDetailsType *_p = soap_new_ns3__PaymentDetailsType(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns3__PaymentDetailsType * soap_new_set_ns3__PaymentDetailsType(
	struct soap *soap,
	ns2__BasicAmountType *OrderTotal,
	ns2__BasicAmountType *ItemTotal,
	ns2__BasicAmountType *ShippingTotal,
	ns2__BasicAmountType *HandlingTotal,
	ns2__BasicAmountType *TaxTotal,
	std::string *OrderDescription,
	std::string *Custom,
	std::string *InvoiceID,
	std::string *ButtonSource,
	std::string *NotifyURL,
	ns3__AddressType *ShipToAddress,
	std::string *MultiShipping,
	std::string *FulfillmentReferenceNumber,
	ns3__AddressType *FulfillmentAddress,
	enum ns3__PaymentCategoryType *PaymentCategoryType,
	enum ns3__LocationType *LocationType,
	enum ns3__ShippingServiceCodeType *ShippingMethod,
	time_t *ProfileAddressChangeDate,
	const std::vector<ns3__PaymentDetailsItemType *> & PaymentDetailsItem,
	ns2__BasicAmountType *InsuranceTotal,
	ns2__BasicAmountType *ShippingDiscount,
	std::string *InsuranceOptionOffered,
	enum ns3__AllowedPaymentMethodType *AllowedPaymentMethod,
	ns4__EnhancedPaymentDataType *EnhancedPaymentData,
	ns3__SellerDetailsType *SellerDetails,
	std::string *NoteText,
	std::string *TransactionId,
	enum ns3__PaymentActionCodeType *PaymentAction,
	std::string *PaymentRequestID,
	std::string *OrderURL,
	std::string *SoftDescriptor,
	std::string *BranchLevel,
	ns3__OfferDetailsType *OfferDetails,
	enum ns3__RecurringFlagType *Recurring,
	enum ns3__PaymentReasonType *PaymentReason,
	std::string *LocationID,
	const std::vector<ns3__DiscountInfoType *> & RedeemedOffers,
	const std::vector<ns3__DiscountInfoType *> & CummulativePoints,
	const std::vector<ns3__MerchantDataType *> & MerchantData)
{
	ns3__PaymentDetailsType *_p = soap_new_ns3__PaymentDetailsType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__PaymentDetailsType::OrderTotal = OrderTotal;
		_p->ns3__PaymentDetailsType::ItemTotal = ItemTotal;
		_p->ns3__PaymentDetailsType::ShippingTotal = ShippingTotal;
		_p->ns3__PaymentDetailsType::HandlingTotal = HandlingTotal;
		_p->ns3__PaymentDetailsType::TaxTotal = TaxTotal;
		_p->ns3__PaymentDetailsType::OrderDescription = OrderDescription;
		_p->ns3__PaymentDetailsType::Custom = Custom;
		_p->ns3__PaymentDetailsType::InvoiceID = InvoiceID;
		_p->ns3__PaymentDetailsType::ButtonSource = ButtonSource;
		_p->ns3__PaymentDetailsType::NotifyURL = NotifyURL;
		_p->ns3__PaymentDetailsType::ShipToAddress = ShipToAddress;
		_p->ns3__PaymentDetailsType::MultiShipping = MultiShipping;
		_p->ns3__PaymentDetailsType::FulfillmentReferenceNumber = FulfillmentReferenceNumber;
		_p->ns3__PaymentDetailsType::FulfillmentAddress = FulfillmentAddress;
		_p->ns3__PaymentDetailsType::PaymentCategoryType = PaymentCategoryType;
		_p->ns3__PaymentDetailsType::LocationType = LocationType;
		_p->ns3__PaymentDetailsType::ShippingMethod = ShippingMethod;
		_p->ns3__PaymentDetailsType::ProfileAddressChangeDate = ProfileAddressChangeDate;
		_p->ns3__PaymentDetailsType::PaymentDetailsItem = PaymentDetailsItem;
		_p->ns3__PaymentDetailsType::InsuranceTotal = InsuranceTotal;
		_p->ns3__PaymentDetailsType::ShippingDiscount = ShippingDiscount;
		_p->ns3__PaymentDetailsType::InsuranceOptionOffered = InsuranceOptionOffered;
		_p->ns3__PaymentDetailsType::AllowedPaymentMethod = AllowedPaymentMethod;
		_p->ns3__PaymentDetailsType::EnhancedPaymentData = EnhancedPaymentData;
		_p->ns3__PaymentDetailsType::SellerDetails = SellerDetails;
		_p->ns3__PaymentDetailsType::NoteText = NoteText;
		_p->ns3__PaymentDetailsType::TransactionId = TransactionId;
		_p->ns3__PaymentDetailsType::PaymentAction = PaymentAction;
		_p->ns3__PaymentDetailsType::PaymentRequestID = PaymentRequestID;
		_p->ns3__PaymentDetailsType::OrderURL = OrderURL;
		_p->ns3__PaymentDetailsType::SoftDescriptor = SoftDescriptor;
		_p->ns3__PaymentDetailsType::BranchLevel = BranchLevel;
		_p->ns3__PaymentDetailsType::OfferDetails = OfferDetails;
		_p->ns3__PaymentDetailsType::Recurring = Recurring;
		_p->ns3__PaymentDetailsType::PaymentReason = PaymentReason;
		_p->ns3__PaymentDetailsType::LocationID = LocationID;
		_p->ns3__PaymentDetailsType::RedeemedOffers = RedeemedOffers;
		_p->ns3__PaymentDetailsType::CummulativePoints = CummulativePoints;
		_p->ns3__PaymentDetailsType::MerchantData = MerchantData;
	}
	return _p;
}

inline int soap_write_ns3__PaymentDetailsType(struct soap *soap, ns3__PaymentDetailsType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:PaymentDetailsType", p->soap_type() == SOAP_TYPE_ns3__PaymentDetailsType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__PaymentDetailsType(struct soap *soap, const char *URL, ns3__PaymentDetailsType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:PaymentDetailsType", p->soap_type() == SOAP_TYPE_ns3__PaymentDetailsType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__PaymentDetailsType(struct soap *soap, const char *URL, ns3__PaymentDetailsType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:PaymentDetailsType", p->soap_type() == SOAP_TYPE_ns3__PaymentDetailsType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__PaymentDetailsType * SOAP_FMAC4 soap_get_ns3__PaymentDetailsType(struct soap*, ns3__PaymentDetailsType *, const char*, const char*);

inline int soap_read_ns3__PaymentDetailsType(struct soap *soap, ns3__PaymentDetailsType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns3__PaymentDetailsType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__PaymentDetailsType(struct soap *soap, const char *URL, ns3__PaymentDetailsType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__PaymentDetailsType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__PaymentDetailsType(struct soap *soap, ns3__PaymentDetailsType *p)
{
	if (soap_read_ns3__PaymentDetailsType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__OfferCouponInfoType_DEFINED
#define SOAP_TYPE_ns3__OfferCouponInfoType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__OfferCouponInfoType(struct soap*, const char*, int, const ns3__OfferCouponInfoType *, const char*);
SOAP_FMAC3 ns3__OfferCouponInfoType * SOAP_FMAC4 soap_in_ns3__OfferCouponInfoType(struct soap*, const char*, ns3__OfferCouponInfoType *, const char*);
SOAP_FMAC1 ns3__OfferCouponInfoType * SOAP_FMAC2 soap_instantiate_ns3__OfferCouponInfoType(struct soap*, int, const char*, const char*, size_t*);

inline ns3__OfferCouponInfoType * soap_new_ns3__OfferCouponInfoType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__OfferCouponInfoType(soap, n, NULL, NULL, NULL);
}

inline ns3__OfferCouponInfoType * soap_new_req_ns3__OfferCouponInfoType(
	struct soap *soap)
{
	ns3__OfferCouponInfoType *_p = soap_new_ns3__OfferCouponInfoType(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns3__OfferCouponInfoType * soap_new_set_ns3__OfferCouponInfoType(
	struct soap *soap,
	std::string *Type,
	std::string *ID,
	std::string *Amount,
	std::string *AmountCurrency)
{
	ns3__OfferCouponInfoType *_p = soap_new_ns3__OfferCouponInfoType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__OfferCouponInfoType::Type = Type;
		_p->ns3__OfferCouponInfoType::ID = ID;
		_p->ns3__OfferCouponInfoType::Amount = Amount;
		_p->ns3__OfferCouponInfoType::AmountCurrency = AmountCurrency;
	}
	return _p;
}

inline int soap_write_ns3__OfferCouponInfoType(struct soap *soap, ns3__OfferCouponInfoType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:OfferCouponInfoType", p->soap_type() == SOAP_TYPE_ns3__OfferCouponInfoType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__OfferCouponInfoType(struct soap *soap, const char *URL, ns3__OfferCouponInfoType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:OfferCouponInfoType", p->soap_type() == SOAP_TYPE_ns3__OfferCouponInfoType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__OfferCouponInfoType(struct soap *soap, const char *URL, ns3__OfferCouponInfoType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:OfferCouponInfoType", p->soap_type() == SOAP_TYPE_ns3__OfferCouponInfoType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__OfferCouponInfoType * SOAP_FMAC4 soap_get_ns3__OfferCouponInfoType(struct soap*, ns3__OfferCouponInfoType *, const char*, const char*);

inline int soap_read_ns3__OfferCouponInfoType(struct soap *soap, ns3__OfferCouponInfoType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns3__OfferCouponInfoType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__OfferCouponInfoType(struct soap *soap, const char *URL, ns3__OfferCouponInfoType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__OfferCouponInfoType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__OfferCouponInfoType(struct soap *soap, ns3__OfferCouponInfoType *p)
{
	if (soap_read_ns3__OfferCouponInfoType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__PaymentItemInfoType_DEFINED
#define SOAP_TYPE_ns3__PaymentItemInfoType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__PaymentItemInfoType(struct soap*, const char*, int, const ns3__PaymentItemInfoType *, const char*);
SOAP_FMAC3 ns3__PaymentItemInfoType * SOAP_FMAC4 soap_in_ns3__PaymentItemInfoType(struct soap*, const char*, ns3__PaymentItemInfoType *, const char*);
SOAP_FMAC1 ns3__PaymentItemInfoType * SOAP_FMAC2 soap_instantiate_ns3__PaymentItemInfoType(struct soap*, int, const char*, const char*, size_t*);

inline ns3__PaymentItemInfoType * soap_new_ns3__PaymentItemInfoType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__PaymentItemInfoType(soap, n, NULL, NULL, NULL);
}

inline ns3__PaymentItemInfoType * soap_new_req_ns3__PaymentItemInfoType(
	struct soap *soap)
{
	ns3__PaymentItemInfoType *_p = soap_new_ns3__PaymentItemInfoType(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns3__PaymentItemInfoType * soap_new_set_ns3__PaymentItemInfoType(
	struct soap *soap,
	std::string *InvoiceID,
	std::string *Custom,
	std::string *Memo,
	std::string *SalesTax,
	const std::vector<ns3__PaymentItemType *> & PaymentItem,
	ns3__SubscriptionInfoType *Subscription,
	ns3__AuctionInfoType *Auction)
{
	ns3__PaymentItemInfoType *_p = soap_new_ns3__PaymentItemInfoType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__PaymentItemInfoType::InvoiceID = InvoiceID;
		_p->ns3__PaymentItemInfoType::Custom = Custom;
		_p->ns3__PaymentItemInfoType::Memo = Memo;
		_p->ns3__PaymentItemInfoType::SalesTax = SalesTax;
		_p->ns3__PaymentItemInfoType::PaymentItem = PaymentItem;
		_p->ns3__PaymentItemInfoType::Subscription = Subscription;
		_p->ns3__PaymentItemInfoType::Auction = Auction;
	}
	return _p;
}

inline int soap_write_ns3__PaymentItemInfoType(struct soap *soap, ns3__PaymentItemInfoType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:PaymentItemInfoType", p->soap_type() == SOAP_TYPE_ns3__PaymentItemInfoType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__PaymentItemInfoType(struct soap *soap, const char *URL, ns3__PaymentItemInfoType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:PaymentItemInfoType", p->soap_type() == SOAP_TYPE_ns3__PaymentItemInfoType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__PaymentItemInfoType(struct soap *soap, const char *URL, ns3__PaymentItemInfoType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:PaymentItemInfoType", p->soap_type() == SOAP_TYPE_ns3__PaymentItemInfoType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__PaymentItemInfoType * SOAP_FMAC4 soap_get_ns3__PaymentItemInfoType(struct soap*, ns3__PaymentItemInfoType *, const char*, const char*);

inline int soap_read_ns3__PaymentItemInfoType(struct soap *soap, ns3__PaymentItemInfoType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns3__PaymentItemInfoType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__PaymentItemInfoType(struct soap *soap, const char *URL, ns3__PaymentItemInfoType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__PaymentItemInfoType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__PaymentItemInfoType(struct soap *soap, ns3__PaymentItemInfoType *p)
{
	if (soap_read_ns3__PaymentItemInfoType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__PaymentItemType_DEFINED
#define SOAP_TYPE_ns3__PaymentItemType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__PaymentItemType(struct soap*, const char*, int, const ns3__PaymentItemType *, const char*);
SOAP_FMAC3 ns3__PaymentItemType * SOAP_FMAC4 soap_in_ns3__PaymentItemType(struct soap*, const char*, ns3__PaymentItemType *, const char*);
SOAP_FMAC1 ns3__PaymentItemType * SOAP_FMAC2 soap_instantiate_ns3__PaymentItemType(struct soap*, int, const char*, const char*, size_t*);

inline ns3__PaymentItemType * soap_new_ns3__PaymentItemType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__PaymentItemType(soap, n, NULL, NULL, NULL);
}

inline ns3__PaymentItemType * soap_new_req_ns3__PaymentItemType(
	struct soap *soap)
{
	ns3__PaymentItemType *_p = soap_new_ns3__PaymentItemType(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns3__PaymentItemType * soap_new_set_ns3__PaymentItemType(
	struct soap *soap,
	std::string *EbayItemTxnId,
	std::string *Name,
	std::string *Number,
	std::string *Quantity,
	std::string *SalesTax,
	std::string *ShippingAmount,
	std::string *HandlingAmount,
	ns3__InvoiceItemType *InvoiceItemDetails,
	std::string *CouponID,
	std::string *CouponAmount,
	std::string *CouponAmountCurrency,
	std::string *LoyaltyCardDiscountAmount,
	std::string *LoyaltyCardDiscountCurrency,
	ns2__BasicAmountType *Amount,
	const std::vector<ns3__OptionType *> & Options)
{
	ns3__PaymentItemType *_p = soap_new_ns3__PaymentItemType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__PaymentItemType::EbayItemTxnId = EbayItemTxnId;
		_p->ns3__PaymentItemType::Name = Name;
		_p->ns3__PaymentItemType::Number = Number;
		_p->ns3__PaymentItemType::Quantity = Quantity;
		_p->ns3__PaymentItemType::SalesTax = SalesTax;
		_p->ns3__PaymentItemType::ShippingAmount = ShippingAmount;
		_p->ns3__PaymentItemType::HandlingAmount = HandlingAmount;
		_p->ns3__PaymentItemType::InvoiceItemDetails = InvoiceItemDetails;
		_p->ns3__PaymentItemType::CouponID = CouponID;
		_p->ns3__PaymentItemType::CouponAmount = CouponAmount;
		_p->ns3__PaymentItemType::CouponAmountCurrency = CouponAmountCurrency;
		_p->ns3__PaymentItemType::LoyaltyCardDiscountAmount = LoyaltyCardDiscountAmount;
		_p->ns3__PaymentItemType::LoyaltyCardDiscountCurrency = LoyaltyCardDiscountCurrency;
		_p->ns3__PaymentItemType::Amount = Amount;
		_p->ns3__PaymentItemType::Options = Options;
	}
	return _p;
}

inline int soap_write_ns3__PaymentItemType(struct soap *soap, ns3__PaymentItemType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:PaymentItemType", p->soap_type() == SOAP_TYPE_ns3__PaymentItemType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__PaymentItemType(struct soap *soap, const char *URL, ns3__PaymentItemType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:PaymentItemType", p->soap_type() == SOAP_TYPE_ns3__PaymentItemType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__PaymentItemType(struct soap *soap, const char *URL, ns3__PaymentItemType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:PaymentItemType", p->soap_type() == SOAP_TYPE_ns3__PaymentItemType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__PaymentItemType * SOAP_FMAC4 soap_get_ns3__PaymentItemType(struct soap*, ns3__PaymentItemType *, const char*, const char*);

inline int soap_read_ns3__PaymentItemType(struct soap *soap, ns3__PaymentItemType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns3__PaymentItemType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__PaymentItemType(struct soap *soap, const char *URL, ns3__PaymentItemType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__PaymentItemType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__PaymentItemType(struct soap *soap, ns3__PaymentItemType *p)
{
	if (soap_read_ns3__PaymentItemType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__PaymentDetailsItemType_DEFINED
#define SOAP_TYPE_ns3__PaymentDetailsItemType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__PaymentDetailsItemType(struct soap*, const char*, int, const ns3__PaymentDetailsItemType *, const char*);
SOAP_FMAC3 ns3__PaymentDetailsItemType * SOAP_FMAC4 soap_in_ns3__PaymentDetailsItemType(struct soap*, const char*, ns3__PaymentDetailsItemType *, const char*);
SOAP_FMAC1 ns3__PaymentDetailsItemType * SOAP_FMAC2 soap_instantiate_ns3__PaymentDetailsItemType(struct soap*, int, const char*, const char*, size_t*);

inline ns3__PaymentDetailsItemType * soap_new_ns3__PaymentDetailsItemType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__PaymentDetailsItemType(soap, n, NULL, NULL, NULL);
}

inline ns3__PaymentDetailsItemType * soap_new_req_ns3__PaymentDetailsItemType(
	struct soap *soap)
{
	ns3__PaymentDetailsItemType *_p = soap_new_ns3__PaymentDetailsItemType(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns3__PaymentDetailsItemType * soap_new_set_ns3__PaymentDetailsItemType(
	struct soap *soap,
	std::string *Name,
	std::string *Number,
	std::string *Quantity,
	ns2__BasicAmountType *Tax,
	ns2__BasicAmountType *Amount,
	ns3__EbayItemPaymentDetailsItemType *EbayItemPaymentDetailsItem,
	std::string *PromoCode,
	enum ns3__ProductCategoryType *ProductCategory,
	std::string *Description,
	ns2__MeasureType *ItemWeight,
	ns2__MeasureType *ItemLength,
	ns2__MeasureType *ItemWidth,
	ns2__MeasureType *ItemHeight,
	std::string *ItemURL,
	ns4__EnhancedItemDataType *EnhancedItemData,
	enum ns3__ItemCategoryType *ItemCategory)
{
	ns3__PaymentDetailsItemType *_p = soap_new_ns3__PaymentDetailsItemType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__PaymentDetailsItemType::Name = Name;
		_p->ns3__PaymentDetailsItemType::Number = Number;
		_p->ns3__PaymentDetailsItemType::Quantity = Quantity;
		_p->ns3__PaymentDetailsItemType::Tax = Tax;
		_p->ns3__PaymentDetailsItemType::Amount = Amount;
		_p->ns3__PaymentDetailsItemType::EbayItemPaymentDetailsItem = EbayItemPaymentDetailsItem;
		_p->ns3__PaymentDetailsItemType::PromoCode = PromoCode;
		_p->ns3__PaymentDetailsItemType::ProductCategory = ProductCategory;
		_p->ns3__PaymentDetailsItemType::Description = Description;
		_p->ns3__PaymentDetailsItemType::ItemWeight = ItemWeight;
		_p->ns3__PaymentDetailsItemType::ItemLength = ItemLength;
		_p->ns3__PaymentDetailsItemType::ItemWidth = ItemWidth;
		_p->ns3__PaymentDetailsItemType::ItemHeight = ItemHeight;
		_p->ns3__PaymentDetailsItemType::ItemURL = ItemURL;
		_p->ns3__PaymentDetailsItemType::EnhancedItemData = EnhancedItemData;
		_p->ns3__PaymentDetailsItemType::ItemCategory = ItemCategory;
	}
	return _p;
}

inline int soap_write_ns3__PaymentDetailsItemType(struct soap *soap, ns3__PaymentDetailsItemType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:PaymentDetailsItemType", p->soap_type() == SOAP_TYPE_ns3__PaymentDetailsItemType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__PaymentDetailsItemType(struct soap *soap, const char *URL, ns3__PaymentDetailsItemType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:PaymentDetailsItemType", p->soap_type() == SOAP_TYPE_ns3__PaymentDetailsItemType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__PaymentDetailsItemType(struct soap *soap, const char *URL, ns3__PaymentDetailsItemType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:PaymentDetailsItemType", p->soap_type() == SOAP_TYPE_ns3__PaymentDetailsItemType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__PaymentDetailsItemType * SOAP_FMAC4 soap_get_ns3__PaymentDetailsItemType(struct soap*, ns3__PaymentDetailsItemType *, const char*, const char*);

inline int soap_read_ns3__PaymentDetailsItemType(struct soap *soap, ns3__PaymentDetailsItemType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns3__PaymentDetailsItemType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__PaymentDetailsItemType(struct soap *soap, const char *URL, ns3__PaymentDetailsItemType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__PaymentDetailsItemType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__PaymentDetailsItemType(struct soap *soap, ns3__PaymentDetailsItemType *p)
{
	if (soap_read_ns3__PaymentDetailsItemType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__EbayItemPaymentDetailsItemType_DEFINED
#define SOAP_TYPE_ns3__EbayItemPaymentDetailsItemType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__EbayItemPaymentDetailsItemType(struct soap*, const char*, int, const ns3__EbayItemPaymentDetailsItemType *, const char*);
SOAP_FMAC3 ns3__EbayItemPaymentDetailsItemType * SOAP_FMAC4 soap_in_ns3__EbayItemPaymentDetailsItemType(struct soap*, const char*, ns3__EbayItemPaymentDetailsItemType *, const char*);
SOAP_FMAC1 ns3__EbayItemPaymentDetailsItemType * SOAP_FMAC2 soap_instantiate_ns3__EbayItemPaymentDetailsItemType(struct soap*, int, const char*, const char*, size_t*);

inline ns3__EbayItemPaymentDetailsItemType * soap_new_ns3__EbayItemPaymentDetailsItemType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__EbayItemPaymentDetailsItemType(soap, n, NULL, NULL, NULL);
}

inline ns3__EbayItemPaymentDetailsItemType * soap_new_req_ns3__EbayItemPaymentDetailsItemType(
	struct soap *soap)
{
	ns3__EbayItemPaymentDetailsItemType *_p = soap_new_ns3__EbayItemPaymentDetailsItemType(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns3__EbayItemPaymentDetailsItemType * soap_new_set_ns3__EbayItemPaymentDetailsItemType(
	struct soap *soap,
	std::string *ItemNumber,
	std::string *AuctionTransactionId,
	std::string *OrderId,
	std::string *CartID)
{
	ns3__EbayItemPaymentDetailsItemType *_p = soap_new_ns3__EbayItemPaymentDetailsItemType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__EbayItemPaymentDetailsItemType::ItemNumber = ItemNumber;
		_p->ns3__EbayItemPaymentDetailsItemType::AuctionTransactionId = AuctionTransactionId;
		_p->ns3__EbayItemPaymentDetailsItemType::OrderId = OrderId;
		_p->ns3__EbayItemPaymentDetailsItemType::CartID = CartID;
	}
	return _p;
}

inline int soap_write_ns3__EbayItemPaymentDetailsItemType(struct soap *soap, ns3__EbayItemPaymentDetailsItemType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:EbayItemPaymentDetailsItemType", p->soap_type() == SOAP_TYPE_ns3__EbayItemPaymentDetailsItemType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__EbayItemPaymentDetailsItemType(struct soap *soap, const char *URL, ns3__EbayItemPaymentDetailsItemType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:EbayItemPaymentDetailsItemType", p->soap_type() == SOAP_TYPE_ns3__EbayItemPaymentDetailsItemType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__EbayItemPaymentDetailsItemType(struct soap *soap, const char *URL, ns3__EbayItemPaymentDetailsItemType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:EbayItemPaymentDetailsItemType", p->soap_type() == SOAP_TYPE_ns3__EbayItemPaymentDetailsItemType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__EbayItemPaymentDetailsItemType * SOAP_FMAC4 soap_get_ns3__EbayItemPaymentDetailsItemType(struct soap*, ns3__EbayItemPaymentDetailsItemType *, const char*, const char*);

inline int soap_read_ns3__EbayItemPaymentDetailsItemType(struct soap *soap, ns3__EbayItemPaymentDetailsItemType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns3__EbayItemPaymentDetailsItemType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__EbayItemPaymentDetailsItemType(struct soap *soap, const char *URL, ns3__EbayItemPaymentDetailsItemType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__EbayItemPaymentDetailsItemType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__EbayItemPaymentDetailsItemType(struct soap *soap, ns3__EbayItemPaymentDetailsItemType *p)
{
	if (soap_read_ns3__EbayItemPaymentDetailsItemType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__OptionType_DEFINED
#define SOAP_TYPE_ns3__OptionType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__OptionType(struct soap*, const char*, int, const ns3__OptionType *, const char*);
SOAP_FMAC3 ns3__OptionType * SOAP_FMAC4 soap_in_ns3__OptionType(struct soap*, const char*, ns3__OptionType *, const char*);
SOAP_FMAC1 ns3__OptionType * SOAP_FMAC2 soap_instantiate_ns3__OptionType(struct soap*, int, const char*, const char*, size_t*);

inline ns3__OptionType * soap_new_ns3__OptionType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__OptionType(soap, n, NULL, NULL, NULL);
}

inline ns3__OptionType * soap_new_req_ns3__OptionType(
	struct soap *soap,
	const std::string& name,
	const std::string& value)
{
	ns3__OptionType *_p = soap_new_ns3__OptionType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__OptionType::name = name;
		_p->ns3__OptionType::value = value;
	}
	return _p;
}

inline ns3__OptionType * soap_new_set_ns3__OptionType(
	struct soap *soap,
	const std::string& name,
	const std::string& value)
{
	ns3__OptionType *_p = soap_new_ns3__OptionType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__OptionType::name = name;
		_p->ns3__OptionType::value = value;
	}
	return _p;
}

inline int soap_write_ns3__OptionType(struct soap *soap, ns3__OptionType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:OptionType", p->soap_type() == SOAP_TYPE_ns3__OptionType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__OptionType(struct soap *soap, const char *URL, ns3__OptionType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:OptionType", p->soap_type() == SOAP_TYPE_ns3__OptionType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__OptionType(struct soap *soap, const char *URL, ns3__OptionType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:OptionType", p->soap_type() == SOAP_TYPE_ns3__OptionType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__OptionType * SOAP_FMAC4 soap_get_ns3__OptionType(struct soap*, ns3__OptionType *, const char*, const char*);

inline int soap_read_ns3__OptionType(struct soap *soap, ns3__OptionType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns3__OptionType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__OptionType(struct soap *soap, const char *URL, ns3__OptionType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__OptionType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__OptionType(struct soap *soap, ns3__OptionType *p)
{
	if (soap_read_ns3__OptionType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__AuctionInfoType_DEFINED
#define SOAP_TYPE_ns3__AuctionInfoType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__AuctionInfoType(struct soap*, const char*, int, const ns3__AuctionInfoType *, const char*);
SOAP_FMAC3 ns3__AuctionInfoType * SOAP_FMAC4 soap_in_ns3__AuctionInfoType(struct soap*, const char*, ns3__AuctionInfoType *, const char*);
SOAP_FMAC1 ns3__AuctionInfoType * SOAP_FMAC2 soap_instantiate_ns3__AuctionInfoType(struct soap*, int, const char*, const char*, size_t*);

inline ns3__AuctionInfoType * soap_new_ns3__AuctionInfoType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__AuctionInfoType(soap, n, NULL, NULL, NULL);
}

inline ns3__AuctionInfoType * soap_new_req_ns3__AuctionInfoType(
	struct soap *soap,
	const std::string& multiItem)
{
	ns3__AuctionInfoType *_p = soap_new_ns3__AuctionInfoType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__AuctionInfoType::multiItem = multiItem;
	}
	return _p;
}

inline ns3__AuctionInfoType * soap_new_set_ns3__AuctionInfoType(
	struct soap *soap,
	std::string *BuyerID,
	time_t *ClosingDate,
	const std::string& multiItem)
{
	ns3__AuctionInfoType *_p = soap_new_ns3__AuctionInfoType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__AuctionInfoType::BuyerID = BuyerID;
		_p->ns3__AuctionInfoType::ClosingDate = ClosingDate;
		_p->ns3__AuctionInfoType::multiItem = multiItem;
	}
	return _p;
}

inline int soap_write_ns3__AuctionInfoType(struct soap *soap, ns3__AuctionInfoType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:AuctionInfoType", p->soap_type() == SOAP_TYPE_ns3__AuctionInfoType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__AuctionInfoType(struct soap *soap, const char *URL, ns3__AuctionInfoType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:AuctionInfoType", p->soap_type() == SOAP_TYPE_ns3__AuctionInfoType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__AuctionInfoType(struct soap *soap, const char *URL, ns3__AuctionInfoType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:AuctionInfoType", p->soap_type() == SOAP_TYPE_ns3__AuctionInfoType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__AuctionInfoType * SOAP_FMAC4 soap_get_ns3__AuctionInfoType(struct soap*, ns3__AuctionInfoType *, const char*, const char*);

inline int soap_read_ns3__AuctionInfoType(struct soap *soap, ns3__AuctionInfoType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns3__AuctionInfoType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__AuctionInfoType(struct soap *soap, const char *URL, ns3__AuctionInfoType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__AuctionInfoType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__AuctionInfoType(struct soap *soap, ns3__AuctionInfoType *p)
{
	if (soap_read_ns3__AuctionInfoType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__SubscriptionInfoType_DEFINED
#define SOAP_TYPE_ns3__SubscriptionInfoType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__SubscriptionInfoType(struct soap*, const char*, int, const ns3__SubscriptionInfoType *, const char*);
SOAP_FMAC3 ns3__SubscriptionInfoType * SOAP_FMAC4 soap_in_ns3__SubscriptionInfoType(struct soap*, const char*, ns3__SubscriptionInfoType *, const char*);
SOAP_FMAC1 ns3__SubscriptionInfoType * SOAP_FMAC2 soap_instantiate_ns3__SubscriptionInfoType(struct soap*, int, const char*, const char*, size_t*);

inline ns3__SubscriptionInfoType * soap_new_ns3__SubscriptionInfoType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__SubscriptionInfoType(soap, n, NULL, NULL, NULL);
}

inline ns3__SubscriptionInfoType * soap_new_req_ns3__SubscriptionInfoType(
	struct soap *soap,
	const std::string& SubscriptionID,
	const std::string& reattempt,
	const std::string& recurring)
{
	ns3__SubscriptionInfoType *_p = soap_new_ns3__SubscriptionInfoType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__SubscriptionInfoType::SubscriptionID = SubscriptionID;
		_p->ns3__SubscriptionInfoType::reattempt = reattempt;
		_p->ns3__SubscriptionInfoType::recurring = recurring;
	}
	return _p;
}

inline ns3__SubscriptionInfoType * soap_new_set_ns3__SubscriptionInfoType(
	struct soap *soap,
	const std::string& SubscriptionID,
	time_t *SubscriptionDate,
	time_t *EffectiveDate,
	time_t *RetryTime,
	std::string *Username,
	std::string *Password,
	std::string *Recurrences,
	const std::vector<ns3__SubscriptionTermsType *> & Terms,
	const std::string& reattempt,
	const std::string& recurring)
{
	ns3__SubscriptionInfoType *_p = soap_new_ns3__SubscriptionInfoType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__SubscriptionInfoType::SubscriptionID = SubscriptionID;
		_p->ns3__SubscriptionInfoType::SubscriptionDate = SubscriptionDate;
		_p->ns3__SubscriptionInfoType::EffectiveDate = EffectiveDate;
		_p->ns3__SubscriptionInfoType::RetryTime = RetryTime;
		_p->ns3__SubscriptionInfoType::Username = Username;
		_p->ns3__SubscriptionInfoType::Password = Password;
		_p->ns3__SubscriptionInfoType::Recurrences = Recurrences;
		_p->ns3__SubscriptionInfoType::Terms = Terms;
		_p->ns3__SubscriptionInfoType::reattempt = reattempt;
		_p->ns3__SubscriptionInfoType::recurring = recurring;
	}
	return _p;
}

inline int soap_write_ns3__SubscriptionInfoType(struct soap *soap, ns3__SubscriptionInfoType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:SubscriptionInfoType", p->soap_type() == SOAP_TYPE_ns3__SubscriptionInfoType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__SubscriptionInfoType(struct soap *soap, const char *URL, ns3__SubscriptionInfoType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:SubscriptionInfoType", p->soap_type() == SOAP_TYPE_ns3__SubscriptionInfoType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__SubscriptionInfoType(struct soap *soap, const char *URL, ns3__SubscriptionInfoType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:SubscriptionInfoType", p->soap_type() == SOAP_TYPE_ns3__SubscriptionInfoType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__SubscriptionInfoType * SOAP_FMAC4 soap_get_ns3__SubscriptionInfoType(struct soap*, ns3__SubscriptionInfoType *, const char*, const char*);

inline int soap_read_ns3__SubscriptionInfoType(struct soap *soap, ns3__SubscriptionInfoType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns3__SubscriptionInfoType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__SubscriptionInfoType(struct soap *soap, const char *URL, ns3__SubscriptionInfoType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__SubscriptionInfoType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__SubscriptionInfoType(struct soap *soap, ns3__SubscriptionInfoType *p)
{
	if (soap_read_ns3__SubscriptionInfoType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__SubscriptionTermsType_DEFINED
#define SOAP_TYPE_ns3__SubscriptionTermsType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__SubscriptionTermsType(struct soap*, const char*, int, const ns3__SubscriptionTermsType *, const char*);
SOAP_FMAC3 ns3__SubscriptionTermsType * SOAP_FMAC4 soap_in_ns3__SubscriptionTermsType(struct soap*, const char*, ns3__SubscriptionTermsType *, const char*);
SOAP_FMAC1 ns3__SubscriptionTermsType * SOAP_FMAC2 soap_instantiate_ns3__SubscriptionTermsType(struct soap*, int, const char*, const char*, size_t*);

inline ns3__SubscriptionTermsType * soap_new_ns3__SubscriptionTermsType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__SubscriptionTermsType(soap, n, NULL, NULL, NULL);
}

inline ns3__SubscriptionTermsType * soap_new_req_ns3__SubscriptionTermsType(
	struct soap *soap,
	ns2__BasicAmountType *Amount,
	const std::string& period)
{
	ns3__SubscriptionTermsType *_p = soap_new_ns3__SubscriptionTermsType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__SubscriptionTermsType::Amount = Amount;
		_p->ns3__SubscriptionTermsType::period = period;
	}
	return _p;
}

inline ns3__SubscriptionTermsType * soap_new_set_ns3__SubscriptionTermsType(
	struct soap *soap,
	ns2__BasicAmountType *Amount,
	const std::string& period)
{
	ns3__SubscriptionTermsType *_p = soap_new_ns3__SubscriptionTermsType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__SubscriptionTermsType::Amount = Amount;
		_p->ns3__SubscriptionTermsType::period = period;
	}
	return _p;
}

inline int soap_write_ns3__SubscriptionTermsType(struct soap *soap, ns3__SubscriptionTermsType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:SubscriptionTermsType", p->soap_type() == SOAP_TYPE_ns3__SubscriptionTermsType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__SubscriptionTermsType(struct soap *soap, const char *URL, ns3__SubscriptionTermsType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:SubscriptionTermsType", p->soap_type() == SOAP_TYPE_ns3__SubscriptionTermsType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__SubscriptionTermsType(struct soap *soap, const char *URL, ns3__SubscriptionTermsType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:SubscriptionTermsType", p->soap_type() == SOAP_TYPE_ns3__SubscriptionTermsType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__SubscriptionTermsType * SOAP_FMAC4 soap_get_ns3__SubscriptionTermsType(struct soap*, ns3__SubscriptionTermsType *, const char*, const char*);

inline int soap_read_ns3__SubscriptionTermsType(struct soap *soap, ns3__SubscriptionTermsType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns3__SubscriptionTermsType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__SubscriptionTermsType(struct soap *soap, const char *URL, ns3__SubscriptionTermsType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__SubscriptionTermsType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__SubscriptionTermsType(struct soap *soap, ns3__SubscriptionTermsType *p)
{
	if (soap_read_ns3__SubscriptionTermsType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__PaymentInfoType_DEFINED
#define SOAP_TYPE_ns3__PaymentInfoType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__PaymentInfoType(struct soap*, const char*, int, const ns3__PaymentInfoType *, const char*);
SOAP_FMAC3 ns3__PaymentInfoType * SOAP_FMAC4 soap_in_ns3__PaymentInfoType(struct soap*, const char*, ns3__PaymentInfoType *, const char*);
SOAP_FMAC1 ns3__PaymentInfoType * SOAP_FMAC2 soap_instantiate_ns3__PaymentInfoType(struct soap*, int, const char*, const char*, size_t*);

inline ns3__PaymentInfoType * soap_new_ns3__PaymentInfoType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__PaymentInfoType(soap, n, NULL, NULL, NULL);
}

inline ns3__PaymentInfoType * soap_new_req_ns3__PaymentInfoType(
	struct soap *soap,
	enum ns3__PaymentTransactionCodeType TransactionType,
	enum ns3__PaymentStatusCodeType PaymentStatus)
{
	ns3__PaymentInfoType *_p = soap_new_ns3__PaymentInfoType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__PaymentInfoType::TransactionType = TransactionType;
		_p->ns3__PaymentInfoType::PaymentStatus = PaymentStatus;
	}
	return _p;
}

inline ns3__PaymentInfoType * soap_new_set_ns3__PaymentInfoType(
	struct soap *soap,
	std::string *TransactionID,
	std::string *EbayTransactionID,
	std::string *ParentTransactionID,
	std::string *ReceiptID,
	enum ns3__PaymentTransactionCodeType TransactionType,
	enum ns3__PaymentCodeType *PaymentType,
	enum ns3__RefundSourceCodeType *RefundSourceCodeType,
	time_t *ExpectedeCheckClearDate,
	time_t *PaymentDate,
	ns2__BasicAmountType *GrossAmount,
	ns2__BasicAmountType *FeeAmount,
	ns2__BasicAmountType *FinancingFeeAmount,
	ns2__BasicAmountType *FinancingTotalCost,
	ns2__BasicAmountType *FinancingMonthlyPayment,
	std::string *FinancingTerm,
	std::string *IsFinancing,
	ns2__BasicAmountType *SettleAmount,
	ns2__BasicAmountType *TaxAmount,
	std::string *ExchangeRate,
	enum ns3__PaymentStatusCodeType PaymentStatus,
	enum ns3__PendingStatusCodeType *PendingReason,
	enum ns3__ReversalReasonCodeType *ReasonCode,
	std::string *HoldDecision,
	std::string *ShippingMethod,
	std::string *ProtectionEligibility,
	std::string *ProtectionEligibilityType,
	std::string *ReceiptReferenceNumber,
	enum ns3__POSTransactionCodeType *POSTransactionType,
	std::string *ShipAmount,
	std::string *ShipHandleAmount,
	std::string *ShipDiscount,
	std::string *InsuranceAmount,
	std::string *Subject,
	std::string *StoreID,
	std::string *TerminalID,
	ns3__SellerDetailsType *SellerDetails,
	std::string *PaymentRequestID,
	ns3__FMFDetailsType *FMFDetails,
	ns4__EnhancedPaymentInfoType *EnhancedPaymentInfo,
	ns3__ErrorType *PaymentError,
	ns3__InstrumentDetailsType *InstrumentDetails,
	ns3__OfferDetailsType *OfferDetails,
	std::string *BinEligibility,
	std::string *SoftDescriptor,
	std::string *SoftDescriptorCity)
{
	ns3__PaymentInfoType *_p = soap_new_ns3__PaymentInfoType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__PaymentInfoType::TransactionID = TransactionID;
		_p->ns3__PaymentInfoType::EbayTransactionID = EbayTransactionID;
		_p->ns3__PaymentInfoType::ParentTransactionID = ParentTransactionID;
		_p->ns3__PaymentInfoType::ReceiptID = ReceiptID;
		_p->ns3__PaymentInfoType::TransactionType = TransactionType;
		_p->ns3__PaymentInfoType::PaymentType = PaymentType;
		_p->ns3__PaymentInfoType::RefundSourceCodeType = RefundSourceCodeType;
		_p->ns3__PaymentInfoType::ExpectedeCheckClearDate = ExpectedeCheckClearDate;
		_p->ns3__PaymentInfoType::PaymentDate = PaymentDate;
		_p->ns3__PaymentInfoType::GrossAmount = GrossAmount;
		_p->ns3__PaymentInfoType::FeeAmount = FeeAmount;
		_p->ns3__PaymentInfoType::FinancingFeeAmount = FinancingFeeAmount;
		_p->ns3__PaymentInfoType::FinancingTotalCost = FinancingTotalCost;
		_p->ns3__PaymentInfoType::FinancingMonthlyPayment = FinancingMonthlyPayment;
		_p->ns3__PaymentInfoType::FinancingTerm = FinancingTerm;
		_p->ns3__PaymentInfoType::IsFinancing = IsFinancing;
		_p->ns3__PaymentInfoType::SettleAmount = SettleAmount;
		_p->ns3__PaymentInfoType::TaxAmount = TaxAmount;
		_p->ns3__PaymentInfoType::ExchangeRate = ExchangeRate;
		_p->ns3__PaymentInfoType::PaymentStatus = PaymentStatus;
		_p->ns3__PaymentInfoType::PendingReason = PendingReason;
		_p->ns3__PaymentInfoType::ReasonCode = ReasonCode;
		_p->ns3__PaymentInfoType::HoldDecision = HoldDecision;
		_p->ns3__PaymentInfoType::ShippingMethod = ShippingMethod;
		_p->ns3__PaymentInfoType::ProtectionEligibility = ProtectionEligibility;
		_p->ns3__PaymentInfoType::ProtectionEligibilityType = ProtectionEligibilityType;
		_p->ns3__PaymentInfoType::ReceiptReferenceNumber = ReceiptReferenceNumber;
		_p->ns3__PaymentInfoType::POSTransactionType = POSTransactionType;
		_p->ns3__PaymentInfoType::ShipAmount = ShipAmount;
		_p->ns3__PaymentInfoType::ShipHandleAmount = ShipHandleAmount;
		_p->ns3__PaymentInfoType::ShipDiscount = ShipDiscount;
		_p->ns3__PaymentInfoType::InsuranceAmount = InsuranceAmount;
		_p->ns3__PaymentInfoType::Subject = Subject;
		_p->ns3__PaymentInfoType::StoreID = StoreID;
		_p->ns3__PaymentInfoType::TerminalID = TerminalID;
		_p->ns3__PaymentInfoType::SellerDetails = SellerDetails;
		_p->ns3__PaymentInfoType::PaymentRequestID = PaymentRequestID;
		_p->ns3__PaymentInfoType::FMFDetails = FMFDetails;
		_p->ns3__PaymentInfoType::EnhancedPaymentInfo = EnhancedPaymentInfo;
		_p->ns3__PaymentInfoType::PaymentError = PaymentError;
		_p->ns3__PaymentInfoType::InstrumentDetails = InstrumentDetails;
		_p->ns3__PaymentInfoType::OfferDetails = OfferDetails;
		_p->ns3__PaymentInfoType::BinEligibility = BinEligibility;
		_p->ns3__PaymentInfoType::SoftDescriptor = SoftDescriptor;
		_p->ns3__PaymentInfoType::SoftDescriptorCity = SoftDescriptorCity;
	}
	return _p;
}

inline int soap_write_ns3__PaymentInfoType(struct soap *soap, ns3__PaymentInfoType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:PaymentInfoType", p->soap_type() == SOAP_TYPE_ns3__PaymentInfoType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__PaymentInfoType(struct soap *soap, const char *URL, ns3__PaymentInfoType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:PaymentInfoType", p->soap_type() == SOAP_TYPE_ns3__PaymentInfoType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__PaymentInfoType(struct soap *soap, const char *URL, ns3__PaymentInfoType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:PaymentInfoType", p->soap_type() == SOAP_TYPE_ns3__PaymentInfoType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__PaymentInfoType * SOAP_FMAC4 soap_get_ns3__PaymentInfoType(struct soap*, ns3__PaymentInfoType *, const char*, const char*);

inline int soap_read_ns3__PaymentInfoType(struct soap *soap, ns3__PaymentInfoType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns3__PaymentInfoType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__PaymentInfoType(struct soap *soap, const char *URL, ns3__PaymentInfoType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__PaymentInfoType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__PaymentInfoType(struct soap *soap, ns3__PaymentInfoType *p)
{
	if (soap_read_ns3__PaymentInfoType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__OfferDetailsType_DEFINED
#define SOAP_TYPE_ns3__OfferDetailsType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__OfferDetailsType(struct soap*, const char*, int, const ns3__OfferDetailsType *, const char*);
SOAP_FMAC3 ns3__OfferDetailsType * SOAP_FMAC4 soap_in_ns3__OfferDetailsType(struct soap*, const char*, ns3__OfferDetailsType *, const char*);
SOAP_FMAC1 ns3__OfferDetailsType * SOAP_FMAC2 soap_instantiate_ns3__OfferDetailsType(struct soap*, int, const char*, const char*, size_t*);

inline ns3__OfferDetailsType * soap_new_ns3__OfferDetailsType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__OfferDetailsType(soap, n, NULL, NULL, NULL);
}

inline ns3__OfferDetailsType * soap_new_req_ns3__OfferDetailsType(
	struct soap *soap)
{
	ns3__OfferDetailsType *_p = soap_new_ns3__OfferDetailsType(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns3__OfferDetailsType * soap_new_set_ns3__OfferDetailsType(
	struct soap *soap,
	std::string *OfferCode,
	ns3__BMLOfferInfoType *BMLOfferInfo)
{
	ns3__OfferDetailsType *_p = soap_new_ns3__OfferDetailsType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__OfferDetailsType::OfferCode = OfferCode;
		_p->ns3__OfferDetailsType::BMLOfferInfo = BMLOfferInfo;
	}
	return _p;
}

inline int soap_write_ns3__OfferDetailsType(struct soap *soap, ns3__OfferDetailsType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:OfferDetailsType", p->soap_type() == SOAP_TYPE_ns3__OfferDetailsType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__OfferDetailsType(struct soap *soap, const char *URL, ns3__OfferDetailsType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:OfferDetailsType", p->soap_type() == SOAP_TYPE_ns3__OfferDetailsType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__OfferDetailsType(struct soap *soap, const char *URL, ns3__OfferDetailsType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:OfferDetailsType", p->soap_type() == SOAP_TYPE_ns3__OfferDetailsType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__OfferDetailsType * SOAP_FMAC4 soap_get_ns3__OfferDetailsType(struct soap*, ns3__OfferDetailsType *, const char*, const char*);

inline int soap_read_ns3__OfferDetailsType(struct soap *soap, ns3__OfferDetailsType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns3__OfferDetailsType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__OfferDetailsType(struct soap *soap, const char *URL, ns3__OfferDetailsType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__OfferDetailsType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__OfferDetailsType(struct soap *soap, ns3__OfferDetailsType *p)
{
	if (soap_read_ns3__OfferDetailsType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__BMLOfferInfoType_DEFINED
#define SOAP_TYPE_ns3__BMLOfferInfoType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__BMLOfferInfoType(struct soap*, const char*, int, const ns3__BMLOfferInfoType *, const char*);
SOAP_FMAC3 ns3__BMLOfferInfoType * SOAP_FMAC4 soap_in_ns3__BMLOfferInfoType(struct soap*, const char*, ns3__BMLOfferInfoType *, const char*);
SOAP_FMAC1 ns3__BMLOfferInfoType * SOAP_FMAC2 soap_instantiate_ns3__BMLOfferInfoType(struct soap*, int, const char*, const char*, size_t*);

inline ns3__BMLOfferInfoType * soap_new_ns3__BMLOfferInfoType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__BMLOfferInfoType(soap, n, NULL, NULL, NULL);
}

inline ns3__BMLOfferInfoType * soap_new_req_ns3__BMLOfferInfoType(
	struct soap *soap)
{
	ns3__BMLOfferInfoType *_p = soap_new_ns3__BMLOfferInfoType(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns3__BMLOfferInfoType * soap_new_set_ns3__BMLOfferInfoType(
	struct soap *soap,
	std::string *OfferTrackingID)
{
	ns3__BMLOfferInfoType *_p = soap_new_ns3__BMLOfferInfoType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__BMLOfferInfoType::OfferTrackingID = OfferTrackingID;
	}
	return _p;
}

inline int soap_write_ns3__BMLOfferInfoType(struct soap *soap, ns3__BMLOfferInfoType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:BMLOfferInfoType", p->soap_type() == SOAP_TYPE_ns3__BMLOfferInfoType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__BMLOfferInfoType(struct soap *soap, const char *URL, ns3__BMLOfferInfoType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:BMLOfferInfoType", p->soap_type() == SOAP_TYPE_ns3__BMLOfferInfoType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__BMLOfferInfoType(struct soap *soap, const char *URL, ns3__BMLOfferInfoType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:BMLOfferInfoType", p->soap_type() == SOAP_TYPE_ns3__BMLOfferInfoType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__BMLOfferInfoType * SOAP_FMAC4 soap_get_ns3__BMLOfferInfoType(struct soap*, ns3__BMLOfferInfoType *, const char*, const char*);

inline int soap_read_ns3__BMLOfferInfoType(struct soap *soap, ns3__BMLOfferInfoType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns3__BMLOfferInfoType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__BMLOfferInfoType(struct soap *soap, const char *URL, ns3__BMLOfferInfoType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__BMLOfferInfoType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__BMLOfferInfoType(struct soap *soap, ns3__BMLOfferInfoType *p)
{
	if (soap_read_ns3__BMLOfferInfoType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__InstrumentDetailsType_DEFINED
#define SOAP_TYPE_ns3__InstrumentDetailsType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__InstrumentDetailsType(struct soap*, const char*, int, const ns3__InstrumentDetailsType *, const char*);
SOAP_FMAC3 ns3__InstrumentDetailsType * SOAP_FMAC4 soap_in_ns3__InstrumentDetailsType(struct soap*, const char*, ns3__InstrumentDetailsType *, const char*);
SOAP_FMAC1 ns3__InstrumentDetailsType * SOAP_FMAC2 soap_instantiate_ns3__InstrumentDetailsType(struct soap*, int, const char*, const char*, size_t*);

inline ns3__InstrumentDetailsType * soap_new_ns3__InstrumentDetailsType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__InstrumentDetailsType(soap, n, NULL, NULL, NULL);
}

inline ns3__InstrumentDetailsType * soap_new_req_ns3__InstrumentDetailsType(
	struct soap *soap)
{
	ns3__InstrumentDetailsType *_p = soap_new_ns3__InstrumentDetailsType(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns3__InstrumentDetailsType * soap_new_set_ns3__InstrumentDetailsType(
	struct soap *soap,
	std::string *InstrumentCategory,
	std::string *InstrumentID)
{
	ns3__InstrumentDetailsType *_p = soap_new_ns3__InstrumentDetailsType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__InstrumentDetailsType::InstrumentCategory = InstrumentCategory;
		_p->ns3__InstrumentDetailsType::InstrumentID = InstrumentID;
	}
	return _p;
}

inline int soap_write_ns3__InstrumentDetailsType(struct soap *soap, ns3__InstrumentDetailsType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:InstrumentDetailsType", p->soap_type() == SOAP_TYPE_ns3__InstrumentDetailsType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__InstrumentDetailsType(struct soap *soap, const char *URL, ns3__InstrumentDetailsType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:InstrumentDetailsType", p->soap_type() == SOAP_TYPE_ns3__InstrumentDetailsType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__InstrumentDetailsType(struct soap *soap, const char *URL, ns3__InstrumentDetailsType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:InstrumentDetailsType", p->soap_type() == SOAP_TYPE_ns3__InstrumentDetailsType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__InstrumentDetailsType * SOAP_FMAC4 soap_get_ns3__InstrumentDetailsType(struct soap*, ns3__InstrumentDetailsType *, const char*, const char*);

inline int soap_read_ns3__InstrumentDetailsType(struct soap *soap, ns3__InstrumentDetailsType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns3__InstrumentDetailsType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__InstrumentDetailsType(struct soap *soap, const char *URL, ns3__InstrumentDetailsType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__InstrumentDetailsType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__InstrumentDetailsType(struct soap *soap, ns3__InstrumentDetailsType *p)
{
	if (soap_read_ns3__InstrumentDetailsType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__PayeeInfoType_DEFINED
#define SOAP_TYPE_ns3__PayeeInfoType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__PayeeInfoType(struct soap*, const char*, int, const ns3__PayeeInfoType *, const char*);
SOAP_FMAC3 ns3__PayeeInfoType * SOAP_FMAC4 soap_in_ns3__PayeeInfoType(struct soap*, const char*, ns3__PayeeInfoType *, const char*);
SOAP_FMAC1 ns3__PayeeInfoType * SOAP_FMAC2 soap_instantiate_ns3__PayeeInfoType(struct soap*, int, const char*, const char*, size_t*);

inline ns3__PayeeInfoType * soap_new_ns3__PayeeInfoType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__PayeeInfoType(soap, n, NULL, NULL, NULL);
}

inline ns3__PayeeInfoType * soap_new_req_ns3__PayeeInfoType(
	struct soap *soap)
{
	ns3__PayeeInfoType *_p = soap_new_ns3__PayeeInfoType(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns3__PayeeInfoType * soap_new_set_ns3__PayeeInfoType(
	struct soap *soap,
	std::string *PayeeEmail,
	std::string *PayeeID)
{
	ns3__PayeeInfoType *_p = soap_new_ns3__PayeeInfoType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__PayeeInfoType::PayeeEmail = PayeeEmail;
		_p->ns3__PayeeInfoType::PayeeID = PayeeID;
	}
	return _p;
}

inline int soap_write_ns3__PayeeInfoType(struct soap *soap, ns3__PayeeInfoType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:PayeeInfoType", p->soap_type() == SOAP_TYPE_ns3__PayeeInfoType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__PayeeInfoType(struct soap *soap, const char *URL, ns3__PayeeInfoType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:PayeeInfoType", p->soap_type() == SOAP_TYPE_ns3__PayeeInfoType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__PayeeInfoType(struct soap *soap, const char *URL, ns3__PayeeInfoType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:PayeeInfoType", p->soap_type() == SOAP_TYPE_ns3__PayeeInfoType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__PayeeInfoType * SOAP_FMAC4 soap_get_ns3__PayeeInfoType(struct soap*, ns3__PayeeInfoType *, const char*, const char*);

inline int soap_read_ns3__PayeeInfoType(struct soap *soap, ns3__PayeeInfoType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns3__PayeeInfoType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__PayeeInfoType(struct soap *soap, const char *URL, ns3__PayeeInfoType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__PayeeInfoType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__PayeeInfoType(struct soap *soap, ns3__PayeeInfoType *p)
{
	if (soap_read_ns3__PayeeInfoType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__PayerInfoType_DEFINED
#define SOAP_TYPE_ns3__PayerInfoType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__PayerInfoType(struct soap*, const char*, int, const ns3__PayerInfoType *, const char*);
SOAP_FMAC3 ns3__PayerInfoType * SOAP_FMAC4 soap_in_ns3__PayerInfoType(struct soap*, const char*, ns3__PayerInfoType *, const char*);
SOAP_FMAC1 ns3__PayerInfoType * SOAP_FMAC2 soap_instantiate_ns3__PayerInfoType(struct soap*, int, const char*, const char*, size_t*);

inline ns3__PayerInfoType * soap_new_ns3__PayerInfoType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__PayerInfoType(soap, n, NULL, NULL, NULL);
}

inline ns3__PayerInfoType * soap_new_req_ns3__PayerInfoType(
	struct soap *soap,
	ns3__PersonNameType *PayerName)
{
	ns3__PayerInfoType *_p = soap_new_ns3__PayerInfoType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__PayerInfoType::PayerName = PayerName;
	}
	return _p;
}

inline ns3__PayerInfoType * soap_new_set_ns3__PayerInfoType(
	struct soap *soap,
	std::string *Payer,
	std::string *PayerID,
	enum ns3__PayPalUserStatusCodeType *PayerStatus,
	ns3__PersonNameType *PayerName,
	enum ns3__CountryCodeType *PayerCountry,
	std::string *PayerBusiness,
	ns3__AddressType *Address,
	std::string *ContactPhone,
	const std::vector<ns3__WalletItemsType *> & WalletItems,
	ns3__TaxIdDetailsType *TaxIdDetails,
	ns4__EnhancedPayerInfoType *EnhancedPayerInfo)
{
	ns3__PayerInfoType *_p = soap_new_ns3__PayerInfoType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__PayerInfoType::Payer = Payer;
		_p->ns3__PayerInfoType::PayerID = PayerID;
		_p->ns3__PayerInfoType::PayerStatus = PayerStatus;
		_p->ns3__PayerInfoType::PayerName = PayerName;
		_p->ns3__PayerInfoType::PayerCountry = PayerCountry;
		_p->ns3__PayerInfoType::PayerBusiness = PayerBusiness;
		_p->ns3__PayerInfoType::Address = Address;
		_p->ns3__PayerInfoType::ContactPhone = ContactPhone;
		_p->ns3__PayerInfoType::WalletItems = WalletItems;
		_p->ns3__PayerInfoType::TaxIdDetails = TaxIdDetails;
		_p->ns3__PayerInfoType::EnhancedPayerInfo = EnhancedPayerInfo;
	}
	return _p;
}

inline int soap_write_ns3__PayerInfoType(struct soap *soap, ns3__PayerInfoType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:PayerInfoType", p->soap_type() == SOAP_TYPE_ns3__PayerInfoType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__PayerInfoType(struct soap *soap, const char *URL, ns3__PayerInfoType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:PayerInfoType", p->soap_type() == SOAP_TYPE_ns3__PayerInfoType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__PayerInfoType(struct soap *soap, const char *URL, ns3__PayerInfoType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:PayerInfoType", p->soap_type() == SOAP_TYPE_ns3__PayerInfoType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__PayerInfoType * SOAP_FMAC4 soap_get_ns3__PayerInfoType(struct soap*, ns3__PayerInfoType *, const char*, const char*);

inline int soap_read_ns3__PayerInfoType(struct soap *soap, ns3__PayerInfoType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns3__PayerInfoType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__PayerInfoType(struct soap *soap, const char *URL, ns3__PayerInfoType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__PayerInfoType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__PayerInfoType(struct soap *soap, ns3__PayerInfoType *p)
{
	if (soap_read_ns3__PayerInfoType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__ReceiverInfoType_DEFINED
#define SOAP_TYPE_ns3__ReceiverInfoType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__ReceiverInfoType(struct soap*, const char*, int, const ns3__ReceiverInfoType *, const char*);
SOAP_FMAC3 ns3__ReceiverInfoType * SOAP_FMAC4 soap_in_ns3__ReceiverInfoType(struct soap*, const char*, ns3__ReceiverInfoType *, const char*);
SOAP_FMAC1 ns3__ReceiverInfoType * SOAP_FMAC2 soap_instantiate_ns3__ReceiverInfoType(struct soap*, int, const char*, const char*, size_t*);

inline ns3__ReceiverInfoType * soap_new_ns3__ReceiverInfoType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__ReceiverInfoType(soap, n, NULL, NULL, NULL);
}

inline ns3__ReceiverInfoType * soap_new_req_ns3__ReceiverInfoType(
	struct soap *soap,
	const std::string& Business,
	const std::string& Receiver,
	const std::string& ReceiverID)
{
	ns3__ReceiverInfoType *_p = soap_new_ns3__ReceiverInfoType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__ReceiverInfoType::Business = Business;
		_p->ns3__ReceiverInfoType::Receiver = Receiver;
		_p->ns3__ReceiverInfoType::ReceiverID = ReceiverID;
	}
	return _p;
}

inline ns3__ReceiverInfoType * soap_new_set_ns3__ReceiverInfoType(
	struct soap *soap,
	const std::string& Business,
	const std::string& Receiver,
	const std::string& ReceiverID)
{
	ns3__ReceiverInfoType *_p = soap_new_ns3__ReceiverInfoType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__ReceiverInfoType::Business = Business;
		_p->ns3__ReceiverInfoType::Receiver = Receiver;
		_p->ns3__ReceiverInfoType::ReceiverID = ReceiverID;
	}
	return _p;
}

inline int soap_write_ns3__ReceiverInfoType(struct soap *soap, ns3__ReceiverInfoType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:ReceiverInfoType", p->soap_type() == SOAP_TYPE_ns3__ReceiverInfoType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__ReceiverInfoType(struct soap *soap, const char *URL, ns3__ReceiverInfoType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:ReceiverInfoType", p->soap_type() == SOAP_TYPE_ns3__ReceiverInfoType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__ReceiverInfoType(struct soap *soap, const char *URL, ns3__ReceiverInfoType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:ReceiverInfoType", p->soap_type() == SOAP_TYPE_ns3__ReceiverInfoType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__ReceiverInfoType * SOAP_FMAC4 soap_get_ns3__ReceiverInfoType(struct soap*, ns3__ReceiverInfoType *, const char*, const char*);

inline int soap_read_ns3__ReceiverInfoType(struct soap *soap, ns3__ReceiverInfoType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns3__ReceiverInfoType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__ReceiverInfoType(struct soap *soap, const char *URL, ns3__ReceiverInfoType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__ReceiverInfoType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__ReceiverInfoType(struct soap *soap, ns3__ReceiverInfoType *p)
{
	if (soap_read_ns3__ReceiverInfoType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__PaymentTransactionType_DEFINED
#define SOAP_TYPE_ns3__PaymentTransactionType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__PaymentTransactionType(struct soap*, const char*, int, const ns3__PaymentTransactionType *, const char*);
SOAP_FMAC3 ns3__PaymentTransactionType * SOAP_FMAC4 soap_in_ns3__PaymentTransactionType(struct soap*, const char*, ns3__PaymentTransactionType *, const char*);
SOAP_FMAC1 ns3__PaymentTransactionType * SOAP_FMAC2 soap_instantiate_ns3__PaymentTransactionType(struct soap*, int, const char*, const char*, size_t*);

inline ns3__PaymentTransactionType * soap_new_ns3__PaymentTransactionType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__PaymentTransactionType(soap, n, NULL, NULL, NULL);
}

inline ns3__PaymentTransactionType * soap_new_req_ns3__PaymentTransactionType(
	struct soap *soap,
	ns3__ReceiverInfoType *ReceiverInfo,
	ns3__PayerInfoType *PayerInfo,
	ns3__PaymentInfoType *PaymentInfo)
{
	ns3__PaymentTransactionType *_p = soap_new_ns3__PaymentTransactionType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__PaymentTransactionType::ReceiverInfo = ReceiverInfo;
		_p->ns3__PaymentTransactionType::PayerInfo = PayerInfo;
		_p->ns3__PaymentTransactionType::PaymentInfo = PaymentInfo;
	}
	return _p;
}

inline ns3__PaymentTransactionType * soap_new_set_ns3__PaymentTransactionType(
	struct soap *soap,
	ns3__ReceiverInfoType *ReceiverInfo,
	ns3__PayerInfoType *PayerInfo,
	std::string *TPLReferenceID,
	ns3__PaymentInfoType *PaymentInfo,
	ns3__PaymentItemInfoType *PaymentItemInfo,
	ns3__OfferCouponInfoType *OfferCouponInfo,
	ns3__AddressType *SecondaryAddress,
	ns3__UserSelectedOptionType *UserSelectedOptions,
	std::string *GiftMessage,
	std::string *GiftReceipt,
	std::string *GiftWrapName,
	ns2__BasicAmountType *GiftWrapAmount,
	std::string *BuyerEmailOptIn,
	std::string *SurveyQuestion,
	const std::vector<std::string> & SurveyChoiceSelected)
{
	ns3__PaymentTransactionType *_p = soap_new_ns3__PaymentTransactionType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__PaymentTransactionType::ReceiverInfo = ReceiverInfo;
		_p->ns3__PaymentTransactionType::PayerInfo = PayerInfo;
		_p->ns3__PaymentTransactionType::TPLReferenceID = TPLReferenceID;
		_p->ns3__PaymentTransactionType::PaymentInfo = PaymentInfo;
		_p->ns3__PaymentTransactionType::PaymentItemInfo = PaymentItemInfo;
		_p->ns3__PaymentTransactionType::OfferCouponInfo = OfferCouponInfo;
		_p->ns3__PaymentTransactionType::SecondaryAddress = SecondaryAddress;
		_p->ns3__PaymentTransactionType::UserSelectedOptions = UserSelectedOptions;
		_p->ns3__PaymentTransactionType::GiftMessage = GiftMessage;
		_p->ns3__PaymentTransactionType::GiftReceipt = GiftReceipt;
		_p->ns3__PaymentTransactionType::GiftWrapName = GiftWrapName;
		_p->ns3__PaymentTransactionType::GiftWrapAmount = GiftWrapAmount;
		_p->ns3__PaymentTransactionType::BuyerEmailOptIn = BuyerEmailOptIn;
		_p->ns3__PaymentTransactionType::SurveyQuestion = SurveyQuestion;
		_p->ns3__PaymentTransactionType::SurveyChoiceSelected = SurveyChoiceSelected;
	}
	return _p;
}

inline int soap_write_ns3__PaymentTransactionType(struct soap *soap, ns3__PaymentTransactionType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:PaymentTransactionType", p->soap_type() == SOAP_TYPE_ns3__PaymentTransactionType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__PaymentTransactionType(struct soap *soap, const char *URL, ns3__PaymentTransactionType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:PaymentTransactionType", p->soap_type() == SOAP_TYPE_ns3__PaymentTransactionType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__PaymentTransactionType(struct soap *soap, const char *URL, ns3__PaymentTransactionType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:PaymentTransactionType", p->soap_type() == SOAP_TYPE_ns3__PaymentTransactionType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__PaymentTransactionType * SOAP_FMAC4 soap_get_ns3__PaymentTransactionType(struct soap*, ns3__PaymentTransactionType *, const char*, const char*);

inline int soap_read_ns3__PaymentTransactionType(struct soap *soap, ns3__PaymentTransactionType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns3__PaymentTransactionType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__PaymentTransactionType(struct soap *soap, const char *URL, ns3__PaymentTransactionType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__PaymentTransactionType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__PaymentTransactionType(struct soap *soap, ns3__PaymentTransactionType *p)
{
	if (soap_read_ns3__PaymentTransactionType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__MerchantPullPaymentType_DEFINED
#define SOAP_TYPE_ns3__MerchantPullPaymentType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__MerchantPullPaymentType(struct soap*, const char*, int, const ns3__MerchantPullPaymentType *, const char*);
SOAP_FMAC3 ns3__MerchantPullPaymentType * SOAP_FMAC4 soap_in_ns3__MerchantPullPaymentType(struct soap*, const char*, ns3__MerchantPullPaymentType *, const char*);
SOAP_FMAC1 ns3__MerchantPullPaymentType * SOAP_FMAC2 soap_instantiate_ns3__MerchantPullPaymentType(struct soap*, int, const char*, const char*, size_t*);

inline ns3__MerchantPullPaymentType * soap_new_ns3__MerchantPullPaymentType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__MerchantPullPaymentType(soap, n, NULL, NULL, NULL);
}

inline ns3__MerchantPullPaymentType * soap_new_req_ns3__MerchantPullPaymentType(
	struct soap *soap,
	ns2__BasicAmountType *Amount,
	const std::string& MpID)
{
	ns3__MerchantPullPaymentType *_p = soap_new_ns3__MerchantPullPaymentType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__MerchantPullPaymentType::Amount = Amount;
		_p->ns3__MerchantPullPaymentType::MpID = MpID;
	}
	return _p;
}

inline ns3__MerchantPullPaymentType * soap_new_set_ns3__MerchantPullPaymentType(
	struct soap *soap,
	ns2__BasicAmountType *Amount,
	const std::string& MpID,
	enum ns3__MerchantPullPaymentCodeType *PaymentType,
	std::string *Memo,
	std::string *EmailSubject,
	ns2__BasicAmountType *Tax,
	ns2__BasicAmountType *Shipping,
	ns2__BasicAmountType *Handling,
	std::string *ItemName,
	std::string *ItemNumber,
	std::string *Invoice,
	std::string *Custom,
	std::string *ButtonSource,
	std::string *SoftDescriptor)
{
	ns3__MerchantPullPaymentType *_p = soap_new_ns3__MerchantPullPaymentType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__MerchantPullPaymentType::Amount = Amount;
		_p->ns3__MerchantPullPaymentType::MpID = MpID;
		_p->ns3__MerchantPullPaymentType::PaymentType = PaymentType;
		_p->ns3__MerchantPullPaymentType::Memo = Memo;
		_p->ns3__MerchantPullPaymentType::EmailSubject = EmailSubject;
		_p->ns3__MerchantPullPaymentType::Tax = Tax;
		_p->ns3__MerchantPullPaymentType::Shipping = Shipping;
		_p->ns3__MerchantPullPaymentType::Handling = Handling;
		_p->ns3__MerchantPullPaymentType::ItemName = ItemName;
		_p->ns3__MerchantPullPaymentType::ItemNumber = ItemNumber;
		_p->ns3__MerchantPullPaymentType::Invoice = Invoice;
		_p->ns3__MerchantPullPaymentType::Custom = Custom;
		_p->ns3__MerchantPullPaymentType::ButtonSource = ButtonSource;
		_p->ns3__MerchantPullPaymentType::SoftDescriptor = SoftDescriptor;
	}
	return _p;
}

inline int soap_write_ns3__MerchantPullPaymentType(struct soap *soap, ns3__MerchantPullPaymentType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:MerchantPullPaymentType", p->soap_type() == SOAP_TYPE_ns3__MerchantPullPaymentType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__MerchantPullPaymentType(struct soap *soap, const char *URL, ns3__MerchantPullPaymentType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:MerchantPullPaymentType", p->soap_type() == SOAP_TYPE_ns3__MerchantPullPaymentType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__MerchantPullPaymentType(struct soap *soap, const char *URL, ns3__MerchantPullPaymentType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:MerchantPullPaymentType", p->soap_type() == SOAP_TYPE_ns3__MerchantPullPaymentType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__MerchantPullPaymentType * SOAP_FMAC4 soap_get_ns3__MerchantPullPaymentType(struct soap*, ns3__MerchantPullPaymentType *, const char*, const char*);

inline int soap_read_ns3__MerchantPullPaymentType(struct soap *soap, ns3__MerchantPullPaymentType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns3__MerchantPullPaymentType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__MerchantPullPaymentType(struct soap *soap, const char *URL, ns3__MerchantPullPaymentType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__MerchantPullPaymentType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__MerchantPullPaymentType(struct soap *soap, ns3__MerchantPullPaymentType *p)
{
	if (soap_read_ns3__MerchantPullPaymentType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__TaxInfoType_DEFINED
#define SOAP_TYPE_ns3__TaxInfoType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__TaxInfoType(struct soap*, const char*, int, const ns3__TaxInfoType *, const char*);
SOAP_FMAC3 ns3__TaxInfoType * SOAP_FMAC4 soap_in_ns3__TaxInfoType(struct soap*, const char*, ns3__TaxInfoType *, const char*);
SOAP_FMAC1 ns3__TaxInfoType * SOAP_FMAC2 soap_instantiate_ns3__TaxInfoType(struct soap*, int, const char*, const char*, size_t*);

inline ns3__TaxInfoType * soap_new_ns3__TaxInfoType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__TaxInfoType(soap, n, NULL, NULL, NULL);
}

inline ns3__TaxInfoType * soap_new_req_ns3__TaxInfoType(
	struct soap *soap,
	ns2__BasicAmountType *TaxAmount,
	const std::string& SalesTaxPercentage,
	const std::string& TaxState)
{
	ns3__TaxInfoType *_p = soap_new_ns3__TaxInfoType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__TaxInfoType::TaxAmount = TaxAmount;
		_p->ns3__TaxInfoType::SalesTaxPercentage = SalesTaxPercentage;
		_p->ns3__TaxInfoType::TaxState = TaxState;
	}
	return _p;
}

inline ns3__TaxInfoType * soap_new_set_ns3__TaxInfoType(
	struct soap *soap,
	ns2__BasicAmountType *TaxAmount,
	const std::string& SalesTaxPercentage,
	const std::string& TaxState)
{
	ns3__TaxInfoType *_p = soap_new_ns3__TaxInfoType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__TaxInfoType::TaxAmount = TaxAmount;
		_p->ns3__TaxInfoType::SalesTaxPercentage = SalesTaxPercentage;
		_p->ns3__TaxInfoType::TaxState = TaxState;
	}
	return _p;
}

inline int soap_write_ns3__TaxInfoType(struct soap *soap, ns3__TaxInfoType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:TaxInfoType", p->soap_type() == SOAP_TYPE_ns3__TaxInfoType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__TaxInfoType(struct soap *soap, const char *URL, ns3__TaxInfoType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:TaxInfoType", p->soap_type() == SOAP_TYPE_ns3__TaxInfoType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__TaxInfoType(struct soap *soap, const char *URL, ns3__TaxInfoType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:TaxInfoType", p->soap_type() == SOAP_TYPE_ns3__TaxInfoType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__TaxInfoType * SOAP_FMAC4 soap_get_ns3__TaxInfoType(struct soap*, ns3__TaxInfoType *, const char*, const char*);

inline int soap_read_ns3__TaxInfoType(struct soap *soap, ns3__TaxInfoType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns3__TaxInfoType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__TaxInfoType(struct soap *soap, const char *URL, ns3__TaxInfoType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__TaxInfoType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__TaxInfoType(struct soap *soap, ns3__TaxInfoType *p)
{
	if (soap_read_ns3__TaxInfoType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__ShippingInfoType_DEFINED
#define SOAP_TYPE_ns3__ShippingInfoType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__ShippingInfoType(struct soap*, const char*, int, const ns3__ShippingInfoType *, const char*);
SOAP_FMAC3 ns3__ShippingInfoType * SOAP_FMAC4 soap_in_ns3__ShippingInfoType(struct soap*, const char*, ns3__ShippingInfoType *, const char*);
SOAP_FMAC1 ns3__ShippingInfoType * SOAP_FMAC2 soap_instantiate_ns3__ShippingInfoType(struct soap*, int, const char*, const char*, size_t*);

inline ns3__ShippingInfoType * soap_new_ns3__ShippingInfoType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__ShippingInfoType(soap, n, NULL, NULL, NULL);
}

inline ns3__ShippingInfoType * soap_new_req_ns3__ShippingInfoType(
	struct soap *soap,
	const std::string& ShippingMethod,
	const std::string& ShippingCarrier,
	ns2__BasicAmountType *ShippingAmount,
	ns2__BasicAmountType *HandlingAmount,
	ns2__BasicAmountType *InsuranceAmount)
{
	ns3__ShippingInfoType *_p = soap_new_ns3__ShippingInfoType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__ShippingInfoType::ShippingMethod = ShippingMethod;
		_p->ns3__ShippingInfoType::ShippingCarrier = ShippingCarrier;
		_p->ns3__ShippingInfoType::ShippingAmount = ShippingAmount;
		_p->ns3__ShippingInfoType::HandlingAmount = HandlingAmount;
		_p->ns3__ShippingInfoType::InsuranceAmount = InsuranceAmount;
	}
	return _p;
}

inline ns3__ShippingInfoType * soap_new_set_ns3__ShippingInfoType(
	struct soap *soap,
	const std::string& ShippingMethod,
	const std::string& ShippingCarrier,
	ns2__BasicAmountType *ShippingAmount,
	ns2__BasicAmountType *HandlingAmount,
	ns2__BasicAmountType *InsuranceAmount)
{
	ns3__ShippingInfoType *_p = soap_new_ns3__ShippingInfoType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__ShippingInfoType::ShippingMethod = ShippingMethod;
		_p->ns3__ShippingInfoType::ShippingCarrier = ShippingCarrier;
		_p->ns3__ShippingInfoType::ShippingAmount = ShippingAmount;
		_p->ns3__ShippingInfoType::HandlingAmount = HandlingAmount;
		_p->ns3__ShippingInfoType::InsuranceAmount = InsuranceAmount;
	}
	return _p;
}

inline int soap_write_ns3__ShippingInfoType(struct soap *soap, ns3__ShippingInfoType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:ShippingInfoType", p->soap_type() == SOAP_TYPE_ns3__ShippingInfoType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__ShippingInfoType(struct soap *soap, const char *URL, ns3__ShippingInfoType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:ShippingInfoType", p->soap_type() == SOAP_TYPE_ns3__ShippingInfoType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__ShippingInfoType(struct soap *soap, const char *URL, ns3__ShippingInfoType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:ShippingInfoType", p->soap_type() == SOAP_TYPE_ns3__ShippingInfoType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__ShippingInfoType * SOAP_FMAC4 soap_get_ns3__ShippingInfoType(struct soap*, ns3__ShippingInfoType *, const char*, const char*);

inline int soap_read_ns3__ShippingInfoType(struct soap *soap, ns3__ShippingInfoType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns3__ShippingInfoType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__ShippingInfoType(struct soap *soap, const char *URL, ns3__ShippingInfoType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__ShippingInfoType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__ShippingInfoType(struct soap *soap, ns3__ShippingInfoType *p)
{
	if (soap_read_ns3__ShippingInfoType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__PaymentTransactionSearchResultType_DEFINED
#define SOAP_TYPE_ns3__PaymentTransactionSearchResultType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__PaymentTransactionSearchResultType(struct soap*, const char*, int, const ns3__PaymentTransactionSearchResultType *, const char*);
SOAP_FMAC3 ns3__PaymentTransactionSearchResultType * SOAP_FMAC4 soap_in_ns3__PaymentTransactionSearchResultType(struct soap*, const char*, ns3__PaymentTransactionSearchResultType *, const char*);
SOAP_FMAC1 ns3__PaymentTransactionSearchResultType * SOAP_FMAC2 soap_instantiate_ns3__PaymentTransactionSearchResultType(struct soap*, int, const char*, const char*, size_t*);

inline ns3__PaymentTransactionSearchResultType * soap_new_ns3__PaymentTransactionSearchResultType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__PaymentTransactionSearchResultType(soap, n, NULL, NULL, NULL);
}

inline ns3__PaymentTransactionSearchResultType * soap_new_req_ns3__PaymentTransactionSearchResultType(
	struct soap *soap,
	time_t Timestamp,
	const std::string& Timezone,
	const std::string& Type,
	const std::string& Payer,
	const std::string& PayerDisplayName,
	const std::string& TransactionID,
	const std::string& Status,
	ns2__BasicAmountType *GrossAmount,
	ns2__BasicAmountType *FeeAmount,
	ns2__BasicAmountType *NetAmount)
{
	ns3__PaymentTransactionSearchResultType *_p = soap_new_ns3__PaymentTransactionSearchResultType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__PaymentTransactionSearchResultType::Timestamp = Timestamp;
		_p->ns3__PaymentTransactionSearchResultType::Timezone = Timezone;
		_p->ns3__PaymentTransactionSearchResultType::Type = Type;
		_p->ns3__PaymentTransactionSearchResultType::Payer = Payer;
		_p->ns3__PaymentTransactionSearchResultType::PayerDisplayName = PayerDisplayName;
		_p->ns3__PaymentTransactionSearchResultType::TransactionID = TransactionID;
		_p->ns3__PaymentTransactionSearchResultType::Status = Status;
		_p->ns3__PaymentTransactionSearchResultType::GrossAmount = GrossAmount;
		_p->ns3__PaymentTransactionSearchResultType::FeeAmount = FeeAmount;
		_p->ns3__PaymentTransactionSearchResultType::NetAmount = NetAmount;
	}
	return _p;
}

inline ns3__PaymentTransactionSearchResultType * soap_new_set_ns3__PaymentTransactionSearchResultType(
	struct soap *soap,
	time_t Timestamp,
	const std::string& Timezone,
	const std::string& Type,
	const std::string& Payer,
	const std::string& PayerDisplayName,
	const std::string& TransactionID,
	const std::string& Status,
	ns2__BasicAmountType *GrossAmount,
	ns2__BasicAmountType *FeeAmount,
	ns2__BasicAmountType *NetAmount)
{
	ns3__PaymentTransactionSearchResultType *_p = soap_new_ns3__PaymentTransactionSearchResultType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__PaymentTransactionSearchResultType::Timestamp = Timestamp;
		_p->ns3__PaymentTransactionSearchResultType::Timezone = Timezone;
		_p->ns3__PaymentTransactionSearchResultType::Type = Type;
		_p->ns3__PaymentTransactionSearchResultType::Payer = Payer;
		_p->ns3__PaymentTransactionSearchResultType::PayerDisplayName = PayerDisplayName;
		_p->ns3__PaymentTransactionSearchResultType::TransactionID = TransactionID;
		_p->ns3__PaymentTransactionSearchResultType::Status = Status;
		_p->ns3__PaymentTransactionSearchResultType::GrossAmount = GrossAmount;
		_p->ns3__PaymentTransactionSearchResultType::FeeAmount = FeeAmount;
		_p->ns3__PaymentTransactionSearchResultType::NetAmount = NetAmount;
	}
	return _p;
}

inline int soap_write_ns3__PaymentTransactionSearchResultType(struct soap *soap, ns3__PaymentTransactionSearchResultType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:PaymentTransactionSearchResultType", p->soap_type() == SOAP_TYPE_ns3__PaymentTransactionSearchResultType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__PaymentTransactionSearchResultType(struct soap *soap, const char *URL, ns3__PaymentTransactionSearchResultType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:PaymentTransactionSearchResultType", p->soap_type() == SOAP_TYPE_ns3__PaymentTransactionSearchResultType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__PaymentTransactionSearchResultType(struct soap *soap, const char *URL, ns3__PaymentTransactionSearchResultType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:PaymentTransactionSearchResultType", p->soap_type() == SOAP_TYPE_ns3__PaymentTransactionSearchResultType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__PaymentTransactionSearchResultType * SOAP_FMAC4 soap_get_ns3__PaymentTransactionSearchResultType(struct soap*, ns3__PaymentTransactionSearchResultType *, const char*, const char*);

inline int soap_read_ns3__PaymentTransactionSearchResultType(struct soap *soap, ns3__PaymentTransactionSearchResultType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns3__PaymentTransactionSearchResultType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__PaymentTransactionSearchResultType(struct soap *soap, const char *URL, ns3__PaymentTransactionSearchResultType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__PaymentTransactionSearchResultType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__PaymentTransactionSearchResultType(struct soap *soap, ns3__PaymentTransactionSearchResultType *p)
{
	if (soap_read_ns3__PaymentTransactionSearchResultType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__MerchantPullInfoType_DEFINED
#define SOAP_TYPE_ns3__MerchantPullInfoType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__MerchantPullInfoType(struct soap*, const char*, int, const ns3__MerchantPullInfoType *, const char*);
SOAP_FMAC3 ns3__MerchantPullInfoType * SOAP_FMAC4 soap_in_ns3__MerchantPullInfoType(struct soap*, const char*, ns3__MerchantPullInfoType *, const char*);
SOAP_FMAC1 ns3__MerchantPullInfoType * SOAP_FMAC2 soap_instantiate_ns3__MerchantPullInfoType(struct soap*, int, const char*, const char*, size_t*);

inline ns3__MerchantPullInfoType * soap_new_ns3__MerchantPullInfoType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__MerchantPullInfoType(soap, n, NULL, NULL, NULL);
}

inline ns3__MerchantPullInfoType * soap_new_req_ns3__MerchantPullInfoType(
	struct soap *soap,
	enum ns3__MerchantPullStatusCodeType MpStatus,
	ns2__BasicAmountType *MpMax)
{
	ns3__MerchantPullInfoType *_p = soap_new_ns3__MerchantPullInfoType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__MerchantPullInfoType::MpStatus = MpStatus;
		_p->ns3__MerchantPullInfoType::MpMax = MpMax;
	}
	return _p;
}

inline ns3__MerchantPullInfoType * soap_new_set_ns3__MerchantPullInfoType(
	struct soap *soap,
	enum ns3__MerchantPullStatusCodeType MpStatus,
	ns2__BasicAmountType *MpMax,
	std::string *MpCustom,
	std::string *Desc,
	std::string *Invoice,
	std::string *Custom,
	std::string *PaymentSourceID)
{
	ns3__MerchantPullInfoType *_p = soap_new_ns3__MerchantPullInfoType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__MerchantPullInfoType::MpStatus = MpStatus;
		_p->ns3__MerchantPullInfoType::MpMax = MpMax;
		_p->ns3__MerchantPullInfoType::MpCustom = MpCustom;
		_p->ns3__MerchantPullInfoType::Desc = Desc;
		_p->ns3__MerchantPullInfoType::Invoice = Invoice;
		_p->ns3__MerchantPullInfoType::Custom = Custom;
		_p->ns3__MerchantPullInfoType::PaymentSourceID = PaymentSourceID;
	}
	return _p;
}

inline int soap_write_ns3__MerchantPullInfoType(struct soap *soap, ns3__MerchantPullInfoType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:MerchantPullInfoType", p->soap_type() == SOAP_TYPE_ns3__MerchantPullInfoType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__MerchantPullInfoType(struct soap *soap, const char *URL, ns3__MerchantPullInfoType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:MerchantPullInfoType", p->soap_type() == SOAP_TYPE_ns3__MerchantPullInfoType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__MerchantPullInfoType(struct soap *soap, const char *URL, ns3__MerchantPullInfoType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:MerchantPullInfoType", p->soap_type() == SOAP_TYPE_ns3__MerchantPullInfoType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__MerchantPullInfoType * SOAP_FMAC4 soap_get_ns3__MerchantPullInfoType(struct soap*, ns3__MerchantPullInfoType *, const char*, const char*);

inline int soap_read_ns3__MerchantPullInfoType(struct soap *soap, ns3__MerchantPullInfoType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns3__MerchantPullInfoType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__MerchantPullInfoType(struct soap *soap, const char *URL, ns3__MerchantPullInfoType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__MerchantPullInfoType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__MerchantPullInfoType(struct soap *soap, ns3__MerchantPullInfoType *p)
{
	if (soap_read_ns3__MerchantPullInfoType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__MerchantPullPaymentResponseType_DEFINED
#define SOAP_TYPE_ns3__MerchantPullPaymentResponseType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__MerchantPullPaymentResponseType(struct soap*, const char*, int, const ns3__MerchantPullPaymentResponseType *, const char*);
SOAP_FMAC3 ns3__MerchantPullPaymentResponseType * SOAP_FMAC4 soap_in_ns3__MerchantPullPaymentResponseType(struct soap*, const char*, ns3__MerchantPullPaymentResponseType *, const char*);
SOAP_FMAC1 ns3__MerchantPullPaymentResponseType * SOAP_FMAC2 soap_instantiate_ns3__MerchantPullPaymentResponseType(struct soap*, int, const char*, const char*, size_t*);

inline ns3__MerchantPullPaymentResponseType * soap_new_ns3__MerchantPullPaymentResponseType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__MerchantPullPaymentResponseType(soap, n, NULL, NULL, NULL);
}

inline ns3__MerchantPullPaymentResponseType * soap_new_req_ns3__MerchantPullPaymentResponseType(
	struct soap *soap,
	ns3__PayerInfoType *PayerInfo,
	ns3__PaymentInfoType *PaymentInfo,
	ns3__MerchantPullInfoType *MerchantPullInfo)
{
	ns3__MerchantPullPaymentResponseType *_p = soap_new_ns3__MerchantPullPaymentResponseType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__MerchantPullPaymentResponseType::PayerInfo = PayerInfo;
		_p->ns3__MerchantPullPaymentResponseType::PaymentInfo = PaymentInfo;
		_p->ns3__MerchantPullPaymentResponseType::MerchantPullInfo = MerchantPullInfo;
	}
	return _p;
}

inline ns3__MerchantPullPaymentResponseType * soap_new_set_ns3__MerchantPullPaymentResponseType(
	struct soap *soap,
	ns3__PayerInfoType *PayerInfo,
	ns3__PaymentInfoType *PaymentInfo,
	ns3__MerchantPullInfoType *MerchantPullInfo)
{
	ns3__MerchantPullPaymentResponseType *_p = soap_new_ns3__MerchantPullPaymentResponseType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__MerchantPullPaymentResponseType::PayerInfo = PayerInfo;
		_p->ns3__MerchantPullPaymentResponseType::PaymentInfo = PaymentInfo;
		_p->ns3__MerchantPullPaymentResponseType::MerchantPullInfo = MerchantPullInfo;
	}
	return _p;
}

inline int soap_write_ns3__MerchantPullPaymentResponseType(struct soap *soap, ns3__MerchantPullPaymentResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:MerchantPullPaymentResponseType", p->soap_type() == SOAP_TYPE_ns3__MerchantPullPaymentResponseType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__MerchantPullPaymentResponseType(struct soap *soap, const char *URL, ns3__MerchantPullPaymentResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:MerchantPullPaymentResponseType", p->soap_type() == SOAP_TYPE_ns3__MerchantPullPaymentResponseType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__MerchantPullPaymentResponseType(struct soap *soap, const char *URL, ns3__MerchantPullPaymentResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:MerchantPullPaymentResponseType", p->soap_type() == SOAP_TYPE_ns3__MerchantPullPaymentResponseType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__MerchantPullPaymentResponseType * SOAP_FMAC4 soap_get_ns3__MerchantPullPaymentResponseType(struct soap*, ns3__MerchantPullPaymentResponseType *, const char*, const char*);

inline int soap_read_ns3__MerchantPullPaymentResponseType(struct soap *soap, ns3__MerchantPullPaymentResponseType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns3__MerchantPullPaymentResponseType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__MerchantPullPaymentResponseType(struct soap *soap, const char *URL, ns3__MerchantPullPaymentResponseType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__MerchantPullPaymentResponseType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__MerchantPullPaymentResponseType(struct soap *soap, ns3__MerchantPullPaymentResponseType *p)
{
	if (soap_read_ns3__MerchantPullPaymentResponseType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__BAUpdateResponseDetailsType_DEFINED
#define SOAP_TYPE_ns3__BAUpdateResponseDetailsType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__BAUpdateResponseDetailsType(struct soap*, const char*, int, const ns3__BAUpdateResponseDetailsType *, const char*);
SOAP_FMAC3 ns3__BAUpdateResponseDetailsType * SOAP_FMAC4 soap_in_ns3__BAUpdateResponseDetailsType(struct soap*, const char*, ns3__BAUpdateResponseDetailsType *, const char*);
SOAP_FMAC1 ns3__BAUpdateResponseDetailsType * SOAP_FMAC2 soap_instantiate_ns3__BAUpdateResponseDetailsType(struct soap*, int, const char*, const char*, size_t*);

inline ns3__BAUpdateResponseDetailsType * soap_new_ns3__BAUpdateResponseDetailsType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__BAUpdateResponseDetailsType(soap, n, NULL, NULL, NULL);
}

inline ns3__BAUpdateResponseDetailsType * soap_new_req_ns3__BAUpdateResponseDetailsType(
	struct soap *soap,
	const std::string& BillingAgreementID,
	enum ns3__MerchantPullStatusCodeType BillingAgreementStatus,
	ns3__PayerInfoType *PayerInfo)
{
	ns3__BAUpdateResponseDetailsType *_p = soap_new_ns3__BAUpdateResponseDetailsType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__BAUpdateResponseDetailsType::BillingAgreementID = BillingAgreementID;
		_p->ns3__BAUpdateResponseDetailsType::BillingAgreementStatus = BillingAgreementStatus;
		_p->ns3__BAUpdateResponseDetailsType::PayerInfo = PayerInfo;
	}
	return _p;
}

inline ns3__BAUpdateResponseDetailsType * soap_new_set_ns3__BAUpdateResponseDetailsType(
	struct soap *soap,
	const std::string& BillingAgreementID,
	std::string *BillingAgreementDescription,
	enum ns3__MerchantPullStatusCodeType BillingAgreementStatus,
	std::string *BillingAgreementCustom,
	ns3__PayerInfoType *PayerInfo,
	ns2__BasicAmountType *BillingAgreementMax,
	ns3__AddressType *BillingAddress,
	ns3__PayeeInfoType *PayeeInfo)
{
	ns3__BAUpdateResponseDetailsType *_p = soap_new_ns3__BAUpdateResponseDetailsType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__BAUpdateResponseDetailsType::BillingAgreementID = BillingAgreementID;
		_p->ns3__BAUpdateResponseDetailsType::BillingAgreementDescription = BillingAgreementDescription;
		_p->ns3__BAUpdateResponseDetailsType::BillingAgreementStatus = BillingAgreementStatus;
		_p->ns3__BAUpdateResponseDetailsType::BillingAgreementCustom = BillingAgreementCustom;
		_p->ns3__BAUpdateResponseDetailsType::PayerInfo = PayerInfo;
		_p->ns3__BAUpdateResponseDetailsType::BillingAgreementMax = BillingAgreementMax;
		_p->ns3__BAUpdateResponseDetailsType::BillingAddress = BillingAddress;
		_p->ns3__BAUpdateResponseDetailsType::PayeeInfo = PayeeInfo;
	}
	return _p;
}

inline int soap_write_ns3__BAUpdateResponseDetailsType(struct soap *soap, ns3__BAUpdateResponseDetailsType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:BAUpdateResponseDetailsType", p->soap_type() == SOAP_TYPE_ns3__BAUpdateResponseDetailsType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__BAUpdateResponseDetailsType(struct soap *soap, const char *URL, ns3__BAUpdateResponseDetailsType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:BAUpdateResponseDetailsType", p->soap_type() == SOAP_TYPE_ns3__BAUpdateResponseDetailsType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__BAUpdateResponseDetailsType(struct soap *soap, const char *URL, ns3__BAUpdateResponseDetailsType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:BAUpdateResponseDetailsType", p->soap_type() == SOAP_TYPE_ns3__BAUpdateResponseDetailsType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__BAUpdateResponseDetailsType * SOAP_FMAC4 soap_get_ns3__BAUpdateResponseDetailsType(struct soap*, ns3__BAUpdateResponseDetailsType *, const char*, const char*);

inline int soap_read_ns3__BAUpdateResponseDetailsType(struct soap *soap, ns3__BAUpdateResponseDetailsType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns3__BAUpdateResponseDetailsType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__BAUpdateResponseDetailsType(struct soap *soap, const char *URL, ns3__BAUpdateResponseDetailsType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__BAUpdateResponseDetailsType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__BAUpdateResponseDetailsType(struct soap *soap, ns3__BAUpdateResponseDetailsType *p)
{
	if (soap_read_ns3__BAUpdateResponseDetailsType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__GetAccessPermissionDetailsResponseDetailsType_DEFINED
#define SOAP_TYPE_ns3__GetAccessPermissionDetailsResponseDetailsType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__GetAccessPermissionDetailsResponseDetailsType(struct soap*, const char*, int, const ns3__GetAccessPermissionDetailsResponseDetailsType *, const char*);
SOAP_FMAC3 ns3__GetAccessPermissionDetailsResponseDetailsType * SOAP_FMAC4 soap_in_ns3__GetAccessPermissionDetailsResponseDetailsType(struct soap*, const char*, ns3__GetAccessPermissionDetailsResponseDetailsType *, const char*);
SOAP_FMAC1 ns3__GetAccessPermissionDetailsResponseDetailsType * SOAP_FMAC2 soap_instantiate_ns3__GetAccessPermissionDetailsResponseDetailsType(struct soap*, int, const char*, const char*, size_t*);

inline ns3__GetAccessPermissionDetailsResponseDetailsType * soap_new_ns3__GetAccessPermissionDetailsResponseDetailsType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__GetAccessPermissionDetailsResponseDetailsType(soap, n, NULL, NULL, NULL);
}

inline ns3__GetAccessPermissionDetailsResponseDetailsType * soap_new_req_ns3__GetAccessPermissionDetailsResponseDetailsType(
	struct soap *soap,
	const std::string& PayerID)
{
	ns3__GetAccessPermissionDetailsResponseDetailsType *_p = soap_new_ns3__GetAccessPermissionDetailsResponseDetailsType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__GetAccessPermissionDetailsResponseDetailsType::PayerID = PayerID;
	}
	return _p;
}

inline ns3__GetAccessPermissionDetailsResponseDetailsType * soap_new_set_ns3__GetAccessPermissionDetailsResponseDetailsType(
	struct soap *soap,
	std::string *FirstName,
	std::string *LastName,
	std::string *Email,
	const std::vector<std::string> & AccessPermissionName,
	const std::vector<std::string> & AccessPermissionStatus,
	const std::string& PayerID)
{
	ns3__GetAccessPermissionDetailsResponseDetailsType *_p = soap_new_ns3__GetAccessPermissionDetailsResponseDetailsType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__GetAccessPermissionDetailsResponseDetailsType::FirstName = FirstName;
		_p->ns3__GetAccessPermissionDetailsResponseDetailsType::LastName = LastName;
		_p->ns3__GetAccessPermissionDetailsResponseDetailsType::Email = Email;
		_p->ns3__GetAccessPermissionDetailsResponseDetailsType::AccessPermissionName = AccessPermissionName;
		_p->ns3__GetAccessPermissionDetailsResponseDetailsType::AccessPermissionStatus = AccessPermissionStatus;
		_p->ns3__GetAccessPermissionDetailsResponseDetailsType::PayerID = PayerID;
	}
	return _p;
}

inline int soap_write_ns3__GetAccessPermissionDetailsResponseDetailsType(struct soap *soap, ns3__GetAccessPermissionDetailsResponseDetailsType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:GetAccessPermissionDetailsResponseDetailsType", p->soap_type() == SOAP_TYPE_ns3__GetAccessPermissionDetailsResponseDetailsType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__GetAccessPermissionDetailsResponseDetailsType(struct soap *soap, const char *URL, ns3__GetAccessPermissionDetailsResponseDetailsType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:GetAccessPermissionDetailsResponseDetailsType", p->soap_type() == SOAP_TYPE_ns3__GetAccessPermissionDetailsResponseDetailsType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__GetAccessPermissionDetailsResponseDetailsType(struct soap *soap, const char *URL, ns3__GetAccessPermissionDetailsResponseDetailsType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:GetAccessPermissionDetailsResponseDetailsType", p->soap_type() == SOAP_TYPE_ns3__GetAccessPermissionDetailsResponseDetailsType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__GetAccessPermissionDetailsResponseDetailsType * SOAP_FMAC4 soap_get_ns3__GetAccessPermissionDetailsResponseDetailsType(struct soap*, ns3__GetAccessPermissionDetailsResponseDetailsType *, const char*, const char*);

inline int soap_read_ns3__GetAccessPermissionDetailsResponseDetailsType(struct soap *soap, ns3__GetAccessPermissionDetailsResponseDetailsType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns3__GetAccessPermissionDetailsResponseDetailsType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__GetAccessPermissionDetailsResponseDetailsType(struct soap *soap, const char *URL, ns3__GetAccessPermissionDetailsResponseDetailsType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__GetAccessPermissionDetailsResponseDetailsType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__GetAccessPermissionDetailsResponseDetailsType(struct soap *soap, ns3__GetAccessPermissionDetailsResponseDetailsType *p)
{
	if (soap_read_ns3__GetAccessPermissionDetailsResponseDetailsType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__SetAccessPermissionsRequestDetailsType_DEFINED
#define SOAP_TYPE_ns3__SetAccessPermissionsRequestDetailsType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__SetAccessPermissionsRequestDetailsType(struct soap*, const char*, int, const ns3__SetAccessPermissionsRequestDetailsType *, const char*);
SOAP_FMAC3 ns3__SetAccessPermissionsRequestDetailsType * SOAP_FMAC4 soap_in_ns3__SetAccessPermissionsRequestDetailsType(struct soap*, const char*, ns3__SetAccessPermissionsRequestDetailsType *, const char*);
SOAP_FMAC1 ns3__SetAccessPermissionsRequestDetailsType * SOAP_FMAC2 soap_instantiate_ns3__SetAccessPermissionsRequestDetailsType(struct soap*, int, const char*, const char*, size_t*);

inline ns3__SetAccessPermissionsRequestDetailsType * soap_new_ns3__SetAccessPermissionsRequestDetailsType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__SetAccessPermissionsRequestDetailsType(soap, n, NULL, NULL, NULL);
}

inline ns3__SetAccessPermissionsRequestDetailsType * soap_new_req_ns3__SetAccessPermissionsRequestDetailsType(
	struct soap *soap,
	const std::string& ReturnURL,
	const std::string& CancelURL,
	const std::string& LogoutURL)
{
	ns3__SetAccessPermissionsRequestDetailsType *_p = soap_new_ns3__SetAccessPermissionsRequestDetailsType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__SetAccessPermissionsRequestDetailsType::ReturnURL = ReturnURL;
		_p->ns3__SetAccessPermissionsRequestDetailsType::CancelURL = CancelURL;
		_p->ns3__SetAccessPermissionsRequestDetailsType::LogoutURL = LogoutURL;
	}
	return _p;
}

inline ns3__SetAccessPermissionsRequestDetailsType * soap_new_set_ns3__SetAccessPermissionsRequestDetailsType(
	struct soap *soap,
	const std::string& ReturnURL,
	const std::string& CancelURL,
	const std::string& LogoutURL,
	std::string *InitFlowType,
	std::string *SkipLoginPage,
	const std::vector<std::string> & RequiredAccessPermissions,
	const std::vector<std::string> & OptionalAccessPermissions,
	std::string *LocaleCode,
	std::string *PageStyle,
	std::string *cpp_header_image,
	std::string *cpp_header_border_color,
	std::string *cpp_header_back_color,
	std::string *cpp_payflow_color,
	std::string *FirstName,
	std::string *LastName,
	ns3__AddressType *Address)
{
	ns3__SetAccessPermissionsRequestDetailsType *_p = soap_new_ns3__SetAccessPermissionsRequestDetailsType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__SetAccessPermissionsRequestDetailsType::ReturnURL = ReturnURL;
		_p->ns3__SetAccessPermissionsRequestDetailsType::CancelURL = CancelURL;
		_p->ns3__SetAccessPermissionsRequestDetailsType::LogoutURL = LogoutURL;
		_p->ns3__SetAccessPermissionsRequestDetailsType::InitFlowType = InitFlowType;
		_p->ns3__SetAccessPermissionsRequestDetailsType::SkipLoginPage = SkipLoginPage;
		_p->ns3__SetAccessPermissionsRequestDetailsType::RequiredAccessPermissions = RequiredAccessPermissions;
		_p->ns3__SetAccessPermissionsRequestDetailsType::OptionalAccessPermissions = OptionalAccessPermissions;
		_p->ns3__SetAccessPermissionsRequestDetailsType::LocaleCode = LocaleCode;
		_p->ns3__SetAccessPermissionsRequestDetailsType::PageStyle = PageStyle;
		_p->ns3__SetAccessPermissionsRequestDetailsType::cpp_header_image = cpp_header_image;
		_p->ns3__SetAccessPermissionsRequestDetailsType::cpp_header_border_color = cpp_header_border_color;
		_p->ns3__SetAccessPermissionsRequestDetailsType::cpp_header_back_color = cpp_header_back_color;
		_p->ns3__SetAccessPermissionsRequestDetailsType::cpp_payflow_color = cpp_payflow_color;
		_p->ns3__SetAccessPermissionsRequestDetailsType::FirstName = FirstName;
		_p->ns3__SetAccessPermissionsRequestDetailsType::LastName = LastName;
		_p->ns3__SetAccessPermissionsRequestDetailsType::Address = Address;
	}
	return _p;
}

inline int soap_write_ns3__SetAccessPermissionsRequestDetailsType(struct soap *soap, ns3__SetAccessPermissionsRequestDetailsType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:SetAccessPermissionsRequestDetailsType", p->soap_type() == SOAP_TYPE_ns3__SetAccessPermissionsRequestDetailsType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__SetAccessPermissionsRequestDetailsType(struct soap *soap, const char *URL, ns3__SetAccessPermissionsRequestDetailsType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:SetAccessPermissionsRequestDetailsType", p->soap_type() == SOAP_TYPE_ns3__SetAccessPermissionsRequestDetailsType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__SetAccessPermissionsRequestDetailsType(struct soap *soap, const char *URL, ns3__SetAccessPermissionsRequestDetailsType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:SetAccessPermissionsRequestDetailsType", p->soap_type() == SOAP_TYPE_ns3__SetAccessPermissionsRequestDetailsType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__SetAccessPermissionsRequestDetailsType * SOAP_FMAC4 soap_get_ns3__SetAccessPermissionsRequestDetailsType(struct soap*, ns3__SetAccessPermissionsRequestDetailsType *, const char*, const char*);

inline int soap_read_ns3__SetAccessPermissionsRequestDetailsType(struct soap *soap, ns3__SetAccessPermissionsRequestDetailsType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns3__SetAccessPermissionsRequestDetailsType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__SetAccessPermissionsRequestDetailsType(struct soap *soap, const char *URL, ns3__SetAccessPermissionsRequestDetailsType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__SetAccessPermissionsRequestDetailsType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__SetAccessPermissionsRequestDetailsType(struct soap *soap, ns3__SetAccessPermissionsRequestDetailsType *p)
{
	if (soap_read_ns3__SetAccessPermissionsRequestDetailsType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__GetAuthDetailsResponseDetailsType_DEFINED
#define SOAP_TYPE_ns3__GetAuthDetailsResponseDetailsType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__GetAuthDetailsResponseDetailsType(struct soap*, const char*, int, const ns3__GetAuthDetailsResponseDetailsType *, const char*);
SOAP_FMAC3 ns3__GetAuthDetailsResponseDetailsType * SOAP_FMAC4 soap_in_ns3__GetAuthDetailsResponseDetailsType(struct soap*, const char*, ns3__GetAuthDetailsResponseDetailsType *, const char*);
SOAP_FMAC1 ns3__GetAuthDetailsResponseDetailsType * SOAP_FMAC2 soap_instantiate_ns3__GetAuthDetailsResponseDetailsType(struct soap*, int, const char*, const char*, size_t*);

inline ns3__GetAuthDetailsResponseDetailsType * soap_new_ns3__GetAuthDetailsResponseDetailsType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__GetAuthDetailsResponseDetailsType(soap, n, NULL, NULL, NULL);
}

inline ns3__GetAuthDetailsResponseDetailsType * soap_new_req_ns3__GetAuthDetailsResponseDetailsType(
	struct soap *soap,
	const std::string& PayerID)
{
	ns3__GetAuthDetailsResponseDetailsType *_p = soap_new_ns3__GetAuthDetailsResponseDetailsType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__GetAuthDetailsResponseDetailsType::PayerID = PayerID;
	}
	return _p;
}

inline ns3__GetAuthDetailsResponseDetailsType * soap_new_set_ns3__GetAuthDetailsResponseDetailsType(
	struct soap *soap,
	std::string *FirstName,
	std::string *LastName,
	std::string *Email,
	const std::string& PayerID)
{
	ns3__GetAuthDetailsResponseDetailsType *_p = soap_new_ns3__GetAuthDetailsResponseDetailsType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__GetAuthDetailsResponseDetailsType::FirstName = FirstName;
		_p->ns3__GetAuthDetailsResponseDetailsType::LastName = LastName;
		_p->ns3__GetAuthDetailsResponseDetailsType::Email = Email;
		_p->ns3__GetAuthDetailsResponseDetailsType::PayerID = PayerID;
	}
	return _p;
}

inline int soap_write_ns3__GetAuthDetailsResponseDetailsType(struct soap *soap, ns3__GetAuthDetailsResponseDetailsType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:GetAuthDetailsResponseDetailsType", p->soap_type() == SOAP_TYPE_ns3__GetAuthDetailsResponseDetailsType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__GetAuthDetailsResponseDetailsType(struct soap *soap, const char *URL, ns3__GetAuthDetailsResponseDetailsType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:GetAuthDetailsResponseDetailsType", p->soap_type() == SOAP_TYPE_ns3__GetAuthDetailsResponseDetailsType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__GetAuthDetailsResponseDetailsType(struct soap *soap, const char *URL, ns3__GetAuthDetailsResponseDetailsType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:GetAuthDetailsResponseDetailsType", p->soap_type() == SOAP_TYPE_ns3__GetAuthDetailsResponseDetailsType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__GetAuthDetailsResponseDetailsType * SOAP_FMAC4 soap_get_ns3__GetAuthDetailsResponseDetailsType(struct soap*, ns3__GetAuthDetailsResponseDetailsType *, const char*, const char*);

inline int soap_read_ns3__GetAuthDetailsResponseDetailsType(struct soap *soap, ns3__GetAuthDetailsResponseDetailsType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns3__GetAuthDetailsResponseDetailsType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__GetAuthDetailsResponseDetailsType(struct soap *soap, const char *URL, ns3__GetAuthDetailsResponseDetailsType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__GetAuthDetailsResponseDetailsType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__GetAuthDetailsResponseDetailsType(struct soap *soap, ns3__GetAuthDetailsResponseDetailsType *p)
{
	if (soap_read_ns3__GetAuthDetailsResponseDetailsType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__SetAuthFlowParamRequestDetailsType_DEFINED
#define SOAP_TYPE_ns3__SetAuthFlowParamRequestDetailsType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__SetAuthFlowParamRequestDetailsType(struct soap*, const char*, int, const ns3__SetAuthFlowParamRequestDetailsType *, const char*);
SOAP_FMAC3 ns3__SetAuthFlowParamRequestDetailsType * SOAP_FMAC4 soap_in_ns3__SetAuthFlowParamRequestDetailsType(struct soap*, const char*, ns3__SetAuthFlowParamRequestDetailsType *, const char*);
SOAP_FMAC1 ns3__SetAuthFlowParamRequestDetailsType * SOAP_FMAC2 soap_instantiate_ns3__SetAuthFlowParamRequestDetailsType(struct soap*, int, const char*, const char*, size_t*);

inline ns3__SetAuthFlowParamRequestDetailsType * soap_new_ns3__SetAuthFlowParamRequestDetailsType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__SetAuthFlowParamRequestDetailsType(soap, n, NULL, NULL, NULL);
}

inline ns3__SetAuthFlowParamRequestDetailsType * soap_new_req_ns3__SetAuthFlowParamRequestDetailsType(
	struct soap *soap,
	const std::string& ReturnURL,
	const std::string& CancelURL,
	const std::string& LogoutURL)
{
	ns3__SetAuthFlowParamRequestDetailsType *_p = soap_new_ns3__SetAuthFlowParamRequestDetailsType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__SetAuthFlowParamRequestDetailsType::ReturnURL = ReturnURL;
		_p->ns3__SetAuthFlowParamRequestDetailsType::CancelURL = CancelURL;
		_p->ns3__SetAuthFlowParamRequestDetailsType::LogoutURL = LogoutURL;
	}
	return _p;
}

inline ns3__SetAuthFlowParamRequestDetailsType * soap_new_set_ns3__SetAuthFlowParamRequestDetailsType(
	struct soap *soap,
	const std::string& ReturnURL,
	const std::string& CancelURL,
	const std::string& LogoutURL,
	std::string *InitFlowType,
	std::string *SkipLoginPage,
	std::string *ServiceName1,
	std::string *ServiceDefReq1,
	std::string *ServiceName2,
	std::string *ServiceDefReq2,
	std::string *LocaleCode,
	std::string *PageStyle,
	std::string *cpp_header_image,
	std::string *cpp_header_border_color,
	std::string *cpp_header_back_color,
	std::string *cpp_payflow_color,
	std::string *FirstName,
	std::string *LastName,
	ns3__AddressType *Address)
{
	ns3__SetAuthFlowParamRequestDetailsType *_p = soap_new_ns3__SetAuthFlowParamRequestDetailsType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__SetAuthFlowParamRequestDetailsType::ReturnURL = ReturnURL;
		_p->ns3__SetAuthFlowParamRequestDetailsType::CancelURL = CancelURL;
		_p->ns3__SetAuthFlowParamRequestDetailsType::LogoutURL = LogoutURL;
		_p->ns3__SetAuthFlowParamRequestDetailsType::InitFlowType = InitFlowType;
		_p->ns3__SetAuthFlowParamRequestDetailsType::SkipLoginPage = SkipLoginPage;
		_p->ns3__SetAuthFlowParamRequestDetailsType::ServiceName1 = ServiceName1;
		_p->ns3__SetAuthFlowParamRequestDetailsType::ServiceDefReq1 = ServiceDefReq1;
		_p->ns3__SetAuthFlowParamRequestDetailsType::ServiceName2 = ServiceName2;
		_p->ns3__SetAuthFlowParamRequestDetailsType::ServiceDefReq2 = ServiceDefReq2;
		_p->ns3__SetAuthFlowParamRequestDetailsType::LocaleCode = LocaleCode;
		_p->ns3__SetAuthFlowParamRequestDetailsType::PageStyle = PageStyle;
		_p->ns3__SetAuthFlowParamRequestDetailsType::cpp_header_image = cpp_header_image;
		_p->ns3__SetAuthFlowParamRequestDetailsType::cpp_header_border_color = cpp_header_border_color;
		_p->ns3__SetAuthFlowParamRequestDetailsType::cpp_header_back_color = cpp_header_back_color;
		_p->ns3__SetAuthFlowParamRequestDetailsType::cpp_payflow_color = cpp_payflow_color;
		_p->ns3__SetAuthFlowParamRequestDetailsType::FirstName = FirstName;
		_p->ns3__SetAuthFlowParamRequestDetailsType::LastName = LastName;
		_p->ns3__SetAuthFlowParamRequestDetailsType::Address = Address;
	}
	return _p;
}

inline int soap_write_ns3__SetAuthFlowParamRequestDetailsType(struct soap *soap, ns3__SetAuthFlowParamRequestDetailsType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:SetAuthFlowParamRequestDetailsType", p->soap_type() == SOAP_TYPE_ns3__SetAuthFlowParamRequestDetailsType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__SetAuthFlowParamRequestDetailsType(struct soap *soap, const char *URL, ns3__SetAuthFlowParamRequestDetailsType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:SetAuthFlowParamRequestDetailsType", p->soap_type() == SOAP_TYPE_ns3__SetAuthFlowParamRequestDetailsType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__SetAuthFlowParamRequestDetailsType(struct soap *soap, const char *URL, ns3__SetAuthFlowParamRequestDetailsType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:SetAuthFlowParamRequestDetailsType", p->soap_type() == SOAP_TYPE_ns3__SetAuthFlowParamRequestDetailsType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__SetAuthFlowParamRequestDetailsType * SOAP_FMAC4 soap_get_ns3__SetAuthFlowParamRequestDetailsType(struct soap*, ns3__SetAuthFlowParamRequestDetailsType *, const char*, const char*);

inline int soap_read_ns3__SetAuthFlowParamRequestDetailsType(struct soap *soap, ns3__SetAuthFlowParamRequestDetailsType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns3__SetAuthFlowParamRequestDetailsType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__SetAuthFlowParamRequestDetailsType(struct soap *soap, const char *URL, ns3__SetAuthFlowParamRequestDetailsType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__SetAuthFlowParamRequestDetailsType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__SetAuthFlowParamRequestDetailsType(struct soap *soap, ns3__SetAuthFlowParamRequestDetailsType *p)
{
	if (soap_read_ns3__SetAuthFlowParamRequestDetailsType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__GetMobileStatusRequestDetailsType_DEFINED
#define SOAP_TYPE_ns3__GetMobileStatusRequestDetailsType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__GetMobileStatusRequestDetailsType(struct soap*, const char*, int, const ns3__GetMobileStatusRequestDetailsType *, const char*);
SOAP_FMAC3 ns3__GetMobileStatusRequestDetailsType * SOAP_FMAC4 soap_in_ns3__GetMobileStatusRequestDetailsType(struct soap*, const char*, ns3__GetMobileStatusRequestDetailsType *, const char*);
SOAP_FMAC1 ns3__GetMobileStatusRequestDetailsType * SOAP_FMAC2 soap_instantiate_ns3__GetMobileStatusRequestDetailsType(struct soap*, int, const char*, const char*, size_t*);

inline ns3__GetMobileStatusRequestDetailsType * soap_new_ns3__GetMobileStatusRequestDetailsType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__GetMobileStatusRequestDetailsType(soap, n, NULL, NULL, NULL);
}

inline ns3__GetMobileStatusRequestDetailsType * soap_new_req_ns3__GetMobileStatusRequestDetailsType(
	struct soap *soap,
	ns3__PhoneNumberType *Phone)
{
	ns3__GetMobileStatusRequestDetailsType *_p = soap_new_ns3__GetMobileStatusRequestDetailsType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__GetMobileStatusRequestDetailsType::Phone = Phone;
	}
	return _p;
}

inline ns3__GetMobileStatusRequestDetailsType * soap_new_set_ns3__GetMobileStatusRequestDetailsType(
	struct soap *soap,
	ns3__PhoneNumberType *Phone)
{
	ns3__GetMobileStatusRequestDetailsType *_p = soap_new_ns3__GetMobileStatusRequestDetailsType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__GetMobileStatusRequestDetailsType::Phone = Phone;
	}
	return _p;
}

inline int soap_write_ns3__GetMobileStatusRequestDetailsType(struct soap *soap, ns3__GetMobileStatusRequestDetailsType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:GetMobileStatusRequestDetailsType", p->soap_type() == SOAP_TYPE_ns3__GetMobileStatusRequestDetailsType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__GetMobileStatusRequestDetailsType(struct soap *soap, const char *URL, ns3__GetMobileStatusRequestDetailsType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:GetMobileStatusRequestDetailsType", p->soap_type() == SOAP_TYPE_ns3__GetMobileStatusRequestDetailsType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__GetMobileStatusRequestDetailsType(struct soap *soap, const char *URL, ns3__GetMobileStatusRequestDetailsType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:GetMobileStatusRequestDetailsType", p->soap_type() == SOAP_TYPE_ns3__GetMobileStatusRequestDetailsType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__GetMobileStatusRequestDetailsType * SOAP_FMAC4 soap_get_ns3__GetMobileStatusRequestDetailsType(struct soap*, ns3__GetMobileStatusRequestDetailsType *, const char*, const char*);

inline int soap_read_ns3__GetMobileStatusRequestDetailsType(struct soap *soap, ns3__GetMobileStatusRequestDetailsType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns3__GetMobileStatusRequestDetailsType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__GetMobileStatusRequestDetailsType(struct soap *soap, const char *URL, ns3__GetMobileStatusRequestDetailsType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__GetMobileStatusRequestDetailsType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__GetMobileStatusRequestDetailsType(struct soap *soap, ns3__GetMobileStatusRequestDetailsType *p)
{
	if (soap_read_ns3__GetMobileStatusRequestDetailsType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__CreateMobilePaymentRequestDetailsType_DEFINED
#define SOAP_TYPE_ns3__CreateMobilePaymentRequestDetailsType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__CreateMobilePaymentRequestDetailsType(struct soap*, const char*, int, const ns3__CreateMobilePaymentRequestDetailsType *, const char*);
SOAP_FMAC3 ns3__CreateMobilePaymentRequestDetailsType * SOAP_FMAC4 soap_in_ns3__CreateMobilePaymentRequestDetailsType(struct soap*, const char*, ns3__CreateMobilePaymentRequestDetailsType *, const char*);
SOAP_FMAC1 ns3__CreateMobilePaymentRequestDetailsType * SOAP_FMAC2 soap_instantiate_ns3__CreateMobilePaymentRequestDetailsType(struct soap*, int, const char*, const char*, size_t*);

inline ns3__CreateMobilePaymentRequestDetailsType * soap_new_ns3__CreateMobilePaymentRequestDetailsType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__CreateMobilePaymentRequestDetailsType(soap, n, NULL, NULL, NULL);
}

inline ns3__CreateMobilePaymentRequestDetailsType * soap_new_req_ns3__CreateMobilePaymentRequestDetailsType(
	struct soap *soap,
	enum ns3__MobilePaymentCodeType PaymentType,
	enum ns3__PaymentActionCodeType PaymentAction,
	ns3__PhoneNumberType *SenderPhone,
	enum ns3__MobileRecipientCodeType RecipientType,
	ns2__BasicAmountType *ItemAmount)
{
	ns3__CreateMobilePaymentRequestDetailsType *_p = soap_new_ns3__CreateMobilePaymentRequestDetailsType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__CreateMobilePaymentRequestDetailsType::PaymentType = PaymentType;
		_p->ns3__CreateMobilePaymentRequestDetailsType::PaymentAction = PaymentAction;
		_p->ns3__CreateMobilePaymentRequestDetailsType::SenderPhone = SenderPhone;
		_p->ns3__CreateMobilePaymentRequestDetailsType::RecipientType = RecipientType;
		_p->ns3__CreateMobilePaymentRequestDetailsType::ItemAmount = ItemAmount;
	}
	return _p;
}

inline ns3__CreateMobilePaymentRequestDetailsType * soap_new_set_ns3__CreateMobilePaymentRequestDetailsType(
	struct soap *soap,
	enum ns3__MobilePaymentCodeType PaymentType,
	enum ns3__PaymentActionCodeType PaymentAction,
	ns3__PhoneNumberType *SenderPhone,
	enum ns3__MobileRecipientCodeType RecipientType,
	std::string *RecipientEmail,
	ns3__PhoneNumberType *RecipientPhone,
	ns2__BasicAmountType *ItemAmount,
	ns2__BasicAmountType *Tax,
	ns2__BasicAmountType *Shipping,
	std::string *ItemName,
	std::string *ItemNumber,
	std::string *Note,
	std::string *CustomID,
	std::string *SharePhoneNumber,
	std::string *ShareHomeAddress)
{
	ns3__CreateMobilePaymentRequestDetailsType *_p = soap_new_ns3__CreateMobilePaymentRequestDetailsType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__CreateMobilePaymentRequestDetailsType::PaymentType = PaymentType;
		_p->ns3__CreateMobilePaymentRequestDetailsType::PaymentAction = PaymentAction;
		_p->ns3__CreateMobilePaymentRequestDetailsType::SenderPhone = SenderPhone;
		_p->ns3__CreateMobilePaymentRequestDetailsType::RecipientType = RecipientType;
		_p->ns3__CreateMobilePaymentRequestDetailsType::RecipientEmail = RecipientEmail;
		_p->ns3__CreateMobilePaymentRequestDetailsType::RecipientPhone = RecipientPhone;
		_p->ns3__CreateMobilePaymentRequestDetailsType::ItemAmount = ItemAmount;
		_p->ns3__CreateMobilePaymentRequestDetailsType::Tax = Tax;
		_p->ns3__CreateMobilePaymentRequestDetailsType::Shipping = Shipping;
		_p->ns3__CreateMobilePaymentRequestDetailsType::ItemName = ItemName;
		_p->ns3__CreateMobilePaymentRequestDetailsType::ItemNumber = ItemNumber;
		_p->ns3__CreateMobilePaymentRequestDetailsType::Note = Note;
		_p->ns3__CreateMobilePaymentRequestDetailsType::CustomID = CustomID;
		_p->ns3__CreateMobilePaymentRequestDetailsType::SharePhoneNumber = SharePhoneNumber;
		_p->ns3__CreateMobilePaymentRequestDetailsType::ShareHomeAddress = ShareHomeAddress;
	}
	return _p;
}

inline int soap_write_ns3__CreateMobilePaymentRequestDetailsType(struct soap *soap, ns3__CreateMobilePaymentRequestDetailsType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:CreateMobilePaymentRequestDetailsType", p->soap_type() == SOAP_TYPE_ns3__CreateMobilePaymentRequestDetailsType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__CreateMobilePaymentRequestDetailsType(struct soap *soap, const char *URL, ns3__CreateMobilePaymentRequestDetailsType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:CreateMobilePaymentRequestDetailsType", p->soap_type() == SOAP_TYPE_ns3__CreateMobilePaymentRequestDetailsType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__CreateMobilePaymentRequestDetailsType(struct soap *soap, const char *URL, ns3__CreateMobilePaymentRequestDetailsType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:CreateMobilePaymentRequestDetailsType", p->soap_type() == SOAP_TYPE_ns3__CreateMobilePaymentRequestDetailsType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__CreateMobilePaymentRequestDetailsType * SOAP_FMAC4 soap_get_ns3__CreateMobilePaymentRequestDetailsType(struct soap*, ns3__CreateMobilePaymentRequestDetailsType *, const char*, const char*);

inline int soap_read_ns3__CreateMobilePaymentRequestDetailsType(struct soap *soap, ns3__CreateMobilePaymentRequestDetailsType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns3__CreateMobilePaymentRequestDetailsType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__CreateMobilePaymentRequestDetailsType(struct soap *soap, const char *URL, ns3__CreateMobilePaymentRequestDetailsType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__CreateMobilePaymentRequestDetailsType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__CreateMobilePaymentRequestDetailsType(struct soap *soap, ns3__CreateMobilePaymentRequestDetailsType *p)
{
	if (soap_read_ns3__CreateMobilePaymentRequestDetailsType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__DoDirectPaymentRequestDetailsType_DEFINED
#define SOAP_TYPE_ns3__DoDirectPaymentRequestDetailsType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__DoDirectPaymentRequestDetailsType(struct soap*, const char*, int, const ns3__DoDirectPaymentRequestDetailsType *, const char*);
SOAP_FMAC3 ns3__DoDirectPaymentRequestDetailsType * SOAP_FMAC4 soap_in_ns3__DoDirectPaymentRequestDetailsType(struct soap*, const char*, ns3__DoDirectPaymentRequestDetailsType *, const char*);
SOAP_FMAC1 ns3__DoDirectPaymentRequestDetailsType * SOAP_FMAC2 soap_instantiate_ns3__DoDirectPaymentRequestDetailsType(struct soap*, int, const char*, const char*, size_t*);

inline ns3__DoDirectPaymentRequestDetailsType * soap_new_ns3__DoDirectPaymentRequestDetailsType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__DoDirectPaymentRequestDetailsType(soap, n, NULL, NULL, NULL);
}

inline ns3__DoDirectPaymentRequestDetailsType * soap_new_req_ns3__DoDirectPaymentRequestDetailsType(
	struct soap *soap,
	enum ns3__PaymentActionCodeType PaymentAction,
	ns3__PaymentDetailsType *PaymentDetails,
	ns3__CreditCardDetailsType *CreditCard,
	const std::string& IPAddress)
{
	ns3__DoDirectPaymentRequestDetailsType *_p = soap_new_ns3__DoDirectPaymentRequestDetailsType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__DoDirectPaymentRequestDetailsType::PaymentAction = PaymentAction;
		_p->ns3__DoDirectPaymentRequestDetailsType::PaymentDetails = PaymentDetails;
		_p->ns3__DoDirectPaymentRequestDetailsType::CreditCard = CreditCard;
		_p->ns3__DoDirectPaymentRequestDetailsType::IPAddress = IPAddress;
	}
	return _p;
}

inline ns3__DoDirectPaymentRequestDetailsType * soap_new_set_ns3__DoDirectPaymentRequestDetailsType(
	struct soap *soap,
	enum ns3__PaymentActionCodeType PaymentAction,
	ns3__PaymentDetailsType *PaymentDetails,
	ns3__CreditCardDetailsType *CreditCard,
	const std::string& IPAddress,
	std::string *MerchantSessionId,
	bool *ReturnFMFDetails,
	std::string *SoftDescriptor,
	std::string *SoftDescriptorCity)
{
	ns3__DoDirectPaymentRequestDetailsType *_p = soap_new_ns3__DoDirectPaymentRequestDetailsType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__DoDirectPaymentRequestDetailsType::PaymentAction = PaymentAction;
		_p->ns3__DoDirectPaymentRequestDetailsType::PaymentDetails = PaymentDetails;
		_p->ns3__DoDirectPaymentRequestDetailsType::CreditCard = CreditCard;
		_p->ns3__DoDirectPaymentRequestDetailsType::IPAddress = IPAddress;
		_p->ns3__DoDirectPaymentRequestDetailsType::MerchantSessionId = MerchantSessionId;
		_p->ns3__DoDirectPaymentRequestDetailsType::ReturnFMFDetails = ReturnFMFDetails;
		_p->ns3__DoDirectPaymentRequestDetailsType::SoftDescriptor = SoftDescriptor;
		_p->ns3__DoDirectPaymentRequestDetailsType::SoftDescriptorCity = SoftDescriptorCity;
	}
	return _p;
}

inline int soap_write_ns3__DoDirectPaymentRequestDetailsType(struct soap *soap, ns3__DoDirectPaymentRequestDetailsType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:DoDirectPaymentRequestDetailsType", p->soap_type() == SOAP_TYPE_ns3__DoDirectPaymentRequestDetailsType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__DoDirectPaymentRequestDetailsType(struct soap *soap, const char *URL, ns3__DoDirectPaymentRequestDetailsType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:DoDirectPaymentRequestDetailsType", p->soap_type() == SOAP_TYPE_ns3__DoDirectPaymentRequestDetailsType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__DoDirectPaymentRequestDetailsType(struct soap *soap, const char *URL, ns3__DoDirectPaymentRequestDetailsType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:DoDirectPaymentRequestDetailsType", p->soap_type() == SOAP_TYPE_ns3__DoDirectPaymentRequestDetailsType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__DoDirectPaymentRequestDetailsType * SOAP_FMAC4 soap_get_ns3__DoDirectPaymentRequestDetailsType(struct soap*, ns3__DoDirectPaymentRequestDetailsType *, const char*, const char*);

inline int soap_read_ns3__DoDirectPaymentRequestDetailsType(struct soap *soap, ns3__DoDirectPaymentRequestDetailsType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns3__DoDirectPaymentRequestDetailsType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__DoDirectPaymentRequestDetailsType(struct soap *soap, const char *URL, ns3__DoDirectPaymentRequestDetailsType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__DoDirectPaymentRequestDetailsType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__DoDirectPaymentRequestDetailsType(struct soap *soap, ns3__DoDirectPaymentRequestDetailsType *p)
{
	if (soap_read_ns3__DoDirectPaymentRequestDetailsType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__DoCaptureResponseDetailsType_DEFINED
#define SOAP_TYPE_ns3__DoCaptureResponseDetailsType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__DoCaptureResponseDetailsType(struct soap*, const char*, int, const ns3__DoCaptureResponseDetailsType *, const char*);
SOAP_FMAC3 ns3__DoCaptureResponseDetailsType * SOAP_FMAC4 soap_in_ns3__DoCaptureResponseDetailsType(struct soap*, const char*, ns3__DoCaptureResponseDetailsType *, const char*);
SOAP_FMAC1 ns3__DoCaptureResponseDetailsType * SOAP_FMAC2 soap_instantiate_ns3__DoCaptureResponseDetailsType(struct soap*, int, const char*, const char*, size_t*);

inline ns3__DoCaptureResponseDetailsType * soap_new_ns3__DoCaptureResponseDetailsType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__DoCaptureResponseDetailsType(soap, n, NULL, NULL, NULL);
}

inline ns3__DoCaptureResponseDetailsType * soap_new_req_ns3__DoCaptureResponseDetailsType(
	struct soap *soap,
	ns3__PaymentInfoType *PaymentInfo)
{
	ns3__DoCaptureResponseDetailsType *_p = soap_new_ns3__DoCaptureResponseDetailsType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__DoCaptureResponseDetailsType::PaymentInfo = PaymentInfo;
	}
	return _p;
}

inline ns3__DoCaptureResponseDetailsType * soap_new_set_ns3__DoCaptureResponseDetailsType(
	struct soap *soap,
	std::string *AuthorizationID,
	ns3__PaymentInfoType *PaymentInfo,
	std::string *MsgSubID,
	std::string *PartnerFundingSourceID)
{
	ns3__DoCaptureResponseDetailsType *_p = soap_new_ns3__DoCaptureResponseDetailsType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__DoCaptureResponseDetailsType::AuthorizationID = AuthorizationID;
		_p->ns3__DoCaptureResponseDetailsType::PaymentInfo = PaymentInfo;
		_p->ns3__DoCaptureResponseDetailsType::MsgSubID = MsgSubID;
		_p->ns3__DoCaptureResponseDetailsType::PartnerFundingSourceID = PartnerFundingSourceID;
	}
	return _p;
}

inline int soap_write_ns3__DoCaptureResponseDetailsType(struct soap *soap, ns3__DoCaptureResponseDetailsType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:DoCaptureResponseDetailsType", p->soap_type() == SOAP_TYPE_ns3__DoCaptureResponseDetailsType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__DoCaptureResponseDetailsType(struct soap *soap, const char *URL, ns3__DoCaptureResponseDetailsType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:DoCaptureResponseDetailsType", p->soap_type() == SOAP_TYPE_ns3__DoCaptureResponseDetailsType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__DoCaptureResponseDetailsType(struct soap *soap, const char *URL, ns3__DoCaptureResponseDetailsType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:DoCaptureResponseDetailsType", p->soap_type() == SOAP_TYPE_ns3__DoCaptureResponseDetailsType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__DoCaptureResponseDetailsType * SOAP_FMAC4 soap_get_ns3__DoCaptureResponseDetailsType(struct soap*, ns3__DoCaptureResponseDetailsType *, const char*, const char*);

inline int soap_read_ns3__DoCaptureResponseDetailsType(struct soap *soap, ns3__DoCaptureResponseDetailsType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns3__DoCaptureResponseDetailsType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__DoCaptureResponseDetailsType(struct soap *soap, const char *URL, ns3__DoCaptureResponseDetailsType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__DoCaptureResponseDetailsType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__DoCaptureResponseDetailsType(struct soap *soap, ns3__DoCaptureResponseDetailsType *p)
{
	if (soap_read_ns3__DoCaptureResponseDetailsType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__DoExpressCheckoutPaymentResponseDetailsType_DEFINED
#define SOAP_TYPE_ns3__DoExpressCheckoutPaymentResponseDetailsType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__DoExpressCheckoutPaymentResponseDetailsType(struct soap*, const char*, int, const ns3__DoExpressCheckoutPaymentResponseDetailsType *, const char*);
SOAP_FMAC3 ns3__DoExpressCheckoutPaymentResponseDetailsType * SOAP_FMAC4 soap_in_ns3__DoExpressCheckoutPaymentResponseDetailsType(struct soap*, const char*, ns3__DoExpressCheckoutPaymentResponseDetailsType *, const char*);
SOAP_FMAC1 ns3__DoExpressCheckoutPaymentResponseDetailsType * SOAP_FMAC2 soap_instantiate_ns3__DoExpressCheckoutPaymentResponseDetailsType(struct soap*, int, const char*, const char*, size_t*);

inline ns3__DoExpressCheckoutPaymentResponseDetailsType * soap_new_ns3__DoExpressCheckoutPaymentResponseDetailsType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__DoExpressCheckoutPaymentResponseDetailsType(soap, n, NULL, NULL, NULL);
}

inline ns3__DoExpressCheckoutPaymentResponseDetailsType * soap_new_req_ns3__DoExpressCheckoutPaymentResponseDetailsType(
	struct soap *soap,
	const std::string& Token)
{
	ns3__DoExpressCheckoutPaymentResponseDetailsType *_p = soap_new_ns3__DoExpressCheckoutPaymentResponseDetailsType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__DoExpressCheckoutPaymentResponseDetailsType::Token = Token;
	}
	return _p;
}

inline ns3__DoExpressCheckoutPaymentResponseDetailsType * soap_new_set_ns3__DoExpressCheckoutPaymentResponseDetailsType(
	struct soap *soap,
	const std::string& Token,
	const std::vector<ns3__PaymentInfoType *> & PaymentInfo,
	std::string *BillingAgreementID,
	std::string *RedirectRequired,
	std::string *Note,
	std::string *MsgSubID,
	std::string *SuccessPageRedirectRequested,
	ns3__UserSelectedOptionType *UserSelectedOptions,
	const std::vector<ns3__CoupledPaymentInfoType *> & CoupledPaymentInfo)
{
	ns3__DoExpressCheckoutPaymentResponseDetailsType *_p = soap_new_ns3__DoExpressCheckoutPaymentResponseDetailsType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__DoExpressCheckoutPaymentResponseDetailsType::Token = Token;
		_p->ns3__DoExpressCheckoutPaymentResponseDetailsType::PaymentInfo = PaymentInfo;
		_p->ns3__DoExpressCheckoutPaymentResponseDetailsType::BillingAgreementID = BillingAgreementID;
		_p->ns3__DoExpressCheckoutPaymentResponseDetailsType::RedirectRequired = RedirectRequired;
		_p->ns3__DoExpressCheckoutPaymentResponseDetailsType::Note = Note;
		_p->ns3__DoExpressCheckoutPaymentResponseDetailsType::MsgSubID = MsgSubID;
		_p->ns3__DoExpressCheckoutPaymentResponseDetailsType::SuccessPageRedirectRequested = SuccessPageRedirectRequested;
		_p->ns3__DoExpressCheckoutPaymentResponseDetailsType::UserSelectedOptions = UserSelectedOptions;
		_p->ns3__DoExpressCheckoutPaymentResponseDetailsType::CoupledPaymentInfo = CoupledPaymentInfo;
	}
	return _p;
}

inline int soap_write_ns3__DoExpressCheckoutPaymentResponseDetailsType(struct soap *soap, ns3__DoExpressCheckoutPaymentResponseDetailsType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:DoExpressCheckoutPaymentResponseDetailsType", p->soap_type() == SOAP_TYPE_ns3__DoExpressCheckoutPaymentResponseDetailsType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__DoExpressCheckoutPaymentResponseDetailsType(struct soap *soap, const char *URL, ns3__DoExpressCheckoutPaymentResponseDetailsType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:DoExpressCheckoutPaymentResponseDetailsType", p->soap_type() == SOAP_TYPE_ns3__DoExpressCheckoutPaymentResponseDetailsType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__DoExpressCheckoutPaymentResponseDetailsType(struct soap *soap, const char *URL, ns3__DoExpressCheckoutPaymentResponseDetailsType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:DoExpressCheckoutPaymentResponseDetailsType", p->soap_type() == SOAP_TYPE_ns3__DoExpressCheckoutPaymentResponseDetailsType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__DoExpressCheckoutPaymentResponseDetailsType * SOAP_FMAC4 soap_get_ns3__DoExpressCheckoutPaymentResponseDetailsType(struct soap*, ns3__DoExpressCheckoutPaymentResponseDetailsType *, const char*, const char*);

inline int soap_read_ns3__DoExpressCheckoutPaymentResponseDetailsType(struct soap *soap, ns3__DoExpressCheckoutPaymentResponseDetailsType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns3__DoExpressCheckoutPaymentResponseDetailsType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__DoExpressCheckoutPaymentResponseDetailsType(struct soap *soap, const char *URL, ns3__DoExpressCheckoutPaymentResponseDetailsType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__DoExpressCheckoutPaymentResponseDetailsType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__DoExpressCheckoutPaymentResponseDetailsType(struct soap *soap, ns3__DoExpressCheckoutPaymentResponseDetailsType *p)
{
	if (soap_read_ns3__DoExpressCheckoutPaymentResponseDetailsType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__DoExpressCheckoutPaymentRequestDetailsType_DEFINED
#define SOAP_TYPE_ns3__DoExpressCheckoutPaymentRequestDetailsType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__DoExpressCheckoutPaymentRequestDetailsType(struct soap*, const char*, int, const ns3__DoExpressCheckoutPaymentRequestDetailsType *, const char*);
SOAP_FMAC3 ns3__DoExpressCheckoutPaymentRequestDetailsType * SOAP_FMAC4 soap_in_ns3__DoExpressCheckoutPaymentRequestDetailsType(struct soap*, const char*, ns3__DoExpressCheckoutPaymentRequestDetailsType *, const char*);
SOAP_FMAC1 ns3__DoExpressCheckoutPaymentRequestDetailsType * SOAP_FMAC2 soap_instantiate_ns3__DoExpressCheckoutPaymentRequestDetailsType(struct soap*, int, const char*, const char*, size_t*);

inline ns3__DoExpressCheckoutPaymentRequestDetailsType * soap_new_ns3__DoExpressCheckoutPaymentRequestDetailsType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__DoExpressCheckoutPaymentRequestDetailsType(soap, n, NULL, NULL, NULL);
}

inline ns3__DoExpressCheckoutPaymentRequestDetailsType * soap_new_req_ns3__DoExpressCheckoutPaymentRequestDetailsType(
	struct soap *soap,
	const std::string& Token,
	const std::string& PayerID)
{
	ns3__DoExpressCheckoutPaymentRequestDetailsType *_p = soap_new_ns3__DoExpressCheckoutPaymentRequestDetailsType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__DoExpressCheckoutPaymentRequestDetailsType::Token = Token;
		_p->ns3__DoExpressCheckoutPaymentRequestDetailsType::PayerID = PayerID;
	}
	return _p;
}

inline ns3__DoExpressCheckoutPaymentRequestDetailsType * soap_new_set_ns3__DoExpressCheckoutPaymentRequestDetailsType(
	struct soap *soap,
	enum ns3__PaymentActionCodeType *PaymentAction,
	const std::string& Token,
	const std::string& PayerID,
	std::string *OrderURL,
	std::string *MsgSubID,
	const std::vector<ns3__PaymentDetailsType *> & PaymentDetails,
	std::string *PromoOverrideFlag,
	std::string *PromoCode,
	ns3__EnhancedDataType *EnhancedData,
	std::string *SoftDescriptor,
	ns3__UserSelectedOptionType *UserSelectedOptions,
	std::string *GiftMessage,
	std::string *GiftReceiptEnable,
	std::string *GiftWrapName,
	ns2__BasicAmountType *GiftWrapAmount,
	std::string *BuyerMarketingEmail,
	std::string *SurveyQuestion,
	const std::vector<std::string> & SurveyChoiceSelected,
	std::string *ButtonSource,
	bool *SkipBACreation,
	std::string *UseSessionPaymentDetails,
	const std::vector<ns3__CoupledBucketsType *> & CoupledBuckets,
	std::string *ClientID,
	std::string *ProductLine)
{
	ns3__DoExpressCheckoutPaymentRequestDetailsType *_p = soap_new_ns3__DoExpressCheckoutPaymentRequestDetailsType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__DoExpressCheckoutPaymentRequestDetailsType::PaymentAction = PaymentAction;
		_p->ns3__DoExpressCheckoutPaymentRequestDetailsType::Token = Token;
		_p->ns3__DoExpressCheckoutPaymentRequestDetailsType::PayerID = PayerID;
		_p->ns3__DoExpressCheckoutPaymentRequestDetailsType::OrderURL = OrderURL;
		_p->ns3__DoExpressCheckoutPaymentRequestDetailsType::MsgSubID = MsgSubID;
		_p->ns3__DoExpressCheckoutPaymentRequestDetailsType::PaymentDetails = PaymentDetails;
		_p->ns3__DoExpressCheckoutPaymentRequestDetailsType::PromoOverrideFlag = PromoOverrideFlag;
		_p->ns3__DoExpressCheckoutPaymentRequestDetailsType::PromoCode = PromoCode;
		_p->ns3__DoExpressCheckoutPaymentRequestDetailsType::EnhancedData = EnhancedData;
		_p->ns3__DoExpressCheckoutPaymentRequestDetailsType::SoftDescriptor = SoftDescriptor;
		_p->ns3__DoExpressCheckoutPaymentRequestDetailsType::UserSelectedOptions = UserSelectedOptions;
		_p->ns3__DoExpressCheckoutPaymentRequestDetailsType::GiftMessage = GiftMessage;
		_p->ns3__DoExpressCheckoutPaymentRequestDetailsType::GiftReceiptEnable = GiftReceiptEnable;
		_p->ns3__DoExpressCheckoutPaymentRequestDetailsType::GiftWrapName = GiftWrapName;
		_p->ns3__DoExpressCheckoutPaymentRequestDetailsType::GiftWrapAmount = GiftWrapAmount;
		_p->ns3__DoExpressCheckoutPaymentRequestDetailsType::BuyerMarketingEmail = BuyerMarketingEmail;
		_p->ns3__DoExpressCheckoutPaymentRequestDetailsType::SurveyQuestion = SurveyQuestion;
		_p->ns3__DoExpressCheckoutPaymentRequestDetailsType::SurveyChoiceSelected = SurveyChoiceSelected;
		_p->ns3__DoExpressCheckoutPaymentRequestDetailsType::ButtonSource = ButtonSource;
		_p->ns3__DoExpressCheckoutPaymentRequestDetailsType::SkipBACreation = SkipBACreation;
		_p->ns3__DoExpressCheckoutPaymentRequestDetailsType::UseSessionPaymentDetails = UseSessionPaymentDetails;
		_p->ns3__DoExpressCheckoutPaymentRequestDetailsType::CoupledBuckets = CoupledBuckets;
		_p->ns3__DoExpressCheckoutPaymentRequestDetailsType::ClientID = ClientID;
		_p->ns3__DoExpressCheckoutPaymentRequestDetailsType::ProductLine = ProductLine;
	}
	return _p;
}

inline int soap_write_ns3__DoExpressCheckoutPaymentRequestDetailsType(struct soap *soap, ns3__DoExpressCheckoutPaymentRequestDetailsType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:DoExpressCheckoutPaymentRequestDetailsType", p->soap_type() == SOAP_TYPE_ns3__DoExpressCheckoutPaymentRequestDetailsType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__DoExpressCheckoutPaymentRequestDetailsType(struct soap *soap, const char *URL, ns3__DoExpressCheckoutPaymentRequestDetailsType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:DoExpressCheckoutPaymentRequestDetailsType", p->soap_type() == SOAP_TYPE_ns3__DoExpressCheckoutPaymentRequestDetailsType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__DoExpressCheckoutPaymentRequestDetailsType(struct soap *soap, const char *URL, ns3__DoExpressCheckoutPaymentRequestDetailsType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:DoExpressCheckoutPaymentRequestDetailsType", p->soap_type() == SOAP_TYPE_ns3__DoExpressCheckoutPaymentRequestDetailsType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__DoExpressCheckoutPaymentRequestDetailsType * SOAP_FMAC4 soap_get_ns3__DoExpressCheckoutPaymentRequestDetailsType(struct soap*, ns3__DoExpressCheckoutPaymentRequestDetailsType *, const char*, const char*);

inline int soap_read_ns3__DoExpressCheckoutPaymentRequestDetailsType(struct soap *soap, ns3__DoExpressCheckoutPaymentRequestDetailsType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns3__DoExpressCheckoutPaymentRequestDetailsType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__DoExpressCheckoutPaymentRequestDetailsType(struct soap *soap, const char *URL, ns3__DoExpressCheckoutPaymentRequestDetailsType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__DoExpressCheckoutPaymentRequestDetailsType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__DoExpressCheckoutPaymentRequestDetailsType(struct soap *soap, ns3__DoExpressCheckoutPaymentRequestDetailsType *p)
{
	if (soap_read_ns3__DoExpressCheckoutPaymentRequestDetailsType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__AuthorizationResponseType_DEFINED
#define SOAP_TYPE_ns3__AuthorizationResponseType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__AuthorizationResponseType(struct soap*, const char*, int, const ns3__AuthorizationResponseType *, const char*);
SOAP_FMAC3 ns3__AuthorizationResponseType * SOAP_FMAC4 soap_in_ns3__AuthorizationResponseType(struct soap*, const char*, ns3__AuthorizationResponseType *, const char*);
SOAP_FMAC1 ns3__AuthorizationResponseType * SOAP_FMAC2 soap_instantiate_ns3__AuthorizationResponseType(struct soap*, int, const char*, const char*, size_t*);

inline ns3__AuthorizationResponseType * soap_new_ns3__AuthorizationResponseType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__AuthorizationResponseType(soap, n, NULL, NULL, NULL);
}

inline ns3__AuthorizationResponseType * soap_new_req_ns3__AuthorizationResponseType(
	struct soap *soap,
	enum ns3__AckCodeType Status)
{
	ns3__AuthorizationResponseType *_p = soap_new_ns3__AuthorizationResponseType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__AuthorizationResponseType::Status = Status;
	}
	return _p;
}

inline ns3__AuthorizationResponseType * soap_new_set_ns3__AuthorizationResponseType(
	struct soap *soap,
	enum ns3__AckCodeType Status,
	const std::vector<ns3__ErrorType *> & AuthorizationError)
{
	ns3__AuthorizationResponseType *_p = soap_new_ns3__AuthorizationResponseType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__AuthorizationResponseType::Status = Status;
		_p->ns3__AuthorizationResponseType::AuthorizationError = AuthorizationError;
	}
	return _p;
}

inline int soap_write_ns3__AuthorizationResponseType(struct soap *soap, ns3__AuthorizationResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:AuthorizationResponseType", p->soap_type() == SOAP_TYPE_ns3__AuthorizationResponseType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__AuthorizationResponseType(struct soap *soap, const char *URL, ns3__AuthorizationResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:AuthorizationResponseType", p->soap_type() == SOAP_TYPE_ns3__AuthorizationResponseType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__AuthorizationResponseType(struct soap *soap, const char *URL, ns3__AuthorizationResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:AuthorizationResponseType", p->soap_type() == SOAP_TYPE_ns3__AuthorizationResponseType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__AuthorizationResponseType * SOAP_FMAC4 soap_get_ns3__AuthorizationResponseType(struct soap*, ns3__AuthorizationResponseType *, const char*, const char*);

inline int soap_read_ns3__AuthorizationResponseType(struct soap *soap, ns3__AuthorizationResponseType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns3__AuthorizationResponseType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__AuthorizationResponseType(struct soap *soap, const char *URL, ns3__AuthorizationResponseType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__AuthorizationResponseType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__AuthorizationResponseType(struct soap *soap, ns3__AuthorizationResponseType *p)
{
	if (soap_read_ns3__AuthorizationResponseType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__SetDataResponseType_DEFINED
#define SOAP_TYPE_ns3__SetDataResponseType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__SetDataResponseType(struct soap*, const char*, int, const ns3__SetDataResponseType *, const char*);
SOAP_FMAC3 ns3__SetDataResponseType * SOAP_FMAC4 soap_in_ns3__SetDataResponseType(struct soap*, const char*, ns3__SetDataResponseType *, const char*);
SOAP_FMAC1 ns3__SetDataResponseType * SOAP_FMAC2 soap_instantiate_ns3__SetDataResponseType(struct soap*, int, const char*, const char*, size_t*);

inline ns3__SetDataResponseType * soap_new_ns3__SetDataResponseType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__SetDataResponseType(soap, n, NULL, NULL, NULL);
}

inline ns3__SetDataResponseType * soap_new_req_ns3__SetDataResponseType(
	struct soap *soap)
{
	ns3__SetDataResponseType *_p = soap_new_ns3__SetDataResponseType(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns3__SetDataResponseType * soap_new_set_ns3__SetDataResponseType(
	struct soap *soap,
	std::string *Token,
	const std::vector<ns3__AddressType *> & ShippingAddresses,
	const std::vector<ns3__ErrorType *> & SetDataError)
{
	ns3__SetDataResponseType *_p = soap_new_ns3__SetDataResponseType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__SetDataResponseType::Token = Token;
		_p->ns3__SetDataResponseType::ShippingAddresses = ShippingAddresses;
		_p->ns3__SetDataResponseType::SetDataError = SetDataError;
	}
	return _p;
}

inline int soap_write_ns3__SetDataResponseType(struct soap *soap, ns3__SetDataResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:SetDataResponseType", p->soap_type() == SOAP_TYPE_ns3__SetDataResponseType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__SetDataResponseType(struct soap *soap, const char *URL, ns3__SetDataResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:SetDataResponseType", p->soap_type() == SOAP_TYPE_ns3__SetDataResponseType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__SetDataResponseType(struct soap *soap, const char *URL, ns3__SetDataResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:SetDataResponseType", p->soap_type() == SOAP_TYPE_ns3__SetDataResponseType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__SetDataResponseType * SOAP_FMAC4 soap_get_ns3__SetDataResponseType(struct soap*, ns3__SetDataResponseType *, const char*, const char*);

inline int soap_read_ns3__SetDataResponseType(struct soap *soap, ns3__SetDataResponseType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns3__SetDataResponseType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__SetDataResponseType(struct soap *soap, const char *URL, ns3__SetDataResponseType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__SetDataResponseType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__SetDataResponseType(struct soap *soap, ns3__SetDataResponseType *p)
{
	if (soap_read_ns3__SetDataResponseType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__ExecuteCheckoutOperationsResponseDetailsType_DEFINED
#define SOAP_TYPE_ns3__ExecuteCheckoutOperationsResponseDetailsType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__ExecuteCheckoutOperationsResponseDetailsType(struct soap*, const char*, int, const ns3__ExecuteCheckoutOperationsResponseDetailsType *, const char*);
SOAP_FMAC3 ns3__ExecuteCheckoutOperationsResponseDetailsType * SOAP_FMAC4 soap_in_ns3__ExecuteCheckoutOperationsResponseDetailsType(struct soap*, const char*, ns3__ExecuteCheckoutOperationsResponseDetailsType *, const char*);
SOAP_FMAC1 ns3__ExecuteCheckoutOperationsResponseDetailsType * SOAP_FMAC2 soap_instantiate_ns3__ExecuteCheckoutOperationsResponseDetailsType(struct soap*, int, const char*, const char*, size_t*);

inline ns3__ExecuteCheckoutOperationsResponseDetailsType * soap_new_ns3__ExecuteCheckoutOperationsResponseDetailsType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__ExecuteCheckoutOperationsResponseDetailsType(soap, n, NULL, NULL, NULL);
}

inline ns3__ExecuteCheckoutOperationsResponseDetailsType * soap_new_req_ns3__ExecuteCheckoutOperationsResponseDetailsType(
	struct soap *soap,
	ns3__SetDataResponseType *SetDataResponse)
{
	ns3__ExecuteCheckoutOperationsResponseDetailsType *_p = soap_new_ns3__ExecuteCheckoutOperationsResponseDetailsType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__ExecuteCheckoutOperationsResponseDetailsType::SetDataResponse = SetDataResponse;
	}
	return _p;
}

inline ns3__ExecuteCheckoutOperationsResponseDetailsType * soap_new_set_ns3__ExecuteCheckoutOperationsResponseDetailsType(
	struct soap *soap,
	ns3__SetDataResponseType *SetDataResponse,
	ns3__AuthorizationResponseType *AuthorizationResponse)
{
	ns3__ExecuteCheckoutOperationsResponseDetailsType *_p = soap_new_ns3__ExecuteCheckoutOperationsResponseDetailsType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__ExecuteCheckoutOperationsResponseDetailsType::SetDataResponse = SetDataResponse;
		_p->ns3__ExecuteCheckoutOperationsResponseDetailsType::AuthorizationResponse = AuthorizationResponse;
	}
	return _p;
}

inline int soap_write_ns3__ExecuteCheckoutOperationsResponseDetailsType(struct soap *soap, ns3__ExecuteCheckoutOperationsResponseDetailsType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:ExecuteCheckoutOperationsResponseDetailsType", p->soap_type() == SOAP_TYPE_ns3__ExecuteCheckoutOperationsResponseDetailsType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__ExecuteCheckoutOperationsResponseDetailsType(struct soap *soap, const char *URL, ns3__ExecuteCheckoutOperationsResponseDetailsType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:ExecuteCheckoutOperationsResponseDetailsType", p->soap_type() == SOAP_TYPE_ns3__ExecuteCheckoutOperationsResponseDetailsType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__ExecuteCheckoutOperationsResponseDetailsType(struct soap *soap, const char *URL, ns3__ExecuteCheckoutOperationsResponseDetailsType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:ExecuteCheckoutOperationsResponseDetailsType", p->soap_type() == SOAP_TYPE_ns3__ExecuteCheckoutOperationsResponseDetailsType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__ExecuteCheckoutOperationsResponseDetailsType * SOAP_FMAC4 soap_get_ns3__ExecuteCheckoutOperationsResponseDetailsType(struct soap*, ns3__ExecuteCheckoutOperationsResponseDetailsType *, const char*, const char*);

inline int soap_read_ns3__ExecuteCheckoutOperationsResponseDetailsType(struct soap *soap, ns3__ExecuteCheckoutOperationsResponseDetailsType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns3__ExecuteCheckoutOperationsResponseDetailsType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__ExecuteCheckoutOperationsResponseDetailsType(struct soap *soap, const char *URL, ns3__ExecuteCheckoutOperationsResponseDetailsType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__ExecuteCheckoutOperationsResponseDetailsType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__ExecuteCheckoutOperationsResponseDetailsType(struct soap *soap, ns3__ExecuteCheckoutOperationsResponseDetailsType *p)
{
	if (soap_read_ns3__ExecuteCheckoutOperationsResponseDetailsType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__GetExpressCheckoutDetailsResponseDetailsType_DEFINED
#define SOAP_TYPE_ns3__GetExpressCheckoutDetailsResponseDetailsType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__GetExpressCheckoutDetailsResponseDetailsType(struct soap*, const char*, int, const ns3__GetExpressCheckoutDetailsResponseDetailsType *, const char*);
SOAP_FMAC3 ns3__GetExpressCheckoutDetailsResponseDetailsType * SOAP_FMAC4 soap_in_ns3__GetExpressCheckoutDetailsResponseDetailsType(struct soap*, const char*, ns3__GetExpressCheckoutDetailsResponseDetailsType *, const char*);
SOAP_FMAC1 ns3__GetExpressCheckoutDetailsResponseDetailsType * SOAP_FMAC2 soap_instantiate_ns3__GetExpressCheckoutDetailsResponseDetailsType(struct soap*, int, const char*, const char*, size_t*);

inline ns3__GetExpressCheckoutDetailsResponseDetailsType * soap_new_ns3__GetExpressCheckoutDetailsResponseDetailsType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__GetExpressCheckoutDetailsResponseDetailsType(soap, n, NULL, NULL, NULL);
}

inline ns3__GetExpressCheckoutDetailsResponseDetailsType * soap_new_req_ns3__GetExpressCheckoutDetailsResponseDetailsType(
	struct soap *soap,
	const std::string& Token,
	ns3__PayerInfoType *PayerInfo)
{
	ns3__GetExpressCheckoutDetailsResponseDetailsType *_p = soap_new_ns3__GetExpressCheckoutDetailsResponseDetailsType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__GetExpressCheckoutDetailsResponseDetailsType::Token = Token;
		_p->ns3__GetExpressCheckoutDetailsResponseDetailsType::PayerInfo = PayerInfo;
	}
	return _p;
}

inline ns3__GetExpressCheckoutDetailsResponseDetailsType * soap_new_set_ns3__GetExpressCheckoutDetailsResponseDetailsType(
	struct soap *soap,
	const std::string& Token,
	ns3__PayerInfoType *PayerInfo,
	std::string *Custom,
	std::string *InvoiceID,
	std::string *ContactPhone,
	bool *BillingAgreementAcceptedStatus,
	std::string *RedirectRequired,
	ns3__AddressType *BillingAddress,
	std::string *Note,
	std::string *CheckoutStatus,
	ns2__BasicAmountType *PayPalAdjustment,
	const std::vector<ns3__PaymentDetailsType *> & PaymentDetails,
	ns3__UserSelectedOptionType *UserSelectedOptions,
	const std::vector<ns3__IncentiveDetailsType *> & IncentiveDetails,
	std::string *GiftMessage,
	std::string *GiftReceiptEnable,
	std::string *GiftWrapName,
	ns2__BasicAmountType *GiftWrapAmount,
	std::string *BuyerMarketingEmail,
	std::string *SurveyQuestion,
	const std::vector<std::string> & SurveyChoiceSelected,
	const std::vector<ns3__PaymentRequestInfoType *> & PaymentRequestInfo,
	ns3__ExternalRememberMeStatusDetailsType *ExternalRememberMeStatusDetails,
	ns3__RefreshTokenStatusDetailsType *RefreshTokenStatusDetails,
	const std::vector<ns3__PaymentInfoType *> & PaymentInfo,
	std::string *CartChangeTolerance,
	ns3__InstrumentDetailsType *InstrumentDetails)
{
	ns3__GetExpressCheckoutDetailsResponseDetailsType *_p = soap_new_ns3__GetExpressCheckoutDetailsResponseDetailsType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__GetExpressCheckoutDetailsResponseDetailsType::Token = Token;
		_p->ns3__GetExpressCheckoutDetailsResponseDetailsType::PayerInfo = PayerInfo;
		_p->ns3__GetExpressCheckoutDetailsResponseDetailsType::Custom = Custom;
		_p->ns3__GetExpressCheckoutDetailsResponseDetailsType::InvoiceID = InvoiceID;
		_p->ns3__GetExpressCheckoutDetailsResponseDetailsType::ContactPhone = ContactPhone;
		_p->ns3__GetExpressCheckoutDetailsResponseDetailsType::BillingAgreementAcceptedStatus = BillingAgreementAcceptedStatus;
		_p->ns3__GetExpressCheckoutDetailsResponseDetailsType::RedirectRequired = RedirectRequired;
		_p->ns3__GetExpressCheckoutDetailsResponseDetailsType::BillingAddress = BillingAddress;
		_p->ns3__GetExpressCheckoutDetailsResponseDetailsType::Note = Note;
		_p->ns3__GetExpressCheckoutDetailsResponseDetailsType::CheckoutStatus = CheckoutStatus;
		_p->ns3__GetExpressCheckoutDetailsResponseDetailsType::PayPalAdjustment = PayPalAdjustment;
		_p->ns3__GetExpressCheckoutDetailsResponseDetailsType::PaymentDetails = PaymentDetails;
		_p->ns3__GetExpressCheckoutDetailsResponseDetailsType::UserSelectedOptions = UserSelectedOptions;
		_p->ns3__GetExpressCheckoutDetailsResponseDetailsType::IncentiveDetails = IncentiveDetails;
		_p->ns3__GetExpressCheckoutDetailsResponseDetailsType::GiftMessage = GiftMessage;
		_p->ns3__GetExpressCheckoutDetailsResponseDetailsType::GiftReceiptEnable = GiftReceiptEnable;
		_p->ns3__GetExpressCheckoutDetailsResponseDetailsType::GiftWrapName = GiftWrapName;
		_p->ns3__GetExpressCheckoutDetailsResponseDetailsType::GiftWrapAmount = GiftWrapAmount;
		_p->ns3__GetExpressCheckoutDetailsResponseDetailsType::BuyerMarketingEmail = BuyerMarketingEmail;
		_p->ns3__GetExpressCheckoutDetailsResponseDetailsType::SurveyQuestion = SurveyQuestion;
		_p->ns3__GetExpressCheckoutDetailsResponseDetailsType::SurveyChoiceSelected = SurveyChoiceSelected;
		_p->ns3__GetExpressCheckoutDetailsResponseDetailsType::PaymentRequestInfo = PaymentRequestInfo;
		_p->ns3__GetExpressCheckoutDetailsResponseDetailsType::ExternalRememberMeStatusDetails = ExternalRememberMeStatusDetails;
		_p->ns3__GetExpressCheckoutDetailsResponseDetailsType::RefreshTokenStatusDetails = RefreshTokenStatusDetails;
		_p->ns3__GetExpressCheckoutDetailsResponseDetailsType::PaymentInfo = PaymentInfo;
		_p->ns3__GetExpressCheckoutDetailsResponseDetailsType::CartChangeTolerance = CartChangeTolerance;
		_p->ns3__GetExpressCheckoutDetailsResponseDetailsType::InstrumentDetails = InstrumentDetails;
	}
	return _p;
}

inline int soap_write_ns3__GetExpressCheckoutDetailsResponseDetailsType(struct soap *soap, ns3__GetExpressCheckoutDetailsResponseDetailsType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:GetExpressCheckoutDetailsResponseDetailsType", p->soap_type() == SOAP_TYPE_ns3__GetExpressCheckoutDetailsResponseDetailsType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__GetExpressCheckoutDetailsResponseDetailsType(struct soap *soap, const char *URL, ns3__GetExpressCheckoutDetailsResponseDetailsType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:GetExpressCheckoutDetailsResponseDetailsType", p->soap_type() == SOAP_TYPE_ns3__GetExpressCheckoutDetailsResponseDetailsType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__GetExpressCheckoutDetailsResponseDetailsType(struct soap *soap, const char *URL, ns3__GetExpressCheckoutDetailsResponseDetailsType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:GetExpressCheckoutDetailsResponseDetailsType", p->soap_type() == SOAP_TYPE_ns3__GetExpressCheckoutDetailsResponseDetailsType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__GetExpressCheckoutDetailsResponseDetailsType * SOAP_FMAC4 soap_get_ns3__GetExpressCheckoutDetailsResponseDetailsType(struct soap*, ns3__GetExpressCheckoutDetailsResponseDetailsType *, const char*, const char*);

inline int soap_read_ns3__GetExpressCheckoutDetailsResponseDetailsType(struct soap *soap, ns3__GetExpressCheckoutDetailsResponseDetailsType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns3__GetExpressCheckoutDetailsResponseDetailsType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__GetExpressCheckoutDetailsResponseDetailsType(struct soap *soap, const char *URL, ns3__GetExpressCheckoutDetailsResponseDetailsType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__GetExpressCheckoutDetailsResponseDetailsType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__GetExpressCheckoutDetailsResponseDetailsType(struct soap *soap, ns3__GetExpressCheckoutDetailsResponseDetailsType *p)
{
	if (soap_read_ns3__GetExpressCheckoutDetailsResponseDetailsType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__BillingAgreementDetailsType_DEFINED
#define SOAP_TYPE_ns3__BillingAgreementDetailsType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__BillingAgreementDetailsType(struct soap*, const char*, int, const ns3__BillingAgreementDetailsType *, const char*);
SOAP_FMAC3 ns3__BillingAgreementDetailsType * SOAP_FMAC4 soap_in_ns3__BillingAgreementDetailsType(struct soap*, const char*, ns3__BillingAgreementDetailsType *, const char*);
SOAP_FMAC1 ns3__BillingAgreementDetailsType * SOAP_FMAC2 soap_instantiate_ns3__BillingAgreementDetailsType(struct soap*, int, const char*, const char*, size_t*);

inline ns3__BillingAgreementDetailsType * soap_new_ns3__BillingAgreementDetailsType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__BillingAgreementDetailsType(soap, n, NULL, NULL, NULL);
}

inline ns3__BillingAgreementDetailsType * soap_new_req_ns3__BillingAgreementDetailsType(
	struct soap *soap,
	enum ns3__BillingCodeType BillingType)
{
	ns3__BillingAgreementDetailsType *_p = soap_new_ns3__BillingAgreementDetailsType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__BillingAgreementDetailsType::BillingType = BillingType;
	}
	return _p;
}

inline ns3__BillingAgreementDetailsType * soap_new_set_ns3__BillingAgreementDetailsType(
	struct soap *soap,
	enum ns3__BillingCodeType BillingType,
	std::string *BillingAgreementDescription,
	enum ns3__MerchantPullPaymentCodeType *PaymentType,
	std::string *BillingAgreementCustom)
{
	ns3__BillingAgreementDetailsType *_p = soap_new_ns3__BillingAgreementDetailsType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__BillingAgreementDetailsType::BillingType = BillingType;
		_p->ns3__BillingAgreementDetailsType::BillingAgreementDescription = BillingAgreementDescription;
		_p->ns3__BillingAgreementDetailsType::PaymentType = PaymentType;
		_p->ns3__BillingAgreementDetailsType::BillingAgreementCustom = BillingAgreementCustom;
	}
	return _p;
}

inline int soap_write_ns3__BillingAgreementDetailsType(struct soap *soap, ns3__BillingAgreementDetailsType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:BillingAgreementDetailsType", p->soap_type() == SOAP_TYPE_ns3__BillingAgreementDetailsType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__BillingAgreementDetailsType(struct soap *soap, const char *URL, ns3__BillingAgreementDetailsType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:BillingAgreementDetailsType", p->soap_type() == SOAP_TYPE_ns3__BillingAgreementDetailsType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__BillingAgreementDetailsType(struct soap *soap, const char *URL, ns3__BillingAgreementDetailsType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:BillingAgreementDetailsType", p->soap_type() == SOAP_TYPE_ns3__BillingAgreementDetailsType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__BillingAgreementDetailsType * SOAP_FMAC4 soap_get_ns3__BillingAgreementDetailsType(struct soap*, ns3__BillingAgreementDetailsType *, const char*, const char*);

inline int soap_read_ns3__BillingAgreementDetailsType(struct soap *soap, ns3__BillingAgreementDetailsType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns3__BillingAgreementDetailsType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__BillingAgreementDetailsType(struct soap *soap, const char *URL, ns3__BillingAgreementDetailsType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__BillingAgreementDetailsType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__BillingAgreementDetailsType(struct soap *soap, ns3__BillingAgreementDetailsType *p)
{
	if (soap_read_ns3__BillingAgreementDetailsType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__FundingSourceDetailsType_DEFINED
#define SOAP_TYPE_ns3__FundingSourceDetailsType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__FundingSourceDetailsType(struct soap*, const char*, int, const ns3__FundingSourceDetailsType *, const char*);
SOAP_FMAC3 ns3__FundingSourceDetailsType * SOAP_FMAC4 soap_in_ns3__FundingSourceDetailsType(struct soap*, const char*, ns3__FundingSourceDetailsType *, const char*);
SOAP_FMAC1 ns3__FundingSourceDetailsType * SOAP_FMAC2 soap_instantiate_ns3__FundingSourceDetailsType(struct soap*, int, const char*, const char*, size_t*);

inline ns3__FundingSourceDetailsType * soap_new_ns3__FundingSourceDetailsType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__FundingSourceDetailsType(soap, n, NULL, NULL, NULL);
}

inline ns3__FundingSourceDetailsType * soap_new_req_ns3__FundingSourceDetailsType(
	struct soap *soap)
{
	ns3__FundingSourceDetailsType *_p = soap_new_ns3__FundingSourceDetailsType(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns3__FundingSourceDetailsType * soap_new_set_ns3__FundingSourceDetailsType(
	struct soap *soap,
	std::string *AllowPushFunding,
	enum ns3__UserSelectedFundingSourceType *UserSelectedFundingSource)
{
	ns3__FundingSourceDetailsType *_p = soap_new_ns3__FundingSourceDetailsType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__FundingSourceDetailsType::AllowPushFunding = AllowPushFunding;
		_p->ns3__FundingSourceDetailsType::UserSelectedFundingSource = UserSelectedFundingSource;
	}
	return _p;
}

inline int soap_write_ns3__FundingSourceDetailsType(struct soap *soap, ns3__FundingSourceDetailsType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:FundingSourceDetailsType", p->soap_type() == SOAP_TYPE_ns3__FundingSourceDetailsType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__FundingSourceDetailsType(struct soap *soap, const char *URL, ns3__FundingSourceDetailsType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:FundingSourceDetailsType", p->soap_type() == SOAP_TYPE_ns3__FundingSourceDetailsType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__FundingSourceDetailsType(struct soap *soap, const char *URL, ns3__FundingSourceDetailsType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:FundingSourceDetailsType", p->soap_type() == SOAP_TYPE_ns3__FundingSourceDetailsType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__FundingSourceDetailsType * SOAP_FMAC4 soap_get_ns3__FundingSourceDetailsType(struct soap*, ns3__FundingSourceDetailsType *, const char*, const char*);

inline int soap_read_ns3__FundingSourceDetailsType(struct soap *soap, ns3__FundingSourceDetailsType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns3__FundingSourceDetailsType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__FundingSourceDetailsType(struct soap *soap, const char *URL, ns3__FundingSourceDetailsType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__FundingSourceDetailsType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__FundingSourceDetailsType(struct soap *soap, ns3__FundingSourceDetailsType *p)
{
	if (soap_read_ns3__FundingSourceDetailsType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__IdentityTokenInfoType_DEFINED
#define SOAP_TYPE_ns3__IdentityTokenInfoType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__IdentityTokenInfoType(struct soap*, const char*, int, const ns3__IdentityTokenInfoType *, const char*);
SOAP_FMAC3 ns3__IdentityTokenInfoType * SOAP_FMAC4 soap_in_ns3__IdentityTokenInfoType(struct soap*, const char*, ns3__IdentityTokenInfoType *, const char*);
SOAP_FMAC1 ns3__IdentityTokenInfoType * SOAP_FMAC2 soap_instantiate_ns3__IdentityTokenInfoType(struct soap*, int, const char*, const char*, size_t*);

inline ns3__IdentityTokenInfoType * soap_new_ns3__IdentityTokenInfoType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__IdentityTokenInfoType(soap, n, NULL, NULL, NULL);
}

inline ns3__IdentityTokenInfoType * soap_new_req_ns3__IdentityTokenInfoType(
	struct soap *soap,
	const std::string& AccessToken)
{
	ns3__IdentityTokenInfoType *_p = soap_new_ns3__IdentityTokenInfoType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__IdentityTokenInfoType::AccessToken = AccessToken;
	}
	return _p;
}

inline ns3__IdentityTokenInfoType * soap_new_set_ns3__IdentityTokenInfoType(
	struct soap *soap,
	const std::string& AccessToken)
{
	ns3__IdentityTokenInfoType *_p = soap_new_ns3__IdentityTokenInfoType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__IdentityTokenInfoType::AccessToken = AccessToken;
	}
	return _p;
}

inline int soap_write_ns3__IdentityTokenInfoType(struct soap *soap, ns3__IdentityTokenInfoType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:IdentityTokenInfoType", p->soap_type() == SOAP_TYPE_ns3__IdentityTokenInfoType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__IdentityTokenInfoType(struct soap *soap, const char *URL, ns3__IdentityTokenInfoType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:IdentityTokenInfoType", p->soap_type() == SOAP_TYPE_ns3__IdentityTokenInfoType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__IdentityTokenInfoType(struct soap *soap, const char *URL, ns3__IdentityTokenInfoType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:IdentityTokenInfoType", p->soap_type() == SOAP_TYPE_ns3__IdentityTokenInfoType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__IdentityTokenInfoType * SOAP_FMAC4 soap_get_ns3__IdentityTokenInfoType(struct soap*, ns3__IdentityTokenInfoType *, const char*, const char*);

inline int soap_read_ns3__IdentityTokenInfoType(struct soap *soap, ns3__IdentityTokenInfoType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns3__IdentityTokenInfoType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__IdentityTokenInfoType(struct soap *soap, const char *URL, ns3__IdentityTokenInfoType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__IdentityTokenInfoType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__IdentityTokenInfoType(struct soap *soap, ns3__IdentityTokenInfoType *p)
{
	if (soap_read_ns3__IdentityTokenInfoType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__RememberMeIDInfoType_DEFINED
#define SOAP_TYPE_ns3__RememberMeIDInfoType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__RememberMeIDInfoType(struct soap*, const char*, int, const ns3__RememberMeIDInfoType *, const char*);
SOAP_FMAC3 ns3__RememberMeIDInfoType * SOAP_FMAC4 soap_in_ns3__RememberMeIDInfoType(struct soap*, const char*, ns3__RememberMeIDInfoType *, const char*);
SOAP_FMAC1 ns3__RememberMeIDInfoType * SOAP_FMAC2 soap_instantiate_ns3__RememberMeIDInfoType(struct soap*, int, const char*, const char*, size_t*);

inline ns3__RememberMeIDInfoType * soap_new_ns3__RememberMeIDInfoType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__RememberMeIDInfoType(soap, n, NULL, NULL, NULL);
}

inline ns3__RememberMeIDInfoType * soap_new_req_ns3__RememberMeIDInfoType(
	struct soap *soap)
{
	ns3__RememberMeIDInfoType *_p = soap_new_ns3__RememberMeIDInfoType(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns3__RememberMeIDInfoType * soap_new_set_ns3__RememberMeIDInfoType(
	struct soap *soap,
	std::string *ExternalRememberMeID)
{
	ns3__RememberMeIDInfoType *_p = soap_new_ns3__RememberMeIDInfoType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__RememberMeIDInfoType::ExternalRememberMeID = ExternalRememberMeID;
	}
	return _p;
}

inline int soap_write_ns3__RememberMeIDInfoType(struct soap *soap, ns3__RememberMeIDInfoType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:RememberMeIDInfoType", p->soap_type() == SOAP_TYPE_ns3__RememberMeIDInfoType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__RememberMeIDInfoType(struct soap *soap, const char *URL, ns3__RememberMeIDInfoType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:RememberMeIDInfoType", p->soap_type() == SOAP_TYPE_ns3__RememberMeIDInfoType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__RememberMeIDInfoType(struct soap *soap, const char *URL, ns3__RememberMeIDInfoType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:RememberMeIDInfoType", p->soap_type() == SOAP_TYPE_ns3__RememberMeIDInfoType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__RememberMeIDInfoType * SOAP_FMAC4 soap_get_ns3__RememberMeIDInfoType(struct soap*, ns3__RememberMeIDInfoType *, const char*, const char*);

inline int soap_read_ns3__RememberMeIDInfoType(struct soap *soap, ns3__RememberMeIDInfoType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns3__RememberMeIDInfoType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__RememberMeIDInfoType(struct soap *soap, const char *URL, ns3__RememberMeIDInfoType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__RememberMeIDInfoType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__RememberMeIDInfoType(struct soap *soap, ns3__RememberMeIDInfoType *p)
{
	if (soap_read_ns3__RememberMeIDInfoType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__MobileIDInfoType_DEFINED
#define SOAP_TYPE_ns3__MobileIDInfoType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__MobileIDInfoType(struct soap*, const char*, int, const ns3__MobileIDInfoType *, const char*);
SOAP_FMAC3 ns3__MobileIDInfoType * SOAP_FMAC4 soap_in_ns3__MobileIDInfoType(struct soap*, const char*, ns3__MobileIDInfoType *, const char*);
SOAP_FMAC1 ns3__MobileIDInfoType * SOAP_FMAC2 soap_instantiate_ns3__MobileIDInfoType(struct soap*, int, const char*, const char*, size_t*);

inline ns3__MobileIDInfoType * soap_new_ns3__MobileIDInfoType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__MobileIDInfoType(soap, n, NULL, NULL, NULL);
}

inline ns3__MobileIDInfoType * soap_new_req_ns3__MobileIDInfoType(
	struct soap *soap,
	const std::string& SessionToken)
{
	ns3__MobileIDInfoType *_p = soap_new_ns3__MobileIDInfoType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__MobileIDInfoType::SessionToken = SessionToken;
	}
	return _p;
}

inline ns3__MobileIDInfoType * soap_new_set_ns3__MobileIDInfoType(
	struct soap *soap,
	const std::string& SessionToken)
{
	ns3__MobileIDInfoType *_p = soap_new_ns3__MobileIDInfoType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__MobileIDInfoType::SessionToken = SessionToken;
	}
	return _p;
}

inline int soap_write_ns3__MobileIDInfoType(struct soap *soap, ns3__MobileIDInfoType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:MobileIDInfoType", p->soap_type() == SOAP_TYPE_ns3__MobileIDInfoType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__MobileIDInfoType(struct soap *soap, const char *URL, ns3__MobileIDInfoType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:MobileIDInfoType", p->soap_type() == SOAP_TYPE_ns3__MobileIDInfoType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__MobileIDInfoType(struct soap *soap, const char *URL, ns3__MobileIDInfoType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:MobileIDInfoType", p->soap_type() == SOAP_TYPE_ns3__MobileIDInfoType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__MobileIDInfoType * SOAP_FMAC4 soap_get_ns3__MobileIDInfoType(struct soap*, ns3__MobileIDInfoType *, const char*, const char*);

inline int soap_read_ns3__MobileIDInfoType(struct soap *soap, ns3__MobileIDInfoType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns3__MobileIDInfoType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__MobileIDInfoType(struct soap *soap, const char *URL, ns3__MobileIDInfoType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__MobileIDInfoType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__MobileIDInfoType(struct soap *soap, ns3__MobileIDInfoType *p)
{
	if (soap_read_ns3__MobileIDInfoType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__IdentificationInfoType_DEFINED
#define SOAP_TYPE_ns3__IdentificationInfoType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__IdentificationInfoType(struct soap*, const char*, int, const ns3__IdentificationInfoType *, const char*);
SOAP_FMAC3 ns3__IdentificationInfoType * SOAP_FMAC4 soap_in_ns3__IdentificationInfoType(struct soap*, const char*, ns3__IdentificationInfoType *, const char*);
SOAP_FMAC1 ns3__IdentificationInfoType * SOAP_FMAC2 soap_instantiate_ns3__IdentificationInfoType(struct soap*, int, const char*, const char*, size_t*);

inline ns3__IdentificationInfoType * soap_new_ns3__IdentificationInfoType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__IdentificationInfoType(soap, n, NULL, NULL, NULL);
}

inline ns3__IdentificationInfoType * soap_new_req_ns3__IdentificationInfoType(
	struct soap *soap)
{
	ns3__IdentificationInfoType *_p = soap_new_ns3__IdentificationInfoType(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns3__IdentificationInfoType * soap_new_set_ns3__IdentificationInfoType(
	struct soap *soap,
	ns3__MobileIDInfoType *MobileIDInfo,
	ns3__RememberMeIDInfoType *RememberMeIDInfo,
	ns3__IdentityTokenInfoType *IdentityTokenInfo)
{
	ns3__IdentificationInfoType *_p = soap_new_ns3__IdentificationInfoType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__IdentificationInfoType::MobileIDInfo = MobileIDInfo;
		_p->ns3__IdentificationInfoType::RememberMeIDInfo = RememberMeIDInfo;
		_p->ns3__IdentificationInfoType::IdentityTokenInfo = IdentityTokenInfo;
	}
	return _p;
}

inline int soap_write_ns3__IdentificationInfoType(struct soap *soap, ns3__IdentificationInfoType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:IdentificationInfoType", p->soap_type() == SOAP_TYPE_ns3__IdentificationInfoType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__IdentificationInfoType(struct soap *soap, const char *URL, ns3__IdentificationInfoType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:IdentificationInfoType", p->soap_type() == SOAP_TYPE_ns3__IdentificationInfoType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__IdentificationInfoType(struct soap *soap, const char *URL, ns3__IdentificationInfoType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:IdentificationInfoType", p->soap_type() == SOAP_TYPE_ns3__IdentificationInfoType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__IdentificationInfoType * SOAP_FMAC4 soap_get_ns3__IdentificationInfoType(struct soap*, ns3__IdentificationInfoType *, const char*, const char*);

inline int soap_read_ns3__IdentificationInfoType(struct soap *soap, ns3__IdentificationInfoType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns3__IdentificationInfoType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__IdentificationInfoType(struct soap *soap, const char *URL, ns3__IdentificationInfoType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__IdentificationInfoType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__IdentificationInfoType(struct soap *soap, ns3__IdentificationInfoType *p)
{
	if (soap_read_ns3__IdentificationInfoType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__BuyerDetailType_DEFINED
#define SOAP_TYPE_ns3__BuyerDetailType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__BuyerDetailType(struct soap*, const char*, int, const ns3__BuyerDetailType *, const char*);
SOAP_FMAC3 ns3__BuyerDetailType * SOAP_FMAC4 soap_in_ns3__BuyerDetailType(struct soap*, const char*, ns3__BuyerDetailType *, const char*);
SOAP_FMAC1 ns3__BuyerDetailType * SOAP_FMAC2 soap_instantiate_ns3__BuyerDetailType(struct soap*, int, const char*, const char*, size_t*);

inline ns3__BuyerDetailType * soap_new_ns3__BuyerDetailType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__BuyerDetailType(soap, n, NULL, NULL, NULL);
}

inline ns3__BuyerDetailType * soap_new_req_ns3__BuyerDetailType(
	struct soap *soap)
{
	ns3__BuyerDetailType *_p = soap_new_ns3__BuyerDetailType(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns3__BuyerDetailType * soap_new_set_ns3__BuyerDetailType(
	struct soap *soap,
	ns3__IdentificationInfoType *IdentificationInfo,
	std::string *RiskSessionCorrelationID,
	std::string *BuyerIPAddress)
{
	ns3__BuyerDetailType *_p = soap_new_ns3__BuyerDetailType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__BuyerDetailType::IdentificationInfo = IdentificationInfo;
		_p->ns3__BuyerDetailType::RiskSessionCorrelationID = RiskSessionCorrelationID;
		_p->ns3__BuyerDetailType::BuyerIPAddress = BuyerIPAddress;
	}
	return _p;
}

inline int soap_write_ns3__BuyerDetailType(struct soap *soap, ns3__BuyerDetailType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:BuyerDetailType", p->soap_type() == SOAP_TYPE_ns3__BuyerDetailType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__BuyerDetailType(struct soap *soap, const char *URL, ns3__BuyerDetailType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:BuyerDetailType", p->soap_type() == SOAP_TYPE_ns3__BuyerDetailType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__BuyerDetailType(struct soap *soap, const char *URL, ns3__BuyerDetailType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:BuyerDetailType", p->soap_type() == SOAP_TYPE_ns3__BuyerDetailType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__BuyerDetailType * SOAP_FMAC4 soap_get_ns3__BuyerDetailType(struct soap*, ns3__BuyerDetailType *, const char*, const char*);

inline int soap_read_ns3__BuyerDetailType(struct soap *soap, ns3__BuyerDetailType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns3__BuyerDetailType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__BuyerDetailType(struct soap *soap, const char *URL, ns3__BuyerDetailType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__BuyerDetailType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__BuyerDetailType(struct soap *soap, ns3__BuyerDetailType *p)
{
	if (soap_read_ns3__BuyerDetailType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__PaymentDirectivesType_DEFINED
#define SOAP_TYPE_ns3__PaymentDirectivesType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__PaymentDirectivesType(struct soap*, const char*, int, const ns3__PaymentDirectivesType *, const char*);
SOAP_FMAC3 ns3__PaymentDirectivesType * SOAP_FMAC4 soap_in_ns3__PaymentDirectivesType(struct soap*, const char*, ns3__PaymentDirectivesType *, const char*);
SOAP_FMAC1 ns3__PaymentDirectivesType * SOAP_FMAC2 soap_instantiate_ns3__PaymentDirectivesType(struct soap*, int, const char*, const char*, size_t*);

inline ns3__PaymentDirectivesType * soap_new_ns3__PaymentDirectivesType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__PaymentDirectivesType(soap, n, NULL, NULL, NULL);
}

inline ns3__PaymentDirectivesType * soap_new_req_ns3__PaymentDirectivesType(
	struct soap *soap)
{
	ns3__PaymentDirectivesType *_p = soap_new_ns3__PaymentDirectivesType(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns3__PaymentDirectivesType * soap_new_set_ns3__PaymentDirectivesType(
	struct soap *soap,
	enum ns3__MerchantPullPaymentCodeType *PaymentType)
{
	ns3__PaymentDirectivesType *_p = soap_new_ns3__PaymentDirectivesType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__PaymentDirectivesType::PaymentType = PaymentType;
	}
	return _p;
}

inline int soap_write_ns3__PaymentDirectivesType(struct soap *soap, ns3__PaymentDirectivesType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:PaymentDirectivesType", p->soap_type() == SOAP_TYPE_ns3__PaymentDirectivesType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__PaymentDirectivesType(struct soap *soap, const char *URL, ns3__PaymentDirectivesType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:PaymentDirectivesType", p->soap_type() == SOAP_TYPE_ns3__PaymentDirectivesType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__PaymentDirectivesType(struct soap *soap, const char *URL, ns3__PaymentDirectivesType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:PaymentDirectivesType", p->soap_type() == SOAP_TYPE_ns3__PaymentDirectivesType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__PaymentDirectivesType * SOAP_FMAC4 soap_get_ns3__PaymentDirectivesType(struct soap*, ns3__PaymentDirectivesType *, const char*, const char*);

inline int soap_read_ns3__PaymentDirectivesType(struct soap *soap, ns3__PaymentDirectivesType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns3__PaymentDirectivesType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__PaymentDirectivesType(struct soap *soap, const char *URL, ns3__PaymentDirectivesType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__PaymentDirectivesType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__PaymentDirectivesType(struct soap *soap, ns3__PaymentDirectivesType *p)
{
	if (soap_read_ns3__PaymentDirectivesType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__OrderDetailsType_DEFINED
#define SOAP_TYPE_ns3__OrderDetailsType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__OrderDetailsType(struct soap*, const char*, int, const ns3__OrderDetailsType *, const char*);
SOAP_FMAC3 ns3__OrderDetailsType * SOAP_FMAC4 soap_in_ns3__OrderDetailsType(struct soap*, const char*, ns3__OrderDetailsType *, const char*);
SOAP_FMAC1 ns3__OrderDetailsType * SOAP_FMAC2 soap_instantiate_ns3__OrderDetailsType(struct soap*, int, const char*, const char*, size_t*);

inline ns3__OrderDetailsType * soap_new_ns3__OrderDetailsType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__OrderDetailsType(soap, n, NULL, NULL, NULL);
}

inline ns3__OrderDetailsType * soap_new_req_ns3__OrderDetailsType(
	struct soap *soap)
{
	ns3__OrderDetailsType *_p = soap_new_ns3__OrderDetailsType(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns3__OrderDetailsType * soap_new_set_ns3__OrderDetailsType(
	struct soap *soap,
	std::string *Description,
	ns2__BasicAmountType *MaxAmount)
{
	ns3__OrderDetailsType *_p = soap_new_ns3__OrderDetailsType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__OrderDetailsType::Description = Description;
		_p->ns3__OrderDetailsType::MaxAmount = MaxAmount;
	}
	return _p;
}

inline int soap_write_ns3__OrderDetailsType(struct soap *soap, ns3__OrderDetailsType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:OrderDetailsType", p->soap_type() == SOAP_TYPE_ns3__OrderDetailsType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__OrderDetailsType(struct soap *soap, const char *URL, ns3__OrderDetailsType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:OrderDetailsType", p->soap_type() == SOAP_TYPE_ns3__OrderDetailsType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__OrderDetailsType(struct soap *soap, const char *URL, ns3__OrderDetailsType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:OrderDetailsType", p->soap_type() == SOAP_TYPE_ns3__OrderDetailsType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__OrderDetailsType * SOAP_FMAC4 soap_get_ns3__OrderDetailsType(struct soap*, ns3__OrderDetailsType *, const char*, const char*);

inline int soap_read_ns3__OrderDetailsType(struct soap *soap, ns3__OrderDetailsType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns3__OrderDetailsType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__OrderDetailsType(struct soap *soap, const char *URL, ns3__OrderDetailsType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__OrderDetailsType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__OrderDetailsType(struct soap *soap, ns3__OrderDetailsType *p)
{
	if (soap_read_ns3__OrderDetailsType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__InfoSharingDirectivesType_DEFINED
#define SOAP_TYPE_ns3__InfoSharingDirectivesType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__InfoSharingDirectivesType(struct soap*, const char*, int, const ns3__InfoSharingDirectivesType *, const char*);
SOAP_FMAC3 ns3__InfoSharingDirectivesType * SOAP_FMAC4 soap_in_ns3__InfoSharingDirectivesType(struct soap*, const char*, ns3__InfoSharingDirectivesType *, const char*);
SOAP_FMAC1 ns3__InfoSharingDirectivesType * SOAP_FMAC2 soap_instantiate_ns3__InfoSharingDirectivesType(struct soap*, int, const char*, const char*, size_t*);

inline ns3__InfoSharingDirectivesType * soap_new_ns3__InfoSharingDirectivesType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__InfoSharingDirectivesType(soap, n, NULL, NULL, NULL);
}

inline ns3__InfoSharingDirectivesType * soap_new_req_ns3__InfoSharingDirectivesType(
	struct soap *soap)
{
	ns3__InfoSharingDirectivesType *_p = soap_new_ns3__InfoSharingDirectivesType(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns3__InfoSharingDirectivesType * soap_new_set_ns3__InfoSharingDirectivesType(
	struct soap *soap,
	std::string *ReqBillingAddress)
{
	ns3__InfoSharingDirectivesType *_p = soap_new_ns3__InfoSharingDirectivesType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__InfoSharingDirectivesType::ReqBillingAddress = ReqBillingAddress;
	}
	return _p;
}

inline int soap_write_ns3__InfoSharingDirectivesType(struct soap *soap, ns3__InfoSharingDirectivesType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:InfoSharingDirectivesType", p->soap_type() == SOAP_TYPE_ns3__InfoSharingDirectivesType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__InfoSharingDirectivesType(struct soap *soap, const char *URL, ns3__InfoSharingDirectivesType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:InfoSharingDirectivesType", p->soap_type() == SOAP_TYPE_ns3__InfoSharingDirectivesType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__InfoSharingDirectivesType(struct soap *soap, const char *URL, ns3__InfoSharingDirectivesType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:InfoSharingDirectivesType", p->soap_type() == SOAP_TYPE_ns3__InfoSharingDirectivesType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__InfoSharingDirectivesType * SOAP_FMAC4 soap_get_ns3__InfoSharingDirectivesType(struct soap*, ns3__InfoSharingDirectivesType *, const char*, const char*);

inline int soap_read_ns3__InfoSharingDirectivesType(struct soap *soap, ns3__InfoSharingDirectivesType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns3__InfoSharingDirectivesType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__InfoSharingDirectivesType(struct soap *soap, const char *URL, ns3__InfoSharingDirectivesType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__InfoSharingDirectivesType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__InfoSharingDirectivesType(struct soap *soap, ns3__InfoSharingDirectivesType *p)
{
	if (soap_read_ns3__InfoSharingDirectivesType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__BillingApprovalDetailsType_DEFINED
#define SOAP_TYPE_ns3__BillingApprovalDetailsType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__BillingApprovalDetailsType(struct soap*, const char*, int, const ns3__BillingApprovalDetailsType *, const char*);
SOAP_FMAC3 ns3__BillingApprovalDetailsType * SOAP_FMAC4 soap_in_ns3__BillingApprovalDetailsType(struct soap*, const char*, ns3__BillingApprovalDetailsType *, const char*);
SOAP_FMAC1 ns3__BillingApprovalDetailsType * SOAP_FMAC2 soap_instantiate_ns3__BillingApprovalDetailsType(struct soap*, int, const char*, const char*, size_t*);

inline ns3__BillingApprovalDetailsType * soap_new_ns3__BillingApprovalDetailsType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__BillingApprovalDetailsType(soap, n, NULL, NULL, NULL);
}

inline ns3__BillingApprovalDetailsType * soap_new_req_ns3__BillingApprovalDetailsType(
	struct soap *soap,
	enum ns3__ApprovalTypeType ApprovalType)
{
	ns3__BillingApprovalDetailsType *_p = soap_new_ns3__BillingApprovalDetailsType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__BillingApprovalDetailsType::ApprovalType = ApprovalType;
	}
	return _p;
}

inline ns3__BillingApprovalDetailsType * soap_new_set_ns3__BillingApprovalDetailsType(
	struct soap *soap,
	enum ns3__ApprovalTypeType ApprovalType,
	enum ns3__ApprovalSubTypeType *ApprovalSubType,
	ns3__OrderDetailsType *OrderDetails,
	ns3__PaymentDirectivesType *PaymentDirectives,
	std::string *Custom)
{
	ns3__BillingApprovalDetailsType *_p = soap_new_ns3__BillingApprovalDetailsType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__BillingApprovalDetailsType::ApprovalType = ApprovalType;
		_p->ns3__BillingApprovalDetailsType::ApprovalSubType = ApprovalSubType;
		_p->ns3__BillingApprovalDetailsType::OrderDetails = OrderDetails;
		_p->ns3__BillingApprovalDetailsType::PaymentDirectives = PaymentDirectives;
		_p->ns3__BillingApprovalDetailsType::Custom = Custom;
	}
	return _p;
}

inline int soap_write_ns3__BillingApprovalDetailsType(struct soap *soap, ns3__BillingApprovalDetailsType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:BillingApprovalDetailsType", p->soap_type() == SOAP_TYPE_ns3__BillingApprovalDetailsType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__BillingApprovalDetailsType(struct soap *soap, const char *URL, ns3__BillingApprovalDetailsType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:BillingApprovalDetailsType", p->soap_type() == SOAP_TYPE_ns3__BillingApprovalDetailsType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__BillingApprovalDetailsType(struct soap *soap, const char *URL, ns3__BillingApprovalDetailsType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:BillingApprovalDetailsType", p->soap_type() == SOAP_TYPE_ns3__BillingApprovalDetailsType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__BillingApprovalDetailsType * SOAP_FMAC4 soap_get_ns3__BillingApprovalDetailsType(struct soap*, ns3__BillingApprovalDetailsType *, const char*, const char*);

inline int soap_read_ns3__BillingApprovalDetailsType(struct soap *soap, ns3__BillingApprovalDetailsType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns3__BillingApprovalDetailsType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__BillingApprovalDetailsType(struct soap *soap, const char *URL, ns3__BillingApprovalDetailsType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__BillingApprovalDetailsType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__BillingApprovalDetailsType(struct soap *soap, ns3__BillingApprovalDetailsType *p)
{
	if (soap_read_ns3__BillingApprovalDetailsType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__AuthorizationRequestType_DEFINED
#define SOAP_TYPE_ns3__AuthorizationRequestType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__AuthorizationRequestType(struct soap*, const char*, int, const ns3__AuthorizationRequestType *, const char*);
SOAP_FMAC3 ns3__AuthorizationRequestType * SOAP_FMAC4 soap_in_ns3__AuthorizationRequestType(struct soap*, const char*, ns3__AuthorizationRequestType *, const char*);
SOAP_FMAC1 ns3__AuthorizationRequestType * SOAP_FMAC2 soap_instantiate_ns3__AuthorizationRequestType(struct soap*, int, const char*, const char*, size_t*);

inline ns3__AuthorizationRequestType * soap_new_ns3__AuthorizationRequestType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__AuthorizationRequestType(soap, n, NULL, NULL, NULL);
}

inline ns3__AuthorizationRequestType * soap_new_req_ns3__AuthorizationRequestType(
	struct soap *soap,
	bool IsRequested)
{
	ns3__AuthorizationRequestType *_p = soap_new_ns3__AuthorizationRequestType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__AuthorizationRequestType::IsRequested = IsRequested;
	}
	return _p;
}

inline ns3__AuthorizationRequestType * soap_new_set_ns3__AuthorizationRequestType(
	struct soap *soap,
	bool IsRequested)
{
	ns3__AuthorizationRequestType *_p = soap_new_ns3__AuthorizationRequestType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__AuthorizationRequestType::IsRequested = IsRequested;
	}
	return _p;
}

inline int soap_write_ns3__AuthorizationRequestType(struct soap *soap, ns3__AuthorizationRequestType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:AuthorizationRequestType", p->soap_type() == SOAP_TYPE_ns3__AuthorizationRequestType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__AuthorizationRequestType(struct soap *soap, const char *URL, ns3__AuthorizationRequestType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:AuthorizationRequestType", p->soap_type() == SOAP_TYPE_ns3__AuthorizationRequestType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__AuthorizationRequestType(struct soap *soap, const char *URL, ns3__AuthorizationRequestType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:AuthorizationRequestType", p->soap_type() == SOAP_TYPE_ns3__AuthorizationRequestType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__AuthorizationRequestType * SOAP_FMAC4 soap_get_ns3__AuthorizationRequestType(struct soap*, ns3__AuthorizationRequestType *, const char*, const char*);

inline int soap_read_ns3__AuthorizationRequestType(struct soap *soap, ns3__AuthorizationRequestType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns3__AuthorizationRequestType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__AuthorizationRequestType(struct soap *soap, const char *URL, ns3__AuthorizationRequestType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__AuthorizationRequestType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__AuthorizationRequestType(struct soap *soap, ns3__AuthorizationRequestType *p)
{
	if (soap_read_ns3__AuthorizationRequestType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__SetDataRequestType_DEFINED
#define SOAP_TYPE_ns3__SetDataRequestType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__SetDataRequestType(struct soap*, const char*, int, const ns3__SetDataRequestType *, const char*);
SOAP_FMAC3 ns3__SetDataRequestType * SOAP_FMAC4 soap_in_ns3__SetDataRequestType(struct soap*, const char*, ns3__SetDataRequestType *, const char*);
SOAP_FMAC1 ns3__SetDataRequestType * SOAP_FMAC2 soap_instantiate_ns3__SetDataRequestType(struct soap*, int, const char*, const char*, size_t*);

inline ns3__SetDataRequestType * soap_new_ns3__SetDataRequestType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__SetDataRequestType(soap, n, NULL, NULL, NULL);
}

inline ns3__SetDataRequestType * soap_new_req_ns3__SetDataRequestType(
	struct soap *soap)
{
	ns3__SetDataRequestType *_p = soap_new_ns3__SetDataRequestType(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns3__SetDataRequestType * soap_new_set_ns3__SetDataRequestType(
	struct soap *soap,
	const std::vector<ns3__BillingApprovalDetailsType *> & BillingApprovalDetails,
	ns3__BuyerDetailType *BuyerDetail,
	ns3__InfoSharingDirectivesType *InfoSharingDirectives,
	bool *RetrieveShippingAddress,
	enum ns3__UserChannelCodeType *UserChannel,
	bool *ReqConfirmShipping,
	const std::vector<ns3__PaymentDetailsType *> & PaymentDetails,
	ns3__ExternalPartnerTrackingDetailsType *ExternalPartnerTrackingDetails,
	std::string *URI)
{
	ns3__SetDataRequestType *_p = soap_new_ns3__SetDataRequestType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__SetDataRequestType::BillingApprovalDetails = BillingApprovalDetails;
		_p->ns3__SetDataRequestType::BuyerDetail = BuyerDetail;
		_p->ns3__SetDataRequestType::InfoSharingDirectives = InfoSharingDirectives;
		_p->ns3__SetDataRequestType::RetrieveShippingAddress = RetrieveShippingAddress;
		_p->ns3__SetDataRequestType::UserChannel = UserChannel;
		_p->ns3__SetDataRequestType::ReqConfirmShipping = ReqConfirmShipping;
		_p->ns3__SetDataRequestType::PaymentDetails = PaymentDetails;
		_p->ns3__SetDataRequestType::ExternalPartnerTrackingDetails = ExternalPartnerTrackingDetails;
		_p->ns3__SetDataRequestType::URI = URI;
	}
	return _p;
}

inline int soap_write_ns3__SetDataRequestType(struct soap *soap, ns3__SetDataRequestType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:SetDataRequestType", p->soap_type() == SOAP_TYPE_ns3__SetDataRequestType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__SetDataRequestType(struct soap *soap, const char *URL, ns3__SetDataRequestType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:SetDataRequestType", p->soap_type() == SOAP_TYPE_ns3__SetDataRequestType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__SetDataRequestType(struct soap *soap, const char *URL, ns3__SetDataRequestType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:SetDataRequestType", p->soap_type() == SOAP_TYPE_ns3__SetDataRequestType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__SetDataRequestType * SOAP_FMAC4 soap_get_ns3__SetDataRequestType(struct soap*, ns3__SetDataRequestType *, const char*, const char*);

inline int soap_read_ns3__SetDataRequestType(struct soap *soap, ns3__SetDataRequestType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns3__SetDataRequestType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__SetDataRequestType(struct soap *soap, const char *URL, ns3__SetDataRequestType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__SetDataRequestType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__SetDataRequestType(struct soap *soap, ns3__SetDataRequestType *p)
{
	if (soap_read_ns3__SetDataRequestType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__ExecuteCheckoutOperationsRequestDetailsType_DEFINED
#define SOAP_TYPE_ns3__ExecuteCheckoutOperationsRequestDetailsType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__ExecuteCheckoutOperationsRequestDetailsType(struct soap*, const char*, int, const ns3__ExecuteCheckoutOperationsRequestDetailsType *, const char*);
SOAP_FMAC3 ns3__ExecuteCheckoutOperationsRequestDetailsType * SOAP_FMAC4 soap_in_ns3__ExecuteCheckoutOperationsRequestDetailsType(struct soap*, const char*, ns3__ExecuteCheckoutOperationsRequestDetailsType *, const char*);
SOAP_FMAC1 ns3__ExecuteCheckoutOperationsRequestDetailsType * SOAP_FMAC2 soap_instantiate_ns3__ExecuteCheckoutOperationsRequestDetailsType(struct soap*, int, const char*, const char*, size_t*);

inline ns3__ExecuteCheckoutOperationsRequestDetailsType * soap_new_ns3__ExecuteCheckoutOperationsRequestDetailsType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__ExecuteCheckoutOperationsRequestDetailsType(soap, n, NULL, NULL, NULL);
}

inline ns3__ExecuteCheckoutOperationsRequestDetailsType * soap_new_req_ns3__ExecuteCheckoutOperationsRequestDetailsType(
	struct soap *soap,
	ns3__SetDataRequestType *SetDataRequest)
{
	ns3__ExecuteCheckoutOperationsRequestDetailsType *_p = soap_new_ns3__ExecuteCheckoutOperationsRequestDetailsType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__ExecuteCheckoutOperationsRequestDetailsType::SetDataRequest = SetDataRequest;
	}
	return _p;
}

inline ns3__ExecuteCheckoutOperationsRequestDetailsType * soap_new_set_ns3__ExecuteCheckoutOperationsRequestDetailsType(
	struct soap *soap,
	std::string *Token,
	ns3__SetDataRequestType *SetDataRequest,
	ns3__AuthorizationRequestType *AuthorizationRequest)
{
	ns3__ExecuteCheckoutOperationsRequestDetailsType *_p = soap_new_ns3__ExecuteCheckoutOperationsRequestDetailsType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__ExecuteCheckoutOperationsRequestDetailsType::Token = Token;
		_p->ns3__ExecuteCheckoutOperationsRequestDetailsType::SetDataRequest = SetDataRequest;
		_p->ns3__ExecuteCheckoutOperationsRequestDetailsType::AuthorizationRequest = AuthorizationRequest;
	}
	return _p;
}

inline int soap_write_ns3__ExecuteCheckoutOperationsRequestDetailsType(struct soap *soap, ns3__ExecuteCheckoutOperationsRequestDetailsType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:ExecuteCheckoutOperationsRequestDetailsType", p->soap_type() == SOAP_TYPE_ns3__ExecuteCheckoutOperationsRequestDetailsType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__ExecuteCheckoutOperationsRequestDetailsType(struct soap *soap, const char *URL, ns3__ExecuteCheckoutOperationsRequestDetailsType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:ExecuteCheckoutOperationsRequestDetailsType", p->soap_type() == SOAP_TYPE_ns3__ExecuteCheckoutOperationsRequestDetailsType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__ExecuteCheckoutOperationsRequestDetailsType(struct soap *soap, const char *URL, ns3__ExecuteCheckoutOperationsRequestDetailsType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:ExecuteCheckoutOperationsRequestDetailsType", p->soap_type() == SOAP_TYPE_ns3__ExecuteCheckoutOperationsRequestDetailsType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__ExecuteCheckoutOperationsRequestDetailsType * SOAP_FMAC4 soap_get_ns3__ExecuteCheckoutOperationsRequestDetailsType(struct soap*, ns3__ExecuteCheckoutOperationsRequestDetailsType *, const char*, const char*);

inline int soap_read_ns3__ExecuteCheckoutOperationsRequestDetailsType(struct soap *soap, ns3__ExecuteCheckoutOperationsRequestDetailsType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns3__ExecuteCheckoutOperationsRequestDetailsType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__ExecuteCheckoutOperationsRequestDetailsType(struct soap *soap, const char *URL, ns3__ExecuteCheckoutOperationsRequestDetailsType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__ExecuteCheckoutOperationsRequestDetailsType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__ExecuteCheckoutOperationsRequestDetailsType(struct soap *soap, ns3__ExecuteCheckoutOperationsRequestDetailsType *p)
{
	if (soap_read_ns3__ExecuteCheckoutOperationsRequestDetailsType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__SetExpressCheckoutRequestDetailsType_DEFINED
#define SOAP_TYPE_ns3__SetExpressCheckoutRequestDetailsType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__SetExpressCheckoutRequestDetailsType(struct soap*, const char*, int, const ns3__SetExpressCheckoutRequestDetailsType *, const char*);
SOAP_FMAC3 ns3__SetExpressCheckoutRequestDetailsType * SOAP_FMAC4 soap_in_ns3__SetExpressCheckoutRequestDetailsType(struct soap*, const char*, ns3__SetExpressCheckoutRequestDetailsType *, const char*);
SOAP_FMAC1 ns3__SetExpressCheckoutRequestDetailsType * SOAP_FMAC2 soap_instantiate_ns3__SetExpressCheckoutRequestDetailsType(struct soap*, int, const char*, const char*, size_t*);

inline ns3__SetExpressCheckoutRequestDetailsType * soap_new_ns3__SetExpressCheckoutRequestDetailsType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__SetExpressCheckoutRequestDetailsType(soap, n, NULL, NULL, NULL);
}

inline ns3__SetExpressCheckoutRequestDetailsType * soap_new_req_ns3__SetExpressCheckoutRequestDetailsType(
	struct soap *soap,
	const std::string& ReturnURL,
	const std::string& CancelURL)
{
	ns3__SetExpressCheckoutRequestDetailsType *_p = soap_new_ns3__SetExpressCheckoutRequestDetailsType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__SetExpressCheckoutRequestDetailsType::ReturnURL = ReturnURL;
		_p->ns3__SetExpressCheckoutRequestDetailsType::CancelURL = CancelURL;
	}
	return _p;
}

inline ns3__SetExpressCheckoutRequestDetailsType * soap_new_set_ns3__SetExpressCheckoutRequestDetailsType(
	struct soap *soap,
	ns2__BasicAmountType *OrderTotal,
	const std::string& ReturnURL,
	const std::string& CancelURL,
	std::string *TrackingImageURL,
	std::string *giropaySuccessURL,
	std::string *giropayCancelURL,
	std::string *BanktxnPendingURL,
	std::string *Token,
	ns2__BasicAmountType *MaxAmount,
	std::string *OrderDescription,
	std::string *Custom,
	std::string *InvoiceID,
	std::string *ReqConfirmShipping,
	std::string *ReqBillingAddress,
	ns3__AddressType *BillingAddress,
	std::string *NoShipping,
	std::string *AddressOverride,
	std::string *LocaleCode,
	std::string *PageStyle,
	std::string *cpp_header_image,
	std::string *cpp_header_border_color,
	std::string *cpp_header_back_color,
	std::string *cpp_payflow_color,
	std::string *cpp_cart_border_color,
	std::string *cpp_logo_image,
	ns3__AddressType *Address,
	enum ns3__PaymentActionCodeType *PaymentAction,
	enum ns3__SolutionTypeType *SolutionType,
	enum ns3__LandingPageType *LandingPage,
	std::string *BuyerEmail,
	enum ns3__ChannelType *ChannelType,
	const std::vector<ns3__BillingAgreementDetailsType *> & BillingAgreementDetails,
	const std::vector<std::string> & PromoCodes,
	std::string *PayPalCheckOutBtnType,
	enum ns3__ProductCategoryType *ProductCategory,
	enum ns3__ShippingServiceCodeType *ShippingMethod,
	time_t *ProfileAddressChangeDate,
	std::string *AllowNote,
	ns3__FundingSourceDetailsType *FundingSourceDetails,
	std::string *BrandName,
	std::string *CallbackURL,
	ns4__EnhancedCheckoutDataType *EnhancedCheckoutData,
	const std::vector<ns3__OtherPaymentMethodDetailsType *> & OtherPaymentMethods,
	ns3__BuyerDetailsType *BuyerDetails,
	const std::vector<ns3__PaymentDetailsType *> & PaymentDetails,
	const std::vector<ns3__ShippingOptionType *> & FlatRateShippingOptions,
	std::string *CallbackTimeout,
	std::string *CallbackVersion,
	std::string *CustomerServiceNumber,
	std::string *GiftMessageEnable,
	std::string *GiftReceiptEnable,
	std::string *GiftWrapEnable,
	std::string *GiftWrapName,
	ns2__BasicAmountType *GiftWrapAmount,
	std::string *BuyerEmailOptInEnable,
	std::string *SurveyEnable,
	std::string *SurveyQuestion,
	const std::vector<std::string> & SurveyChoice,
	enum ns3__TotalType *TotalType,
	std::string *NoteToBuyer,
	const std::vector<ns3__IncentiveInfoType *> & Incentives,
	std::string *ReqInstrumentDetails,
	ns3__ExternalRememberMeOptInDetailsType *ExternalRememberMeOptInDetails,
	ns3__FlowControlDetailsType *FlowControlDetails,
	ns3__DisplayControlDetailsType *DisplayControlDetails,
	ns3__ExternalPartnerTrackingDetailsType *ExternalPartnerTrackingDetails,
	const std::vector<ns3__CoupledBucketsType *> & CoupledBuckets)
{
	ns3__SetExpressCheckoutRequestDetailsType *_p = soap_new_ns3__SetExpressCheckoutRequestDetailsType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__SetExpressCheckoutRequestDetailsType::OrderTotal = OrderTotal;
		_p->ns3__SetExpressCheckoutRequestDetailsType::ReturnURL = ReturnURL;
		_p->ns3__SetExpressCheckoutRequestDetailsType::CancelURL = CancelURL;
		_p->ns3__SetExpressCheckoutRequestDetailsType::TrackingImageURL = TrackingImageURL;
		_p->ns3__SetExpressCheckoutRequestDetailsType::giropaySuccessURL = giropaySuccessURL;
		_p->ns3__SetExpressCheckoutRequestDetailsType::giropayCancelURL = giropayCancelURL;
		_p->ns3__SetExpressCheckoutRequestDetailsType::BanktxnPendingURL = BanktxnPendingURL;
		_p->ns3__SetExpressCheckoutRequestDetailsType::Token = Token;
		_p->ns3__SetExpressCheckoutRequestDetailsType::MaxAmount = MaxAmount;
		_p->ns3__SetExpressCheckoutRequestDetailsType::OrderDescription = OrderDescription;
		_p->ns3__SetExpressCheckoutRequestDetailsType::Custom = Custom;
		_p->ns3__SetExpressCheckoutRequestDetailsType::InvoiceID = InvoiceID;
		_p->ns3__SetExpressCheckoutRequestDetailsType::ReqConfirmShipping = ReqConfirmShipping;
		_p->ns3__SetExpressCheckoutRequestDetailsType::ReqBillingAddress = ReqBillingAddress;
		_p->ns3__SetExpressCheckoutRequestDetailsType::BillingAddress = BillingAddress;
		_p->ns3__SetExpressCheckoutRequestDetailsType::NoShipping = NoShipping;
		_p->ns3__SetExpressCheckoutRequestDetailsType::AddressOverride = AddressOverride;
		_p->ns3__SetExpressCheckoutRequestDetailsType::LocaleCode = LocaleCode;
		_p->ns3__SetExpressCheckoutRequestDetailsType::PageStyle = PageStyle;
		_p->ns3__SetExpressCheckoutRequestDetailsType::cpp_header_image = cpp_header_image;
		_p->ns3__SetExpressCheckoutRequestDetailsType::cpp_header_border_color = cpp_header_border_color;
		_p->ns3__SetExpressCheckoutRequestDetailsType::cpp_header_back_color = cpp_header_back_color;
		_p->ns3__SetExpressCheckoutRequestDetailsType::cpp_payflow_color = cpp_payflow_color;
		_p->ns3__SetExpressCheckoutRequestDetailsType::cpp_cart_border_color = cpp_cart_border_color;
		_p->ns3__SetExpressCheckoutRequestDetailsType::cpp_logo_image = cpp_logo_image;
		_p->ns3__SetExpressCheckoutRequestDetailsType::Address = Address;
		_p->ns3__SetExpressCheckoutRequestDetailsType::PaymentAction = PaymentAction;
		_p->ns3__SetExpressCheckoutRequestDetailsType::SolutionType = SolutionType;
		_p->ns3__SetExpressCheckoutRequestDetailsType::LandingPage = LandingPage;
		_p->ns3__SetExpressCheckoutRequestDetailsType::BuyerEmail = BuyerEmail;
		_p->ns3__SetExpressCheckoutRequestDetailsType::ChannelType = ChannelType;
		_p->ns3__SetExpressCheckoutRequestDetailsType::BillingAgreementDetails = BillingAgreementDetails;
		_p->ns3__SetExpressCheckoutRequestDetailsType::PromoCodes = PromoCodes;
		_p->ns3__SetExpressCheckoutRequestDetailsType::PayPalCheckOutBtnType = PayPalCheckOutBtnType;
		_p->ns3__SetExpressCheckoutRequestDetailsType::ProductCategory = ProductCategory;
		_p->ns3__SetExpressCheckoutRequestDetailsType::ShippingMethod = ShippingMethod;
		_p->ns3__SetExpressCheckoutRequestDetailsType::ProfileAddressChangeDate = ProfileAddressChangeDate;
		_p->ns3__SetExpressCheckoutRequestDetailsType::AllowNote = AllowNote;
		_p->ns3__SetExpressCheckoutRequestDetailsType::FundingSourceDetails = FundingSourceDetails;
		_p->ns3__SetExpressCheckoutRequestDetailsType::BrandName = BrandName;
		_p->ns3__SetExpressCheckoutRequestDetailsType::CallbackURL = CallbackURL;
		_p->ns3__SetExpressCheckoutRequestDetailsType::EnhancedCheckoutData = EnhancedCheckoutData;
		_p->ns3__SetExpressCheckoutRequestDetailsType::OtherPaymentMethods = OtherPaymentMethods;
		_p->ns3__SetExpressCheckoutRequestDetailsType::BuyerDetails = BuyerDetails;
		_p->ns3__SetExpressCheckoutRequestDetailsType::PaymentDetails = PaymentDetails;
		_p->ns3__SetExpressCheckoutRequestDetailsType::FlatRateShippingOptions = FlatRateShippingOptions;
		_p->ns3__SetExpressCheckoutRequestDetailsType::CallbackTimeout = CallbackTimeout;
		_p->ns3__SetExpressCheckoutRequestDetailsType::CallbackVersion = CallbackVersion;
		_p->ns3__SetExpressCheckoutRequestDetailsType::CustomerServiceNumber = CustomerServiceNumber;
		_p->ns3__SetExpressCheckoutRequestDetailsType::GiftMessageEnable = GiftMessageEnable;
		_p->ns3__SetExpressCheckoutRequestDetailsType::GiftReceiptEnable = GiftReceiptEnable;
		_p->ns3__SetExpressCheckoutRequestDetailsType::GiftWrapEnable = GiftWrapEnable;
		_p->ns3__SetExpressCheckoutRequestDetailsType::GiftWrapName = GiftWrapName;
		_p->ns3__SetExpressCheckoutRequestDetailsType::GiftWrapAmount = GiftWrapAmount;
		_p->ns3__SetExpressCheckoutRequestDetailsType::BuyerEmailOptInEnable = BuyerEmailOptInEnable;
		_p->ns3__SetExpressCheckoutRequestDetailsType::SurveyEnable = SurveyEnable;
		_p->ns3__SetExpressCheckoutRequestDetailsType::SurveyQuestion = SurveyQuestion;
		_p->ns3__SetExpressCheckoutRequestDetailsType::SurveyChoice = SurveyChoice;
		_p->ns3__SetExpressCheckoutRequestDetailsType::TotalType = TotalType;
		_p->ns3__SetExpressCheckoutRequestDetailsType::NoteToBuyer = NoteToBuyer;
		_p->ns3__SetExpressCheckoutRequestDetailsType::Incentives = Incentives;
		_p->ns3__SetExpressCheckoutRequestDetailsType::ReqInstrumentDetails = ReqInstrumentDetails;
		_p->ns3__SetExpressCheckoutRequestDetailsType::ExternalRememberMeOptInDetails = ExternalRememberMeOptInDetails;
		_p->ns3__SetExpressCheckoutRequestDetailsType::FlowControlDetails = FlowControlDetails;
		_p->ns3__SetExpressCheckoutRequestDetailsType::DisplayControlDetails = DisplayControlDetails;
		_p->ns3__SetExpressCheckoutRequestDetailsType::ExternalPartnerTrackingDetails = ExternalPartnerTrackingDetails;
		_p->ns3__SetExpressCheckoutRequestDetailsType::CoupledBuckets = CoupledBuckets;
	}
	return _p;
}

inline int soap_write_ns3__SetExpressCheckoutRequestDetailsType(struct soap *soap, ns3__SetExpressCheckoutRequestDetailsType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:SetExpressCheckoutRequestDetailsType", p->soap_type() == SOAP_TYPE_ns3__SetExpressCheckoutRequestDetailsType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__SetExpressCheckoutRequestDetailsType(struct soap *soap, const char *URL, ns3__SetExpressCheckoutRequestDetailsType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:SetExpressCheckoutRequestDetailsType", p->soap_type() == SOAP_TYPE_ns3__SetExpressCheckoutRequestDetailsType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__SetExpressCheckoutRequestDetailsType(struct soap *soap, const char *URL, ns3__SetExpressCheckoutRequestDetailsType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:SetExpressCheckoutRequestDetailsType", p->soap_type() == SOAP_TYPE_ns3__SetExpressCheckoutRequestDetailsType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__SetExpressCheckoutRequestDetailsType * SOAP_FMAC4 soap_get_ns3__SetExpressCheckoutRequestDetailsType(struct soap*, ns3__SetExpressCheckoutRequestDetailsType *, const char*, const char*);

inline int soap_read_ns3__SetExpressCheckoutRequestDetailsType(struct soap *soap, ns3__SetExpressCheckoutRequestDetailsType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns3__SetExpressCheckoutRequestDetailsType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__SetExpressCheckoutRequestDetailsType(struct soap *soap, const char *URL, ns3__SetExpressCheckoutRequestDetailsType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__SetExpressCheckoutRequestDetailsType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__SetExpressCheckoutRequestDetailsType(struct soap *soap, ns3__SetExpressCheckoutRequestDetailsType *p)
{
	if (soap_read_ns3__SetExpressCheckoutRequestDetailsType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__GetIncentiveEvaluationResponseDetailsType_DEFINED
#define SOAP_TYPE_ns3__GetIncentiveEvaluationResponseDetailsType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__GetIncentiveEvaluationResponseDetailsType(struct soap*, const char*, int, const ns3__GetIncentiveEvaluationResponseDetailsType *, const char*);
SOAP_FMAC3 ns3__GetIncentiveEvaluationResponseDetailsType * SOAP_FMAC4 soap_in_ns3__GetIncentiveEvaluationResponseDetailsType(struct soap*, const char*, ns3__GetIncentiveEvaluationResponseDetailsType *, const char*);
SOAP_FMAC1 ns3__GetIncentiveEvaluationResponseDetailsType * SOAP_FMAC2 soap_instantiate_ns3__GetIncentiveEvaluationResponseDetailsType(struct soap*, int, const char*, const char*, size_t*);

inline ns3__GetIncentiveEvaluationResponseDetailsType * soap_new_ns3__GetIncentiveEvaluationResponseDetailsType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__GetIncentiveEvaluationResponseDetailsType(soap, n, NULL, NULL, NULL);
}

inline ns3__GetIncentiveEvaluationResponseDetailsType * soap_new_req_ns3__GetIncentiveEvaluationResponseDetailsType(
	struct soap *soap)
{
	ns3__GetIncentiveEvaluationResponseDetailsType *_p = soap_new_ns3__GetIncentiveEvaluationResponseDetailsType(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns3__GetIncentiveEvaluationResponseDetailsType * soap_new_set_ns3__GetIncentiveEvaluationResponseDetailsType(
	struct soap *soap,
	const std::vector<ns3__IncentiveDetailType *> & IncentiveDetails,
	std::string *RequestId)
{
	ns3__GetIncentiveEvaluationResponseDetailsType *_p = soap_new_ns3__GetIncentiveEvaluationResponseDetailsType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__GetIncentiveEvaluationResponseDetailsType::IncentiveDetails = IncentiveDetails;
		_p->ns3__GetIncentiveEvaluationResponseDetailsType::RequestId = RequestId;
	}
	return _p;
}

inline int soap_write_ns3__GetIncentiveEvaluationResponseDetailsType(struct soap *soap, ns3__GetIncentiveEvaluationResponseDetailsType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:GetIncentiveEvaluationResponseDetailsType", p->soap_type() == SOAP_TYPE_ns3__GetIncentiveEvaluationResponseDetailsType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__GetIncentiveEvaluationResponseDetailsType(struct soap *soap, const char *URL, ns3__GetIncentiveEvaluationResponseDetailsType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:GetIncentiveEvaluationResponseDetailsType", p->soap_type() == SOAP_TYPE_ns3__GetIncentiveEvaluationResponseDetailsType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__GetIncentiveEvaluationResponseDetailsType(struct soap *soap, const char *URL, ns3__GetIncentiveEvaluationResponseDetailsType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:GetIncentiveEvaluationResponseDetailsType", p->soap_type() == SOAP_TYPE_ns3__GetIncentiveEvaluationResponseDetailsType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__GetIncentiveEvaluationResponseDetailsType * SOAP_FMAC4 soap_get_ns3__GetIncentiveEvaluationResponseDetailsType(struct soap*, ns3__GetIncentiveEvaluationResponseDetailsType *, const char*, const char*);

inline int soap_read_ns3__GetIncentiveEvaluationResponseDetailsType(struct soap *soap, ns3__GetIncentiveEvaluationResponseDetailsType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns3__GetIncentiveEvaluationResponseDetailsType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__GetIncentiveEvaluationResponseDetailsType(struct soap *soap, const char *URL, ns3__GetIncentiveEvaluationResponseDetailsType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__GetIncentiveEvaluationResponseDetailsType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__GetIncentiveEvaluationResponseDetailsType(struct soap *soap, ns3__GetIncentiveEvaluationResponseDetailsType *p)
{
	if (soap_read_ns3__GetIncentiveEvaluationResponseDetailsType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__GetIncentiveEvaluationRequestDetailsType_DEFINED
#define SOAP_TYPE_ns3__GetIncentiveEvaluationRequestDetailsType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__GetIncentiveEvaluationRequestDetailsType(struct soap*, const char*, int, const ns3__GetIncentiveEvaluationRequestDetailsType *, const char*);
SOAP_FMAC3 ns3__GetIncentiveEvaluationRequestDetailsType * SOAP_FMAC4 soap_in_ns3__GetIncentiveEvaluationRequestDetailsType(struct soap*, const char*, ns3__GetIncentiveEvaluationRequestDetailsType *, const char*);
SOAP_FMAC1 ns3__GetIncentiveEvaluationRequestDetailsType * SOAP_FMAC2 soap_instantiate_ns3__GetIncentiveEvaluationRequestDetailsType(struct soap*, int, const char*, const char*, size_t*);

inline ns3__GetIncentiveEvaluationRequestDetailsType * soap_new_ns3__GetIncentiveEvaluationRequestDetailsType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__GetIncentiveEvaluationRequestDetailsType(soap, n, NULL, NULL, NULL);
}

inline ns3__GetIncentiveEvaluationRequestDetailsType * soap_new_req_ns3__GetIncentiveEvaluationRequestDetailsType(
	struct soap *soap)
{
	ns3__GetIncentiveEvaluationRequestDetailsType *_p = soap_new_ns3__GetIncentiveEvaluationRequestDetailsType(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns3__GetIncentiveEvaluationRequestDetailsType * soap_new_set_ns3__GetIncentiveEvaluationRequestDetailsType(
	struct soap *soap,
	std::string *ExternalBuyerId,
	const std::vector<std::string> & IncentiveCodes,
	const std::vector<ns3__IncentiveApplyIndicationType *> & ApplyIndication,
	const std::vector<ns3__IncentiveBucketType *> & Buckets,
	ns2__BasicAmountType *CartTotalAmt,
	ns3__IncentiveRequestDetailsType *RequestDetails)
{
	ns3__GetIncentiveEvaluationRequestDetailsType *_p = soap_new_ns3__GetIncentiveEvaluationRequestDetailsType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__GetIncentiveEvaluationRequestDetailsType::ExternalBuyerId = ExternalBuyerId;
		_p->ns3__GetIncentiveEvaluationRequestDetailsType::IncentiveCodes = IncentiveCodes;
		_p->ns3__GetIncentiveEvaluationRequestDetailsType::ApplyIndication = ApplyIndication;
		_p->ns3__GetIncentiveEvaluationRequestDetailsType::Buckets = Buckets;
		_p->ns3__GetIncentiveEvaluationRequestDetailsType::CartTotalAmt = CartTotalAmt;
		_p->ns3__GetIncentiveEvaluationRequestDetailsType::RequestDetails = RequestDetails;
	}
	return _p;
}

inline int soap_write_ns3__GetIncentiveEvaluationRequestDetailsType(struct soap *soap, ns3__GetIncentiveEvaluationRequestDetailsType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:GetIncentiveEvaluationRequestDetailsType", p->soap_type() == SOAP_TYPE_ns3__GetIncentiveEvaluationRequestDetailsType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__GetIncentiveEvaluationRequestDetailsType(struct soap *soap, const char *URL, ns3__GetIncentiveEvaluationRequestDetailsType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:GetIncentiveEvaluationRequestDetailsType", p->soap_type() == SOAP_TYPE_ns3__GetIncentiveEvaluationRequestDetailsType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__GetIncentiveEvaluationRequestDetailsType(struct soap *soap, const char *URL, ns3__GetIncentiveEvaluationRequestDetailsType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:GetIncentiveEvaluationRequestDetailsType", p->soap_type() == SOAP_TYPE_ns3__GetIncentiveEvaluationRequestDetailsType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__GetIncentiveEvaluationRequestDetailsType * SOAP_FMAC4 soap_get_ns3__GetIncentiveEvaluationRequestDetailsType(struct soap*, ns3__GetIncentiveEvaluationRequestDetailsType *, const char*, const char*);

inline int soap_read_ns3__GetIncentiveEvaluationRequestDetailsType(struct soap *soap, ns3__GetIncentiveEvaluationRequestDetailsType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns3__GetIncentiveEvaluationRequestDetailsType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__GetIncentiveEvaluationRequestDetailsType(struct soap *soap, const char *URL, ns3__GetIncentiveEvaluationRequestDetailsType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__GetIncentiveEvaluationRequestDetailsType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__GetIncentiveEvaluationRequestDetailsType(struct soap *soap, ns3__GetIncentiveEvaluationRequestDetailsType *p)
{
	if (soap_read_ns3__GetIncentiveEvaluationRequestDetailsType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__IncentiveRequestDetailsType_DEFINED
#define SOAP_TYPE_ns3__IncentiveRequestDetailsType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__IncentiveRequestDetailsType(struct soap*, const char*, int, const ns3__IncentiveRequestDetailsType *, const char*);
SOAP_FMAC3 ns3__IncentiveRequestDetailsType * SOAP_FMAC4 soap_in_ns3__IncentiveRequestDetailsType(struct soap*, const char*, ns3__IncentiveRequestDetailsType *, const char*);
SOAP_FMAC1 ns3__IncentiveRequestDetailsType * SOAP_FMAC2 soap_instantiate_ns3__IncentiveRequestDetailsType(struct soap*, int, const char*, const char*, size_t*);

inline ns3__IncentiveRequestDetailsType * soap_new_ns3__IncentiveRequestDetailsType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__IncentiveRequestDetailsType(soap, n, NULL, NULL, NULL);
}

inline ns3__IncentiveRequestDetailsType * soap_new_req_ns3__IncentiveRequestDetailsType(
	struct soap *soap)
{
	ns3__IncentiveRequestDetailsType *_p = soap_new_ns3__IncentiveRequestDetailsType(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns3__IncentiveRequestDetailsType * soap_new_set_ns3__IncentiveRequestDetailsType(
	struct soap *soap,
	std::string *RequestId,
	enum ns3__IncentiveRequestCodeType *RequestType,
	enum ns3__IncentiveRequestDetailLevelCodeType *RequestDetailLevel)
{
	ns3__IncentiveRequestDetailsType *_p = soap_new_ns3__IncentiveRequestDetailsType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__IncentiveRequestDetailsType::RequestId = RequestId;
		_p->ns3__IncentiveRequestDetailsType::RequestType = RequestType;
		_p->ns3__IncentiveRequestDetailsType::RequestDetailLevel = RequestDetailLevel;
	}
	return _p;
}

inline int soap_write_ns3__IncentiveRequestDetailsType(struct soap *soap, ns3__IncentiveRequestDetailsType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:IncentiveRequestDetailsType", p->soap_type() == SOAP_TYPE_ns3__IncentiveRequestDetailsType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__IncentiveRequestDetailsType(struct soap *soap, const char *URL, ns3__IncentiveRequestDetailsType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:IncentiveRequestDetailsType", p->soap_type() == SOAP_TYPE_ns3__IncentiveRequestDetailsType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__IncentiveRequestDetailsType(struct soap *soap, const char *URL, ns3__IncentiveRequestDetailsType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:IncentiveRequestDetailsType", p->soap_type() == SOAP_TYPE_ns3__IncentiveRequestDetailsType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__IncentiveRequestDetailsType * SOAP_FMAC4 soap_get_ns3__IncentiveRequestDetailsType(struct soap*, ns3__IncentiveRequestDetailsType *, const char*, const char*);

inline int soap_read_ns3__IncentiveRequestDetailsType(struct soap *soap, ns3__IncentiveRequestDetailsType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns3__IncentiveRequestDetailsType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__IncentiveRequestDetailsType(struct soap *soap, const char *URL, ns3__IncentiveRequestDetailsType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__IncentiveRequestDetailsType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__IncentiveRequestDetailsType(struct soap *soap, ns3__IncentiveRequestDetailsType *p)
{
	if (soap_read_ns3__IncentiveRequestDetailsType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__IncentiveBucketType_DEFINED
#define SOAP_TYPE_ns3__IncentiveBucketType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__IncentiveBucketType(struct soap*, const char*, int, const ns3__IncentiveBucketType *, const char*);
SOAP_FMAC3 ns3__IncentiveBucketType * SOAP_FMAC4 soap_in_ns3__IncentiveBucketType(struct soap*, const char*, ns3__IncentiveBucketType *, const char*);
SOAP_FMAC1 ns3__IncentiveBucketType * SOAP_FMAC2 soap_instantiate_ns3__IncentiveBucketType(struct soap*, int, const char*, const char*, size_t*);

inline ns3__IncentiveBucketType * soap_new_ns3__IncentiveBucketType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__IncentiveBucketType(soap, n, NULL, NULL, NULL);
}

inline ns3__IncentiveBucketType * soap_new_req_ns3__IncentiveBucketType(
	struct soap *soap)
{
	ns3__IncentiveBucketType *_p = soap_new_ns3__IncentiveBucketType(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns3__IncentiveBucketType * soap_new_set_ns3__IncentiveBucketType(
	struct soap *soap,
	const std::vector<ns3__IncentiveItemType *> & Items,
	std::string *BucketId,
	std::string *SellerId,
	std::string *ExternalSellerId,
	ns2__BasicAmountType *BucketSubtotalAmt,
	ns2__BasicAmountType *BucketShippingAmt,
	ns2__BasicAmountType *BucketInsuranceAmt,
	ns2__BasicAmountType *BucketSalesTaxAmt,
	ns2__BasicAmountType *BucketTotalAmt)
{
	ns3__IncentiveBucketType *_p = soap_new_ns3__IncentiveBucketType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__IncentiveBucketType::Items = Items;
		_p->ns3__IncentiveBucketType::BucketId = BucketId;
		_p->ns3__IncentiveBucketType::SellerId = SellerId;
		_p->ns3__IncentiveBucketType::ExternalSellerId = ExternalSellerId;
		_p->ns3__IncentiveBucketType::BucketSubtotalAmt = BucketSubtotalAmt;
		_p->ns3__IncentiveBucketType::BucketShippingAmt = BucketShippingAmt;
		_p->ns3__IncentiveBucketType::BucketInsuranceAmt = BucketInsuranceAmt;
		_p->ns3__IncentiveBucketType::BucketSalesTaxAmt = BucketSalesTaxAmt;
		_p->ns3__IncentiveBucketType::BucketTotalAmt = BucketTotalAmt;
	}
	return _p;
}

inline int soap_write_ns3__IncentiveBucketType(struct soap *soap, ns3__IncentiveBucketType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:IncentiveBucketType", p->soap_type() == SOAP_TYPE_ns3__IncentiveBucketType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__IncentiveBucketType(struct soap *soap, const char *URL, ns3__IncentiveBucketType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:IncentiveBucketType", p->soap_type() == SOAP_TYPE_ns3__IncentiveBucketType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__IncentiveBucketType(struct soap *soap, const char *URL, ns3__IncentiveBucketType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:IncentiveBucketType", p->soap_type() == SOAP_TYPE_ns3__IncentiveBucketType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__IncentiveBucketType * SOAP_FMAC4 soap_get_ns3__IncentiveBucketType(struct soap*, ns3__IncentiveBucketType *, const char*, const char*);

inline int soap_read_ns3__IncentiveBucketType(struct soap *soap, ns3__IncentiveBucketType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns3__IncentiveBucketType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__IncentiveBucketType(struct soap *soap, const char *URL, ns3__IncentiveBucketType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__IncentiveBucketType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__IncentiveBucketType(struct soap *soap, ns3__IncentiveBucketType *p)
{
	if (soap_read_ns3__IncentiveBucketType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__IncentiveItemType_DEFINED
#define SOAP_TYPE_ns3__IncentiveItemType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__IncentiveItemType(struct soap*, const char*, int, const ns3__IncentiveItemType *, const char*);
SOAP_FMAC3 ns3__IncentiveItemType * SOAP_FMAC4 soap_in_ns3__IncentiveItemType(struct soap*, const char*, ns3__IncentiveItemType *, const char*);
SOAP_FMAC1 ns3__IncentiveItemType * SOAP_FMAC2 soap_instantiate_ns3__IncentiveItemType(struct soap*, int, const char*, const char*, size_t*);

inline ns3__IncentiveItemType * soap_new_ns3__IncentiveItemType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__IncentiveItemType(soap, n, NULL, NULL, NULL);
}

inline ns3__IncentiveItemType * soap_new_req_ns3__IncentiveItemType(
	struct soap *soap)
{
	ns3__IncentiveItemType *_p = soap_new_ns3__IncentiveItemType(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns3__IncentiveItemType * soap_new_set_ns3__IncentiveItemType(
	struct soap *soap,
	std::string *ItemId,
	time_t *PurchaseTime,
	std::string *ItemCategoryList,
	ns2__BasicAmountType *ItemPrice,
	std::string *ItemQuantity)
{
	ns3__IncentiveItemType *_p = soap_new_ns3__IncentiveItemType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__IncentiveItemType::ItemId = ItemId;
		_p->ns3__IncentiveItemType::PurchaseTime = PurchaseTime;
		_p->ns3__IncentiveItemType::ItemCategoryList = ItemCategoryList;
		_p->ns3__IncentiveItemType::ItemPrice = ItemPrice;
		_p->ns3__IncentiveItemType::ItemQuantity = ItemQuantity;
	}
	return _p;
}

inline int soap_write_ns3__IncentiveItemType(struct soap *soap, ns3__IncentiveItemType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:IncentiveItemType", p->soap_type() == SOAP_TYPE_ns3__IncentiveItemType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__IncentiveItemType(struct soap *soap, const char *URL, ns3__IncentiveItemType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:IncentiveItemType", p->soap_type() == SOAP_TYPE_ns3__IncentiveItemType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__IncentiveItemType(struct soap *soap, const char *URL, ns3__IncentiveItemType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:IncentiveItemType", p->soap_type() == SOAP_TYPE_ns3__IncentiveItemType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__IncentiveItemType * SOAP_FMAC4 soap_get_ns3__IncentiveItemType(struct soap*, ns3__IncentiveItemType *, const char*, const char*);

inline int soap_read_ns3__IncentiveItemType(struct soap *soap, ns3__IncentiveItemType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns3__IncentiveItemType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__IncentiveItemType(struct soap *soap, const char *URL, ns3__IncentiveItemType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__IncentiveItemType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__IncentiveItemType(struct soap *soap, ns3__IncentiveItemType *p)
{
	if (soap_read_ns3__IncentiveItemType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__IncentiveDetailType_DEFINED
#define SOAP_TYPE_ns3__IncentiveDetailType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__IncentiveDetailType(struct soap*, const char*, int, const ns3__IncentiveDetailType *, const char*);
SOAP_FMAC3 ns3__IncentiveDetailType * SOAP_FMAC4 soap_in_ns3__IncentiveDetailType(struct soap*, const char*, ns3__IncentiveDetailType *, const char*);
SOAP_FMAC1 ns3__IncentiveDetailType * SOAP_FMAC2 soap_instantiate_ns3__IncentiveDetailType(struct soap*, int, const char*, const char*, size_t*);

inline ns3__IncentiveDetailType * soap_new_ns3__IncentiveDetailType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__IncentiveDetailType(soap, n, NULL, NULL, NULL);
}

inline ns3__IncentiveDetailType * soap_new_req_ns3__IncentiveDetailType(
	struct soap *soap)
{
	ns3__IncentiveDetailType *_p = soap_new_ns3__IncentiveDetailType(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns3__IncentiveDetailType * soap_new_set_ns3__IncentiveDetailType(
	struct soap *soap,
	std::string *RedemptionCode,
	std::string *DisplayCode,
	std::string *ProgramId,
	enum ns3__IncentiveTypeCodeType *IncentiveType,
	std::string *IncentiveDescription,
	const std::vector<ns3__IncentiveAppliedToType *> & AppliedTo,
	std::string *Status,
	std::string *ErrorCode)
{
	ns3__IncentiveDetailType *_p = soap_new_ns3__IncentiveDetailType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__IncentiveDetailType::RedemptionCode = RedemptionCode;
		_p->ns3__IncentiveDetailType::DisplayCode = DisplayCode;
		_p->ns3__IncentiveDetailType::ProgramId = ProgramId;
		_p->ns3__IncentiveDetailType::IncentiveType = IncentiveType;
		_p->ns3__IncentiveDetailType::IncentiveDescription = IncentiveDescription;
		_p->ns3__IncentiveDetailType::AppliedTo = AppliedTo;
		_p->ns3__IncentiveDetailType::Status = Status;
		_p->ns3__IncentiveDetailType::ErrorCode = ErrorCode;
	}
	return _p;
}

inline int soap_write_ns3__IncentiveDetailType(struct soap *soap, ns3__IncentiveDetailType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:IncentiveDetailType", p->soap_type() == SOAP_TYPE_ns3__IncentiveDetailType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__IncentiveDetailType(struct soap *soap, const char *URL, ns3__IncentiveDetailType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:IncentiveDetailType", p->soap_type() == SOAP_TYPE_ns3__IncentiveDetailType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__IncentiveDetailType(struct soap *soap, const char *URL, ns3__IncentiveDetailType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:IncentiveDetailType", p->soap_type() == SOAP_TYPE_ns3__IncentiveDetailType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__IncentiveDetailType * SOAP_FMAC4 soap_get_ns3__IncentiveDetailType(struct soap*, ns3__IncentiveDetailType *, const char*, const char*);

inline int soap_read_ns3__IncentiveDetailType(struct soap *soap, ns3__IncentiveDetailType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns3__IncentiveDetailType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__IncentiveDetailType(struct soap *soap, const char *URL, ns3__IncentiveDetailType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__IncentiveDetailType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__IncentiveDetailType(struct soap *soap, ns3__IncentiveDetailType *p)
{
	if (soap_read_ns3__IncentiveDetailType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__IncentiveAppliedToType_DEFINED
#define SOAP_TYPE_ns3__IncentiveAppliedToType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__IncentiveAppliedToType(struct soap*, const char*, int, const ns3__IncentiveAppliedToType *, const char*);
SOAP_FMAC3 ns3__IncentiveAppliedToType * SOAP_FMAC4 soap_in_ns3__IncentiveAppliedToType(struct soap*, const char*, ns3__IncentiveAppliedToType *, const char*);
SOAP_FMAC1 ns3__IncentiveAppliedToType * SOAP_FMAC2 soap_instantiate_ns3__IncentiveAppliedToType(struct soap*, int, const char*, const char*, size_t*);

inline ns3__IncentiveAppliedToType * soap_new_ns3__IncentiveAppliedToType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__IncentiveAppliedToType(soap, n, NULL, NULL, NULL);
}

inline ns3__IncentiveAppliedToType * soap_new_req_ns3__IncentiveAppliedToType(
	struct soap *soap)
{
	ns3__IncentiveAppliedToType *_p = soap_new_ns3__IncentiveAppliedToType(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns3__IncentiveAppliedToType * soap_new_set_ns3__IncentiveAppliedToType(
	struct soap *soap,
	std::string *BucketId,
	std::string *ItemId,
	ns2__BasicAmountType *IncentiveAmount,
	std::string *SubType)
{
	ns3__IncentiveAppliedToType *_p = soap_new_ns3__IncentiveAppliedToType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__IncentiveAppliedToType::BucketId = BucketId;
		_p->ns3__IncentiveAppliedToType::ItemId = ItemId;
		_p->ns3__IncentiveAppliedToType::IncentiveAmount = IncentiveAmount;
		_p->ns3__IncentiveAppliedToType::SubType = SubType;
	}
	return _p;
}

inline int soap_write_ns3__IncentiveAppliedToType(struct soap *soap, ns3__IncentiveAppliedToType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:IncentiveAppliedToType", p->soap_type() == SOAP_TYPE_ns3__IncentiveAppliedToType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__IncentiveAppliedToType(struct soap *soap, const char *URL, ns3__IncentiveAppliedToType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:IncentiveAppliedToType", p->soap_type() == SOAP_TYPE_ns3__IncentiveAppliedToType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__IncentiveAppliedToType(struct soap *soap, const char *URL, ns3__IncentiveAppliedToType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:IncentiveAppliedToType", p->soap_type() == SOAP_TYPE_ns3__IncentiveAppliedToType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__IncentiveAppliedToType * SOAP_FMAC4 soap_get_ns3__IncentiveAppliedToType(struct soap*, ns3__IncentiveAppliedToType *, const char*, const char*);

inline int soap_read_ns3__IncentiveAppliedToType(struct soap *soap, ns3__IncentiveAppliedToType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns3__IncentiveAppliedToType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__IncentiveAppliedToType(struct soap *soap, const char *URL, ns3__IncentiveAppliedToType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__IncentiveAppliedToType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__IncentiveAppliedToType(struct soap *soap, ns3__IncentiveAppliedToType *p)
{
	if (soap_read_ns3__IncentiveAppliedToType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__PersonNameType_DEFINED
#define SOAP_TYPE_ns3__PersonNameType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__PersonNameType(struct soap*, const char*, int, const ns3__PersonNameType *, const char*);
SOAP_FMAC3 ns3__PersonNameType * SOAP_FMAC4 soap_in_ns3__PersonNameType(struct soap*, const char*, ns3__PersonNameType *, const char*);
SOAP_FMAC1 ns3__PersonNameType * SOAP_FMAC2 soap_instantiate_ns3__PersonNameType(struct soap*, int, const char*, const char*, size_t*);

inline ns3__PersonNameType * soap_new_ns3__PersonNameType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__PersonNameType(soap, n, NULL, NULL, NULL);
}

inline ns3__PersonNameType * soap_new_req_ns3__PersonNameType(
	struct soap *soap)
{
	ns3__PersonNameType *_p = soap_new_ns3__PersonNameType(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns3__PersonNameType * soap_new_set_ns3__PersonNameType(
	struct soap *soap,
	std::string *Salutation,
	std::string *FirstName,
	std::string *MiddleName,
	std::string *LastName,
	std::string *Suffix)
{
	ns3__PersonNameType *_p = soap_new_ns3__PersonNameType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__PersonNameType::Salutation = Salutation;
		_p->ns3__PersonNameType::FirstName = FirstName;
		_p->ns3__PersonNameType::MiddleName = MiddleName;
		_p->ns3__PersonNameType::LastName = LastName;
		_p->ns3__PersonNameType::Suffix = Suffix;
	}
	return _p;
}

inline int soap_write_ns3__PersonNameType(struct soap *soap, ns3__PersonNameType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:PersonNameType", p->soap_type() == SOAP_TYPE_ns3__PersonNameType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__PersonNameType(struct soap *soap, const char *URL, ns3__PersonNameType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:PersonNameType", p->soap_type() == SOAP_TYPE_ns3__PersonNameType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__PersonNameType(struct soap *soap, const char *URL, ns3__PersonNameType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:PersonNameType", p->soap_type() == SOAP_TYPE_ns3__PersonNameType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__PersonNameType * SOAP_FMAC4 soap_get_ns3__PersonNameType(struct soap*, ns3__PersonNameType *, const char*, const char*);

inline int soap_read_ns3__PersonNameType(struct soap *soap, ns3__PersonNameType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns3__PersonNameType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__PersonNameType(struct soap *soap, const char *URL, ns3__PersonNameType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__PersonNameType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__PersonNameType(struct soap *soap, ns3__PersonNameType *p)
{
	if (soap_read_ns3__PersonNameType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__AddressType_DEFINED
#define SOAP_TYPE_ns3__AddressType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__AddressType(struct soap*, const char*, int, const ns3__AddressType *, const char*);
SOAP_FMAC3 ns3__AddressType * SOAP_FMAC4 soap_in_ns3__AddressType(struct soap*, const char*, ns3__AddressType *, const char*);
SOAP_FMAC1 ns3__AddressType * SOAP_FMAC2 soap_instantiate_ns3__AddressType(struct soap*, int, const char*, const char*, size_t*);

inline ns3__AddressType * soap_new_ns3__AddressType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__AddressType(soap, n, NULL, NULL, NULL);
}

inline ns3__AddressType * soap_new_req_ns3__AddressType(
	struct soap *soap)
{
	ns3__AddressType *_p = soap_new_ns3__AddressType(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns3__AddressType * soap_new_set_ns3__AddressType(
	struct soap *soap,
	std::string *Name,
	std::string *Street1,
	std::string *Street2,
	std::string *CityName,
	std::string *StateOrProvince,
	enum ns3__CountryCodeType *Country,
	std::string *CountryName,
	std::string *Phone,
	std::string *PostalCode,
	std::string *AddressID,
	enum ns3__AddressOwnerCodeType *AddressOwner,
	std::string *ExternalAddressID,
	std::string *InternationalName,
	std::string *InternationalStateAndCity,
	std::string *InternationalStreet,
	enum ns3__AddressStatusCodeType *AddressStatus,
	enum ns3__AddressNormalizationStatusCodeType *AddressNormalizationStatus)
{
	ns3__AddressType *_p = soap_new_ns3__AddressType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__AddressType::Name = Name;
		_p->ns3__AddressType::Street1 = Street1;
		_p->ns3__AddressType::Street2 = Street2;
		_p->ns3__AddressType::CityName = CityName;
		_p->ns3__AddressType::StateOrProvince = StateOrProvince;
		_p->ns3__AddressType::Country = Country;
		_p->ns3__AddressType::CountryName = CountryName;
		_p->ns3__AddressType::Phone = Phone;
		_p->ns3__AddressType::PostalCode = PostalCode;
		_p->ns3__AddressType::AddressID = AddressID;
		_p->ns3__AddressType::AddressOwner = AddressOwner;
		_p->ns3__AddressType::ExternalAddressID = ExternalAddressID;
		_p->ns3__AddressType::InternationalName = InternationalName;
		_p->ns3__AddressType::InternationalStateAndCity = InternationalStateAndCity;
		_p->ns3__AddressType::InternationalStreet = InternationalStreet;
		_p->ns3__AddressType::AddressStatus = AddressStatus;
		_p->ns3__AddressType::AddressNormalizationStatus = AddressNormalizationStatus;
	}
	return _p;
}

inline int soap_write_ns3__AddressType(struct soap *soap, ns3__AddressType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:AddressType", p->soap_type() == SOAP_TYPE_ns3__AddressType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__AddressType(struct soap *soap, const char *URL, ns3__AddressType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:AddressType", p->soap_type() == SOAP_TYPE_ns3__AddressType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__AddressType(struct soap *soap, const char *URL, ns3__AddressType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:AddressType", p->soap_type() == SOAP_TYPE_ns3__AddressType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__AddressType * SOAP_FMAC4 soap_get_ns3__AddressType(struct soap*, ns3__AddressType *, const char*, const char*);

inline int soap_read_ns3__AddressType(struct soap *soap, ns3__AddressType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns3__AddressType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__AddressType(struct soap *soap, const char *URL, ns3__AddressType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__AddressType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__AddressType(struct soap *soap, ns3__AddressType *p)
{
	if (soap_read_ns3__AddressType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__PhoneNumberType_DEFINED
#define SOAP_TYPE_ns3__PhoneNumberType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__PhoneNumberType(struct soap*, const char*, int, const ns3__PhoneNumberType *, const char*);
SOAP_FMAC3 ns3__PhoneNumberType * SOAP_FMAC4 soap_in_ns3__PhoneNumberType(struct soap*, const char*, ns3__PhoneNumberType *, const char*);
SOAP_FMAC1 ns3__PhoneNumberType * SOAP_FMAC2 soap_instantiate_ns3__PhoneNumberType(struct soap*, int, const char*, const char*, size_t*);

inline ns3__PhoneNumberType * soap_new_ns3__PhoneNumberType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__PhoneNumberType(soap, n, NULL, NULL, NULL);
}

inline ns3__PhoneNumberType * soap_new_req_ns3__PhoneNumberType(
	struct soap *soap)
{
	ns3__PhoneNumberType *_p = soap_new_ns3__PhoneNumberType(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns3__PhoneNumberType * soap_new_set_ns3__PhoneNumberType(
	struct soap *soap,
	std::string *CountryCode,
	std::string *PhoneNumber,
	std::string *Extension)
{
	ns3__PhoneNumberType *_p = soap_new_ns3__PhoneNumberType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__PhoneNumberType::CountryCode = CountryCode;
		_p->ns3__PhoneNumberType::PhoneNumber = PhoneNumber;
		_p->ns3__PhoneNumberType::Extension = Extension;
	}
	return _p;
}

inline int soap_write_ns3__PhoneNumberType(struct soap *soap, ns3__PhoneNumberType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:PhoneNumberType", p->soap_type() == SOAP_TYPE_ns3__PhoneNumberType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__PhoneNumberType(struct soap *soap, const char *URL, ns3__PhoneNumberType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:PhoneNumberType", p->soap_type() == SOAP_TYPE_ns3__PhoneNumberType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__PhoneNumberType(struct soap *soap, const char *URL, ns3__PhoneNumberType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:PhoneNumberType", p->soap_type() == SOAP_TYPE_ns3__PhoneNumberType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__PhoneNumberType * SOAP_FMAC4 soap_get_ns3__PhoneNumberType(struct soap*, ns3__PhoneNumberType *, const char*, const char*);

inline int soap_read_ns3__PhoneNumberType(struct soap *soap, ns3__PhoneNumberType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns3__PhoneNumberType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__PhoneNumberType(struct soap *soap, const char *URL, ns3__PhoneNumberType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__PhoneNumberType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__PhoneNumberType(struct soap *soap, ns3__PhoneNumberType *p)
{
	if (soap_read_ns3__PhoneNumberType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__AbstractResponseType_DEFINED
#define SOAP_TYPE_ns3__AbstractResponseType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__AbstractResponseType(struct soap*, const char*, int, const ns3__AbstractResponseType *, const char*);
SOAP_FMAC3 ns3__AbstractResponseType * SOAP_FMAC4 soap_in_ns3__AbstractResponseType(struct soap*, const char*, ns3__AbstractResponseType *, const char*);
SOAP_FMAC1 ns3__AbstractResponseType * SOAP_FMAC2 soap_instantiate_ns3__AbstractResponseType(struct soap*, int, const char*, const char*, size_t*);

inline ns3__AbstractResponseType * soap_new_ns3__AbstractResponseType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__AbstractResponseType(soap, n, NULL, NULL, NULL);
}

inline ns3__AbstractResponseType * soap_new_req_ns3__AbstractResponseType(
	struct soap *soap,
	enum ns3__AckCodeType Ack,
	const std::string& Version,
	const std::string& Build)
{
	ns3__AbstractResponseType *_p = soap_new_ns3__AbstractResponseType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__AbstractResponseType::Ack = Ack;
		_p->ns3__AbstractResponseType::Version = Version;
		_p->ns3__AbstractResponseType::Build = Build;
	}
	return _p;
}

inline ns3__AbstractResponseType * soap_new_set_ns3__AbstractResponseType(
	struct soap *soap,
	time_t *Timestamp,
	enum ns3__AckCodeType Ack,
	std::string *CorrelationID,
	const std::vector<ns3__ErrorType *> & Errors,
	const std::string& Version,
	const std::string& Build,
	char *__any)
{
	ns3__AbstractResponseType *_p = soap_new_ns3__AbstractResponseType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__AbstractResponseType::Timestamp = Timestamp;
		_p->ns3__AbstractResponseType::Ack = Ack;
		_p->ns3__AbstractResponseType::CorrelationID = CorrelationID;
		_p->ns3__AbstractResponseType::Errors = Errors;
		_p->ns3__AbstractResponseType::Version = Version;
		_p->ns3__AbstractResponseType::Build = Build;
		_p->ns3__AbstractResponseType::__any = __any;
	}
	return _p;
}

inline int soap_write_ns3__AbstractResponseType(struct soap *soap, ns3__AbstractResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:AbstractResponseType", p->soap_type() == SOAP_TYPE_ns3__AbstractResponseType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__AbstractResponseType(struct soap *soap, const char *URL, ns3__AbstractResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:AbstractResponseType", p->soap_type() == SOAP_TYPE_ns3__AbstractResponseType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__AbstractResponseType(struct soap *soap, const char *URL, ns3__AbstractResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:AbstractResponseType", p->soap_type() == SOAP_TYPE_ns3__AbstractResponseType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__AbstractResponseType * SOAP_FMAC4 soap_get_ns3__AbstractResponseType(struct soap*, ns3__AbstractResponseType *, const char*, const char*);

inline int soap_read_ns3__AbstractResponseType(struct soap *soap, ns3__AbstractResponseType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns3__AbstractResponseType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__AbstractResponseType(struct soap *soap, const char *URL, ns3__AbstractResponseType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__AbstractResponseType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__AbstractResponseType(struct soap *soap, ns3__AbstractResponseType *p)
{
	if (soap_read_ns3__AbstractResponseType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__AbstractRequestType_DEFINED
#define SOAP_TYPE_ns3__AbstractRequestType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__AbstractRequestType(struct soap*, const char*, int, const ns3__AbstractRequestType *, const char*);
SOAP_FMAC3 ns3__AbstractRequestType * SOAP_FMAC4 soap_in_ns3__AbstractRequestType(struct soap*, const char*, ns3__AbstractRequestType *, const char*);
SOAP_FMAC1 ns3__AbstractRequestType * SOAP_FMAC2 soap_instantiate_ns3__AbstractRequestType(struct soap*, int, const char*, const char*, size_t*);

inline ns3__AbstractRequestType * soap_new_ns3__AbstractRequestType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__AbstractRequestType(soap, n, NULL, NULL, NULL);
}

inline ns3__AbstractRequestType * soap_new_req_ns3__AbstractRequestType(
	struct soap *soap,
	const std::string& Version)
{
	ns3__AbstractRequestType *_p = soap_new_ns3__AbstractRequestType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__AbstractRequestType::Version = Version;
	}
	return _p;
}

inline ns3__AbstractRequestType * soap_new_set_ns3__AbstractRequestType(
	struct soap *soap,
	const std::vector<enum ns3__DetailLevelCodeType> & DetailLevel,
	std::string *ErrorLanguage,
	const std::string& Version,
	char *__any)
{
	ns3__AbstractRequestType *_p = soap_new_ns3__AbstractRequestType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__AbstractRequestType::DetailLevel = DetailLevel;
		_p->ns3__AbstractRequestType::ErrorLanguage = ErrorLanguage;
		_p->ns3__AbstractRequestType::Version = Version;
		_p->ns3__AbstractRequestType::__any = __any;
	}
	return _p;
}

inline int soap_write_ns3__AbstractRequestType(struct soap *soap, ns3__AbstractRequestType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:AbstractRequestType", p->soap_type() == SOAP_TYPE_ns3__AbstractRequestType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__AbstractRequestType(struct soap *soap, const char *URL, ns3__AbstractRequestType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:AbstractRequestType", p->soap_type() == SOAP_TYPE_ns3__AbstractRequestType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__AbstractRequestType(struct soap *soap, const char *URL, ns3__AbstractRequestType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:AbstractRequestType", p->soap_type() == SOAP_TYPE_ns3__AbstractRequestType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__AbstractRequestType * SOAP_FMAC4 soap_get_ns3__AbstractRequestType(struct soap*, ns3__AbstractRequestType *, const char*, const char*);

inline int soap_read_ns3__AbstractRequestType(struct soap *soap, ns3__AbstractRequestType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns3__AbstractRequestType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__AbstractRequestType(struct soap *soap, const char *URL, ns3__AbstractRequestType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__AbstractRequestType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__AbstractRequestType(struct soap *soap, ns3__AbstractRequestType *p)
{
	if (soap_read_ns3__AbstractRequestType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__FaultDetailsType_DEFINED
#define SOAP_TYPE_ns3__FaultDetailsType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__FaultDetailsType(struct soap*, const char*, int, const ns3__FaultDetailsType *, const char*);
SOAP_FMAC3 ns3__FaultDetailsType * SOAP_FMAC4 soap_in_ns3__FaultDetailsType(struct soap*, const char*, ns3__FaultDetailsType *, const char*);
SOAP_FMAC1 ns3__FaultDetailsType * SOAP_FMAC2 soap_instantiate_ns3__FaultDetailsType(struct soap*, int, const char*, const char*, size_t*);

inline ns3__FaultDetailsType * soap_new_ns3__FaultDetailsType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__FaultDetailsType(soap, n, NULL, NULL, NULL);
}

inline ns3__FaultDetailsType * soap_new_req_ns3__FaultDetailsType(
	struct soap *soap,
	const std::string& ErrorCode,
	const std::string& Severity)
{
	ns3__FaultDetailsType *_p = soap_new_ns3__FaultDetailsType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__FaultDetailsType::ErrorCode = ErrorCode;
		_p->ns3__FaultDetailsType::Severity = Severity;
	}
	return _p;
}

inline ns3__FaultDetailsType * soap_new_set_ns3__FaultDetailsType(
	struct soap *soap,
	const std::string& ErrorCode,
	const std::string& Severity,
	std::string *DetailedMessage)
{
	ns3__FaultDetailsType *_p = soap_new_ns3__FaultDetailsType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__FaultDetailsType::ErrorCode = ErrorCode;
		_p->ns3__FaultDetailsType::Severity = Severity;
		_p->ns3__FaultDetailsType::DetailedMessage = DetailedMessage;
	}
	return _p;
}

inline int soap_write_ns3__FaultDetailsType(struct soap *soap, ns3__FaultDetailsType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:FaultDetailsType", p->soap_type() == SOAP_TYPE_ns3__FaultDetailsType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__FaultDetailsType(struct soap *soap, const char *URL, ns3__FaultDetailsType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:FaultDetailsType", p->soap_type() == SOAP_TYPE_ns3__FaultDetailsType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__FaultDetailsType(struct soap *soap, const char *URL, ns3__FaultDetailsType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:FaultDetailsType", p->soap_type() == SOAP_TYPE_ns3__FaultDetailsType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__FaultDetailsType * SOAP_FMAC4 soap_get_ns3__FaultDetailsType(struct soap*, ns3__FaultDetailsType *, const char*, const char*);

inline int soap_read_ns3__FaultDetailsType(struct soap *soap, ns3__FaultDetailsType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns3__FaultDetailsType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__FaultDetailsType(struct soap *soap, const char *URL, ns3__FaultDetailsType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__FaultDetailsType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__FaultDetailsType(struct soap *soap, ns3__FaultDetailsType *p)
{
	if (soap_read_ns3__FaultDetailsType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__ErrorType_DEFINED
#define SOAP_TYPE_ns3__ErrorType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__ErrorType(struct soap*, const char*, int, const ns3__ErrorType *, const char*);
SOAP_FMAC3 ns3__ErrorType * SOAP_FMAC4 soap_in_ns3__ErrorType(struct soap*, const char*, ns3__ErrorType *, const char*);
SOAP_FMAC1 ns3__ErrorType * SOAP_FMAC2 soap_instantiate_ns3__ErrorType(struct soap*, int, const char*, const char*, size_t*);

inline ns3__ErrorType * soap_new_ns3__ErrorType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__ErrorType(soap, n, NULL, NULL, NULL);
}

inline ns3__ErrorType * soap_new_req_ns3__ErrorType(
	struct soap *soap,
	const std::string& ShortMessage,
	const std::string& ErrorCode,
	enum ns3__SeverityCodeType SeverityCode)
{
	ns3__ErrorType *_p = soap_new_ns3__ErrorType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__ErrorType::ShortMessage = ShortMessage;
		_p->ns3__ErrorType::ErrorCode = ErrorCode;
		_p->ns3__ErrorType::SeverityCode = SeverityCode;
	}
	return _p;
}

inline ns3__ErrorType * soap_new_set_ns3__ErrorType(
	struct soap *soap,
	const std::string& ShortMessage,
	std::string *LongMessage,
	const std::string& ErrorCode,
	enum ns3__SeverityCodeType SeverityCode,
	const std::vector<ns3__ErrorParameterType *> & ErrorParameters)
{
	ns3__ErrorType *_p = soap_new_ns3__ErrorType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__ErrorType::ShortMessage = ShortMessage;
		_p->ns3__ErrorType::LongMessage = LongMessage;
		_p->ns3__ErrorType::ErrorCode = ErrorCode;
		_p->ns3__ErrorType::SeverityCode = SeverityCode;
		_p->ns3__ErrorType::ErrorParameters = ErrorParameters;
	}
	return _p;
}

inline int soap_write_ns3__ErrorType(struct soap *soap, ns3__ErrorType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:ErrorType", p->soap_type() == SOAP_TYPE_ns3__ErrorType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__ErrorType(struct soap *soap, const char *URL, ns3__ErrorType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:ErrorType", p->soap_type() == SOAP_TYPE_ns3__ErrorType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__ErrorType(struct soap *soap, const char *URL, ns3__ErrorType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:ErrorType", p->soap_type() == SOAP_TYPE_ns3__ErrorType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__ErrorType * SOAP_FMAC4 soap_get_ns3__ErrorType(struct soap*, ns3__ErrorType *, const char*, const char*);

inline int soap_read_ns3__ErrorType(struct soap *soap, ns3__ErrorType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns3__ErrorType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__ErrorType(struct soap *soap, const char *URL, ns3__ErrorType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__ErrorType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__ErrorType(struct soap *soap, ns3__ErrorType *p)
{
	if (soap_read_ns3__ErrorType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__ErrorParameterType_DEFINED
#define SOAP_TYPE_ns3__ErrorParameterType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__ErrorParameterType(struct soap*, const char*, int, const ns3__ErrorParameterType *, const char*);
SOAP_FMAC3 ns3__ErrorParameterType * SOAP_FMAC4 soap_in_ns3__ErrorParameterType(struct soap*, const char*, ns3__ErrorParameterType *, const char*);
SOAP_FMAC1 ns3__ErrorParameterType * SOAP_FMAC2 soap_instantiate_ns3__ErrorParameterType(struct soap*, int, const char*, const char*, size_t*);

inline ns3__ErrorParameterType * soap_new_ns3__ErrorParameterType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__ErrorParameterType(soap, n, NULL, NULL, NULL);
}

inline ns3__ErrorParameterType * soap_new_req_ns3__ErrorParameterType(
	struct soap *soap,
	const std::string& Value)
{
	ns3__ErrorParameterType *_p = soap_new_ns3__ErrorParameterType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__ErrorParameterType::Value = Value;
	}
	return _p;
}

inline ns3__ErrorParameterType * soap_new_set_ns3__ErrorParameterType(
	struct soap *soap,
	const std::string& Value,
	std::string *ParamID)
{
	ns3__ErrorParameterType *_p = soap_new_ns3__ErrorParameterType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__ErrorParameterType::Value = Value;
		_p->ns3__ErrorParameterType::ParamID = ParamID;
	}
	return _p;
}

inline int soap_write_ns3__ErrorParameterType(struct soap *soap, ns3__ErrorParameterType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:ErrorParameterType", p->soap_type() == SOAP_TYPE_ns3__ErrorParameterType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__ErrorParameterType(struct soap *soap, const char *URL, ns3__ErrorParameterType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:ErrorParameterType", p->soap_type() == SOAP_TYPE_ns3__ErrorParameterType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__ErrorParameterType(struct soap *soap, const char *URL, ns3__ErrorParameterType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:ErrorParameterType", p->soap_type() == SOAP_TYPE_ns3__ErrorParameterType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__ErrorParameterType * SOAP_FMAC4 soap_get_ns3__ErrorParameterType(struct soap*, ns3__ErrorParameterType *, const char*, const char*);

inline int soap_read_ns3__ErrorParameterType(struct soap *soap, ns3__ErrorParameterType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns3__ErrorParameterType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__ErrorParameterType(struct soap *soap, const char *URL, ns3__ErrorParameterType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__ErrorParameterType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__ErrorParameterType(struct soap *soap, ns3__ErrorParameterType *p)
{
	if (soap_read_ns3__ErrorParameterType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__PaginationResultType_DEFINED
#define SOAP_TYPE_ns3__PaginationResultType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__PaginationResultType(struct soap*, const char*, int, const ns3__PaginationResultType *, const char*);
SOAP_FMAC3 ns3__PaginationResultType * SOAP_FMAC4 soap_in_ns3__PaginationResultType(struct soap*, const char*, ns3__PaginationResultType *, const char*);
SOAP_FMAC1 ns3__PaginationResultType * SOAP_FMAC2 soap_instantiate_ns3__PaginationResultType(struct soap*, int, const char*, const char*, size_t*);

inline ns3__PaginationResultType * soap_new_ns3__PaginationResultType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__PaginationResultType(soap, n, NULL, NULL, NULL);
}

inline ns3__PaginationResultType * soap_new_req_ns3__PaginationResultType(
	struct soap *soap)
{
	ns3__PaginationResultType *_p = soap_new_ns3__PaginationResultType(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns3__PaginationResultType * soap_new_set_ns3__PaginationResultType(
	struct soap *soap,
	int *TotalNumberOfPages,
	int *TotalNumberOfEntries)
{
	ns3__PaginationResultType *_p = soap_new_ns3__PaginationResultType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__PaginationResultType::TotalNumberOfPages = TotalNumberOfPages;
		_p->ns3__PaginationResultType::TotalNumberOfEntries = TotalNumberOfEntries;
	}
	return _p;
}

inline int soap_write_ns3__PaginationResultType(struct soap *soap, ns3__PaginationResultType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:PaginationResultType", p->soap_type() == SOAP_TYPE_ns3__PaginationResultType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__PaginationResultType(struct soap *soap, const char *URL, ns3__PaginationResultType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:PaginationResultType", p->soap_type() == SOAP_TYPE_ns3__PaginationResultType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__PaginationResultType(struct soap *soap, const char *URL, ns3__PaginationResultType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:PaginationResultType", p->soap_type() == SOAP_TYPE_ns3__PaginationResultType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__PaginationResultType * SOAP_FMAC4 soap_get_ns3__PaginationResultType(struct soap*, ns3__PaginationResultType *, const char*, const char*);

inline int soap_read_ns3__PaginationResultType(struct soap *soap, ns3__PaginationResultType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns3__PaginationResultType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__PaginationResultType(struct soap *soap, const char *URL, ns3__PaginationResultType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__PaginationResultType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__PaginationResultType(struct soap *soap, ns3__PaginationResultType *p)
{
	if (soap_read_ns3__PaginationResultType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__ModifiedFieldType_DEFINED
#define SOAP_TYPE_ns3__ModifiedFieldType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__ModifiedFieldType(struct soap*, const char*, int, const ns3__ModifiedFieldType *, const char*);
SOAP_FMAC3 ns3__ModifiedFieldType * SOAP_FMAC4 soap_in_ns3__ModifiedFieldType(struct soap*, const char*, ns3__ModifiedFieldType *, const char*);
SOAP_FMAC1 ns3__ModifiedFieldType * SOAP_FMAC2 soap_instantiate_ns3__ModifiedFieldType(struct soap*, int, const char*, const char*, size_t*);

inline ns3__ModifiedFieldType * soap_new_ns3__ModifiedFieldType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__ModifiedFieldType(soap, n, NULL, NULL, NULL);
}

inline ns3__ModifiedFieldType * soap_new_req_ns3__ModifiedFieldType(
	struct soap *soap)
{
	ns3__ModifiedFieldType *_p = soap_new_ns3__ModifiedFieldType(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns3__ModifiedFieldType * soap_new_set_ns3__ModifiedFieldType(
	struct soap *soap,
	std::string *Field,
	enum ns3__ModifyCodeType *ModifyType)
{
	ns3__ModifiedFieldType *_p = soap_new_ns3__ModifiedFieldType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__ModifiedFieldType::Field = Field;
		_p->ns3__ModifiedFieldType::ModifyType = ModifyType;
	}
	return _p;
}

inline int soap_write_ns3__ModifiedFieldType(struct soap *soap, ns3__ModifiedFieldType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:ModifiedFieldType", p->soap_type() == SOAP_TYPE_ns3__ModifiedFieldType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__ModifiedFieldType(struct soap *soap, const char *URL, ns3__ModifiedFieldType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:ModifiedFieldType", p->soap_type() == SOAP_TYPE_ns3__ModifiedFieldType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__ModifiedFieldType(struct soap *soap, const char *URL, ns3__ModifiedFieldType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:ModifiedFieldType", p->soap_type() == SOAP_TYPE_ns3__ModifiedFieldType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__ModifiedFieldType * SOAP_FMAC4 soap_get_ns3__ModifiedFieldType(struct soap*, ns3__ModifiedFieldType *, const char*, const char*);

inline int soap_read_ns3__ModifiedFieldType(struct soap *soap, ns3__ModifiedFieldType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns3__ModifiedFieldType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__ModifiedFieldType(struct soap *soap, const char *URL, ns3__ModifiedFieldType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__ModifiedFieldType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__ModifiedFieldType(struct soap *soap, ns3__ModifiedFieldType *p)
{
	if (soap_read_ns3__ModifiedFieldType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__PaginationType_DEFINED
#define SOAP_TYPE_ns3__PaginationType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__PaginationType(struct soap*, const char*, int, const ns3__PaginationType *, const char*);
SOAP_FMAC3 ns3__PaginationType * SOAP_FMAC4 soap_in_ns3__PaginationType(struct soap*, const char*, ns3__PaginationType *, const char*);
SOAP_FMAC1 ns3__PaginationType * SOAP_FMAC2 soap_instantiate_ns3__PaginationType(struct soap*, int, const char*, const char*, size_t*);

inline ns3__PaginationType * soap_new_ns3__PaginationType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__PaginationType(soap, n, NULL, NULL, NULL);
}

inline ns3__PaginationType * soap_new_req_ns3__PaginationType(
	struct soap *soap)
{
	ns3__PaginationType *_p = soap_new_ns3__PaginationType(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns3__PaginationType * soap_new_set_ns3__PaginationType(
	struct soap *soap,
	int *EntriesPerPage,
	int *PageNumber)
{
	ns3__PaginationType *_p = soap_new_ns3__PaginationType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__PaginationType::EntriesPerPage = EntriesPerPage;
		_p->ns3__PaginationType::PageNumber = PageNumber;
	}
	return _p;
}

inline int soap_write_ns3__PaginationType(struct soap *soap, ns3__PaginationType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:PaginationType", p->soap_type() == SOAP_TYPE_ns3__PaginationType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__PaginationType(struct soap *soap, const char *URL, ns3__PaginationType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:PaginationType", p->soap_type() == SOAP_TYPE_ns3__PaginationType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__PaginationType(struct soap *soap, const char *URL, ns3__PaginationType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:PaginationType", p->soap_type() == SOAP_TYPE_ns3__PaginationType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__PaginationType * SOAP_FMAC4 soap_get_ns3__PaginationType(struct soap*, ns3__PaginationType *, const char*, const char*);

inline int soap_read_ns3__PaginationType(struct soap *soap, ns3__PaginationType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns3__PaginationType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__PaginationType(struct soap *soap, const char *URL, ns3__PaginationType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__PaginationType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__PaginationType(struct soap *soap, ns3__PaginationType *p)
{
	if (soap_read_ns3__PaginationType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__CategoryArrayType_DEFINED
#define SOAP_TYPE_ns3__CategoryArrayType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__CategoryArrayType(struct soap*, const char*, int, const ns3__CategoryArrayType *, const char*);
SOAP_FMAC3 ns3__CategoryArrayType * SOAP_FMAC4 soap_in_ns3__CategoryArrayType(struct soap*, const char*, ns3__CategoryArrayType *, const char*);
SOAP_FMAC1 ns3__CategoryArrayType * SOAP_FMAC2 soap_instantiate_ns3__CategoryArrayType(struct soap*, int, const char*, const char*, size_t*);

inline ns3__CategoryArrayType * soap_new_ns3__CategoryArrayType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__CategoryArrayType(soap, n, NULL, NULL, NULL);
}

inline ns3__CategoryArrayType * soap_new_req_ns3__CategoryArrayType(
	struct soap *soap)
{
	ns3__CategoryArrayType *_p = soap_new_ns3__CategoryArrayType(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns3__CategoryArrayType * soap_new_set_ns3__CategoryArrayType(
	struct soap *soap,
	const std::vector<ns3__CategoryType *> & Category)
{
	ns3__CategoryArrayType *_p = soap_new_ns3__CategoryArrayType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__CategoryArrayType::Category = Category;
	}
	return _p;
}

inline int soap_write_ns3__CategoryArrayType(struct soap *soap, ns3__CategoryArrayType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:CategoryArrayType", p->soap_type() == SOAP_TYPE_ns3__CategoryArrayType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__CategoryArrayType(struct soap *soap, const char *URL, ns3__CategoryArrayType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:CategoryArrayType", p->soap_type() == SOAP_TYPE_ns3__CategoryArrayType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__CategoryArrayType(struct soap *soap, const char *URL, ns3__CategoryArrayType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:CategoryArrayType", p->soap_type() == SOAP_TYPE_ns3__CategoryArrayType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__CategoryArrayType * SOAP_FMAC4 soap_get_ns3__CategoryArrayType(struct soap*, ns3__CategoryArrayType *, const char*, const char*);

inline int soap_read_ns3__CategoryArrayType(struct soap *soap, ns3__CategoryArrayType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns3__CategoryArrayType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__CategoryArrayType(struct soap *soap, const char *URL, ns3__CategoryArrayType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__CategoryArrayType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__CategoryArrayType(struct soap *soap, ns3__CategoryArrayType *p)
{
	if (soap_read_ns3__CategoryArrayType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__ItemArrayType_DEFINED
#define SOAP_TYPE_ns3__ItemArrayType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__ItemArrayType(struct soap*, const char*, int, const ns3__ItemArrayType *, const char*);
SOAP_FMAC3 ns3__ItemArrayType * SOAP_FMAC4 soap_in_ns3__ItemArrayType(struct soap*, const char*, ns3__ItemArrayType *, const char*);
SOAP_FMAC1 ns3__ItemArrayType * SOAP_FMAC2 soap_instantiate_ns3__ItemArrayType(struct soap*, int, const char*, const char*, size_t*);

inline ns3__ItemArrayType * soap_new_ns3__ItemArrayType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__ItemArrayType(soap, n, NULL, NULL, NULL);
}

inline ns3__ItemArrayType * soap_new_req_ns3__ItemArrayType(
	struct soap *soap)
{
	ns3__ItemArrayType *_p = soap_new_ns3__ItemArrayType(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns3__ItemArrayType * soap_new_set_ns3__ItemArrayType(
	struct soap *soap,
	const std::vector<ns3__ItemType *> & Item)
{
	ns3__ItemArrayType *_p = soap_new_ns3__ItemArrayType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__ItemArrayType::Item = Item;
	}
	return _p;
}

inline int soap_write_ns3__ItemArrayType(struct soap *soap, ns3__ItemArrayType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:ItemArrayType", p->soap_type() == SOAP_TYPE_ns3__ItemArrayType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__ItemArrayType(struct soap *soap, const char *URL, ns3__ItemArrayType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:ItemArrayType", p->soap_type() == SOAP_TYPE_ns3__ItemArrayType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__ItemArrayType(struct soap *soap, const char *URL, ns3__ItemArrayType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:ItemArrayType", p->soap_type() == SOAP_TYPE_ns3__ItemArrayType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__ItemArrayType * SOAP_FMAC4 soap_get_ns3__ItemArrayType(struct soap*, ns3__ItemArrayType *, const char*, const char*);

inline int soap_read_ns3__ItemArrayType(struct soap *soap, ns3__ItemArrayType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns3__ItemArrayType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__ItemArrayType(struct soap *soap, const char *URL, ns3__ItemArrayType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__ItemArrayType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__ItemArrayType(struct soap *soap, ns3__ItemArrayType *p)
{
	if (soap_read_ns3__ItemArrayType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__SchedulingInfoType_DEFINED
#define SOAP_TYPE_ns3__SchedulingInfoType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__SchedulingInfoType(struct soap*, const char*, int, const ns3__SchedulingInfoType *, const char*);
SOAP_FMAC3 ns3__SchedulingInfoType * SOAP_FMAC4 soap_in_ns3__SchedulingInfoType(struct soap*, const char*, ns3__SchedulingInfoType *, const char*);
SOAP_FMAC1 ns3__SchedulingInfoType * SOAP_FMAC2 soap_instantiate_ns3__SchedulingInfoType(struct soap*, int, const char*, const char*, size_t*);

inline ns3__SchedulingInfoType * soap_new_ns3__SchedulingInfoType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__SchedulingInfoType(soap, n, NULL, NULL, NULL);
}

inline ns3__SchedulingInfoType * soap_new_req_ns3__SchedulingInfoType(
	struct soap *soap)
{
	ns3__SchedulingInfoType *_p = soap_new_ns3__SchedulingInfoType(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns3__SchedulingInfoType * soap_new_set_ns3__SchedulingInfoType(
	struct soap *soap,
	int *MaxScheduledMinutes,
	int *MinScheduledMinutes,
	int *MaxScheduledItems)
{
	ns3__SchedulingInfoType *_p = soap_new_ns3__SchedulingInfoType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__SchedulingInfoType::MaxScheduledMinutes = MaxScheduledMinutes;
		_p->ns3__SchedulingInfoType::MinScheduledMinutes = MinScheduledMinutes;
		_p->ns3__SchedulingInfoType::MaxScheduledItems = MaxScheduledItems;
	}
	return _p;
}

inline int soap_write_ns3__SchedulingInfoType(struct soap *soap, ns3__SchedulingInfoType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:SchedulingInfoType", p->soap_type() == SOAP_TYPE_ns3__SchedulingInfoType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__SchedulingInfoType(struct soap *soap, const char *URL, ns3__SchedulingInfoType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:SchedulingInfoType", p->soap_type() == SOAP_TYPE_ns3__SchedulingInfoType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__SchedulingInfoType(struct soap *soap, const char *URL, ns3__SchedulingInfoType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:SchedulingInfoType", p->soap_type() == SOAP_TYPE_ns3__SchedulingInfoType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__SchedulingInfoType * SOAP_FMAC4 soap_get_ns3__SchedulingInfoType(struct soap*, ns3__SchedulingInfoType *, const char*, const char*);

inline int soap_read_ns3__SchedulingInfoType(struct soap *soap, ns3__SchedulingInfoType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns3__SchedulingInfoType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__SchedulingInfoType(struct soap *soap, const char *URL, ns3__SchedulingInfoType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__SchedulingInfoType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__SchedulingInfoType(struct soap *soap, ns3__SchedulingInfoType *p)
{
	if (soap_read_ns3__SchedulingInfoType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__VATDetailsType_DEFINED
#define SOAP_TYPE_ns3__VATDetailsType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__VATDetailsType(struct soap*, const char*, int, const ns3__VATDetailsType *, const char*);
SOAP_FMAC3 ns3__VATDetailsType * SOAP_FMAC4 soap_in_ns3__VATDetailsType(struct soap*, const char*, ns3__VATDetailsType *, const char*);
SOAP_FMAC1 ns3__VATDetailsType * SOAP_FMAC2 soap_instantiate_ns3__VATDetailsType(struct soap*, int, const char*, const char*, size_t*);

inline ns3__VATDetailsType * soap_new_ns3__VATDetailsType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__VATDetailsType(soap, n, NULL, NULL, NULL);
}

inline ns3__VATDetailsType * soap_new_req_ns3__VATDetailsType(
	struct soap *soap)
{
	ns3__VATDetailsType *_p = soap_new_ns3__VATDetailsType(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns3__VATDetailsType * soap_new_set_ns3__VATDetailsType(
	struct soap *soap,
	bool *BusinessSeller,
	bool *RestrictedToBusiness,
	float *VATPercent)
{
	ns3__VATDetailsType *_p = soap_new_ns3__VATDetailsType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__VATDetailsType::BusinessSeller = BusinessSeller;
		_p->ns3__VATDetailsType::RestrictedToBusiness = RestrictedToBusiness;
		_p->ns3__VATDetailsType::VATPercent = VATPercent;
	}
	return _p;
}

inline int soap_write_ns3__VATDetailsType(struct soap *soap, ns3__VATDetailsType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:VATDetailsType", p->soap_type() == SOAP_TYPE_ns3__VATDetailsType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__VATDetailsType(struct soap *soap, const char *URL, ns3__VATDetailsType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:VATDetailsType", p->soap_type() == SOAP_TYPE_ns3__VATDetailsType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__VATDetailsType(struct soap *soap, const char *URL, ns3__VATDetailsType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:VATDetailsType", p->soap_type() == SOAP_TYPE_ns3__VATDetailsType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__VATDetailsType * SOAP_FMAC4 soap_get_ns3__VATDetailsType(struct soap*, ns3__VATDetailsType *, const char*, const char*);

inline int soap_read_ns3__VATDetailsType(struct soap *soap, ns3__VATDetailsType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns3__VATDetailsType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__VATDetailsType(struct soap *soap, const char *URL, ns3__VATDetailsType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__VATDetailsType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__VATDetailsType(struct soap *soap, ns3__VATDetailsType *p)
{
	if (soap_read_ns3__VATDetailsType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__UserType_DEFINED
#define SOAP_TYPE_ns3__UserType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__UserType(struct soap*, const char*, int, const ns3__UserType *, const char*);
SOAP_FMAC3 ns3__UserType * SOAP_FMAC4 soap_in_ns3__UserType(struct soap*, const char*, ns3__UserType *, const char*);
SOAP_FMAC1 ns3__UserType * SOAP_FMAC2 soap_instantiate_ns3__UserType(struct soap*, int, const char*, const char*, size_t*);

inline ns3__UserType * soap_new_ns3__UserType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__UserType(soap, n, NULL, NULL, NULL);
}

inline ns3__UserType * soap_new_req_ns3__UserType(
	struct soap *soap,
	const std::string& Email)
{
	ns3__UserType *_p = soap_new_ns3__UserType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__UserType::Email = Email;
	}
	return _p;
}

inline ns3__UserType * soap_new_set_ns3__UserType(
	struct soap *soap,
	bool *AboutMePage,
	std::string *EAISToken,
	const std::string& Email,
	int *FeedbackScore,
	bool *FeedbackPrivate,
	enum ns3__FeedbackRatingStarCodeType *FeedbackRatingStar,
	bool *IDVerified,
	bool *NewUser,
	ns3__AddressType *RegistrationAddress,
	time_t *RegistrationDate,
	enum ns3__SiteCodeType *Site,
	enum ns3__UserStatusCodeType *Status,
	std::string *UserID,
	bool *UserIDChanged,
	time_t *UserIDLastChanged,
	enum ns3__VATStatusCodeType *VATStatus,
	ns3__BuyerType *BuyerInfo,
	ns3__SellerType *SellerInfo)
{
	ns3__UserType *_p = soap_new_ns3__UserType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__UserType::AboutMePage = AboutMePage;
		_p->ns3__UserType::EAISToken = EAISToken;
		_p->ns3__UserType::Email = Email;
		_p->ns3__UserType::FeedbackScore = FeedbackScore;
		_p->ns3__UserType::FeedbackPrivate = FeedbackPrivate;
		_p->ns3__UserType::FeedbackRatingStar = FeedbackRatingStar;
		_p->ns3__UserType::IDVerified = IDVerified;
		_p->ns3__UserType::NewUser = NewUser;
		_p->ns3__UserType::RegistrationAddress = RegistrationAddress;
		_p->ns3__UserType::RegistrationDate = RegistrationDate;
		_p->ns3__UserType::Site = Site;
		_p->ns3__UserType::Status = Status;
		_p->ns3__UserType::UserID = UserID;
		_p->ns3__UserType::UserIDChanged = UserIDChanged;
		_p->ns3__UserType::UserIDLastChanged = UserIDLastChanged;
		_p->ns3__UserType::VATStatus = VATStatus;
		_p->ns3__UserType::BuyerInfo = BuyerInfo;
		_p->ns3__UserType::SellerInfo = SellerInfo;
	}
	return _p;
}

inline int soap_write_ns3__UserType(struct soap *soap, ns3__UserType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:UserType", p->soap_type() == SOAP_TYPE_ns3__UserType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__UserType(struct soap *soap, const char *URL, ns3__UserType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:UserType", p->soap_type() == SOAP_TYPE_ns3__UserType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__UserType(struct soap *soap, const char *URL, ns3__UserType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:UserType", p->soap_type() == SOAP_TYPE_ns3__UserType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__UserType * SOAP_FMAC4 soap_get_ns3__UserType(struct soap*, ns3__UserType *, const char*, const char*);

inline int soap_read_ns3__UserType(struct soap *soap, ns3__UserType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns3__UserType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__UserType(struct soap *soap, const char *URL, ns3__UserType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__UserType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__UserType(struct soap *soap, ns3__UserType *p)
{
	if (soap_read_ns3__UserType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__TransactionStatusType_DEFINED
#define SOAP_TYPE_ns3__TransactionStatusType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__TransactionStatusType(struct soap*, const char*, int, const ns3__TransactionStatusType *, const char*);
SOAP_FMAC3 ns3__TransactionStatusType * SOAP_FMAC4 soap_in_ns3__TransactionStatusType(struct soap*, const char*, ns3__TransactionStatusType *, const char*);
SOAP_FMAC1 ns3__TransactionStatusType * SOAP_FMAC2 soap_instantiate_ns3__TransactionStatusType(struct soap*, int, const char*, const char*, size_t*);

inline ns3__TransactionStatusType * soap_new_ns3__TransactionStatusType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__TransactionStatusType(soap, n, NULL, NULL, NULL);
}

inline ns3__TransactionStatusType * soap_new_req_ns3__TransactionStatusType(
	struct soap *soap)
{
	ns3__TransactionStatusType *_p = soap_new_ns3__TransactionStatusType(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns3__TransactionStatusType * soap_new_set_ns3__TransactionStatusType(
	struct soap *soap,
	int *eBayPaymentStatus,
	int *IncompleteState,
	time_t *LastTimeModified,
	enum ns3__BuyerPaymentMethodCodeType *PaymentMethodUsed,
	int *StatusIs)
{
	ns3__TransactionStatusType *_p = soap_new_ns3__TransactionStatusType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__TransactionStatusType::eBayPaymentStatus = eBayPaymentStatus;
		_p->ns3__TransactionStatusType::IncompleteState = IncompleteState;
		_p->ns3__TransactionStatusType::LastTimeModified = LastTimeModified;
		_p->ns3__TransactionStatusType::PaymentMethodUsed = PaymentMethodUsed;
		_p->ns3__TransactionStatusType::StatusIs = StatusIs;
	}
	return _p;
}

inline int soap_write_ns3__TransactionStatusType(struct soap *soap, ns3__TransactionStatusType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:TransactionStatusType", p->soap_type() == SOAP_TYPE_ns3__TransactionStatusType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__TransactionStatusType(struct soap *soap, const char *URL, ns3__TransactionStatusType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:TransactionStatusType", p->soap_type() == SOAP_TYPE_ns3__TransactionStatusType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__TransactionStatusType(struct soap *soap, const char *URL, ns3__TransactionStatusType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:TransactionStatusType", p->soap_type() == SOAP_TYPE_ns3__TransactionStatusType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__TransactionStatusType * SOAP_FMAC4 soap_get_ns3__TransactionStatusType(struct soap*, ns3__TransactionStatusType *, const char*, const char*);

inline int soap_read_ns3__TransactionStatusType(struct soap *soap, ns3__TransactionStatusType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns3__TransactionStatusType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__TransactionStatusType(struct soap *soap, const char *URL, ns3__TransactionStatusType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__TransactionStatusType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__TransactionStatusType(struct soap *soap, ns3__TransactionStatusType *p)
{
	if (soap_read_ns3__TransactionStatusType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__PaymentType_DEFINED
#define SOAP_TYPE_ns3__PaymentType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__PaymentType(struct soap*, const char*, int, const ns3__PaymentType *, const char*);
SOAP_FMAC3 ns3__PaymentType * SOAP_FMAC4 soap_in_ns3__PaymentType(struct soap*, const char*, ns3__PaymentType *, const char*);
SOAP_FMAC1 ns3__PaymentType * SOAP_FMAC2 soap_instantiate_ns3__PaymentType(struct soap*, int, const char*, const char*, size_t*);

inline ns3__PaymentType * soap_new_ns3__PaymentType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__PaymentType(soap, n, NULL, NULL, NULL);
}

inline ns3__PaymentType * soap_new_req_ns3__PaymentType(
	struct soap *soap,
	ns3__PaymentMeansType *PaymentMeans)
{
	ns3__PaymentType *_p = soap_new_ns3__PaymentType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__PaymentType::PaymentMeans = PaymentMeans;
	}
	return _p;
}

inline ns3__PaymentType * soap_new_set_ns3__PaymentType(
	struct soap *soap,
	ns3__PaymentMeansType *PaymentMeans)
{
	ns3__PaymentType *_p = soap_new_ns3__PaymentType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__PaymentType::PaymentMeans = PaymentMeans;
	}
	return _p;
}

inline int soap_write_ns3__PaymentType(struct soap *soap, ns3__PaymentType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:PaymentType", p->soap_type() == SOAP_TYPE_ns3__PaymentType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__PaymentType(struct soap *soap, const char *URL, ns3__PaymentType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:PaymentType", p->soap_type() == SOAP_TYPE_ns3__PaymentType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__PaymentType(struct soap *soap, const char *URL, ns3__PaymentType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:PaymentType", p->soap_type() == SOAP_TYPE_ns3__PaymentType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__PaymentType * SOAP_FMAC4 soap_get_ns3__PaymentType(struct soap*, ns3__PaymentType *, const char*, const char*);

inline int soap_read_ns3__PaymentType(struct soap *soap, ns3__PaymentType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns3__PaymentType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__PaymentType(struct soap *soap, const char *URL, ns3__PaymentType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__PaymentType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__PaymentType(struct soap *soap, ns3__PaymentType *p)
{
	if (soap_read_ns3__PaymentType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__PaymentMeansType_DEFINED
#define SOAP_TYPE_ns3__PaymentMeansType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__PaymentMeansType(struct soap*, const char*, int, const ns3__PaymentMeansType *, const char*);
SOAP_FMAC3 ns3__PaymentMeansType * SOAP_FMAC4 soap_in_ns3__PaymentMeansType(struct soap*, const char*, ns3__PaymentMeansType *, const char*);
SOAP_FMAC1 ns3__PaymentMeansType * SOAP_FMAC2 soap_instantiate_ns3__PaymentMeansType(struct soap*, int, const char*, const char*, size_t*);

inline ns3__PaymentMeansType * soap_new_ns3__PaymentMeansType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__PaymentMeansType(soap, n, NULL, NULL, NULL);
}

inline ns3__PaymentMeansType * soap_new_req_ns3__PaymentMeansType(
	struct soap *soap,
	enum ns3__SellerPaymentMethodCodeType TypeCodeID)
{
	ns3__PaymentMeansType *_p = soap_new_ns3__PaymentMeansType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__PaymentMeansType::TypeCodeID = TypeCodeID;
	}
	return _p;
}

inline ns3__PaymentMeansType * soap_new_set_ns3__PaymentMeansType(
	struct soap *soap,
	enum ns3__SellerPaymentMethodCodeType TypeCodeID)
{
	ns3__PaymentMeansType *_p = soap_new_ns3__PaymentMeansType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__PaymentMeansType::TypeCodeID = TypeCodeID;
	}
	return _p;
}

inline int soap_write_ns3__PaymentMeansType(struct soap *soap, ns3__PaymentMeansType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:PaymentMeansType", p->soap_type() == SOAP_TYPE_ns3__PaymentMeansType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__PaymentMeansType(struct soap *soap, const char *URL, ns3__PaymentMeansType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:PaymentMeansType", p->soap_type() == SOAP_TYPE_ns3__PaymentMeansType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__PaymentMeansType(struct soap *soap, const char *URL, ns3__PaymentMeansType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:PaymentMeansType", p->soap_type() == SOAP_TYPE_ns3__PaymentMeansType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__PaymentMeansType * SOAP_FMAC4 soap_get_ns3__PaymentMeansType(struct soap*, ns3__PaymentMeansType *, const char*, const char*);

inline int soap_read_ns3__PaymentMeansType(struct soap *soap, ns3__PaymentMeansType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns3__PaymentMeansType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__PaymentMeansType(struct soap *soap, const char *URL, ns3__PaymentMeansType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__PaymentMeansType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__PaymentMeansType(struct soap *soap, ns3__PaymentMeansType *p)
{
	if (soap_read_ns3__PaymentMeansType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__TransactionType_DEFINED
#define SOAP_TYPE_ns3__TransactionType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__TransactionType(struct soap*, const char*, int, const ns3__TransactionType *, const char*);
SOAP_FMAC3 ns3__TransactionType * SOAP_FMAC4 soap_in_ns3__TransactionType(struct soap*, const char*, ns3__TransactionType *, const char*);
SOAP_FMAC1 ns3__TransactionType * SOAP_FMAC2 soap_instantiate_ns3__TransactionType(struct soap*, int, const char*, const char*, size_t*);

inline ns3__TransactionType * soap_new_ns3__TransactionType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__TransactionType(soap, n, NULL, NULL, NULL);
}

inline ns3__TransactionType * soap_new_req_ns3__TransactionType(
	struct soap *soap)
{
	ns3__TransactionType *_p = soap_new_ns3__TransactionType(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns3__TransactionType * soap_new_set_ns3__TransactionType(
	struct soap *soap,
	ns2__AmountType *AmountPaid,
	ns3__UserType *Buyer,
	ns3__ShippingDetailsType *ShippingDetails,
	ns2__AmountType *ConvertedAmountPaid,
	ns2__AmountType *ConvertedTransactionPrice,
	time_t *CreatedDate,
	enum ns3__DepositTypeCodeType *DepositType,
	ns3__ItemType *Item,
	int *QuantityPurchased,
	ns2__AmountType *ShippingHandlingTotal,
	ns3__TransactionStatusType *Status,
	std::string *TransactionID,
	std::string *AuthorizationID,
	ns2__AmountType *TransactionPrice,
	std::string *VATPercent)
{
	ns3__TransactionType *_p = soap_new_ns3__TransactionType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__TransactionType::AmountPaid = AmountPaid;
		_p->ns3__TransactionType::Buyer = Buyer;
		_p->ns3__TransactionType::ShippingDetails = ShippingDetails;
		_p->ns3__TransactionType::ConvertedAmountPaid = ConvertedAmountPaid;
		_p->ns3__TransactionType::ConvertedTransactionPrice = ConvertedTransactionPrice;
		_p->ns3__TransactionType::CreatedDate = CreatedDate;
		_p->ns3__TransactionType::DepositType = DepositType;
		_p->ns3__TransactionType::Item = Item;
		_p->ns3__TransactionType::QuantityPurchased = QuantityPurchased;
		_p->ns3__TransactionType::ShippingHandlingTotal = ShippingHandlingTotal;
		_p->ns3__TransactionType::Status = Status;
		_p->ns3__TransactionType::TransactionID = TransactionID;
		_p->ns3__TransactionType::AuthorizationID = AuthorizationID;
		_p->ns3__TransactionType::TransactionPrice = TransactionPrice;
		_p->ns3__TransactionType::VATPercent = VATPercent;
	}
	return _p;
}

inline int soap_write_ns3__TransactionType(struct soap *soap, ns3__TransactionType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:TransactionType", p->soap_type() == SOAP_TYPE_ns3__TransactionType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__TransactionType(struct soap *soap, const char *URL, ns3__TransactionType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:TransactionType", p->soap_type() == SOAP_TYPE_ns3__TransactionType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__TransactionType(struct soap *soap, const char *URL, ns3__TransactionType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:TransactionType", p->soap_type() == SOAP_TYPE_ns3__TransactionType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__TransactionType * SOAP_FMAC4 soap_get_ns3__TransactionType(struct soap*, ns3__TransactionType *, const char*, const char*);

inline int soap_read_ns3__TransactionType(struct soap *soap, ns3__TransactionType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns3__TransactionType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__TransactionType(struct soap *soap, const char *URL, ns3__TransactionType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__TransactionType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__TransactionType(struct soap *soap, ns3__TransactionType *p)
{
	if (soap_read_ns3__TransactionType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__TransactionsType_DEFINED
#define SOAP_TYPE_ns3__TransactionsType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__TransactionsType(struct soap*, const char*, int, const ns3__TransactionsType *, const char*);
SOAP_FMAC3 ns3__TransactionsType * SOAP_FMAC4 soap_in_ns3__TransactionsType(struct soap*, const char*, ns3__TransactionsType *, const char*);
SOAP_FMAC1 ns3__TransactionsType * SOAP_FMAC2 soap_instantiate_ns3__TransactionsType(struct soap*, int, const char*, const char*, size_t*);

inline ns3__TransactionsType * soap_new_ns3__TransactionsType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__TransactionsType(soap, n, NULL, NULL, NULL);
}

inline ns3__TransactionsType * soap_new_req_ns3__TransactionsType(
	struct soap *soap,
	const std::vector<ns3__TransactionType *> & Transaction)
{
	ns3__TransactionsType *_p = soap_new_ns3__TransactionsType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__TransactionsType::Transaction = Transaction;
	}
	return _p;
}

inline ns3__TransactionsType * soap_new_set_ns3__TransactionsType(
	struct soap *soap,
	const std::vector<ns3__TransactionType *> & Transaction)
{
	ns3__TransactionsType *_p = soap_new_ns3__TransactionsType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__TransactionsType::Transaction = Transaction;
	}
	return _p;
}

inline int soap_write_ns3__TransactionsType(struct soap *soap, ns3__TransactionsType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:TransactionsType", p->soap_type() == SOAP_TYPE_ns3__TransactionsType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__TransactionsType(struct soap *soap, const char *URL, ns3__TransactionsType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:TransactionsType", p->soap_type() == SOAP_TYPE_ns3__TransactionsType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__TransactionsType(struct soap *soap, const char *URL, ns3__TransactionsType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:TransactionsType", p->soap_type() == SOAP_TYPE_ns3__TransactionsType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__TransactionsType * SOAP_FMAC4 soap_get_ns3__TransactionsType(struct soap*, ns3__TransactionsType *, const char*, const char*);

inline int soap_read_ns3__TransactionsType(struct soap *soap, ns3__TransactionsType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns3__TransactionsType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__TransactionsType(struct soap *soap, const char *URL, ns3__TransactionsType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__TransactionsType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__TransactionsType(struct soap *soap, ns3__TransactionsType *p)
{
	if (soap_read_ns3__TransactionsType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__ItemType_DEFINED
#define SOAP_TYPE_ns3__ItemType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__ItemType(struct soap*, const char*, int, const ns3__ItemType *, const char*);
SOAP_FMAC3 ns3__ItemType * SOAP_FMAC4 soap_in_ns3__ItemType(struct soap*, const char*, ns3__ItemType *, const char*);
SOAP_FMAC1 ns3__ItemType * SOAP_FMAC2 soap_instantiate_ns3__ItemType(struct soap*, int, const char*, const char*, size_t*);

inline ns3__ItemType * soap_new_ns3__ItemType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__ItemType(soap, n, NULL, NULL, NULL);
}

inline ns3__ItemType * soap_new_req_ns3__ItemType(
	struct soap *soap)
{
	ns3__ItemType *_p = soap_new_ns3__ItemType(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns3__ItemType * soap_new_set_ns3__ItemType(
	struct soap *soap,
	std::string *ApplicationData,
	ns3__ListOfAttributeSetType *ListOfAttributeSets,
	bool *AutoPay,
	enum ns3__BuyerProtectionCodeType *BuyerProtection,
	ns2__AmountType *BuyItNowPrice,
	ns3__CharityType *Charity,
	enum ns3__CountryCodeType *Country,
	ns3__CrossPromotionsType *CrossPromotion,
	enum ns3__CurrencyCodeType *Currency,
	std::string *Description,
	enum ns3__EscrowCodeType *Escrow,
	int *GiftIcon,
	const std::vector<enum ns3__GiftServicesCodeType> & GiftServices,
	enum ns3__HitCounterCodeType *HitCounter,
	std::string *ItemID,
	ns3__ListingDetailsType *ListingDetails,
	ns3__ListingDesignerType *ListingDesigner,
	enum ns3__ListingDurationCodeType *ListingDuration,
	const std::vector<enum ns3__ListingEnhancementsCodeType> & ListingEnhancement,
	enum ns3__ListingTypeCodeType *ListingType,
	std::string *Location,
	std::string *PartnerCode,
	std::string *PartnerName,
	const std::vector<enum ns3__BuyerPaymentMethodCodeType> & PaymentMethods,
	std::string *PayPalEmailAddress,
	ns3__CategoryType *PrimaryCategory,
	bool *PrivateListing,
	int *Quantity,
	std::string *RegionID,
	bool *RelistLink,
	ns2__AmountType *ReservePrice,
	ns3__ReviseStatusType *ReviseStatus,
	time_t *ScheduleTime,
	ns3__CategoryType *SecondaryCategory,
	ns3__SiteHostedPictureType *SiteHostedPicture,
	ns3__UserType *Seller,
	ns3__SellingStatusType *SellingStatus,
	enum ns3__ShippingOptionCodeType *ShippingOption,
	ns3__ShippingDetailsType *ShippingDetails,
	const std::vector<enum ns3__ShippingRegionCodeType> & ShippingRegions,
	enum ns3__ShippingTermsCodeType *ShippingTerms,
	enum ns3__SiteCodeType *Site,
	ns2__AmountType *StartPrice,
	ns3__StorefrontType *Storefront,
	std::string *SubTitle,
	std::chrono::nanoseconds *TimeLeft,
	std::string *Title,
	std::string *UUID,
	ns3__VATDetailsType *VATDetails,
	ns3__VendorHostedPictureType *VendorHostedPicture)
{
	ns3__ItemType *_p = soap_new_ns3__ItemType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__ItemType::ApplicationData = ApplicationData;
		_p->ns3__ItemType::ListOfAttributeSets = ListOfAttributeSets;
		_p->ns3__ItemType::AutoPay = AutoPay;
		_p->ns3__ItemType::BuyerProtection = BuyerProtection;
		_p->ns3__ItemType::BuyItNowPrice = BuyItNowPrice;
		_p->ns3__ItemType::Charity = Charity;
		_p->ns3__ItemType::Country = Country;
		_p->ns3__ItemType::CrossPromotion = CrossPromotion;
		_p->ns3__ItemType::Currency = Currency;
		_p->ns3__ItemType::Description = Description;
		_p->ns3__ItemType::Escrow = Escrow;
		_p->ns3__ItemType::GiftIcon = GiftIcon;
		_p->ns3__ItemType::GiftServices = GiftServices;
		_p->ns3__ItemType::HitCounter = HitCounter;
		_p->ns3__ItemType::ItemID = ItemID;
		_p->ns3__ItemType::ListingDetails = ListingDetails;
		_p->ns3__ItemType::ListingDesigner = ListingDesigner;
		_p->ns3__ItemType::ListingDuration = ListingDuration;
		_p->ns3__ItemType::ListingEnhancement = ListingEnhancement;
		_p->ns3__ItemType::ListingType = ListingType;
		_p->ns3__ItemType::Location = Location;
		_p->ns3__ItemType::PartnerCode = PartnerCode;
		_p->ns3__ItemType::PartnerName = PartnerName;
		_p->ns3__ItemType::PaymentMethods = PaymentMethods;
		_p->ns3__ItemType::PayPalEmailAddress = PayPalEmailAddress;
		_p->ns3__ItemType::PrimaryCategory = PrimaryCategory;
		_p->ns3__ItemType::PrivateListing = PrivateListing;
		_p->ns3__ItemType::Quantity = Quantity;
		_p->ns3__ItemType::RegionID = RegionID;
		_p->ns3__ItemType::RelistLink = RelistLink;
		_p->ns3__ItemType::ReservePrice = ReservePrice;
		_p->ns3__ItemType::ReviseStatus = ReviseStatus;
		_p->ns3__ItemType::ScheduleTime = ScheduleTime;
		_p->ns3__ItemType::SecondaryCategory = SecondaryCategory;
		_p->ns3__ItemType::SiteHostedPicture = SiteHostedPicture;
		_p->ns3__ItemType::Seller = Seller;
		_p->ns3__ItemType::SellingStatus = SellingStatus;
		_p->ns3__ItemType::ShippingOption = ShippingOption;
		_p->ns3__ItemType::ShippingDetails = ShippingDetails;
		_p->ns3__ItemType::ShippingRegions = ShippingRegions;
		_p->ns3__ItemType::ShippingTerms = ShippingTerms;
		_p->ns3__ItemType::Site = Site;
		_p->ns3__ItemType::StartPrice = StartPrice;
		_p->ns3__ItemType::Storefront = Storefront;
		_p->ns3__ItemType::SubTitle = SubTitle;
		_p->ns3__ItemType::TimeLeft = TimeLeft;
		_p->ns3__ItemType::Title = Title;
		_p->ns3__ItemType::UUID = UUID;
		_p->ns3__ItemType::VATDetails = VATDetails;
		_p->ns3__ItemType::VendorHostedPicture = VendorHostedPicture;
	}
	return _p;
}

inline int soap_write_ns3__ItemType(struct soap *soap, ns3__ItemType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:ItemType", p->soap_type() == SOAP_TYPE_ns3__ItemType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__ItemType(struct soap *soap, const char *URL, ns3__ItemType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:ItemType", p->soap_type() == SOAP_TYPE_ns3__ItemType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__ItemType(struct soap *soap, const char *URL, ns3__ItemType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:ItemType", p->soap_type() == SOAP_TYPE_ns3__ItemType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__ItemType * SOAP_FMAC4 soap_get_ns3__ItemType(struct soap*, ns3__ItemType *, const char*, const char*);

inline int soap_read_ns3__ItemType(struct soap *soap, ns3__ItemType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns3__ItemType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__ItemType(struct soap *soap, const char *URL, ns3__ItemType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__ItemType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__ItemType(struct soap *soap, ns3__ItemType *p)
{
	if (soap_read_ns3__ItemType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__ListingDetailsType_DEFINED
#define SOAP_TYPE_ns3__ListingDetailsType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__ListingDetailsType(struct soap*, const char*, int, const ns3__ListingDetailsType *, const char*);
SOAP_FMAC3 ns3__ListingDetailsType * SOAP_FMAC4 soap_in_ns3__ListingDetailsType(struct soap*, const char*, ns3__ListingDetailsType *, const char*);
SOAP_FMAC1 ns3__ListingDetailsType * SOAP_FMAC2 soap_instantiate_ns3__ListingDetailsType(struct soap*, int, const char*, const char*, size_t*);

inline ns3__ListingDetailsType * soap_new_ns3__ListingDetailsType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__ListingDetailsType(soap, n, NULL, NULL, NULL);
}

inline ns3__ListingDetailsType * soap_new_req_ns3__ListingDetailsType(
	struct soap *soap)
{
	ns3__ListingDetailsType *_p = soap_new_ns3__ListingDetailsType(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns3__ListingDetailsType * soap_new_set_ns3__ListingDetailsType(
	struct soap *soap,
	bool *Adult,
	bool *BindingAuction,
	bool *CheckoutEnabled,
	ns2__AmountType *ConvertedBuyItNowPrice,
	ns2__AmountType *ConvertedStartPrice,
	ns2__AmountType *ConvertedReservePrice,
	bool *HasReservePrice,
	std::string *RegionName,
	std::string *RelistedItemID,
	std::string *SecondChanceOriginalItemID,
	time_t *StartTime,
	time_t *EndTime,
	std::string *ViewItemURL)
{
	ns3__ListingDetailsType *_p = soap_new_ns3__ListingDetailsType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__ListingDetailsType::Adult = Adult;
		_p->ns3__ListingDetailsType::BindingAuction = BindingAuction;
		_p->ns3__ListingDetailsType::CheckoutEnabled = CheckoutEnabled;
		_p->ns3__ListingDetailsType::ConvertedBuyItNowPrice = ConvertedBuyItNowPrice;
		_p->ns3__ListingDetailsType::ConvertedStartPrice = ConvertedStartPrice;
		_p->ns3__ListingDetailsType::ConvertedReservePrice = ConvertedReservePrice;
		_p->ns3__ListingDetailsType::HasReservePrice = HasReservePrice;
		_p->ns3__ListingDetailsType::RegionName = RegionName;
		_p->ns3__ListingDetailsType::RelistedItemID = RelistedItemID;
		_p->ns3__ListingDetailsType::SecondChanceOriginalItemID = SecondChanceOriginalItemID;
		_p->ns3__ListingDetailsType::StartTime = StartTime;
		_p->ns3__ListingDetailsType::EndTime = EndTime;
		_p->ns3__ListingDetailsType::ViewItemURL = ViewItemURL;
	}
	return _p;
}

inline int soap_write_ns3__ListingDetailsType(struct soap *soap, ns3__ListingDetailsType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:ListingDetailsType", p->soap_type() == SOAP_TYPE_ns3__ListingDetailsType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__ListingDetailsType(struct soap *soap, const char *URL, ns3__ListingDetailsType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:ListingDetailsType", p->soap_type() == SOAP_TYPE_ns3__ListingDetailsType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__ListingDetailsType(struct soap *soap, const char *URL, ns3__ListingDetailsType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:ListingDetailsType", p->soap_type() == SOAP_TYPE_ns3__ListingDetailsType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__ListingDetailsType * SOAP_FMAC4 soap_get_ns3__ListingDetailsType(struct soap*, ns3__ListingDetailsType *, const char*, const char*);

inline int soap_read_ns3__ListingDetailsType(struct soap *soap, ns3__ListingDetailsType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns3__ListingDetailsType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__ListingDetailsType(struct soap *soap, const char *URL, ns3__ListingDetailsType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__ListingDetailsType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__ListingDetailsType(struct soap *soap, ns3__ListingDetailsType *p)
{
	if (soap_read_ns3__ListingDetailsType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__ReviseStatusType_DEFINED
#define SOAP_TYPE_ns3__ReviseStatusType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__ReviseStatusType(struct soap*, const char*, int, const ns3__ReviseStatusType *, const char*);
SOAP_FMAC3 ns3__ReviseStatusType * SOAP_FMAC4 soap_in_ns3__ReviseStatusType(struct soap*, const char*, ns3__ReviseStatusType *, const char*);
SOAP_FMAC1 ns3__ReviseStatusType * SOAP_FMAC2 soap_instantiate_ns3__ReviseStatusType(struct soap*, int, const char*, const char*, size_t*);

inline ns3__ReviseStatusType * soap_new_ns3__ReviseStatusType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__ReviseStatusType(soap, n, NULL, NULL, NULL);
}

inline ns3__ReviseStatusType * soap_new_req_ns3__ReviseStatusType(
	struct soap *soap,
	bool ItemRevised)
{
	ns3__ReviseStatusType *_p = soap_new_ns3__ReviseStatusType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__ReviseStatusType::ItemRevised = ItemRevised;
	}
	return _p;
}

inline ns3__ReviseStatusType * soap_new_set_ns3__ReviseStatusType(
	struct soap *soap,
	bool ItemRevised,
	bool *BuyItNowAdded,
	bool *BuyItNowLowered,
	bool *ReserveLowered,
	bool *ReserveRemoved)
{
	ns3__ReviseStatusType *_p = soap_new_ns3__ReviseStatusType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__ReviseStatusType::ItemRevised = ItemRevised;
		_p->ns3__ReviseStatusType::BuyItNowAdded = BuyItNowAdded;
		_p->ns3__ReviseStatusType::BuyItNowLowered = BuyItNowLowered;
		_p->ns3__ReviseStatusType::ReserveLowered = ReserveLowered;
		_p->ns3__ReviseStatusType::ReserveRemoved = ReserveRemoved;
	}
	return _p;
}

inline int soap_write_ns3__ReviseStatusType(struct soap *soap, ns3__ReviseStatusType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:ReviseStatusType", p->soap_type() == SOAP_TYPE_ns3__ReviseStatusType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__ReviseStatusType(struct soap *soap, const char *URL, ns3__ReviseStatusType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:ReviseStatusType", p->soap_type() == SOAP_TYPE_ns3__ReviseStatusType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__ReviseStatusType(struct soap *soap, const char *URL, ns3__ReviseStatusType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:ReviseStatusType", p->soap_type() == SOAP_TYPE_ns3__ReviseStatusType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__ReviseStatusType * SOAP_FMAC4 soap_get_ns3__ReviseStatusType(struct soap*, ns3__ReviseStatusType *, const char*, const char*);

inline int soap_read_ns3__ReviseStatusType(struct soap *soap, ns3__ReviseStatusType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns3__ReviseStatusType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__ReviseStatusType(struct soap *soap, const char *URL, ns3__ReviseStatusType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__ReviseStatusType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__ReviseStatusType(struct soap *soap, ns3__ReviseStatusType *p)
{
	if (soap_read_ns3__ReviseStatusType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__SellingStatusType_DEFINED
#define SOAP_TYPE_ns3__SellingStatusType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__SellingStatusType(struct soap*, const char*, int, const ns3__SellingStatusType *, const char*);
SOAP_FMAC3 ns3__SellingStatusType * SOAP_FMAC4 soap_in_ns3__SellingStatusType(struct soap*, const char*, ns3__SellingStatusType *, const char*);
SOAP_FMAC1 ns3__SellingStatusType * SOAP_FMAC2 soap_instantiate_ns3__SellingStatusType(struct soap*, int, const char*, const char*, size_t*);

inline ns3__SellingStatusType * soap_new_ns3__SellingStatusType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__SellingStatusType(soap, n, NULL, NULL, NULL);
}

inline ns3__SellingStatusType * soap_new_req_ns3__SellingStatusType(
	struct soap *soap,
	ns2__AmountType *CurrentPrice,
	int QuantitySold)
{
	ns3__SellingStatusType *_p = soap_new_ns3__SellingStatusType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__SellingStatusType::CurrentPrice = CurrentPrice;
		_p->ns3__SellingStatusType::QuantitySold = QuantitySold;
	}
	return _p;
}

inline ns3__SellingStatusType * soap_new_set_ns3__SellingStatusType(
	struct soap *soap,
	int *BidCount,
	ns2__AmountType *BidIncrement,
	ns2__AmountType *ConvertedCurrentPrice,
	ns2__AmountType *CurrentPrice,
	ns3__UserType *HighBidder,
	int *LeadCount,
	ns2__AmountType *MinimumToBid,
	int QuantitySold,
	bool *ReserveMet,
	bool *SecondChanceEligible)
{
	ns3__SellingStatusType *_p = soap_new_ns3__SellingStatusType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__SellingStatusType::BidCount = BidCount;
		_p->ns3__SellingStatusType::BidIncrement = BidIncrement;
		_p->ns3__SellingStatusType::ConvertedCurrentPrice = ConvertedCurrentPrice;
		_p->ns3__SellingStatusType::CurrentPrice = CurrentPrice;
		_p->ns3__SellingStatusType::HighBidder = HighBidder;
		_p->ns3__SellingStatusType::LeadCount = LeadCount;
		_p->ns3__SellingStatusType::MinimumToBid = MinimumToBid;
		_p->ns3__SellingStatusType::QuantitySold = QuantitySold;
		_p->ns3__SellingStatusType::ReserveMet = ReserveMet;
		_p->ns3__SellingStatusType::SecondChanceEligible = SecondChanceEligible;
	}
	return _p;
}

inline int soap_write_ns3__SellingStatusType(struct soap *soap, ns3__SellingStatusType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:SellingStatusType", p->soap_type() == SOAP_TYPE_ns3__SellingStatusType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__SellingStatusType(struct soap *soap, const char *URL, ns3__SellingStatusType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:SellingStatusType", p->soap_type() == SOAP_TYPE_ns3__SellingStatusType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__SellingStatusType(struct soap *soap, const char *URL, ns3__SellingStatusType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:SellingStatusType", p->soap_type() == SOAP_TYPE_ns3__SellingStatusType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__SellingStatusType * SOAP_FMAC4 soap_get_ns3__SellingStatusType(struct soap*, ns3__SellingStatusType *, const char*, const char*);

inline int soap_read_ns3__SellingStatusType(struct soap *soap, ns3__SellingStatusType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns3__SellingStatusType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__SellingStatusType(struct soap *soap, const char *URL, ns3__SellingStatusType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__SellingStatusType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__SellingStatusType(struct soap *soap, ns3__SellingStatusType *p)
{
	if (soap_read_ns3__SellingStatusType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__CharityType_DEFINED
#define SOAP_TYPE_ns3__CharityType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__CharityType(struct soap*, const char*, int, const ns3__CharityType *, const char*);
SOAP_FMAC3 ns3__CharityType * SOAP_FMAC4 soap_in_ns3__CharityType(struct soap*, const char*, ns3__CharityType *, const char*);
SOAP_FMAC1 ns3__CharityType * SOAP_FMAC2 soap_instantiate_ns3__CharityType(struct soap*, int, const char*, const char*, size_t*);

inline ns3__CharityType * soap_new_ns3__CharityType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__CharityType(soap, n, NULL, NULL, NULL);
}

inline ns3__CharityType * soap_new_req_ns3__CharityType(
	struct soap *soap)
{
	ns3__CharityType *_p = soap_new_ns3__CharityType(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns3__CharityType * soap_new_set_ns3__CharityType(
	struct soap *soap,
	std::string *CharityName,
	int *CharityNumber,
	float *DonationPercent)
{
	ns3__CharityType *_p = soap_new_ns3__CharityType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__CharityType::CharityName = CharityName;
		_p->ns3__CharityType::CharityNumber = CharityNumber;
		_p->ns3__CharityType::DonationPercent = DonationPercent;
	}
	return _p;
}

inline int soap_write_ns3__CharityType(struct soap *soap, ns3__CharityType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:CharityType", p->soap_type() == SOAP_TYPE_ns3__CharityType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__CharityType(struct soap *soap, const char *URL, ns3__CharityType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:CharityType", p->soap_type() == SOAP_TYPE_ns3__CharityType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__CharityType(struct soap *soap, const char *URL, ns3__CharityType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:CharityType", p->soap_type() == SOAP_TYPE_ns3__CharityType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__CharityType * SOAP_FMAC4 soap_get_ns3__CharityType(struct soap*, ns3__CharityType *, const char*, const char*);

inline int soap_read_ns3__CharityType(struct soap *soap, ns3__CharityType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns3__CharityType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__CharityType(struct soap *soap, const char *URL, ns3__CharityType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__CharityType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__CharityType(struct soap *soap, ns3__CharityType *p)
{
	if (soap_read_ns3__CharityType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__ListingDesignerType_DEFINED
#define SOAP_TYPE_ns3__ListingDesignerType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__ListingDesignerType(struct soap*, const char*, int, const ns3__ListingDesignerType *, const char*);
SOAP_FMAC3 ns3__ListingDesignerType * SOAP_FMAC4 soap_in_ns3__ListingDesignerType(struct soap*, const char*, ns3__ListingDesignerType *, const char*);
SOAP_FMAC1 ns3__ListingDesignerType * SOAP_FMAC2 soap_instantiate_ns3__ListingDesignerType(struct soap*, int, const char*, const char*, size_t*);

inline ns3__ListingDesignerType * soap_new_ns3__ListingDesignerType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__ListingDesignerType(soap, n, NULL, NULL, NULL);
}

inline ns3__ListingDesignerType * soap_new_req_ns3__ListingDesignerType(
	struct soap *soap)
{
	ns3__ListingDesignerType *_p = soap_new_ns3__ListingDesignerType(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns3__ListingDesignerType * soap_new_set_ns3__ListingDesignerType(
	struct soap *soap,
	int *LayoutID,
	bool *OptimalPictureSize,
	int *ThemeID)
{
	ns3__ListingDesignerType *_p = soap_new_ns3__ListingDesignerType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__ListingDesignerType::LayoutID = LayoutID;
		_p->ns3__ListingDesignerType::OptimalPictureSize = OptimalPictureSize;
		_p->ns3__ListingDesignerType::ThemeID = ThemeID;
	}
	return _p;
}

inline int soap_write_ns3__ListingDesignerType(struct soap *soap, ns3__ListingDesignerType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:ListingDesignerType", p->soap_type() == SOAP_TYPE_ns3__ListingDesignerType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__ListingDesignerType(struct soap *soap, const char *URL, ns3__ListingDesignerType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:ListingDesignerType", p->soap_type() == SOAP_TYPE_ns3__ListingDesignerType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__ListingDesignerType(struct soap *soap, const char *URL, ns3__ListingDesignerType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:ListingDesignerType", p->soap_type() == SOAP_TYPE_ns3__ListingDesignerType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__ListingDesignerType * SOAP_FMAC4 soap_get_ns3__ListingDesignerType(struct soap*, ns3__ListingDesignerType *, const char*, const char*);

inline int soap_read_ns3__ListingDesignerType(struct soap *soap, ns3__ListingDesignerType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns3__ListingDesignerType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__ListingDesignerType(struct soap *soap, const char *URL, ns3__ListingDesignerType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__ListingDesignerType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__ListingDesignerType(struct soap *soap, ns3__ListingDesignerType *p)
{
	if (soap_read_ns3__ListingDesignerType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__StorefrontType_DEFINED
#define SOAP_TYPE_ns3__StorefrontType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__StorefrontType(struct soap*, const char*, int, const ns3__StorefrontType *, const char*);
SOAP_FMAC3 ns3__StorefrontType * SOAP_FMAC4 soap_in_ns3__StorefrontType(struct soap*, const char*, ns3__StorefrontType *, const char*);
SOAP_FMAC1 ns3__StorefrontType * SOAP_FMAC2 soap_instantiate_ns3__StorefrontType(struct soap*, int, const char*, const char*, size_t*);

inline ns3__StorefrontType * soap_new_ns3__StorefrontType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__StorefrontType(soap, n, NULL, NULL, NULL);
}

inline ns3__StorefrontType * soap_new_req_ns3__StorefrontType(
	struct soap *soap,
	int StoreCategoryID)
{
	ns3__StorefrontType *_p = soap_new_ns3__StorefrontType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__StorefrontType::StoreCategoryID = StoreCategoryID;
	}
	return _p;
}

inline ns3__StorefrontType * soap_new_set_ns3__StorefrontType(
	struct soap *soap,
	int StoreCategoryID,
	std::string *StoreURL)
{
	ns3__StorefrontType *_p = soap_new_ns3__StorefrontType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__StorefrontType::StoreCategoryID = StoreCategoryID;
		_p->ns3__StorefrontType::StoreURL = StoreURL;
	}
	return _p;
}

inline int soap_write_ns3__StorefrontType(struct soap *soap, ns3__StorefrontType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:StorefrontType", p->soap_type() == SOAP_TYPE_ns3__StorefrontType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__StorefrontType(struct soap *soap, const char *URL, ns3__StorefrontType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:StorefrontType", p->soap_type() == SOAP_TYPE_ns3__StorefrontType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__StorefrontType(struct soap *soap, const char *URL, ns3__StorefrontType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:StorefrontType", p->soap_type() == SOAP_TYPE_ns3__StorefrontType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__StorefrontType * SOAP_FMAC4 soap_get_ns3__StorefrontType(struct soap*, ns3__StorefrontType *, const char*, const char*);

inline int soap_read_ns3__StorefrontType(struct soap *soap, ns3__StorefrontType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns3__StorefrontType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__StorefrontType(struct soap *soap, const char *URL, ns3__StorefrontType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__StorefrontType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__StorefrontType(struct soap *soap, ns3__StorefrontType *p)
{
	if (soap_read_ns3__StorefrontType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__CategoryType_DEFINED
#define SOAP_TYPE_ns3__CategoryType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__CategoryType(struct soap*, const char*, int, const ns3__CategoryType *, const char*);
SOAP_FMAC3 ns3__CategoryType * SOAP_FMAC4 soap_in_ns3__CategoryType(struct soap*, const char*, ns3__CategoryType *, const char*);
SOAP_FMAC1 ns3__CategoryType * SOAP_FMAC2 soap_instantiate_ns3__CategoryType(struct soap*, int, const char*, const char*, size_t*);

inline ns3__CategoryType * soap_new_ns3__CategoryType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__CategoryType(soap, n, NULL, NULL, NULL);
}

inline ns3__CategoryType * soap_new_req_ns3__CategoryType(
	struct soap *soap,
	const std::string& CategoryID)
{
	ns3__CategoryType *_p = soap_new_ns3__CategoryType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__CategoryType::CategoryID = CategoryID;
	}
	return _p;
}

inline ns3__CategoryType * soap_new_set_ns3__CategoryType(
	struct soap *soap,
	bool *AutoPayEnabled,
	bool *B2BVATEnabled,
	bool *CatalogEnabled,
	const std::string& CategoryID,
	int *CategoryLevel,
	std::string *CategoryName,
	const std::vector<std::string> & CategoryParentID,
	const std::vector<std::string> & CategoryParentName,
	const std::vector<std::string> & CSIDList,
	bool *Expired,
	bool *IntlAutosFixedCat,
	bool *LeafCategory,
	bool *Virtual)
{
	ns3__CategoryType *_p = soap_new_ns3__CategoryType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__CategoryType::AutoPayEnabled = AutoPayEnabled;
		_p->ns3__CategoryType::B2BVATEnabled = B2BVATEnabled;
		_p->ns3__CategoryType::CatalogEnabled = CatalogEnabled;
		_p->ns3__CategoryType::CategoryID = CategoryID;
		_p->ns3__CategoryType::CategoryLevel = CategoryLevel;
		_p->ns3__CategoryType::CategoryName = CategoryName;
		_p->ns3__CategoryType::CategoryParentID = CategoryParentID;
		_p->ns3__CategoryType::CategoryParentName = CategoryParentName;
		_p->ns3__CategoryType::CSIDList = CSIDList;
		_p->ns3__CategoryType::Expired = Expired;
		_p->ns3__CategoryType::IntlAutosFixedCat = IntlAutosFixedCat;
		_p->ns3__CategoryType::LeafCategory = LeafCategory;
		_p->ns3__CategoryType::Virtual = Virtual;
	}
	return _p;
}

inline int soap_write_ns3__CategoryType(struct soap *soap, ns3__CategoryType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:CategoryType", p->soap_type() == SOAP_TYPE_ns3__CategoryType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__CategoryType(struct soap *soap, const char *URL, ns3__CategoryType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:CategoryType", p->soap_type() == SOAP_TYPE_ns3__CategoryType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__CategoryType(struct soap *soap, const char *URL, ns3__CategoryType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:CategoryType", p->soap_type() == SOAP_TYPE_ns3__CategoryType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__CategoryType * SOAP_FMAC4 soap_get_ns3__CategoryType(struct soap*, ns3__CategoryType *, const char*, const char*);

inline int soap_read_ns3__CategoryType(struct soap *soap, ns3__CategoryType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns3__CategoryType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__CategoryType(struct soap *soap, const char *URL, ns3__CategoryType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__CategoryType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__CategoryType(struct soap *soap, ns3__CategoryType *p)
{
	if (soap_read_ns3__CategoryType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__ListOfAttributeSetType_DEFINED
#define SOAP_TYPE_ns3__ListOfAttributeSetType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__ListOfAttributeSetType(struct soap*, const char*, int, const ns3__ListOfAttributeSetType *, const char*);
SOAP_FMAC3 ns3__ListOfAttributeSetType * SOAP_FMAC4 soap_in_ns3__ListOfAttributeSetType(struct soap*, const char*, ns3__ListOfAttributeSetType *, const char*);
SOAP_FMAC1 ns3__ListOfAttributeSetType * SOAP_FMAC2 soap_instantiate_ns3__ListOfAttributeSetType(struct soap*, int, const char*, const char*, size_t*);

inline ns3__ListOfAttributeSetType * soap_new_ns3__ListOfAttributeSetType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__ListOfAttributeSetType(soap, n, NULL, NULL, NULL);
}

inline ns3__ListOfAttributeSetType * soap_new_req_ns3__ListOfAttributeSetType(
	struct soap *soap,
	const std::vector<ns3__AttributeSetType *> & AttributeSet)
{
	ns3__ListOfAttributeSetType *_p = soap_new_ns3__ListOfAttributeSetType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__ListOfAttributeSetType::AttributeSet = AttributeSet;
	}
	return _p;
}

inline ns3__ListOfAttributeSetType * soap_new_set_ns3__ListOfAttributeSetType(
	struct soap *soap,
	const std::vector<ns3__AttributeSetType *> & AttributeSet)
{
	ns3__ListOfAttributeSetType *_p = soap_new_ns3__ListOfAttributeSetType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__ListOfAttributeSetType::AttributeSet = AttributeSet;
	}
	return _p;
}

inline int soap_write_ns3__ListOfAttributeSetType(struct soap *soap, ns3__ListOfAttributeSetType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:ListOfAttributeSetType", p->soap_type() == SOAP_TYPE_ns3__ListOfAttributeSetType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__ListOfAttributeSetType(struct soap *soap, const char *URL, ns3__ListOfAttributeSetType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:ListOfAttributeSetType", p->soap_type() == SOAP_TYPE_ns3__ListOfAttributeSetType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__ListOfAttributeSetType(struct soap *soap, const char *URL, ns3__ListOfAttributeSetType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:ListOfAttributeSetType", p->soap_type() == SOAP_TYPE_ns3__ListOfAttributeSetType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__ListOfAttributeSetType * SOAP_FMAC4 soap_get_ns3__ListOfAttributeSetType(struct soap*, ns3__ListOfAttributeSetType *, const char*, const char*);

inline int soap_read_ns3__ListOfAttributeSetType(struct soap *soap, ns3__ListOfAttributeSetType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns3__ListOfAttributeSetType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__ListOfAttributeSetType(struct soap *soap, const char *URL, ns3__ListOfAttributeSetType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__ListOfAttributeSetType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__ListOfAttributeSetType(struct soap *soap, ns3__ListOfAttributeSetType *p)
{
	if (soap_read_ns3__ListOfAttributeSetType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__AttributeSetType_DEFINED
#define SOAP_TYPE_ns3__AttributeSetType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__AttributeSetType(struct soap*, const char*, int, const ns3__AttributeSetType *, const char*);
SOAP_FMAC3 ns3__AttributeSetType * SOAP_FMAC4 soap_in_ns3__AttributeSetType(struct soap*, const char*, ns3__AttributeSetType *, const char*);
SOAP_FMAC1 ns3__AttributeSetType * SOAP_FMAC2 soap_instantiate_ns3__AttributeSetType(struct soap*, int, const char*, const char*, size_t*);

inline ns3__AttributeSetType * soap_new_ns3__AttributeSetType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__AttributeSetType(soap, n, NULL, NULL, NULL);
}

inline ns3__AttributeSetType * soap_new_req_ns3__AttributeSetType(
	struct soap *soap,
	const std::vector<ns3__AttributeType *> & Attribute)
{
	ns3__AttributeSetType *_p = soap_new_ns3__AttributeSetType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__AttributeSetType::Attribute = Attribute;
	}
	return _p;
}

inline ns3__AttributeSetType * soap_new_set_ns3__AttributeSetType(
	struct soap *soap,
	const std::vector<ns3__AttributeType *> & Attribute,
	std::string *AttributeSetID)
{
	ns3__AttributeSetType *_p = soap_new_ns3__AttributeSetType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__AttributeSetType::Attribute = Attribute;
		_p->ns3__AttributeSetType::AttributeSetID = AttributeSetID;
	}
	return _p;
}

inline int soap_write_ns3__AttributeSetType(struct soap *soap, ns3__AttributeSetType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:AttributeSetType", p->soap_type() == SOAP_TYPE_ns3__AttributeSetType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__AttributeSetType(struct soap *soap, const char *URL, ns3__AttributeSetType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:AttributeSetType", p->soap_type() == SOAP_TYPE_ns3__AttributeSetType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__AttributeSetType(struct soap *soap, const char *URL, ns3__AttributeSetType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:AttributeSetType", p->soap_type() == SOAP_TYPE_ns3__AttributeSetType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__AttributeSetType * SOAP_FMAC4 soap_get_ns3__AttributeSetType(struct soap*, ns3__AttributeSetType *, const char*, const char*);

inline int soap_read_ns3__AttributeSetType(struct soap *soap, ns3__AttributeSetType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns3__AttributeSetType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__AttributeSetType(struct soap *soap, const char *URL, ns3__AttributeSetType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__AttributeSetType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__AttributeSetType(struct soap *soap, ns3__AttributeSetType *p)
{
	if (soap_read_ns3__AttributeSetType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__AttributeType_DEFINED
#define SOAP_TYPE_ns3__AttributeType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__AttributeType(struct soap*, const char*, int, const ns3__AttributeType *, const char*);
SOAP_FMAC3 ns3__AttributeType * SOAP_FMAC4 soap_in_ns3__AttributeType(struct soap*, const char*, ns3__AttributeType *, const char*);
SOAP_FMAC1 ns3__AttributeType * SOAP_FMAC2 soap_instantiate_ns3__AttributeType(struct soap*, int, const char*, const char*, size_t*);

inline ns3__AttributeType * soap_new_ns3__AttributeType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__AttributeType(soap, n, NULL, NULL, NULL);
}

inline ns3__AttributeType * soap_new_req_ns3__AttributeType(
	struct soap *soap,
	const std::vector<ns3__ValType *> & Value)
{
	ns3__AttributeType *_p = soap_new_ns3__AttributeType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__AttributeType::Value = Value;
	}
	return _p;
}

inline ns3__AttributeType * soap_new_set_ns3__AttributeType(
	struct soap *soap,
	const std::vector<ns3__ValType *> & Value,
	std::string *AttributeID)
{
	ns3__AttributeType *_p = soap_new_ns3__AttributeType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__AttributeType::Value = Value;
		_p->ns3__AttributeType::AttributeID = AttributeID;
	}
	return _p;
}

inline int soap_write_ns3__AttributeType(struct soap *soap, ns3__AttributeType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:AttributeType", p->soap_type() == SOAP_TYPE_ns3__AttributeType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__AttributeType(struct soap *soap, const char *URL, ns3__AttributeType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:AttributeType", p->soap_type() == SOAP_TYPE_ns3__AttributeType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__AttributeType(struct soap *soap, const char *URL, ns3__AttributeType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:AttributeType", p->soap_type() == SOAP_TYPE_ns3__AttributeType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__AttributeType * SOAP_FMAC4 soap_get_ns3__AttributeType(struct soap*, ns3__AttributeType *, const char*, const char*);

inline int soap_read_ns3__AttributeType(struct soap *soap, ns3__AttributeType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns3__AttributeType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__AttributeType(struct soap *soap, const char *URL, ns3__AttributeType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__AttributeType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__AttributeType(struct soap *soap, ns3__AttributeType *p)
{
	if (soap_read_ns3__AttributeType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__ValType_DEFINED
#define SOAP_TYPE_ns3__ValType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__ValType(struct soap*, const char*, int, const ns3__ValType *, const char*);
SOAP_FMAC3 ns3__ValType * SOAP_FMAC4 soap_in_ns3__ValType(struct soap*, const char*, ns3__ValType *, const char*);
SOAP_FMAC1 ns3__ValType * SOAP_FMAC2 soap_instantiate_ns3__ValType(struct soap*, int, const char*, const char*, size_t*);

inline ns3__ValType * soap_new_ns3__ValType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__ValType(soap, n, NULL, NULL, NULL);
}

inline ns3__ValType * soap_new_req_ns3__ValType(
	struct soap *soap,
	const std::string& ValueLiteral)
{
	ns3__ValType *_p = soap_new_ns3__ValType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__ValType::ValueLiteral = ValueLiteral;
	}
	return _p;
}

inline ns3__ValType * soap_new_set_ns3__ValType(
	struct soap *soap,
	const std::string& ValueLiteral,
	std::string *ValueID)
{
	ns3__ValType *_p = soap_new_ns3__ValType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__ValType::ValueLiteral = ValueLiteral;
		_p->ns3__ValType::ValueID = ValueID;
	}
	return _p;
}

inline int soap_write_ns3__ValType(struct soap *soap, ns3__ValType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:ValType", p->soap_type() == SOAP_TYPE_ns3__ValType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__ValType(struct soap *soap, const char *URL, ns3__ValType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:ValType", p->soap_type() == SOAP_TYPE_ns3__ValType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__ValType(struct soap *soap, const char *URL, ns3__ValType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:ValType", p->soap_type() == SOAP_TYPE_ns3__ValType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__ValType * SOAP_FMAC4 soap_get_ns3__ValType(struct soap*, ns3__ValType *, const char*, const char*);

inline int soap_read_ns3__ValType(struct soap *soap, ns3__ValType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns3__ValType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__ValType(struct soap *soap, const char *URL, ns3__ValType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__ValType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__ValType(struct soap *soap, ns3__ValType *p)
{
	if (soap_read_ns3__ValType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__VendorHostedPictureType_DEFINED
#define SOAP_TYPE_ns3__VendorHostedPictureType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__VendorHostedPictureType(struct soap*, const char*, int, const ns3__VendorHostedPictureType *, const char*);
SOAP_FMAC3 ns3__VendorHostedPictureType * SOAP_FMAC4 soap_in_ns3__VendorHostedPictureType(struct soap*, const char*, ns3__VendorHostedPictureType *, const char*);
SOAP_FMAC1 ns3__VendorHostedPictureType * SOAP_FMAC2 soap_instantiate_ns3__VendorHostedPictureType(struct soap*, int, const char*, const char*, size_t*);

inline ns3__VendorHostedPictureType * soap_new_ns3__VendorHostedPictureType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__VendorHostedPictureType(soap, n, NULL, NULL, NULL);
}

inline ns3__VendorHostedPictureType * soap_new_req_ns3__VendorHostedPictureType(
	struct soap *soap)
{
	ns3__VendorHostedPictureType *_p = soap_new_ns3__VendorHostedPictureType(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns3__VendorHostedPictureType * soap_new_set_ns3__VendorHostedPictureType(
	struct soap *soap,
	std::string *PictureURL,
	std::string *GalleryURL,
	enum ns3__GalleryTypeCodeType *GalleryType)
{
	ns3__VendorHostedPictureType *_p = soap_new_ns3__VendorHostedPictureType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__VendorHostedPictureType::PictureURL = PictureURL;
		_p->ns3__VendorHostedPictureType::GalleryURL = GalleryURL;
		_p->ns3__VendorHostedPictureType::GalleryType = GalleryType;
	}
	return _p;
}

inline int soap_write_ns3__VendorHostedPictureType(struct soap *soap, ns3__VendorHostedPictureType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:VendorHostedPictureType", p->soap_type() == SOAP_TYPE_ns3__VendorHostedPictureType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__VendorHostedPictureType(struct soap *soap, const char *URL, ns3__VendorHostedPictureType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:VendorHostedPictureType", p->soap_type() == SOAP_TYPE_ns3__VendorHostedPictureType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__VendorHostedPictureType(struct soap *soap, const char *URL, ns3__VendorHostedPictureType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:VendorHostedPictureType", p->soap_type() == SOAP_TYPE_ns3__VendorHostedPictureType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__VendorHostedPictureType * SOAP_FMAC4 soap_get_ns3__VendorHostedPictureType(struct soap*, ns3__VendorHostedPictureType *, const char*, const char*);

inline int soap_read_ns3__VendorHostedPictureType(struct soap *soap, ns3__VendorHostedPictureType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns3__VendorHostedPictureType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__VendorHostedPictureType(struct soap *soap, const char *URL, ns3__VendorHostedPictureType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__VendorHostedPictureType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__VendorHostedPictureType(struct soap *soap, ns3__VendorHostedPictureType *p)
{
	if (soap_read_ns3__VendorHostedPictureType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__SiteHostedPictureType_DEFINED
#define SOAP_TYPE_ns3__SiteHostedPictureType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__SiteHostedPictureType(struct soap*, const char*, int, const ns3__SiteHostedPictureType *, const char*);
SOAP_FMAC3 ns3__SiteHostedPictureType * SOAP_FMAC4 soap_in_ns3__SiteHostedPictureType(struct soap*, const char*, ns3__SiteHostedPictureType *, const char*);
SOAP_FMAC1 ns3__SiteHostedPictureType * SOAP_FMAC2 soap_instantiate_ns3__SiteHostedPictureType(struct soap*, int, const char*, const char*, size_t*);

inline ns3__SiteHostedPictureType * soap_new_ns3__SiteHostedPictureType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__SiteHostedPictureType(soap, n, NULL, NULL, NULL);
}

inline ns3__SiteHostedPictureType * soap_new_req_ns3__SiteHostedPictureType(
	struct soap *soap)
{
	ns3__SiteHostedPictureType *_p = soap_new_ns3__SiteHostedPictureType(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns3__SiteHostedPictureType * soap_new_set_ns3__SiteHostedPictureType(
	struct soap *soap,
	const std::vector<std::string> & PictureURL,
	enum ns3__PhotoDisplayCodeType *PhotoDisplay,
	enum ns3__GalleryTypeCodeType *GalleryType)
{
	ns3__SiteHostedPictureType *_p = soap_new_ns3__SiteHostedPictureType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__SiteHostedPictureType::PictureURL = PictureURL;
		_p->ns3__SiteHostedPictureType::PhotoDisplay = PhotoDisplay;
		_p->ns3__SiteHostedPictureType::GalleryType = GalleryType;
	}
	return _p;
}

inline int soap_write_ns3__SiteHostedPictureType(struct soap *soap, ns3__SiteHostedPictureType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:SiteHostedPictureType", p->soap_type() == SOAP_TYPE_ns3__SiteHostedPictureType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__SiteHostedPictureType(struct soap *soap, const char *URL, ns3__SiteHostedPictureType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:SiteHostedPictureType", p->soap_type() == SOAP_TYPE_ns3__SiteHostedPictureType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__SiteHostedPictureType(struct soap *soap, const char *URL, ns3__SiteHostedPictureType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:SiteHostedPictureType", p->soap_type() == SOAP_TYPE_ns3__SiteHostedPictureType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__SiteHostedPictureType * SOAP_FMAC4 soap_get_ns3__SiteHostedPictureType(struct soap*, ns3__SiteHostedPictureType *, const char*, const char*);

inline int soap_read_ns3__SiteHostedPictureType(struct soap *soap, ns3__SiteHostedPictureType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns3__SiteHostedPictureType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__SiteHostedPictureType(struct soap *soap, const char *URL, ns3__SiteHostedPictureType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__SiteHostedPictureType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__SiteHostedPictureType(struct soap *soap, ns3__SiteHostedPictureType *p)
{
	if (soap_read_ns3__SiteHostedPictureType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__ShippingDetailsType_DEFINED
#define SOAP_TYPE_ns3__ShippingDetailsType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__ShippingDetailsType(struct soap*, const char*, int, const ns3__ShippingDetailsType *, const char*);
SOAP_FMAC3 ns3__ShippingDetailsType * SOAP_FMAC4 soap_in_ns3__ShippingDetailsType(struct soap*, const char*, ns3__ShippingDetailsType *, const char*);
SOAP_FMAC1 ns3__ShippingDetailsType * SOAP_FMAC2 soap_instantiate_ns3__ShippingDetailsType(struct soap*, int, const char*, const char*, size_t*);

inline ns3__ShippingDetailsType * soap_new_ns3__ShippingDetailsType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__ShippingDetailsType(soap, n, NULL, NULL, NULL);
}

inline ns3__ShippingDetailsType * soap_new_req_ns3__ShippingDetailsType(
	struct soap *soap)
{
	ns3__ShippingDetailsType *_p = soap_new_ns3__ShippingDetailsType(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns3__ShippingDetailsType * soap_new_set_ns3__ShippingDetailsType(
	struct soap *soap,
	bool *AllowPaymentEdit,
	ns3__CalculatedShippingRateType *CalculatedShippingRate,
	bool *ChangePaymentInstructions,
	const std::vector<ns3__FlatShippingRateType *> & FlatShippingRate,
	ns2__AmountType *InsuranceTotal,
	bool *InsuranceWanted,
	std::string *PaymentInstructions,
	ns3__SalesTaxType *SalesTax,
	std::string *SellerPostalCode)
{
	ns3__ShippingDetailsType *_p = soap_new_ns3__ShippingDetailsType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__ShippingDetailsType::AllowPaymentEdit = AllowPaymentEdit;
		_p->ns3__ShippingDetailsType::CalculatedShippingRate = CalculatedShippingRate;
		_p->ns3__ShippingDetailsType::ChangePaymentInstructions = ChangePaymentInstructions;
		_p->ns3__ShippingDetailsType::FlatShippingRate = FlatShippingRate;
		_p->ns3__ShippingDetailsType::InsuranceTotal = InsuranceTotal;
		_p->ns3__ShippingDetailsType::InsuranceWanted = InsuranceWanted;
		_p->ns3__ShippingDetailsType::PaymentInstructions = PaymentInstructions;
		_p->ns3__ShippingDetailsType::SalesTax = SalesTax;
		_p->ns3__ShippingDetailsType::SellerPostalCode = SellerPostalCode;
	}
	return _p;
}

inline int soap_write_ns3__ShippingDetailsType(struct soap *soap, ns3__ShippingDetailsType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:ShippingDetailsType", p->soap_type() == SOAP_TYPE_ns3__ShippingDetailsType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__ShippingDetailsType(struct soap *soap, const char *URL, ns3__ShippingDetailsType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:ShippingDetailsType", p->soap_type() == SOAP_TYPE_ns3__ShippingDetailsType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__ShippingDetailsType(struct soap *soap, const char *URL, ns3__ShippingDetailsType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:ShippingDetailsType", p->soap_type() == SOAP_TYPE_ns3__ShippingDetailsType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__ShippingDetailsType * SOAP_FMAC4 soap_get_ns3__ShippingDetailsType(struct soap*, ns3__ShippingDetailsType *, const char*, const char*);

inline int soap_read_ns3__ShippingDetailsType(struct soap *soap, ns3__ShippingDetailsType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns3__ShippingDetailsType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__ShippingDetailsType(struct soap *soap, const char *URL, ns3__ShippingDetailsType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__ShippingDetailsType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__ShippingDetailsType(struct soap *soap, ns3__ShippingDetailsType *p)
{
	if (soap_read_ns3__ShippingDetailsType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__SalesTaxType_DEFINED
#define SOAP_TYPE_ns3__SalesTaxType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__SalesTaxType(struct soap*, const char*, int, const ns3__SalesTaxType *, const char*);
SOAP_FMAC3 ns3__SalesTaxType * SOAP_FMAC4 soap_in_ns3__SalesTaxType(struct soap*, const char*, ns3__SalesTaxType *, const char*);
SOAP_FMAC1 ns3__SalesTaxType * SOAP_FMAC2 soap_instantiate_ns3__SalesTaxType(struct soap*, int, const char*, const char*, size_t*);

inline ns3__SalesTaxType * soap_new_ns3__SalesTaxType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__SalesTaxType(soap, n, NULL, NULL, NULL);
}

inline ns3__SalesTaxType * soap_new_req_ns3__SalesTaxType(
	struct soap *soap)
{
	ns3__SalesTaxType *_p = soap_new_ns3__SalesTaxType(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns3__SalesTaxType * soap_new_set_ns3__SalesTaxType(
	struct soap *soap,
	float *SalesTaxPercent,
	std::string *SalesTaxState,
	bool *ShippingIncludedInTax)
{
	ns3__SalesTaxType *_p = soap_new_ns3__SalesTaxType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__SalesTaxType::SalesTaxPercent = SalesTaxPercent;
		_p->ns3__SalesTaxType::SalesTaxState = SalesTaxState;
		_p->ns3__SalesTaxType::ShippingIncludedInTax = ShippingIncludedInTax;
	}
	return _p;
}

inline int soap_write_ns3__SalesTaxType(struct soap *soap, ns3__SalesTaxType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:SalesTaxType", p->soap_type() == SOAP_TYPE_ns3__SalesTaxType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__SalesTaxType(struct soap *soap, const char *URL, ns3__SalesTaxType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:SalesTaxType", p->soap_type() == SOAP_TYPE_ns3__SalesTaxType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__SalesTaxType(struct soap *soap, const char *URL, ns3__SalesTaxType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:SalesTaxType", p->soap_type() == SOAP_TYPE_ns3__SalesTaxType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__SalesTaxType * SOAP_FMAC4 soap_get_ns3__SalesTaxType(struct soap*, ns3__SalesTaxType *, const char*, const char*);

inline int soap_read_ns3__SalesTaxType(struct soap *soap, ns3__SalesTaxType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns3__SalesTaxType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__SalesTaxType(struct soap *soap, const char *URL, ns3__SalesTaxType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__SalesTaxType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__SalesTaxType(struct soap *soap, ns3__SalesTaxType *p)
{
	if (soap_read_ns3__SalesTaxType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__FlatShippingRateType_DEFINED
#define SOAP_TYPE_ns3__FlatShippingRateType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__FlatShippingRateType(struct soap*, const char*, int, const ns3__FlatShippingRateType *, const char*);
SOAP_FMAC3 ns3__FlatShippingRateType * SOAP_FMAC4 soap_in_ns3__FlatShippingRateType(struct soap*, const char*, ns3__FlatShippingRateType *, const char*);
SOAP_FMAC1 ns3__FlatShippingRateType * SOAP_FMAC2 soap_instantiate_ns3__FlatShippingRateType(struct soap*, int, const char*, const char*, size_t*);

inline ns3__FlatShippingRateType * soap_new_ns3__FlatShippingRateType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__FlatShippingRateType(soap, n, NULL, NULL, NULL);
}

inline ns3__FlatShippingRateType * soap_new_req_ns3__FlatShippingRateType(
	struct soap *soap)
{
	ns3__FlatShippingRateType *_p = soap_new_ns3__FlatShippingRateType(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns3__FlatShippingRateType * soap_new_set_ns3__FlatShippingRateType(
	struct soap *soap,
	ns2__AmountType *AdditionalShippingCosts,
	ns2__AmountType *FlatShippingHandlingCosts,
	ns2__AmountType *InsuranceFee,
	enum ns3__InsuranceOptionCodeType *InsuranceOption,
	enum ns3__ShippingServiceCodeType *ShippingService)
{
	ns3__FlatShippingRateType *_p = soap_new_ns3__FlatShippingRateType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__FlatShippingRateType::AdditionalShippingCosts = AdditionalShippingCosts;
		_p->ns3__FlatShippingRateType::FlatShippingHandlingCosts = FlatShippingHandlingCosts;
		_p->ns3__FlatShippingRateType::InsuranceFee = InsuranceFee;
		_p->ns3__FlatShippingRateType::InsuranceOption = InsuranceOption;
		_p->ns3__FlatShippingRateType::ShippingService = ShippingService;
	}
	return _p;
}

inline int soap_write_ns3__FlatShippingRateType(struct soap *soap, ns3__FlatShippingRateType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:FlatShippingRateType", p->soap_type() == SOAP_TYPE_ns3__FlatShippingRateType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__FlatShippingRateType(struct soap *soap, const char *URL, ns3__FlatShippingRateType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:FlatShippingRateType", p->soap_type() == SOAP_TYPE_ns3__FlatShippingRateType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__FlatShippingRateType(struct soap *soap, const char *URL, ns3__FlatShippingRateType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:FlatShippingRateType", p->soap_type() == SOAP_TYPE_ns3__FlatShippingRateType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__FlatShippingRateType * SOAP_FMAC4 soap_get_ns3__FlatShippingRateType(struct soap*, ns3__FlatShippingRateType *, const char*, const char*);

inline int soap_read_ns3__FlatShippingRateType(struct soap *soap, ns3__FlatShippingRateType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns3__FlatShippingRateType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__FlatShippingRateType(struct soap *soap, const char *URL, ns3__FlatShippingRateType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__FlatShippingRateType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__FlatShippingRateType(struct soap *soap, ns3__FlatShippingRateType *p)
{
	if (soap_read_ns3__FlatShippingRateType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__CalculatedShippingRateType_DEFINED
#define SOAP_TYPE_ns3__CalculatedShippingRateType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__CalculatedShippingRateType(struct soap*, const char*, int, const ns3__CalculatedShippingRateType *, const char*);
SOAP_FMAC3 ns3__CalculatedShippingRateType * SOAP_FMAC4 soap_in_ns3__CalculatedShippingRateType(struct soap*, const char*, ns3__CalculatedShippingRateType *, const char*);
SOAP_FMAC1 ns3__CalculatedShippingRateType * SOAP_FMAC2 soap_instantiate_ns3__CalculatedShippingRateType(struct soap*, int, const char*, const char*, size_t*);

inline ns3__CalculatedShippingRateType * soap_new_ns3__CalculatedShippingRateType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__CalculatedShippingRateType(soap, n, NULL, NULL, NULL);
}

inline ns3__CalculatedShippingRateType * soap_new_req_ns3__CalculatedShippingRateType(
	struct soap *soap)
{
	ns3__CalculatedShippingRateType *_p = soap_new_ns3__CalculatedShippingRateType(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns3__CalculatedShippingRateType * soap_new_set_ns3__CalculatedShippingRateType(
	struct soap *soap,
	std::string *OriginatingPostalCode,
	bool *ShippingIrregular,
	const std::vector<ns3__ShippingCarrierDetailsType *> & CarrierDetails,
	enum ns3__ShippingPackageCodeType *ShippingPackage,
	ns2__MeasureType *WeightMajor,
	ns2__MeasureType *WeightMinor)
{
	ns3__CalculatedShippingRateType *_p = soap_new_ns3__CalculatedShippingRateType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__CalculatedShippingRateType::OriginatingPostalCode = OriginatingPostalCode;
		_p->ns3__CalculatedShippingRateType::ShippingIrregular = ShippingIrregular;
		_p->ns3__CalculatedShippingRateType::CarrierDetails = CarrierDetails;
		_p->ns3__CalculatedShippingRateType::ShippingPackage = ShippingPackage;
		_p->ns3__CalculatedShippingRateType::WeightMajor = WeightMajor;
		_p->ns3__CalculatedShippingRateType::WeightMinor = WeightMinor;
	}
	return _p;
}

inline int soap_write_ns3__CalculatedShippingRateType(struct soap *soap, ns3__CalculatedShippingRateType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:CalculatedShippingRateType", p->soap_type() == SOAP_TYPE_ns3__CalculatedShippingRateType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__CalculatedShippingRateType(struct soap *soap, const char *URL, ns3__CalculatedShippingRateType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:CalculatedShippingRateType", p->soap_type() == SOAP_TYPE_ns3__CalculatedShippingRateType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__CalculatedShippingRateType(struct soap *soap, const char *URL, ns3__CalculatedShippingRateType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:CalculatedShippingRateType", p->soap_type() == SOAP_TYPE_ns3__CalculatedShippingRateType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__CalculatedShippingRateType * SOAP_FMAC4 soap_get_ns3__CalculatedShippingRateType(struct soap*, ns3__CalculatedShippingRateType *, const char*, const char*);

inline int soap_read_ns3__CalculatedShippingRateType(struct soap *soap, ns3__CalculatedShippingRateType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns3__CalculatedShippingRateType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__CalculatedShippingRateType(struct soap *soap, const char *URL, ns3__CalculatedShippingRateType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__CalculatedShippingRateType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__CalculatedShippingRateType(struct soap *soap, ns3__CalculatedShippingRateType *p)
{
	if (soap_read_ns3__CalculatedShippingRateType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__ShippingCarrierDetailsType_DEFINED
#define SOAP_TYPE_ns3__ShippingCarrierDetailsType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__ShippingCarrierDetailsType(struct soap*, const char*, int, const ns3__ShippingCarrierDetailsType *, const char*);
SOAP_FMAC3 ns3__ShippingCarrierDetailsType * SOAP_FMAC4 soap_in_ns3__ShippingCarrierDetailsType(struct soap*, const char*, ns3__ShippingCarrierDetailsType *, const char*);
SOAP_FMAC1 ns3__ShippingCarrierDetailsType * SOAP_FMAC2 soap_instantiate_ns3__ShippingCarrierDetailsType(struct soap*, int, const char*, const char*, size_t*);

inline ns3__ShippingCarrierDetailsType * soap_new_ns3__ShippingCarrierDetailsType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__ShippingCarrierDetailsType(soap, n, NULL, NULL, NULL);
}

inline ns3__ShippingCarrierDetailsType * soap_new_req_ns3__ShippingCarrierDetailsType(
	struct soap *soap,
	enum ns3__ShippingServiceCodeType ShippingService)
{
	ns3__ShippingCarrierDetailsType *_p = soap_new_ns3__ShippingCarrierDetailsType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__ShippingCarrierDetailsType::ShippingService = ShippingService;
	}
	return _p;
}

inline ns3__ShippingCarrierDetailsType * soap_new_set_ns3__ShippingCarrierDetailsType(
	struct soap *soap,
	ns2__AmountType *CarrierShippingFee,
	ns2__AmountType *InsuranceFee,
	enum ns3__InsuranceOptionCodeType *InsuranceOption,
	ns2__AmountType *PackagingHandlingCosts,
	std::string *ShippingRateErrorMessage,
	enum ns3__ShippingServiceCodeType ShippingService)
{
	ns3__ShippingCarrierDetailsType *_p = soap_new_ns3__ShippingCarrierDetailsType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__ShippingCarrierDetailsType::CarrierShippingFee = CarrierShippingFee;
		_p->ns3__ShippingCarrierDetailsType::InsuranceFee = InsuranceFee;
		_p->ns3__ShippingCarrierDetailsType::InsuranceOption = InsuranceOption;
		_p->ns3__ShippingCarrierDetailsType::PackagingHandlingCosts = PackagingHandlingCosts;
		_p->ns3__ShippingCarrierDetailsType::ShippingRateErrorMessage = ShippingRateErrorMessage;
		_p->ns3__ShippingCarrierDetailsType::ShippingService = ShippingService;
	}
	return _p;
}

inline int soap_write_ns3__ShippingCarrierDetailsType(struct soap *soap, ns3__ShippingCarrierDetailsType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:ShippingCarrierDetailsType", p->soap_type() == SOAP_TYPE_ns3__ShippingCarrierDetailsType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__ShippingCarrierDetailsType(struct soap *soap, const char *URL, ns3__ShippingCarrierDetailsType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:ShippingCarrierDetailsType", p->soap_type() == SOAP_TYPE_ns3__ShippingCarrierDetailsType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__ShippingCarrierDetailsType(struct soap *soap, const char *URL, ns3__ShippingCarrierDetailsType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:ShippingCarrierDetailsType", p->soap_type() == SOAP_TYPE_ns3__ShippingCarrierDetailsType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__ShippingCarrierDetailsType * SOAP_FMAC4 soap_get_ns3__ShippingCarrierDetailsType(struct soap*, ns3__ShippingCarrierDetailsType *, const char*, const char*);

inline int soap_read_ns3__ShippingCarrierDetailsType(struct soap *soap, ns3__ShippingCarrierDetailsType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns3__ShippingCarrierDetailsType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__ShippingCarrierDetailsType(struct soap *soap, const char *URL, ns3__ShippingCarrierDetailsType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__ShippingCarrierDetailsType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__ShippingCarrierDetailsType(struct soap *soap, ns3__ShippingCarrierDetailsType *p)
{
	if (soap_read_ns3__ShippingCarrierDetailsType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__FeesType_DEFINED
#define SOAP_TYPE_ns3__FeesType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__FeesType(struct soap*, const char*, int, const ns3__FeesType *, const char*);
SOAP_FMAC3 ns3__FeesType * SOAP_FMAC4 soap_in_ns3__FeesType(struct soap*, const char*, ns3__FeesType *, const char*);
SOAP_FMAC1 ns3__FeesType * SOAP_FMAC2 soap_instantiate_ns3__FeesType(struct soap*, int, const char*, const char*, size_t*);

inline ns3__FeesType * soap_new_ns3__FeesType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__FeesType(soap, n, NULL, NULL, NULL);
}

inline ns3__FeesType * soap_new_req_ns3__FeesType(
	struct soap *soap,
	const std::vector<ns3__FeeType *> & Fee)
{
	ns3__FeesType *_p = soap_new_ns3__FeesType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__FeesType::Fee = Fee;
	}
	return _p;
}

inline ns3__FeesType * soap_new_set_ns3__FeesType(
	struct soap *soap,
	const std::vector<ns3__FeeType *> & Fee)
{
	ns3__FeesType *_p = soap_new_ns3__FeesType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__FeesType::Fee = Fee;
	}
	return _p;
}

inline int soap_write_ns3__FeesType(struct soap *soap, ns3__FeesType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:FeesType", p->soap_type() == SOAP_TYPE_ns3__FeesType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__FeesType(struct soap *soap, const char *URL, ns3__FeesType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:FeesType", p->soap_type() == SOAP_TYPE_ns3__FeesType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__FeesType(struct soap *soap, const char *URL, ns3__FeesType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:FeesType", p->soap_type() == SOAP_TYPE_ns3__FeesType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__FeesType * SOAP_FMAC4 soap_get_ns3__FeesType(struct soap*, ns3__FeesType *, const char*, const char*);

inline int soap_read_ns3__FeesType(struct soap *soap, ns3__FeesType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns3__FeesType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__FeesType(struct soap *soap, const char *URL, ns3__FeesType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__FeesType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__FeesType(struct soap *soap, ns3__FeesType *p)
{
	if (soap_read_ns3__FeesType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__FeeType_DEFINED
#define SOAP_TYPE_ns3__FeeType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__FeeType(struct soap*, const char*, int, const ns3__FeeType *, const char*);
SOAP_FMAC3 ns3__FeeType * SOAP_FMAC4 soap_in_ns3__FeeType(struct soap*, const char*, ns3__FeeType *, const char*);
SOAP_FMAC1 ns3__FeeType * SOAP_FMAC2 soap_instantiate_ns3__FeeType(struct soap*, int, const char*, const char*, size_t*);

inline ns3__FeeType * soap_new_ns3__FeeType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__FeeType(soap, n, NULL, NULL, NULL);
}

inline ns3__FeeType * soap_new_req_ns3__FeeType(
	struct soap *soap)
{
	ns3__FeeType *_p = soap_new_ns3__FeeType(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns3__FeeType * soap_new_set_ns3__FeeType(
	struct soap *soap,
	std::string *Name,
	ns2__AmountType *Fee)
{
	ns3__FeeType *_p = soap_new_ns3__FeeType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__FeeType::Name = Name;
		_p->ns3__FeeType::Fee = Fee;
	}
	return _p;
}

inline int soap_write_ns3__FeeType(struct soap *soap, ns3__FeeType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:FeeType", p->soap_type() == SOAP_TYPE_ns3__FeeType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__FeeType(struct soap *soap, const char *URL, ns3__FeeType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:FeeType", p->soap_type() == SOAP_TYPE_ns3__FeeType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__FeeType(struct soap *soap, const char *URL, ns3__FeeType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:FeeType", p->soap_type() == SOAP_TYPE_ns3__FeeType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__FeeType * SOAP_FMAC4 soap_get_ns3__FeeType(struct soap*, ns3__FeeType *, const char*, const char*);

inline int soap_read_ns3__FeeType(struct soap *soap, ns3__FeeType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns3__FeeType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__FeeType(struct soap *soap, const char *URL, ns3__FeeType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__FeeType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__FeeType(struct soap *soap, ns3__FeeType *p)
{
	if (soap_read_ns3__FeeType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__SellerType_DEFINED
#define SOAP_TYPE_ns3__SellerType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__SellerType(struct soap*, const char*, int, const ns3__SellerType *, const char*);
SOAP_FMAC3 ns3__SellerType * SOAP_FMAC4 soap_in_ns3__SellerType(struct soap*, const char*, ns3__SellerType *, const char*);
SOAP_FMAC1 ns3__SellerType * SOAP_FMAC2 soap_instantiate_ns3__SellerType(struct soap*, int, const char*, const char*, size_t*);

inline ns3__SellerType * soap_new_ns3__SellerType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__SellerType(soap, n, NULL, NULL, NULL);
}

inline ns3__SellerType * soap_new_req_ns3__SellerType(
	struct soap *soap,
	bool AllowPaymentEdit,
	bool CheckoutEnabled,
	bool CIPBankAccountStored,
	bool GoodStanding,
	bool LiveAuctionAuthorized,
	enum ns3__MerchandizingPrefCodeType MerchandizingPref,
	bool QualifiesForB2BVAT,
	enum ns3__SellerLevelCodeType SellerLevel,
	bool StoreOwner)
{
	ns3__SellerType *_p = soap_new_ns3__SellerType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__SellerType::AllowPaymentEdit = AllowPaymentEdit;
		_p->ns3__SellerType::CheckoutEnabled = CheckoutEnabled;
		_p->ns3__SellerType::CIPBankAccountStored = CIPBankAccountStored;
		_p->ns3__SellerType::GoodStanding = GoodStanding;
		_p->ns3__SellerType::LiveAuctionAuthorized = LiveAuctionAuthorized;
		_p->ns3__SellerType::MerchandizingPref = MerchandizingPref;
		_p->ns3__SellerType::QualifiesForB2BVAT = QualifiesForB2BVAT;
		_p->ns3__SellerType::SellerLevel = SellerLevel;
		_p->ns3__SellerType::StoreOwner = StoreOwner;
	}
	return _p;
}

inline ns3__SellerType * soap_new_set_ns3__SellerType(
	struct soap *soap,
	bool AllowPaymentEdit,
	enum ns3__CurrencyCodeType *BillingCurrency,
	bool CheckoutEnabled,
	bool CIPBankAccountStored,
	bool GoodStanding,
	bool LiveAuctionAuthorized,
	enum ns3__MerchandizingPrefCodeType MerchandizingPref,
	bool QualifiesForB2BVAT,
	enum ns3__SellerLevelCodeType SellerLevel,
	ns3__AddressType *SellerPaymentAddress,
	ns3__SchedulingInfoType *SchedulingInfo,
	bool StoreOwner,
	std::string *StoreURL)
{
	ns3__SellerType *_p = soap_new_ns3__SellerType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__SellerType::AllowPaymentEdit = AllowPaymentEdit;
		_p->ns3__SellerType::BillingCurrency = BillingCurrency;
		_p->ns3__SellerType::CheckoutEnabled = CheckoutEnabled;
		_p->ns3__SellerType::CIPBankAccountStored = CIPBankAccountStored;
		_p->ns3__SellerType::GoodStanding = GoodStanding;
		_p->ns3__SellerType::LiveAuctionAuthorized = LiveAuctionAuthorized;
		_p->ns3__SellerType::MerchandizingPref = MerchandizingPref;
		_p->ns3__SellerType::QualifiesForB2BVAT = QualifiesForB2BVAT;
		_p->ns3__SellerType::SellerLevel = SellerLevel;
		_p->ns3__SellerType::SellerPaymentAddress = SellerPaymentAddress;
		_p->ns3__SellerType::SchedulingInfo = SchedulingInfo;
		_p->ns3__SellerType::StoreOwner = StoreOwner;
		_p->ns3__SellerType::StoreURL = StoreURL;
	}
	return _p;
}

inline int soap_write_ns3__SellerType(struct soap *soap, ns3__SellerType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:SellerType", p->soap_type() == SOAP_TYPE_ns3__SellerType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__SellerType(struct soap *soap, const char *URL, ns3__SellerType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:SellerType", p->soap_type() == SOAP_TYPE_ns3__SellerType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__SellerType(struct soap *soap, const char *URL, ns3__SellerType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:SellerType", p->soap_type() == SOAP_TYPE_ns3__SellerType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__SellerType * SOAP_FMAC4 soap_get_ns3__SellerType(struct soap*, ns3__SellerType *, const char*, const char*);

inline int soap_read_ns3__SellerType(struct soap *soap, ns3__SellerType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns3__SellerType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__SellerType(struct soap *soap, const char *URL, ns3__SellerType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__SellerType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__SellerType(struct soap *soap, ns3__SellerType *p)
{
	if (soap_read_ns3__SellerType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__BuyerType_DEFINED
#define SOAP_TYPE_ns3__BuyerType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__BuyerType(struct soap*, const char*, int, const ns3__BuyerType *, const char*);
SOAP_FMAC3 ns3__BuyerType * SOAP_FMAC4 soap_in_ns3__BuyerType(struct soap*, const char*, ns3__BuyerType *, const char*);
SOAP_FMAC1 ns3__BuyerType * SOAP_FMAC2 soap_instantiate_ns3__BuyerType(struct soap*, int, const char*, const char*, size_t*);

inline ns3__BuyerType * soap_new_ns3__BuyerType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__BuyerType(soap, n, NULL, NULL, NULL);
}

inline ns3__BuyerType * soap_new_req_ns3__BuyerType(
	struct soap *soap)
{
	ns3__BuyerType *_p = soap_new_ns3__BuyerType(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns3__BuyerType * soap_new_set_ns3__BuyerType(
	struct soap *soap,
	ns3__AddressType *ShippingAddress)
{
	ns3__BuyerType *_p = soap_new_ns3__BuyerType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__BuyerType::ShippingAddress = ShippingAddress;
	}
	return _p;
}

inline int soap_write_ns3__BuyerType(struct soap *soap, ns3__BuyerType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:BuyerType", p->soap_type() == SOAP_TYPE_ns3__BuyerType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__BuyerType(struct soap *soap, const char *URL, ns3__BuyerType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:BuyerType", p->soap_type() == SOAP_TYPE_ns3__BuyerType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__BuyerType(struct soap *soap, const char *URL, ns3__BuyerType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:BuyerType", p->soap_type() == SOAP_TYPE_ns3__BuyerType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__BuyerType * SOAP_FMAC4 soap_get_ns3__BuyerType(struct soap*, ns3__BuyerType *, const char*, const char*);

inline int soap_read_ns3__BuyerType(struct soap *soap, ns3__BuyerType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns3__BuyerType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__BuyerType(struct soap *soap, const char *URL, ns3__BuyerType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__BuyerType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__BuyerType(struct soap *soap, ns3__BuyerType *p)
{
	if (soap_read_ns3__BuyerType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__AccountSummaryType_DEFINED
#define SOAP_TYPE_ns3__AccountSummaryType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__AccountSummaryType(struct soap*, const char*, int, const ns3__AccountSummaryType *, const char*);
SOAP_FMAC3 ns3__AccountSummaryType * SOAP_FMAC4 soap_in_ns3__AccountSummaryType(struct soap*, const char*, ns3__AccountSummaryType *, const char*);
SOAP_FMAC1 ns3__AccountSummaryType * SOAP_FMAC2 soap_instantiate_ns3__AccountSummaryType(struct soap*, int, const char*, const char*, size_t*);

inline ns3__AccountSummaryType * soap_new_ns3__AccountSummaryType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__AccountSummaryType(soap, n, NULL, NULL, NULL);
}

inline ns3__AccountSummaryType * soap_new_req_ns3__AccountSummaryType(
	struct soap *soap,
	int __size_AccountSummaryType,
	__ns3__union_AccountSummaryType *__union_AccountSummaryType)
{
	ns3__AccountSummaryType *_p = soap_new_ns3__AccountSummaryType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__AccountSummaryType::__size_AccountSummaryType = __size_AccountSummaryType;
		_p->ns3__AccountSummaryType::__union_AccountSummaryType = __union_AccountSummaryType;
	}
	return _p;
}

inline ns3__AccountSummaryType * soap_new_set_ns3__AccountSummaryType(
	struct soap *soap,
	int __size_AccountSummaryType,
	__ns3__union_AccountSummaryType *__union_AccountSummaryType,
	char *__mixed)
{
	ns3__AccountSummaryType *_p = soap_new_ns3__AccountSummaryType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__AccountSummaryType::__size_AccountSummaryType = __size_AccountSummaryType;
		_p->ns3__AccountSummaryType::__union_AccountSummaryType = __union_AccountSummaryType;
		_p->ns3__AccountSummaryType::__mixed = __mixed;
	}
	return _p;
}

inline int soap_write_ns3__AccountSummaryType(struct soap *soap, ns3__AccountSummaryType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:AccountSummaryType", p->soap_type() == SOAP_TYPE_ns3__AccountSummaryType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__AccountSummaryType(struct soap *soap, const char *URL, ns3__AccountSummaryType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:AccountSummaryType", p->soap_type() == SOAP_TYPE_ns3__AccountSummaryType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__AccountSummaryType(struct soap *soap, const char *URL, ns3__AccountSummaryType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:AccountSummaryType", p->soap_type() == SOAP_TYPE_ns3__AccountSummaryType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__AccountSummaryType * SOAP_FMAC4 soap_get_ns3__AccountSummaryType(struct soap*, ns3__AccountSummaryType *, const char*, const char*);

inline int soap_read_ns3__AccountSummaryType(struct soap *soap, ns3__AccountSummaryType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns3__AccountSummaryType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__AccountSummaryType(struct soap *soap, const char *URL, ns3__AccountSummaryType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__AccountSummaryType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__AccountSummaryType(struct soap *soap, ns3__AccountSummaryType *p)
{
	if (soap_read_ns3__AccountSummaryType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__CrossPromotionsType_DEFINED
#define SOAP_TYPE_ns3__CrossPromotionsType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__CrossPromotionsType(struct soap*, const char*, int, const ns3__CrossPromotionsType *, const char*);
SOAP_FMAC3 ns3__CrossPromotionsType * SOAP_FMAC4 soap_in_ns3__CrossPromotionsType(struct soap*, const char*, ns3__CrossPromotionsType *, const char*);
SOAP_FMAC1 ns3__CrossPromotionsType * SOAP_FMAC2 soap_instantiate_ns3__CrossPromotionsType(struct soap*, int, const char*, const char*, size_t*);

inline ns3__CrossPromotionsType * soap_new_ns3__CrossPromotionsType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__CrossPromotionsType(soap, n, NULL, NULL, NULL);
}

inline ns3__CrossPromotionsType * soap_new_req_ns3__CrossPromotionsType(
	struct soap *soap,
	const std::string& ItemID,
	enum ns3__PromotionSchemeCodeType PrimaryScheme,
	enum ns3__PromotionMethodCodeType PromotionMethod,
	const std::string& SellerID,
	bool ShippingDiscount,
	const std::vector<ns3__PromotedItemType *> & PromotedItem)
{
	ns3__CrossPromotionsType *_p = soap_new_ns3__CrossPromotionsType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__CrossPromotionsType::ItemID = ItemID;
		_p->ns3__CrossPromotionsType::PrimaryScheme = PrimaryScheme;
		_p->ns3__CrossPromotionsType::PromotionMethod = PromotionMethod;
		_p->ns3__CrossPromotionsType::SellerID = SellerID;
		_p->ns3__CrossPromotionsType::ShippingDiscount = ShippingDiscount;
		_p->ns3__CrossPromotionsType::PromotedItem = PromotedItem;
	}
	return _p;
}

inline ns3__CrossPromotionsType * soap_new_set_ns3__CrossPromotionsType(
	struct soap *soap,
	const std::string& ItemID,
	enum ns3__PromotionSchemeCodeType PrimaryScheme,
	enum ns3__PromotionMethodCodeType PromotionMethod,
	const std::string& SellerID,
	bool ShippingDiscount,
	std::string *SellerKey,
	std::string *StoreName,
	const std::vector<ns3__PromotedItemType *> & PromotedItem)
{
	ns3__CrossPromotionsType *_p = soap_new_ns3__CrossPromotionsType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__CrossPromotionsType::ItemID = ItemID;
		_p->ns3__CrossPromotionsType::PrimaryScheme = PrimaryScheme;
		_p->ns3__CrossPromotionsType::PromotionMethod = PromotionMethod;
		_p->ns3__CrossPromotionsType::SellerID = SellerID;
		_p->ns3__CrossPromotionsType::ShippingDiscount = ShippingDiscount;
		_p->ns3__CrossPromotionsType::SellerKey = SellerKey;
		_p->ns3__CrossPromotionsType::StoreName = StoreName;
		_p->ns3__CrossPromotionsType::PromotedItem = PromotedItem;
	}
	return _p;
}

inline int soap_write_ns3__CrossPromotionsType(struct soap *soap, ns3__CrossPromotionsType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:CrossPromotionsType", p->soap_type() == SOAP_TYPE_ns3__CrossPromotionsType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__CrossPromotionsType(struct soap *soap, const char *URL, ns3__CrossPromotionsType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:CrossPromotionsType", p->soap_type() == SOAP_TYPE_ns3__CrossPromotionsType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__CrossPromotionsType(struct soap *soap, const char *URL, ns3__CrossPromotionsType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:CrossPromotionsType", p->soap_type() == SOAP_TYPE_ns3__CrossPromotionsType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__CrossPromotionsType * SOAP_FMAC4 soap_get_ns3__CrossPromotionsType(struct soap*, ns3__CrossPromotionsType *, const char*, const char*);

inline int soap_read_ns3__CrossPromotionsType(struct soap *soap, ns3__CrossPromotionsType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns3__CrossPromotionsType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__CrossPromotionsType(struct soap *soap, const char *URL, ns3__CrossPromotionsType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__CrossPromotionsType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__CrossPromotionsType(struct soap *soap, ns3__CrossPromotionsType *p)
{
	if (soap_read_ns3__CrossPromotionsType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__PromotedItemType_DEFINED
#define SOAP_TYPE_ns3__PromotedItemType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__PromotedItemType(struct soap*, const char*, int, const ns3__PromotedItemType *, const char*);
SOAP_FMAC3 ns3__PromotedItemType * SOAP_FMAC4 soap_in_ns3__PromotedItemType(struct soap*, const char*, ns3__PromotedItemType *, const char*);
SOAP_FMAC1 ns3__PromotedItemType * SOAP_FMAC2 soap_instantiate_ns3__PromotedItemType(struct soap*, int, const char*, const char*, size_t*);

inline ns3__PromotedItemType * soap_new_ns3__PromotedItemType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__PromotedItemType(soap, n, NULL, NULL, NULL);
}

inline ns3__PromotedItemType * soap_new_req_ns3__PromotedItemType(
	struct soap *soap,
	const std::string& ItemID)
{
	ns3__PromotedItemType *_p = soap_new_ns3__PromotedItemType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__PromotedItemType::ItemID = ItemID;
	}
	return _p;
}

inline ns3__PromotedItemType * soap_new_set_ns3__PromotedItemType(
	struct soap *soap,
	const std::string& ItemID,
	std::string *PictureURL,
	int *position,
	ns2__AmountType *PromotionPrice,
	enum ns3__PromotionItemPriceTypeCodeType *PromotionPriceType,
	enum ns3__PromotionItemSelectionCodeType *SelectionType,
	std::string *Title,
	enum ns3__ListingTypeCodeType *ListingType)
{
	ns3__PromotedItemType *_p = soap_new_ns3__PromotedItemType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__PromotedItemType::ItemID = ItemID;
		_p->ns3__PromotedItemType::PictureURL = PictureURL;
		_p->ns3__PromotedItemType::position = position;
		_p->ns3__PromotedItemType::PromotionPrice = PromotionPrice;
		_p->ns3__PromotedItemType::PromotionPriceType = PromotionPriceType;
		_p->ns3__PromotedItemType::SelectionType = SelectionType;
		_p->ns3__PromotedItemType::Title = Title;
		_p->ns3__PromotedItemType::ListingType = ListingType;
	}
	return _p;
}

inline int soap_write_ns3__PromotedItemType(struct soap *soap, ns3__PromotedItemType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:PromotedItemType", p->soap_type() == SOAP_TYPE_ns3__PromotedItemType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__PromotedItemType(struct soap *soap, const char *URL, ns3__PromotedItemType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:PromotedItemType", p->soap_type() == SOAP_TYPE_ns3__PromotedItemType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__PromotedItemType(struct soap *soap, const char *URL, ns3__PromotedItemType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:PromotedItemType", p->soap_type() == SOAP_TYPE_ns3__PromotedItemType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__PromotedItemType * SOAP_FMAC4 soap_get_ns3__PromotedItemType(struct soap*, ns3__PromotedItemType *, const char*, const char*);

inline int soap_read_ns3__PromotedItemType(struct soap *soap, ns3__PromotedItemType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns3__PromotedItemType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__PromotedItemType(struct soap *soap, const char *URL, ns3__PromotedItemType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__PromotedItemType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__PromotedItemType(struct soap *soap, ns3__PromotedItemType *p)
{
	if (soap_read_ns3__PromotedItemType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__AdditionalAccountType_DEFINED
#define SOAP_TYPE_ns3__AdditionalAccountType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__AdditionalAccountType(struct soap*, const char*, int, const ns3__AdditionalAccountType *, const char*);
SOAP_FMAC3 ns3__AdditionalAccountType * SOAP_FMAC4 soap_in_ns3__AdditionalAccountType(struct soap*, const char*, ns3__AdditionalAccountType *, const char*);
SOAP_FMAC1 ns3__AdditionalAccountType * SOAP_FMAC2 soap_instantiate_ns3__AdditionalAccountType(struct soap*, int, const char*, const char*, size_t*);

inline ns3__AdditionalAccountType * soap_new_ns3__AdditionalAccountType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__AdditionalAccountType(soap, n, NULL, NULL, NULL);
}

inline ns3__AdditionalAccountType * soap_new_req_ns3__AdditionalAccountType(
	struct soap *soap,
	ns2__AmountType *Balance,
	enum ns3__CurrencyCodeType Currency,
	const std::string& AccountCode)
{
	ns3__AdditionalAccountType *_p = soap_new_ns3__AdditionalAccountType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__AdditionalAccountType::Balance = Balance;
		_p->ns3__AdditionalAccountType::Currency = Currency;
		_p->ns3__AdditionalAccountType::AccountCode = AccountCode;
	}
	return _p;
}

inline ns3__AdditionalAccountType * soap_new_set_ns3__AdditionalAccountType(
	struct soap *soap,
	ns2__AmountType *Balance,
	enum ns3__CurrencyCodeType Currency,
	const std::string& AccountCode)
{
	ns3__AdditionalAccountType *_p = soap_new_ns3__AdditionalAccountType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__AdditionalAccountType::Balance = Balance;
		_p->ns3__AdditionalAccountType::Currency = Currency;
		_p->ns3__AdditionalAccountType::AccountCode = AccountCode;
	}
	return _p;
}

inline int soap_write_ns3__AdditionalAccountType(struct soap *soap, ns3__AdditionalAccountType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:AdditionalAccountType", p->soap_type() == SOAP_TYPE_ns3__AdditionalAccountType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__AdditionalAccountType(struct soap *soap, const char *URL, ns3__AdditionalAccountType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:AdditionalAccountType", p->soap_type() == SOAP_TYPE_ns3__AdditionalAccountType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__AdditionalAccountType(struct soap *soap, const char *URL, ns3__AdditionalAccountType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:AdditionalAccountType", p->soap_type() == SOAP_TYPE_ns3__AdditionalAccountType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__AdditionalAccountType * SOAP_FMAC4 soap_get_ns3__AdditionalAccountType(struct soap*, ns3__AdditionalAccountType *, const char*, const char*);

inline int soap_read_ns3__AdditionalAccountType(struct soap *soap, ns3__AdditionalAccountType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns3__AdditionalAccountType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__AdditionalAccountType(struct soap *soap, const char *URL, ns3__AdditionalAccountType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__AdditionalAccountType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__AdditionalAccountType(struct soap *soap, ns3__AdditionalAccountType *p)
{
	if (soap_read_ns3__AdditionalAccountType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__AccountEntryType_DEFINED
#define SOAP_TYPE_ns3__AccountEntryType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__AccountEntryType(struct soap*, const char*, int, const ns3__AccountEntryType *, const char*);
SOAP_FMAC3 ns3__AccountEntryType * SOAP_FMAC4 soap_in_ns3__AccountEntryType(struct soap*, const char*, ns3__AccountEntryType *, const char*);
SOAP_FMAC1 ns3__AccountEntryType * SOAP_FMAC2 soap_instantiate_ns3__AccountEntryType(struct soap*, int, const char*, const char*, size_t*);

inline ns3__AccountEntryType * soap_new_ns3__AccountEntryType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__AccountEntryType(soap, n, NULL, NULL, NULL);
}

inline ns3__AccountEntryType * soap_new_req_ns3__AccountEntryType(
	struct soap *soap,
	ns2__AmountType *Balance,
	ns2__AmountType *Credit,
	time_t Date,
	ns2__AmountType *Debit,
	const std::string& ItemID,
	const std::string& Memo,
	int RefNumber,
	int AccountEntryDetailsType)
{
	ns3__AccountEntryType *_p = soap_new_ns3__AccountEntryType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__AccountEntryType::Balance = Balance;
		_p->ns3__AccountEntryType::Credit = Credit;
		_p->ns3__AccountEntryType::Date = Date;
		_p->ns3__AccountEntryType::Debit = Debit;
		_p->ns3__AccountEntryType::ItemID = ItemID;
		_p->ns3__AccountEntryType::Memo = Memo;
		_p->ns3__AccountEntryType::RefNumber = RefNumber;
		_p->ns3__AccountEntryType::AccountEntryDetailsType = AccountEntryDetailsType;
	}
	return _p;
}

inline ns3__AccountEntryType * soap_new_set_ns3__AccountEntryType(
	struct soap *soap,
	ns2__AmountType *Balance,
	ns2__AmountType *Credit,
	time_t Date,
	ns2__AmountType *Debit,
	const std::string& ItemID,
	const std::string& Memo,
	int RefNumber,
	int AccountEntryDetailsType)
{
	ns3__AccountEntryType *_p = soap_new_ns3__AccountEntryType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__AccountEntryType::Balance = Balance;
		_p->ns3__AccountEntryType::Credit = Credit;
		_p->ns3__AccountEntryType::Date = Date;
		_p->ns3__AccountEntryType::Debit = Debit;
		_p->ns3__AccountEntryType::ItemID = ItemID;
		_p->ns3__AccountEntryType::Memo = Memo;
		_p->ns3__AccountEntryType::RefNumber = RefNumber;
		_p->ns3__AccountEntryType::AccountEntryDetailsType = AccountEntryDetailsType;
	}
	return _p;
}

inline int soap_write_ns3__AccountEntryType(struct soap *soap, ns3__AccountEntryType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:AccountEntryType", p->soap_type() == SOAP_TYPE_ns3__AccountEntryType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__AccountEntryType(struct soap *soap, const char *URL, ns3__AccountEntryType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:AccountEntryType", p->soap_type() == SOAP_TYPE_ns3__AccountEntryType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__AccountEntryType(struct soap *soap, const char *URL, ns3__AccountEntryType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:AccountEntryType", p->soap_type() == SOAP_TYPE_ns3__AccountEntryType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__AccountEntryType * SOAP_FMAC4 soap_get_ns3__AccountEntryType(struct soap*, ns3__AccountEntryType *, const char*, const char*);

inline int soap_read_ns3__AccountEntryType(struct soap *soap, ns3__AccountEntryType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns3__AccountEntryType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__AccountEntryType(struct soap *soap, const char *URL, ns3__AccountEntryType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__AccountEntryType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__AccountEntryType(struct soap *soap, ns3__AccountEntryType *p)
{
	if (soap_read_ns3__AccountEntryType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns2__QuantityType_DEFINED
#define SOAP_TYPE_ns2__QuantityType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__QuantityType(struct soap*, const char*, int, const ns2__QuantityType *, const char*);
SOAP_FMAC3 ns2__QuantityType * SOAP_FMAC4 soap_in_ns2__QuantityType(struct soap*, const char*, ns2__QuantityType *, const char*);
SOAP_FMAC1 ns2__QuantityType * SOAP_FMAC2 soap_instantiate_ns2__QuantityType(struct soap*, int, const char*, const char*, size_t*);

inline ns2__QuantityType * soap_new_ns2__QuantityType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__QuantityType(soap, n, NULL, NULL, NULL);
}

inline ns2__QuantityType * soap_new_req_ns2__QuantityType(
	struct soap *soap,
	double __item)
{
	ns2__QuantityType *_p = soap_new_ns2__QuantityType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__QuantityType::__item = __item;
	}
	return _p;
}

inline ns2__QuantityType * soap_new_set_ns2__QuantityType(
	struct soap *soap,
	double __item,
	std::string *unit)
{
	ns2__QuantityType *_p = soap_new_ns2__QuantityType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__QuantityType::__item = __item;
		_p->ns2__QuantityType::unit = unit;
	}
	return _p;
}

inline int soap_write_ns2__QuantityType(struct soap *soap, ns2__QuantityType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:QuantityType", p->soap_type() == SOAP_TYPE_ns2__QuantityType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__QuantityType(struct soap *soap, const char *URL, ns2__QuantityType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:QuantityType", p->soap_type() == SOAP_TYPE_ns2__QuantityType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__QuantityType(struct soap *soap, const char *URL, ns2__QuantityType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:QuantityType", p->soap_type() == SOAP_TYPE_ns2__QuantityType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__QuantityType * SOAP_FMAC4 soap_get_ns2__QuantityType(struct soap*, ns2__QuantityType *, const char*, const char*);

inline int soap_read_ns2__QuantityType(struct soap *soap, ns2__QuantityType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns2__QuantityType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__QuantityType(struct soap *soap, const char *URL, ns2__QuantityType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns2__QuantityType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns2__QuantityType(struct soap *soap, ns2__QuantityType *p)
{
	if (soap_read_ns2__QuantityType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns2__MeasureType_DEFINED
#define SOAP_TYPE_ns2__MeasureType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__MeasureType(struct soap*, const char*, int, const ns2__MeasureType *, const char*);
SOAP_FMAC3 ns2__MeasureType * SOAP_FMAC4 soap_in_ns2__MeasureType(struct soap*, const char*, ns2__MeasureType *, const char*);
SOAP_FMAC1 ns2__MeasureType * SOAP_FMAC2 soap_instantiate_ns2__MeasureType(struct soap*, int, const char*, const char*, size_t*);

inline ns2__MeasureType * soap_new_ns2__MeasureType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__MeasureType(soap, n, NULL, NULL, NULL);
}

inline ns2__MeasureType * soap_new_req_ns2__MeasureType(
	struct soap *soap,
	double __item,
	const std::string& unit)
{
	ns2__MeasureType *_p = soap_new_ns2__MeasureType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__MeasureType::__item = __item;
		_p->ns2__MeasureType::unit = unit;
	}
	return _p;
}

inline ns2__MeasureType * soap_new_set_ns2__MeasureType(
	struct soap *soap,
	double __item,
	const std::string& unit)
{
	ns2__MeasureType *_p = soap_new_ns2__MeasureType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__MeasureType::__item = __item;
		_p->ns2__MeasureType::unit = unit;
	}
	return _p;
}

inline int soap_write_ns2__MeasureType(struct soap *soap, ns2__MeasureType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:MeasureType", p->soap_type() == SOAP_TYPE_ns2__MeasureType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__MeasureType(struct soap *soap, const char *URL, ns2__MeasureType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:MeasureType", p->soap_type() == SOAP_TYPE_ns2__MeasureType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__MeasureType(struct soap *soap, const char *URL, ns2__MeasureType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:MeasureType", p->soap_type() == SOAP_TYPE_ns2__MeasureType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__MeasureType * SOAP_FMAC4 soap_get_ns2__MeasureType(struct soap*, ns2__MeasureType *, const char*, const char*);

inline int soap_read_ns2__MeasureType(struct soap *soap, ns2__MeasureType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns2__MeasureType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__MeasureType(struct soap *soap, const char *URL, ns2__MeasureType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns2__MeasureType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns2__MeasureType(struct soap *soap, ns2__MeasureType *p)
{
	if (soap_read_ns2__MeasureType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns2__BasicAmountType_DEFINED
#define SOAP_TYPE_ns2__BasicAmountType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__BasicAmountType(struct soap*, const char*, int, const ns2__BasicAmountType *, const char*);
SOAP_FMAC3 ns2__BasicAmountType * SOAP_FMAC4 soap_in_ns2__BasicAmountType(struct soap*, const char*, ns2__BasicAmountType *, const char*);
SOAP_FMAC1 ns2__BasicAmountType * SOAP_FMAC2 soap_instantiate_ns2__BasicAmountType(struct soap*, int, const char*, const char*, size_t*);

inline ns2__BasicAmountType * soap_new_ns2__BasicAmountType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__BasicAmountType(soap, n, NULL, NULL, NULL);
}

inline ns2__BasicAmountType * soap_new_req_ns2__BasicAmountType(
	struct soap *soap,
	const std::string& __item,
	enum ns3__CurrencyCodeType currencyID)
{
	ns2__BasicAmountType *_p = soap_new_ns2__BasicAmountType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__BasicAmountType::__item = __item;
		_p->ns2__BasicAmountType::currencyID = currencyID;
	}
	return _p;
}

inline ns2__BasicAmountType * soap_new_set_ns2__BasicAmountType(
	struct soap *soap,
	const std::string& __item,
	enum ns3__CurrencyCodeType currencyID)
{
	ns2__BasicAmountType *_p = soap_new_ns2__BasicAmountType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__BasicAmountType::__item = __item;
		_p->ns2__BasicAmountType::currencyID = currencyID;
	}
	return _p;
}

inline int soap_write_ns2__BasicAmountType(struct soap *soap, ns2__BasicAmountType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:BasicAmountType", p->soap_type() == SOAP_TYPE_ns2__BasicAmountType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__BasicAmountType(struct soap *soap, const char *URL, ns2__BasicAmountType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:BasicAmountType", p->soap_type() == SOAP_TYPE_ns2__BasicAmountType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__BasicAmountType(struct soap *soap, const char *URL, ns2__BasicAmountType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:BasicAmountType", p->soap_type() == SOAP_TYPE_ns2__BasicAmountType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__BasicAmountType * SOAP_FMAC4 soap_get_ns2__BasicAmountType(struct soap*, ns2__BasicAmountType *, const char*, const char*);

inline int soap_read_ns2__BasicAmountType(struct soap *soap, ns2__BasicAmountType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns2__BasicAmountType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__BasicAmountType(struct soap *soap, const char *URL, ns2__BasicAmountType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns2__BasicAmountType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns2__BasicAmountType(struct soap *soap, ns2__BasicAmountType *p)
{
	if (soap_read_ns2__BasicAmountType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns2__AmountType_DEFINED
#define SOAP_TYPE_ns2__AmountType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__AmountType(struct soap*, const char*, int, const ns2__AmountType *, const char*);
SOAP_FMAC3 ns2__AmountType * SOAP_FMAC4 soap_in_ns2__AmountType(struct soap*, const char*, ns2__AmountType *, const char*);
SOAP_FMAC1 ns2__AmountType * SOAP_FMAC2 soap_instantiate_ns2__AmountType(struct soap*, int, const char*, const char*, size_t*);

inline ns2__AmountType * soap_new_ns2__AmountType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__AmountType(soap, n, NULL, NULL, NULL);
}

inline ns2__AmountType * soap_new_req_ns2__AmountType(
	struct soap *soap,
	double __item,
	enum ns3__CurrencyCodeType currencyID)
{
	ns2__AmountType *_p = soap_new_ns2__AmountType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__AmountType::__item = __item;
		_p->ns2__AmountType::currencyID = currencyID;
	}
	return _p;
}

inline ns2__AmountType * soap_new_set_ns2__AmountType(
	struct soap *soap,
	double __item,
	enum ns3__CurrencyCodeType currencyID)
{
	ns2__AmountType *_p = soap_new_ns2__AmountType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__AmountType::__item = __item;
		_p->ns2__AmountType::currencyID = currencyID;
	}
	return _p;
}

inline int soap_write_ns2__AmountType(struct soap *soap, ns2__AmountType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:AmountType", p->soap_type() == SOAP_TYPE_ns2__AmountType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__AmountType(struct soap *soap, const char *URL, ns2__AmountType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:AmountType", p->soap_type() == SOAP_TYPE_ns2__AmountType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__AmountType(struct soap *soap, const char *URL, ns2__AmountType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:AmountType", p->soap_type() == SOAP_TYPE_ns2__AmountType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__AmountType * SOAP_FMAC4 soap_get_ns2__AmountType(struct soap*, ns2__AmountType *, const char*, const char*);

inline int soap_read_ns2__AmountType(struct soap *soap, ns2__AmountType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns2__AmountType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__AmountType(struct soap *soap, const char *URL, ns2__AmountType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns2__AmountType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns2__AmountType(struct soap *soap, ns2__AmountType *p)
{
	if (soap_read_ns2__AmountType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__ExternalRememberMeOptOutReq_DEFINED
#define SOAP_TYPE__ns1__ExternalRememberMeOptOutReq_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__ExternalRememberMeOptOutReq(struct soap*, const char*, int, const _ns1__ExternalRememberMeOptOutReq *, const char*);
SOAP_FMAC3 _ns1__ExternalRememberMeOptOutReq * SOAP_FMAC4 soap_in__ns1__ExternalRememberMeOptOutReq(struct soap*, const char*, _ns1__ExternalRememberMeOptOutReq *, const char*);
SOAP_FMAC1 _ns1__ExternalRememberMeOptOutReq * SOAP_FMAC2 soap_instantiate__ns1__ExternalRememberMeOptOutReq(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__ExternalRememberMeOptOutReq * soap_new__ns1__ExternalRememberMeOptOutReq(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__ExternalRememberMeOptOutReq(soap, n, NULL, NULL, NULL);
}

inline _ns1__ExternalRememberMeOptOutReq * soap_new_req__ns1__ExternalRememberMeOptOutReq(
	struct soap *soap,
	ns1__ExternalRememberMeOptOutRequestType *ExternalRememberMeOptOutRequest)
{
	_ns1__ExternalRememberMeOptOutReq *_p = soap_new__ns1__ExternalRememberMeOptOutReq(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__ExternalRememberMeOptOutReq::ExternalRememberMeOptOutRequest = ExternalRememberMeOptOutRequest;
	}
	return _p;
}

inline _ns1__ExternalRememberMeOptOutReq * soap_new_set__ns1__ExternalRememberMeOptOutReq(
	struct soap *soap,
	ns1__ExternalRememberMeOptOutRequestType *ExternalRememberMeOptOutRequest)
{
	_ns1__ExternalRememberMeOptOutReq *_p = soap_new__ns1__ExternalRememberMeOptOutReq(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__ExternalRememberMeOptOutReq::ExternalRememberMeOptOutRequest = ExternalRememberMeOptOutRequest;
	}
	return _p;
}

inline int soap_write__ns1__ExternalRememberMeOptOutReq(struct soap *soap, _ns1__ExternalRememberMeOptOutReq const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ExternalRememberMeOptOutReq", p->soap_type() == SOAP_TYPE__ns1__ExternalRememberMeOptOutReq ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__ExternalRememberMeOptOutReq(struct soap *soap, const char *URL, _ns1__ExternalRememberMeOptOutReq const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ExternalRememberMeOptOutReq", p->soap_type() == SOAP_TYPE__ns1__ExternalRememberMeOptOutReq ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns1__ExternalRememberMeOptOutReq(struct soap *soap, const char *URL, _ns1__ExternalRememberMeOptOutReq const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ExternalRememberMeOptOutReq", p->soap_type() == SOAP_TYPE__ns1__ExternalRememberMeOptOutReq ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__ExternalRememberMeOptOutReq * SOAP_FMAC4 soap_get__ns1__ExternalRememberMeOptOutReq(struct soap*, _ns1__ExternalRememberMeOptOutReq *, const char*, const char*);

inline int soap_read__ns1__ExternalRememberMeOptOutReq(struct soap *soap, _ns1__ExternalRememberMeOptOutReq *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__ExternalRememberMeOptOutReq(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__ExternalRememberMeOptOutReq(struct soap *soap, const char *URL, _ns1__ExternalRememberMeOptOutReq *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__ExternalRememberMeOptOutReq(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__ExternalRememberMeOptOutReq(struct soap *soap, _ns1__ExternalRememberMeOptOutReq *p)
{
	if (soap_read__ns1__ExternalRememberMeOptOutReq(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__ReverseTransactionReq_DEFINED
#define SOAP_TYPE__ns1__ReverseTransactionReq_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__ReverseTransactionReq(struct soap*, const char*, int, const _ns1__ReverseTransactionReq *, const char*);
SOAP_FMAC3 _ns1__ReverseTransactionReq * SOAP_FMAC4 soap_in__ns1__ReverseTransactionReq(struct soap*, const char*, _ns1__ReverseTransactionReq *, const char*);
SOAP_FMAC1 _ns1__ReverseTransactionReq * SOAP_FMAC2 soap_instantiate__ns1__ReverseTransactionReq(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__ReverseTransactionReq * soap_new__ns1__ReverseTransactionReq(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__ReverseTransactionReq(soap, n, NULL, NULL, NULL);
}

inline _ns1__ReverseTransactionReq * soap_new_req__ns1__ReverseTransactionReq(
	struct soap *soap,
	ns1__ReverseTransactionRequestType *ReverseTransactionRequest)
{
	_ns1__ReverseTransactionReq *_p = soap_new__ns1__ReverseTransactionReq(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__ReverseTransactionReq::ReverseTransactionRequest = ReverseTransactionRequest;
	}
	return _p;
}

inline _ns1__ReverseTransactionReq * soap_new_set__ns1__ReverseTransactionReq(
	struct soap *soap,
	ns1__ReverseTransactionRequestType *ReverseTransactionRequest)
{
	_ns1__ReverseTransactionReq *_p = soap_new__ns1__ReverseTransactionReq(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__ReverseTransactionReq::ReverseTransactionRequest = ReverseTransactionRequest;
	}
	return _p;
}

inline int soap_write__ns1__ReverseTransactionReq(struct soap *soap, _ns1__ReverseTransactionReq const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ReverseTransactionReq", p->soap_type() == SOAP_TYPE__ns1__ReverseTransactionReq ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__ReverseTransactionReq(struct soap *soap, const char *URL, _ns1__ReverseTransactionReq const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ReverseTransactionReq", p->soap_type() == SOAP_TYPE__ns1__ReverseTransactionReq ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns1__ReverseTransactionReq(struct soap *soap, const char *URL, _ns1__ReverseTransactionReq const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ReverseTransactionReq", p->soap_type() == SOAP_TYPE__ns1__ReverseTransactionReq ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__ReverseTransactionReq * SOAP_FMAC4 soap_get__ns1__ReverseTransactionReq(struct soap*, _ns1__ReverseTransactionReq *, const char*, const char*);

inline int soap_read__ns1__ReverseTransactionReq(struct soap *soap, _ns1__ReverseTransactionReq *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__ReverseTransactionReq(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__ReverseTransactionReq(struct soap *soap, const char *URL, _ns1__ReverseTransactionReq *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__ReverseTransactionReq(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__ReverseTransactionReq(struct soap *soap, _ns1__ReverseTransactionReq *p)
{
	if (soap_read__ns1__ReverseTransactionReq(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__GetPalDetailsReq_DEFINED
#define SOAP_TYPE__ns1__GetPalDetailsReq_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetPalDetailsReq(struct soap*, const char*, int, const _ns1__GetPalDetailsReq *, const char*);
SOAP_FMAC3 _ns1__GetPalDetailsReq * SOAP_FMAC4 soap_in__ns1__GetPalDetailsReq(struct soap*, const char*, _ns1__GetPalDetailsReq *, const char*);
SOAP_FMAC1 _ns1__GetPalDetailsReq * SOAP_FMAC2 soap_instantiate__ns1__GetPalDetailsReq(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetPalDetailsReq * soap_new__ns1__GetPalDetailsReq(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__GetPalDetailsReq(soap, n, NULL, NULL, NULL);
}

inline _ns1__GetPalDetailsReq * soap_new_req__ns1__GetPalDetailsReq(
	struct soap *soap,
	ns1__GetPalDetailsRequestType *GetPalDetailsRequest)
{
	_ns1__GetPalDetailsReq *_p = soap_new__ns1__GetPalDetailsReq(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__GetPalDetailsReq::GetPalDetailsRequest = GetPalDetailsRequest;
	}
	return _p;
}

inline _ns1__GetPalDetailsReq * soap_new_set__ns1__GetPalDetailsReq(
	struct soap *soap,
	ns1__GetPalDetailsRequestType *GetPalDetailsRequest)
{
	_ns1__GetPalDetailsReq *_p = soap_new__ns1__GetPalDetailsReq(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__GetPalDetailsReq::GetPalDetailsRequest = GetPalDetailsRequest;
	}
	return _p;
}

inline int soap_write__ns1__GetPalDetailsReq(struct soap *soap, _ns1__GetPalDetailsReq const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetPalDetailsReq", p->soap_type() == SOAP_TYPE__ns1__GetPalDetailsReq ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__GetPalDetailsReq(struct soap *soap, const char *URL, _ns1__GetPalDetailsReq const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetPalDetailsReq", p->soap_type() == SOAP_TYPE__ns1__GetPalDetailsReq ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns1__GetPalDetailsReq(struct soap *soap, const char *URL, _ns1__GetPalDetailsReq const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetPalDetailsReq", p->soap_type() == SOAP_TYPE__ns1__GetPalDetailsReq ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__GetPalDetailsReq * SOAP_FMAC4 soap_get__ns1__GetPalDetailsReq(struct soap*, _ns1__GetPalDetailsReq *, const char*, const char*);

inline int soap_read__ns1__GetPalDetailsReq(struct soap *soap, _ns1__GetPalDetailsReq *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__GetPalDetailsReq(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__GetPalDetailsReq(struct soap *soap, const char *URL, _ns1__GetPalDetailsReq *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__GetPalDetailsReq(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__GetPalDetailsReq(struct soap *soap, _ns1__GetPalDetailsReq *p)
{
	if (soap_read__ns1__GetPalDetailsReq(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__UpdateRecurringPaymentsProfileReq_DEFINED
#define SOAP_TYPE__ns1__UpdateRecurringPaymentsProfileReq_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__UpdateRecurringPaymentsProfileReq(struct soap*, const char*, int, const _ns1__UpdateRecurringPaymentsProfileReq *, const char*);
SOAP_FMAC3 _ns1__UpdateRecurringPaymentsProfileReq * SOAP_FMAC4 soap_in__ns1__UpdateRecurringPaymentsProfileReq(struct soap*, const char*, _ns1__UpdateRecurringPaymentsProfileReq *, const char*);
SOAP_FMAC1 _ns1__UpdateRecurringPaymentsProfileReq * SOAP_FMAC2 soap_instantiate__ns1__UpdateRecurringPaymentsProfileReq(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__UpdateRecurringPaymentsProfileReq * soap_new__ns1__UpdateRecurringPaymentsProfileReq(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__UpdateRecurringPaymentsProfileReq(soap, n, NULL, NULL, NULL);
}

inline _ns1__UpdateRecurringPaymentsProfileReq * soap_new_req__ns1__UpdateRecurringPaymentsProfileReq(
	struct soap *soap,
	ns1__UpdateRecurringPaymentsProfileRequestType *UpdateRecurringPaymentsProfileRequest)
{
	_ns1__UpdateRecurringPaymentsProfileReq *_p = soap_new__ns1__UpdateRecurringPaymentsProfileReq(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__UpdateRecurringPaymentsProfileReq::UpdateRecurringPaymentsProfileRequest = UpdateRecurringPaymentsProfileRequest;
	}
	return _p;
}

inline _ns1__UpdateRecurringPaymentsProfileReq * soap_new_set__ns1__UpdateRecurringPaymentsProfileReq(
	struct soap *soap,
	ns1__UpdateRecurringPaymentsProfileRequestType *UpdateRecurringPaymentsProfileRequest)
{
	_ns1__UpdateRecurringPaymentsProfileReq *_p = soap_new__ns1__UpdateRecurringPaymentsProfileReq(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__UpdateRecurringPaymentsProfileReq::UpdateRecurringPaymentsProfileRequest = UpdateRecurringPaymentsProfileRequest;
	}
	return _p;
}

inline int soap_write__ns1__UpdateRecurringPaymentsProfileReq(struct soap *soap, _ns1__UpdateRecurringPaymentsProfileReq const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:UpdateRecurringPaymentsProfileReq", p->soap_type() == SOAP_TYPE__ns1__UpdateRecurringPaymentsProfileReq ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__UpdateRecurringPaymentsProfileReq(struct soap *soap, const char *URL, _ns1__UpdateRecurringPaymentsProfileReq const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:UpdateRecurringPaymentsProfileReq", p->soap_type() == SOAP_TYPE__ns1__UpdateRecurringPaymentsProfileReq ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns1__UpdateRecurringPaymentsProfileReq(struct soap *soap, const char *URL, _ns1__UpdateRecurringPaymentsProfileReq const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:UpdateRecurringPaymentsProfileReq", p->soap_type() == SOAP_TYPE__ns1__UpdateRecurringPaymentsProfileReq ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__UpdateRecurringPaymentsProfileReq * SOAP_FMAC4 soap_get__ns1__UpdateRecurringPaymentsProfileReq(struct soap*, _ns1__UpdateRecurringPaymentsProfileReq *, const char*, const char*);

inline int soap_read__ns1__UpdateRecurringPaymentsProfileReq(struct soap *soap, _ns1__UpdateRecurringPaymentsProfileReq *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__UpdateRecurringPaymentsProfileReq(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__UpdateRecurringPaymentsProfileReq(struct soap *soap, const char *URL, _ns1__UpdateRecurringPaymentsProfileReq *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__UpdateRecurringPaymentsProfileReq(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__UpdateRecurringPaymentsProfileReq(struct soap *soap, _ns1__UpdateRecurringPaymentsProfileReq *p)
{
	if (soap_read__ns1__UpdateRecurringPaymentsProfileReq(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__BillOutstandingAmountReq_DEFINED
#define SOAP_TYPE__ns1__BillOutstandingAmountReq_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__BillOutstandingAmountReq(struct soap*, const char*, int, const _ns1__BillOutstandingAmountReq *, const char*);
SOAP_FMAC3 _ns1__BillOutstandingAmountReq * SOAP_FMAC4 soap_in__ns1__BillOutstandingAmountReq(struct soap*, const char*, _ns1__BillOutstandingAmountReq *, const char*);
SOAP_FMAC1 _ns1__BillOutstandingAmountReq * SOAP_FMAC2 soap_instantiate__ns1__BillOutstandingAmountReq(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__BillOutstandingAmountReq * soap_new__ns1__BillOutstandingAmountReq(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__BillOutstandingAmountReq(soap, n, NULL, NULL, NULL);
}

inline _ns1__BillOutstandingAmountReq * soap_new_req__ns1__BillOutstandingAmountReq(
	struct soap *soap,
	ns1__BillOutstandingAmountRequestType *BillOutstandingAmountRequest)
{
	_ns1__BillOutstandingAmountReq *_p = soap_new__ns1__BillOutstandingAmountReq(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__BillOutstandingAmountReq::BillOutstandingAmountRequest = BillOutstandingAmountRequest;
	}
	return _p;
}

inline _ns1__BillOutstandingAmountReq * soap_new_set__ns1__BillOutstandingAmountReq(
	struct soap *soap,
	ns1__BillOutstandingAmountRequestType *BillOutstandingAmountRequest)
{
	_ns1__BillOutstandingAmountReq *_p = soap_new__ns1__BillOutstandingAmountReq(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__BillOutstandingAmountReq::BillOutstandingAmountRequest = BillOutstandingAmountRequest;
	}
	return _p;
}

inline int soap_write__ns1__BillOutstandingAmountReq(struct soap *soap, _ns1__BillOutstandingAmountReq const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:BillOutstandingAmountReq", p->soap_type() == SOAP_TYPE__ns1__BillOutstandingAmountReq ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__BillOutstandingAmountReq(struct soap *soap, const char *URL, _ns1__BillOutstandingAmountReq const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:BillOutstandingAmountReq", p->soap_type() == SOAP_TYPE__ns1__BillOutstandingAmountReq ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns1__BillOutstandingAmountReq(struct soap *soap, const char *URL, _ns1__BillOutstandingAmountReq const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:BillOutstandingAmountReq", p->soap_type() == SOAP_TYPE__ns1__BillOutstandingAmountReq ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__BillOutstandingAmountReq * SOAP_FMAC4 soap_get__ns1__BillOutstandingAmountReq(struct soap*, _ns1__BillOutstandingAmountReq *, const char*, const char*);

inline int soap_read__ns1__BillOutstandingAmountReq(struct soap *soap, _ns1__BillOutstandingAmountReq *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__BillOutstandingAmountReq(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__BillOutstandingAmountReq(struct soap *soap, const char *URL, _ns1__BillOutstandingAmountReq *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__BillOutstandingAmountReq(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__BillOutstandingAmountReq(struct soap *soap, _ns1__BillOutstandingAmountReq *p)
{
	if (soap_read__ns1__BillOutstandingAmountReq(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__ManageRecurringPaymentsProfileStatusReq_DEFINED
#define SOAP_TYPE__ns1__ManageRecurringPaymentsProfileStatusReq_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__ManageRecurringPaymentsProfileStatusReq(struct soap*, const char*, int, const _ns1__ManageRecurringPaymentsProfileStatusReq *, const char*);
SOAP_FMAC3 _ns1__ManageRecurringPaymentsProfileStatusReq * SOAP_FMAC4 soap_in__ns1__ManageRecurringPaymentsProfileStatusReq(struct soap*, const char*, _ns1__ManageRecurringPaymentsProfileStatusReq *, const char*);
SOAP_FMAC1 _ns1__ManageRecurringPaymentsProfileStatusReq * SOAP_FMAC2 soap_instantiate__ns1__ManageRecurringPaymentsProfileStatusReq(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__ManageRecurringPaymentsProfileStatusReq * soap_new__ns1__ManageRecurringPaymentsProfileStatusReq(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__ManageRecurringPaymentsProfileStatusReq(soap, n, NULL, NULL, NULL);
}

inline _ns1__ManageRecurringPaymentsProfileStatusReq * soap_new_req__ns1__ManageRecurringPaymentsProfileStatusReq(
	struct soap *soap,
	ns1__ManageRecurringPaymentsProfileStatusRequestType *ManageRecurringPaymentsProfileStatusRequest)
{
	_ns1__ManageRecurringPaymentsProfileStatusReq *_p = soap_new__ns1__ManageRecurringPaymentsProfileStatusReq(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__ManageRecurringPaymentsProfileStatusReq::ManageRecurringPaymentsProfileStatusRequest = ManageRecurringPaymentsProfileStatusRequest;
	}
	return _p;
}

inline _ns1__ManageRecurringPaymentsProfileStatusReq * soap_new_set__ns1__ManageRecurringPaymentsProfileStatusReq(
	struct soap *soap,
	ns1__ManageRecurringPaymentsProfileStatusRequestType *ManageRecurringPaymentsProfileStatusRequest)
{
	_ns1__ManageRecurringPaymentsProfileStatusReq *_p = soap_new__ns1__ManageRecurringPaymentsProfileStatusReq(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__ManageRecurringPaymentsProfileStatusReq::ManageRecurringPaymentsProfileStatusRequest = ManageRecurringPaymentsProfileStatusRequest;
	}
	return _p;
}

inline int soap_write__ns1__ManageRecurringPaymentsProfileStatusReq(struct soap *soap, _ns1__ManageRecurringPaymentsProfileStatusReq const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ManageRecurringPaymentsProfileStatusReq", p->soap_type() == SOAP_TYPE__ns1__ManageRecurringPaymentsProfileStatusReq ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__ManageRecurringPaymentsProfileStatusReq(struct soap *soap, const char *URL, _ns1__ManageRecurringPaymentsProfileStatusReq const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ManageRecurringPaymentsProfileStatusReq", p->soap_type() == SOAP_TYPE__ns1__ManageRecurringPaymentsProfileStatusReq ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns1__ManageRecurringPaymentsProfileStatusReq(struct soap *soap, const char *URL, _ns1__ManageRecurringPaymentsProfileStatusReq const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ManageRecurringPaymentsProfileStatusReq", p->soap_type() == SOAP_TYPE__ns1__ManageRecurringPaymentsProfileStatusReq ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__ManageRecurringPaymentsProfileStatusReq * SOAP_FMAC4 soap_get__ns1__ManageRecurringPaymentsProfileStatusReq(struct soap*, _ns1__ManageRecurringPaymentsProfileStatusReq *, const char*, const char*);

inline int soap_read__ns1__ManageRecurringPaymentsProfileStatusReq(struct soap *soap, _ns1__ManageRecurringPaymentsProfileStatusReq *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__ManageRecurringPaymentsProfileStatusReq(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__ManageRecurringPaymentsProfileStatusReq(struct soap *soap, const char *URL, _ns1__ManageRecurringPaymentsProfileStatusReq *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__ManageRecurringPaymentsProfileStatusReq(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__ManageRecurringPaymentsProfileStatusReq(struct soap *soap, _ns1__ManageRecurringPaymentsProfileStatusReq *p)
{
	if (soap_read__ns1__ManageRecurringPaymentsProfileStatusReq(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__GetRecurringPaymentsProfileDetailsReq_DEFINED
#define SOAP_TYPE__ns1__GetRecurringPaymentsProfileDetailsReq_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetRecurringPaymentsProfileDetailsReq(struct soap*, const char*, int, const _ns1__GetRecurringPaymentsProfileDetailsReq *, const char*);
SOAP_FMAC3 _ns1__GetRecurringPaymentsProfileDetailsReq * SOAP_FMAC4 soap_in__ns1__GetRecurringPaymentsProfileDetailsReq(struct soap*, const char*, _ns1__GetRecurringPaymentsProfileDetailsReq *, const char*);
SOAP_FMAC1 _ns1__GetRecurringPaymentsProfileDetailsReq * SOAP_FMAC2 soap_instantiate__ns1__GetRecurringPaymentsProfileDetailsReq(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetRecurringPaymentsProfileDetailsReq * soap_new__ns1__GetRecurringPaymentsProfileDetailsReq(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__GetRecurringPaymentsProfileDetailsReq(soap, n, NULL, NULL, NULL);
}

inline _ns1__GetRecurringPaymentsProfileDetailsReq * soap_new_req__ns1__GetRecurringPaymentsProfileDetailsReq(
	struct soap *soap,
	ns1__GetRecurringPaymentsProfileDetailsRequestType *GetRecurringPaymentsProfileDetailsRequest)
{
	_ns1__GetRecurringPaymentsProfileDetailsReq *_p = soap_new__ns1__GetRecurringPaymentsProfileDetailsReq(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__GetRecurringPaymentsProfileDetailsReq::GetRecurringPaymentsProfileDetailsRequest = GetRecurringPaymentsProfileDetailsRequest;
	}
	return _p;
}

inline _ns1__GetRecurringPaymentsProfileDetailsReq * soap_new_set__ns1__GetRecurringPaymentsProfileDetailsReq(
	struct soap *soap,
	ns1__GetRecurringPaymentsProfileDetailsRequestType *GetRecurringPaymentsProfileDetailsRequest)
{
	_ns1__GetRecurringPaymentsProfileDetailsReq *_p = soap_new__ns1__GetRecurringPaymentsProfileDetailsReq(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__GetRecurringPaymentsProfileDetailsReq::GetRecurringPaymentsProfileDetailsRequest = GetRecurringPaymentsProfileDetailsRequest;
	}
	return _p;
}

inline int soap_write__ns1__GetRecurringPaymentsProfileDetailsReq(struct soap *soap, _ns1__GetRecurringPaymentsProfileDetailsReq const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetRecurringPaymentsProfileDetailsReq", p->soap_type() == SOAP_TYPE__ns1__GetRecurringPaymentsProfileDetailsReq ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__GetRecurringPaymentsProfileDetailsReq(struct soap *soap, const char *URL, _ns1__GetRecurringPaymentsProfileDetailsReq const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetRecurringPaymentsProfileDetailsReq", p->soap_type() == SOAP_TYPE__ns1__GetRecurringPaymentsProfileDetailsReq ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns1__GetRecurringPaymentsProfileDetailsReq(struct soap *soap, const char *URL, _ns1__GetRecurringPaymentsProfileDetailsReq const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetRecurringPaymentsProfileDetailsReq", p->soap_type() == SOAP_TYPE__ns1__GetRecurringPaymentsProfileDetailsReq ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__GetRecurringPaymentsProfileDetailsReq * SOAP_FMAC4 soap_get__ns1__GetRecurringPaymentsProfileDetailsReq(struct soap*, _ns1__GetRecurringPaymentsProfileDetailsReq *, const char*, const char*);

inline int soap_read__ns1__GetRecurringPaymentsProfileDetailsReq(struct soap *soap, _ns1__GetRecurringPaymentsProfileDetailsReq *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__GetRecurringPaymentsProfileDetailsReq(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__GetRecurringPaymentsProfileDetailsReq(struct soap *soap, const char *URL, _ns1__GetRecurringPaymentsProfileDetailsReq *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__GetRecurringPaymentsProfileDetailsReq(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__GetRecurringPaymentsProfileDetailsReq(struct soap *soap, _ns1__GetRecurringPaymentsProfileDetailsReq *p)
{
	if (soap_read__ns1__GetRecurringPaymentsProfileDetailsReq(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__CreateRecurringPaymentsProfileReq_DEFINED
#define SOAP_TYPE__ns1__CreateRecurringPaymentsProfileReq_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__CreateRecurringPaymentsProfileReq(struct soap*, const char*, int, const _ns1__CreateRecurringPaymentsProfileReq *, const char*);
SOAP_FMAC3 _ns1__CreateRecurringPaymentsProfileReq * SOAP_FMAC4 soap_in__ns1__CreateRecurringPaymentsProfileReq(struct soap*, const char*, _ns1__CreateRecurringPaymentsProfileReq *, const char*);
SOAP_FMAC1 _ns1__CreateRecurringPaymentsProfileReq * SOAP_FMAC2 soap_instantiate__ns1__CreateRecurringPaymentsProfileReq(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__CreateRecurringPaymentsProfileReq * soap_new__ns1__CreateRecurringPaymentsProfileReq(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__CreateRecurringPaymentsProfileReq(soap, n, NULL, NULL, NULL);
}

inline _ns1__CreateRecurringPaymentsProfileReq * soap_new_req__ns1__CreateRecurringPaymentsProfileReq(
	struct soap *soap,
	ns1__CreateRecurringPaymentsProfileRequestType *CreateRecurringPaymentsProfileRequest)
{
	_ns1__CreateRecurringPaymentsProfileReq *_p = soap_new__ns1__CreateRecurringPaymentsProfileReq(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__CreateRecurringPaymentsProfileReq::CreateRecurringPaymentsProfileRequest = CreateRecurringPaymentsProfileRequest;
	}
	return _p;
}

inline _ns1__CreateRecurringPaymentsProfileReq * soap_new_set__ns1__CreateRecurringPaymentsProfileReq(
	struct soap *soap,
	ns1__CreateRecurringPaymentsProfileRequestType *CreateRecurringPaymentsProfileRequest)
{
	_ns1__CreateRecurringPaymentsProfileReq *_p = soap_new__ns1__CreateRecurringPaymentsProfileReq(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__CreateRecurringPaymentsProfileReq::CreateRecurringPaymentsProfileRequest = CreateRecurringPaymentsProfileRequest;
	}
	return _p;
}

inline int soap_write__ns1__CreateRecurringPaymentsProfileReq(struct soap *soap, _ns1__CreateRecurringPaymentsProfileReq const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CreateRecurringPaymentsProfileReq", p->soap_type() == SOAP_TYPE__ns1__CreateRecurringPaymentsProfileReq ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__CreateRecurringPaymentsProfileReq(struct soap *soap, const char *URL, _ns1__CreateRecurringPaymentsProfileReq const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CreateRecurringPaymentsProfileReq", p->soap_type() == SOAP_TYPE__ns1__CreateRecurringPaymentsProfileReq ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns1__CreateRecurringPaymentsProfileReq(struct soap *soap, const char *URL, _ns1__CreateRecurringPaymentsProfileReq const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CreateRecurringPaymentsProfileReq", p->soap_type() == SOAP_TYPE__ns1__CreateRecurringPaymentsProfileReq ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__CreateRecurringPaymentsProfileReq * SOAP_FMAC4 soap_get__ns1__CreateRecurringPaymentsProfileReq(struct soap*, _ns1__CreateRecurringPaymentsProfileReq *, const char*, const char*);

inline int soap_read__ns1__CreateRecurringPaymentsProfileReq(struct soap *soap, _ns1__CreateRecurringPaymentsProfileReq *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__CreateRecurringPaymentsProfileReq(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__CreateRecurringPaymentsProfileReq(struct soap *soap, const char *URL, _ns1__CreateRecurringPaymentsProfileReq *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__CreateRecurringPaymentsProfileReq(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__CreateRecurringPaymentsProfileReq(struct soap *soap, _ns1__CreateRecurringPaymentsProfileReq *p)
{
	if (soap_read__ns1__CreateRecurringPaymentsProfileReq(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__DoNonReferencedCreditReq_DEFINED
#define SOAP_TYPE__ns1__DoNonReferencedCreditReq_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__DoNonReferencedCreditReq(struct soap*, const char*, int, const _ns1__DoNonReferencedCreditReq *, const char*);
SOAP_FMAC3 _ns1__DoNonReferencedCreditReq * SOAP_FMAC4 soap_in__ns1__DoNonReferencedCreditReq(struct soap*, const char*, _ns1__DoNonReferencedCreditReq *, const char*);
SOAP_FMAC1 _ns1__DoNonReferencedCreditReq * SOAP_FMAC2 soap_instantiate__ns1__DoNonReferencedCreditReq(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__DoNonReferencedCreditReq * soap_new__ns1__DoNonReferencedCreditReq(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__DoNonReferencedCreditReq(soap, n, NULL, NULL, NULL);
}

inline _ns1__DoNonReferencedCreditReq * soap_new_req__ns1__DoNonReferencedCreditReq(
	struct soap *soap,
	ns1__DoNonReferencedCreditRequestType *DoNonReferencedCreditRequest)
{
	_ns1__DoNonReferencedCreditReq *_p = soap_new__ns1__DoNonReferencedCreditReq(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__DoNonReferencedCreditReq::DoNonReferencedCreditRequest = DoNonReferencedCreditRequest;
	}
	return _p;
}

inline _ns1__DoNonReferencedCreditReq * soap_new_set__ns1__DoNonReferencedCreditReq(
	struct soap *soap,
	ns1__DoNonReferencedCreditRequestType *DoNonReferencedCreditRequest)
{
	_ns1__DoNonReferencedCreditReq *_p = soap_new__ns1__DoNonReferencedCreditReq(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__DoNonReferencedCreditReq::DoNonReferencedCreditRequest = DoNonReferencedCreditRequest;
	}
	return _p;
}

inline int soap_write__ns1__DoNonReferencedCreditReq(struct soap *soap, _ns1__DoNonReferencedCreditReq const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:DoNonReferencedCreditReq", p->soap_type() == SOAP_TYPE__ns1__DoNonReferencedCreditReq ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__DoNonReferencedCreditReq(struct soap *soap, const char *URL, _ns1__DoNonReferencedCreditReq const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:DoNonReferencedCreditReq", p->soap_type() == SOAP_TYPE__ns1__DoNonReferencedCreditReq ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns1__DoNonReferencedCreditReq(struct soap *soap, const char *URL, _ns1__DoNonReferencedCreditReq const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:DoNonReferencedCreditReq", p->soap_type() == SOAP_TYPE__ns1__DoNonReferencedCreditReq ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__DoNonReferencedCreditReq * SOAP_FMAC4 soap_get__ns1__DoNonReferencedCreditReq(struct soap*, _ns1__DoNonReferencedCreditReq *, const char*, const char*);

inline int soap_read__ns1__DoNonReferencedCreditReq(struct soap *soap, _ns1__DoNonReferencedCreditReq *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__DoNonReferencedCreditReq(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__DoNonReferencedCreditReq(struct soap *soap, const char *URL, _ns1__DoNonReferencedCreditReq *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__DoNonReferencedCreditReq(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__DoNonReferencedCreditReq(struct soap *soap, _ns1__DoNonReferencedCreditReq *p)
{
	if (soap_read__ns1__DoNonReferencedCreditReq(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__DoReferenceTransactionReq_DEFINED
#define SOAP_TYPE__ns1__DoReferenceTransactionReq_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__DoReferenceTransactionReq(struct soap*, const char*, int, const _ns1__DoReferenceTransactionReq *, const char*);
SOAP_FMAC3 _ns1__DoReferenceTransactionReq * SOAP_FMAC4 soap_in__ns1__DoReferenceTransactionReq(struct soap*, const char*, _ns1__DoReferenceTransactionReq *, const char*);
SOAP_FMAC1 _ns1__DoReferenceTransactionReq * SOAP_FMAC2 soap_instantiate__ns1__DoReferenceTransactionReq(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__DoReferenceTransactionReq * soap_new__ns1__DoReferenceTransactionReq(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__DoReferenceTransactionReq(soap, n, NULL, NULL, NULL);
}

inline _ns1__DoReferenceTransactionReq * soap_new_req__ns1__DoReferenceTransactionReq(
	struct soap *soap,
	ns1__DoReferenceTransactionRequestType *DoReferenceTransactionRequest)
{
	_ns1__DoReferenceTransactionReq *_p = soap_new__ns1__DoReferenceTransactionReq(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__DoReferenceTransactionReq::DoReferenceTransactionRequest = DoReferenceTransactionRequest;
	}
	return _p;
}

inline _ns1__DoReferenceTransactionReq * soap_new_set__ns1__DoReferenceTransactionReq(
	struct soap *soap,
	ns1__DoReferenceTransactionRequestType *DoReferenceTransactionRequest)
{
	_ns1__DoReferenceTransactionReq *_p = soap_new__ns1__DoReferenceTransactionReq(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__DoReferenceTransactionReq::DoReferenceTransactionRequest = DoReferenceTransactionRequest;
	}
	return _p;
}

inline int soap_write__ns1__DoReferenceTransactionReq(struct soap *soap, _ns1__DoReferenceTransactionReq const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:DoReferenceTransactionReq", p->soap_type() == SOAP_TYPE__ns1__DoReferenceTransactionReq ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__DoReferenceTransactionReq(struct soap *soap, const char *URL, _ns1__DoReferenceTransactionReq const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:DoReferenceTransactionReq", p->soap_type() == SOAP_TYPE__ns1__DoReferenceTransactionReq ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns1__DoReferenceTransactionReq(struct soap *soap, const char *URL, _ns1__DoReferenceTransactionReq const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:DoReferenceTransactionReq", p->soap_type() == SOAP_TYPE__ns1__DoReferenceTransactionReq ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__DoReferenceTransactionReq * SOAP_FMAC4 soap_get__ns1__DoReferenceTransactionReq(struct soap*, _ns1__DoReferenceTransactionReq *, const char*, const char*);

inline int soap_read__ns1__DoReferenceTransactionReq(struct soap *soap, _ns1__DoReferenceTransactionReq *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__DoReferenceTransactionReq(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__DoReferenceTransactionReq(struct soap *soap, const char *URL, _ns1__DoReferenceTransactionReq *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__DoReferenceTransactionReq(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__DoReferenceTransactionReq(struct soap *soap, _ns1__DoReferenceTransactionReq *p)
{
	if (soap_read__ns1__DoReferenceTransactionReq(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__CreateBillingAgreementReq_DEFINED
#define SOAP_TYPE__ns1__CreateBillingAgreementReq_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__CreateBillingAgreementReq(struct soap*, const char*, int, const _ns1__CreateBillingAgreementReq *, const char*);
SOAP_FMAC3 _ns1__CreateBillingAgreementReq * SOAP_FMAC4 soap_in__ns1__CreateBillingAgreementReq(struct soap*, const char*, _ns1__CreateBillingAgreementReq *, const char*);
SOAP_FMAC1 _ns1__CreateBillingAgreementReq * SOAP_FMAC2 soap_instantiate__ns1__CreateBillingAgreementReq(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__CreateBillingAgreementReq * soap_new__ns1__CreateBillingAgreementReq(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__CreateBillingAgreementReq(soap, n, NULL, NULL, NULL);
}

inline _ns1__CreateBillingAgreementReq * soap_new_req__ns1__CreateBillingAgreementReq(
	struct soap *soap,
	ns1__CreateBillingAgreementRequestType *CreateBillingAgreementRequest)
{
	_ns1__CreateBillingAgreementReq *_p = soap_new__ns1__CreateBillingAgreementReq(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__CreateBillingAgreementReq::CreateBillingAgreementRequest = CreateBillingAgreementRequest;
	}
	return _p;
}

inline _ns1__CreateBillingAgreementReq * soap_new_set__ns1__CreateBillingAgreementReq(
	struct soap *soap,
	ns1__CreateBillingAgreementRequestType *CreateBillingAgreementRequest)
{
	_ns1__CreateBillingAgreementReq *_p = soap_new__ns1__CreateBillingAgreementReq(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__CreateBillingAgreementReq::CreateBillingAgreementRequest = CreateBillingAgreementRequest;
	}
	return _p;
}

inline int soap_write__ns1__CreateBillingAgreementReq(struct soap *soap, _ns1__CreateBillingAgreementReq const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CreateBillingAgreementReq", p->soap_type() == SOAP_TYPE__ns1__CreateBillingAgreementReq ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__CreateBillingAgreementReq(struct soap *soap, const char *URL, _ns1__CreateBillingAgreementReq const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CreateBillingAgreementReq", p->soap_type() == SOAP_TYPE__ns1__CreateBillingAgreementReq ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns1__CreateBillingAgreementReq(struct soap *soap, const char *URL, _ns1__CreateBillingAgreementReq const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CreateBillingAgreementReq", p->soap_type() == SOAP_TYPE__ns1__CreateBillingAgreementReq ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__CreateBillingAgreementReq * SOAP_FMAC4 soap_get__ns1__CreateBillingAgreementReq(struct soap*, _ns1__CreateBillingAgreementReq *, const char*, const char*);

inline int soap_read__ns1__CreateBillingAgreementReq(struct soap *soap, _ns1__CreateBillingAgreementReq *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__CreateBillingAgreementReq(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__CreateBillingAgreementReq(struct soap *soap, const char *URL, _ns1__CreateBillingAgreementReq *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__CreateBillingAgreementReq(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__CreateBillingAgreementReq(struct soap *soap, _ns1__CreateBillingAgreementReq *p)
{
	if (soap_read__ns1__CreateBillingAgreementReq(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__GetBillingAgreementCustomerDetailsReq_DEFINED
#define SOAP_TYPE__ns1__GetBillingAgreementCustomerDetailsReq_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetBillingAgreementCustomerDetailsReq(struct soap*, const char*, int, const _ns1__GetBillingAgreementCustomerDetailsReq *, const char*);
SOAP_FMAC3 _ns1__GetBillingAgreementCustomerDetailsReq * SOAP_FMAC4 soap_in__ns1__GetBillingAgreementCustomerDetailsReq(struct soap*, const char*, _ns1__GetBillingAgreementCustomerDetailsReq *, const char*);
SOAP_FMAC1 _ns1__GetBillingAgreementCustomerDetailsReq * SOAP_FMAC2 soap_instantiate__ns1__GetBillingAgreementCustomerDetailsReq(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetBillingAgreementCustomerDetailsReq * soap_new__ns1__GetBillingAgreementCustomerDetailsReq(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__GetBillingAgreementCustomerDetailsReq(soap, n, NULL, NULL, NULL);
}

inline _ns1__GetBillingAgreementCustomerDetailsReq * soap_new_req__ns1__GetBillingAgreementCustomerDetailsReq(
	struct soap *soap,
	ns1__GetBillingAgreementCustomerDetailsRequestType *GetBillingAgreementCustomerDetailsRequest)
{
	_ns1__GetBillingAgreementCustomerDetailsReq *_p = soap_new__ns1__GetBillingAgreementCustomerDetailsReq(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__GetBillingAgreementCustomerDetailsReq::GetBillingAgreementCustomerDetailsRequest = GetBillingAgreementCustomerDetailsRequest;
	}
	return _p;
}

inline _ns1__GetBillingAgreementCustomerDetailsReq * soap_new_set__ns1__GetBillingAgreementCustomerDetailsReq(
	struct soap *soap,
	ns1__GetBillingAgreementCustomerDetailsRequestType *GetBillingAgreementCustomerDetailsRequest)
{
	_ns1__GetBillingAgreementCustomerDetailsReq *_p = soap_new__ns1__GetBillingAgreementCustomerDetailsReq(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__GetBillingAgreementCustomerDetailsReq::GetBillingAgreementCustomerDetailsRequest = GetBillingAgreementCustomerDetailsRequest;
	}
	return _p;
}

inline int soap_write__ns1__GetBillingAgreementCustomerDetailsReq(struct soap *soap, _ns1__GetBillingAgreementCustomerDetailsReq const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetBillingAgreementCustomerDetailsReq", p->soap_type() == SOAP_TYPE__ns1__GetBillingAgreementCustomerDetailsReq ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__GetBillingAgreementCustomerDetailsReq(struct soap *soap, const char *URL, _ns1__GetBillingAgreementCustomerDetailsReq const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetBillingAgreementCustomerDetailsReq", p->soap_type() == SOAP_TYPE__ns1__GetBillingAgreementCustomerDetailsReq ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns1__GetBillingAgreementCustomerDetailsReq(struct soap *soap, const char *URL, _ns1__GetBillingAgreementCustomerDetailsReq const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetBillingAgreementCustomerDetailsReq", p->soap_type() == SOAP_TYPE__ns1__GetBillingAgreementCustomerDetailsReq ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__GetBillingAgreementCustomerDetailsReq * SOAP_FMAC4 soap_get__ns1__GetBillingAgreementCustomerDetailsReq(struct soap*, _ns1__GetBillingAgreementCustomerDetailsReq *, const char*, const char*);

inline int soap_read__ns1__GetBillingAgreementCustomerDetailsReq(struct soap *soap, _ns1__GetBillingAgreementCustomerDetailsReq *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__GetBillingAgreementCustomerDetailsReq(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__GetBillingAgreementCustomerDetailsReq(struct soap *soap, const char *URL, _ns1__GetBillingAgreementCustomerDetailsReq *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__GetBillingAgreementCustomerDetailsReq(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__GetBillingAgreementCustomerDetailsReq(struct soap *soap, _ns1__GetBillingAgreementCustomerDetailsReq *p)
{
	if (soap_read__ns1__GetBillingAgreementCustomerDetailsReq(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__SetCustomerBillingAgreementReq_DEFINED
#define SOAP_TYPE__ns1__SetCustomerBillingAgreementReq_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__SetCustomerBillingAgreementReq(struct soap*, const char*, int, const _ns1__SetCustomerBillingAgreementReq *, const char*);
SOAP_FMAC3 _ns1__SetCustomerBillingAgreementReq * SOAP_FMAC4 soap_in__ns1__SetCustomerBillingAgreementReq(struct soap*, const char*, _ns1__SetCustomerBillingAgreementReq *, const char*);
SOAP_FMAC1 _ns1__SetCustomerBillingAgreementReq * SOAP_FMAC2 soap_instantiate__ns1__SetCustomerBillingAgreementReq(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__SetCustomerBillingAgreementReq * soap_new__ns1__SetCustomerBillingAgreementReq(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__SetCustomerBillingAgreementReq(soap, n, NULL, NULL, NULL);
}

inline _ns1__SetCustomerBillingAgreementReq * soap_new_req__ns1__SetCustomerBillingAgreementReq(
	struct soap *soap,
	ns1__SetCustomerBillingAgreementRequestType *SetCustomerBillingAgreementRequest)
{
	_ns1__SetCustomerBillingAgreementReq *_p = soap_new__ns1__SetCustomerBillingAgreementReq(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__SetCustomerBillingAgreementReq::SetCustomerBillingAgreementRequest = SetCustomerBillingAgreementRequest;
	}
	return _p;
}

inline _ns1__SetCustomerBillingAgreementReq * soap_new_set__ns1__SetCustomerBillingAgreementReq(
	struct soap *soap,
	ns1__SetCustomerBillingAgreementRequestType *SetCustomerBillingAgreementRequest)
{
	_ns1__SetCustomerBillingAgreementReq *_p = soap_new__ns1__SetCustomerBillingAgreementReq(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__SetCustomerBillingAgreementReq::SetCustomerBillingAgreementRequest = SetCustomerBillingAgreementRequest;
	}
	return _p;
}

inline int soap_write__ns1__SetCustomerBillingAgreementReq(struct soap *soap, _ns1__SetCustomerBillingAgreementReq const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SetCustomerBillingAgreementReq", p->soap_type() == SOAP_TYPE__ns1__SetCustomerBillingAgreementReq ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__SetCustomerBillingAgreementReq(struct soap *soap, const char *URL, _ns1__SetCustomerBillingAgreementReq const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SetCustomerBillingAgreementReq", p->soap_type() == SOAP_TYPE__ns1__SetCustomerBillingAgreementReq ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns1__SetCustomerBillingAgreementReq(struct soap *soap, const char *URL, _ns1__SetCustomerBillingAgreementReq const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SetCustomerBillingAgreementReq", p->soap_type() == SOAP_TYPE__ns1__SetCustomerBillingAgreementReq ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__SetCustomerBillingAgreementReq * SOAP_FMAC4 soap_get__ns1__SetCustomerBillingAgreementReq(struct soap*, _ns1__SetCustomerBillingAgreementReq *, const char*, const char*);

inline int soap_read__ns1__SetCustomerBillingAgreementReq(struct soap *soap, _ns1__SetCustomerBillingAgreementReq *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__SetCustomerBillingAgreementReq(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__SetCustomerBillingAgreementReq(struct soap *soap, const char *URL, _ns1__SetCustomerBillingAgreementReq *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__SetCustomerBillingAgreementReq(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__SetCustomerBillingAgreementReq(struct soap *soap, _ns1__SetCustomerBillingAgreementReq *p)
{
	if (soap_read__ns1__SetCustomerBillingAgreementReq(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__GetBalanceReq_DEFINED
#define SOAP_TYPE__ns1__GetBalanceReq_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetBalanceReq(struct soap*, const char*, int, const _ns1__GetBalanceReq *, const char*);
SOAP_FMAC3 _ns1__GetBalanceReq * SOAP_FMAC4 soap_in__ns1__GetBalanceReq(struct soap*, const char*, _ns1__GetBalanceReq *, const char*);
SOAP_FMAC1 _ns1__GetBalanceReq * SOAP_FMAC2 soap_instantiate__ns1__GetBalanceReq(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetBalanceReq * soap_new__ns1__GetBalanceReq(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__GetBalanceReq(soap, n, NULL, NULL, NULL);
}

inline _ns1__GetBalanceReq * soap_new_req__ns1__GetBalanceReq(
	struct soap *soap,
	ns1__GetBalanceRequestType *GetBalanceRequest)
{
	_ns1__GetBalanceReq *_p = soap_new__ns1__GetBalanceReq(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__GetBalanceReq::GetBalanceRequest = GetBalanceRequest;
	}
	return _p;
}

inline _ns1__GetBalanceReq * soap_new_set__ns1__GetBalanceReq(
	struct soap *soap,
	ns1__GetBalanceRequestType *GetBalanceRequest)
{
	_ns1__GetBalanceReq *_p = soap_new__ns1__GetBalanceReq(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__GetBalanceReq::GetBalanceRequest = GetBalanceRequest;
	}
	return _p;
}

inline int soap_write__ns1__GetBalanceReq(struct soap *soap, _ns1__GetBalanceReq const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetBalanceReq", p->soap_type() == SOAP_TYPE__ns1__GetBalanceReq ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__GetBalanceReq(struct soap *soap, const char *URL, _ns1__GetBalanceReq const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetBalanceReq", p->soap_type() == SOAP_TYPE__ns1__GetBalanceReq ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns1__GetBalanceReq(struct soap *soap, const char *URL, _ns1__GetBalanceReq const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetBalanceReq", p->soap_type() == SOAP_TYPE__ns1__GetBalanceReq ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__GetBalanceReq * SOAP_FMAC4 soap_get__ns1__GetBalanceReq(struct soap*, _ns1__GetBalanceReq *, const char*, const char*);

inline int soap_read__ns1__GetBalanceReq(struct soap *soap, _ns1__GetBalanceReq *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__GetBalanceReq(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__GetBalanceReq(struct soap *soap, const char *URL, _ns1__GetBalanceReq *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__GetBalanceReq(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__GetBalanceReq(struct soap *soap, _ns1__GetBalanceReq *p)
{
	if (soap_read__ns1__GetBalanceReq(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__DoMobileCheckoutPaymentReq_DEFINED
#define SOAP_TYPE__ns1__DoMobileCheckoutPaymentReq_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__DoMobileCheckoutPaymentReq(struct soap*, const char*, int, const _ns1__DoMobileCheckoutPaymentReq *, const char*);
SOAP_FMAC3 _ns1__DoMobileCheckoutPaymentReq * SOAP_FMAC4 soap_in__ns1__DoMobileCheckoutPaymentReq(struct soap*, const char*, _ns1__DoMobileCheckoutPaymentReq *, const char*);
SOAP_FMAC1 _ns1__DoMobileCheckoutPaymentReq * SOAP_FMAC2 soap_instantiate__ns1__DoMobileCheckoutPaymentReq(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__DoMobileCheckoutPaymentReq * soap_new__ns1__DoMobileCheckoutPaymentReq(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__DoMobileCheckoutPaymentReq(soap, n, NULL, NULL, NULL);
}

inline _ns1__DoMobileCheckoutPaymentReq * soap_new_req__ns1__DoMobileCheckoutPaymentReq(
	struct soap *soap,
	ns1__DoMobileCheckoutPaymentRequestType *DoMobileCheckoutPaymentRequest)
{
	_ns1__DoMobileCheckoutPaymentReq *_p = soap_new__ns1__DoMobileCheckoutPaymentReq(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__DoMobileCheckoutPaymentReq::DoMobileCheckoutPaymentRequest = DoMobileCheckoutPaymentRequest;
	}
	return _p;
}

inline _ns1__DoMobileCheckoutPaymentReq * soap_new_set__ns1__DoMobileCheckoutPaymentReq(
	struct soap *soap,
	ns1__DoMobileCheckoutPaymentRequestType *DoMobileCheckoutPaymentRequest)
{
	_ns1__DoMobileCheckoutPaymentReq *_p = soap_new__ns1__DoMobileCheckoutPaymentReq(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__DoMobileCheckoutPaymentReq::DoMobileCheckoutPaymentRequest = DoMobileCheckoutPaymentRequest;
	}
	return _p;
}

inline int soap_write__ns1__DoMobileCheckoutPaymentReq(struct soap *soap, _ns1__DoMobileCheckoutPaymentReq const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:DoMobileCheckoutPaymentReq", p->soap_type() == SOAP_TYPE__ns1__DoMobileCheckoutPaymentReq ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__DoMobileCheckoutPaymentReq(struct soap *soap, const char *URL, _ns1__DoMobileCheckoutPaymentReq const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:DoMobileCheckoutPaymentReq", p->soap_type() == SOAP_TYPE__ns1__DoMobileCheckoutPaymentReq ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns1__DoMobileCheckoutPaymentReq(struct soap *soap, const char *URL, _ns1__DoMobileCheckoutPaymentReq const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:DoMobileCheckoutPaymentReq", p->soap_type() == SOAP_TYPE__ns1__DoMobileCheckoutPaymentReq ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__DoMobileCheckoutPaymentReq * SOAP_FMAC4 soap_get__ns1__DoMobileCheckoutPaymentReq(struct soap*, _ns1__DoMobileCheckoutPaymentReq *, const char*, const char*);

inline int soap_read__ns1__DoMobileCheckoutPaymentReq(struct soap *soap, _ns1__DoMobileCheckoutPaymentReq *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__DoMobileCheckoutPaymentReq(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__DoMobileCheckoutPaymentReq(struct soap *soap, const char *URL, _ns1__DoMobileCheckoutPaymentReq *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__DoMobileCheckoutPaymentReq(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__DoMobileCheckoutPaymentReq(struct soap *soap, _ns1__DoMobileCheckoutPaymentReq *p)
{
	if (soap_read__ns1__DoMobileCheckoutPaymentReq(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__SetMobileCheckoutReq_DEFINED
#define SOAP_TYPE__ns1__SetMobileCheckoutReq_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__SetMobileCheckoutReq(struct soap*, const char*, int, const _ns1__SetMobileCheckoutReq *, const char*);
SOAP_FMAC3 _ns1__SetMobileCheckoutReq * SOAP_FMAC4 soap_in__ns1__SetMobileCheckoutReq(struct soap*, const char*, _ns1__SetMobileCheckoutReq *, const char*);
SOAP_FMAC1 _ns1__SetMobileCheckoutReq * SOAP_FMAC2 soap_instantiate__ns1__SetMobileCheckoutReq(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__SetMobileCheckoutReq * soap_new__ns1__SetMobileCheckoutReq(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__SetMobileCheckoutReq(soap, n, NULL, NULL, NULL);
}

inline _ns1__SetMobileCheckoutReq * soap_new_req__ns1__SetMobileCheckoutReq(
	struct soap *soap,
	ns1__SetMobileCheckoutRequestType *SetMobileCheckoutRequest)
{
	_ns1__SetMobileCheckoutReq *_p = soap_new__ns1__SetMobileCheckoutReq(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__SetMobileCheckoutReq::SetMobileCheckoutRequest = SetMobileCheckoutRequest;
	}
	return _p;
}

inline _ns1__SetMobileCheckoutReq * soap_new_set__ns1__SetMobileCheckoutReq(
	struct soap *soap,
	ns1__SetMobileCheckoutRequestType *SetMobileCheckoutRequest)
{
	_ns1__SetMobileCheckoutReq *_p = soap_new__ns1__SetMobileCheckoutReq(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__SetMobileCheckoutReq::SetMobileCheckoutRequest = SetMobileCheckoutRequest;
	}
	return _p;
}

inline int soap_write__ns1__SetMobileCheckoutReq(struct soap *soap, _ns1__SetMobileCheckoutReq const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SetMobileCheckoutReq", p->soap_type() == SOAP_TYPE__ns1__SetMobileCheckoutReq ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__SetMobileCheckoutReq(struct soap *soap, const char *URL, _ns1__SetMobileCheckoutReq const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SetMobileCheckoutReq", p->soap_type() == SOAP_TYPE__ns1__SetMobileCheckoutReq ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns1__SetMobileCheckoutReq(struct soap *soap, const char *URL, _ns1__SetMobileCheckoutReq const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SetMobileCheckoutReq", p->soap_type() == SOAP_TYPE__ns1__SetMobileCheckoutReq ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__SetMobileCheckoutReq * SOAP_FMAC4 soap_get__ns1__SetMobileCheckoutReq(struct soap*, _ns1__SetMobileCheckoutReq *, const char*, const char*);

inline int soap_read__ns1__SetMobileCheckoutReq(struct soap *soap, _ns1__SetMobileCheckoutReq *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__SetMobileCheckoutReq(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__SetMobileCheckoutReq(struct soap *soap, const char *URL, _ns1__SetMobileCheckoutReq *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__SetMobileCheckoutReq(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__SetMobileCheckoutReq(struct soap *soap, _ns1__SetMobileCheckoutReq *p)
{
	if (soap_read__ns1__SetMobileCheckoutReq(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__GetMobileStatusReq_DEFINED
#define SOAP_TYPE__ns1__GetMobileStatusReq_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetMobileStatusReq(struct soap*, const char*, int, const _ns1__GetMobileStatusReq *, const char*);
SOAP_FMAC3 _ns1__GetMobileStatusReq * SOAP_FMAC4 soap_in__ns1__GetMobileStatusReq(struct soap*, const char*, _ns1__GetMobileStatusReq *, const char*);
SOAP_FMAC1 _ns1__GetMobileStatusReq * SOAP_FMAC2 soap_instantiate__ns1__GetMobileStatusReq(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetMobileStatusReq * soap_new__ns1__GetMobileStatusReq(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__GetMobileStatusReq(soap, n, NULL, NULL, NULL);
}

inline _ns1__GetMobileStatusReq * soap_new_req__ns1__GetMobileStatusReq(
	struct soap *soap,
	ns1__GetMobileStatusRequestType *GetMobileStatusRequest)
{
	_ns1__GetMobileStatusReq *_p = soap_new__ns1__GetMobileStatusReq(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__GetMobileStatusReq::GetMobileStatusRequest = GetMobileStatusRequest;
	}
	return _p;
}

inline _ns1__GetMobileStatusReq * soap_new_set__ns1__GetMobileStatusReq(
	struct soap *soap,
	ns1__GetMobileStatusRequestType *GetMobileStatusRequest)
{
	_ns1__GetMobileStatusReq *_p = soap_new__ns1__GetMobileStatusReq(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__GetMobileStatusReq::GetMobileStatusRequest = GetMobileStatusRequest;
	}
	return _p;
}

inline int soap_write__ns1__GetMobileStatusReq(struct soap *soap, _ns1__GetMobileStatusReq const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetMobileStatusReq", p->soap_type() == SOAP_TYPE__ns1__GetMobileStatusReq ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__GetMobileStatusReq(struct soap *soap, const char *URL, _ns1__GetMobileStatusReq const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetMobileStatusReq", p->soap_type() == SOAP_TYPE__ns1__GetMobileStatusReq ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns1__GetMobileStatusReq(struct soap *soap, const char *URL, _ns1__GetMobileStatusReq const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetMobileStatusReq", p->soap_type() == SOAP_TYPE__ns1__GetMobileStatusReq ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__GetMobileStatusReq * SOAP_FMAC4 soap_get__ns1__GetMobileStatusReq(struct soap*, _ns1__GetMobileStatusReq *, const char*, const char*);

inline int soap_read__ns1__GetMobileStatusReq(struct soap *soap, _ns1__GetMobileStatusReq *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__GetMobileStatusReq(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__GetMobileStatusReq(struct soap *soap, const char *URL, _ns1__GetMobileStatusReq *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__GetMobileStatusReq(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__GetMobileStatusReq(struct soap *soap, _ns1__GetMobileStatusReq *p)
{
	if (soap_read__ns1__GetMobileStatusReq(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__CreateMobilePaymentReq_DEFINED
#define SOAP_TYPE__ns1__CreateMobilePaymentReq_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__CreateMobilePaymentReq(struct soap*, const char*, int, const _ns1__CreateMobilePaymentReq *, const char*);
SOAP_FMAC3 _ns1__CreateMobilePaymentReq * SOAP_FMAC4 soap_in__ns1__CreateMobilePaymentReq(struct soap*, const char*, _ns1__CreateMobilePaymentReq *, const char*);
SOAP_FMAC1 _ns1__CreateMobilePaymentReq * SOAP_FMAC2 soap_instantiate__ns1__CreateMobilePaymentReq(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__CreateMobilePaymentReq * soap_new__ns1__CreateMobilePaymentReq(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__CreateMobilePaymentReq(soap, n, NULL, NULL, NULL);
}

inline _ns1__CreateMobilePaymentReq * soap_new_req__ns1__CreateMobilePaymentReq(
	struct soap *soap,
	ns1__CreateMobilePaymentRequestType *CreateMobilePaymentRequest)
{
	_ns1__CreateMobilePaymentReq *_p = soap_new__ns1__CreateMobilePaymentReq(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__CreateMobilePaymentReq::CreateMobilePaymentRequest = CreateMobilePaymentRequest;
	}
	return _p;
}

inline _ns1__CreateMobilePaymentReq * soap_new_set__ns1__CreateMobilePaymentReq(
	struct soap *soap,
	ns1__CreateMobilePaymentRequestType *CreateMobilePaymentRequest)
{
	_ns1__CreateMobilePaymentReq *_p = soap_new__ns1__CreateMobilePaymentReq(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__CreateMobilePaymentReq::CreateMobilePaymentRequest = CreateMobilePaymentRequest;
	}
	return _p;
}

inline int soap_write__ns1__CreateMobilePaymentReq(struct soap *soap, _ns1__CreateMobilePaymentReq const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CreateMobilePaymentReq", p->soap_type() == SOAP_TYPE__ns1__CreateMobilePaymentReq ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__CreateMobilePaymentReq(struct soap *soap, const char *URL, _ns1__CreateMobilePaymentReq const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CreateMobilePaymentReq", p->soap_type() == SOAP_TYPE__ns1__CreateMobilePaymentReq ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns1__CreateMobilePaymentReq(struct soap *soap, const char *URL, _ns1__CreateMobilePaymentReq const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CreateMobilePaymentReq", p->soap_type() == SOAP_TYPE__ns1__CreateMobilePaymentReq ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__CreateMobilePaymentReq * SOAP_FMAC4 soap_get__ns1__CreateMobilePaymentReq(struct soap*, _ns1__CreateMobilePaymentReq *, const char*, const char*);

inline int soap_read__ns1__CreateMobilePaymentReq(struct soap *soap, _ns1__CreateMobilePaymentReq *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__CreateMobilePaymentReq(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__CreateMobilePaymentReq(struct soap *soap, const char *URL, _ns1__CreateMobilePaymentReq *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__CreateMobilePaymentReq(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__CreateMobilePaymentReq(struct soap *soap, _ns1__CreateMobilePaymentReq *p)
{
	if (soap_read__ns1__CreateMobilePaymentReq(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__DoUATPAuthorizationReq_DEFINED
#define SOAP_TYPE__ns1__DoUATPAuthorizationReq_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__DoUATPAuthorizationReq(struct soap*, const char*, int, const _ns1__DoUATPAuthorizationReq *, const char*);
SOAP_FMAC3 _ns1__DoUATPAuthorizationReq * SOAP_FMAC4 soap_in__ns1__DoUATPAuthorizationReq(struct soap*, const char*, _ns1__DoUATPAuthorizationReq *, const char*);
SOAP_FMAC1 _ns1__DoUATPAuthorizationReq * SOAP_FMAC2 soap_instantiate__ns1__DoUATPAuthorizationReq(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__DoUATPAuthorizationReq * soap_new__ns1__DoUATPAuthorizationReq(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__DoUATPAuthorizationReq(soap, n, NULL, NULL, NULL);
}

inline _ns1__DoUATPAuthorizationReq * soap_new_req__ns1__DoUATPAuthorizationReq(
	struct soap *soap,
	ns1__DoUATPAuthorizationRequestType *DoUATPAuthorizationRequest)
{
	_ns1__DoUATPAuthorizationReq *_p = soap_new__ns1__DoUATPAuthorizationReq(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__DoUATPAuthorizationReq::DoUATPAuthorizationRequest = DoUATPAuthorizationRequest;
	}
	return _p;
}

inline _ns1__DoUATPAuthorizationReq * soap_new_set__ns1__DoUATPAuthorizationReq(
	struct soap *soap,
	ns1__DoUATPAuthorizationRequestType *DoUATPAuthorizationRequest)
{
	_ns1__DoUATPAuthorizationReq *_p = soap_new__ns1__DoUATPAuthorizationReq(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__DoUATPAuthorizationReq::DoUATPAuthorizationRequest = DoUATPAuthorizationRequest;
	}
	return _p;
}

inline int soap_write__ns1__DoUATPAuthorizationReq(struct soap *soap, _ns1__DoUATPAuthorizationReq const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:DoUATPAuthorizationReq", p->soap_type() == SOAP_TYPE__ns1__DoUATPAuthorizationReq ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__DoUATPAuthorizationReq(struct soap *soap, const char *URL, _ns1__DoUATPAuthorizationReq const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:DoUATPAuthorizationReq", p->soap_type() == SOAP_TYPE__ns1__DoUATPAuthorizationReq ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns1__DoUATPAuthorizationReq(struct soap *soap, const char *URL, _ns1__DoUATPAuthorizationReq const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:DoUATPAuthorizationReq", p->soap_type() == SOAP_TYPE__ns1__DoUATPAuthorizationReq ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__DoUATPAuthorizationReq * SOAP_FMAC4 soap_get__ns1__DoUATPAuthorizationReq(struct soap*, _ns1__DoUATPAuthorizationReq *, const char*, const char*);

inline int soap_read__ns1__DoUATPAuthorizationReq(struct soap *soap, _ns1__DoUATPAuthorizationReq *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__DoUATPAuthorizationReq(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__DoUATPAuthorizationReq(struct soap *soap, const char *URL, _ns1__DoUATPAuthorizationReq *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__DoUATPAuthorizationReq(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__DoUATPAuthorizationReq(struct soap *soap, _ns1__DoUATPAuthorizationReq *p)
{
	if (soap_read__ns1__DoUATPAuthorizationReq(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__UpdateAuthorizationReq_DEFINED
#define SOAP_TYPE__ns1__UpdateAuthorizationReq_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__UpdateAuthorizationReq(struct soap*, const char*, int, const _ns1__UpdateAuthorizationReq *, const char*);
SOAP_FMAC3 _ns1__UpdateAuthorizationReq * SOAP_FMAC4 soap_in__ns1__UpdateAuthorizationReq(struct soap*, const char*, _ns1__UpdateAuthorizationReq *, const char*);
SOAP_FMAC1 _ns1__UpdateAuthorizationReq * SOAP_FMAC2 soap_instantiate__ns1__UpdateAuthorizationReq(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__UpdateAuthorizationReq * soap_new__ns1__UpdateAuthorizationReq(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__UpdateAuthorizationReq(soap, n, NULL, NULL, NULL);
}

inline _ns1__UpdateAuthorizationReq * soap_new_req__ns1__UpdateAuthorizationReq(
	struct soap *soap,
	ns1__UpdateAuthorizationRequestType *UpdateAuthorizationRequest)
{
	_ns1__UpdateAuthorizationReq *_p = soap_new__ns1__UpdateAuthorizationReq(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__UpdateAuthorizationReq::UpdateAuthorizationRequest = UpdateAuthorizationRequest;
	}
	return _p;
}

inline _ns1__UpdateAuthorizationReq * soap_new_set__ns1__UpdateAuthorizationReq(
	struct soap *soap,
	ns1__UpdateAuthorizationRequestType *UpdateAuthorizationRequest)
{
	_ns1__UpdateAuthorizationReq *_p = soap_new__ns1__UpdateAuthorizationReq(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__UpdateAuthorizationReq::UpdateAuthorizationRequest = UpdateAuthorizationRequest;
	}
	return _p;
}

inline int soap_write__ns1__UpdateAuthorizationReq(struct soap *soap, _ns1__UpdateAuthorizationReq const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:UpdateAuthorizationReq", p->soap_type() == SOAP_TYPE__ns1__UpdateAuthorizationReq ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__UpdateAuthorizationReq(struct soap *soap, const char *URL, _ns1__UpdateAuthorizationReq const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:UpdateAuthorizationReq", p->soap_type() == SOAP_TYPE__ns1__UpdateAuthorizationReq ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns1__UpdateAuthorizationReq(struct soap *soap, const char *URL, _ns1__UpdateAuthorizationReq const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:UpdateAuthorizationReq", p->soap_type() == SOAP_TYPE__ns1__UpdateAuthorizationReq ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__UpdateAuthorizationReq * SOAP_FMAC4 soap_get__ns1__UpdateAuthorizationReq(struct soap*, _ns1__UpdateAuthorizationReq *, const char*, const char*);

inline int soap_read__ns1__UpdateAuthorizationReq(struct soap *soap, _ns1__UpdateAuthorizationReq *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__UpdateAuthorizationReq(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__UpdateAuthorizationReq(struct soap *soap, const char *URL, _ns1__UpdateAuthorizationReq *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__UpdateAuthorizationReq(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__UpdateAuthorizationReq(struct soap *soap, _ns1__UpdateAuthorizationReq *p)
{
	if (soap_read__ns1__UpdateAuthorizationReq(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__DoAuthorizationReq_DEFINED
#define SOAP_TYPE__ns1__DoAuthorizationReq_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__DoAuthorizationReq(struct soap*, const char*, int, const _ns1__DoAuthorizationReq *, const char*);
SOAP_FMAC3 _ns1__DoAuthorizationReq * SOAP_FMAC4 soap_in__ns1__DoAuthorizationReq(struct soap*, const char*, _ns1__DoAuthorizationReq *, const char*);
SOAP_FMAC1 _ns1__DoAuthorizationReq * SOAP_FMAC2 soap_instantiate__ns1__DoAuthorizationReq(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__DoAuthorizationReq * soap_new__ns1__DoAuthorizationReq(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__DoAuthorizationReq(soap, n, NULL, NULL, NULL);
}

inline _ns1__DoAuthorizationReq * soap_new_req__ns1__DoAuthorizationReq(
	struct soap *soap,
	ns1__DoAuthorizationRequestType *DoAuthorizationRequest)
{
	_ns1__DoAuthorizationReq *_p = soap_new__ns1__DoAuthorizationReq(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__DoAuthorizationReq::DoAuthorizationRequest = DoAuthorizationRequest;
	}
	return _p;
}

inline _ns1__DoAuthorizationReq * soap_new_set__ns1__DoAuthorizationReq(
	struct soap *soap,
	ns1__DoAuthorizationRequestType *DoAuthorizationRequest)
{
	_ns1__DoAuthorizationReq *_p = soap_new__ns1__DoAuthorizationReq(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__DoAuthorizationReq::DoAuthorizationRequest = DoAuthorizationRequest;
	}
	return _p;
}

inline int soap_write__ns1__DoAuthorizationReq(struct soap *soap, _ns1__DoAuthorizationReq const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:DoAuthorizationReq", p->soap_type() == SOAP_TYPE__ns1__DoAuthorizationReq ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__DoAuthorizationReq(struct soap *soap, const char *URL, _ns1__DoAuthorizationReq const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:DoAuthorizationReq", p->soap_type() == SOAP_TYPE__ns1__DoAuthorizationReq ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns1__DoAuthorizationReq(struct soap *soap, const char *URL, _ns1__DoAuthorizationReq const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:DoAuthorizationReq", p->soap_type() == SOAP_TYPE__ns1__DoAuthorizationReq ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__DoAuthorizationReq * SOAP_FMAC4 soap_get__ns1__DoAuthorizationReq(struct soap*, _ns1__DoAuthorizationReq *, const char*, const char*);

inline int soap_read__ns1__DoAuthorizationReq(struct soap *soap, _ns1__DoAuthorizationReq *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__DoAuthorizationReq(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__DoAuthorizationReq(struct soap *soap, const char *URL, _ns1__DoAuthorizationReq *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__DoAuthorizationReq(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__DoAuthorizationReq(struct soap *soap, _ns1__DoAuthorizationReq *p)
{
	if (soap_read__ns1__DoAuthorizationReq(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__DoVoidReq_DEFINED
#define SOAP_TYPE__ns1__DoVoidReq_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__DoVoidReq(struct soap*, const char*, int, const _ns1__DoVoidReq *, const char*);
SOAP_FMAC3 _ns1__DoVoidReq * SOAP_FMAC4 soap_in__ns1__DoVoidReq(struct soap*, const char*, _ns1__DoVoidReq *, const char*);
SOAP_FMAC1 _ns1__DoVoidReq * SOAP_FMAC2 soap_instantiate__ns1__DoVoidReq(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__DoVoidReq * soap_new__ns1__DoVoidReq(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__DoVoidReq(soap, n, NULL, NULL, NULL);
}

inline _ns1__DoVoidReq * soap_new_req__ns1__DoVoidReq(
	struct soap *soap,
	ns1__DoVoidRequestType *DoVoidRequest)
{
	_ns1__DoVoidReq *_p = soap_new__ns1__DoVoidReq(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__DoVoidReq::DoVoidRequest = DoVoidRequest;
	}
	return _p;
}

inline _ns1__DoVoidReq * soap_new_set__ns1__DoVoidReq(
	struct soap *soap,
	ns1__DoVoidRequestType *DoVoidRequest)
{
	_ns1__DoVoidReq *_p = soap_new__ns1__DoVoidReq(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__DoVoidReq::DoVoidRequest = DoVoidRequest;
	}
	return _p;
}

inline int soap_write__ns1__DoVoidReq(struct soap *soap, _ns1__DoVoidReq const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:DoVoidReq", p->soap_type() == SOAP_TYPE__ns1__DoVoidReq ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__DoVoidReq(struct soap *soap, const char *URL, _ns1__DoVoidReq const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:DoVoidReq", p->soap_type() == SOAP_TYPE__ns1__DoVoidReq ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns1__DoVoidReq(struct soap *soap, const char *URL, _ns1__DoVoidReq const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:DoVoidReq", p->soap_type() == SOAP_TYPE__ns1__DoVoidReq ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__DoVoidReq * SOAP_FMAC4 soap_get__ns1__DoVoidReq(struct soap*, _ns1__DoVoidReq *, const char*, const char*);

inline int soap_read__ns1__DoVoidReq(struct soap *soap, _ns1__DoVoidReq *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__DoVoidReq(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__DoVoidReq(struct soap *soap, const char *URL, _ns1__DoVoidReq *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__DoVoidReq(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__DoVoidReq(struct soap *soap, _ns1__DoVoidReq *p)
{
	if (soap_read__ns1__DoVoidReq(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__DoReauthorizationReq_DEFINED
#define SOAP_TYPE__ns1__DoReauthorizationReq_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__DoReauthorizationReq(struct soap*, const char*, int, const _ns1__DoReauthorizationReq *, const char*);
SOAP_FMAC3 _ns1__DoReauthorizationReq * SOAP_FMAC4 soap_in__ns1__DoReauthorizationReq(struct soap*, const char*, _ns1__DoReauthorizationReq *, const char*);
SOAP_FMAC1 _ns1__DoReauthorizationReq * SOAP_FMAC2 soap_instantiate__ns1__DoReauthorizationReq(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__DoReauthorizationReq * soap_new__ns1__DoReauthorizationReq(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__DoReauthorizationReq(soap, n, NULL, NULL, NULL);
}

inline _ns1__DoReauthorizationReq * soap_new_req__ns1__DoReauthorizationReq(
	struct soap *soap,
	ns1__DoReauthorizationRequestType *DoReauthorizationRequest)
{
	_ns1__DoReauthorizationReq *_p = soap_new__ns1__DoReauthorizationReq(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__DoReauthorizationReq::DoReauthorizationRequest = DoReauthorizationRequest;
	}
	return _p;
}

inline _ns1__DoReauthorizationReq * soap_new_set__ns1__DoReauthorizationReq(
	struct soap *soap,
	ns1__DoReauthorizationRequestType *DoReauthorizationRequest)
{
	_ns1__DoReauthorizationReq *_p = soap_new__ns1__DoReauthorizationReq(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__DoReauthorizationReq::DoReauthorizationRequest = DoReauthorizationRequest;
	}
	return _p;
}

inline int soap_write__ns1__DoReauthorizationReq(struct soap *soap, _ns1__DoReauthorizationReq const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:DoReauthorizationReq", p->soap_type() == SOAP_TYPE__ns1__DoReauthorizationReq ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__DoReauthorizationReq(struct soap *soap, const char *URL, _ns1__DoReauthorizationReq const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:DoReauthorizationReq", p->soap_type() == SOAP_TYPE__ns1__DoReauthorizationReq ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns1__DoReauthorizationReq(struct soap *soap, const char *URL, _ns1__DoReauthorizationReq const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:DoReauthorizationReq", p->soap_type() == SOAP_TYPE__ns1__DoReauthorizationReq ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__DoReauthorizationReq * SOAP_FMAC4 soap_get__ns1__DoReauthorizationReq(struct soap*, _ns1__DoReauthorizationReq *, const char*, const char*);

inline int soap_read__ns1__DoReauthorizationReq(struct soap *soap, _ns1__DoReauthorizationReq *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__DoReauthorizationReq(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__DoReauthorizationReq(struct soap *soap, const char *URL, _ns1__DoReauthorizationReq *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__DoReauthorizationReq(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__DoReauthorizationReq(struct soap *soap, _ns1__DoReauthorizationReq *p)
{
	if (soap_read__ns1__DoReauthorizationReq(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__DoCaptureReq_DEFINED
#define SOAP_TYPE__ns1__DoCaptureReq_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__DoCaptureReq(struct soap*, const char*, int, const _ns1__DoCaptureReq *, const char*);
SOAP_FMAC3 _ns1__DoCaptureReq * SOAP_FMAC4 soap_in__ns1__DoCaptureReq(struct soap*, const char*, _ns1__DoCaptureReq *, const char*);
SOAP_FMAC1 _ns1__DoCaptureReq * SOAP_FMAC2 soap_instantiate__ns1__DoCaptureReq(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__DoCaptureReq * soap_new__ns1__DoCaptureReq(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__DoCaptureReq(soap, n, NULL, NULL, NULL);
}

inline _ns1__DoCaptureReq * soap_new_req__ns1__DoCaptureReq(
	struct soap *soap,
	ns1__DoCaptureRequestType *DoCaptureRequest)
{
	_ns1__DoCaptureReq *_p = soap_new__ns1__DoCaptureReq(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__DoCaptureReq::DoCaptureRequest = DoCaptureRequest;
	}
	return _p;
}

inline _ns1__DoCaptureReq * soap_new_set__ns1__DoCaptureReq(
	struct soap *soap,
	ns1__DoCaptureRequestType *DoCaptureRequest)
{
	_ns1__DoCaptureReq *_p = soap_new__ns1__DoCaptureReq(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__DoCaptureReq::DoCaptureRequest = DoCaptureRequest;
	}
	return _p;
}

inline int soap_write__ns1__DoCaptureReq(struct soap *soap, _ns1__DoCaptureReq const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:DoCaptureReq", p->soap_type() == SOAP_TYPE__ns1__DoCaptureReq ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__DoCaptureReq(struct soap *soap, const char *URL, _ns1__DoCaptureReq const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:DoCaptureReq", p->soap_type() == SOAP_TYPE__ns1__DoCaptureReq ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns1__DoCaptureReq(struct soap *soap, const char *URL, _ns1__DoCaptureReq const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:DoCaptureReq", p->soap_type() == SOAP_TYPE__ns1__DoCaptureReq ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__DoCaptureReq * SOAP_FMAC4 soap_get__ns1__DoCaptureReq(struct soap*, _ns1__DoCaptureReq *, const char*, const char*);

inline int soap_read__ns1__DoCaptureReq(struct soap *soap, _ns1__DoCaptureReq *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__DoCaptureReq(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__DoCaptureReq(struct soap *soap, const char *URL, _ns1__DoCaptureReq *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__DoCaptureReq(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__DoCaptureReq(struct soap *soap, _ns1__DoCaptureReq *p)
{
	if (soap_read__ns1__DoCaptureReq(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__DoCancelReq_DEFINED
#define SOAP_TYPE__ns1__DoCancelReq_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__DoCancelReq(struct soap*, const char*, int, const _ns1__DoCancelReq *, const char*);
SOAP_FMAC3 _ns1__DoCancelReq * SOAP_FMAC4 soap_in__ns1__DoCancelReq(struct soap*, const char*, _ns1__DoCancelReq *, const char*);
SOAP_FMAC1 _ns1__DoCancelReq * SOAP_FMAC2 soap_instantiate__ns1__DoCancelReq(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__DoCancelReq * soap_new__ns1__DoCancelReq(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__DoCancelReq(soap, n, NULL, NULL, NULL);
}

inline _ns1__DoCancelReq * soap_new_req__ns1__DoCancelReq(
	struct soap *soap,
	ns1__DoCancelRequestType *DoCancelRequest)
{
	_ns1__DoCancelReq *_p = soap_new__ns1__DoCancelReq(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__DoCancelReq::DoCancelRequest = DoCancelRequest;
	}
	return _p;
}

inline _ns1__DoCancelReq * soap_new_set__ns1__DoCancelReq(
	struct soap *soap,
	ns1__DoCancelRequestType *DoCancelRequest)
{
	_ns1__DoCancelReq *_p = soap_new__ns1__DoCancelReq(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__DoCancelReq::DoCancelRequest = DoCancelRequest;
	}
	return _p;
}

inline int soap_write__ns1__DoCancelReq(struct soap *soap, _ns1__DoCancelReq const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:DoCancelReq", p->soap_type() == SOAP_TYPE__ns1__DoCancelReq ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__DoCancelReq(struct soap *soap, const char *URL, _ns1__DoCancelReq const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:DoCancelReq", p->soap_type() == SOAP_TYPE__ns1__DoCancelReq ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns1__DoCancelReq(struct soap *soap, const char *URL, _ns1__DoCancelReq const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:DoCancelReq", p->soap_type() == SOAP_TYPE__ns1__DoCancelReq ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__DoCancelReq * SOAP_FMAC4 soap_get__ns1__DoCancelReq(struct soap*, _ns1__DoCancelReq *, const char*, const char*);

inline int soap_read__ns1__DoCancelReq(struct soap *soap, _ns1__DoCancelReq *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__DoCancelReq(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__DoCancelReq(struct soap *soap, const char *URL, _ns1__DoCancelReq *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__DoCancelReq(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__DoCancelReq(struct soap *soap, _ns1__DoCancelReq *p)
{
	if (soap_read__ns1__DoCancelReq(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__DoDirectPaymentReq_DEFINED
#define SOAP_TYPE__ns1__DoDirectPaymentReq_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__DoDirectPaymentReq(struct soap*, const char*, int, const _ns1__DoDirectPaymentReq *, const char*);
SOAP_FMAC3 _ns1__DoDirectPaymentReq * SOAP_FMAC4 soap_in__ns1__DoDirectPaymentReq(struct soap*, const char*, _ns1__DoDirectPaymentReq *, const char*);
SOAP_FMAC1 _ns1__DoDirectPaymentReq * SOAP_FMAC2 soap_instantiate__ns1__DoDirectPaymentReq(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__DoDirectPaymentReq * soap_new__ns1__DoDirectPaymentReq(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__DoDirectPaymentReq(soap, n, NULL, NULL, NULL);
}

inline _ns1__DoDirectPaymentReq * soap_new_req__ns1__DoDirectPaymentReq(
	struct soap *soap,
	ns1__DoDirectPaymentRequestType *DoDirectPaymentRequest)
{
	_ns1__DoDirectPaymentReq *_p = soap_new__ns1__DoDirectPaymentReq(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__DoDirectPaymentReq::DoDirectPaymentRequest = DoDirectPaymentRequest;
	}
	return _p;
}

inline _ns1__DoDirectPaymentReq * soap_new_set__ns1__DoDirectPaymentReq(
	struct soap *soap,
	ns1__DoDirectPaymentRequestType *DoDirectPaymentRequest)
{
	_ns1__DoDirectPaymentReq *_p = soap_new__ns1__DoDirectPaymentReq(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__DoDirectPaymentReq::DoDirectPaymentRequest = DoDirectPaymentRequest;
	}
	return _p;
}

inline int soap_write__ns1__DoDirectPaymentReq(struct soap *soap, _ns1__DoDirectPaymentReq const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:DoDirectPaymentReq", p->soap_type() == SOAP_TYPE__ns1__DoDirectPaymentReq ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__DoDirectPaymentReq(struct soap *soap, const char *URL, _ns1__DoDirectPaymentReq const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:DoDirectPaymentReq", p->soap_type() == SOAP_TYPE__ns1__DoDirectPaymentReq ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns1__DoDirectPaymentReq(struct soap *soap, const char *URL, _ns1__DoDirectPaymentReq const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:DoDirectPaymentReq", p->soap_type() == SOAP_TYPE__ns1__DoDirectPaymentReq ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__DoDirectPaymentReq * SOAP_FMAC4 soap_get__ns1__DoDirectPaymentReq(struct soap*, _ns1__DoDirectPaymentReq *, const char*, const char*);

inline int soap_read__ns1__DoDirectPaymentReq(struct soap *soap, _ns1__DoDirectPaymentReq *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__DoDirectPaymentReq(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__DoDirectPaymentReq(struct soap *soap, const char *URL, _ns1__DoDirectPaymentReq *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__DoDirectPaymentReq(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__DoDirectPaymentReq(struct soap *soap, _ns1__DoDirectPaymentReq *p)
{
	if (soap_read__ns1__DoDirectPaymentReq(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__ManagePendingTransactionStatusReq_DEFINED
#define SOAP_TYPE__ns1__ManagePendingTransactionStatusReq_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__ManagePendingTransactionStatusReq(struct soap*, const char*, int, const _ns1__ManagePendingTransactionStatusReq *, const char*);
SOAP_FMAC3 _ns1__ManagePendingTransactionStatusReq * SOAP_FMAC4 soap_in__ns1__ManagePendingTransactionStatusReq(struct soap*, const char*, _ns1__ManagePendingTransactionStatusReq *, const char*);
SOAP_FMAC1 _ns1__ManagePendingTransactionStatusReq * SOAP_FMAC2 soap_instantiate__ns1__ManagePendingTransactionStatusReq(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__ManagePendingTransactionStatusReq * soap_new__ns1__ManagePendingTransactionStatusReq(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__ManagePendingTransactionStatusReq(soap, n, NULL, NULL, NULL);
}

inline _ns1__ManagePendingTransactionStatusReq * soap_new_req__ns1__ManagePendingTransactionStatusReq(
	struct soap *soap,
	ns1__ManagePendingTransactionStatusRequestType *ManagePendingTransactionStatusRequest)
{
	_ns1__ManagePendingTransactionStatusReq *_p = soap_new__ns1__ManagePendingTransactionStatusReq(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__ManagePendingTransactionStatusReq::ManagePendingTransactionStatusRequest = ManagePendingTransactionStatusRequest;
	}
	return _p;
}

inline _ns1__ManagePendingTransactionStatusReq * soap_new_set__ns1__ManagePendingTransactionStatusReq(
	struct soap *soap,
	ns1__ManagePendingTransactionStatusRequestType *ManagePendingTransactionStatusRequest)
{
	_ns1__ManagePendingTransactionStatusReq *_p = soap_new__ns1__ManagePendingTransactionStatusReq(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__ManagePendingTransactionStatusReq::ManagePendingTransactionStatusRequest = ManagePendingTransactionStatusRequest;
	}
	return _p;
}

inline int soap_write__ns1__ManagePendingTransactionStatusReq(struct soap *soap, _ns1__ManagePendingTransactionStatusReq const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ManagePendingTransactionStatusReq", p->soap_type() == SOAP_TYPE__ns1__ManagePendingTransactionStatusReq ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__ManagePendingTransactionStatusReq(struct soap *soap, const char *URL, _ns1__ManagePendingTransactionStatusReq const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ManagePendingTransactionStatusReq", p->soap_type() == SOAP_TYPE__ns1__ManagePendingTransactionStatusReq ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns1__ManagePendingTransactionStatusReq(struct soap *soap, const char *URL, _ns1__ManagePendingTransactionStatusReq const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ManagePendingTransactionStatusReq", p->soap_type() == SOAP_TYPE__ns1__ManagePendingTransactionStatusReq ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__ManagePendingTransactionStatusReq * SOAP_FMAC4 soap_get__ns1__ManagePendingTransactionStatusReq(struct soap*, _ns1__ManagePendingTransactionStatusReq *, const char*, const char*);

inline int soap_read__ns1__ManagePendingTransactionStatusReq(struct soap *soap, _ns1__ManagePendingTransactionStatusReq *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__ManagePendingTransactionStatusReq(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__ManagePendingTransactionStatusReq(struct soap *soap, const char *URL, _ns1__ManagePendingTransactionStatusReq *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__ManagePendingTransactionStatusReq(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__ManagePendingTransactionStatusReq(struct soap *soap, _ns1__ManagePendingTransactionStatusReq *p)
{
	if (soap_read__ns1__ManagePendingTransactionStatusReq(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__DoUATPExpressCheckoutPaymentReq_DEFINED
#define SOAP_TYPE__ns1__DoUATPExpressCheckoutPaymentReq_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__DoUATPExpressCheckoutPaymentReq(struct soap*, const char*, int, const _ns1__DoUATPExpressCheckoutPaymentReq *, const char*);
SOAP_FMAC3 _ns1__DoUATPExpressCheckoutPaymentReq * SOAP_FMAC4 soap_in__ns1__DoUATPExpressCheckoutPaymentReq(struct soap*, const char*, _ns1__DoUATPExpressCheckoutPaymentReq *, const char*);
SOAP_FMAC1 _ns1__DoUATPExpressCheckoutPaymentReq * SOAP_FMAC2 soap_instantiate__ns1__DoUATPExpressCheckoutPaymentReq(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__DoUATPExpressCheckoutPaymentReq * soap_new__ns1__DoUATPExpressCheckoutPaymentReq(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__DoUATPExpressCheckoutPaymentReq(soap, n, NULL, NULL, NULL);
}

inline _ns1__DoUATPExpressCheckoutPaymentReq * soap_new_req__ns1__DoUATPExpressCheckoutPaymentReq(
	struct soap *soap,
	ns1__DoUATPExpressCheckoutPaymentRequestType *DoUATPExpressCheckoutPaymentRequest)
{
	_ns1__DoUATPExpressCheckoutPaymentReq *_p = soap_new__ns1__DoUATPExpressCheckoutPaymentReq(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__DoUATPExpressCheckoutPaymentReq::DoUATPExpressCheckoutPaymentRequest = DoUATPExpressCheckoutPaymentRequest;
	}
	return _p;
}

inline _ns1__DoUATPExpressCheckoutPaymentReq * soap_new_set__ns1__DoUATPExpressCheckoutPaymentReq(
	struct soap *soap,
	ns1__DoUATPExpressCheckoutPaymentRequestType *DoUATPExpressCheckoutPaymentRequest)
{
	_ns1__DoUATPExpressCheckoutPaymentReq *_p = soap_new__ns1__DoUATPExpressCheckoutPaymentReq(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__DoUATPExpressCheckoutPaymentReq::DoUATPExpressCheckoutPaymentRequest = DoUATPExpressCheckoutPaymentRequest;
	}
	return _p;
}

inline int soap_write__ns1__DoUATPExpressCheckoutPaymentReq(struct soap *soap, _ns1__DoUATPExpressCheckoutPaymentReq const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:DoUATPExpressCheckoutPaymentReq", p->soap_type() == SOAP_TYPE__ns1__DoUATPExpressCheckoutPaymentReq ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__DoUATPExpressCheckoutPaymentReq(struct soap *soap, const char *URL, _ns1__DoUATPExpressCheckoutPaymentReq const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:DoUATPExpressCheckoutPaymentReq", p->soap_type() == SOAP_TYPE__ns1__DoUATPExpressCheckoutPaymentReq ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns1__DoUATPExpressCheckoutPaymentReq(struct soap *soap, const char *URL, _ns1__DoUATPExpressCheckoutPaymentReq const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:DoUATPExpressCheckoutPaymentReq", p->soap_type() == SOAP_TYPE__ns1__DoUATPExpressCheckoutPaymentReq ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__DoUATPExpressCheckoutPaymentReq * SOAP_FMAC4 soap_get__ns1__DoUATPExpressCheckoutPaymentReq(struct soap*, _ns1__DoUATPExpressCheckoutPaymentReq *, const char*, const char*);

inline int soap_read__ns1__DoUATPExpressCheckoutPaymentReq(struct soap *soap, _ns1__DoUATPExpressCheckoutPaymentReq *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__DoUATPExpressCheckoutPaymentReq(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__DoUATPExpressCheckoutPaymentReq(struct soap *soap, const char *URL, _ns1__DoUATPExpressCheckoutPaymentReq *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__DoUATPExpressCheckoutPaymentReq(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__DoUATPExpressCheckoutPaymentReq(struct soap *soap, _ns1__DoUATPExpressCheckoutPaymentReq *p)
{
	if (soap_read__ns1__DoUATPExpressCheckoutPaymentReq(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__DoExpressCheckoutPaymentReq_DEFINED
#define SOAP_TYPE__ns1__DoExpressCheckoutPaymentReq_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__DoExpressCheckoutPaymentReq(struct soap*, const char*, int, const _ns1__DoExpressCheckoutPaymentReq *, const char*);
SOAP_FMAC3 _ns1__DoExpressCheckoutPaymentReq * SOAP_FMAC4 soap_in__ns1__DoExpressCheckoutPaymentReq(struct soap*, const char*, _ns1__DoExpressCheckoutPaymentReq *, const char*);
SOAP_FMAC1 _ns1__DoExpressCheckoutPaymentReq * SOAP_FMAC2 soap_instantiate__ns1__DoExpressCheckoutPaymentReq(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__DoExpressCheckoutPaymentReq * soap_new__ns1__DoExpressCheckoutPaymentReq(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__DoExpressCheckoutPaymentReq(soap, n, NULL, NULL, NULL);
}

inline _ns1__DoExpressCheckoutPaymentReq * soap_new_req__ns1__DoExpressCheckoutPaymentReq(
	struct soap *soap,
	ns1__DoExpressCheckoutPaymentRequestType *DoExpressCheckoutPaymentRequest)
{
	_ns1__DoExpressCheckoutPaymentReq *_p = soap_new__ns1__DoExpressCheckoutPaymentReq(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__DoExpressCheckoutPaymentReq::DoExpressCheckoutPaymentRequest = DoExpressCheckoutPaymentRequest;
	}
	return _p;
}

inline _ns1__DoExpressCheckoutPaymentReq * soap_new_set__ns1__DoExpressCheckoutPaymentReq(
	struct soap *soap,
	ns1__DoExpressCheckoutPaymentRequestType *DoExpressCheckoutPaymentRequest)
{
	_ns1__DoExpressCheckoutPaymentReq *_p = soap_new__ns1__DoExpressCheckoutPaymentReq(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__DoExpressCheckoutPaymentReq::DoExpressCheckoutPaymentRequest = DoExpressCheckoutPaymentRequest;
	}
	return _p;
}

inline int soap_write__ns1__DoExpressCheckoutPaymentReq(struct soap *soap, _ns1__DoExpressCheckoutPaymentReq const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:DoExpressCheckoutPaymentReq", p->soap_type() == SOAP_TYPE__ns1__DoExpressCheckoutPaymentReq ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__DoExpressCheckoutPaymentReq(struct soap *soap, const char *URL, _ns1__DoExpressCheckoutPaymentReq const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:DoExpressCheckoutPaymentReq", p->soap_type() == SOAP_TYPE__ns1__DoExpressCheckoutPaymentReq ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns1__DoExpressCheckoutPaymentReq(struct soap *soap, const char *URL, _ns1__DoExpressCheckoutPaymentReq const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:DoExpressCheckoutPaymentReq", p->soap_type() == SOAP_TYPE__ns1__DoExpressCheckoutPaymentReq ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__DoExpressCheckoutPaymentReq * SOAP_FMAC4 soap_get__ns1__DoExpressCheckoutPaymentReq(struct soap*, _ns1__DoExpressCheckoutPaymentReq *, const char*, const char*);

inline int soap_read__ns1__DoExpressCheckoutPaymentReq(struct soap *soap, _ns1__DoExpressCheckoutPaymentReq *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__DoExpressCheckoutPaymentReq(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__DoExpressCheckoutPaymentReq(struct soap *soap, const char *URL, _ns1__DoExpressCheckoutPaymentReq *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__DoExpressCheckoutPaymentReq(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__DoExpressCheckoutPaymentReq(struct soap *soap, _ns1__DoExpressCheckoutPaymentReq *p)
{
	if (soap_read__ns1__DoExpressCheckoutPaymentReq(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__GetExpressCheckoutDetailsReq_DEFINED
#define SOAP_TYPE__ns1__GetExpressCheckoutDetailsReq_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetExpressCheckoutDetailsReq(struct soap*, const char*, int, const _ns1__GetExpressCheckoutDetailsReq *, const char*);
SOAP_FMAC3 _ns1__GetExpressCheckoutDetailsReq * SOAP_FMAC4 soap_in__ns1__GetExpressCheckoutDetailsReq(struct soap*, const char*, _ns1__GetExpressCheckoutDetailsReq *, const char*);
SOAP_FMAC1 _ns1__GetExpressCheckoutDetailsReq * SOAP_FMAC2 soap_instantiate__ns1__GetExpressCheckoutDetailsReq(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetExpressCheckoutDetailsReq * soap_new__ns1__GetExpressCheckoutDetailsReq(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__GetExpressCheckoutDetailsReq(soap, n, NULL, NULL, NULL);
}

inline _ns1__GetExpressCheckoutDetailsReq * soap_new_req__ns1__GetExpressCheckoutDetailsReq(
	struct soap *soap,
	ns1__GetExpressCheckoutDetailsRequestType *GetExpressCheckoutDetailsRequest)
{
	_ns1__GetExpressCheckoutDetailsReq *_p = soap_new__ns1__GetExpressCheckoutDetailsReq(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__GetExpressCheckoutDetailsReq::GetExpressCheckoutDetailsRequest = GetExpressCheckoutDetailsRequest;
	}
	return _p;
}

inline _ns1__GetExpressCheckoutDetailsReq * soap_new_set__ns1__GetExpressCheckoutDetailsReq(
	struct soap *soap,
	ns1__GetExpressCheckoutDetailsRequestType *GetExpressCheckoutDetailsRequest)
{
	_ns1__GetExpressCheckoutDetailsReq *_p = soap_new__ns1__GetExpressCheckoutDetailsReq(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__GetExpressCheckoutDetailsReq::GetExpressCheckoutDetailsRequest = GetExpressCheckoutDetailsRequest;
	}
	return _p;
}

inline int soap_write__ns1__GetExpressCheckoutDetailsReq(struct soap *soap, _ns1__GetExpressCheckoutDetailsReq const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetExpressCheckoutDetailsReq", p->soap_type() == SOAP_TYPE__ns1__GetExpressCheckoutDetailsReq ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__GetExpressCheckoutDetailsReq(struct soap *soap, const char *URL, _ns1__GetExpressCheckoutDetailsReq const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetExpressCheckoutDetailsReq", p->soap_type() == SOAP_TYPE__ns1__GetExpressCheckoutDetailsReq ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns1__GetExpressCheckoutDetailsReq(struct soap *soap, const char *URL, _ns1__GetExpressCheckoutDetailsReq const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetExpressCheckoutDetailsReq", p->soap_type() == SOAP_TYPE__ns1__GetExpressCheckoutDetailsReq ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__GetExpressCheckoutDetailsReq * SOAP_FMAC4 soap_get__ns1__GetExpressCheckoutDetailsReq(struct soap*, _ns1__GetExpressCheckoutDetailsReq *, const char*, const char*);

inline int soap_read__ns1__GetExpressCheckoutDetailsReq(struct soap *soap, _ns1__GetExpressCheckoutDetailsReq *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__GetExpressCheckoutDetailsReq(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__GetExpressCheckoutDetailsReq(struct soap *soap, const char *URL, _ns1__GetExpressCheckoutDetailsReq *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__GetExpressCheckoutDetailsReq(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__GetExpressCheckoutDetailsReq(struct soap *soap, _ns1__GetExpressCheckoutDetailsReq *p)
{
	if (soap_read__ns1__GetExpressCheckoutDetailsReq(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__ExecuteCheckoutOperationsReq_DEFINED
#define SOAP_TYPE__ns1__ExecuteCheckoutOperationsReq_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__ExecuteCheckoutOperationsReq(struct soap*, const char*, int, const _ns1__ExecuteCheckoutOperationsReq *, const char*);
SOAP_FMAC3 _ns1__ExecuteCheckoutOperationsReq * SOAP_FMAC4 soap_in__ns1__ExecuteCheckoutOperationsReq(struct soap*, const char*, _ns1__ExecuteCheckoutOperationsReq *, const char*);
SOAP_FMAC1 _ns1__ExecuteCheckoutOperationsReq * SOAP_FMAC2 soap_instantiate__ns1__ExecuteCheckoutOperationsReq(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__ExecuteCheckoutOperationsReq * soap_new__ns1__ExecuteCheckoutOperationsReq(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__ExecuteCheckoutOperationsReq(soap, n, NULL, NULL, NULL);
}

inline _ns1__ExecuteCheckoutOperationsReq * soap_new_req__ns1__ExecuteCheckoutOperationsReq(
	struct soap *soap,
	ns1__ExecuteCheckoutOperationsRequestType *ExecuteCheckoutOperationsRequest)
{
	_ns1__ExecuteCheckoutOperationsReq *_p = soap_new__ns1__ExecuteCheckoutOperationsReq(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__ExecuteCheckoutOperationsReq::ExecuteCheckoutOperationsRequest = ExecuteCheckoutOperationsRequest;
	}
	return _p;
}

inline _ns1__ExecuteCheckoutOperationsReq * soap_new_set__ns1__ExecuteCheckoutOperationsReq(
	struct soap *soap,
	ns1__ExecuteCheckoutOperationsRequestType *ExecuteCheckoutOperationsRequest)
{
	_ns1__ExecuteCheckoutOperationsReq *_p = soap_new__ns1__ExecuteCheckoutOperationsReq(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__ExecuteCheckoutOperationsReq::ExecuteCheckoutOperationsRequest = ExecuteCheckoutOperationsRequest;
	}
	return _p;
}

inline int soap_write__ns1__ExecuteCheckoutOperationsReq(struct soap *soap, _ns1__ExecuteCheckoutOperationsReq const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ExecuteCheckoutOperationsReq", p->soap_type() == SOAP_TYPE__ns1__ExecuteCheckoutOperationsReq ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__ExecuteCheckoutOperationsReq(struct soap *soap, const char *URL, _ns1__ExecuteCheckoutOperationsReq const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ExecuteCheckoutOperationsReq", p->soap_type() == SOAP_TYPE__ns1__ExecuteCheckoutOperationsReq ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns1__ExecuteCheckoutOperationsReq(struct soap *soap, const char *URL, _ns1__ExecuteCheckoutOperationsReq const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ExecuteCheckoutOperationsReq", p->soap_type() == SOAP_TYPE__ns1__ExecuteCheckoutOperationsReq ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__ExecuteCheckoutOperationsReq * SOAP_FMAC4 soap_get__ns1__ExecuteCheckoutOperationsReq(struct soap*, _ns1__ExecuteCheckoutOperationsReq *, const char*, const char*);

inline int soap_read__ns1__ExecuteCheckoutOperationsReq(struct soap *soap, _ns1__ExecuteCheckoutOperationsReq *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__ExecuteCheckoutOperationsReq(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__ExecuteCheckoutOperationsReq(struct soap *soap, const char *URL, _ns1__ExecuteCheckoutOperationsReq *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__ExecuteCheckoutOperationsReq(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__ExecuteCheckoutOperationsReq(struct soap *soap, _ns1__ExecuteCheckoutOperationsReq *p)
{
	if (soap_read__ns1__ExecuteCheckoutOperationsReq(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__SetExpressCheckoutReq_DEFINED
#define SOAP_TYPE__ns1__SetExpressCheckoutReq_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__SetExpressCheckoutReq(struct soap*, const char*, int, const _ns1__SetExpressCheckoutReq *, const char*);
SOAP_FMAC3 _ns1__SetExpressCheckoutReq * SOAP_FMAC4 soap_in__ns1__SetExpressCheckoutReq(struct soap*, const char*, _ns1__SetExpressCheckoutReq *, const char*);
SOAP_FMAC1 _ns1__SetExpressCheckoutReq * SOAP_FMAC2 soap_instantiate__ns1__SetExpressCheckoutReq(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__SetExpressCheckoutReq * soap_new__ns1__SetExpressCheckoutReq(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__SetExpressCheckoutReq(soap, n, NULL, NULL, NULL);
}

inline _ns1__SetExpressCheckoutReq * soap_new_req__ns1__SetExpressCheckoutReq(
	struct soap *soap,
	ns1__SetExpressCheckoutRequestType *SetExpressCheckoutRequest)
{
	_ns1__SetExpressCheckoutReq *_p = soap_new__ns1__SetExpressCheckoutReq(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__SetExpressCheckoutReq::SetExpressCheckoutRequest = SetExpressCheckoutRequest;
	}
	return _p;
}

inline _ns1__SetExpressCheckoutReq * soap_new_set__ns1__SetExpressCheckoutReq(
	struct soap *soap,
	ns1__SetExpressCheckoutRequestType *SetExpressCheckoutRequest)
{
	_ns1__SetExpressCheckoutReq *_p = soap_new__ns1__SetExpressCheckoutReq(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__SetExpressCheckoutReq::SetExpressCheckoutRequest = SetExpressCheckoutRequest;
	}
	return _p;
}

inline int soap_write__ns1__SetExpressCheckoutReq(struct soap *soap, _ns1__SetExpressCheckoutReq const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SetExpressCheckoutReq", p->soap_type() == SOAP_TYPE__ns1__SetExpressCheckoutReq ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__SetExpressCheckoutReq(struct soap *soap, const char *URL, _ns1__SetExpressCheckoutReq const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SetExpressCheckoutReq", p->soap_type() == SOAP_TYPE__ns1__SetExpressCheckoutReq ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns1__SetExpressCheckoutReq(struct soap *soap, const char *URL, _ns1__SetExpressCheckoutReq const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SetExpressCheckoutReq", p->soap_type() == SOAP_TYPE__ns1__SetExpressCheckoutReq ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__SetExpressCheckoutReq * SOAP_FMAC4 soap_get__ns1__SetExpressCheckoutReq(struct soap*, _ns1__SetExpressCheckoutReq *, const char*, const char*);

inline int soap_read__ns1__SetExpressCheckoutReq(struct soap *soap, _ns1__SetExpressCheckoutReq *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__SetExpressCheckoutReq(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__SetExpressCheckoutReq(struct soap *soap, const char *URL, _ns1__SetExpressCheckoutReq *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__SetExpressCheckoutReq(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__SetExpressCheckoutReq(struct soap *soap, _ns1__SetExpressCheckoutReq *p)
{
	if (soap_read__ns1__SetExpressCheckoutReq(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__GetIncentiveEvaluationReq_DEFINED
#define SOAP_TYPE__ns1__GetIncentiveEvaluationReq_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetIncentiveEvaluationReq(struct soap*, const char*, int, const _ns1__GetIncentiveEvaluationReq *, const char*);
SOAP_FMAC3 _ns1__GetIncentiveEvaluationReq * SOAP_FMAC4 soap_in__ns1__GetIncentiveEvaluationReq(struct soap*, const char*, _ns1__GetIncentiveEvaluationReq *, const char*);
SOAP_FMAC1 _ns1__GetIncentiveEvaluationReq * SOAP_FMAC2 soap_instantiate__ns1__GetIncentiveEvaluationReq(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetIncentiveEvaluationReq * soap_new__ns1__GetIncentiveEvaluationReq(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__GetIncentiveEvaluationReq(soap, n, NULL, NULL, NULL);
}

inline _ns1__GetIncentiveEvaluationReq * soap_new_req__ns1__GetIncentiveEvaluationReq(
	struct soap *soap,
	ns1__GetIncentiveEvaluationRequestType *GetIncentiveEvaluationRequest)
{
	_ns1__GetIncentiveEvaluationReq *_p = soap_new__ns1__GetIncentiveEvaluationReq(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__GetIncentiveEvaluationReq::GetIncentiveEvaluationRequest = GetIncentiveEvaluationRequest;
	}
	return _p;
}

inline _ns1__GetIncentiveEvaluationReq * soap_new_set__ns1__GetIncentiveEvaluationReq(
	struct soap *soap,
	ns1__GetIncentiveEvaluationRequestType *GetIncentiveEvaluationRequest)
{
	_ns1__GetIncentiveEvaluationReq *_p = soap_new__ns1__GetIncentiveEvaluationReq(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__GetIncentiveEvaluationReq::GetIncentiveEvaluationRequest = GetIncentiveEvaluationRequest;
	}
	return _p;
}

inline int soap_write__ns1__GetIncentiveEvaluationReq(struct soap *soap, _ns1__GetIncentiveEvaluationReq const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetIncentiveEvaluationReq", p->soap_type() == SOAP_TYPE__ns1__GetIncentiveEvaluationReq ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__GetIncentiveEvaluationReq(struct soap *soap, const char *URL, _ns1__GetIncentiveEvaluationReq const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetIncentiveEvaluationReq", p->soap_type() == SOAP_TYPE__ns1__GetIncentiveEvaluationReq ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns1__GetIncentiveEvaluationReq(struct soap *soap, const char *URL, _ns1__GetIncentiveEvaluationReq const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetIncentiveEvaluationReq", p->soap_type() == SOAP_TYPE__ns1__GetIncentiveEvaluationReq ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__GetIncentiveEvaluationReq * SOAP_FMAC4 soap_get__ns1__GetIncentiveEvaluationReq(struct soap*, _ns1__GetIncentiveEvaluationReq *, const char*, const char*);

inline int soap_read__ns1__GetIncentiveEvaluationReq(struct soap *soap, _ns1__GetIncentiveEvaluationReq *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__GetIncentiveEvaluationReq(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__GetIncentiveEvaluationReq(struct soap *soap, const char *URL, _ns1__GetIncentiveEvaluationReq *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__GetIncentiveEvaluationReq(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__GetIncentiveEvaluationReq(struct soap *soap, _ns1__GetIncentiveEvaluationReq *p)
{
	if (soap_read__ns1__GetIncentiveEvaluationReq(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__GetAccessPermissionDetailsReq_DEFINED
#define SOAP_TYPE__ns1__GetAccessPermissionDetailsReq_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetAccessPermissionDetailsReq(struct soap*, const char*, int, const _ns1__GetAccessPermissionDetailsReq *, const char*);
SOAP_FMAC3 _ns1__GetAccessPermissionDetailsReq * SOAP_FMAC4 soap_in__ns1__GetAccessPermissionDetailsReq(struct soap*, const char*, _ns1__GetAccessPermissionDetailsReq *, const char*);
SOAP_FMAC1 _ns1__GetAccessPermissionDetailsReq * SOAP_FMAC2 soap_instantiate__ns1__GetAccessPermissionDetailsReq(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetAccessPermissionDetailsReq * soap_new__ns1__GetAccessPermissionDetailsReq(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__GetAccessPermissionDetailsReq(soap, n, NULL, NULL, NULL);
}

inline _ns1__GetAccessPermissionDetailsReq * soap_new_req__ns1__GetAccessPermissionDetailsReq(
	struct soap *soap,
	ns1__GetAccessPermissionDetailsRequestType *GetAccessPermissionDetailsRequest)
{
	_ns1__GetAccessPermissionDetailsReq *_p = soap_new__ns1__GetAccessPermissionDetailsReq(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__GetAccessPermissionDetailsReq::GetAccessPermissionDetailsRequest = GetAccessPermissionDetailsRequest;
	}
	return _p;
}

inline _ns1__GetAccessPermissionDetailsReq * soap_new_set__ns1__GetAccessPermissionDetailsReq(
	struct soap *soap,
	ns1__GetAccessPermissionDetailsRequestType *GetAccessPermissionDetailsRequest)
{
	_ns1__GetAccessPermissionDetailsReq *_p = soap_new__ns1__GetAccessPermissionDetailsReq(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__GetAccessPermissionDetailsReq::GetAccessPermissionDetailsRequest = GetAccessPermissionDetailsRequest;
	}
	return _p;
}

inline int soap_write__ns1__GetAccessPermissionDetailsReq(struct soap *soap, _ns1__GetAccessPermissionDetailsReq const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetAccessPermissionDetailsReq", p->soap_type() == SOAP_TYPE__ns1__GetAccessPermissionDetailsReq ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__GetAccessPermissionDetailsReq(struct soap *soap, const char *URL, _ns1__GetAccessPermissionDetailsReq const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetAccessPermissionDetailsReq", p->soap_type() == SOAP_TYPE__ns1__GetAccessPermissionDetailsReq ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns1__GetAccessPermissionDetailsReq(struct soap *soap, const char *URL, _ns1__GetAccessPermissionDetailsReq const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetAccessPermissionDetailsReq", p->soap_type() == SOAP_TYPE__ns1__GetAccessPermissionDetailsReq ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__GetAccessPermissionDetailsReq * SOAP_FMAC4 soap_get__ns1__GetAccessPermissionDetailsReq(struct soap*, _ns1__GetAccessPermissionDetailsReq *, const char*, const char*);

inline int soap_read__ns1__GetAccessPermissionDetailsReq(struct soap *soap, _ns1__GetAccessPermissionDetailsReq *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__GetAccessPermissionDetailsReq(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__GetAccessPermissionDetailsReq(struct soap *soap, const char *URL, _ns1__GetAccessPermissionDetailsReq *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__GetAccessPermissionDetailsReq(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__GetAccessPermissionDetailsReq(struct soap *soap, _ns1__GetAccessPermissionDetailsReq *p)
{
	if (soap_read__ns1__GetAccessPermissionDetailsReq(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__UpdateAccessPermissionsReq_DEFINED
#define SOAP_TYPE__ns1__UpdateAccessPermissionsReq_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__UpdateAccessPermissionsReq(struct soap*, const char*, int, const _ns1__UpdateAccessPermissionsReq *, const char*);
SOAP_FMAC3 _ns1__UpdateAccessPermissionsReq * SOAP_FMAC4 soap_in__ns1__UpdateAccessPermissionsReq(struct soap*, const char*, _ns1__UpdateAccessPermissionsReq *, const char*);
SOAP_FMAC1 _ns1__UpdateAccessPermissionsReq * SOAP_FMAC2 soap_instantiate__ns1__UpdateAccessPermissionsReq(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__UpdateAccessPermissionsReq * soap_new__ns1__UpdateAccessPermissionsReq(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__UpdateAccessPermissionsReq(soap, n, NULL, NULL, NULL);
}

inline _ns1__UpdateAccessPermissionsReq * soap_new_req__ns1__UpdateAccessPermissionsReq(
	struct soap *soap,
	ns1__UpdateAccessPermissionsRequestType *UpdateAccessPermissionsRequest)
{
	_ns1__UpdateAccessPermissionsReq *_p = soap_new__ns1__UpdateAccessPermissionsReq(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__UpdateAccessPermissionsReq::UpdateAccessPermissionsRequest = UpdateAccessPermissionsRequest;
	}
	return _p;
}

inline _ns1__UpdateAccessPermissionsReq * soap_new_set__ns1__UpdateAccessPermissionsReq(
	struct soap *soap,
	ns1__UpdateAccessPermissionsRequestType *UpdateAccessPermissionsRequest)
{
	_ns1__UpdateAccessPermissionsReq *_p = soap_new__ns1__UpdateAccessPermissionsReq(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__UpdateAccessPermissionsReq::UpdateAccessPermissionsRequest = UpdateAccessPermissionsRequest;
	}
	return _p;
}

inline int soap_write__ns1__UpdateAccessPermissionsReq(struct soap *soap, _ns1__UpdateAccessPermissionsReq const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:UpdateAccessPermissionsReq", p->soap_type() == SOAP_TYPE__ns1__UpdateAccessPermissionsReq ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__UpdateAccessPermissionsReq(struct soap *soap, const char *URL, _ns1__UpdateAccessPermissionsReq const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:UpdateAccessPermissionsReq", p->soap_type() == SOAP_TYPE__ns1__UpdateAccessPermissionsReq ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns1__UpdateAccessPermissionsReq(struct soap *soap, const char *URL, _ns1__UpdateAccessPermissionsReq const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:UpdateAccessPermissionsReq", p->soap_type() == SOAP_TYPE__ns1__UpdateAccessPermissionsReq ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__UpdateAccessPermissionsReq * SOAP_FMAC4 soap_get__ns1__UpdateAccessPermissionsReq(struct soap*, _ns1__UpdateAccessPermissionsReq *, const char*, const char*);

inline int soap_read__ns1__UpdateAccessPermissionsReq(struct soap *soap, _ns1__UpdateAccessPermissionsReq *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__UpdateAccessPermissionsReq(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__UpdateAccessPermissionsReq(struct soap *soap, const char *URL, _ns1__UpdateAccessPermissionsReq *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__UpdateAccessPermissionsReq(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__UpdateAccessPermissionsReq(struct soap *soap, _ns1__UpdateAccessPermissionsReq *p)
{
	if (soap_read__ns1__UpdateAccessPermissionsReq(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__SetAccessPermissionsReq_DEFINED
#define SOAP_TYPE__ns1__SetAccessPermissionsReq_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__SetAccessPermissionsReq(struct soap*, const char*, int, const _ns1__SetAccessPermissionsReq *, const char*);
SOAP_FMAC3 _ns1__SetAccessPermissionsReq * SOAP_FMAC4 soap_in__ns1__SetAccessPermissionsReq(struct soap*, const char*, _ns1__SetAccessPermissionsReq *, const char*);
SOAP_FMAC1 _ns1__SetAccessPermissionsReq * SOAP_FMAC2 soap_instantiate__ns1__SetAccessPermissionsReq(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__SetAccessPermissionsReq * soap_new__ns1__SetAccessPermissionsReq(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__SetAccessPermissionsReq(soap, n, NULL, NULL, NULL);
}

inline _ns1__SetAccessPermissionsReq * soap_new_req__ns1__SetAccessPermissionsReq(
	struct soap *soap,
	ns1__SetAccessPermissionsRequestType *SetAccessPermissionsRequest)
{
	_ns1__SetAccessPermissionsReq *_p = soap_new__ns1__SetAccessPermissionsReq(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__SetAccessPermissionsReq::SetAccessPermissionsRequest = SetAccessPermissionsRequest;
	}
	return _p;
}

inline _ns1__SetAccessPermissionsReq * soap_new_set__ns1__SetAccessPermissionsReq(
	struct soap *soap,
	ns1__SetAccessPermissionsRequestType *SetAccessPermissionsRequest)
{
	_ns1__SetAccessPermissionsReq *_p = soap_new__ns1__SetAccessPermissionsReq(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__SetAccessPermissionsReq::SetAccessPermissionsRequest = SetAccessPermissionsRequest;
	}
	return _p;
}

inline int soap_write__ns1__SetAccessPermissionsReq(struct soap *soap, _ns1__SetAccessPermissionsReq const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SetAccessPermissionsReq", p->soap_type() == SOAP_TYPE__ns1__SetAccessPermissionsReq ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__SetAccessPermissionsReq(struct soap *soap, const char *URL, _ns1__SetAccessPermissionsReq const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SetAccessPermissionsReq", p->soap_type() == SOAP_TYPE__ns1__SetAccessPermissionsReq ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns1__SetAccessPermissionsReq(struct soap *soap, const char *URL, _ns1__SetAccessPermissionsReq const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SetAccessPermissionsReq", p->soap_type() == SOAP_TYPE__ns1__SetAccessPermissionsReq ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__SetAccessPermissionsReq * SOAP_FMAC4 soap_get__ns1__SetAccessPermissionsReq(struct soap*, _ns1__SetAccessPermissionsReq *, const char*, const char*);

inline int soap_read__ns1__SetAccessPermissionsReq(struct soap *soap, _ns1__SetAccessPermissionsReq *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__SetAccessPermissionsReq(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__SetAccessPermissionsReq(struct soap *soap, const char *URL, _ns1__SetAccessPermissionsReq *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__SetAccessPermissionsReq(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__SetAccessPermissionsReq(struct soap *soap, _ns1__SetAccessPermissionsReq *p)
{
	if (soap_read__ns1__SetAccessPermissionsReq(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__GetAuthDetailsReq_DEFINED
#define SOAP_TYPE__ns1__GetAuthDetailsReq_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetAuthDetailsReq(struct soap*, const char*, int, const _ns1__GetAuthDetailsReq *, const char*);
SOAP_FMAC3 _ns1__GetAuthDetailsReq * SOAP_FMAC4 soap_in__ns1__GetAuthDetailsReq(struct soap*, const char*, _ns1__GetAuthDetailsReq *, const char*);
SOAP_FMAC1 _ns1__GetAuthDetailsReq * SOAP_FMAC2 soap_instantiate__ns1__GetAuthDetailsReq(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetAuthDetailsReq * soap_new__ns1__GetAuthDetailsReq(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__GetAuthDetailsReq(soap, n, NULL, NULL, NULL);
}

inline _ns1__GetAuthDetailsReq * soap_new_req__ns1__GetAuthDetailsReq(
	struct soap *soap,
	ns1__GetAuthDetailsRequestType *GetAuthDetailsRequest)
{
	_ns1__GetAuthDetailsReq *_p = soap_new__ns1__GetAuthDetailsReq(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__GetAuthDetailsReq::GetAuthDetailsRequest = GetAuthDetailsRequest;
	}
	return _p;
}

inline _ns1__GetAuthDetailsReq * soap_new_set__ns1__GetAuthDetailsReq(
	struct soap *soap,
	ns1__GetAuthDetailsRequestType *GetAuthDetailsRequest)
{
	_ns1__GetAuthDetailsReq *_p = soap_new__ns1__GetAuthDetailsReq(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__GetAuthDetailsReq::GetAuthDetailsRequest = GetAuthDetailsRequest;
	}
	return _p;
}

inline int soap_write__ns1__GetAuthDetailsReq(struct soap *soap, _ns1__GetAuthDetailsReq const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetAuthDetailsReq", p->soap_type() == SOAP_TYPE__ns1__GetAuthDetailsReq ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__GetAuthDetailsReq(struct soap *soap, const char *URL, _ns1__GetAuthDetailsReq const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetAuthDetailsReq", p->soap_type() == SOAP_TYPE__ns1__GetAuthDetailsReq ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns1__GetAuthDetailsReq(struct soap *soap, const char *URL, _ns1__GetAuthDetailsReq const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetAuthDetailsReq", p->soap_type() == SOAP_TYPE__ns1__GetAuthDetailsReq ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__GetAuthDetailsReq * SOAP_FMAC4 soap_get__ns1__GetAuthDetailsReq(struct soap*, _ns1__GetAuthDetailsReq *, const char*, const char*);

inline int soap_read__ns1__GetAuthDetailsReq(struct soap *soap, _ns1__GetAuthDetailsReq *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__GetAuthDetailsReq(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__GetAuthDetailsReq(struct soap *soap, const char *URL, _ns1__GetAuthDetailsReq *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__GetAuthDetailsReq(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__GetAuthDetailsReq(struct soap *soap, _ns1__GetAuthDetailsReq *p)
{
	if (soap_read__ns1__GetAuthDetailsReq(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__SetAuthFlowParamReq_DEFINED
#define SOAP_TYPE__ns1__SetAuthFlowParamReq_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__SetAuthFlowParamReq(struct soap*, const char*, int, const _ns1__SetAuthFlowParamReq *, const char*);
SOAP_FMAC3 _ns1__SetAuthFlowParamReq * SOAP_FMAC4 soap_in__ns1__SetAuthFlowParamReq(struct soap*, const char*, _ns1__SetAuthFlowParamReq *, const char*);
SOAP_FMAC1 _ns1__SetAuthFlowParamReq * SOAP_FMAC2 soap_instantiate__ns1__SetAuthFlowParamReq(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__SetAuthFlowParamReq * soap_new__ns1__SetAuthFlowParamReq(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__SetAuthFlowParamReq(soap, n, NULL, NULL, NULL);
}

inline _ns1__SetAuthFlowParamReq * soap_new_req__ns1__SetAuthFlowParamReq(
	struct soap *soap,
	ns1__SetAuthFlowParamRequestType *SetAuthFlowParamRequest)
{
	_ns1__SetAuthFlowParamReq *_p = soap_new__ns1__SetAuthFlowParamReq(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__SetAuthFlowParamReq::SetAuthFlowParamRequest = SetAuthFlowParamRequest;
	}
	return _p;
}

inline _ns1__SetAuthFlowParamReq * soap_new_set__ns1__SetAuthFlowParamReq(
	struct soap *soap,
	ns1__SetAuthFlowParamRequestType *SetAuthFlowParamRequest)
{
	_ns1__SetAuthFlowParamReq *_p = soap_new__ns1__SetAuthFlowParamReq(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__SetAuthFlowParamReq::SetAuthFlowParamRequest = SetAuthFlowParamRequest;
	}
	return _p;
}

inline int soap_write__ns1__SetAuthFlowParamReq(struct soap *soap, _ns1__SetAuthFlowParamReq const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SetAuthFlowParamReq", p->soap_type() == SOAP_TYPE__ns1__SetAuthFlowParamReq ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__SetAuthFlowParamReq(struct soap *soap, const char *URL, _ns1__SetAuthFlowParamReq const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SetAuthFlowParamReq", p->soap_type() == SOAP_TYPE__ns1__SetAuthFlowParamReq ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns1__SetAuthFlowParamReq(struct soap *soap, const char *URL, _ns1__SetAuthFlowParamReq const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SetAuthFlowParamReq", p->soap_type() == SOAP_TYPE__ns1__SetAuthFlowParamReq ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__SetAuthFlowParamReq * SOAP_FMAC4 soap_get__ns1__SetAuthFlowParamReq(struct soap*, _ns1__SetAuthFlowParamReq *, const char*, const char*);

inline int soap_read__ns1__SetAuthFlowParamReq(struct soap *soap, _ns1__SetAuthFlowParamReq *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__SetAuthFlowParamReq(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__SetAuthFlowParamReq(struct soap *soap, const char *URL, _ns1__SetAuthFlowParamReq *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__SetAuthFlowParamReq(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__SetAuthFlowParamReq(struct soap *soap, _ns1__SetAuthFlowParamReq *p)
{
	if (soap_read__ns1__SetAuthFlowParamReq(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__GetBoardingDetailsReq_DEFINED
#define SOAP_TYPE__ns1__GetBoardingDetailsReq_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetBoardingDetailsReq(struct soap*, const char*, int, const _ns1__GetBoardingDetailsReq *, const char*);
SOAP_FMAC3 _ns1__GetBoardingDetailsReq * SOAP_FMAC4 soap_in__ns1__GetBoardingDetailsReq(struct soap*, const char*, _ns1__GetBoardingDetailsReq *, const char*);
SOAP_FMAC1 _ns1__GetBoardingDetailsReq * SOAP_FMAC2 soap_instantiate__ns1__GetBoardingDetailsReq(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetBoardingDetailsReq * soap_new__ns1__GetBoardingDetailsReq(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__GetBoardingDetailsReq(soap, n, NULL, NULL, NULL);
}

inline _ns1__GetBoardingDetailsReq * soap_new_req__ns1__GetBoardingDetailsReq(
	struct soap *soap,
	ns1__GetBoardingDetailsRequestType *GetBoardingDetailsRequest)
{
	_ns1__GetBoardingDetailsReq *_p = soap_new__ns1__GetBoardingDetailsReq(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__GetBoardingDetailsReq::GetBoardingDetailsRequest = GetBoardingDetailsRequest;
	}
	return _p;
}

inline _ns1__GetBoardingDetailsReq * soap_new_set__ns1__GetBoardingDetailsReq(
	struct soap *soap,
	ns1__GetBoardingDetailsRequestType *GetBoardingDetailsRequest)
{
	_ns1__GetBoardingDetailsReq *_p = soap_new__ns1__GetBoardingDetailsReq(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__GetBoardingDetailsReq::GetBoardingDetailsRequest = GetBoardingDetailsRequest;
	}
	return _p;
}

inline int soap_write__ns1__GetBoardingDetailsReq(struct soap *soap, _ns1__GetBoardingDetailsReq const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetBoardingDetailsReq", p->soap_type() == SOAP_TYPE__ns1__GetBoardingDetailsReq ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__GetBoardingDetailsReq(struct soap *soap, const char *URL, _ns1__GetBoardingDetailsReq const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetBoardingDetailsReq", p->soap_type() == SOAP_TYPE__ns1__GetBoardingDetailsReq ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns1__GetBoardingDetailsReq(struct soap *soap, const char *URL, _ns1__GetBoardingDetailsReq const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetBoardingDetailsReq", p->soap_type() == SOAP_TYPE__ns1__GetBoardingDetailsReq ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__GetBoardingDetailsReq * SOAP_FMAC4 soap_get__ns1__GetBoardingDetailsReq(struct soap*, _ns1__GetBoardingDetailsReq *, const char*, const char*);

inline int soap_read__ns1__GetBoardingDetailsReq(struct soap *soap, _ns1__GetBoardingDetailsReq *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__GetBoardingDetailsReq(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__GetBoardingDetailsReq(struct soap *soap, const char *URL, _ns1__GetBoardingDetailsReq *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__GetBoardingDetailsReq(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__GetBoardingDetailsReq(struct soap *soap, _ns1__GetBoardingDetailsReq *p)
{
	if (soap_read__ns1__GetBoardingDetailsReq(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__EnterBoardingReq_DEFINED
#define SOAP_TYPE__ns1__EnterBoardingReq_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__EnterBoardingReq(struct soap*, const char*, int, const _ns1__EnterBoardingReq *, const char*);
SOAP_FMAC3 _ns1__EnterBoardingReq * SOAP_FMAC4 soap_in__ns1__EnterBoardingReq(struct soap*, const char*, _ns1__EnterBoardingReq *, const char*);
SOAP_FMAC1 _ns1__EnterBoardingReq * SOAP_FMAC2 soap_instantiate__ns1__EnterBoardingReq(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__EnterBoardingReq * soap_new__ns1__EnterBoardingReq(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__EnterBoardingReq(soap, n, NULL, NULL, NULL);
}

inline _ns1__EnterBoardingReq * soap_new_req__ns1__EnterBoardingReq(
	struct soap *soap,
	ns1__EnterBoardingRequestType *EnterBoardingRequest)
{
	_ns1__EnterBoardingReq *_p = soap_new__ns1__EnterBoardingReq(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__EnterBoardingReq::EnterBoardingRequest = EnterBoardingRequest;
	}
	return _p;
}

inline _ns1__EnterBoardingReq * soap_new_set__ns1__EnterBoardingReq(
	struct soap *soap,
	ns1__EnterBoardingRequestType *EnterBoardingRequest)
{
	_ns1__EnterBoardingReq *_p = soap_new__ns1__EnterBoardingReq(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__EnterBoardingReq::EnterBoardingRequest = EnterBoardingRequest;
	}
	return _p;
}

inline int soap_write__ns1__EnterBoardingReq(struct soap *soap, _ns1__EnterBoardingReq const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:EnterBoardingReq", p->soap_type() == SOAP_TYPE__ns1__EnterBoardingReq ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__EnterBoardingReq(struct soap *soap, const char *URL, _ns1__EnterBoardingReq const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:EnterBoardingReq", p->soap_type() == SOAP_TYPE__ns1__EnterBoardingReq ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns1__EnterBoardingReq(struct soap *soap, const char *URL, _ns1__EnterBoardingReq const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:EnterBoardingReq", p->soap_type() == SOAP_TYPE__ns1__EnterBoardingReq ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__EnterBoardingReq * SOAP_FMAC4 soap_get__ns1__EnterBoardingReq(struct soap*, _ns1__EnterBoardingReq *, const char*, const char*);

inline int soap_read__ns1__EnterBoardingReq(struct soap *soap, _ns1__EnterBoardingReq *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__EnterBoardingReq(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__EnterBoardingReq(struct soap *soap, const char *URL, _ns1__EnterBoardingReq *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__EnterBoardingReq(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__EnterBoardingReq(struct soap *soap, _ns1__EnterBoardingReq *p)
{
	if (soap_read__ns1__EnterBoardingReq(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__AddressVerifyReq_DEFINED
#define SOAP_TYPE__ns1__AddressVerifyReq_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__AddressVerifyReq(struct soap*, const char*, int, const _ns1__AddressVerifyReq *, const char*);
SOAP_FMAC3 _ns1__AddressVerifyReq * SOAP_FMAC4 soap_in__ns1__AddressVerifyReq(struct soap*, const char*, _ns1__AddressVerifyReq *, const char*);
SOAP_FMAC1 _ns1__AddressVerifyReq * SOAP_FMAC2 soap_instantiate__ns1__AddressVerifyReq(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__AddressVerifyReq * soap_new__ns1__AddressVerifyReq(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__AddressVerifyReq(soap, n, NULL, NULL, NULL);
}

inline _ns1__AddressVerifyReq * soap_new_req__ns1__AddressVerifyReq(
	struct soap *soap,
	ns1__AddressVerifyRequestType *AddressVerifyRequest)
{
	_ns1__AddressVerifyReq *_p = soap_new__ns1__AddressVerifyReq(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__AddressVerifyReq::AddressVerifyRequest = AddressVerifyRequest;
	}
	return _p;
}

inline _ns1__AddressVerifyReq * soap_new_set__ns1__AddressVerifyReq(
	struct soap *soap,
	ns1__AddressVerifyRequestType *AddressVerifyRequest)
{
	_ns1__AddressVerifyReq *_p = soap_new__ns1__AddressVerifyReq(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__AddressVerifyReq::AddressVerifyRequest = AddressVerifyRequest;
	}
	return _p;
}

inline int soap_write__ns1__AddressVerifyReq(struct soap *soap, _ns1__AddressVerifyReq const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:AddressVerifyReq", p->soap_type() == SOAP_TYPE__ns1__AddressVerifyReq ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__AddressVerifyReq(struct soap *soap, const char *URL, _ns1__AddressVerifyReq const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:AddressVerifyReq", p->soap_type() == SOAP_TYPE__ns1__AddressVerifyReq ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns1__AddressVerifyReq(struct soap *soap, const char *URL, _ns1__AddressVerifyReq const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:AddressVerifyReq", p->soap_type() == SOAP_TYPE__ns1__AddressVerifyReq ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__AddressVerifyReq * SOAP_FMAC4 soap_get__ns1__AddressVerifyReq(struct soap*, _ns1__AddressVerifyReq *, const char*, const char*);

inline int soap_read__ns1__AddressVerifyReq(struct soap *soap, _ns1__AddressVerifyReq *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__AddressVerifyReq(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__AddressVerifyReq(struct soap *soap, const char *URL, _ns1__AddressVerifyReq *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__AddressVerifyReq(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__AddressVerifyReq(struct soap *soap, _ns1__AddressVerifyReq *p)
{
	if (soap_read__ns1__AddressVerifyReq(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__BillAgreementUpdateReq_DEFINED
#define SOAP_TYPE__ns1__BillAgreementUpdateReq_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__BillAgreementUpdateReq(struct soap*, const char*, int, const _ns1__BillAgreementUpdateReq *, const char*);
SOAP_FMAC3 _ns1__BillAgreementUpdateReq * SOAP_FMAC4 soap_in__ns1__BillAgreementUpdateReq(struct soap*, const char*, _ns1__BillAgreementUpdateReq *, const char*);
SOAP_FMAC1 _ns1__BillAgreementUpdateReq * SOAP_FMAC2 soap_instantiate__ns1__BillAgreementUpdateReq(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__BillAgreementUpdateReq * soap_new__ns1__BillAgreementUpdateReq(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__BillAgreementUpdateReq(soap, n, NULL, NULL, NULL);
}

inline _ns1__BillAgreementUpdateReq * soap_new_req__ns1__BillAgreementUpdateReq(
	struct soap *soap,
	ns1__BAUpdateRequestType *BAUpdateRequest)
{
	_ns1__BillAgreementUpdateReq *_p = soap_new__ns1__BillAgreementUpdateReq(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__BillAgreementUpdateReq::BAUpdateRequest = BAUpdateRequest;
	}
	return _p;
}

inline _ns1__BillAgreementUpdateReq * soap_new_set__ns1__BillAgreementUpdateReq(
	struct soap *soap,
	ns1__BAUpdateRequestType *BAUpdateRequest)
{
	_ns1__BillAgreementUpdateReq *_p = soap_new__ns1__BillAgreementUpdateReq(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__BillAgreementUpdateReq::BAUpdateRequest = BAUpdateRequest;
	}
	return _p;
}

inline int soap_write__ns1__BillAgreementUpdateReq(struct soap *soap, _ns1__BillAgreementUpdateReq const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:BillAgreementUpdateReq", p->soap_type() == SOAP_TYPE__ns1__BillAgreementUpdateReq ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__BillAgreementUpdateReq(struct soap *soap, const char *URL, _ns1__BillAgreementUpdateReq const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:BillAgreementUpdateReq", p->soap_type() == SOAP_TYPE__ns1__BillAgreementUpdateReq ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns1__BillAgreementUpdateReq(struct soap *soap, const char *URL, _ns1__BillAgreementUpdateReq const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:BillAgreementUpdateReq", p->soap_type() == SOAP_TYPE__ns1__BillAgreementUpdateReq ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__BillAgreementUpdateReq * SOAP_FMAC4 soap_get__ns1__BillAgreementUpdateReq(struct soap*, _ns1__BillAgreementUpdateReq *, const char*, const char*);

inline int soap_read__ns1__BillAgreementUpdateReq(struct soap *soap, _ns1__BillAgreementUpdateReq *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__BillAgreementUpdateReq(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__BillAgreementUpdateReq(struct soap *soap, const char *URL, _ns1__BillAgreementUpdateReq *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__BillAgreementUpdateReq(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__BillAgreementUpdateReq(struct soap *soap, _ns1__BillAgreementUpdateReq *p)
{
	if (soap_read__ns1__BillAgreementUpdateReq(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__MassPayReq_DEFINED
#define SOAP_TYPE__ns1__MassPayReq_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__MassPayReq(struct soap*, const char*, int, const _ns1__MassPayReq *, const char*);
SOAP_FMAC3 _ns1__MassPayReq * SOAP_FMAC4 soap_in__ns1__MassPayReq(struct soap*, const char*, _ns1__MassPayReq *, const char*);
SOAP_FMAC1 _ns1__MassPayReq * SOAP_FMAC2 soap_instantiate__ns1__MassPayReq(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__MassPayReq * soap_new__ns1__MassPayReq(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__MassPayReq(soap, n, NULL, NULL, NULL);
}

inline _ns1__MassPayReq * soap_new_req__ns1__MassPayReq(
	struct soap *soap,
	ns1__MassPayRequestType *MassPayRequest)
{
	_ns1__MassPayReq *_p = soap_new__ns1__MassPayReq(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__MassPayReq::MassPayRequest = MassPayRequest;
	}
	return _p;
}

inline _ns1__MassPayReq * soap_new_set__ns1__MassPayReq(
	struct soap *soap,
	ns1__MassPayRequestType *MassPayRequest)
{
	_ns1__MassPayReq *_p = soap_new__ns1__MassPayReq(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__MassPayReq::MassPayRequest = MassPayRequest;
	}
	return _p;
}

inline int soap_write__ns1__MassPayReq(struct soap *soap, _ns1__MassPayReq const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:MassPayReq", p->soap_type() == SOAP_TYPE__ns1__MassPayReq ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__MassPayReq(struct soap *soap, const char *URL, _ns1__MassPayReq const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:MassPayReq", p->soap_type() == SOAP_TYPE__ns1__MassPayReq ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns1__MassPayReq(struct soap *soap, const char *URL, _ns1__MassPayReq const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:MassPayReq", p->soap_type() == SOAP_TYPE__ns1__MassPayReq ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__MassPayReq * SOAP_FMAC4 soap_get__ns1__MassPayReq(struct soap*, _ns1__MassPayReq *, const char*, const char*);

inline int soap_read__ns1__MassPayReq(struct soap *soap, _ns1__MassPayReq *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__MassPayReq(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__MassPayReq(struct soap *soap, const char *URL, _ns1__MassPayReq *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__MassPayReq(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__MassPayReq(struct soap *soap, _ns1__MassPayReq *p)
{
	if (soap_read__ns1__MassPayReq(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__TransactionSearchReq_DEFINED
#define SOAP_TYPE__ns1__TransactionSearchReq_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__TransactionSearchReq(struct soap*, const char*, int, const _ns1__TransactionSearchReq *, const char*);
SOAP_FMAC3 _ns1__TransactionSearchReq * SOAP_FMAC4 soap_in__ns1__TransactionSearchReq(struct soap*, const char*, _ns1__TransactionSearchReq *, const char*);
SOAP_FMAC1 _ns1__TransactionSearchReq * SOAP_FMAC2 soap_instantiate__ns1__TransactionSearchReq(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__TransactionSearchReq * soap_new__ns1__TransactionSearchReq(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__TransactionSearchReq(soap, n, NULL, NULL, NULL);
}

inline _ns1__TransactionSearchReq * soap_new_req__ns1__TransactionSearchReq(
	struct soap *soap,
	ns1__TransactionSearchRequestType *TransactionSearchRequest)
{
	_ns1__TransactionSearchReq *_p = soap_new__ns1__TransactionSearchReq(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__TransactionSearchReq::TransactionSearchRequest = TransactionSearchRequest;
	}
	return _p;
}

inline _ns1__TransactionSearchReq * soap_new_set__ns1__TransactionSearchReq(
	struct soap *soap,
	ns1__TransactionSearchRequestType *TransactionSearchRequest)
{
	_ns1__TransactionSearchReq *_p = soap_new__ns1__TransactionSearchReq(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__TransactionSearchReq::TransactionSearchRequest = TransactionSearchRequest;
	}
	return _p;
}

inline int soap_write__ns1__TransactionSearchReq(struct soap *soap, _ns1__TransactionSearchReq const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:TransactionSearchReq", p->soap_type() == SOAP_TYPE__ns1__TransactionSearchReq ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__TransactionSearchReq(struct soap *soap, const char *URL, _ns1__TransactionSearchReq const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:TransactionSearchReq", p->soap_type() == SOAP_TYPE__ns1__TransactionSearchReq ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns1__TransactionSearchReq(struct soap *soap, const char *URL, _ns1__TransactionSearchReq const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:TransactionSearchReq", p->soap_type() == SOAP_TYPE__ns1__TransactionSearchReq ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__TransactionSearchReq * SOAP_FMAC4 soap_get__ns1__TransactionSearchReq(struct soap*, _ns1__TransactionSearchReq *, const char*, const char*);

inline int soap_read__ns1__TransactionSearchReq(struct soap *soap, _ns1__TransactionSearchReq *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__TransactionSearchReq(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__TransactionSearchReq(struct soap *soap, const char *URL, _ns1__TransactionSearchReq *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__TransactionSearchReq(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__TransactionSearchReq(struct soap *soap, _ns1__TransactionSearchReq *p)
{
	if (soap_read__ns1__TransactionSearchReq(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__BillUserReq_DEFINED
#define SOAP_TYPE__ns1__BillUserReq_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__BillUserReq(struct soap*, const char*, int, const _ns1__BillUserReq *, const char*);
SOAP_FMAC3 _ns1__BillUserReq * SOAP_FMAC4 soap_in__ns1__BillUserReq(struct soap*, const char*, _ns1__BillUserReq *, const char*);
SOAP_FMAC1 _ns1__BillUserReq * SOAP_FMAC2 soap_instantiate__ns1__BillUserReq(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__BillUserReq * soap_new__ns1__BillUserReq(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__BillUserReq(soap, n, NULL, NULL, NULL);
}

inline _ns1__BillUserReq * soap_new_req__ns1__BillUserReq(
	struct soap *soap,
	ns1__BillUserRequestType *BillUserRequest)
{
	_ns1__BillUserReq *_p = soap_new__ns1__BillUserReq(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__BillUserReq::BillUserRequest = BillUserRequest;
	}
	return _p;
}

inline _ns1__BillUserReq * soap_new_set__ns1__BillUserReq(
	struct soap *soap,
	ns1__BillUserRequestType *BillUserRequest)
{
	_ns1__BillUserReq *_p = soap_new__ns1__BillUserReq(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__BillUserReq::BillUserRequest = BillUserRequest;
	}
	return _p;
}

inline int soap_write__ns1__BillUserReq(struct soap *soap, _ns1__BillUserReq const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:BillUserReq", p->soap_type() == SOAP_TYPE__ns1__BillUserReq ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__BillUserReq(struct soap *soap, const char *URL, _ns1__BillUserReq const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:BillUserReq", p->soap_type() == SOAP_TYPE__ns1__BillUserReq ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns1__BillUserReq(struct soap *soap, const char *URL, _ns1__BillUserReq const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:BillUserReq", p->soap_type() == SOAP_TYPE__ns1__BillUserReq ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__BillUserReq * SOAP_FMAC4 soap_get__ns1__BillUserReq(struct soap*, _ns1__BillUserReq *, const char*, const char*);

inline int soap_read__ns1__BillUserReq(struct soap *soap, _ns1__BillUserReq *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__BillUserReq(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__BillUserReq(struct soap *soap, const char *URL, _ns1__BillUserReq *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__BillUserReq(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__BillUserReq(struct soap *soap, _ns1__BillUserReq *p)
{
	if (soap_read__ns1__BillUserReq(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__GetTransactionDetailsReq_DEFINED
#define SOAP_TYPE__ns1__GetTransactionDetailsReq_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetTransactionDetailsReq(struct soap*, const char*, int, const _ns1__GetTransactionDetailsReq *, const char*);
SOAP_FMAC3 _ns1__GetTransactionDetailsReq * SOAP_FMAC4 soap_in__ns1__GetTransactionDetailsReq(struct soap*, const char*, _ns1__GetTransactionDetailsReq *, const char*);
SOAP_FMAC1 _ns1__GetTransactionDetailsReq * SOAP_FMAC2 soap_instantiate__ns1__GetTransactionDetailsReq(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetTransactionDetailsReq * soap_new__ns1__GetTransactionDetailsReq(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__GetTransactionDetailsReq(soap, n, NULL, NULL, NULL);
}

inline _ns1__GetTransactionDetailsReq * soap_new_req__ns1__GetTransactionDetailsReq(
	struct soap *soap,
	ns1__GetTransactionDetailsRequestType *GetTransactionDetailsRequest)
{
	_ns1__GetTransactionDetailsReq *_p = soap_new__ns1__GetTransactionDetailsReq(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__GetTransactionDetailsReq::GetTransactionDetailsRequest = GetTransactionDetailsRequest;
	}
	return _p;
}

inline _ns1__GetTransactionDetailsReq * soap_new_set__ns1__GetTransactionDetailsReq(
	struct soap *soap,
	ns1__GetTransactionDetailsRequestType *GetTransactionDetailsRequest)
{
	_ns1__GetTransactionDetailsReq *_p = soap_new__ns1__GetTransactionDetailsReq(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__GetTransactionDetailsReq::GetTransactionDetailsRequest = GetTransactionDetailsRequest;
	}
	return _p;
}

inline int soap_write__ns1__GetTransactionDetailsReq(struct soap *soap, _ns1__GetTransactionDetailsReq const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetTransactionDetailsReq", p->soap_type() == SOAP_TYPE__ns1__GetTransactionDetailsReq ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__GetTransactionDetailsReq(struct soap *soap, const char *URL, _ns1__GetTransactionDetailsReq const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetTransactionDetailsReq", p->soap_type() == SOAP_TYPE__ns1__GetTransactionDetailsReq ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns1__GetTransactionDetailsReq(struct soap *soap, const char *URL, _ns1__GetTransactionDetailsReq const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetTransactionDetailsReq", p->soap_type() == SOAP_TYPE__ns1__GetTransactionDetailsReq ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__GetTransactionDetailsReq * SOAP_FMAC4 soap_get__ns1__GetTransactionDetailsReq(struct soap*, _ns1__GetTransactionDetailsReq *, const char*, const char*);

inline int soap_read__ns1__GetTransactionDetailsReq(struct soap *soap, _ns1__GetTransactionDetailsReq *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__GetTransactionDetailsReq(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__GetTransactionDetailsReq(struct soap *soap, const char *URL, _ns1__GetTransactionDetailsReq *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__GetTransactionDetailsReq(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__GetTransactionDetailsReq(struct soap *soap, _ns1__GetTransactionDetailsReq *p)
{
	if (soap_read__ns1__GetTransactionDetailsReq(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__CancelRecoupReq_DEFINED
#define SOAP_TYPE__ns1__CancelRecoupReq_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__CancelRecoupReq(struct soap*, const char*, int, const _ns1__CancelRecoupReq *, const char*);
SOAP_FMAC3 _ns1__CancelRecoupReq * SOAP_FMAC4 soap_in__ns1__CancelRecoupReq(struct soap*, const char*, _ns1__CancelRecoupReq *, const char*);
SOAP_FMAC1 _ns1__CancelRecoupReq * SOAP_FMAC2 soap_instantiate__ns1__CancelRecoupReq(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__CancelRecoupReq * soap_new__ns1__CancelRecoupReq(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__CancelRecoupReq(soap, n, NULL, NULL, NULL);
}

inline _ns1__CancelRecoupReq * soap_new_req__ns1__CancelRecoupReq(
	struct soap *soap,
	ns1__CancelRecoupRequestType *CancelRecoupRequest)
{
	_ns1__CancelRecoupReq *_p = soap_new__ns1__CancelRecoupReq(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__CancelRecoupReq::CancelRecoupRequest = CancelRecoupRequest;
	}
	return _p;
}

inline _ns1__CancelRecoupReq * soap_new_set__ns1__CancelRecoupReq(
	struct soap *soap,
	ns1__CancelRecoupRequestType *CancelRecoupRequest)
{
	_ns1__CancelRecoupReq *_p = soap_new__ns1__CancelRecoupReq(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__CancelRecoupReq::CancelRecoupRequest = CancelRecoupRequest;
	}
	return _p;
}

inline int soap_write__ns1__CancelRecoupReq(struct soap *soap, _ns1__CancelRecoupReq const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CancelRecoupReq", p->soap_type() == SOAP_TYPE__ns1__CancelRecoupReq ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__CancelRecoupReq(struct soap *soap, const char *URL, _ns1__CancelRecoupReq const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CancelRecoupReq", p->soap_type() == SOAP_TYPE__ns1__CancelRecoupReq ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns1__CancelRecoupReq(struct soap *soap, const char *URL, _ns1__CancelRecoupReq const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CancelRecoupReq", p->soap_type() == SOAP_TYPE__ns1__CancelRecoupReq ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__CancelRecoupReq * SOAP_FMAC4 soap_get__ns1__CancelRecoupReq(struct soap*, _ns1__CancelRecoupReq *, const char*, const char*);

inline int soap_read__ns1__CancelRecoupReq(struct soap *soap, _ns1__CancelRecoupReq *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__CancelRecoupReq(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__CancelRecoupReq(struct soap *soap, const char *URL, _ns1__CancelRecoupReq *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__CancelRecoupReq(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__CancelRecoupReq(struct soap *soap, _ns1__CancelRecoupReq *p)
{
	if (soap_read__ns1__CancelRecoupReq(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__CompleteRecoupReq_DEFINED
#define SOAP_TYPE__ns1__CompleteRecoupReq_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__CompleteRecoupReq(struct soap*, const char*, int, const _ns1__CompleteRecoupReq *, const char*);
SOAP_FMAC3 _ns1__CompleteRecoupReq * SOAP_FMAC4 soap_in__ns1__CompleteRecoupReq(struct soap*, const char*, _ns1__CompleteRecoupReq *, const char*);
SOAP_FMAC1 _ns1__CompleteRecoupReq * SOAP_FMAC2 soap_instantiate__ns1__CompleteRecoupReq(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__CompleteRecoupReq * soap_new__ns1__CompleteRecoupReq(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__CompleteRecoupReq(soap, n, NULL, NULL, NULL);
}

inline _ns1__CompleteRecoupReq * soap_new_req__ns1__CompleteRecoupReq(
	struct soap *soap,
	ns1__CompleteRecoupRequestType *CompleteRecoupRequest)
{
	_ns1__CompleteRecoupReq *_p = soap_new__ns1__CompleteRecoupReq(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__CompleteRecoupReq::CompleteRecoupRequest = CompleteRecoupRequest;
	}
	return _p;
}

inline _ns1__CompleteRecoupReq * soap_new_set__ns1__CompleteRecoupReq(
	struct soap *soap,
	ns1__CompleteRecoupRequestType *CompleteRecoupRequest)
{
	_ns1__CompleteRecoupReq *_p = soap_new__ns1__CompleteRecoupReq(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__CompleteRecoupReq::CompleteRecoupRequest = CompleteRecoupRequest;
	}
	return _p;
}

inline int soap_write__ns1__CompleteRecoupReq(struct soap *soap, _ns1__CompleteRecoupReq const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CompleteRecoupReq", p->soap_type() == SOAP_TYPE__ns1__CompleteRecoupReq ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__CompleteRecoupReq(struct soap *soap, const char *URL, _ns1__CompleteRecoupReq const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CompleteRecoupReq", p->soap_type() == SOAP_TYPE__ns1__CompleteRecoupReq ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns1__CompleteRecoupReq(struct soap *soap, const char *URL, _ns1__CompleteRecoupReq const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CompleteRecoupReq", p->soap_type() == SOAP_TYPE__ns1__CompleteRecoupReq ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__CompleteRecoupReq * SOAP_FMAC4 soap_get__ns1__CompleteRecoupReq(struct soap*, _ns1__CompleteRecoupReq *, const char*, const char*);

inline int soap_read__ns1__CompleteRecoupReq(struct soap *soap, _ns1__CompleteRecoupReq *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__CompleteRecoupReq(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__CompleteRecoupReq(struct soap *soap, const char *URL, _ns1__CompleteRecoupReq *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__CompleteRecoupReq(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__CompleteRecoupReq(struct soap *soap, _ns1__CompleteRecoupReq *p)
{
	if (soap_read__ns1__CompleteRecoupReq(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__InitiateRecoupReq_DEFINED
#define SOAP_TYPE__ns1__InitiateRecoupReq_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__InitiateRecoupReq(struct soap*, const char*, int, const _ns1__InitiateRecoupReq *, const char*);
SOAP_FMAC3 _ns1__InitiateRecoupReq * SOAP_FMAC4 soap_in__ns1__InitiateRecoupReq(struct soap*, const char*, _ns1__InitiateRecoupReq *, const char*);
SOAP_FMAC1 _ns1__InitiateRecoupReq * SOAP_FMAC2 soap_instantiate__ns1__InitiateRecoupReq(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__InitiateRecoupReq * soap_new__ns1__InitiateRecoupReq(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__InitiateRecoupReq(soap, n, NULL, NULL, NULL);
}

inline _ns1__InitiateRecoupReq * soap_new_req__ns1__InitiateRecoupReq(
	struct soap *soap,
	ns1__InitiateRecoupRequestType *InitiateRecoupRequest)
{
	_ns1__InitiateRecoupReq *_p = soap_new__ns1__InitiateRecoupReq(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__InitiateRecoupReq::InitiateRecoupRequest = InitiateRecoupRequest;
	}
	return _p;
}

inline _ns1__InitiateRecoupReq * soap_new_set__ns1__InitiateRecoupReq(
	struct soap *soap,
	ns1__InitiateRecoupRequestType *InitiateRecoupRequest)
{
	_ns1__InitiateRecoupReq *_p = soap_new__ns1__InitiateRecoupReq(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__InitiateRecoupReq::InitiateRecoupRequest = InitiateRecoupRequest;
	}
	return _p;
}

inline int soap_write__ns1__InitiateRecoupReq(struct soap *soap, _ns1__InitiateRecoupReq const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:InitiateRecoupReq", p->soap_type() == SOAP_TYPE__ns1__InitiateRecoupReq ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__InitiateRecoupReq(struct soap *soap, const char *URL, _ns1__InitiateRecoupReq const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:InitiateRecoupReq", p->soap_type() == SOAP_TYPE__ns1__InitiateRecoupReq ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns1__InitiateRecoupReq(struct soap *soap, const char *URL, _ns1__InitiateRecoupReq const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:InitiateRecoupReq", p->soap_type() == SOAP_TYPE__ns1__InitiateRecoupReq ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__InitiateRecoupReq * SOAP_FMAC4 soap_get__ns1__InitiateRecoupReq(struct soap*, _ns1__InitiateRecoupReq *, const char*, const char*);

inline int soap_read__ns1__InitiateRecoupReq(struct soap *soap, _ns1__InitiateRecoupReq *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__InitiateRecoupReq(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__InitiateRecoupReq(struct soap *soap, const char *URL, _ns1__InitiateRecoupReq *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__InitiateRecoupReq(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__InitiateRecoupReq(struct soap *soap, _ns1__InitiateRecoupReq *p)
{
	if (soap_read__ns1__InitiateRecoupReq(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__RefundTransactionReq_DEFINED
#define SOAP_TYPE__ns1__RefundTransactionReq_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__RefundTransactionReq(struct soap*, const char*, int, const _ns1__RefundTransactionReq *, const char*);
SOAP_FMAC3 _ns1__RefundTransactionReq * SOAP_FMAC4 soap_in__ns1__RefundTransactionReq(struct soap*, const char*, _ns1__RefundTransactionReq *, const char*);
SOAP_FMAC1 _ns1__RefundTransactionReq * SOAP_FMAC2 soap_instantiate__ns1__RefundTransactionReq(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__RefundTransactionReq * soap_new__ns1__RefundTransactionReq(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__RefundTransactionReq(soap, n, NULL, NULL, NULL);
}

inline _ns1__RefundTransactionReq * soap_new_req__ns1__RefundTransactionReq(
	struct soap *soap,
	ns1__RefundTransactionRequestType *RefundTransactionRequest)
{
	_ns1__RefundTransactionReq *_p = soap_new__ns1__RefundTransactionReq(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__RefundTransactionReq::RefundTransactionRequest = RefundTransactionRequest;
	}
	return _p;
}

inline _ns1__RefundTransactionReq * soap_new_set__ns1__RefundTransactionReq(
	struct soap *soap,
	ns1__RefundTransactionRequestType *RefundTransactionRequest)
{
	_ns1__RefundTransactionReq *_p = soap_new__ns1__RefundTransactionReq(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__RefundTransactionReq::RefundTransactionRequest = RefundTransactionRequest;
	}
	return _p;
}

inline int soap_write__ns1__RefundTransactionReq(struct soap *soap, _ns1__RefundTransactionReq const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:RefundTransactionReq", p->soap_type() == SOAP_TYPE__ns1__RefundTransactionReq ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__RefundTransactionReq(struct soap *soap, const char *URL, _ns1__RefundTransactionReq const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:RefundTransactionReq", p->soap_type() == SOAP_TYPE__ns1__RefundTransactionReq ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns1__RefundTransactionReq(struct soap *soap, const char *URL, _ns1__RefundTransactionReq const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:RefundTransactionReq", p->soap_type() == SOAP_TYPE__ns1__RefundTransactionReq ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__RefundTransactionReq * SOAP_FMAC4 soap_get__ns1__RefundTransactionReq(struct soap*, _ns1__RefundTransactionReq *, const char*, const char*);

inline int soap_read__ns1__RefundTransactionReq(struct soap *soap, _ns1__RefundTransactionReq *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__RefundTransactionReq(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__RefundTransactionReq(struct soap *soap, const char *URL, _ns1__RefundTransactionReq *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__RefundTransactionReq(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__RefundTransactionReq(struct soap *soap, _ns1__RefundTransactionReq *p)
{
	if (soap_read__ns1__RefundTransactionReq(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__BMButtonSearchReq_DEFINED
#define SOAP_TYPE__ns1__BMButtonSearchReq_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__BMButtonSearchReq(struct soap*, const char*, int, const _ns1__BMButtonSearchReq *, const char*);
SOAP_FMAC3 _ns1__BMButtonSearchReq * SOAP_FMAC4 soap_in__ns1__BMButtonSearchReq(struct soap*, const char*, _ns1__BMButtonSearchReq *, const char*);
SOAP_FMAC1 _ns1__BMButtonSearchReq * SOAP_FMAC2 soap_instantiate__ns1__BMButtonSearchReq(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__BMButtonSearchReq * soap_new__ns1__BMButtonSearchReq(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__BMButtonSearchReq(soap, n, NULL, NULL, NULL);
}

inline _ns1__BMButtonSearchReq * soap_new_req__ns1__BMButtonSearchReq(
	struct soap *soap,
	ns1__BMButtonSearchRequestType *BMButtonSearchRequest)
{
	_ns1__BMButtonSearchReq *_p = soap_new__ns1__BMButtonSearchReq(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__BMButtonSearchReq::BMButtonSearchRequest = BMButtonSearchRequest;
	}
	return _p;
}

inline _ns1__BMButtonSearchReq * soap_new_set__ns1__BMButtonSearchReq(
	struct soap *soap,
	ns1__BMButtonSearchRequestType *BMButtonSearchRequest)
{
	_ns1__BMButtonSearchReq *_p = soap_new__ns1__BMButtonSearchReq(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__BMButtonSearchReq::BMButtonSearchRequest = BMButtonSearchRequest;
	}
	return _p;
}

inline int soap_write__ns1__BMButtonSearchReq(struct soap *soap, _ns1__BMButtonSearchReq const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:BMButtonSearchReq", p->soap_type() == SOAP_TYPE__ns1__BMButtonSearchReq ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__BMButtonSearchReq(struct soap *soap, const char *URL, _ns1__BMButtonSearchReq const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:BMButtonSearchReq", p->soap_type() == SOAP_TYPE__ns1__BMButtonSearchReq ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns1__BMButtonSearchReq(struct soap *soap, const char *URL, _ns1__BMButtonSearchReq const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:BMButtonSearchReq", p->soap_type() == SOAP_TYPE__ns1__BMButtonSearchReq ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__BMButtonSearchReq * SOAP_FMAC4 soap_get__ns1__BMButtonSearchReq(struct soap*, _ns1__BMButtonSearchReq *, const char*, const char*);

inline int soap_read__ns1__BMButtonSearchReq(struct soap *soap, _ns1__BMButtonSearchReq *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__BMButtonSearchReq(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__BMButtonSearchReq(struct soap *soap, const char *URL, _ns1__BMButtonSearchReq *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__BMButtonSearchReq(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__BMButtonSearchReq(struct soap *soap, _ns1__BMButtonSearchReq *p)
{
	if (soap_read__ns1__BMButtonSearchReq(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__BMGetInventoryReq_DEFINED
#define SOAP_TYPE__ns1__BMGetInventoryReq_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__BMGetInventoryReq(struct soap*, const char*, int, const _ns1__BMGetInventoryReq *, const char*);
SOAP_FMAC3 _ns1__BMGetInventoryReq * SOAP_FMAC4 soap_in__ns1__BMGetInventoryReq(struct soap*, const char*, _ns1__BMGetInventoryReq *, const char*);
SOAP_FMAC1 _ns1__BMGetInventoryReq * SOAP_FMAC2 soap_instantiate__ns1__BMGetInventoryReq(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__BMGetInventoryReq * soap_new__ns1__BMGetInventoryReq(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__BMGetInventoryReq(soap, n, NULL, NULL, NULL);
}

inline _ns1__BMGetInventoryReq * soap_new_req__ns1__BMGetInventoryReq(
	struct soap *soap,
	ns1__BMGetInventoryRequestType *BMGetInventoryRequest)
{
	_ns1__BMGetInventoryReq *_p = soap_new__ns1__BMGetInventoryReq(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__BMGetInventoryReq::BMGetInventoryRequest = BMGetInventoryRequest;
	}
	return _p;
}

inline _ns1__BMGetInventoryReq * soap_new_set__ns1__BMGetInventoryReq(
	struct soap *soap,
	ns1__BMGetInventoryRequestType *BMGetInventoryRequest)
{
	_ns1__BMGetInventoryReq *_p = soap_new__ns1__BMGetInventoryReq(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__BMGetInventoryReq::BMGetInventoryRequest = BMGetInventoryRequest;
	}
	return _p;
}

inline int soap_write__ns1__BMGetInventoryReq(struct soap *soap, _ns1__BMGetInventoryReq const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:BMGetInventoryReq", p->soap_type() == SOAP_TYPE__ns1__BMGetInventoryReq ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__BMGetInventoryReq(struct soap *soap, const char *URL, _ns1__BMGetInventoryReq const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:BMGetInventoryReq", p->soap_type() == SOAP_TYPE__ns1__BMGetInventoryReq ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns1__BMGetInventoryReq(struct soap *soap, const char *URL, _ns1__BMGetInventoryReq const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:BMGetInventoryReq", p->soap_type() == SOAP_TYPE__ns1__BMGetInventoryReq ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__BMGetInventoryReq * SOAP_FMAC4 soap_get__ns1__BMGetInventoryReq(struct soap*, _ns1__BMGetInventoryReq *, const char*, const char*);

inline int soap_read__ns1__BMGetInventoryReq(struct soap *soap, _ns1__BMGetInventoryReq *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__BMGetInventoryReq(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__BMGetInventoryReq(struct soap *soap, const char *URL, _ns1__BMGetInventoryReq *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__BMGetInventoryReq(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__BMGetInventoryReq(struct soap *soap, _ns1__BMGetInventoryReq *p)
{
	if (soap_read__ns1__BMGetInventoryReq(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__BMSetInventoryReq_DEFINED
#define SOAP_TYPE__ns1__BMSetInventoryReq_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__BMSetInventoryReq(struct soap*, const char*, int, const _ns1__BMSetInventoryReq *, const char*);
SOAP_FMAC3 _ns1__BMSetInventoryReq * SOAP_FMAC4 soap_in__ns1__BMSetInventoryReq(struct soap*, const char*, _ns1__BMSetInventoryReq *, const char*);
SOAP_FMAC1 _ns1__BMSetInventoryReq * SOAP_FMAC2 soap_instantiate__ns1__BMSetInventoryReq(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__BMSetInventoryReq * soap_new__ns1__BMSetInventoryReq(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__BMSetInventoryReq(soap, n, NULL, NULL, NULL);
}

inline _ns1__BMSetInventoryReq * soap_new_req__ns1__BMSetInventoryReq(
	struct soap *soap,
	ns1__BMSetInventoryRequestType *BMSetInventoryRequest)
{
	_ns1__BMSetInventoryReq *_p = soap_new__ns1__BMSetInventoryReq(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__BMSetInventoryReq::BMSetInventoryRequest = BMSetInventoryRequest;
	}
	return _p;
}

inline _ns1__BMSetInventoryReq * soap_new_set__ns1__BMSetInventoryReq(
	struct soap *soap,
	ns1__BMSetInventoryRequestType *BMSetInventoryRequest)
{
	_ns1__BMSetInventoryReq *_p = soap_new__ns1__BMSetInventoryReq(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__BMSetInventoryReq::BMSetInventoryRequest = BMSetInventoryRequest;
	}
	return _p;
}

inline int soap_write__ns1__BMSetInventoryReq(struct soap *soap, _ns1__BMSetInventoryReq const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:BMSetInventoryReq", p->soap_type() == SOAP_TYPE__ns1__BMSetInventoryReq ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__BMSetInventoryReq(struct soap *soap, const char *URL, _ns1__BMSetInventoryReq const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:BMSetInventoryReq", p->soap_type() == SOAP_TYPE__ns1__BMSetInventoryReq ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns1__BMSetInventoryReq(struct soap *soap, const char *URL, _ns1__BMSetInventoryReq const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:BMSetInventoryReq", p->soap_type() == SOAP_TYPE__ns1__BMSetInventoryReq ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__BMSetInventoryReq * SOAP_FMAC4 soap_get__ns1__BMSetInventoryReq(struct soap*, _ns1__BMSetInventoryReq *, const char*, const char*);

inline int soap_read__ns1__BMSetInventoryReq(struct soap *soap, _ns1__BMSetInventoryReq *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__BMSetInventoryReq(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__BMSetInventoryReq(struct soap *soap, const char *URL, _ns1__BMSetInventoryReq *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__BMSetInventoryReq(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__BMSetInventoryReq(struct soap *soap, _ns1__BMSetInventoryReq *p)
{
	if (soap_read__ns1__BMSetInventoryReq(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__BMGetButtonDetailsReq_DEFINED
#define SOAP_TYPE__ns1__BMGetButtonDetailsReq_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__BMGetButtonDetailsReq(struct soap*, const char*, int, const _ns1__BMGetButtonDetailsReq *, const char*);
SOAP_FMAC3 _ns1__BMGetButtonDetailsReq * SOAP_FMAC4 soap_in__ns1__BMGetButtonDetailsReq(struct soap*, const char*, _ns1__BMGetButtonDetailsReq *, const char*);
SOAP_FMAC1 _ns1__BMGetButtonDetailsReq * SOAP_FMAC2 soap_instantiate__ns1__BMGetButtonDetailsReq(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__BMGetButtonDetailsReq * soap_new__ns1__BMGetButtonDetailsReq(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__BMGetButtonDetailsReq(soap, n, NULL, NULL, NULL);
}

inline _ns1__BMGetButtonDetailsReq * soap_new_req__ns1__BMGetButtonDetailsReq(
	struct soap *soap,
	ns1__BMGetButtonDetailsRequestType *BMGetButtonDetailsRequest)
{
	_ns1__BMGetButtonDetailsReq *_p = soap_new__ns1__BMGetButtonDetailsReq(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__BMGetButtonDetailsReq::BMGetButtonDetailsRequest = BMGetButtonDetailsRequest;
	}
	return _p;
}

inline _ns1__BMGetButtonDetailsReq * soap_new_set__ns1__BMGetButtonDetailsReq(
	struct soap *soap,
	ns1__BMGetButtonDetailsRequestType *BMGetButtonDetailsRequest)
{
	_ns1__BMGetButtonDetailsReq *_p = soap_new__ns1__BMGetButtonDetailsReq(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__BMGetButtonDetailsReq::BMGetButtonDetailsRequest = BMGetButtonDetailsRequest;
	}
	return _p;
}

inline int soap_write__ns1__BMGetButtonDetailsReq(struct soap *soap, _ns1__BMGetButtonDetailsReq const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:BMGetButtonDetailsReq", p->soap_type() == SOAP_TYPE__ns1__BMGetButtonDetailsReq ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__BMGetButtonDetailsReq(struct soap *soap, const char *URL, _ns1__BMGetButtonDetailsReq const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:BMGetButtonDetailsReq", p->soap_type() == SOAP_TYPE__ns1__BMGetButtonDetailsReq ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns1__BMGetButtonDetailsReq(struct soap *soap, const char *URL, _ns1__BMGetButtonDetailsReq const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:BMGetButtonDetailsReq", p->soap_type() == SOAP_TYPE__ns1__BMGetButtonDetailsReq ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__BMGetButtonDetailsReq * SOAP_FMAC4 soap_get__ns1__BMGetButtonDetailsReq(struct soap*, _ns1__BMGetButtonDetailsReq *, const char*, const char*);

inline int soap_read__ns1__BMGetButtonDetailsReq(struct soap *soap, _ns1__BMGetButtonDetailsReq *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__BMGetButtonDetailsReq(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__BMGetButtonDetailsReq(struct soap *soap, const char *URL, _ns1__BMGetButtonDetailsReq *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__BMGetButtonDetailsReq(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__BMGetButtonDetailsReq(struct soap *soap, _ns1__BMGetButtonDetailsReq *p)
{
	if (soap_read__ns1__BMGetButtonDetailsReq(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__BMManageButtonStatusReq_DEFINED
#define SOAP_TYPE__ns1__BMManageButtonStatusReq_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__BMManageButtonStatusReq(struct soap*, const char*, int, const _ns1__BMManageButtonStatusReq *, const char*);
SOAP_FMAC3 _ns1__BMManageButtonStatusReq * SOAP_FMAC4 soap_in__ns1__BMManageButtonStatusReq(struct soap*, const char*, _ns1__BMManageButtonStatusReq *, const char*);
SOAP_FMAC1 _ns1__BMManageButtonStatusReq * SOAP_FMAC2 soap_instantiate__ns1__BMManageButtonStatusReq(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__BMManageButtonStatusReq * soap_new__ns1__BMManageButtonStatusReq(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__BMManageButtonStatusReq(soap, n, NULL, NULL, NULL);
}

inline _ns1__BMManageButtonStatusReq * soap_new_req__ns1__BMManageButtonStatusReq(
	struct soap *soap,
	ns1__BMManageButtonStatusRequestType *BMManageButtonStatusRequest)
{
	_ns1__BMManageButtonStatusReq *_p = soap_new__ns1__BMManageButtonStatusReq(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__BMManageButtonStatusReq::BMManageButtonStatusRequest = BMManageButtonStatusRequest;
	}
	return _p;
}

inline _ns1__BMManageButtonStatusReq * soap_new_set__ns1__BMManageButtonStatusReq(
	struct soap *soap,
	ns1__BMManageButtonStatusRequestType *BMManageButtonStatusRequest)
{
	_ns1__BMManageButtonStatusReq *_p = soap_new__ns1__BMManageButtonStatusReq(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__BMManageButtonStatusReq::BMManageButtonStatusRequest = BMManageButtonStatusRequest;
	}
	return _p;
}

inline int soap_write__ns1__BMManageButtonStatusReq(struct soap *soap, _ns1__BMManageButtonStatusReq const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:BMManageButtonStatusReq", p->soap_type() == SOAP_TYPE__ns1__BMManageButtonStatusReq ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__BMManageButtonStatusReq(struct soap *soap, const char *URL, _ns1__BMManageButtonStatusReq const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:BMManageButtonStatusReq", p->soap_type() == SOAP_TYPE__ns1__BMManageButtonStatusReq ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns1__BMManageButtonStatusReq(struct soap *soap, const char *URL, _ns1__BMManageButtonStatusReq const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:BMManageButtonStatusReq", p->soap_type() == SOAP_TYPE__ns1__BMManageButtonStatusReq ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__BMManageButtonStatusReq * SOAP_FMAC4 soap_get__ns1__BMManageButtonStatusReq(struct soap*, _ns1__BMManageButtonStatusReq *, const char*, const char*);

inline int soap_read__ns1__BMManageButtonStatusReq(struct soap *soap, _ns1__BMManageButtonStatusReq *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__BMManageButtonStatusReq(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__BMManageButtonStatusReq(struct soap *soap, const char *URL, _ns1__BMManageButtonStatusReq *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__BMManageButtonStatusReq(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__BMManageButtonStatusReq(struct soap *soap, _ns1__BMManageButtonStatusReq *p)
{
	if (soap_read__ns1__BMManageButtonStatusReq(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__BMUpdateButtonReq_DEFINED
#define SOAP_TYPE__ns1__BMUpdateButtonReq_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__BMUpdateButtonReq(struct soap*, const char*, int, const _ns1__BMUpdateButtonReq *, const char*);
SOAP_FMAC3 _ns1__BMUpdateButtonReq * SOAP_FMAC4 soap_in__ns1__BMUpdateButtonReq(struct soap*, const char*, _ns1__BMUpdateButtonReq *, const char*);
SOAP_FMAC1 _ns1__BMUpdateButtonReq * SOAP_FMAC2 soap_instantiate__ns1__BMUpdateButtonReq(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__BMUpdateButtonReq * soap_new__ns1__BMUpdateButtonReq(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__BMUpdateButtonReq(soap, n, NULL, NULL, NULL);
}

inline _ns1__BMUpdateButtonReq * soap_new_req__ns1__BMUpdateButtonReq(
	struct soap *soap,
	ns1__BMUpdateButtonRequestType *BMUpdateButtonRequest)
{
	_ns1__BMUpdateButtonReq *_p = soap_new__ns1__BMUpdateButtonReq(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__BMUpdateButtonReq::BMUpdateButtonRequest = BMUpdateButtonRequest;
	}
	return _p;
}

inline _ns1__BMUpdateButtonReq * soap_new_set__ns1__BMUpdateButtonReq(
	struct soap *soap,
	ns1__BMUpdateButtonRequestType *BMUpdateButtonRequest)
{
	_ns1__BMUpdateButtonReq *_p = soap_new__ns1__BMUpdateButtonReq(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__BMUpdateButtonReq::BMUpdateButtonRequest = BMUpdateButtonRequest;
	}
	return _p;
}

inline int soap_write__ns1__BMUpdateButtonReq(struct soap *soap, _ns1__BMUpdateButtonReq const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:BMUpdateButtonReq", p->soap_type() == SOAP_TYPE__ns1__BMUpdateButtonReq ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__BMUpdateButtonReq(struct soap *soap, const char *URL, _ns1__BMUpdateButtonReq const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:BMUpdateButtonReq", p->soap_type() == SOAP_TYPE__ns1__BMUpdateButtonReq ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns1__BMUpdateButtonReq(struct soap *soap, const char *URL, _ns1__BMUpdateButtonReq const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:BMUpdateButtonReq", p->soap_type() == SOAP_TYPE__ns1__BMUpdateButtonReq ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__BMUpdateButtonReq * SOAP_FMAC4 soap_get__ns1__BMUpdateButtonReq(struct soap*, _ns1__BMUpdateButtonReq *, const char*, const char*);

inline int soap_read__ns1__BMUpdateButtonReq(struct soap *soap, _ns1__BMUpdateButtonReq *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__BMUpdateButtonReq(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__BMUpdateButtonReq(struct soap *soap, const char *URL, _ns1__BMUpdateButtonReq *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__BMUpdateButtonReq(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__BMUpdateButtonReq(struct soap *soap, _ns1__BMUpdateButtonReq *p)
{
	if (soap_read__ns1__BMUpdateButtonReq(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__BMCreateButtonReq_DEFINED
#define SOAP_TYPE__ns1__BMCreateButtonReq_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__BMCreateButtonReq(struct soap*, const char*, int, const _ns1__BMCreateButtonReq *, const char*);
SOAP_FMAC3 _ns1__BMCreateButtonReq * SOAP_FMAC4 soap_in__ns1__BMCreateButtonReq(struct soap*, const char*, _ns1__BMCreateButtonReq *, const char*);
SOAP_FMAC1 _ns1__BMCreateButtonReq * SOAP_FMAC2 soap_instantiate__ns1__BMCreateButtonReq(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__BMCreateButtonReq * soap_new__ns1__BMCreateButtonReq(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__BMCreateButtonReq(soap, n, NULL, NULL, NULL);
}

inline _ns1__BMCreateButtonReq * soap_new_req__ns1__BMCreateButtonReq(
	struct soap *soap,
	ns1__BMCreateButtonRequestType *BMCreateButtonRequest)
{
	_ns1__BMCreateButtonReq *_p = soap_new__ns1__BMCreateButtonReq(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__BMCreateButtonReq::BMCreateButtonRequest = BMCreateButtonRequest;
	}
	return _p;
}

inline _ns1__BMCreateButtonReq * soap_new_set__ns1__BMCreateButtonReq(
	struct soap *soap,
	ns1__BMCreateButtonRequestType *BMCreateButtonRequest)
{
	_ns1__BMCreateButtonReq *_p = soap_new__ns1__BMCreateButtonReq(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__BMCreateButtonReq::BMCreateButtonRequest = BMCreateButtonRequest;
	}
	return _p;
}

inline int soap_write__ns1__BMCreateButtonReq(struct soap *soap, _ns1__BMCreateButtonReq const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:BMCreateButtonReq", p->soap_type() == SOAP_TYPE__ns1__BMCreateButtonReq ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__BMCreateButtonReq(struct soap *soap, const char *URL, _ns1__BMCreateButtonReq const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:BMCreateButtonReq", p->soap_type() == SOAP_TYPE__ns1__BMCreateButtonReq ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns1__BMCreateButtonReq(struct soap *soap, const char *URL, _ns1__BMCreateButtonReq const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:BMCreateButtonReq", p->soap_type() == SOAP_TYPE__ns1__BMCreateButtonReq ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__BMCreateButtonReq * SOAP_FMAC4 soap_get__ns1__BMCreateButtonReq(struct soap*, _ns1__BMCreateButtonReq *, const char*, const char*);

inline int soap_read__ns1__BMCreateButtonReq(struct soap *soap, _ns1__BMCreateButtonReq *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__BMCreateButtonReq(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__BMCreateButtonReq(struct soap *soap, const char *URL, _ns1__BMCreateButtonReq *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__BMCreateButtonReq(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__BMCreateButtonReq(struct soap *soap, _ns1__BMCreateButtonReq *p)
{
	if (soap_read__ns1__BMCreateButtonReq(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__ExternalRememberMeOptOutResponseType_DEFINED
#define SOAP_TYPE_ns1__ExternalRememberMeOptOutResponseType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__ExternalRememberMeOptOutResponseType(struct soap*, const char*, int, const ns1__ExternalRememberMeOptOutResponseType *, const char*);
SOAP_FMAC3 ns1__ExternalRememberMeOptOutResponseType * SOAP_FMAC4 soap_in_ns1__ExternalRememberMeOptOutResponseType(struct soap*, const char*, ns1__ExternalRememberMeOptOutResponseType *, const char*);
SOAP_FMAC1 ns1__ExternalRememberMeOptOutResponseType * SOAP_FMAC2 soap_instantiate_ns1__ExternalRememberMeOptOutResponseType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__ExternalRememberMeOptOutResponseType * soap_new_ns1__ExternalRememberMeOptOutResponseType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__ExternalRememberMeOptOutResponseType(soap, n, NULL, NULL, NULL);
}

inline ns1__ExternalRememberMeOptOutResponseType * soap_new_req_ns1__ExternalRememberMeOptOutResponseType(
	struct soap *soap,
	enum ns3__AckCodeType Ack__1,
	const std::string& Version__1,
	const std::string& Build__1)
{
	ns1__ExternalRememberMeOptOutResponseType *_p = soap_new_ns1__ExternalRememberMeOptOutResponseType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__AbstractResponseType::Ack = Ack__1;
		_p->ns3__AbstractResponseType::Version = Version__1;
		_p->ns3__AbstractResponseType::Build = Build__1;
	}
	return _p;
}

inline ns1__ExternalRememberMeOptOutResponseType * soap_new_set_ns1__ExternalRememberMeOptOutResponseType(
	struct soap *soap,
	time_t *Timestamp__1,
	enum ns3__AckCodeType Ack__1,
	std::string *CorrelationID__1,
	const std::vector<ns3__ErrorType *> & Errors__1,
	const std::string& Version__1,
	const std::string& Build__1,
	char *__any__1)
{
	ns1__ExternalRememberMeOptOutResponseType *_p = soap_new_ns1__ExternalRememberMeOptOutResponseType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__AbstractResponseType::Timestamp = Timestamp__1;
		_p->ns3__AbstractResponseType::Ack = Ack__1;
		_p->ns3__AbstractResponseType::CorrelationID = CorrelationID__1;
		_p->ns3__AbstractResponseType::Errors = Errors__1;
		_p->ns3__AbstractResponseType::Version = Version__1;
		_p->ns3__AbstractResponseType::Build = Build__1;
		_p->ns3__AbstractResponseType::__any = __any__1;
	}
	return _p;
}

inline int soap_write_ns1__ExternalRememberMeOptOutResponseType(struct soap *soap, ns1__ExternalRememberMeOptOutResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ExternalRememberMeOptOutResponseType", p->soap_type() == SOAP_TYPE_ns1__ExternalRememberMeOptOutResponseType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__ExternalRememberMeOptOutResponseType(struct soap *soap, const char *URL, ns1__ExternalRememberMeOptOutResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ExternalRememberMeOptOutResponseType", p->soap_type() == SOAP_TYPE_ns1__ExternalRememberMeOptOutResponseType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__ExternalRememberMeOptOutResponseType(struct soap *soap, const char *URL, ns1__ExternalRememberMeOptOutResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ExternalRememberMeOptOutResponseType", p->soap_type() == SOAP_TYPE_ns1__ExternalRememberMeOptOutResponseType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__ExternalRememberMeOptOutResponseType * SOAP_FMAC4 soap_get_ns1__ExternalRememberMeOptOutResponseType(struct soap*, ns1__ExternalRememberMeOptOutResponseType *, const char*, const char*);

inline int soap_read_ns1__ExternalRememberMeOptOutResponseType(struct soap *soap, ns1__ExternalRememberMeOptOutResponseType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__ExternalRememberMeOptOutResponseType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__ExternalRememberMeOptOutResponseType(struct soap *soap, const char *URL, ns1__ExternalRememberMeOptOutResponseType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__ExternalRememberMeOptOutResponseType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__ExternalRememberMeOptOutResponseType(struct soap *soap, ns1__ExternalRememberMeOptOutResponseType *p)
{
	if (soap_read_ns1__ExternalRememberMeOptOutResponseType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__ExternalRememberMeOptOutRequestType_DEFINED
#define SOAP_TYPE_ns1__ExternalRememberMeOptOutRequestType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__ExternalRememberMeOptOutRequestType(struct soap*, const char*, int, const ns1__ExternalRememberMeOptOutRequestType *, const char*);
SOAP_FMAC3 ns1__ExternalRememberMeOptOutRequestType * SOAP_FMAC4 soap_in_ns1__ExternalRememberMeOptOutRequestType(struct soap*, const char*, ns1__ExternalRememberMeOptOutRequestType *, const char*);
SOAP_FMAC1 ns1__ExternalRememberMeOptOutRequestType * SOAP_FMAC2 soap_instantiate_ns1__ExternalRememberMeOptOutRequestType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__ExternalRememberMeOptOutRequestType * soap_new_ns1__ExternalRememberMeOptOutRequestType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__ExternalRememberMeOptOutRequestType(soap, n, NULL, NULL, NULL);
}

inline ns1__ExternalRememberMeOptOutRequestType * soap_new_req_ns1__ExternalRememberMeOptOutRequestType(
	struct soap *soap,
	const std::string& ExternalRememberMeID,
	const std::string& Version__1)
{
	ns1__ExternalRememberMeOptOutRequestType *_p = soap_new_ns1__ExternalRememberMeOptOutRequestType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__ExternalRememberMeOptOutRequestType::ExternalRememberMeID = ExternalRememberMeID;
		_p->ns3__AbstractRequestType::Version = Version__1;
	}
	return _p;
}

inline ns1__ExternalRememberMeOptOutRequestType * soap_new_set_ns1__ExternalRememberMeOptOutRequestType(
	struct soap *soap,
	const std::string& ExternalRememberMeID,
	ns3__ExternalRememberMeOwnerDetailsType *ExternalRememberMeOwnerDetails,
	const std::vector<enum ns3__DetailLevelCodeType> & DetailLevel__1,
	std::string *ErrorLanguage__1,
	const std::string& Version__1,
	char *__any__1)
{
	ns1__ExternalRememberMeOptOutRequestType *_p = soap_new_ns1__ExternalRememberMeOptOutRequestType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__ExternalRememberMeOptOutRequestType::ExternalRememberMeID = ExternalRememberMeID;
		_p->ns1__ExternalRememberMeOptOutRequestType::ExternalRememberMeOwnerDetails = ExternalRememberMeOwnerDetails;
		_p->ns3__AbstractRequestType::DetailLevel = DetailLevel__1;
		_p->ns3__AbstractRequestType::ErrorLanguage = ErrorLanguage__1;
		_p->ns3__AbstractRequestType::Version = Version__1;
		_p->ns3__AbstractRequestType::__any = __any__1;
	}
	return _p;
}

inline int soap_write_ns1__ExternalRememberMeOptOutRequestType(struct soap *soap, ns1__ExternalRememberMeOptOutRequestType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ExternalRememberMeOptOutRequestType", p->soap_type() == SOAP_TYPE_ns1__ExternalRememberMeOptOutRequestType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__ExternalRememberMeOptOutRequestType(struct soap *soap, const char *URL, ns1__ExternalRememberMeOptOutRequestType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ExternalRememberMeOptOutRequestType", p->soap_type() == SOAP_TYPE_ns1__ExternalRememberMeOptOutRequestType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__ExternalRememberMeOptOutRequestType(struct soap *soap, const char *URL, ns1__ExternalRememberMeOptOutRequestType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ExternalRememberMeOptOutRequestType", p->soap_type() == SOAP_TYPE_ns1__ExternalRememberMeOptOutRequestType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__ExternalRememberMeOptOutRequestType * SOAP_FMAC4 soap_get_ns1__ExternalRememberMeOptOutRequestType(struct soap*, ns1__ExternalRememberMeOptOutRequestType *, const char*, const char*);

inline int soap_read_ns1__ExternalRememberMeOptOutRequestType(struct soap *soap, ns1__ExternalRememberMeOptOutRequestType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__ExternalRememberMeOptOutRequestType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__ExternalRememberMeOptOutRequestType(struct soap *soap, const char *URL, ns1__ExternalRememberMeOptOutRequestType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__ExternalRememberMeOptOutRequestType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__ExternalRememberMeOptOutRequestType(struct soap *soap, ns1__ExternalRememberMeOptOutRequestType *p)
{
	if (soap_read_ns1__ExternalRememberMeOptOutRequestType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__ReverseTransactionResponseType_DEFINED
#define SOAP_TYPE_ns1__ReverseTransactionResponseType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__ReverseTransactionResponseType(struct soap*, const char*, int, const ns1__ReverseTransactionResponseType *, const char*);
SOAP_FMAC3 ns1__ReverseTransactionResponseType * SOAP_FMAC4 soap_in_ns1__ReverseTransactionResponseType(struct soap*, const char*, ns1__ReverseTransactionResponseType *, const char*);
SOAP_FMAC1 ns1__ReverseTransactionResponseType * SOAP_FMAC2 soap_instantiate_ns1__ReverseTransactionResponseType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__ReverseTransactionResponseType * soap_new_ns1__ReverseTransactionResponseType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__ReverseTransactionResponseType(soap, n, NULL, NULL, NULL);
}

inline ns1__ReverseTransactionResponseType * soap_new_req_ns1__ReverseTransactionResponseType(
	struct soap *soap,
	ns3__ReverseTransactionResponseDetailsType *ns3__ReverseTransactionResponseDetails,
	enum ns3__AckCodeType Ack__1,
	const std::string& Version__1,
	const std::string& Build__1)
{
	ns1__ReverseTransactionResponseType *_p = soap_new_ns1__ReverseTransactionResponseType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__ReverseTransactionResponseType::ns3__ReverseTransactionResponseDetails = ns3__ReverseTransactionResponseDetails;
		_p->ns3__AbstractResponseType::Ack = Ack__1;
		_p->ns3__AbstractResponseType::Version = Version__1;
		_p->ns3__AbstractResponseType::Build = Build__1;
	}
	return _p;
}

inline ns1__ReverseTransactionResponseType * soap_new_set_ns1__ReverseTransactionResponseType(
	struct soap *soap,
	ns3__ReverseTransactionResponseDetailsType *ns3__ReverseTransactionResponseDetails,
	time_t *Timestamp__1,
	enum ns3__AckCodeType Ack__1,
	std::string *CorrelationID__1,
	const std::vector<ns3__ErrorType *> & Errors__1,
	const std::string& Version__1,
	const std::string& Build__1,
	char *__any__1)
{
	ns1__ReverseTransactionResponseType *_p = soap_new_ns1__ReverseTransactionResponseType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__ReverseTransactionResponseType::ns3__ReverseTransactionResponseDetails = ns3__ReverseTransactionResponseDetails;
		_p->ns3__AbstractResponseType::Timestamp = Timestamp__1;
		_p->ns3__AbstractResponseType::Ack = Ack__1;
		_p->ns3__AbstractResponseType::CorrelationID = CorrelationID__1;
		_p->ns3__AbstractResponseType::Errors = Errors__1;
		_p->ns3__AbstractResponseType::Version = Version__1;
		_p->ns3__AbstractResponseType::Build = Build__1;
		_p->ns3__AbstractResponseType::__any = __any__1;
	}
	return _p;
}

inline int soap_write_ns1__ReverseTransactionResponseType(struct soap *soap, ns1__ReverseTransactionResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ReverseTransactionResponseType", p->soap_type() == SOAP_TYPE_ns1__ReverseTransactionResponseType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__ReverseTransactionResponseType(struct soap *soap, const char *URL, ns1__ReverseTransactionResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ReverseTransactionResponseType", p->soap_type() == SOAP_TYPE_ns1__ReverseTransactionResponseType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__ReverseTransactionResponseType(struct soap *soap, const char *URL, ns1__ReverseTransactionResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ReverseTransactionResponseType", p->soap_type() == SOAP_TYPE_ns1__ReverseTransactionResponseType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__ReverseTransactionResponseType * SOAP_FMAC4 soap_get_ns1__ReverseTransactionResponseType(struct soap*, ns1__ReverseTransactionResponseType *, const char*, const char*);

inline int soap_read_ns1__ReverseTransactionResponseType(struct soap *soap, ns1__ReverseTransactionResponseType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__ReverseTransactionResponseType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__ReverseTransactionResponseType(struct soap *soap, const char *URL, ns1__ReverseTransactionResponseType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__ReverseTransactionResponseType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__ReverseTransactionResponseType(struct soap *soap, ns1__ReverseTransactionResponseType *p)
{
	if (soap_read_ns1__ReverseTransactionResponseType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__ReverseTransactionRequestType_DEFINED
#define SOAP_TYPE_ns1__ReverseTransactionRequestType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__ReverseTransactionRequestType(struct soap*, const char*, int, const ns1__ReverseTransactionRequestType *, const char*);
SOAP_FMAC3 ns1__ReverseTransactionRequestType * SOAP_FMAC4 soap_in_ns1__ReverseTransactionRequestType(struct soap*, const char*, ns1__ReverseTransactionRequestType *, const char*);
SOAP_FMAC1 ns1__ReverseTransactionRequestType * SOAP_FMAC2 soap_instantiate_ns1__ReverseTransactionRequestType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__ReverseTransactionRequestType * soap_new_ns1__ReverseTransactionRequestType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__ReverseTransactionRequestType(soap, n, NULL, NULL, NULL);
}

inline ns1__ReverseTransactionRequestType * soap_new_req_ns1__ReverseTransactionRequestType(
	struct soap *soap,
	ns3__ReverseTransactionRequestDetailsType *ns3__ReverseTransactionRequestDetails,
	const std::string& Version__1)
{
	ns1__ReverseTransactionRequestType *_p = soap_new_ns1__ReverseTransactionRequestType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__ReverseTransactionRequestType::ns3__ReverseTransactionRequestDetails = ns3__ReverseTransactionRequestDetails;
		_p->ns3__AbstractRequestType::Version = Version__1;
	}
	return _p;
}

inline ns1__ReverseTransactionRequestType * soap_new_set_ns1__ReverseTransactionRequestType(
	struct soap *soap,
	ns3__ReverseTransactionRequestDetailsType *ns3__ReverseTransactionRequestDetails,
	const std::vector<enum ns3__DetailLevelCodeType> & DetailLevel__1,
	std::string *ErrorLanguage__1,
	const std::string& Version__1,
	char *__any__1)
{
	ns1__ReverseTransactionRequestType *_p = soap_new_ns1__ReverseTransactionRequestType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__ReverseTransactionRequestType::ns3__ReverseTransactionRequestDetails = ns3__ReverseTransactionRequestDetails;
		_p->ns3__AbstractRequestType::DetailLevel = DetailLevel__1;
		_p->ns3__AbstractRequestType::ErrorLanguage = ErrorLanguage__1;
		_p->ns3__AbstractRequestType::Version = Version__1;
		_p->ns3__AbstractRequestType::__any = __any__1;
	}
	return _p;
}

inline int soap_write_ns1__ReverseTransactionRequestType(struct soap *soap, ns1__ReverseTransactionRequestType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ReverseTransactionRequestType", p->soap_type() == SOAP_TYPE_ns1__ReverseTransactionRequestType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__ReverseTransactionRequestType(struct soap *soap, const char *URL, ns1__ReverseTransactionRequestType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ReverseTransactionRequestType", p->soap_type() == SOAP_TYPE_ns1__ReverseTransactionRequestType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__ReverseTransactionRequestType(struct soap *soap, const char *URL, ns1__ReverseTransactionRequestType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ReverseTransactionRequestType", p->soap_type() == SOAP_TYPE_ns1__ReverseTransactionRequestType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__ReverseTransactionRequestType * SOAP_FMAC4 soap_get_ns1__ReverseTransactionRequestType(struct soap*, ns1__ReverseTransactionRequestType *, const char*, const char*);

inline int soap_read_ns1__ReverseTransactionRequestType(struct soap *soap, ns1__ReverseTransactionRequestType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__ReverseTransactionRequestType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__ReverseTransactionRequestType(struct soap *soap, const char *URL, ns1__ReverseTransactionRequestType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__ReverseTransactionRequestType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__ReverseTransactionRequestType(struct soap *soap, ns1__ReverseTransactionRequestType *p)
{
	if (soap_read_ns1__ReverseTransactionRequestType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__GetPalDetailsResponseType_DEFINED
#define SOAP_TYPE_ns1__GetPalDetailsResponseType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__GetPalDetailsResponseType(struct soap*, const char*, int, const ns1__GetPalDetailsResponseType *, const char*);
SOAP_FMAC3 ns1__GetPalDetailsResponseType * SOAP_FMAC4 soap_in_ns1__GetPalDetailsResponseType(struct soap*, const char*, ns1__GetPalDetailsResponseType *, const char*);
SOAP_FMAC1 ns1__GetPalDetailsResponseType * SOAP_FMAC2 soap_instantiate_ns1__GetPalDetailsResponseType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__GetPalDetailsResponseType * soap_new_ns1__GetPalDetailsResponseType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__GetPalDetailsResponseType(soap, n, NULL, NULL, NULL);
}

inline ns1__GetPalDetailsResponseType * soap_new_req_ns1__GetPalDetailsResponseType(
	struct soap *soap,
	const std::string& Pal,
	const std::string& Locale,
	enum ns3__AckCodeType Ack__1,
	const std::string& Version__1,
	const std::string& Build__1)
{
	ns1__GetPalDetailsResponseType *_p = soap_new_ns1__GetPalDetailsResponseType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__GetPalDetailsResponseType::Pal = Pal;
		_p->ns1__GetPalDetailsResponseType::Locale = Locale;
		_p->ns3__AbstractResponseType::Ack = Ack__1;
		_p->ns3__AbstractResponseType::Version = Version__1;
		_p->ns3__AbstractResponseType::Build = Build__1;
	}
	return _p;
}

inline ns1__GetPalDetailsResponseType * soap_new_set_ns1__GetPalDetailsResponseType(
	struct soap *soap,
	const std::string& Pal,
	const std::string& Locale,
	time_t *Timestamp__1,
	enum ns3__AckCodeType Ack__1,
	std::string *CorrelationID__1,
	const std::vector<ns3__ErrorType *> & Errors__1,
	const std::string& Version__1,
	const std::string& Build__1,
	char *__any__1)
{
	ns1__GetPalDetailsResponseType *_p = soap_new_ns1__GetPalDetailsResponseType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__GetPalDetailsResponseType::Pal = Pal;
		_p->ns1__GetPalDetailsResponseType::Locale = Locale;
		_p->ns3__AbstractResponseType::Timestamp = Timestamp__1;
		_p->ns3__AbstractResponseType::Ack = Ack__1;
		_p->ns3__AbstractResponseType::CorrelationID = CorrelationID__1;
		_p->ns3__AbstractResponseType::Errors = Errors__1;
		_p->ns3__AbstractResponseType::Version = Version__1;
		_p->ns3__AbstractResponseType::Build = Build__1;
		_p->ns3__AbstractResponseType::__any = __any__1;
	}
	return _p;
}

inline int soap_write_ns1__GetPalDetailsResponseType(struct soap *soap, ns1__GetPalDetailsResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetPalDetailsResponseType", p->soap_type() == SOAP_TYPE_ns1__GetPalDetailsResponseType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__GetPalDetailsResponseType(struct soap *soap, const char *URL, ns1__GetPalDetailsResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetPalDetailsResponseType", p->soap_type() == SOAP_TYPE_ns1__GetPalDetailsResponseType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__GetPalDetailsResponseType(struct soap *soap, const char *URL, ns1__GetPalDetailsResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetPalDetailsResponseType", p->soap_type() == SOAP_TYPE_ns1__GetPalDetailsResponseType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__GetPalDetailsResponseType * SOAP_FMAC4 soap_get_ns1__GetPalDetailsResponseType(struct soap*, ns1__GetPalDetailsResponseType *, const char*, const char*);

inline int soap_read_ns1__GetPalDetailsResponseType(struct soap *soap, ns1__GetPalDetailsResponseType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__GetPalDetailsResponseType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__GetPalDetailsResponseType(struct soap *soap, const char *URL, ns1__GetPalDetailsResponseType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__GetPalDetailsResponseType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__GetPalDetailsResponseType(struct soap *soap, ns1__GetPalDetailsResponseType *p)
{
	if (soap_read_ns1__GetPalDetailsResponseType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__GetPalDetailsRequestType_DEFINED
#define SOAP_TYPE_ns1__GetPalDetailsRequestType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__GetPalDetailsRequestType(struct soap*, const char*, int, const ns1__GetPalDetailsRequestType *, const char*);
SOAP_FMAC3 ns1__GetPalDetailsRequestType * SOAP_FMAC4 soap_in_ns1__GetPalDetailsRequestType(struct soap*, const char*, ns1__GetPalDetailsRequestType *, const char*);
SOAP_FMAC1 ns1__GetPalDetailsRequestType * SOAP_FMAC2 soap_instantiate_ns1__GetPalDetailsRequestType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__GetPalDetailsRequestType * soap_new_ns1__GetPalDetailsRequestType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__GetPalDetailsRequestType(soap, n, NULL, NULL, NULL);
}

inline ns1__GetPalDetailsRequestType * soap_new_req_ns1__GetPalDetailsRequestType(
	struct soap *soap,
	const std::string& Version__1)
{
	ns1__GetPalDetailsRequestType *_p = soap_new_ns1__GetPalDetailsRequestType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__AbstractRequestType::Version = Version__1;
	}
	return _p;
}

inline ns1__GetPalDetailsRequestType * soap_new_set_ns1__GetPalDetailsRequestType(
	struct soap *soap,
	const std::vector<enum ns3__DetailLevelCodeType> & DetailLevel__1,
	std::string *ErrorLanguage__1,
	const std::string& Version__1,
	char *__any__1)
{
	ns1__GetPalDetailsRequestType *_p = soap_new_ns1__GetPalDetailsRequestType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__AbstractRequestType::DetailLevel = DetailLevel__1;
		_p->ns3__AbstractRequestType::ErrorLanguage = ErrorLanguage__1;
		_p->ns3__AbstractRequestType::Version = Version__1;
		_p->ns3__AbstractRequestType::__any = __any__1;
	}
	return _p;
}

inline int soap_write_ns1__GetPalDetailsRequestType(struct soap *soap, ns1__GetPalDetailsRequestType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetPalDetailsRequestType", p->soap_type() == SOAP_TYPE_ns1__GetPalDetailsRequestType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__GetPalDetailsRequestType(struct soap *soap, const char *URL, ns1__GetPalDetailsRequestType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetPalDetailsRequestType", p->soap_type() == SOAP_TYPE_ns1__GetPalDetailsRequestType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__GetPalDetailsRequestType(struct soap *soap, const char *URL, ns1__GetPalDetailsRequestType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetPalDetailsRequestType", p->soap_type() == SOAP_TYPE_ns1__GetPalDetailsRequestType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__GetPalDetailsRequestType * SOAP_FMAC4 soap_get_ns1__GetPalDetailsRequestType(struct soap*, ns1__GetPalDetailsRequestType *, const char*, const char*);

inline int soap_read_ns1__GetPalDetailsRequestType(struct soap *soap, ns1__GetPalDetailsRequestType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__GetPalDetailsRequestType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__GetPalDetailsRequestType(struct soap *soap, const char *URL, ns1__GetPalDetailsRequestType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__GetPalDetailsRequestType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__GetPalDetailsRequestType(struct soap *soap, ns1__GetPalDetailsRequestType *p)
{
	if (soap_read_ns1__GetPalDetailsRequestType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__UpdateRecurringPaymentsProfileResponseType_DEFINED
#define SOAP_TYPE_ns1__UpdateRecurringPaymentsProfileResponseType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__UpdateRecurringPaymentsProfileResponseType(struct soap*, const char*, int, const ns1__UpdateRecurringPaymentsProfileResponseType *, const char*);
SOAP_FMAC3 ns1__UpdateRecurringPaymentsProfileResponseType * SOAP_FMAC4 soap_in_ns1__UpdateRecurringPaymentsProfileResponseType(struct soap*, const char*, ns1__UpdateRecurringPaymentsProfileResponseType *, const char*);
SOAP_FMAC1 ns1__UpdateRecurringPaymentsProfileResponseType * SOAP_FMAC2 soap_instantiate_ns1__UpdateRecurringPaymentsProfileResponseType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__UpdateRecurringPaymentsProfileResponseType * soap_new_ns1__UpdateRecurringPaymentsProfileResponseType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__UpdateRecurringPaymentsProfileResponseType(soap, n, NULL, NULL, NULL);
}

inline ns1__UpdateRecurringPaymentsProfileResponseType * soap_new_req_ns1__UpdateRecurringPaymentsProfileResponseType(
	struct soap *soap,
	ns3__UpdateRecurringPaymentsProfileResponseDetailsType *ns3__UpdateRecurringPaymentsProfileResponseDetails,
	enum ns3__AckCodeType Ack__1,
	const std::string& Version__1,
	const std::string& Build__1)
{
	ns1__UpdateRecurringPaymentsProfileResponseType *_p = soap_new_ns1__UpdateRecurringPaymentsProfileResponseType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__UpdateRecurringPaymentsProfileResponseType::ns3__UpdateRecurringPaymentsProfileResponseDetails = ns3__UpdateRecurringPaymentsProfileResponseDetails;
		_p->ns3__AbstractResponseType::Ack = Ack__1;
		_p->ns3__AbstractResponseType::Version = Version__1;
		_p->ns3__AbstractResponseType::Build = Build__1;
	}
	return _p;
}

inline ns1__UpdateRecurringPaymentsProfileResponseType * soap_new_set_ns1__UpdateRecurringPaymentsProfileResponseType(
	struct soap *soap,
	ns3__UpdateRecurringPaymentsProfileResponseDetailsType *ns3__UpdateRecurringPaymentsProfileResponseDetails,
	time_t *Timestamp__1,
	enum ns3__AckCodeType Ack__1,
	std::string *CorrelationID__1,
	const std::vector<ns3__ErrorType *> & Errors__1,
	const std::string& Version__1,
	const std::string& Build__1,
	char *__any__1)
{
	ns1__UpdateRecurringPaymentsProfileResponseType *_p = soap_new_ns1__UpdateRecurringPaymentsProfileResponseType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__UpdateRecurringPaymentsProfileResponseType::ns3__UpdateRecurringPaymentsProfileResponseDetails = ns3__UpdateRecurringPaymentsProfileResponseDetails;
		_p->ns3__AbstractResponseType::Timestamp = Timestamp__1;
		_p->ns3__AbstractResponseType::Ack = Ack__1;
		_p->ns3__AbstractResponseType::CorrelationID = CorrelationID__1;
		_p->ns3__AbstractResponseType::Errors = Errors__1;
		_p->ns3__AbstractResponseType::Version = Version__1;
		_p->ns3__AbstractResponseType::Build = Build__1;
		_p->ns3__AbstractResponseType::__any = __any__1;
	}
	return _p;
}

inline int soap_write_ns1__UpdateRecurringPaymentsProfileResponseType(struct soap *soap, ns1__UpdateRecurringPaymentsProfileResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:UpdateRecurringPaymentsProfileResponseType", p->soap_type() == SOAP_TYPE_ns1__UpdateRecurringPaymentsProfileResponseType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__UpdateRecurringPaymentsProfileResponseType(struct soap *soap, const char *URL, ns1__UpdateRecurringPaymentsProfileResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:UpdateRecurringPaymentsProfileResponseType", p->soap_type() == SOAP_TYPE_ns1__UpdateRecurringPaymentsProfileResponseType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__UpdateRecurringPaymentsProfileResponseType(struct soap *soap, const char *URL, ns1__UpdateRecurringPaymentsProfileResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:UpdateRecurringPaymentsProfileResponseType", p->soap_type() == SOAP_TYPE_ns1__UpdateRecurringPaymentsProfileResponseType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__UpdateRecurringPaymentsProfileResponseType * SOAP_FMAC4 soap_get_ns1__UpdateRecurringPaymentsProfileResponseType(struct soap*, ns1__UpdateRecurringPaymentsProfileResponseType *, const char*, const char*);

inline int soap_read_ns1__UpdateRecurringPaymentsProfileResponseType(struct soap *soap, ns1__UpdateRecurringPaymentsProfileResponseType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__UpdateRecurringPaymentsProfileResponseType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__UpdateRecurringPaymentsProfileResponseType(struct soap *soap, const char *URL, ns1__UpdateRecurringPaymentsProfileResponseType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__UpdateRecurringPaymentsProfileResponseType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__UpdateRecurringPaymentsProfileResponseType(struct soap *soap, ns1__UpdateRecurringPaymentsProfileResponseType *p)
{
	if (soap_read_ns1__UpdateRecurringPaymentsProfileResponseType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__UpdateRecurringPaymentsProfileRequestType_DEFINED
#define SOAP_TYPE_ns1__UpdateRecurringPaymentsProfileRequestType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__UpdateRecurringPaymentsProfileRequestType(struct soap*, const char*, int, const ns1__UpdateRecurringPaymentsProfileRequestType *, const char*);
SOAP_FMAC3 ns1__UpdateRecurringPaymentsProfileRequestType * SOAP_FMAC4 soap_in_ns1__UpdateRecurringPaymentsProfileRequestType(struct soap*, const char*, ns1__UpdateRecurringPaymentsProfileRequestType *, const char*);
SOAP_FMAC1 ns1__UpdateRecurringPaymentsProfileRequestType * SOAP_FMAC2 soap_instantiate_ns1__UpdateRecurringPaymentsProfileRequestType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__UpdateRecurringPaymentsProfileRequestType * soap_new_ns1__UpdateRecurringPaymentsProfileRequestType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__UpdateRecurringPaymentsProfileRequestType(soap, n, NULL, NULL, NULL);
}

inline ns1__UpdateRecurringPaymentsProfileRequestType * soap_new_req_ns1__UpdateRecurringPaymentsProfileRequestType(
	struct soap *soap,
	ns3__UpdateRecurringPaymentsProfileRequestDetailsType *ns3__UpdateRecurringPaymentsProfileRequestDetails,
	const std::string& Version__1)
{
	ns1__UpdateRecurringPaymentsProfileRequestType *_p = soap_new_ns1__UpdateRecurringPaymentsProfileRequestType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__UpdateRecurringPaymentsProfileRequestType::ns3__UpdateRecurringPaymentsProfileRequestDetails = ns3__UpdateRecurringPaymentsProfileRequestDetails;
		_p->ns3__AbstractRequestType::Version = Version__1;
	}
	return _p;
}

inline ns1__UpdateRecurringPaymentsProfileRequestType * soap_new_set_ns1__UpdateRecurringPaymentsProfileRequestType(
	struct soap *soap,
	ns3__UpdateRecurringPaymentsProfileRequestDetailsType *ns3__UpdateRecurringPaymentsProfileRequestDetails,
	const std::vector<enum ns3__DetailLevelCodeType> & DetailLevel__1,
	std::string *ErrorLanguage__1,
	const std::string& Version__1,
	char *__any__1)
{
	ns1__UpdateRecurringPaymentsProfileRequestType *_p = soap_new_ns1__UpdateRecurringPaymentsProfileRequestType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__UpdateRecurringPaymentsProfileRequestType::ns3__UpdateRecurringPaymentsProfileRequestDetails = ns3__UpdateRecurringPaymentsProfileRequestDetails;
		_p->ns3__AbstractRequestType::DetailLevel = DetailLevel__1;
		_p->ns3__AbstractRequestType::ErrorLanguage = ErrorLanguage__1;
		_p->ns3__AbstractRequestType::Version = Version__1;
		_p->ns3__AbstractRequestType::__any = __any__1;
	}
	return _p;
}

inline int soap_write_ns1__UpdateRecurringPaymentsProfileRequestType(struct soap *soap, ns1__UpdateRecurringPaymentsProfileRequestType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:UpdateRecurringPaymentsProfileRequestType", p->soap_type() == SOAP_TYPE_ns1__UpdateRecurringPaymentsProfileRequestType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__UpdateRecurringPaymentsProfileRequestType(struct soap *soap, const char *URL, ns1__UpdateRecurringPaymentsProfileRequestType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:UpdateRecurringPaymentsProfileRequestType", p->soap_type() == SOAP_TYPE_ns1__UpdateRecurringPaymentsProfileRequestType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__UpdateRecurringPaymentsProfileRequestType(struct soap *soap, const char *URL, ns1__UpdateRecurringPaymentsProfileRequestType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:UpdateRecurringPaymentsProfileRequestType", p->soap_type() == SOAP_TYPE_ns1__UpdateRecurringPaymentsProfileRequestType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__UpdateRecurringPaymentsProfileRequestType * SOAP_FMAC4 soap_get_ns1__UpdateRecurringPaymentsProfileRequestType(struct soap*, ns1__UpdateRecurringPaymentsProfileRequestType *, const char*, const char*);

inline int soap_read_ns1__UpdateRecurringPaymentsProfileRequestType(struct soap *soap, ns1__UpdateRecurringPaymentsProfileRequestType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__UpdateRecurringPaymentsProfileRequestType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__UpdateRecurringPaymentsProfileRequestType(struct soap *soap, const char *URL, ns1__UpdateRecurringPaymentsProfileRequestType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__UpdateRecurringPaymentsProfileRequestType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__UpdateRecurringPaymentsProfileRequestType(struct soap *soap, ns1__UpdateRecurringPaymentsProfileRequestType *p)
{
	if (soap_read_ns1__UpdateRecurringPaymentsProfileRequestType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__BillOutstandingAmountResponseType_DEFINED
#define SOAP_TYPE_ns1__BillOutstandingAmountResponseType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__BillOutstandingAmountResponseType(struct soap*, const char*, int, const ns1__BillOutstandingAmountResponseType *, const char*);
SOAP_FMAC3 ns1__BillOutstandingAmountResponseType * SOAP_FMAC4 soap_in_ns1__BillOutstandingAmountResponseType(struct soap*, const char*, ns1__BillOutstandingAmountResponseType *, const char*);
SOAP_FMAC1 ns1__BillOutstandingAmountResponseType * SOAP_FMAC2 soap_instantiate_ns1__BillOutstandingAmountResponseType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__BillOutstandingAmountResponseType * soap_new_ns1__BillOutstandingAmountResponseType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__BillOutstandingAmountResponseType(soap, n, NULL, NULL, NULL);
}

inline ns1__BillOutstandingAmountResponseType * soap_new_req_ns1__BillOutstandingAmountResponseType(
	struct soap *soap,
	ns3__BillOutstandingAmountResponseDetailsType *ns3__BillOutstandingAmountResponseDetails,
	enum ns3__AckCodeType Ack__1,
	const std::string& Version__1,
	const std::string& Build__1)
{
	ns1__BillOutstandingAmountResponseType *_p = soap_new_ns1__BillOutstandingAmountResponseType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__BillOutstandingAmountResponseType::ns3__BillOutstandingAmountResponseDetails = ns3__BillOutstandingAmountResponseDetails;
		_p->ns3__AbstractResponseType::Ack = Ack__1;
		_p->ns3__AbstractResponseType::Version = Version__1;
		_p->ns3__AbstractResponseType::Build = Build__1;
	}
	return _p;
}

inline ns1__BillOutstandingAmountResponseType * soap_new_set_ns1__BillOutstandingAmountResponseType(
	struct soap *soap,
	ns3__BillOutstandingAmountResponseDetailsType *ns3__BillOutstandingAmountResponseDetails,
	time_t *Timestamp__1,
	enum ns3__AckCodeType Ack__1,
	std::string *CorrelationID__1,
	const std::vector<ns3__ErrorType *> & Errors__1,
	const std::string& Version__1,
	const std::string& Build__1,
	char *__any__1)
{
	ns1__BillOutstandingAmountResponseType *_p = soap_new_ns1__BillOutstandingAmountResponseType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__BillOutstandingAmountResponseType::ns3__BillOutstandingAmountResponseDetails = ns3__BillOutstandingAmountResponseDetails;
		_p->ns3__AbstractResponseType::Timestamp = Timestamp__1;
		_p->ns3__AbstractResponseType::Ack = Ack__1;
		_p->ns3__AbstractResponseType::CorrelationID = CorrelationID__1;
		_p->ns3__AbstractResponseType::Errors = Errors__1;
		_p->ns3__AbstractResponseType::Version = Version__1;
		_p->ns3__AbstractResponseType::Build = Build__1;
		_p->ns3__AbstractResponseType::__any = __any__1;
	}
	return _p;
}

inline int soap_write_ns1__BillOutstandingAmountResponseType(struct soap *soap, ns1__BillOutstandingAmountResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:BillOutstandingAmountResponseType", p->soap_type() == SOAP_TYPE_ns1__BillOutstandingAmountResponseType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__BillOutstandingAmountResponseType(struct soap *soap, const char *URL, ns1__BillOutstandingAmountResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:BillOutstandingAmountResponseType", p->soap_type() == SOAP_TYPE_ns1__BillOutstandingAmountResponseType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__BillOutstandingAmountResponseType(struct soap *soap, const char *URL, ns1__BillOutstandingAmountResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:BillOutstandingAmountResponseType", p->soap_type() == SOAP_TYPE_ns1__BillOutstandingAmountResponseType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__BillOutstandingAmountResponseType * SOAP_FMAC4 soap_get_ns1__BillOutstandingAmountResponseType(struct soap*, ns1__BillOutstandingAmountResponseType *, const char*, const char*);

inline int soap_read_ns1__BillOutstandingAmountResponseType(struct soap *soap, ns1__BillOutstandingAmountResponseType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__BillOutstandingAmountResponseType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__BillOutstandingAmountResponseType(struct soap *soap, const char *URL, ns1__BillOutstandingAmountResponseType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__BillOutstandingAmountResponseType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__BillOutstandingAmountResponseType(struct soap *soap, ns1__BillOutstandingAmountResponseType *p)
{
	if (soap_read_ns1__BillOutstandingAmountResponseType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__BillOutstandingAmountRequestType_DEFINED
#define SOAP_TYPE_ns1__BillOutstandingAmountRequestType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__BillOutstandingAmountRequestType(struct soap*, const char*, int, const ns1__BillOutstandingAmountRequestType *, const char*);
SOAP_FMAC3 ns1__BillOutstandingAmountRequestType * SOAP_FMAC4 soap_in_ns1__BillOutstandingAmountRequestType(struct soap*, const char*, ns1__BillOutstandingAmountRequestType *, const char*);
SOAP_FMAC1 ns1__BillOutstandingAmountRequestType * SOAP_FMAC2 soap_instantiate_ns1__BillOutstandingAmountRequestType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__BillOutstandingAmountRequestType * soap_new_ns1__BillOutstandingAmountRequestType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__BillOutstandingAmountRequestType(soap, n, NULL, NULL, NULL);
}

inline ns1__BillOutstandingAmountRequestType * soap_new_req_ns1__BillOutstandingAmountRequestType(
	struct soap *soap,
	ns3__BillOutstandingAmountRequestDetailsType *ns3__BillOutstandingAmountRequestDetails,
	const std::string& Version__1)
{
	ns1__BillOutstandingAmountRequestType *_p = soap_new_ns1__BillOutstandingAmountRequestType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__BillOutstandingAmountRequestType::ns3__BillOutstandingAmountRequestDetails = ns3__BillOutstandingAmountRequestDetails;
		_p->ns3__AbstractRequestType::Version = Version__1;
	}
	return _p;
}

inline ns1__BillOutstandingAmountRequestType * soap_new_set_ns1__BillOutstandingAmountRequestType(
	struct soap *soap,
	ns3__BillOutstandingAmountRequestDetailsType *ns3__BillOutstandingAmountRequestDetails,
	const std::vector<enum ns3__DetailLevelCodeType> & DetailLevel__1,
	std::string *ErrorLanguage__1,
	const std::string& Version__1,
	char *__any__1)
{
	ns1__BillOutstandingAmountRequestType *_p = soap_new_ns1__BillOutstandingAmountRequestType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__BillOutstandingAmountRequestType::ns3__BillOutstandingAmountRequestDetails = ns3__BillOutstandingAmountRequestDetails;
		_p->ns3__AbstractRequestType::DetailLevel = DetailLevel__1;
		_p->ns3__AbstractRequestType::ErrorLanguage = ErrorLanguage__1;
		_p->ns3__AbstractRequestType::Version = Version__1;
		_p->ns3__AbstractRequestType::__any = __any__1;
	}
	return _p;
}

inline int soap_write_ns1__BillOutstandingAmountRequestType(struct soap *soap, ns1__BillOutstandingAmountRequestType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:BillOutstandingAmountRequestType", p->soap_type() == SOAP_TYPE_ns1__BillOutstandingAmountRequestType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__BillOutstandingAmountRequestType(struct soap *soap, const char *URL, ns1__BillOutstandingAmountRequestType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:BillOutstandingAmountRequestType", p->soap_type() == SOAP_TYPE_ns1__BillOutstandingAmountRequestType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__BillOutstandingAmountRequestType(struct soap *soap, const char *URL, ns1__BillOutstandingAmountRequestType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:BillOutstandingAmountRequestType", p->soap_type() == SOAP_TYPE_ns1__BillOutstandingAmountRequestType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__BillOutstandingAmountRequestType * SOAP_FMAC4 soap_get_ns1__BillOutstandingAmountRequestType(struct soap*, ns1__BillOutstandingAmountRequestType *, const char*, const char*);

inline int soap_read_ns1__BillOutstandingAmountRequestType(struct soap *soap, ns1__BillOutstandingAmountRequestType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__BillOutstandingAmountRequestType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__BillOutstandingAmountRequestType(struct soap *soap, const char *URL, ns1__BillOutstandingAmountRequestType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__BillOutstandingAmountRequestType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__BillOutstandingAmountRequestType(struct soap *soap, ns1__BillOutstandingAmountRequestType *p)
{
	if (soap_read_ns1__BillOutstandingAmountRequestType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__ManageRecurringPaymentsProfileStatusResponseType_DEFINED
#define SOAP_TYPE_ns1__ManageRecurringPaymentsProfileStatusResponseType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__ManageRecurringPaymentsProfileStatusResponseType(struct soap*, const char*, int, const ns1__ManageRecurringPaymentsProfileStatusResponseType *, const char*);
SOAP_FMAC3 ns1__ManageRecurringPaymentsProfileStatusResponseType * SOAP_FMAC4 soap_in_ns1__ManageRecurringPaymentsProfileStatusResponseType(struct soap*, const char*, ns1__ManageRecurringPaymentsProfileStatusResponseType *, const char*);
SOAP_FMAC1 ns1__ManageRecurringPaymentsProfileStatusResponseType * SOAP_FMAC2 soap_instantiate_ns1__ManageRecurringPaymentsProfileStatusResponseType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__ManageRecurringPaymentsProfileStatusResponseType * soap_new_ns1__ManageRecurringPaymentsProfileStatusResponseType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__ManageRecurringPaymentsProfileStatusResponseType(soap, n, NULL, NULL, NULL);
}

inline ns1__ManageRecurringPaymentsProfileStatusResponseType * soap_new_req_ns1__ManageRecurringPaymentsProfileStatusResponseType(
	struct soap *soap,
	ns3__ManageRecurringPaymentsProfileStatusResponseDetailsType *ns3__ManageRecurringPaymentsProfileStatusResponseDetails,
	enum ns3__AckCodeType Ack__1,
	const std::string& Version__1,
	const std::string& Build__1)
{
	ns1__ManageRecurringPaymentsProfileStatusResponseType *_p = soap_new_ns1__ManageRecurringPaymentsProfileStatusResponseType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__ManageRecurringPaymentsProfileStatusResponseType::ns3__ManageRecurringPaymentsProfileStatusResponseDetails = ns3__ManageRecurringPaymentsProfileStatusResponseDetails;
		_p->ns3__AbstractResponseType::Ack = Ack__1;
		_p->ns3__AbstractResponseType::Version = Version__1;
		_p->ns3__AbstractResponseType::Build = Build__1;
	}
	return _p;
}

inline ns1__ManageRecurringPaymentsProfileStatusResponseType * soap_new_set_ns1__ManageRecurringPaymentsProfileStatusResponseType(
	struct soap *soap,
	ns3__ManageRecurringPaymentsProfileStatusResponseDetailsType *ns3__ManageRecurringPaymentsProfileStatusResponseDetails,
	time_t *Timestamp__1,
	enum ns3__AckCodeType Ack__1,
	std::string *CorrelationID__1,
	const std::vector<ns3__ErrorType *> & Errors__1,
	const std::string& Version__1,
	const std::string& Build__1,
	char *__any__1)
{
	ns1__ManageRecurringPaymentsProfileStatusResponseType *_p = soap_new_ns1__ManageRecurringPaymentsProfileStatusResponseType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__ManageRecurringPaymentsProfileStatusResponseType::ns3__ManageRecurringPaymentsProfileStatusResponseDetails = ns3__ManageRecurringPaymentsProfileStatusResponseDetails;
		_p->ns3__AbstractResponseType::Timestamp = Timestamp__1;
		_p->ns3__AbstractResponseType::Ack = Ack__1;
		_p->ns3__AbstractResponseType::CorrelationID = CorrelationID__1;
		_p->ns3__AbstractResponseType::Errors = Errors__1;
		_p->ns3__AbstractResponseType::Version = Version__1;
		_p->ns3__AbstractResponseType::Build = Build__1;
		_p->ns3__AbstractResponseType::__any = __any__1;
	}
	return _p;
}

inline int soap_write_ns1__ManageRecurringPaymentsProfileStatusResponseType(struct soap *soap, ns1__ManageRecurringPaymentsProfileStatusResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ManageRecurringPaymentsProfileStatusResponseType", p->soap_type() == SOAP_TYPE_ns1__ManageRecurringPaymentsProfileStatusResponseType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__ManageRecurringPaymentsProfileStatusResponseType(struct soap *soap, const char *URL, ns1__ManageRecurringPaymentsProfileStatusResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ManageRecurringPaymentsProfileStatusResponseType", p->soap_type() == SOAP_TYPE_ns1__ManageRecurringPaymentsProfileStatusResponseType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__ManageRecurringPaymentsProfileStatusResponseType(struct soap *soap, const char *URL, ns1__ManageRecurringPaymentsProfileStatusResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ManageRecurringPaymentsProfileStatusResponseType", p->soap_type() == SOAP_TYPE_ns1__ManageRecurringPaymentsProfileStatusResponseType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__ManageRecurringPaymentsProfileStatusResponseType * SOAP_FMAC4 soap_get_ns1__ManageRecurringPaymentsProfileStatusResponseType(struct soap*, ns1__ManageRecurringPaymentsProfileStatusResponseType *, const char*, const char*);

inline int soap_read_ns1__ManageRecurringPaymentsProfileStatusResponseType(struct soap *soap, ns1__ManageRecurringPaymentsProfileStatusResponseType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__ManageRecurringPaymentsProfileStatusResponseType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__ManageRecurringPaymentsProfileStatusResponseType(struct soap *soap, const char *URL, ns1__ManageRecurringPaymentsProfileStatusResponseType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__ManageRecurringPaymentsProfileStatusResponseType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__ManageRecurringPaymentsProfileStatusResponseType(struct soap *soap, ns1__ManageRecurringPaymentsProfileStatusResponseType *p)
{
	if (soap_read_ns1__ManageRecurringPaymentsProfileStatusResponseType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__ManageRecurringPaymentsProfileStatusRequestType_DEFINED
#define SOAP_TYPE_ns1__ManageRecurringPaymentsProfileStatusRequestType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__ManageRecurringPaymentsProfileStatusRequestType(struct soap*, const char*, int, const ns1__ManageRecurringPaymentsProfileStatusRequestType *, const char*);
SOAP_FMAC3 ns1__ManageRecurringPaymentsProfileStatusRequestType * SOAP_FMAC4 soap_in_ns1__ManageRecurringPaymentsProfileStatusRequestType(struct soap*, const char*, ns1__ManageRecurringPaymentsProfileStatusRequestType *, const char*);
SOAP_FMAC1 ns1__ManageRecurringPaymentsProfileStatusRequestType * SOAP_FMAC2 soap_instantiate_ns1__ManageRecurringPaymentsProfileStatusRequestType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__ManageRecurringPaymentsProfileStatusRequestType * soap_new_ns1__ManageRecurringPaymentsProfileStatusRequestType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__ManageRecurringPaymentsProfileStatusRequestType(soap, n, NULL, NULL, NULL);
}

inline ns1__ManageRecurringPaymentsProfileStatusRequestType * soap_new_req_ns1__ManageRecurringPaymentsProfileStatusRequestType(
	struct soap *soap,
	ns3__ManageRecurringPaymentsProfileStatusRequestDetailsType *ns3__ManageRecurringPaymentsProfileStatusRequestDetails,
	const std::string& Version__1)
{
	ns1__ManageRecurringPaymentsProfileStatusRequestType *_p = soap_new_ns1__ManageRecurringPaymentsProfileStatusRequestType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__ManageRecurringPaymentsProfileStatusRequestType::ns3__ManageRecurringPaymentsProfileStatusRequestDetails = ns3__ManageRecurringPaymentsProfileStatusRequestDetails;
		_p->ns3__AbstractRequestType::Version = Version__1;
	}
	return _p;
}

inline ns1__ManageRecurringPaymentsProfileStatusRequestType * soap_new_set_ns1__ManageRecurringPaymentsProfileStatusRequestType(
	struct soap *soap,
	ns3__ManageRecurringPaymentsProfileStatusRequestDetailsType *ns3__ManageRecurringPaymentsProfileStatusRequestDetails,
	const std::vector<enum ns3__DetailLevelCodeType> & DetailLevel__1,
	std::string *ErrorLanguage__1,
	const std::string& Version__1,
	char *__any__1)
{
	ns1__ManageRecurringPaymentsProfileStatusRequestType *_p = soap_new_ns1__ManageRecurringPaymentsProfileStatusRequestType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__ManageRecurringPaymentsProfileStatusRequestType::ns3__ManageRecurringPaymentsProfileStatusRequestDetails = ns3__ManageRecurringPaymentsProfileStatusRequestDetails;
		_p->ns3__AbstractRequestType::DetailLevel = DetailLevel__1;
		_p->ns3__AbstractRequestType::ErrorLanguage = ErrorLanguage__1;
		_p->ns3__AbstractRequestType::Version = Version__1;
		_p->ns3__AbstractRequestType::__any = __any__1;
	}
	return _p;
}

inline int soap_write_ns1__ManageRecurringPaymentsProfileStatusRequestType(struct soap *soap, ns1__ManageRecurringPaymentsProfileStatusRequestType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ManageRecurringPaymentsProfileStatusRequestType", p->soap_type() == SOAP_TYPE_ns1__ManageRecurringPaymentsProfileStatusRequestType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__ManageRecurringPaymentsProfileStatusRequestType(struct soap *soap, const char *URL, ns1__ManageRecurringPaymentsProfileStatusRequestType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ManageRecurringPaymentsProfileStatusRequestType", p->soap_type() == SOAP_TYPE_ns1__ManageRecurringPaymentsProfileStatusRequestType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__ManageRecurringPaymentsProfileStatusRequestType(struct soap *soap, const char *URL, ns1__ManageRecurringPaymentsProfileStatusRequestType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ManageRecurringPaymentsProfileStatusRequestType", p->soap_type() == SOAP_TYPE_ns1__ManageRecurringPaymentsProfileStatusRequestType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__ManageRecurringPaymentsProfileStatusRequestType * SOAP_FMAC4 soap_get_ns1__ManageRecurringPaymentsProfileStatusRequestType(struct soap*, ns1__ManageRecurringPaymentsProfileStatusRequestType *, const char*, const char*);

inline int soap_read_ns1__ManageRecurringPaymentsProfileStatusRequestType(struct soap *soap, ns1__ManageRecurringPaymentsProfileStatusRequestType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__ManageRecurringPaymentsProfileStatusRequestType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__ManageRecurringPaymentsProfileStatusRequestType(struct soap *soap, const char *URL, ns1__ManageRecurringPaymentsProfileStatusRequestType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__ManageRecurringPaymentsProfileStatusRequestType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__ManageRecurringPaymentsProfileStatusRequestType(struct soap *soap, ns1__ManageRecurringPaymentsProfileStatusRequestType *p)
{
	if (soap_read_ns1__ManageRecurringPaymentsProfileStatusRequestType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__GetRecurringPaymentsProfileDetailsResponseType_DEFINED
#define SOAP_TYPE_ns1__GetRecurringPaymentsProfileDetailsResponseType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__GetRecurringPaymentsProfileDetailsResponseType(struct soap*, const char*, int, const ns1__GetRecurringPaymentsProfileDetailsResponseType *, const char*);
SOAP_FMAC3 ns1__GetRecurringPaymentsProfileDetailsResponseType * SOAP_FMAC4 soap_in_ns1__GetRecurringPaymentsProfileDetailsResponseType(struct soap*, const char*, ns1__GetRecurringPaymentsProfileDetailsResponseType *, const char*);
SOAP_FMAC1 ns1__GetRecurringPaymentsProfileDetailsResponseType * SOAP_FMAC2 soap_instantiate_ns1__GetRecurringPaymentsProfileDetailsResponseType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__GetRecurringPaymentsProfileDetailsResponseType * soap_new_ns1__GetRecurringPaymentsProfileDetailsResponseType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__GetRecurringPaymentsProfileDetailsResponseType(soap, n, NULL, NULL, NULL);
}

inline ns1__GetRecurringPaymentsProfileDetailsResponseType * soap_new_req_ns1__GetRecurringPaymentsProfileDetailsResponseType(
	struct soap *soap,
	ns3__GetRecurringPaymentsProfileDetailsResponseDetailsType *ns3__GetRecurringPaymentsProfileDetailsResponseDetails,
	enum ns3__AckCodeType Ack__1,
	const std::string& Version__1,
	const std::string& Build__1)
{
	ns1__GetRecurringPaymentsProfileDetailsResponseType *_p = soap_new_ns1__GetRecurringPaymentsProfileDetailsResponseType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__GetRecurringPaymentsProfileDetailsResponseType::ns3__GetRecurringPaymentsProfileDetailsResponseDetails = ns3__GetRecurringPaymentsProfileDetailsResponseDetails;
		_p->ns3__AbstractResponseType::Ack = Ack__1;
		_p->ns3__AbstractResponseType::Version = Version__1;
		_p->ns3__AbstractResponseType::Build = Build__1;
	}
	return _p;
}

inline ns1__GetRecurringPaymentsProfileDetailsResponseType * soap_new_set_ns1__GetRecurringPaymentsProfileDetailsResponseType(
	struct soap *soap,
	ns3__GetRecurringPaymentsProfileDetailsResponseDetailsType *ns3__GetRecurringPaymentsProfileDetailsResponseDetails,
	time_t *Timestamp__1,
	enum ns3__AckCodeType Ack__1,
	std::string *CorrelationID__1,
	const std::vector<ns3__ErrorType *> & Errors__1,
	const std::string& Version__1,
	const std::string& Build__1,
	char *__any__1)
{
	ns1__GetRecurringPaymentsProfileDetailsResponseType *_p = soap_new_ns1__GetRecurringPaymentsProfileDetailsResponseType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__GetRecurringPaymentsProfileDetailsResponseType::ns3__GetRecurringPaymentsProfileDetailsResponseDetails = ns3__GetRecurringPaymentsProfileDetailsResponseDetails;
		_p->ns3__AbstractResponseType::Timestamp = Timestamp__1;
		_p->ns3__AbstractResponseType::Ack = Ack__1;
		_p->ns3__AbstractResponseType::CorrelationID = CorrelationID__1;
		_p->ns3__AbstractResponseType::Errors = Errors__1;
		_p->ns3__AbstractResponseType::Version = Version__1;
		_p->ns3__AbstractResponseType::Build = Build__1;
		_p->ns3__AbstractResponseType::__any = __any__1;
	}
	return _p;
}

inline int soap_write_ns1__GetRecurringPaymentsProfileDetailsResponseType(struct soap *soap, ns1__GetRecurringPaymentsProfileDetailsResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetRecurringPaymentsProfileDetailsResponseType", p->soap_type() == SOAP_TYPE_ns1__GetRecurringPaymentsProfileDetailsResponseType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__GetRecurringPaymentsProfileDetailsResponseType(struct soap *soap, const char *URL, ns1__GetRecurringPaymentsProfileDetailsResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetRecurringPaymentsProfileDetailsResponseType", p->soap_type() == SOAP_TYPE_ns1__GetRecurringPaymentsProfileDetailsResponseType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__GetRecurringPaymentsProfileDetailsResponseType(struct soap *soap, const char *URL, ns1__GetRecurringPaymentsProfileDetailsResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetRecurringPaymentsProfileDetailsResponseType", p->soap_type() == SOAP_TYPE_ns1__GetRecurringPaymentsProfileDetailsResponseType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__GetRecurringPaymentsProfileDetailsResponseType * SOAP_FMAC4 soap_get_ns1__GetRecurringPaymentsProfileDetailsResponseType(struct soap*, ns1__GetRecurringPaymentsProfileDetailsResponseType *, const char*, const char*);

inline int soap_read_ns1__GetRecurringPaymentsProfileDetailsResponseType(struct soap *soap, ns1__GetRecurringPaymentsProfileDetailsResponseType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__GetRecurringPaymentsProfileDetailsResponseType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__GetRecurringPaymentsProfileDetailsResponseType(struct soap *soap, const char *URL, ns1__GetRecurringPaymentsProfileDetailsResponseType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__GetRecurringPaymentsProfileDetailsResponseType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__GetRecurringPaymentsProfileDetailsResponseType(struct soap *soap, ns1__GetRecurringPaymentsProfileDetailsResponseType *p)
{
	if (soap_read_ns1__GetRecurringPaymentsProfileDetailsResponseType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__GetRecurringPaymentsProfileDetailsRequestType_DEFINED
#define SOAP_TYPE_ns1__GetRecurringPaymentsProfileDetailsRequestType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__GetRecurringPaymentsProfileDetailsRequestType(struct soap*, const char*, int, const ns1__GetRecurringPaymentsProfileDetailsRequestType *, const char*);
SOAP_FMAC3 ns1__GetRecurringPaymentsProfileDetailsRequestType * SOAP_FMAC4 soap_in_ns1__GetRecurringPaymentsProfileDetailsRequestType(struct soap*, const char*, ns1__GetRecurringPaymentsProfileDetailsRequestType *, const char*);
SOAP_FMAC1 ns1__GetRecurringPaymentsProfileDetailsRequestType * SOAP_FMAC2 soap_instantiate_ns1__GetRecurringPaymentsProfileDetailsRequestType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__GetRecurringPaymentsProfileDetailsRequestType * soap_new_ns1__GetRecurringPaymentsProfileDetailsRequestType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__GetRecurringPaymentsProfileDetailsRequestType(soap, n, NULL, NULL, NULL);
}

inline ns1__GetRecurringPaymentsProfileDetailsRequestType * soap_new_req_ns1__GetRecurringPaymentsProfileDetailsRequestType(
	struct soap *soap,
	const std::string& ProfileID,
	const std::string& Version__1)
{
	ns1__GetRecurringPaymentsProfileDetailsRequestType *_p = soap_new_ns1__GetRecurringPaymentsProfileDetailsRequestType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__GetRecurringPaymentsProfileDetailsRequestType::ProfileID = ProfileID;
		_p->ns3__AbstractRequestType::Version = Version__1;
	}
	return _p;
}

inline ns1__GetRecurringPaymentsProfileDetailsRequestType * soap_new_set_ns1__GetRecurringPaymentsProfileDetailsRequestType(
	struct soap *soap,
	const std::string& ProfileID,
	const std::vector<enum ns3__DetailLevelCodeType> & DetailLevel__1,
	std::string *ErrorLanguage__1,
	const std::string& Version__1,
	char *__any__1)
{
	ns1__GetRecurringPaymentsProfileDetailsRequestType *_p = soap_new_ns1__GetRecurringPaymentsProfileDetailsRequestType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__GetRecurringPaymentsProfileDetailsRequestType::ProfileID = ProfileID;
		_p->ns3__AbstractRequestType::DetailLevel = DetailLevel__1;
		_p->ns3__AbstractRequestType::ErrorLanguage = ErrorLanguage__1;
		_p->ns3__AbstractRequestType::Version = Version__1;
		_p->ns3__AbstractRequestType::__any = __any__1;
	}
	return _p;
}

inline int soap_write_ns1__GetRecurringPaymentsProfileDetailsRequestType(struct soap *soap, ns1__GetRecurringPaymentsProfileDetailsRequestType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetRecurringPaymentsProfileDetailsRequestType", p->soap_type() == SOAP_TYPE_ns1__GetRecurringPaymentsProfileDetailsRequestType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__GetRecurringPaymentsProfileDetailsRequestType(struct soap *soap, const char *URL, ns1__GetRecurringPaymentsProfileDetailsRequestType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetRecurringPaymentsProfileDetailsRequestType", p->soap_type() == SOAP_TYPE_ns1__GetRecurringPaymentsProfileDetailsRequestType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__GetRecurringPaymentsProfileDetailsRequestType(struct soap *soap, const char *URL, ns1__GetRecurringPaymentsProfileDetailsRequestType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetRecurringPaymentsProfileDetailsRequestType", p->soap_type() == SOAP_TYPE_ns1__GetRecurringPaymentsProfileDetailsRequestType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__GetRecurringPaymentsProfileDetailsRequestType * SOAP_FMAC4 soap_get_ns1__GetRecurringPaymentsProfileDetailsRequestType(struct soap*, ns1__GetRecurringPaymentsProfileDetailsRequestType *, const char*, const char*);

inline int soap_read_ns1__GetRecurringPaymentsProfileDetailsRequestType(struct soap *soap, ns1__GetRecurringPaymentsProfileDetailsRequestType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__GetRecurringPaymentsProfileDetailsRequestType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__GetRecurringPaymentsProfileDetailsRequestType(struct soap *soap, const char *URL, ns1__GetRecurringPaymentsProfileDetailsRequestType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__GetRecurringPaymentsProfileDetailsRequestType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__GetRecurringPaymentsProfileDetailsRequestType(struct soap *soap, ns1__GetRecurringPaymentsProfileDetailsRequestType *p)
{
	if (soap_read_ns1__GetRecurringPaymentsProfileDetailsRequestType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__CreateRecurringPaymentsProfileResponseType_DEFINED
#define SOAP_TYPE_ns1__CreateRecurringPaymentsProfileResponseType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__CreateRecurringPaymentsProfileResponseType(struct soap*, const char*, int, const ns1__CreateRecurringPaymentsProfileResponseType *, const char*);
SOAP_FMAC3 ns1__CreateRecurringPaymentsProfileResponseType * SOAP_FMAC4 soap_in_ns1__CreateRecurringPaymentsProfileResponseType(struct soap*, const char*, ns1__CreateRecurringPaymentsProfileResponseType *, const char*);
SOAP_FMAC1 ns1__CreateRecurringPaymentsProfileResponseType * SOAP_FMAC2 soap_instantiate_ns1__CreateRecurringPaymentsProfileResponseType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__CreateRecurringPaymentsProfileResponseType * soap_new_ns1__CreateRecurringPaymentsProfileResponseType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__CreateRecurringPaymentsProfileResponseType(soap, n, NULL, NULL, NULL);
}

inline ns1__CreateRecurringPaymentsProfileResponseType * soap_new_req_ns1__CreateRecurringPaymentsProfileResponseType(
	struct soap *soap,
	ns3__CreateRecurringPaymentsProfileResponseDetailsType *ns3__CreateRecurringPaymentsProfileResponseDetails,
	enum ns3__AckCodeType Ack__1,
	const std::string& Version__1,
	const std::string& Build__1)
{
	ns1__CreateRecurringPaymentsProfileResponseType *_p = soap_new_ns1__CreateRecurringPaymentsProfileResponseType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__CreateRecurringPaymentsProfileResponseType::ns3__CreateRecurringPaymentsProfileResponseDetails = ns3__CreateRecurringPaymentsProfileResponseDetails;
		_p->ns3__AbstractResponseType::Ack = Ack__1;
		_p->ns3__AbstractResponseType::Version = Version__1;
		_p->ns3__AbstractResponseType::Build = Build__1;
	}
	return _p;
}

inline ns1__CreateRecurringPaymentsProfileResponseType * soap_new_set_ns1__CreateRecurringPaymentsProfileResponseType(
	struct soap *soap,
	ns3__CreateRecurringPaymentsProfileResponseDetailsType *ns3__CreateRecurringPaymentsProfileResponseDetails,
	time_t *Timestamp__1,
	enum ns3__AckCodeType Ack__1,
	std::string *CorrelationID__1,
	const std::vector<ns3__ErrorType *> & Errors__1,
	const std::string& Version__1,
	const std::string& Build__1,
	char *__any__1)
{
	ns1__CreateRecurringPaymentsProfileResponseType *_p = soap_new_ns1__CreateRecurringPaymentsProfileResponseType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__CreateRecurringPaymentsProfileResponseType::ns3__CreateRecurringPaymentsProfileResponseDetails = ns3__CreateRecurringPaymentsProfileResponseDetails;
		_p->ns3__AbstractResponseType::Timestamp = Timestamp__1;
		_p->ns3__AbstractResponseType::Ack = Ack__1;
		_p->ns3__AbstractResponseType::CorrelationID = CorrelationID__1;
		_p->ns3__AbstractResponseType::Errors = Errors__1;
		_p->ns3__AbstractResponseType::Version = Version__1;
		_p->ns3__AbstractResponseType::Build = Build__1;
		_p->ns3__AbstractResponseType::__any = __any__1;
	}
	return _p;
}

inline int soap_write_ns1__CreateRecurringPaymentsProfileResponseType(struct soap *soap, ns1__CreateRecurringPaymentsProfileResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CreateRecurringPaymentsProfileResponseType", p->soap_type() == SOAP_TYPE_ns1__CreateRecurringPaymentsProfileResponseType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__CreateRecurringPaymentsProfileResponseType(struct soap *soap, const char *URL, ns1__CreateRecurringPaymentsProfileResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CreateRecurringPaymentsProfileResponseType", p->soap_type() == SOAP_TYPE_ns1__CreateRecurringPaymentsProfileResponseType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__CreateRecurringPaymentsProfileResponseType(struct soap *soap, const char *URL, ns1__CreateRecurringPaymentsProfileResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CreateRecurringPaymentsProfileResponseType", p->soap_type() == SOAP_TYPE_ns1__CreateRecurringPaymentsProfileResponseType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__CreateRecurringPaymentsProfileResponseType * SOAP_FMAC4 soap_get_ns1__CreateRecurringPaymentsProfileResponseType(struct soap*, ns1__CreateRecurringPaymentsProfileResponseType *, const char*, const char*);

inline int soap_read_ns1__CreateRecurringPaymentsProfileResponseType(struct soap *soap, ns1__CreateRecurringPaymentsProfileResponseType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__CreateRecurringPaymentsProfileResponseType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__CreateRecurringPaymentsProfileResponseType(struct soap *soap, const char *URL, ns1__CreateRecurringPaymentsProfileResponseType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__CreateRecurringPaymentsProfileResponseType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__CreateRecurringPaymentsProfileResponseType(struct soap *soap, ns1__CreateRecurringPaymentsProfileResponseType *p)
{
	if (soap_read_ns1__CreateRecurringPaymentsProfileResponseType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__CreateRecurringPaymentsProfileRequestType_DEFINED
#define SOAP_TYPE_ns1__CreateRecurringPaymentsProfileRequestType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__CreateRecurringPaymentsProfileRequestType(struct soap*, const char*, int, const ns1__CreateRecurringPaymentsProfileRequestType *, const char*);
SOAP_FMAC3 ns1__CreateRecurringPaymentsProfileRequestType * SOAP_FMAC4 soap_in_ns1__CreateRecurringPaymentsProfileRequestType(struct soap*, const char*, ns1__CreateRecurringPaymentsProfileRequestType *, const char*);
SOAP_FMAC1 ns1__CreateRecurringPaymentsProfileRequestType * SOAP_FMAC2 soap_instantiate_ns1__CreateRecurringPaymentsProfileRequestType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__CreateRecurringPaymentsProfileRequestType * soap_new_ns1__CreateRecurringPaymentsProfileRequestType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__CreateRecurringPaymentsProfileRequestType(soap, n, NULL, NULL, NULL);
}

inline ns1__CreateRecurringPaymentsProfileRequestType * soap_new_req_ns1__CreateRecurringPaymentsProfileRequestType(
	struct soap *soap,
	ns3__CreateRecurringPaymentsProfileRequestDetailsType *ns3__CreateRecurringPaymentsProfileRequestDetails,
	const std::string& Version__1)
{
	ns1__CreateRecurringPaymentsProfileRequestType *_p = soap_new_ns1__CreateRecurringPaymentsProfileRequestType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__CreateRecurringPaymentsProfileRequestType::ns3__CreateRecurringPaymentsProfileRequestDetails = ns3__CreateRecurringPaymentsProfileRequestDetails;
		_p->ns3__AbstractRequestType::Version = Version__1;
	}
	return _p;
}

inline ns1__CreateRecurringPaymentsProfileRequestType * soap_new_set_ns1__CreateRecurringPaymentsProfileRequestType(
	struct soap *soap,
	ns3__CreateRecurringPaymentsProfileRequestDetailsType *ns3__CreateRecurringPaymentsProfileRequestDetails,
	const std::vector<enum ns3__DetailLevelCodeType> & DetailLevel__1,
	std::string *ErrorLanguage__1,
	const std::string& Version__1,
	char *__any__1)
{
	ns1__CreateRecurringPaymentsProfileRequestType *_p = soap_new_ns1__CreateRecurringPaymentsProfileRequestType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__CreateRecurringPaymentsProfileRequestType::ns3__CreateRecurringPaymentsProfileRequestDetails = ns3__CreateRecurringPaymentsProfileRequestDetails;
		_p->ns3__AbstractRequestType::DetailLevel = DetailLevel__1;
		_p->ns3__AbstractRequestType::ErrorLanguage = ErrorLanguage__1;
		_p->ns3__AbstractRequestType::Version = Version__1;
		_p->ns3__AbstractRequestType::__any = __any__1;
	}
	return _p;
}

inline int soap_write_ns1__CreateRecurringPaymentsProfileRequestType(struct soap *soap, ns1__CreateRecurringPaymentsProfileRequestType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CreateRecurringPaymentsProfileRequestType", p->soap_type() == SOAP_TYPE_ns1__CreateRecurringPaymentsProfileRequestType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__CreateRecurringPaymentsProfileRequestType(struct soap *soap, const char *URL, ns1__CreateRecurringPaymentsProfileRequestType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CreateRecurringPaymentsProfileRequestType", p->soap_type() == SOAP_TYPE_ns1__CreateRecurringPaymentsProfileRequestType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__CreateRecurringPaymentsProfileRequestType(struct soap *soap, const char *URL, ns1__CreateRecurringPaymentsProfileRequestType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CreateRecurringPaymentsProfileRequestType", p->soap_type() == SOAP_TYPE_ns1__CreateRecurringPaymentsProfileRequestType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__CreateRecurringPaymentsProfileRequestType * SOAP_FMAC4 soap_get_ns1__CreateRecurringPaymentsProfileRequestType(struct soap*, ns1__CreateRecurringPaymentsProfileRequestType *, const char*, const char*);

inline int soap_read_ns1__CreateRecurringPaymentsProfileRequestType(struct soap *soap, ns1__CreateRecurringPaymentsProfileRequestType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__CreateRecurringPaymentsProfileRequestType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__CreateRecurringPaymentsProfileRequestType(struct soap *soap, const char *URL, ns1__CreateRecurringPaymentsProfileRequestType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__CreateRecurringPaymentsProfileRequestType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__CreateRecurringPaymentsProfileRequestType(struct soap *soap, ns1__CreateRecurringPaymentsProfileRequestType *p)
{
	if (soap_read_ns1__CreateRecurringPaymentsProfileRequestType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__DoNonReferencedCreditResponseType_DEFINED
#define SOAP_TYPE_ns1__DoNonReferencedCreditResponseType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__DoNonReferencedCreditResponseType(struct soap*, const char*, int, const ns1__DoNonReferencedCreditResponseType *, const char*);
SOAP_FMAC3 ns1__DoNonReferencedCreditResponseType * SOAP_FMAC4 soap_in_ns1__DoNonReferencedCreditResponseType(struct soap*, const char*, ns1__DoNonReferencedCreditResponseType *, const char*);
SOAP_FMAC1 ns1__DoNonReferencedCreditResponseType * SOAP_FMAC2 soap_instantiate_ns1__DoNonReferencedCreditResponseType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__DoNonReferencedCreditResponseType * soap_new_ns1__DoNonReferencedCreditResponseType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__DoNonReferencedCreditResponseType(soap, n, NULL, NULL, NULL);
}

inline ns1__DoNonReferencedCreditResponseType * soap_new_req_ns1__DoNonReferencedCreditResponseType(
	struct soap *soap,
	ns3__DoNonReferencedCreditResponseDetailsType *ns3__DoNonReferencedCreditResponseDetails,
	enum ns3__AckCodeType Ack__1,
	const std::string& Version__1,
	const std::string& Build__1)
{
	ns1__DoNonReferencedCreditResponseType *_p = soap_new_ns1__DoNonReferencedCreditResponseType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__DoNonReferencedCreditResponseType::ns3__DoNonReferencedCreditResponseDetails = ns3__DoNonReferencedCreditResponseDetails;
		_p->ns3__AbstractResponseType::Ack = Ack__1;
		_p->ns3__AbstractResponseType::Version = Version__1;
		_p->ns3__AbstractResponseType::Build = Build__1;
	}
	return _p;
}

inline ns1__DoNonReferencedCreditResponseType * soap_new_set_ns1__DoNonReferencedCreditResponseType(
	struct soap *soap,
	ns3__DoNonReferencedCreditResponseDetailsType *ns3__DoNonReferencedCreditResponseDetails,
	time_t *Timestamp__1,
	enum ns3__AckCodeType Ack__1,
	std::string *CorrelationID__1,
	const std::vector<ns3__ErrorType *> & Errors__1,
	const std::string& Version__1,
	const std::string& Build__1,
	char *__any__1)
{
	ns1__DoNonReferencedCreditResponseType *_p = soap_new_ns1__DoNonReferencedCreditResponseType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__DoNonReferencedCreditResponseType::ns3__DoNonReferencedCreditResponseDetails = ns3__DoNonReferencedCreditResponseDetails;
		_p->ns3__AbstractResponseType::Timestamp = Timestamp__1;
		_p->ns3__AbstractResponseType::Ack = Ack__1;
		_p->ns3__AbstractResponseType::CorrelationID = CorrelationID__1;
		_p->ns3__AbstractResponseType::Errors = Errors__1;
		_p->ns3__AbstractResponseType::Version = Version__1;
		_p->ns3__AbstractResponseType::Build = Build__1;
		_p->ns3__AbstractResponseType::__any = __any__1;
	}
	return _p;
}

inline int soap_write_ns1__DoNonReferencedCreditResponseType(struct soap *soap, ns1__DoNonReferencedCreditResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:DoNonReferencedCreditResponseType", p->soap_type() == SOAP_TYPE_ns1__DoNonReferencedCreditResponseType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__DoNonReferencedCreditResponseType(struct soap *soap, const char *URL, ns1__DoNonReferencedCreditResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:DoNonReferencedCreditResponseType", p->soap_type() == SOAP_TYPE_ns1__DoNonReferencedCreditResponseType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__DoNonReferencedCreditResponseType(struct soap *soap, const char *URL, ns1__DoNonReferencedCreditResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:DoNonReferencedCreditResponseType", p->soap_type() == SOAP_TYPE_ns1__DoNonReferencedCreditResponseType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__DoNonReferencedCreditResponseType * SOAP_FMAC4 soap_get_ns1__DoNonReferencedCreditResponseType(struct soap*, ns1__DoNonReferencedCreditResponseType *, const char*, const char*);

inline int soap_read_ns1__DoNonReferencedCreditResponseType(struct soap *soap, ns1__DoNonReferencedCreditResponseType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__DoNonReferencedCreditResponseType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__DoNonReferencedCreditResponseType(struct soap *soap, const char *URL, ns1__DoNonReferencedCreditResponseType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__DoNonReferencedCreditResponseType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__DoNonReferencedCreditResponseType(struct soap *soap, ns1__DoNonReferencedCreditResponseType *p)
{
	if (soap_read_ns1__DoNonReferencedCreditResponseType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__DoNonReferencedCreditRequestType_DEFINED
#define SOAP_TYPE_ns1__DoNonReferencedCreditRequestType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__DoNonReferencedCreditRequestType(struct soap*, const char*, int, const ns1__DoNonReferencedCreditRequestType *, const char*);
SOAP_FMAC3 ns1__DoNonReferencedCreditRequestType * SOAP_FMAC4 soap_in_ns1__DoNonReferencedCreditRequestType(struct soap*, const char*, ns1__DoNonReferencedCreditRequestType *, const char*);
SOAP_FMAC1 ns1__DoNonReferencedCreditRequestType * SOAP_FMAC2 soap_instantiate_ns1__DoNonReferencedCreditRequestType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__DoNonReferencedCreditRequestType * soap_new_ns1__DoNonReferencedCreditRequestType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__DoNonReferencedCreditRequestType(soap, n, NULL, NULL, NULL);
}

inline ns1__DoNonReferencedCreditRequestType * soap_new_req_ns1__DoNonReferencedCreditRequestType(
	struct soap *soap,
	ns3__DoNonReferencedCreditRequestDetailsType *ns3__DoNonReferencedCreditRequestDetails,
	const std::string& Version__1)
{
	ns1__DoNonReferencedCreditRequestType *_p = soap_new_ns1__DoNonReferencedCreditRequestType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__DoNonReferencedCreditRequestType::ns3__DoNonReferencedCreditRequestDetails = ns3__DoNonReferencedCreditRequestDetails;
		_p->ns3__AbstractRequestType::Version = Version__1;
	}
	return _p;
}

inline ns1__DoNonReferencedCreditRequestType * soap_new_set_ns1__DoNonReferencedCreditRequestType(
	struct soap *soap,
	ns3__DoNonReferencedCreditRequestDetailsType *ns3__DoNonReferencedCreditRequestDetails,
	const std::vector<enum ns3__DetailLevelCodeType> & DetailLevel__1,
	std::string *ErrorLanguage__1,
	const std::string& Version__1,
	char *__any__1)
{
	ns1__DoNonReferencedCreditRequestType *_p = soap_new_ns1__DoNonReferencedCreditRequestType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__DoNonReferencedCreditRequestType::ns3__DoNonReferencedCreditRequestDetails = ns3__DoNonReferencedCreditRequestDetails;
		_p->ns3__AbstractRequestType::DetailLevel = DetailLevel__1;
		_p->ns3__AbstractRequestType::ErrorLanguage = ErrorLanguage__1;
		_p->ns3__AbstractRequestType::Version = Version__1;
		_p->ns3__AbstractRequestType::__any = __any__1;
	}
	return _p;
}

inline int soap_write_ns1__DoNonReferencedCreditRequestType(struct soap *soap, ns1__DoNonReferencedCreditRequestType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:DoNonReferencedCreditRequestType", p->soap_type() == SOAP_TYPE_ns1__DoNonReferencedCreditRequestType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__DoNonReferencedCreditRequestType(struct soap *soap, const char *URL, ns1__DoNonReferencedCreditRequestType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:DoNonReferencedCreditRequestType", p->soap_type() == SOAP_TYPE_ns1__DoNonReferencedCreditRequestType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__DoNonReferencedCreditRequestType(struct soap *soap, const char *URL, ns1__DoNonReferencedCreditRequestType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:DoNonReferencedCreditRequestType", p->soap_type() == SOAP_TYPE_ns1__DoNonReferencedCreditRequestType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__DoNonReferencedCreditRequestType * SOAP_FMAC4 soap_get_ns1__DoNonReferencedCreditRequestType(struct soap*, ns1__DoNonReferencedCreditRequestType *, const char*, const char*);

inline int soap_read_ns1__DoNonReferencedCreditRequestType(struct soap *soap, ns1__DoNonReferencedCreditRequestType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__DoNonReferencedCreditRequestType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__DoNonReferencedCreditRequestType(struct soap *soap, const char *URL, ns1__DoNonReferencedCreditRequestType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__DoNonReferencedCreditRequestType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__DoNonReferencedCreditRequestType(struct soap *soap, ns1__DoNonReferencedCreditRequestType *p)
{
	if (soap_read_ns1__DoNonReferencedCreditRequestType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__DoReferenceTransactionResponseType_DEFINED
#define SOAP_TYPE_ns1__DoReferenceTransactionResponseType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__DoReferenceTransactionResponseType(struct soap*, const char*, int, const ns1__DoReferenceTransactionResponseType *, const char*);
SOAP_FMAC3 ns1__DoReferenceTransactionResponseType * SOAP_FMAC4 soap_in_ns1__DoReferenceTransactionResponseType(struct soap*, const char*, ns1__DoReferenceTransactionResponseType *, const char*);
SOAP_FMAC1 ns1__DoReferenceTransactionResponseType * SOAP_FMAC2 soap_instantiate_ns1__DoReferenceTransactionResponseType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__DoReferenceTransactionResponseType * soap_new_ns1__DoReferenceTransactionResponseType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__DoReferenceTransactionResponseType(soap, n, NULL, NULL, NULL);
}

inline ns1__DoReferenceTransactionResponseType * soap_new_req_ns1__DoReferenceTransactionResponseType(
	struct soap *soap,
	ns3__DoReferenceTransactionResponseDetailsType *ns3__DoReferenceTransactionResponseDetails,
	enum ns3__AckCodeType Ack__1,
	const std::string& Version__1,
	const std::string& Build__1)
{
	ns1__DoReferenceTransactionResponseType *_p = soap_new_ns1__DoReferenceTransactionResponseType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__DoReferenceTransactionResponseType::ns3__DoReferenceTransactionResponseDetails = ns3__DoReferenceTransactionResponseDetails;
		_p->ns3__AbstractResponseType::Ack = Ack__1;
		_p->ns3__AbstractResponseType::Version = Version__1;
		_p->ns3__AbstractResponseType::Build = Build__1;
	}
	return _p;
}

inline ns1__DoReferenceTransactionResponseType * soap_new_set_ns1__DoReferenceTransactionResponseType(
	struct soap *soap,
	ns3__DoReferenceTransactionResponseDetailsType *ns3__DoReferenceTransactionResponseDetails,
	ns3__FMFDetailsType *FMFDetails,
	time_t *Timestamp__1,
	enum ns3__AckCodeType Ack__1,
	std::string *CorrelationID__1,
	const std::vector<ns3__ErrorType *> & Errors__1,
	const std::string& Version__1,
	const std::string& Build__1,
	char *__any__1)
{
	ns1__DoReferenceTransactionResponseType *_p = soap_new_ns1__DoReferenceTransactionResponseType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__DoReferenceTransactionResponseType::ns3__DoReferenceTransactionResponseDetails = ns3__DoReferenceTransactionResponseDetails;
		_p->ns1__DoReferenceTransactionResponseType::FMFDetails = FMFDetails;
		_p->ns3__AbstractResponseType::Timestamp = Timestamp__1;
		_p->ns3__AbstractResponseType::Ack = Ack__1;
		_p->ns3__AbstractResponseType::CorrelationID = CorrelationID__1;
		_p->ns3__AbstractResponseType::Errors = Errors__1;
		_p->ns3__AbstractResponseType::Version = Version__1;
		_p->ns3__AbstractResponseType::Build = Build__1;
		_p->ns3__AbstractResponseType::__any = __any__1;
	}
	return _p;
}

inline int soap_write_ns1__DoReferenceTransactionResponseType(struct soap *soap, ns1__DoReferenceTransactionResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:DoReferenceTransactionResponseType", p->soap_type() == SOAP_TYPE_ns1__DoReferenceTransactionResponseType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__DoReferenceTransactionResponseType(struct soap *soap, const char *URL, ns1__DoReferenceTransactionResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:DoReferenceTransactionResponseType", p->soap_type() == SOAP_TYPE_ns1__DoReferenceTransactionResponseType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__DoReferenceTransactionResponseType(struct soap *soap, const char *URL, ns1__DoReferenceTransactionResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:DoReferenceTransactionResponseType", p->soap_type() == SOAP_TYPE_ns1__DoReferenceTransactionResponseType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__DoReferenceTransactionResponseType * SOAP_FMAC4 soap_get_ns1__DoReferenceTransactionResponseType(struct soap*, ns1__DoReferenceTransactionResponseType *, const char*, const char*);

inline int soap_read_ns1__DoReferenceTransactionResponseType(struct soap *soap, ns1__DoReferenceTransactionResponseType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__DoReferenceTransactionResponseType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__DoReferenceTransactionResponseType(struct soap *soap, const char *URL, ns1__DoReferenceTransactionResponseType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__DoReferenceTransactionResponseType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__DoReferenceTransactionResponseType(struct soap *soap, ns1__DoReferenceTransactionResponseType *p)
{
	if (soap_read_ns1__DoReferenceTransactionResponseType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__DoReferenceTransactionRequestType_DEFINED
#define SOAP_TYPE_ns1__DoReferenceTransactionRequestType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__DoReferenceTransactionRequestType(struct soap*, const char*, int, const ns1__DoReferenceTransactionRequestType *, const char*);
SOAP_FMAC3 ns1__DoReferenceTransactionRequestType * SOAP_FMAC4 soap_in_ns1__DoReferenceTransactionRequestType(struct soap*, const char*, ns1__DoReferenceTransactionRequestType *, const char*);
SOAP_FMAC1 ns1__DoReferenceTransactionRequestType * SOAP_FMAC2 soap_instantiate_ns1__DoReferenceTransactionRequestType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__DoReferenceTransactionRequestType * soap_new_ns1__DoReferenceTransactionRequestType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__DoReferenceTransactionRequestType(soap, n, NULL, NULL, NULL);
}

inline ns1__DoReferenceTransactionRequestType * soap_new_req_ns1__DoReferenceTransactionRequestType(
	struct soap *soap,
	ns3__DoReferenceTransactionRequestDetailsType *ns3__DoReferenceTransactionRequestDetails,
	const std::string& Version__1)
{
	ns1__DoReferenceTransactionRequestType *_p = soap_new_ns1__DoReferenceTransactionRequestType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__DoReferenceTransactionRequestType::ns3__DoReferenceTransactionRequestDetails = ns3__DoReferenceTransactionRequestDetails;
		_p->ns3__AbstractRequestType::Version = Version__1;
	}
	return _p;
}

inline ns1__DoReferenceTransactionRequestType * soap_new_set_ns1__DoReferenceTransactionRequestType(
	struct soap *soap,
	ns3__DoReferenceTransactionRequestDetailsType *ns3__DoReferenceTransactionRequestDetails,
	int *ReturnFMFDetails,
	const std::vector<enum ns3__DetailLevelCodeType> & DetailLevel__1,
	std::string *ErrorLanguage__1,
	const std::string& Version__1,
	char *__any__1)
{
	ns1__DoReferenceTransactionRequestType *_p = soap_new_ns1__DoReferenceTransactionRequestType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__DoReferenceTransactionRequestType::ns3__DoReferenceTransactionRequestDetails = ns3__DoReferenceTransactionRequestDetails;
		_p->ns1__DoReferenceTransactionRequestType::ReturnFMFDetails = ReturnFMFDetails;
		_p->ns3__AbstractRequestType::DetailLevel = DetailLevel__1;
		_p->ns3__AbstractRequestType::ErrorLanguage = ErrorLanguage__1;
		_p->ns3__AbstractRequestType::Version = Version__1;
		_p->ns3__AbstractRequestType::__any = __any__1;
	}
	return _p;
}

inline int soap_write_ns1__DoReferenceTransactionRequestType(struct soap *soap, ns1__DoReferenceTransactionRequestType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:DoReferenceTransactionRequestType", p->soap_type() == SOAP_TYPE_ns1__DoReferenceTransactionRequestType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__DoReferenceTransactionRequestType(struct soap *soap, const char *URL, ns1__DoReferenceTransactionRequestType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:DoReferenceTransactionRequestType", p->soap_type() == SOAP_TYPE_ns1__DoReferenceTransactionRequestType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__DoReferenceTransactionRequestType(struct soap *soap, const char *URL, ns1__DoReferenceTransactionRequestType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:DoReferenceTransactionRequestType", p->soap_type() == SOAP_TYPE_ns1__DoReferenceTransactionRequestType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__DoReferenceTransactionRequestType * SOAP_FMAC4 soap_get_ns1__DoReferenceTransactionRequestType(struct soap*, ns1__DoReferenceTransactionRequestType *, const char*, const char*);

inline int soap_read_ns1__DoReferenceTransactionRequestType(struct soap *soap, ns1__DoReferenceTransactionRequestType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__DoReferenceTransactionRequestType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__DoReferenceTransactionRequestType(struct soap *soap, const char *URL, ns1__DoReferenceTransactionRequestType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__DoReferenceTransactionRequestType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__DoReferenceTransactionRequestType(struct soap *soap, ns1__DoReferenceTransactionRequestType *p)
{
	if (soap_read_ns1__DoReferenceTransactionRequestType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__CreateBillingAgreementResponseType_DEFINED
#define SOAP_TYPE_ns1__CreateBillingAgreementResponseType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__CreateBillingAgreementResponseType(struct soap*, const char*, int, const ns1__CreateBillingAgreementResponseType *, const char*);
SOAP_FMAC3 ns1__CreateBillingAgreementResponseType * SOAP_FMAC4 soap_in_ns1__CreateBillingAgreementResponseType(struct soap*, const char*, ns1__CreateBillingAgreementResponseType *, const char*);
SOAP_FMAC1 ns1__CreateBillingAgreementResponseType * SOAP_FMAC2 soap_instantiate_ns1__CreateBillingAgreementResponseType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__CreateBillingAgreementResponseType * soap_new_ns1__CreateBillingAgreementResponseType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__CreateBillingAgreementResponseType(soap, n, NULL, NULL, NULL);
}

inline ns1__CreateBillingAgreementResponseType * soap_new_req_ns1__CreateBillingAgreementResponseType(
	struct soap *soap,
	const std::string& BillingAgreementID,
	enum ns3__AckCodeType Ack__1,
	const std::string& Version__1,
	const std::string& Build__1)
{
	ns1__CreateBillingAgreementResponseType *_p = soap_new_ns1__CreateBillingAgreementResponseType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__CreateBillingAgreementResponseType::BillingAgreementID = BillingAgreementID;
		_p->ns3__AbstractResponseType::Ack = Ack__1;
		_p->ns3__AbstractResponseType::Version = Version__1;
		_p->ns3__AbstractResponseType::Build = Build__1;
	}
	return _p;
}

inline ns1__CreateBillingAgreementResponseType * soap_new_set_ns1__CreateBillingAgreementResponseType(
	struct soap *soap,
	const std::string& BillingAgreementID,
	time_t *Timestamp__1,
	enum ns3__AckCodeType Ack__1,
	std::string *CorrelationID__1,
	const std::vector<ns3__ErrorType *> & Errors__1,
	const std::string& Version__1,
	const std::string& Build__1,
	char *__any__1)
{
	ns1__CreateBillingAgreementResponseType *_p = soap_new_ns1__CreateBillingAgreementResponseType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__CreateBillingAgreementResponseType::BillingAgreementID = BillingAgreementID;
		_p->ns3__AbstractResponseType::Timestamp = Timestamp__1;
		_p->ns3__AbstractResponseType::Ack = Ack__1;
		_p->ns3__AbstractResponseType::CorrelationID = CorrelationID__1;
		_p->ns3__AbstractResponseType::Errors = Errors__1;
		_p->ns3__AbstractResponseType::Version = Version__1;
		_p->ns3__AbstractResponseType::Build = Build__1;
		_p->ns3__AbstractResponseType::__any = __any__1;
	}
	return _p;
}

inline int soap_write_ns1__CreateBillingAgreementResponseType(struct soap *soap, ns1__CreateBillingAgreementResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CreateBillingAgreementResponseType", p->soap_type() == SOAP_TYPE_ns1__CreateBillingAgreementResponseType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__CreateBillingAgreementResponseType(struct soap *soap, const char *URL, ns1__CreateBillingAgreementResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CreateBillingAgreementResponseType", p->soap_type() == SOAP_TYPE_ns1__CreateBillingAgreementResponseType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__CreateBillingAgreementResponseType(struct soap *soap, const char *URL, ns1__CreateBillingAgreementResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CreateBillingAgreementResponseType", p->soap_type() == SOAP_TYPE_ns1__CreateBillingAgreementResponseType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__CreateBillingAgreementResponseType * SOAP_FMAC4 soap_get_ns1__CreateBillingAgreementResponseType(struct soap*, ns1__CreateBillingAgreementResponseType *, const char*, const char*);

inline int soap_read_ns1__CreateBillingAgreementResponseType(struct soap *soap, ns1__CreateBillingAgreementResponseType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__CreateBillingAgreementResponseType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__CreateBillingAgreementResponseType(struct soap *soap, const char *URL, ns1__CreateBillingAgreementResponseType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__CreateBillingAgreementResponseType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__CreateBillingAgreementResponseType(struct soap *soap, ns1__CreateBillingAgreementResponseType *p)
{
	if (soap_read_ns1__CreateBillingAgreementResponseType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__CreateBillingAgreementRequestType_DEFINED
#define SOAP_TYPE_ns1__CreateBillingAgreementRequestType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__CreateBillingAgreementRequestType(struct soap*, const char*, int, const ns1__CreateBillingAgreementRequestType *, const char*);
SOAP_FMAC3 ns1__CreateBillingAgreementRequestType * SOAP_FMAC4 soap_in_ns1__CreateBillingAgreementRequestType(struct soap*, const char*, ns1__CreateBillingAgreementRequestType *, const char*);
SOAP_FMAC1 ns1__CreateBillingAgreementRequestType * SOAP_FMAC2 soap_instantiate_ns1__CreateBillingAgreementRequestType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__CreateBillingAgreementRequestType * soap_new_ns1__CreateBillingAgreementRequestType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__CreateBillingAgreementRequestType(soap, n, NULL, NULL, NULL);
}

inline ns1__CreateBillingAgreementRequestType * soap_new_req_ns1__CreateBillingAgreementRequestType(
	struct soap *soap,
	const std::string& Token,
	const std::string& Version__1)
{
	ns1__CreateBillingAgreementRequestType *_p = soap_new_ns1__CreateBillingAgreementRequestType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__CreateBillingAgreementRequestType::Token = Token;
		_p->ns3__AbstractRequestType::Version = Version__1;
	}
	return _p;
}

inline ns1__CreateBillingAgreementRequestType * soap_new_set_ns1__CreateBillingAgreementRequestType(
	struct soap *soap,
	const std::string& Token,
	const std::vector<enum ns3__DetailLevelCodeType> & DetailLevel__1,
	std::string *ErrorLanguage__1,
	const std::string& Version__1,
	char *__any__1)
{
	ns1__CreateBillingAgreementRequestType *_p = soap_new_ns1__CreateBillingAgreementRequestType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__CreateBillingAgreementRequestType::Token = Token;
		_p->ns3__AbstractRequestType::DetailLevel = DetailLevel__1;
		_p->ns3__AbstractRequestType::ErrorLanguage = ErrorLanguage__1;
		_p->ns3__AbstractRequestType::Version = Version__1;
		_p->ns3__AbstractRequestType::__any = __any__1;
	}
	return _p;
}

inline int soap_write_ns1__CreateBillingAgreementRequestType(struct soap *soap, ns1__CreateBillingAgreementRequestType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CreateBillingAgreementRequestType", p->soap_type() == SOAP_TYPE_ns1__CreateBillingAgreementRequestType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__CreateBillingAgreementRequestType(struct soap *soap, const char *URL, ns1__CreateBillingAgreementRequestType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CreateBillingAgreementRequestType", p->soap_type() == SOAP_TYPE_ns1__CreateBillingAgreementRequestType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__CreateBillingAgreementRequestType(struct soap *soap, const char *URL, ns1__CreateBillingAgreementRequestType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CreateBillingAgreementRequestType", p->soap_type() == SOAP_TYPE_ns1__CreateBillingAgreementRequestType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__CreateBillingAgreementRequestType * SOAP_FMAC4 soap_get_ns1__CreateBillingAgreementRequestType(struct soap*, ns1__CreateBillingAgreementRequestType *, const char*, const char*);

inline int soap_read_ns1__CreateBillingAgreementRequestType(struct soap *soap, ns1__CreateBillingAgreementRequestType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__CreateBillingAgreementRequestType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__CreateBillingAgreementRequestType(struct soap *soap, const char *URL, ns1__CreateBillingAgreementRequestType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__CreateBillingAgreementRequestType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__CreateBillingAgreementRequestType(struct soap *soap, ns1__CreateBillingAgreementRequestType *p)
{
	if (soap_read_ns1__CreateBillingAgreementRequestType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__GetBillingAgreementCustomerDetailsResponseType_DEFINED
#define SOAP_TYPE_ns1__GetBillingAgreementCustomerDetailsResponseType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__GetBillingAgreementCustomerDetailsResponseType(struct soap*, const char*, int, const ns1__GetBillingAgreementCustomerDetailsResponseType *, const char*);
SOAP_FMAC3 ns1__GetBillingAgreementCustomerDetailsResponseType * SOAP_FMAC4 soap_in_ns1__GetBillingAgreementCustomerDetailsResponseType(struct soap*, const char*, ns1__GetBillingAgreementCustomerDetailsResponseType *, const char*);
SOAP_FMAC1 ns1__GetBillingAgreementCustomerDetailsResponseType * SOAP_FMAC2 soap_instantiate_ns1__GetBillingAgreementCustomerDetailsResponseType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__GetBillingAgreementCustomerDetailsResponseType * soap_new_ns1__GetBillingAgreementCustomerDetailsResponseType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__GetBillingAgreementCustomerDetailsResponseType(soap, n, NULL, NULL, NULL);
}

inline ns1__GetBillingAgreementCustomerDetailsResponseType * soap_new_req_ns1__GetBillingAgreementCustomerDetailsResponseType(
	struct soap *soap,
	ns3__GetBillingAgreementCustomerDetailsResponseDetailsType *ns3__GetBillingAgreementCustomerDetailsResponseDetails,
	enum ns3__AckCodeType Ack__1,
	const std::string& Version__1,
	const std::string& Build__1)
{
	ns1__GetBillingAgreementCustomerDetailsResponseType *_p = soap_new_ns1__GetBillingAgreementCustomerDetailsResponseType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__GetBillingAgreementCustomerDetailsResponseType::ns3__GetBillingAgreementCustomerDetailsResponseDetails = ns3__GetBillingAgreementCustomerDetailsResponseDetails;
		_p->ns3__AbstractResponseType::Ack = Ack__1;
		_p->ns3__AbstractResponseType::Version = Version__1;
		_p->ns3__AbstractResponseType::Build = Build__1;
	}
	return _p;
}

inline ns1__GetBillingAgreementCustomerDetailsResponseType * soap_new_set_ns1__GetBillingAgreementCustomerDetailsResponseType(
	struct soap *soap,
	ns3__GetBillingAgreementCustomerDetailsResponseDetailsType *ns3__GetBillingAgreementCustomerDetailsResponseDetails,
	time_t *Timestamp__1,
	enum ns3__AckCodeType Ack__1,
	std::string *CorrelationID__1,
	const std::vector<ns3__ErrorType *> & Errors__1,
	const std::string& Version__1,
	const std::string& Build__1,
	char *__any__1)
{
	ns1__GetBillingAgreementCustomerDetailsResponseType *_p = soap_new_ns1__GetBillingAgreementCustomerDetailsResponseType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__GetBillingAgreementCustomerDetailsResponseType::ns3__GetBillingAgreementCustomerDetailsResponseDetails = ns3__GetBillingAgreementCustomerDetailsResponseDetails;
		_p->ns3__AbstractResponseType::Timestamp = Timestamp__1;
		_p->ns3__AbstractResponseType::Ack = Ack__1;
		_p->ns3__AbstractResponseType::CorrelationID = CorrelationID__1;
		_p->ns3__AbstractResponseType::Errors = Errors__1;
		_p->ns3__AbstractResponseType::Version = Version__1;
		_p->ns3__AbstractResponseType::Build = Build__1;
		_p->ns3__AbstractResponseType::__any = __any__1;
	}
	return _p;
}

inline int soap_write_ns1__GetBillingAgreementCustomerDetailsResponseType(struct soap *soap, ns1__GetBillingAgreementCustomerDetailsResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetBillingAgreementCustomerDetailsResponseType", p->soap_type() == SOAP_TYPE_ns1__GetBillingAgreementCustomerDetailsResponseType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__GetBillingAgreementCustomerDetailsResponseType(struct soap *soap, const char *URL, ns1__GetBillingAgreementCustomerDetailsResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetBillingAgreementCustomerDetailsResponseType", p->soap_type() == SOAP_TYPE_ns1__GetBillingAgreementCustomerDetailsResponseType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__GetBillingAgreementCustomerDetailsResponseType(struct soap *soap, const char *URL, ns1__GetBillingAgreementCustomerDetailsResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetBillingAgreementCustomerDetailsResponseType", p->soap_type() == SOAP_TYPE_ns1__GetBillingAgreementCustomerDetailsResponseType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__GetBillingAgreementCustomerDetailsResponseType * SOAP_FMAC4 soap_get_ns1__GetBillingAgreementCustomerDetailsResponseType(struct soap*, ns1__GetBillingAgreementCustomerDetailsResponseType *, const char*, const char*);

inline int soap_read_ns1__GetBillingAgreementCustomerDetailsResponseType(struct soap *soap, ns1__GetBillingAgreementCustomerDetailsResponseType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__GetBillingAgreementCustomerDetailsResponseType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__GetBillingAgreementCustomerDetailsResponseType(struct soap *soap, const char *URL, ns1__GetBillingAgreementCustomerDetailsResponseType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__GetBillingAgreementCustomerDetailsResponseType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__GetBillingAgreementCustomerDetailsResponseType(struct soap *soap, ns1__GetBillingAgreementCustomerDetailsResponseType *p)
{
	if (soap_read_ns1__GetBillingAgreementCustomerDetailsResponseType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__GetBillingAgreementCustomerDetailsRequestType_DEFINED
#define SOAP_TYPE_ns1__GetBillingAgreementCustomerDetailsRequestType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__GetBillingAgreementCustomerDetailsRequestType(struct soap*, const char*, int, const ns1__GetBillingAgreementCustomerDetailsRequestType *, const char*);
SOAP_FMAC3 ns1__GetBillingAgreementCustomerDetailsRequestType * SOAP_FMAC4 soap_in_ns1__GetBillingAgreementCustomerDetailsRequestType(struct soap*, const char*, ns1__GetBillingAgreementCustomerDetailsRequestType *, const char*);
SOAP_FMAC1 ns1__GetBillingAgreementCustomerDetailsRequestType * SOAP_FMAC2 soap_instantiate_ns1__GetBillingAgreementCustomerDetailsRequestType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__GetBillingAgreementCustomerDetailsRequestType * soap_new_ns1__GetBillingAgreementCustomerDetailsRequestType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__GetBillingAgreementCustomerDetailsRequestType(soap, n, NULL, NULL, NULL);
}

inline ns1__GetBillingAgreementCustomerDetailsRequestType * soap_new_req_ns1__GetBillingAgreementCustomerDetailsRequestType(
	struct soap *soap,
	const std::string& Token,
	const std::string& Version__1)
{
	ns1__GetBillingAgreementCustomerDetailsRequestType *_p = soap_new_ns1__GetBillingAgreementCustomerDetailsRequestType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__GetBillingAgreementCustomerDetailsRequestType::Token = Token;
		_p->ns3__AbstractRequestType::Version = Version__1;
	}
	return _p;
}

inline ns1__GetBillingAgreementCustomerDetailsRequestType * soap_new_set_ns1__GetBillingAgreementCustomerDetailsRequestType(
	struct soap *soap,
	const std::string& Token,
	const std::vector<enum ns3__DetailLevelCodeType> & DetailLevel__1,
	std::string *ErrorLanguage__1,
	const std::string& Version__1,
	char *__any__1)
{
	ns1__GetBillingAgreementCustomerDetailsRequestType *_p = soap_new_ns1__GetBillingAgreementCustomerDetailsRequestType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__GetBillingAgreementCustomerDetailsRequestType::Token = Token;
		_p->ns3__AbstractRequestType::DetailLevel = DetailLevel__1;
		_p->ns3__AbstractRequestType::ErrorLanguage = ErrorLanguage__1;
		_p->ns3__AbstractRequestType::Version = Version__1;
		_p->ns3__AbstractRequestType::__any = __any__1;
	}
	return _p;
}

inline int soap_write_ns1__GetBillingAgreementCustomerDetailsRequestType(struct soap *soap, ns1__GetBillingAgreementCustomerDetailsRequestType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetBillingAgreementCustomerDetailsRequestType", p->soap_type() == SOAP_TYPE_ns1__GetBillingAgreementCustomerDetailsRequestType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__GetBillingAgreementCustomerDetailsRequestType(struct soap *soap, const char *URL, ns1__GetBillingAgreementCustomerDetailsRequestType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetBillingAgreementCustomerDetailsRequestType", p->soap_type() == SOAP_TYPE_ns1__GetBillingAgreementCustomerDetailsRequestType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__GetBillingAgreementCustomerDetailsRequestType(struct soap *soap, const char *URL, ns1__GetBillingAgreementCustomerDetailsRequestType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetBillingAgreementCustomerDetailsRequestType", p->soap_type() == SOAP_TYPE_ns1__GetBillingAgreementCustomerDetailsRequestType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__GetBillingAgreementCustomerDetailsRequestType * SOAP_FMAC4 soap_get_ns1__GetBillingAgreementCustomerDetailsRequestType(struct soap*, ns1__GetBillingAgreementCustomerDetailsRequestType *, const char*, const char*);

inline int soap_read_ns1__GetBillingAgreementCustomerDetailsRequestType(struct soap *soap, ns1__GetBillingAgreementCustomerDetailsRequestType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__GetBillingAgreementCustomerDetailsRequestType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__GetBillingAgreementCustomerDetailsRequestType(struct soap *soap, const char *URL, ns1__GetBillingAgreementCustomerDetailsRequestType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__GetBillingAgreementCustomerDetailsRequestType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__GetBillingAgreementCustomerDetailsRequestType(struct soap *soap, ns1__GetBillingAgreementCustomerDetailsRequestType *p)
{
	if (soap_read_ns1__GetBillingAgreementCustomerDetailsRequestType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__SetCustomerBillingAgreementResponseType_DEFINED
#define SOAP_TYPE_ns1__SetCustomerBillingAgreementResponseType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__SetCustomerBillingAgreementResponseType(struct soap*, const char*, int, const ns1__SetCustomerBillingAgreementResponseType *, const char*);
SOAP_FMAC3 ns1__SetCustomerBillingAgreementResponseType * SOAP_FMAC4 soap_in_ns1__SetCustomerBillingAgreementResponseType(struct soap*, const char*, ns1__SetCustomerBillingAgreementResponseType *, const char*);
SOAP_FMAC1 ns1__SetCustomerBillingAgreementResponseType * SOAP_FMAC2 soap_instantiate_ns1__SetCustomerBillingAgreementResponseType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__SetCustomerBillingAgreementResponseType * soap_new_ns1__SetCustomerBillingAgreementResponseType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__SetCustomerBillingAgreementResponseType(soap, n, NULL, NULL, NULL);
}

inline ns1__SetCustomerBillingAgreementResponseType * soap_new_req_ns1__SetCustomerBillingAgreementResponseType(
	struct soap *soap,
	const std::string& Token,
	enum ns3__AckCodeType Ack__1,
	const std::string& Version__1,
	const std::string& Build__1)
{
	ns1__SetCustomerBillingAgreementResponseType *_p = soap_new_ns1__SetCustomerBillingAgreementResponseType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__SetCustomerBillingAgreementResponseType::Token = Token;
		_p->ns3__AbstractResponseType::Ack = Ack__1;
		_p->ns3__AbstractResponseType::Version = Version__1;
		_p->ns3__AbstractResponseType::Build = Build__1;
	}
	return _p;
}

inline ns1__SetCustomerBillingAgreementResponseType * soap_new_set_ns1__SetCustomerBillingAgreementResponseType(
	struct soap *soap,
	const std::string& Token,
	time_t *Timestamp__1,
	enum ns3__AckCodeType Ack__1,
	std::string *CorrelationID__1,
	const std::vector<ns3__ErrorType *> & Errors__1,
	const std::string& Version__1,
	const std::string& Build__1,
	char *__any__1)
{
	ns1__SetCustomerBillingAgreementResponseType *_p = soap_new_ns1__SetCustomerBillingAgreementResponseType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__SetCustomerBillingAgreementResponseType::Token = Token;
		_p->ns3__AbstractResponseType::Timestamp = Timestamp__1;
		_p->ns3__AbstractResponseType::Ack = Ack__1;
		_p->ns3__AbstractResponseType::CorrelationID = CorrelationID__1;
		_p->ns3__AbstractResponseType::Errors = Errors__1;
		_p->ns3__AbstractResponseType::Version = Version__1;
		_p->ns3__AbstractResponseType::Build = Build__1;
		_p->ns3__AbstractResponseType::__any = __any__1;
	}
	return _p;
}

inline int soap_write_ns1__SetCustomerBillingAgreementResponseType(struct soap *soap, ns1__SetCustomerBillingAgreementResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SetCustomerBillingAgreementResponseType", p->soap_type() == SOAP_TYPE_ns1__SetCustomerBillingAgreementResponseType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__SetCustomerBillingAgreementResponseType(struct soap *soap, const char *URL, ns1__SetCustomerBillingAgreementResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SetCustomerBillingAgreementResponseType", p->soap_type() == SOAP_TYPE_ns1__SetCustomerBillingAgreementResponseType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__SetCustomerBillingAgreementResponseType(struct soap *soap, const char *URL, ns1__SetCustomerBillingAgreementResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SetCustomerBillingAgreementResponseType", p->soap_type() == SOAP_TYPE_ns1__SetCustomerBillingAgreementResponseType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__SetCustomerBillingAgreementResponseType * SOAP_FMAC4 soap_get_ns1__SetCustomerBillingAgreementResponseType(struct soap*, ns1__SetCustomerBillingAgreementResponseType *, const char*, const char*);

inline int soap_read_ns1__SetCustomerBillingAgreementResponseType(struct soap *soap, ns1__SetCustomerBillingAgreementResponseType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__SetCustomerBillingAgreementResponseType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__SetCustomerBillingAgreementResponseType(struct soap *soap, const char *URL, ns1__SetCustomerBillingAgreementResponseType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__SetCustomerBillingAgreementResponseType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__SetCustomerBillingAgreementResponseType(struct soap *soap, ns1__SetCustomerBillingAgreementResponseType *p)
{
	if (soap_read_ns1__SetCustomerBillingAgreementResponseType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__SetCustomerBillingAgreementRequestType_DEFINED
#define SOAP_TYPE_ns1__SetCustomerBillingAgreementRequestType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__SetCustomerBillingAgreementRequestType(struct soap*, const char*, int, const ns1__SetCustomerBillingAgreementRequestType *, const char*);
SOAP_FMAC3 ns1__SetCustomerBillingAgreementRequestType * SOAP_FMAC4 soap_in_ns1__SetCustomerBillingAgreementRequestType(struct soap*, const char*, ns1__SetCustomerBillingAgreementRequestType *, const char*);
SOAP_FMAC1 ns1__SetCustomerBillingAgreementRequestType * SOAP_FMAC2 soap_instantiate_ns1__SetCustomerBillingAgreementRequestType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__SetCustomerBillingAgreementRequestType * soap_new_ns1__SetCustomerBillingAgreementRequestType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__SetCustomerBillingAgreementRequestType(soap, n, NULL, NULL, NULL);
}

inline ns1__SetCustomerBillingAgreementRequestType * soap_new_req_ns1__SetCustomerBillingAgreementRequestType(
	struct soap *soap,
	ns3__SetCustomerBillingAgreementRequestDetailsType *ns3__SetCustomerBillingAgreementRequestDetails,
	const std::string& Version__1)
{
	ns1__SetCustomerBillingAgreementRequestType *_p = soap_new_ns1__SetCustomerBillingAgreementRequestType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__SetCustomerBillingAgreementRequestType::ns3__SetCustomerBillingAgreementRequestDetails = ns3__SetCustomerBillingAgreementRequestDetails;
		_p->ns3__AbstractRequestType::Version = Version__1;
	}
	return _p;
}

inline ns1__SetCustomerBillingAgreementRequestType * soap_new_set_ns1__SetCustomerBillingAgreementRequestType(
	struct soap *soap,
	ns3__SetCustomerBillingAgreementRequestDetailsType *ns3__SetCustomerBillingAgreementRequestDetails,
	const std::vector<enum ns3__DetailLevelCodeType> & DetailLevel__1,
	std::string *ErrorLanguage__1,
	const std::string& Version__1,
	char *__any__1)
{
	ns1__SetCustomerBillingAgreementRequestType *_p = soap_new_ns1__SetCustomerBillingAgreementRequestType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__SetCustomerBillingAgreementRequestType::ns3__SetCustomerBillingAgreementRequestDetails = ns3__SetCustomerBillingAgreementRequestDetails;
		_p->ns3__AbstractRequestType::DetailLevel = DetailLevel__1;
		_p->ns3__AbstractRequestType::ErrorLanguage = ErrorLanguage__1;
		_p->ns3__AbstractRequestType::Version = Version__1;
		_p->ns3__AbstractRequestType::__any = __any__1;
	}
	return _p;
}

inline int soap_write_ns1__SetCustomerBillingAgreementRequestType(struct soap *soap, ns1__SetCustomerBillingAgreementRequestType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SetCustomerBillingAgreementRequestType", p->soap_type() == SOAP_TYPE_ns1__SetCustomerBillingAgreementRequestType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__SetCustomerBillingAgreementRequestType(struct soap *soap, const char *URL, ns1__SetCustomerBillingAgreementRequestType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SetCustomerBillingAgreementRequestType", p->soap_type() == SOAP_TYPE_ns1__SetCustomerBillingAgreementRequestType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__SetCustomerBillingAgreementRequestType(struct soap *soap, const char *URL, ns1__SetCustomerBillingAgreementRequestType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SetCustomerBillingAgreementRequestType", p->soap_type() == SOAP_TYPE_ns1__SetCustomerBillingAgreementRequestType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__SetCustomerBillingAgreementRequestType * SOAP_FMAC4 soap_get_ns1__SetCustomerBillingAgreementRequestType(struct soap*, ns1__SetCustomerBillingAgreementRequestType *, const char*, const char*);

inline int soap_read_ns1__SetCustomerBillingAgreementRequestType(struct soap *soap, ns1__SetCustomerBillingAgreementRequestType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__SetCustomerBillingAgreementRequestType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__SetCustomerBillingAgreementRequestType(struct soap *soap, const char *URL, ns1__SetCustomerBillingAgreementRequestType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__SetCustomerBillingAgreementRequestType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__SetCustomerBillingAgreementRequestType(struct soap *soap, ns1__SetCustomerBillingAgreementRequestType *p)
{
	if (soap_read_ns1__SetCustomerBillingAgreementRequestType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__GetBalanceResponseType_DEFINED
#define SOAP_TYPE_ns1__GetBalanceResponseType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__GetBalanceResponseType(struct soap*, const char*, int, const ns1__GetBalanceResponseType *, const char*);
SOAP_FMAC3 ns1__GetBalanceResponseType * SOAP_FMAC4 soap_in_ns1__GetBalanceResponseType(struct soap*, const char*, ns1__GetBalanceResponseType *, const char*);
SOAP_FMAC1 ns1__GetBalanceResponseType * SOAP_FMAC2 soap_instantiate_ns1__GetBalanceResponseType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__GetBalanceResponseType * soap_new_ns1__GetBalanceResponseType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__GetBalanceResponseType(soap, n, NULL, NULL, NULL);
}

inline ns1__GetBalanceResponseType * soap_new_req_ns1__GetBalanceResponseType(
	struct soap *soap,
	ns2__BasicAmountType *Balance,
	time_t BalanceTimeStamp,
	enum ns3__AckCodeType Ack__1,
	const std::string& Version__1,
	const std::string& Build__1)
{
	ns1__GetBalanceResponseType *_p = soap_new_ns1__GetBalanceResponseType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__GetBalanceResponseType::Balance = Balance;
		_p->ns1__GetBalanceResponseType::BalanceTimeStamp = BalanceTimeStamp;
		_p->ns3__AbstractResponseType::Ack = Ack__1;
		_p->ns3__AbstractResponseType::Version = Version__1;
		_p->ns3__AbstractResponseType::Build = Build__1;
	}
	return _p;
}

inline ns1__GetBalanceResponseType * soap_new_set_ns1__GetBalanceResponseType(
	struct soap *soap,
	ns2__BasicAmountType *Balance,
	time_t BalanceTimeStamp,
	const std::vector<ns2__BasicAmountType *> & BalanceHoldings,
	time_t *Timestamp__1,
	enum ns3__AckCodeType Ack__1,
	std::string *CorrelationID__1,
	const std::vector<ns3__ErrorType *> & Errors__1,
	const std::string& Version__1,
	const std::string& Build__1,
	char *__any__1)
{
	ns1__GetBalanceResponseType *_p = soap_new_ns1__GetBalanceResponseType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__GetBalanceResponseType::Balance = Balance;
		_p->ns1__GetBalanceResponseType::BalanceTimeStamp = BalanceTimeStamp;
		_p->ns1__GetBalanceResponseType::BalanceHoldings = BalanceHoldings;
		_p->ns3__AbstractResponseType::Timestamp = Timestamp__1;
		_p->ns3__AbstractResponseType::Ack = Ack__1;
		_p->ns3__AbstractResponseType::CorrelationID = CorrelationID__1;
		_p->ns3__AbstractResponseType::Errors = Errors__1;
		_p->ns3__AbstractResponseType::Version = Version__1;
		_p->ns3__AbstractResponseType::Build = Build__1;
		_p->ns3__AbstractResponseType::__any = __any__1;
	}
	return _p;
}

inline int soap_write_ns1__GetBalanceResponseType(struct soap *soap, ns1__GetBalanceResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetBalanceResponseType", p->soap_type() == SOAP_TYPE_ns1__GetBalanceResponseType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__GetBalanceResponseType(struct soap *soap, const char *URL, ns1__GetBalanceResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetBalanceResponseType", p->soap_type() == SOAP_TYPE_ns1__GetBalanceResponseType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__GetBalanceResponseType(struct soap *soap, const char *URL, ns1__GetBalanceResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetBalanceResponseType", p->soap_type() == SOAP_TYPE_ns1__GetBalanceResponseType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__GetBalanceResponseType * SOAP_FMAC4 soap_get_ns1__GetBalanceResponseType(struct soap*, ns1__GetBalanceResponseType *, const char*, const char*);

inline int soap_read_ns1__GetBalanceResponseType(struct soap *soap, ns1__GetBalanceResponseType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__GetBalanceResponseType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__GetBalanceResponseType(struct soap *soap, const char *URL, ns1__GetBalanceResponseType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__GetBalanceResponseType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__GetBalanceResponseType(struct soap *soap, ns1__GetBalanceResponseType *p)
{
	if (soap_read_ns1__GetBalanceResponseType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__GetBalanceRequestType_DEFINED
#define SOAP_TYPE_ns1__GetBalanceRequestType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__GetBalanceRequestType(struct soap*, const char*, int, const ns1__GetBalanceRequestType *, const char*);
SOAP_FMAC3 ns1__GetBalanceRequestType * SOAP_FMAC4 soap_in_ns1__GetBalanceRequestType(struct soap*, const char*, ns1__GetBalanceRequestType *, const char*);
SOAP_FMAC1 ns1__GetBalanceRequestType * SOAP_FMAC2 soap_instantiate_ns1__GetBalanceRequestType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__GetBalanceRequestType * soap_new_ns1__GetBalanceRequestType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__GetBalanceRequestType(soap, n, NULL, NULL, NULL);
}

inline ns1__GetBalanceRequestType * soap_new_req_ns1__GetBalanceRequestType(
	struct soap *soap,
	const std::string& Version__1)
{
	ns1__GetBalanceRequestType *_p = soap_new_ns1__GetBalanceRequestType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__AbstractRequestType::Version = Version__1;
	}
	return _p;
}

inline ns1__GetBalanceRequestType * soap_new_set_ns1__GetBalanceRequestType(
	struct soap *soap,
	std::string *ReturnAllCurrencies,
	const std::vector<enum ns3__DetailLevelCodeType> & DetailLevel__1,
	std::string *ErrorLanguage__1,
	const std::string& Version__1,
	char *__any__1)
{
	ns1__GetBalanceRequestType *_p = soap_new_ns1__GetBalanceRequestType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__GetBalanceRequestType::ReturnAllCurrencies = ReturnAllCurrencies;
		_p->ns3__AbstractRequestType::DetailLevel = DetailLevel__1;
		_p->ns3__AbstractRequestType::ErrorLanguage = ErrorLanguage__1;
		_p->ns3__AbstractRequestType::Version = Version__1;
		_p->ns3__AbstractRequestType::__any = __any__1;
	}
	return _p;
}

inline int soap_write_ns1__GetBalanceRequestType(struct soap *soap, ns1__GetBalanceRequestType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetBalanceRequestType", p->soap_type() == SOAP_TYPE_ns1__GetBalanceRequestType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__GetBalanceRequestType(struct soap *soap, const char *URL, ns1__GetBalanceRequestType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetBalanceRequestType", p->soap_type() == SOAP_TYPE_ns1__GetBalanceRequestType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__GetBalanceRequestType(struct soap *soap, const char *URL, ns1__GetBalanceRequestType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetBalanceRequestType", p->soap_type() == SOAP_TYPE_ns1__GetBalanceRequestType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__GetBalanceRequestType * SOAP_FMAC4 soap_get_ns1__GetBalanceRequestType(struct soap*, ns1__GetBalanceRequestType *, const char*, const char*);

inline int soap_read_ns1__GetBalanceRequestType(struct soap *soap, ns1__GetBalanceRequestType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__GetBalanceRequestType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__GetBalanceRequestType(struct soap *soap, const char *URL, ns1__GetBalanceRequestType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__GetBalanceRequestType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__GetBalanceRequestType(struct soap *soap, ns1__GetBalanceRequestType *p)
{
	if (soap_read_ns1__GetBalanceRequestType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__DoMobileCheckoutPaymentResponseType_DEFINED
#define SOAP_TYPE_ns1__DoMobileCheckoutPaymentResponseType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__DoMobileCheckoutPaymentResponseType(struct soap*, const char*, int, const ns1__DoMobileCheckoutPaymentResponseType *, const char*);
SOAP_FMAC3 ns1__DoMobileCheckoutPaymentResponseType * SOAP_FMAC4 soap_in_ns1__DoMobileCheckoutPaymentResponseType(struct soap*, const char*, ns1__DoMobileCheckoutPaymentResponseType *, const char*);
SOAP_FMAC1 ns1__DoMobileCheckoutPaymentResponseType * SOAP_FMAC2 soap_instantiate_ns1__DoMobileCheckoutPaymentResponseType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__DoMobileCheckoutPaymentResponseType * soap_new_ns1__DoMobileCheckoutPaymentResponseType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__DoMobileCheckoutPaymentResponseType(soap, n, NULL, NULL, NULL);
}

inline ns1__DoMobileCheckoutPaymentResponseType * soap_new_req_ns1__DoMobileCheckoutPaymentResponseType(
	struct soap *soap,
	ns3__DoMobileCheckoutPaymentResponseDetailsType *ns3__DoMobileCheckoutPaymentResponseDetails,
	enum ns3__AckCodeType Ack__1,
	const std::string& Version__1,
	const std::string& Build__1)
{
	ns1__DoMobileCheckoutPaymentResponseType *_p = soap_new_ns1__DoMobileCheckoutPaymentResponseType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__DoMobileCheckoutPaymentResponseType::ns3__DoMobileCheckoutPaymentResponseDetails = ns3__DoMobileCheckoutPaymentResponseDetails;
		_p->ns3__AbstractResponseType::Ack = Ack__1;
		_p->ns3__AbstractResponseType::Version = Version__1;
		_p->ns3__AbstractResponseType::Build = Build__1;
	}
	return _p;
}

inline ns1__DoMobileCheckoutPaymentResponseType * soap_new_set_ns1__DoMobileCheckoutPaymentResponseType(
	struct soap *soap,
	ns3__DoMobileCheckoutPaymentResponseDetailsType *ns3__DoMobileCheckoutPaymentResponseDetails,
	time_t *Timestamp__1,
	enum ns3__AckCodeType Ack__1,
	std::string *CorrelationID__1,
	const std::vector<ns3__ErrorType *> & Errors__1,
	const std::string& Version__1,
	const std::string& Build__1,
	char *__any__1)
{
	ns1__DoMobileCheckoutPaymentResponseType *_p = soap_new_ns1__DoMobileCheckoutPaymentResponseType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__DoMobileCheckoutPaymentResponseType::ns3__DoMobileCheckoutPaymentResponseDetails = ns3__DoMobileCheckoutPaymentResponseDetails;
		_p->ns3__AbstractResponseType::Timestamp = Timestamp__1;
		_p->ns3__AbstractResponseType::Ack = Ack__1;
		_p->ns3__AbstractResponseType::CorrelationID = CorrelationID__1;
		_p->ns3__AbstractResponseType::Errors = Errors__1;
		_p->ns3__AbstractResponseType::Version = Version__1;
		_p->ns3__AbstractResponseType::Build = Build__1;
		_p->ns3__AbstractResponseType::__any = __any__1;
	}
	return _p;
}

inline int soap_write_ns1__DoMobileCheckoutPaymentResponseType(struct soap *soap, ns1__DoMobileCheckoutPaymentResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:DoMobileCheckoutPaymentResponseType", p->soap_type() == SOAP_TYPE_ns1__DoMobileCheckoutPaymentResponseType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__DoMobileCheckoutPaymentResponseType(struct soap *soap, const char *URL, ns1__DoMobileCheckoutPaymentResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:DoMobileCheckoutPaymentResponseType", p->soap_type() == SOAP_TYPE_ns1__DoMobileCheckoutPaymentResponseType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__DoMobileCheckoutPaymentResponseType(struct soap *soap, const char *URL, ns1__DoMobileCheckoutPaymentResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:DoMobileCheckoutPaymentResponseType", p->soap_type() == SOAP_TYPE_ns1__DoMobileCheckoutPaymentResponseType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__DoMobileCheckoutPaymentResponseType * SOAP_FMAC4 soap_get_ns1__DoMobileCheckoutPaymentResponseType(struct soap*, ns1__DoMobileCheckoutPaymentResponseType *, const char*, const char*);

inline int soap_read_ns1__DoMobileCheckoutPaymentResponseType(struct soap *soap, ns1__DoMobileCheckoutPaymentResponseType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__DoMobileCheckoutPaymentResponseType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__DoMobileCheckoutPaymentResponseType(struct soap *soap, const char *URL, ns1__DoMobileCheckoutPaymentResponseType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__DoMobileCheckoutPaymentResponseType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__DoMobileCheckoutPaymentResponseType(struct soap *soap, ns1__DoMobileCheckoutPaymentResponseType *p)
{
	if (soap_read_ns1__DoMobileCheckoutPaymentResponseType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__DoMobileCheckoutPaymentRequestType_DEFINED
#define SOAP_TYPE_ns1__DoMobileCheckoutPaymentRequestType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__DoMobileCheckoutPaymentRequestType(struct soap*, const char*, int, const ns1__DoMobileCheckoutPaymentRequestType *, const char*);
SOAP_FMAC3 ns1__DoMobileCheckoutPaymentRequestType * SOAP_FMAC4 soap_in_ns1__DoMobileCheckoutPaymentRequestType(struct soap*, const char*, ns1__DoMobileCheckoutPaymentRequestType *, const char*);
SOAP_FMAC1 ns1__DoMobileCheckoutPaymentRequestType * SOAP_FMAC2 soap_instantiate_ns1__DoMobileCheckoutPaymentRequestType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__DoMobileCheckoutPaymentRequestType * soap_new_ns1__DoMobileCheckoutPaymentRequestType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__DoMobileCheckoutPaymentRequestType(soap, n, NULL, NULL, NULL);
}

inline ns1__DoMobileCheckoutPaymentRequestType * soap_new_req_ns1__DoMobileCheckoutPaymentRequestType(
	struct soap *soap,
	const std::string& Token,
	const std::string& Version__1)
{
	ns1__DoMobileCheckoutPaymentRequestType *_p = soap_new_ns1__DoMobileCheckoutPaymentRequestType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__DoMobileCheckoutPaymentRequestType::Token = Token;
		_p->ns3__AbstractRequestType::Version = Version__1;
	}
	return _p;
}

inline ns1__DoMobileCheckoutPaymentRequestType * soap_new_set_ns1__DoMobileCheckoutPaymentRequestType(
	struct soap *soap,
	const std::string& Token,
	const std::vector<enum ns3__DetailLevelCodeType> & DetailLevel__1,
	std::string *ErrorLanguage__1,
	const std::string& Version__1,
	char *__any__1)
{
	ns1__DoMobileCheckoutPaymentRequestType *_p = soap_new_ns1__DoMobileCheckoutPaymentRequestType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__DoMobileCheckoutPaymentRequestType::Token = Token;
		_p->ns3__AbstractRequestType::DetailLevel = DetailLevel__1;
		_p->ns3__AbstractRequestType::ErrorLanguage = ErrorLanguage__1;
		_p->ns3__AbstractRequestType::Version = Version__1;
		_p->ns3__AbstractRequestType::__any = __any__1;
	}
	return _p;
}

inline int soap_write_ns1__DoMobileCheckoutPaymentRequestType(struct soap *soap, ns1__DoMobileCheckoutPaymentRequestType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:DoMobileCheckoutPaymentRequestType", p->soap_type() == SOAP_TYPE_ns1__DoMobileCheckoutPaymentRequestType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__DoMobileCheckoutPaymentRequestType(struct soap *soap, const char *URL, ns1__DoMobileCheckoutPaymentRequestType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:DoMobileCheckoutPaymentRequestType", p->soap_type() == SOAP_TYPE_ns1__DoMobileCheckoutPaymentRequestType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__DoMobileCheckoutPaymentRequestType(struct soap *soap, const char *URL, ns1__DoMobileCheckoutPaymentRequestType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:DoMobileCheckoutPaymentRequestType", p->soap_type() == SOAP_TYPE_ns1__DoMobileCheckoutPaymentRequestType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__DoMobileCheckoutPaymentRequestType * SOAP_FMAC4 soap_get_ns1__DoMobileCheckoutPaymentRequestType(struct soap*, ns1__DoMobileCheckoutPaymentRequestType *, const char*, const char*);

inline int soap_read_ns1__DoMobileCheckoutPaymentRequestType(struct soap *soap, ns1__DoMobileCheckoutPaymentRequestType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__DoMobileCheckoutPaymentRequestType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__DoMobileCheckoutPaymentRequestType(struct soap *soap, const char *URL, ns1__DoMobileCheckoutPaymentRequestType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__DoMobileCheckoutPaymentRequestType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__DoMobileCheckoutPaymentRequestType(struct soap *soap, ns1__DoMobileCheckoutPaymentRequestType *p)
{
	if (soap_read_ns1__DoMobileCheckoutPaymentRequestType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__SetMobileCheckoutResponseType_DEFINED
#define SOAP_TYPE_ns1__SetMobileCheckoutResponseType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__SetMobileCheckoutResponseType(struct soap*, const char*, int, const ns1__SetMobileCheckoutResponseType *, const char*);
SOAP_FMAC3 ns1__SetMobileCheckoutResponseType * SOAP_FMAC4 soap_in_ns1__SetMobileCheckoutResponseType(struct soap*, const char*, ns1__SetMobileCheckoutResponseType *, const char*);
SOAP_FMAC1 ns1__SetMobileCheckoutResponseType * SOAP_FMAC2 soap_instantiate_ns1__SetMobileCheckoutResponseType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__SetMobileCheckoutResponseType * soap_new_ns1__SetMobileCheckoutResponseType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__SetMobileCheckoutResponseType(soap, n, NULL, NULL, NULL);
}

inline ns1__SetMobileCheckoutResponseType * soap_new_req_ns1__SetMobileCheckoutResponseType(
	struct soap *soap,
	const std::string& Token,
	enum ns3__AckCodeType Ack__1,
	const std::string& Version__1,
	const std::string& Build__1)
{
	ns1__SetMobileCheckoutResponseType *_p = soap_new_ns1__SetMobileCheckoutResponseType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__SetMobileCheckoutResponseType::Token = Token;
		_p->ns3__AbstractResponseType::Ack = Ack__1;
		_p->ns3__AbstractResponseType::Version = Version__1;
		_p->ns3__AbstractResponseType::Build = Build__1;
	}
	return _p;
}

inline ns1__SetMobileCheckoutResponseType * soap_new_set_ns1__SetMobileCheckoutResponseType(
	struct soap *soap,
	const std::string& Token,
	time_t *Timestamp__1,
	enum ns3__AckCodeType Ack__1,
	std::string *CorrelationID__1,
	const std::vector<ns3__ErrorType *> & Errors__1,
	const std::string& Version__1,
	const std::string& Build__1,
	char *__any__1)
{
	ns1__SetMobileCheckoutResponseType *_p = soap_new_ns1__SetMobileCheckoutResponseType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__SetMobileCheckoutResponseType::Token = Token;
		_p->ns3__AbstractResponseType::Timestamp = Timestamp__1;
		_p->ns3__AbstractResponseType::Ack = Ack__1;
		_p->ns3__AbstractResponseType::CorrelationID = CorrelationID__1;
		_p->ns3__AbstractResponseType::Errors = Errors__1;
		_p->ns3__AbstractResponseType::Version = Version__1;
		_p->ns3__AbstractResponseType::Build = Build__1;
		_p->ns3__AbstractResponseType::__any = __any__1;
	}
	return _p;
}

inline int soap_write_ns1__SetMobileCheckoutResponseType(struct soap *soap, ns1__SetMobileCheckoutResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SetMobileCheckoutResponseType", p->soap_type() == SOAP_TYPE_ns1__SetMobileCheckoutResponseType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__SetMobileCheckoutResponseType(struct soap *soap, const char *URL, ns1__SetMobileCheckoutResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SetMobileCheckoutResponseType", p->soap_type() == SOAP_TYPE_ns1__SetMobileCheckoutResponseType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__SetMobileCheckoutResponseType(struct soap *soap, const char *URL, ns1__SetMobileCheckoutResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SetMobileCheckoutResponseType", p->soap_type() == SOAP_TYPE_ns1__SetMobileCheckoutResponseType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__SetMobileCheckoutResponseType * SOAP_FMAC4 soap_get_ns1__SetMobileCheckoutResponseType(struct soap*, ns1__SetMobileCheckoutResponseType *, const char*, const char*);

inline int soap_read_ns1__SetMobileCheckoutResponseType(struct soap *soap, ns1__SetMobileCheckoutResponseType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__SetMobileCheckoutResponseType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__SetMobileCheckoutResponseType(struct soap *soap, const char *URL, ns1__SetMobileCheckoutResponseType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__SetMobileCheckoutResponseType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__SetMobileCheckoutResponseType(struct soap *soap, ns1__SetMobileCheckoutResponseType *p)
{
	if (soap_read_ns1__SetMobileCheckoutResponseType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__SetMobileCheckoutRequestType_DEFINED
#define SOAP_TYPE_ns1__SetMobileCheckoutRequestType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__SetMobileCheckoutRequestType(struct soap*, const char*, int, const ns1__SetMobileCheckoutRequestType *, const char*);
SOAP_FMAC3 ns1__SetMobileCheckoutRequestType * SOAP_FMAC4 soap_in_ns1__SetMobileCheckoutRequestType(struct soap*, const char*, ns1__SetMobileCheckoutRequestType *, const char*);
SOAP_FMAC1 ns1__SetMobileCheckoutRequestType * SOAP_FMAC2 soap_instantiate_ns1__SetMobileCheckoutRequestType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__SetMobileCheckoutRequestType * soap_new_ns1__SetMobileCheckoutRequestType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__SetMobileCheckoutRequestType(soap, n, NULL, NULL, NULL);
}

inline ns1__SetMobileCheckoutRequestType * soap_new_req_ns1__SetMobileCheckoutRequestType(
	struct soap *soap,
	ns3__SetMobileCheckoutRequestDetailsType *ns3__SetMobileCheckoutRequestDetails,
	const std::string& Version__1)
{
	ns1__SetMobileCheckoutRequestType *_p = soap_new_ns1__SetMobileCheckoutRequestType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__SetMobileCheckoutRequestType::ns3__SetMobileCheckoutRequestDetails = ns3__SetMobileCheckoutRequestDetails;
		_p->ns3__AbstractRequestType::Version = Version__1;
	}
	return _p;
}

inline ns1__SetMobileCheckoutRequestType * soap_new_set_ns1__SetMobileCheckoutRequestType(
	struct soap *soap,
	ns3__SetMobileCheckoutRequestDetailsType *ns3__SetMobileCheckoutRequestDetails,
	const std::vector<enum ns3__DetailLevelCodeType> & DetailLevel__1,
	std::string *ErrorLanguage__1,
	const std::string& Version__1,
	char *__any__1)
{
	ns1__SetMobileCheckoutRequestType *_p = soap_new_ns1__SetMobileCheckoutRequestType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__SetMobileCheckoutRequestType::ns3__SetMobileCheckoutRequestDetails = ns3__SetMobileCheckoutRequestDetails;
		_p->ns3__AbstractRequestType::DetailLevel = DetailLevel__1;
		_p->ns3__AbstractRequestType::ErrorLanguage = ErrorLanguage__1;
		_p->ns3__AbstractRequestType::Version = Version__1;
		_p->ns3__AbstractRequestType::__any = __any__1;
	}
	return _p;
}

inline int soap_write_ns1__SetMobileCheckoutRequestType(struct soap *soap, ns1__SetMobileCheckoutRequestType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SetMobileCheckoutRequestType", p->soap_type() == SOAP_TYPE_ns1__SetMobileCheckoutRequestType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__SetMobileCheckoutRequestType(struct soap *soap, const char *URL, ns1__SetMobileCheckoutRequestType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SetMobileCheckoutRequestType", p->soap_type() == SOAP_TYPE_ns1__SetMobileCheckoutRequestType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__SetMobileCheckoutRequestType(struct soap *soap, const char *URL, ns1__SetMobileCheckoutRequestType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SetMobileCheckoutRequestType", p->soap_type() == SOAP_TYPE_ns1__SetMobileCheckoutRequestType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__SetMobileCheckoutRequestType * SOAP_FMAC4 soap_get_ns1__SetMobileCheckoutRequestType(struct soap*, ns1__SetMobileCheckoutRequestType *, const char*, const char*);

inline int soap_read_ns1__SetMobileCheckoutRequestType(struct soap *soap, ns1__SetMobileCheckoutRequestType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__SetMobileCheckoutRequestType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__SetMobileCheckoutRequestType(struct soap *soap, const char *URL, ns1__SetMobileCheckoutRequestType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__SetMobileCheckoutRequestType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__SetMobileCheckoutRequestType(struct soap *soap, ns1__SetMobileCheckoutRequestType *p)
{
	if (soap_read_ns1__SetMobileCheckoutRequestType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__GetMobileStatusResponseType_DEFINED
#define SOAP_TYPE_ns1__GetMobileStatusResponseType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__GetMobileStatusResponseType(struct soap*, const char*, int, const ns1__GetMobileStatusResponseType *, const char*);
SOAP_FMAC3 ns1__GetMobileStatusResponseType * SOAP_FMAC4 soap_in_ns1__GetMobileStatusResponseType(struct soap*, const char*, ns1__GetMobileStatusResponseType *, const char*);
SOAP_FMAC1 ns1__GetMobileStatusResponseType * SOAP_FMAC2 soap_instantiate_ns1__GetMobileStatusResponseType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__GetMobileStatusResponseType * soap_new_ns1__GetMobileStatusResponseType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__GetMobileStatusResponseType(soap, n, NULL, NULL, NULL);
}

inline ns1__GetMobileStatusResponseType * soap_new_req_ns1__GetMobileStatusResponseType(
	struct soap *soap,
	const std::string& IsActivated,
	const std::string& IsPasswordSet,
	const std::string& PaymentPending,
	enum ns3__AckCodeType Ack__1,
	const std::string& Version__1,
	const std::string& Build__1)
{
	ns1__GetMobileStatusResponseType *_p = soap_new_ns1__GetMobileStatusResponseType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__GetMobileStatusResponseType::IsActivated = IsActivated;
		_p->ns1__GetMobileStatusResponseType::IsPasswordSet = IsPasswordSet;
		_p->ns1__GetMobileStatusResponseType::PaymentPending = PaymentPending;
		_p->ns3__AbstractResponseType::Ack = Ack__1;
		_p->ns3__AbstractResponseType::Version = Version__1;
		_p->ns3__AbstractResponseType::Build = Build__1;
	}
	return _p;
}

inline ns1__GetMobileStatusResponseType * soap_new_set_ns1__GetMobileStatusResponseType(
	struct soap *soap,
	const std::string& IsActivated,
	const std::string& IsPasswordSet,
	const std::string& PaymentPending,
	time_t *Timestamp__1,
	enum ns3__AckCodeType Ack__1,
	std::string *CorrelationID__1,
	const std::vector<ns3__ErrorType *> & Errors__1,
	const std::string& Version__1,
	const std::string& Build__1,
	char *__any__1)
{
	ns1__GetMobileStatusResponseType *_p = soap_new_ns1__GetMobileStatusResponseType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__GetMobileStatusResponseType::IsActivated = IsActivated;
		_p->ns1__GetMobileStatusResponseType::IsPasswordSet = IsPasswordSet;
		_p->ns1__GetMobileStatusResponseType::PaymentPending = PaymentPending;
		_p->ns3__AbstractResponseType::Timestamp = Timestamp__1;
		_p->ns3__AbstractResponseType::Ack = Ack__1;
		_p->ns3__AbstractResponseType::CorrelationID = CorrelationID__1;
		_p->ns3__AbstractResponseType::Errors = Errors__1;
		_p->ns3__AbstractResponseType::Version = Version__1;
		_p->ns3__AbstractResponseType::Build = Build__1;
		_p->ns3__AbstractResponseType::__any = __any__1;
	}
	return _p;
}

inline int soap_write_ns1__GetMobileStatusResponseType(struct soap *soap, ns1__GetMobileStatusResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetMobileStatusResponseType", p->soap_type() == SOAP_TYPE_ns1__GetMobileStatusResponseType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__GetMobileStatusResponseType(struct soap *soap, const char *URL, ns1__GetMobileStatusResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetMobileStatusResponseType", p->soap_type() == SOAP_TYPE_ns1__GetMobileStatusResponseType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__GetMobileStatusResponseType(struct soap *soap, const char *URL, ns1__GetMobileStatusResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetMobileStatusResponseType", p->soap_type() == SOAP_TYPE_ns1__GetMobileStatusResponseType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__GetMobileStatusResponseType * SOAP_FMAC4 soap_get_ns1__GetMobileStatusResponseType(struct soap*, ns1__GetMobileStatusResponseType *, const char*, const char*);

inline int soap_read_ns1__GetMobileStatusResponseType(struct soap *soap, ns1__GetMobileStatusResponseType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__GetMobileStatusResponseType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__GetMobileStatusResponseType(struct soap *soap, const char *URL, ns1__GetMobileStatusResponseType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__GetMobileStatusResponseType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__GetMobileStatusResponseType(struct soap *soap, ns1__GetMobileStatusResponseType *p)
{
	if (soap_read_ns1__GetMobileStatusResponseType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__GetMobileStatusRequestType_DEFINED
#define SOAP_TYPE_ns1__GetMobileStatusRequestType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__GetMobileStatusRequestType(struct soap*, const char*, int, const ns1__GetMobileStatusRequestType *, const char*);
SOAP_FMAC3 ns1__GetMobileStatusRequestType * SOAP_FMAC4 soap_in_ns1__GetMobileStatusRequestType(struct soap*, const char*, ns1__GetMobileStatusRequestType *, const char*);
SOAP_FMAC1 ns1__GetMobileStatusRequestType * SOAP_FMAC2 soap_instantiate_ns1__GetMobileStatusRequestType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__GetMobileStatusRequestType * soap_new_ns1__GetMobileStatusRequestType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__GetMobileStatusRequestType(soap, n, NULL, NULL, NULL);
}

inline ns1__GetMobileStatusRequestType * soap_new_req_ns1__GetMobileStatusRequestType(
	struct soap *soap,
	ns3__GetMobileStatusRequestDetailsType *ns3__GetMobileStatusRequestDetails,
	const std::string& Version__1)
{
	ns1__GetMobileStatusRequestType *_p = soap_new_ns1__GetMobileStatusRequestType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__GetMobileStatusRequestType::ns3__GetMobileStatusRequestDetails = ns3__GetMobileStatusRequestDetails;
		_p->ns3__AbstractRequestType::Version = Version__1;
	}
	return _p;
}

inline ns1__GetMobileStatusRequestType * soap_new_set_ns1__GetMobileStatusRequestType(
	struct soap *soap,
	ns3__GetMobileStatusRequestDetailsType *ns3__GetMobileStatusRequestDetails,
	const std::vector<enum ns3__DetailLevelCodeType> & DetailLevel__1,
	std::string *ErrorLanguage__1,
	const std::string& Version__1,
	char *__any__1)
{
	ns1__GetMobileStatusRequestType *_p = soap_new_ns1__GetMobileStatusRequestType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__GetMobileStatusRequestType::ns3__GetMobileStatusRequestDetails = ns3__GetMobileStatusRequestDetails;
		_p->ns3__AbstractRequestType::DetailLevel = DetailLevel__1;
		_p->ns3__AbstractRequestType::ErrorLanguage = ErrorLanguage__1;
		_p->ns3__AbstractRequestType::Version = Version__1;
		_p->ns3__AbstractRequestType::__any = __any__1;
	}
	return _p;
}

inline int soap_write_ns1__GetMobileStatusRequestType(struct soap *soap, ns1__GetMobileStatusRequestType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetMobileStatusRequestType", p->soap_type() == SOAP_TYPE_ns1__GetMobileStatusRequestType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__GetMobileStatusRequestType(struct soap *soap, const char *URL, ns1__GetMobileStatusRequestType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetMobileStatusRequestType", p->soap_type() == SOAP_TYPE_ns1__GetMobileStatusRequestType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__GetMobileStatusRequestType(struct soap *soap, const char *URL, ns1__GetMobileStatusRequestType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetMobileStatusRequestType", p->soap_type() == SOAP_TYPE_ns1__GetMobileStatusRequestType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__GetMobileStatusRequestType * SOAP_FMAC4 soap_get_ns1__GetMobileStatusRequestType(struct soap*, ns1__GetMobileStatusRequestType *, const char*, const char*);

inline int soap_read_ns1__GetMobileStatusRequestType(struct soap *soap, ns1__GetMobileStatusRequestType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__GetMobileStatusRequestType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__GetMobileStatusRequestType(struct soap *soap, const char *URL, ns1__GetMobileStatusRequestType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__GetMobileStatusRequestType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__GetMobileStatusRequestType(struct soap *soap, ns1__GetMobileStatusRequestType *p)
{
	if (soap_read_ns1__GetMobileStatusRequestType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__CreateMobilePaymentResponseType_DEFINED
#define SOAP_TYPE_ns1__CreateMobilePaymentResponseType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__CreateMobilePaymentResponseType(struct soap*, const char*, int, const ns1__CreateMobilePaymentResponseType *, const char*);
SOAP_FMAC3 ns1__CreateMobilePaymentResponseType * SOAP_FMAC4 soap_in_ns1__CreateMobilePaymentResponseType(struct soap*, const char*, ns1__CreateMobilePaymentResponseType *, const char*);
SOAP_FMAC1 ns1__CreateMobilePaymentResponseType * SOAP_FMAC2 soap_instantiate_ns1__CreateMobilePaymentResponseType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__CreateMobilePaymentResponseType * soap_new_ns1__CreateMobilePaymentResponseType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__CreateMobilePaymentResponseType(soap, n, NULL, NULL, NULL);
}

inline ns1__CreateMobilePaymentResponseType * soap_new_req_ns1__CreateMobilePaymentResponseType(
	struct soap *soap,
	enum ns3__AckCodeType Ack__1,
	const std::string& Version__1,
	const std::string& Build__1)
{
	ns1__CreateMobilePaymentResponseType *_p = soap_new_ns1__CreateMobilePaymentResponseType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__AbstractResponseType::Ack = Ack__1;
		_p->ns3__AbstractResponseType::Version = Version__1;
		_p->ns3__AbstractResponseType::Build = Build__1;
	}
	return _p;
}

inline ns1__CreateMobilePaymentResponseType * soap_new_set_ns1__CreateMobilePaymentResponseType(
	struct soap *soap,
	time_t *Timestamp__1,
	enum ns3__AckCodeType Ack__1,
	std::string *CorrelationID__1,
	const std::vector<ns3__ErrorType *> & Errors__1,
	const std::string& Version__1,
	const std::string& Build__1,
	char *__any__1)
{
	ns1__CreateMobilePaymentResponseType *_p = soap_new_ns1__CreateMobilePaymentResponseType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__AbstractResponseType::Timestamp = Timestamp__1;
		_p->ns3__AbstractResponseType::Ack = Ack__1;
		_p->ns3__AbstractResponseType::CorrelationID = CorrelationID__1;
		_p->ns3__AbstractResponseType::Errors = Errors__1;
		_p->ns3__AbstractResponseType::Version = Version__1;
		_p->ns3__AbstractResponseType::Build = Build__1;
		_p->ns3__AbstractResponseType::__any = __any__1;
	}
	return _p;
}

inline int soap_write_ns1__CreateMobilePaymentResponseType(struct soap *soap, ns1__CreateMobilePaymentResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CreateMobilePaymentResponseType", p->soap_type() == SOAP_TYPE_ns1__CreateMobilePaymentResponseType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__CreateMobilePaymentResponseType(struct soap *soap, const char *URL, ns1__CreateMobilePaymentResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CreateMobilePaymentResponseType", p->soap_type() == SOAP_TYPE_ns1__CreateMobilePaymentResponseType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__CreateMobilePaymentResponseType(struct soap *soap, const char *URL, ns1__CreateMobilePaymentResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CreateMobilePaymentResponseType", p->soap_type() == SOAP_TYPE_ns1__CreateMobilePaymentResponseType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__CreateMobilePaymentResponseType * SOAP_FMAC4 soap_get_ns1__CreateMobilePaymentResponseType(struct soap*, ns1__CreateMobilePaymentResponseType *, const char*, const char*);

inline int soap_read_ns1__CreateMobilePaymentResponseType(struct soap *soap, ns1__CreateMobilePaymentResponseType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__CreateMobilePaymentResponseType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__CreateMobilePaymentResponseType(struct soap *soap, const char *URL, ns1__CreateMobilePaymentResponseType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__CreateMobilePaymentResponseType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__CreateMobilePaymentResponseType(struct soap *soap, ns1__CreateMobilePaymentResponseType *p)
{
	if (soap_read_ns1__CreateMobilePaymentResponseType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__CreateMobilePaymentRequestType_DEFINED
#define SOAP_TYPE_ns1__CreateMobilePaymentRequestType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__CreateMobilePaymentRequestType(struct soap*, const char*, int, const ns1__CreateMobilePaymentRequestType *, const char*);
SOAP_FMAC3 ns1__CreateMobilePaymentRequestType * SOAP_FMAC4 soap_in_ns1__CreateMobilePaymentRequestType(struct soap*, const char*, ns1__CreateMobilePaymentRequestType *, const char*);
SOAP_FMAC1 ns1__CreateMobilePaymentRequestType * SOAP_FMAC2 soap_instantiate_ns1__CreateMobilePaymentRequestType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__CreateMobilePaymentRequestType * soap_new_ns1__CreateMobilePaymentRequestType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__CreateMobilePaymentRequestType(soap, n, NULL, NULL, NULL);
}

inline ns1__CreateMobilePaymentRequestType * soap_new_req_ns1__CreateMobilePaymentRequestType(
	struct soap *soap,
	ns3__CreateMobilePaymentRequestDetailsType *ns3__CreateMobilePaymentRequestDetails,
	const std::string& Version__1)
{
	ns1__CreateMobilePaymentRequestType *_p = soap_new_ns1__CreateMobilePaymentRequestType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__CreateMobilePaymentRequestType::ns3__CreateMobilePaymentRequestDetails = ns3__CreateMobilePaymentRequestDetails;
		_p->ns3__AbstractRequestType::Version = Version__1;
	}
	return _p;
}

inline ns1__CreateMobilePaymentRequestType * soap_new_set_ns1__CreateMobilePaymentRequestType(
	struct soap *soap,
	ns3__CreateMobilePaymentRequestDetailsType *ns3__CreateMobilePaymentRequestDetails,
	const std::vector<enum ns3__DetailLevelCodeType> & DetailLevel__1,
	std::string *ErrorLanguage__1,
	const std::string& Version__1,
	char *__any__1)
{
	ns1__CreateMobilePaymentRequestType *_p = soap_new_ns1__CreateMobilePaymentRequestType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__CreateMobilePaymentRequestType::ns3__CreateMobilePaymentRequestDetails = ns3__CreateMobilePaymentRequestDetails;
		_p->ns3__AbstractRequestType::DetailLevel = DetailLevel__1;
		_p->ns3__AbstractRequestType::ErrorLanguage = ErrorLanguage__1;
		_p->ns3__AbstractRequestType::Version = Version__1;
		_p->ns3__AbstractRequestType::__any = __any__1;
	}
	return _p;
}

inline int soap_write_ns1__CreateMobilePaymentRequestType(struct soap *soap, ns1__CreateMobilePaymentRequestType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CreateMobilePaymentRequestType", p->soap_type() == SOAP_TYPE_ns1__CreateMobilePaymentRequestType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__CreateMobilePaymentRequestType(struct soap *soap, const char *URL, ns1__CreateMobilePaymentRequestType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CreateMobilePaymentRequestType", p->soap_type() == SOAP_TYPE_ns1__CreateMobilePaymentRequestType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__CreateMobilePaymentRequestType(struct soap *soap, const char *URL, ns1__CreateMobilePaymentRequestType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CreateMobilePaymentRequestType", p->soap_type() == SOAP_TYPE_ns1__CreateMobilePaymentRequestType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__CreateMobilePaymentRequestType * SOAP_FMAC4 soap_get_ns1__CreateMobilePaymentRequestType(struct soap*, ns1__CreateMobilePaymentRequestType *, const char*, const char*);

inline int soap_read_ns1__CreateMobilePaymentRequestType(struct soap *soap, ns1__CreateMobilePaymentRequestType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__CreateMobilePaymentRequestType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__CreateMobilePaymentRequestType(struct soap *soap, const char *URL, ns1__CreateMobilePaymentRequestType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__CreateMobilePaymentRequestType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__CreateMobilePaymentRequestType(struct soap *soap, ns1__CreateMobilePaymentRequestType *p)
{
	if (soap_read_ns1__CreateMobilePaymentRequestType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__DoUATPAuthorizationResponseType_DEFINED
#define SOAP_TYPE_ns1__DoUATPAuthorizationResponseType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__DoUATPAuthorizationResponseType(struct soap*, const char*, int, const ns1__DoUATPAuthorizationResponseType *, const char*);
SOAP_FMAC3 ns1__DoUATPAuthorizationResponseType * SOAP_FMAC4 soap_in_ns1__DoUATPAuthorizationResponseType(struct soap*, const char*, ns1__DoUATPAuthorizationResponseType *, const char*);
SOAP_FMAC1 ns1__DoUATPAuthorizationResponseType * SOAP_FMAC2 soap_instantiate_ns1__DoUATPAuthorizationResponseType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__DoUATPAuthorizationResponseType * soap_new_ns1__DoUATPAuthorizationResponseType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__DoUATPAuthorizationResponseType(soap, n, NULL, NULL, NULL);
}

inline ns1__DoUATPAuthorizationResponseType * soap_new_req_ns1__DoUATPAuthorizationResponseType(
	struct soap *soap,
	ns3__UATPDetailsType *ns3__UATPDetails,
	const std::string& AuthorizationCode,
	enum ns3__AckCodeType Ack__2,
	const std::string& Version__2,
	const std::string& Build__2)
{
	ns1__DoUATPAuthorizationResponseType *_p = soap_new_ns1__DoUATPAuthorizationResponseType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__DoUATPAuthorizationResponseType::ns3__UATPDetails = ns3__UATPDetails;
		_p->ns1__DoUATPAuthorizationResponseType::AuthorizationCode = AuthorizationCode;
		_p->ns3__AbstractResponseType::Ack = Ack__2;
		_p->ns3__AbstractResponseType::Version = Version__2;
		_p->ns3__AbstractResponseType::Build = Build__2;
	}
	return _p;
}

inline ns1__DoUATPAuthorizationResponseType * soap_new_set_ns1__DoUATPAuthorizationResponseType(
	struct soap *soap,
	ns3__UATPDetailsType *ns3__UATPDetails,
	const std::string& AuthorizationCode,
	std::string *InvoiceID,
	std::string *MsgSubID,
	std::string *TransactionID__1,
	ns2__BasicAmountType *Amount__1,
	ns3__AuthorizationInfoType *ns3__AuthorizationInfo__1,
	std::string *MsgSubID__1,
	time_t *Timestamp__2,
	enum ns3__AckCodeType Ack__2,
	std::string *CorrelationID__2,
	const std::vector<ns3__ErrorType *> & Errors__2,
	const std::string& Version__2,
	const std::string& Build__2,
	char *__any__2)
{
	ns1__DoUATPAuthorizationResponseType *_p = soap_new_ns1__DoUATPAuthorizationResponseType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__DoUATPAuthorizationResponseType::ns3__UATPDetails = ns3__UATPDetails;
		_p->ns1__DoUATPAuthorizationResponseType::AuthorizationCode = AuthorizationCode;
		_p->ns1__DoUATPAuthorizationResponseType::InvoiceID = InvoiceID;
		_p->ns1__DoUATPAuthorizationResponseType::MsgSubID = MsgSubID;
		_p->ns1__DoAuthorizationResponseType::TransactionID = TransactionID__1;
		_p->ns1__DoAuthorizationResponseType::Amount = Amount__1;
		_p->ns1__DoAuthorizationResponseType::ns3__AuthorizationInfo = ns3__AuthorizationInfo__1;
		_p->ns1__DoAuthorizationResponseType::MsgSubID = MsgSubID__1;
		_p->ns3__AbstractResponseType::Timestamp = Timestamp__2;
		_p->ns3__AbstractResponseType::Ack = Ack__2;
		_p->ns3__AbstractResponseType::CorrelationID = CorrelationID__2;
		_p->ns3__AbstractResponseType::Errors = Errors__2;
		_p->ns3__AbstractResponseType::Version = Version__2;
		_p->ns3__AbstractResponseType::Build = Build__2;
		_p->ns3__AbstractResponseType::__any = __any__2;
	}
	return _p;
}

inline int soap_write_ns1__DoUATPAuthorizationResponseType(struct soap *soap, ns1__DoUATPAuthorizationResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:DoUATPAuthorizationResponseType", p->soap_type() == SOAP_TYPE_ns1__DoUATPAuthorizationResponseType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__DoUATPAuthorizationResponseType(struct soap *soap, const char *URL, ns1__DoUATPAuthorizationResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:DoUATPAuthorizationResponseType", p->soap_type() == SOAP_TYPE_ns1__DoUATPAuthorizationResponseType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__DoUATPAuthorizationResponseType(struct soap *soap, const char *URL, ns1__DoUATPAuthorizationResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:DoUATPAuthorizationResponseType", p->soap_type() == SOAP_TYPE_ns1__DoUATPAuthorizationResponseType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__DoUATPAuthorizationResponseType * SOAP_FMAC4 soap_get_ns1__DoUATPAuthorizationResponseType(struct soap*, ns1__DoUATPAuthorizationResponseType *, const char*, const char*);

inline int soap_read_ns1__DoUATPAuthorizationResponseType(struct soap *soap, ns1__DoUATPAuthorizationResponseType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__DoUATPAuthorizationResponseType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__DoUATPAuthorizationResponseType(struct soap *soap, const char *URL, ns1__DoUATPAuthorizationResponseType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__DoUATPAuthorizationResponseType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__DoUATPAuthorizationResponseType(struct soap *soap, ns1__DoUATPAuthorizationResponseType *p)
{
	if (soap_read_ns1__DoUATPAuthorizationResponseType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__DoUATPAuthorizationRequestType_DEFINED
#define SOAP_TYPE_ns1__DoUATPAuthorizationRequestType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__DoUATPAuthorizationRequestType(struct soap*, const char*, int, const ns1__DoUATPAuthorizationRequestType *, const char*);
SOAP_FMAC3 ns1__DoUATPAuthorizationRequestType * SOAP_FMAC4 soap_in_ns1__DoUATPAuthorizationRequestType(struct soap*, const char*, ns1__DoUATPAuthorizationRequestType *, const char*);
SOAP_FMAC1 ns1__DoUATPAuthorizationRequestType * SOAP_FMAC2 soap_instantiate_ns1__DoUATPAuthorizationRequestType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__DoUATPAuthorizationRequestType * soap_new_ns1__DoUATPAuthorizationRequestType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__DoUATPAuthorizationRequestType(soap, n, NULL, NULL, NULL);
}

inline ns1__DoUATPAuthorizationRequestType * soap_new_req_ns1__DoUATPAuthorizationRequestType(
	struct soap *soap,
	ns3__UATPDetailsType *ns3__UATPDetails,
	ns2__BasicAmountType *Amount,
	const std::string& Version__1)
{
	ns1__DoUATPAuthorizationRequestType *_p = soap_new_ns1__DoUATPAuthorizationRequestType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__DoUATPAuthorizationRequestType::ns3__UATPDetails = ns3__UATPDetails;
		_p->ns1__DoUATPAuthorizationRequestType::Amount = Amount;
		_p->ns3__AbstractRequestType::Version = Version__1;
	}
	return _p;
}

inline ns1__DoUATPAuthorizationRequestType * soap_new_set_ns1__DoUATPAuthorizationRequestType(
	struct soap *soap,
	ns3__UATPDetailsType *ns3__UATPDetails,
	enum ns3__TransactionEntityType *TransactionEntity,
	ns2__BasicAmountType *Amount,
	std::string *InvoiceID,
	std::string *MsgSubID,
	const std::vector<enum ns3__DetailLevelCodeType> & DetailLevel__1,
	std::string *ErrorLanguage__1,
	const std::string& Version__1,
	char *__any__1)
{
	ns1__DoUATPAuthorizationRequestType *_p = soap_new_ns1__DoUATPAuthorizationRequestType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__DoUATPAuthorizationRequestType::ns3__UATPDetails = ns3__UATPDetails;
		_p->ns1__DoUATPAuthorizationRequestType::TransactionEntity = TransactionEntity;
		_p->ns1__DoUATPAuthorizationRequestType::Amount = Amount;
		_p->ns1__DoUATPAuthorizationRequestType::InvoiceID = InvoiceID;
		_p->ns1__DoUATPAuthorizationRequestType::MsgSubID = MsgSubID;
		_p->ns3__AbstractRequestType::DetailLevel = DetailLevel__1;
		_p->ns3__AbstractRequestType::ErrorLanguage = ErrorLanguage__1;
		_p->ns3__AbstractRequestType::Version = Version__1;
		_p->ns3__AbstractRequestType::__any = __any__1;
	}
	return _p;
}

inline int soap_write_ns1__DoUATPAuthorizationRequestType(struct soap *soap, ns1__DoUATPAuthorizationRequestType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:DoUATPAuthorizationRequestType", p->soap_type() == SOAP_TYPE_ns1__DoUATPAuthorizationRequestType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__DoUATPAuthorizationRequestType(struct soap *soap, const char *URL, ns1__DoUATPAuthorizationRequestType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:DoUATPAuthorizationRequestType", p->soap_type() == SOAP_TYPE_ns1__DoUATPAuthorizationRequestType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__DoUATPAuthorizationRequestType(struct soap *soap, const char *URL, ns1__DoUATPAuthorizationRequestType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:DoUATPAuthorizationRequestType", p->soap_type() == SOAP_TYPE_ns1__DoUATPAuthorizationRequestType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__DoUATPAuthorizationRequestType * SOAP_FMAC4 soap_get_ns1__DoUATPAuthorizationRequestType(struct soap*, ns1__DoUATPAuthorizationRequestType *, const char*, const char*);

inline int soap_read_ns1__DoUATPAuthorizationRequestType(struct soap *soap, ns1__DoUATPAuthorizationRequestType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__DoUATPAuthorizationRequestType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__DoUATPAuthorizationRequestType(struct soap *soap, const char *URL, ns1__DoUATPAuthorizationRequestType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__DoUATPAuthorizationRequestType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__DoUATPAuthorizationRequestType(struct soap *soap, ns1__DoUATPAuthorizationRequestType *p)
{
	if (soap_read_ns1__DoUATPAuthorizationRequestType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__UpdateAuthorizationResponseType_DEFINED
#define SOAP_TYPE_ns1__UpdateAuthorizationResponseType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__UpdateAuthorizationResponseType(struct soap*, const char*, int, const ns1__UpdateAuthorizationResponseType *, const char*);
SOAP_FMAC3 ns1__UpdateAuthorizationResponseType * SOAP_FMAC4 soap_in_ns1__UpdateAuthorizationResponseType(struct soap*, const char*, ns1__UpdateAuthorizationResponseType *, const char*);
SOAP_FMAC1 ns1__UpdateAuthorizationResponseType * SOAP_FMAC2 soap_instantiate_ns1__UpdateAuthorizationResponseType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__UpdateAuthorizationResponseType * soap_new_ns1__UpdateAuthorizationResponseType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__UpdateAuthorizationResponseType(soap, n, NULL, NULL, NULL);
}

inline ns1__UpdateAuthorizationResponseType * soap_new_req_ns1__UpdateAuthorizationResponseType(
	struct soap *soap,
	enum ns3__AckCodeType Ack__1,
	const std::string& Version__1,
	const std::string& Build__1)
{
	ns1__UpdateAuthorizationResponseType *_p = soap_new_ns1__UpdateAuthorizationResponseType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__AbstractResponseType::Ack = Ack__1;
		_p->ns3__AbstractResponseType::Version = Version__1;
		_p->ns3__AbstractResponseType::Build = Build__1;
	}
	return _p;
}

inline ns1__UpdateAuthorizationResponseType * soap_new_set_ns1__UpdateAuthorizationResponseType(
	struct soap *soap,
	std::string *TransactionID,
	ns3__AuthorizationInfoType *ns3__AuthorizationInfo,
	time_t *Timestamp__1,
	enum ns3__AckCodeType Ack__1,
	std::string *CorrelationID__1,
	const std::vector<ns3__ErrorType *> & Errors__1,
	const std::string& Version__1,
	const std::string& Build__1,
	char *__any__1)
{
	ns1__UpdateAuthorizationResponseType *_p = soap_new_ns1__UpdateAuthorizationResponseType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__UpdateAuthorizationResponseType::TransactionID = TransactionID;
		_p->ns1__UpdateAuthorizationResponseType::ns3__AuthorizationInfo = ns3__AuthorizationInfo;
		_p->ns3__AbstractResponseType::Timestamp = Timestamp__1;
		_p->ns3__AbstractResponseType::Ack = Ack__1;
		_p->ns3__AbstractResponseType::CorrelationID = CorrelationID__1;
		_p->ns3__AbstractResponseType::Errors = Errors__1;
		_p->ns3__AbstractResponseType::Version = Version__1;
		_p->ns3__AbstractResponseType::Build = Build__1;
		_p->ns3__AbstractResponseType::__any = __any__1;
	}
	return _p;
}

inline int soap_write_ns1__UpdateAuthorizationResponseType(struct soap *soap, ns1__UpdateAuthorizationResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:UpdateAuthorizationResponseType", p->soap_type() == SOAP_TYPE_ns1__UpdateAuthorizationResponseType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__UpdateAuthorizationResponseType(struct soap *soap, const char *URL, ns1__UpdateAuthorizationResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:UpdateAuthorizationResponseType", p->soap_type() == SOAP_TYPE_ns1__UpdateAuthorizationResponseType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__UpdateAuthorizationResponseType(struct soap *soap, const char *URL, ns1__UpdateAuthorizationResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:UpdateAuthorizationResponseType", p->soap_type() == SOAP_TYPE_ns1__UpdateAuthorizationResponseType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__UpdateAuthorizationResponseType * SOAP_FMAC4 soap_get_ns1__UpdateAuthorizationResponseType(struct soap*, ns1__UpdateAuthorizationResponseType *, const char*, const char*);

inline int soap_read_ns1__UpdateAuthorizationResponseType(struct soap *soap, ns1__UpdateAuthorizationResponseType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__UpdateAuthorizationResponseType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__UpdateAuthorizationResponseType(struct soap *soap, const char *URL, ns1__UpdateAuthorizationResponseType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__UpdateAuthorizationResponseType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__UpdateAuthorizationResponseType(struct soap *soap, ns1__UpdateAuthorizationResponseType *p)
{
	if (soap_read_ns1__UpdateAuthorizationResponseType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__UpdateAuthorizationRequestType_DEFINED
#define SOAP_TYPE_ns1__UpdateAuthorizationRequestType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__UpdateAuthorizationRequestType(struct soap*, const char*, int, const ns1__UpdateAuthorizationRequestType *, const char*);
SOAP_FMAC3 ns1__UpdateAuthorizationRequestType * SOAP_FMAC4 soap_in_ns1__UpdateAuthorizationRequestType(struct soap*, const char*, ns1__UpdateAuthorizationRequestType *, const char*);
SOAP_FMAC1 ns1__UpdateAuthorizationRequestType * SOAP_FMAC2 soap_instantiate_ns1__UpdateAuthorizationRequestType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__UpdateAuthorizationRequestType * soap_new_ns1__UpdateAuthorizationRequestType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__UpdateAuthorizationRequestType(soap, n, NULL, NULL, NULL);
}

inline ns1__UpdateAuthorizationRequestType * soap_new_req_ns1__UpdateAuthorizationRequestType(
	struct soap *soap,
	const std::string& TransactionID,
	const std::string& Version__1)
{
	ns1__UpdateAuthorizationRequestType *_p = soap_new_ns1__UpdateAuthorizationRequestType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__UpdateAuthorizationRequestType::TransactionID = TransactionID;
		_p->ns3__AbstractRequestType::Version = Version__1;
	}
	return _p;
}

inline ns1__UpdateAuthorizationRequestType * soap_new_set_ns1__UpdateAuthorizationRequestType(
	struct soap *soap,
	const std::string& TransactionID,
	ns3__AddressType *ns3__ShipToAddress,
	std::string *IPAddress,
	std::string *ShipToStore,
	const std::vector<enum ns3__DetailLevelCodeType> & DetailLevel__1,
	std::string *ErrorLanguage__1,
	const std::string& Version__1,
	char *__any__1)
{
	ns1__UpdateAuthorizationRequestType *_p = soap_new_ns1__UpdateAuthorizationRequestType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__UpdateAuthorizationRequestType::TransactionID = TransactionID;
		_p->ns1__UpdateAuthorizationRequestType::ns3__ShipToAddress = ns3__ShipToAddress;
		_p->ns1__UpdateAuthorizationRequestType::IPAddress = IPAddress;
		_p->ns1__UpdateAuthorizationRequestType::ShipToStore = ShipToStore;
		_p->ns3__AbstractRequestType::DetailLevel = DetailLevel__1;
		_p->ns3__AbstractRequestType::ErrorLanguage = ErrorLanguage__1;
		_p->ns3__AbstractRequestType::Version = Version__1;
		_p->ns3__AbstractRequestType::__any = __any__1;
	}
	return _p;
}

inline int soap_write_ns1__UpdateAuthorizationRequestType(struct soap *soap, ns1__UpdateAuthorizationRequestType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:UpdateAuthorizationRequestType", p->soap_type() == SOAP_TYPE_ns1__UpdateAuthorizationRequestType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__UpdateAuthorizationRequestType(struct soap *soap, const char *URL, ns1__UpdateAuthorizationRequestType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:UpdateAuthorizationRequestType", p->soap_type() == SOAP_TYPE_ns1__UpdateAuthorizationRequestType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__UpdateAuthorizationRequestType(struct soap *soap, const char *URL, ns1__UpdateAuthorizationRequestType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:UpdateAuthorizationRequestType", p->soap_type() == SOAP_TYPE_ns1__UpdateAuthorizationRequestType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__UpdateAuthorizationRequestType * SOAP_FMAC4 soap_get_ns1__UpdateAuthorizationRequestType(struct soap*, ns1__UpdateAuthorizationRequestType *, const char*, const char*);

inline int soap_read_ns1__UpdateAuthorizationRequestType(struct soap *soap, ns1__UpdateAuthorizationRequestType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__UpdateAuthorizationRequestType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__UpdateAuthorizationRequestType(struct soap *soap, const char *URL, ns1__UpdateAuthorizationRequestType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__UpdateAuthorizationRequestType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__UpdateAuthorizationRequestType(struct soap *soap, ns1__UpdateAuthorizationRequestType *p)
{
	if (soap_read_ns1__UpdateAuthorizationRequestType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__DoAuthorizationResponseType_DEFINED
#define SOAP_TYPE_ns1__DoAuthorizationResponseType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__DoAuthorizationResponseType(struct soap*, const char*, int, const ns1__DoAuthorizationResponseType *, const char*);
SOAP_FMAC3 ns1__DoAuthorizationResponseType * SOAP_FMAC4 soap_in_ns1__DoAuthorizationResponseType(struct soap*, const char*, ns1__DoAuthorizationResponseType *, const char*);
SOAP_FMAC1 ns1__DoAuthorizationResponseType * SOAP_FMAC2 soap_instantiate_ns1__DoAuthorizationResponseType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__DoAuthorizationResponseType * soap_new_ns1__DoAuthorizationResponseType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__DoAuthorizationResponseType(soap, n, NULL, NULL, NULL);
}

inline ns1__DoAuthorizationResponseType * soap_new_req_ns1__DoAuthorizationResponseType(
	struct soap *soap,
	enum ns3__AckCodeType Ack__1,
	const std::string& Version__1,
	const std::string& Build__1)
{
	ns1__DoAuthorizationResponseType *_p = soap_new_ns1__DoAuthorizationResponseType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__AbstractResponseType::Ack = Ack__1;
		_p->ns3__AbstractResponseType::Version = Version__1;
		_p->ns3__AbstractResponseType::Build = Build__1;
	}
	return _p;
}

inline ns1__DoAuthorizationResponseType * soap_new_set_ns1__DoAuthorizationResponseType(
	struct soap *soap,
	std::string *TransactionID,
	ns2__BasicAmountType *Amount,
	ns3__AuthorizationInfoType *ns3__AuthorizationInfo,
	std::string *MsgSubID,
	time_t *Timestamp__1,
	enum ns3__AckCodeType Ack__1,
	std::string *CorrelationID__1,
	const std::vector<ns3__ErrorType *> & Errors__1,
	const std::string& Version__1,
	const std::string& Build__1,
	char *__any__1)
{
	ns1__DoAuthorizationResponseType *_p = soap_new_ns1__DoAuthorizationResponseType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__DoAuthorizationResponseType::TransactionID = TransactionID;
		_p->ns1__DoAuthorizationResponseType::Amount = Amount;
		_p->ns1__DoAuthorizationResponseType::ns3__AuthorizationInfo = ns3__AuthorizationInfo;
		_p->ns1__DoAuthorizationResponseType::MsgSubID = MsgSubID;
		_p->ns3__AbstractResponseType::Timestamp = Timestamp__1;
		_p->ns3__AbstractResponseType::Ack = Ack__1;
		_p->ns3__AbstractResponseType::CorrelationID = CorrelationID__1;
		_p->ns3__AbstractResponseType::Errors = Errors__1;
		_p->ns3__AbstractResponseType::Version = Version__1;
		_p->ns3__AbstractResponseType::Build = Build__1;
		_p->ns3__AbstractResponseType::__any = __any__1;
	}
	return _p;
}

inline int soap_write_ns1__DoAuthorizationResponseType(struct soap *soap, ns1__DoAuthorizationResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:DoAuthorizationResponseType", p->soap_type() == SOAP_TYPE_ns1__DoAuthorizationResponseType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__DoAuthorizationResponseType(struct soap *soap, const char *URL, ns1__DoAuthorizationResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:DoAuthorizationResponseType", p->soap_type() == SOAP_TYPE_ns1__DoAuthorizationResponseType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__DoAuthorizationResponseType(struct soap *soap, const char *URL, ns1__DoAuthorizationResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:DoAuthorizationResponseType", p->soap_type() == SOAP_TYPE_ns1__DoAuthorizationResponseType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__DoAuthorizationResponseType * SOAP_FMAC4 soap_get_ns1__DoAuthorizationResponseType(struct soap*, ns1__DoAuthorizationResponseType *, const char*, const char*);

inline int soap_read_ns1__DoAuthorizationResponseType(struct soap *soap, ns1__DoAuthorizationResponseType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__DoAuthorizationResponseType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__DoAuthorizationResponseType(struct soap *soap, const char *URL, ns1__DoAuthorizationResponseType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__DoAuthorizationResponseType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__DoAuthorizationResponseType(struct soap *soap, ns1__DoAuthorizationResponseType *p)
{
	if (soap_read_ns1__DoAuthorizationResponseType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__DoAuthorizationRequestType_DEFINED
#define SOAP_TYPE_ns1__DoAuthorizationRequestType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__DoAuthorizationRequestType(struct soap*, const char*, int, const ns1__DoAuthorizationRequestType *, const char*);
SOAP_FMAC3 ns1__DoAuthorizationRequestType * SOAP_FMAC4 soap_in_ns1__DoAuthorizationRequestType(struct soap*, const char*, ns1__DoAuthorizationRequestType *, const char*);
SOAP_FMAC1 ns1__DoAuthorizationRequestType * SOAP_FMAC2 soap_instantiate_ns1__DoAuthorizationRequestType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__DoAuthorizationRequestType * soap_new_ns1__DoAuthorizationRequestType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__DoAuthorizationRequestType(soap, n, NULL, NULL, NULL);
}

inline ns1__DoAuthorizationRequestType * soap_new_req_ns1__DoAuthorizationRequestType(
	struct soap *soap,
	const std::string& TransactionID,
	ns2__BasicAmountType *Amount,
	const std::string& Version__1)
{
	ns1__DoAuthorizationRequestType *_p = soap_new_ns1__DoAuthorizationRequestType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__DoAuthorizationRequestType::TransactionID = TransactionID;
		_p->ns1__DoAuthorizationRequestType::Amount = Amount;
		_p->ns3__AbstractRequestType::Version = Version__1;
	}
	return _p;
}

inline ns1__DoAuthorizationRequestType * soap_new_set_ns1__DoAuthorizationRequestType(
	struct soap *soap,
	const std::string& TransactionID,
	enum ns3__TransactionEntityType *TransactionEntity,
	ns2__BasicAmountType *Amount,
	ns3__AddressType *ns3__ShipToAddress,
	const std::vector<ns3__PaymentDetailsItemType *> & ns3__PaymentDetailsItem,
	ns2__BasicAmountType *ItemTotal,
	ns2__BasicAmountType *ShippingTotal,
	ns2__BasicAmountType *HandlingTotal,
	ns2__BasicAmountType *TaxTotal,
	ns2__BasicAmountType *InsuranceTotal,
	ns2__BasicAmountType *ShippingDiscount,
	std::string *OrderDescription,
	std::string *Custom,
	std::string *MsgSubID,
	std::string *IPAddress,
	std::string *ShipToStore,
	const std::vector<enum ns3__DetailLevelCodeType> & DetailLevel__1,
	std::string *ErrorLanguage__1,
	const std::string& Version__1,
	char *__any__1)
{
	ns1__DoAuthorizationRequestType *_p = soap_new_ns1__DoAuthorizationRequestType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__DoAuthorizationRequestType::TransactionID = TransactionID;
		_p->ns1__DoAuthorizationRequestType::TransactionEntity = TransactionEntity;
		_p->ns1__DoAuthorizationRequestType::Amount = Amount;
		_p->ns1__DoAuthorizationRequestType::ns3__ShipToAddress = ns3__ShipToAddress;
		_p->ns1__DoAuthorizationRequestType::ns3__PaymentDetailsItem = ns3__PaymentDetailsItem;
		_p->ns1__DoAuthorizationRequestType::ItemTotal = ItemTotal;
		_p->ns1__DoAuthorizationRequestType::ShippingTotal = ShippingTotal;
		_p->ns1__DoAuthorizationRequestType::HandlingTotal = HandlingTotal;
		_p->ns1__DoAuthorizationRequestType::TaxTotal = TaxTotal;
		_p->ns1__DoAuthorizationRequestType::InsuranceTotal = InsuranceTotal;
		_p->ns1__DoAuthorizationRequestType::ShippingDiscount = ShippingDiscount;
		_p->ns1__DoAuthorizationRequestType::OrderDescription = OrderDescription;
		_p->ns1__DoAuthorizationRequestType::Custom = Custom;
		_p->ns1__DoAuthorizationRequestType::MsgSubID = MsgSubID;
		_p->ns1__DoAuthorizationRequestType::IPAddress = IPAddress;
		_p->ns1__DoAuthorizationRequestType::ShipToStore = ShipToStore;
		_p->ns3__AbstractRequestType::DetailLevel = DetailLevel__1;
		_p->ns3__AbstractRequestType::ErrorLanguage = ErrorLanguage__1;
		_p->ns3__AbstractRequestType::Version = Version__1;
		_p->ns3__AbstractRequestType::__any = __any__1;
	}
	return _p;
}

inline int soap_write_ns1__DoAuthorizationRequestType(struct soap *soap, ns1__DoAuthorizationRequestType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:DoAuthorizationRequestType", p->soap_type() == SOAP_TYPE_ns1__DoAuthorizationRequestType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__DoAuthorizationRequestType(struct soap *soap, const char *URL, ns1__DoAuthorizationRequestType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:DoAuthorizationRequestType", p->soap_type() == SOAP_TYPE_ns1__DoAuthorizationRequestType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__DoAuthorizationRequestType(struct soap *soap, const char *URL, ns1__DoAuthorizationRequestType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:DoAuthorizationRequestType", p->soap_type() == SOAP_TYPE_ns1__DoAuthorizationRequestType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__DoAuthorizationRequestType * SOAP_FMAC4 soap_get_ns1__DoAuthorizationRequestType(struct soap*, ns1__DoAuthorizationRequestType *, const char*, const char*);

inline int soap_read_ns1__DoAuthorizationRequestType(struct soap *soap, ns1__DoAuthorizationRequestType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__DoAuthorizationRequestType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__DoAuthorizationRequestType(struct soap *soap, const char *URL, ns1__DoAuthorizationRequestType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__DoAuthorizationRequestType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__DoAuthorizationRequestType(struct soap *soap, ns1__DoAuthorizationRequestType *p)
{
	if (soap_read_ns1__DoAuthorizationRequestType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__DoVoidResponseType_DEFINED
#define SOAP_TYPE_ns1__DoVoidResponseType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__DoVoidResponseType(struct soap*, const char*, int, const ns1__DoVoidResponseType *, const char*);
SOAP_FMAC3 ns1__DoVoidResponseType * SOAP_FMAC4 soap_in_ns1__DoVoidResponseType(struct soap*, const char*, ns1__DoVoidResponseType *, const char*);
SOAP_FMAC1 ns1__DoVoidResponseType * SOAP_FMAC2 soap_instantiate_ns1__DoVoidResponseType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__DoVoidResponseType * soap_new_ns1__DoVoidResponseType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__DoVoidResponseType(soap, n, NULL, NULL, NULL);
}

inline ns1__DoVoidResponseType * soap_new_req_ns1__DoVoidResponseType(
	struct soap *soap,
	enum ns3__AckCodeType Ack__1,
	const std::string& Version__1,
	const std::string& Build__1)
{
	ns1__DoVoidResponseType *_p = soap_new_ns1__DoVoidResponseType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__AbstractResponseType::Ack = Ack__1;
		_p->ns3__AbstractResponseType::Version = Version__1;
		_p->ns3__AbstractResponseType::Build = Build__1;
	}
	return _p;
}

inline ns1__DoVoidResponseType * soap_new_set_ns1__DoVoidResponseType(
	struct soap *soap,
	std::string *AuthorizationID,
	std::string *MsgSubID,
	time_t *Timestamp__1,
	enum ns3__AckCodeType Ack__1,
	std::string *CorrelationID__1,
	const std::vector<ns3__ErrorType *> & Errors__1,
	const std::string& Version__1,
	const std::string& Build__1,
	char *__any__1)
{
	ns1__DoVoidResponseType *_p = soap_new_ns1__DoVoidResponseType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__DoVoidResponseType::AuthorizationID = AuthorizationID;
		_p->ns1__DoVoidResponseType::MsgSubID = MsgSubID;
		_p->ns3__AbstractResponseType::Timestamp = Timestamp__1;
		_p->ns3__AbstractResponseType::Ack = Ack__1;
		_p->ns3__AbstractResponseType::CorrelationID = CorrelationID__1;
		_p->ns3__AbstractResponseType::Errors = Errors__1;
		_p->ns3__AbstractResponseType::Version = Version__1;
		_p->ns3__AbstractResponseType::Build = Build__1;
		_p->ns3__AbstractResponseType::__any = __any__1;
	}
	return _p;
}

inline int soap_write_ns1__DoVoidResponseType(struct soap *soap, ns1__DoVoidResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:DoVoidResponseType", p->soap_type() == SOAP_TYPE_ns1__DoVoidResponseType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__DoVoidResponseType(struct soap *soap, const char *URL, ns1__DoVoidResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:DoVoidResponseType", p->soap_type() == SOAP_TYPE_ns1__DoVoidResponseType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__DoVoidResponseType(struct soap *soap, const char *URL, ns1__DoVoidResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:DoVoidResponseType", p->soap_type() == SOAP_TYPE_ns1__DoVoidResponseType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__DoVoidResponseType * SOAP_FMAC4 soap_get_ns1__DoVoidResponseType(struct soap*, ns1__DoVoidResponseType *, const char*, const char*);

inline int soap_read_ns1__DoVoidResponseType(struct soap *soap, ns1__DoVoidResponseType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__DoVoidResponseType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__DoVoidResponseType(struct soap *soap, const char *URL, ns1__DoVoidResponseType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__DoVoidResponseType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__DoVoidResponseType(struct soap *soap, ns1__DoVoidResponseType *p)
{
	if (soap_read_ns1__DoVoidResponseType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__DoVoidRequestType_DEFINED
#define SOAP_TYPE_ns1__DoVoidRequestType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__DoVoidRequestType(struct soap*, const char*, int, const ns1__DoVoidRequestType *, const char*);
SOAP_FMAC3 ns1__DoVoidRequestType * SOAP_FMAC4 soap_in_ns1__DoVoidRequestType(struct soap*, const char*, ns1__DoVoidRequestType *, const char*);
SOAP_FMAC1 ns1__DoVoidRequestType * SOAP_FMAC2 soap_instantiate_ns1__DoVoidRequestType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__DoVoidRequestType * soap_new_ns1__DoVoidRequestType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__DoVoidRequestType(soap, n, NULL, NULL, NULL);
}

inline ns1__DoVoidRequestType * soap_new_req_ns1__DoVoidRequestType(
	struct soap *soap,
	const std::string& AuthorizationID,
	const std::string& Version__1)
{
	ns1__DoVoidRequestType *_p = soap_new_ns1__DoVoidRequestType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__DoVoidRequestType::AuthorizationID = AuthorizationID;
		_p->ns3__AbstractRequestType::Version = Version__1;
	}
	return _p;
}

inline ns1__DoVoidRequestType * soap_new_set_ns1__DoVoidRequestType(
	struct soap *soap,
	const std::string& AuthorizationID,
	std::string *Note,
	std::string *MsgSubID,
	const std::vector<enum ns3__DetailLevelCodeType> & DetailLevel__1,
	std::string *ErrorLanguage__1,
	const std::string& Version__1,
	char *__any__1)
{
	ns1__DoVoidRequestType *_p = soap_new_ns1__DoVoidRequestType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__DoVoidRequestType::AuthorizationID = AuthorizationID;
		_p->ns1__DoVoidRequestType::Note = Note;
		_p->ns1__DoVoidRequestType::MsgSubID = MsgSubID;
		_p->ns3__AbstractRequestType::DetailLevel = DetailLevel__1;
		_p->ns3__AbstractRequestType::ErrorLanguage = ErrorLanguage__1;
		_p->ns3__AbstractRequestType::Version = Version__1;
		_p->ns3__AbstractRequestType::__any = __any__1;
	}
	return _p;
}

inline int soap_write_ns1__DoVoidRequestType(struct soap *soap, ns1__DoVoidRequestType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:DoVoidRequestType", p->soap_type() == SOAP_TYPE_ns1__DoVoidRequestType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__DoVoidRequestType(struct soap *soap, const char *URL, ns1__DoVoidRequestType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:DoVoidRequestType", p->soap_type() == SOAP_TYPE_ns1__DoVoidRequestType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__DoVoidRequestType(struct soap *soap, const char *URL, ns1__DoVoidRequestType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:DoVoidRequestType", p->soap_type() == SOAP_TYPE_ns1__DoVoidRequestType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__DoVoidRequestType * SOAP_FMAC4 soap_get_ns1__DoVoidRequestType(struct soap*, ns1__DoVoidRequestType *, const char*, const char*);

inline int soap_read_ns1__DoVoidRequestType(struct soap *soap, ns1__DoVoidRequestType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__DoVoidRequestType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__DoVoidRequestType(struct soap *soap, const char *URL, ns1__DoVoidRequestType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__DoVoidRequestType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__DoVoidRequestType(struct soap *soap, ns1__DoVoidRequestType *p)
{
	if (soap_read_ns1__DoVoidRequestType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__DoReauthorizationResponseType_DEFINED
#define SOAP_TYPE_ns1__DoReauthorizationResponseType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__DoReauthorizationResponseType(struct soap*, const char*, int, const ns1__DoReauthorizationResponseType *, const char*);
SOAP_FMAC3 ns1__DoReauthorizationResponseType * SOAP_FMAC4 soap_in_ns1__DoReauthorizationResponseType(struct soap*, const char*, ns1__DoReauthorizationResponseType *, const char*);
SOAP_FMAC1 ns1__DoReauthorizationResponseType * SOAP_FMAC2 soap_instantiate_ns1__DoReauthorizationResponseType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__DoReauthorizationResponseType * soap_new_ns1__DoReauthorizationResponseType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__DoReauthorizationResponseType(soap, n, NULL, NULL, NULL);
}

inline ns1__DoReauthorizationResponseType * soap_new_req_ns1__DoReauthorizationResponseType(
	struct soap *soap,
	const std::string& AuthorizationID,
	enum ns3__AckCodeType Ack__1,
	const std::string& Version__1,
	const std::string& Build__1)
{
	ns1__DoReauthorizationResponseType *_p = soap_new_ns1__DoReauthorizationResponseType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__DoReauthorizationResponseType::AuthorizationID = AuthorizationID;
		_p->ns3__AbstractResponseType::Ack = Ack__1;
		_p->ns3__AbstractResponseType::Version = Version__1;
		_p->ns3__AbstractResponseType::Build = Build__1;
	}
	return _p;
}

inline ns1__DoReauthorizationResponseType * soap_new_set_ns1__DoReauthorizationResponseType(
	struct soap *soap,
	const std::string& AuthorizationID,
	ns3__AuthorizationInfoType *ns3__AuthorizationInfo,
	std::string *MsgSubID,
	time_t *Timestamp__1,
	enum ns3__AckCodeType Ack__1,
	std::string *CorrelationID__1,
	const std::vector<ns3__ErrorType *> & Errors__1,
	const std::string& Version__1,
	const std::string& Build__1,
	char *__any__1)
{
	ns1__DoReauthorizationResponseType *_p = soap_new_ns1__DoReauthorizationResponseType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__DoReauthorizationResponseType::AuthorizationID = AuthorizationID;
		_p->ns1__DoReauthorizationResponseType::ns3__AuthorizationInfo = ns3__AuthorizationInfo;
		_p->ns1__DoReauthorizationResponseType::MsgSubID = MsgSubID;
		_p->ns3__AbstractResponseType::Timestamp = Timestamp__1;
		_p->ns3__AbstractResponseType::Ack = Ack__1;
		_p->ns3__AbstractResponseType::CorrelationID = CorrelationID__1;
		_p->ns3__AbstractResponseType::Errors = Errors__1;
		_p->ns3__AbstractResponseType::Version = Version__1;
		_p->ns3__AbstractResponseType::Build = Build__1;
		_p->ns3__AbstractResponseType::__any = __any__1;
	}
	return _p;
}

inline int soap_write_ns1__DoReauthorizationResponseType(struct soap *soap, ns1__DoReauthorizationResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:DoReauthorizationResponseType", p->soap_type() == SOAP_TYPE_ns1__DoReauthorizationResponseType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__DoReauthorizationResponseType(struct soap *soap, const char *URL, ns1__DoReauthorizationResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:DoReauthorizationResponseType", p->soap_type() == SOAP_TYPE_ns1__DoReauthorizationResponseType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__DoReauthorizationResponseType(struct soap *soap, const char *URL, ns1__DoReauthorizationResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:DoReauthorizationResponseType", p->soap_type() == SOAP_TYPE_ns1__DoReauthorizationResponseType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__DoReauthorizationResponseType * SOAP_FMAC4 soap_get_ns1__DoReauthorizationResponseType(struct soap*, ns1__DoReauthorizationResponseType *, const char*, const char*);

inline int soap_read_ns1__DoReauthorizationResponseType(struct soap *soap, ns1__DoReauthorizationResponseType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__DoReauthorizationResponseType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__DoReauthorizationResponseType(struct soap *soap, const char *URL, ns1__DoReauthorizationResponseType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__DoReauthorizationResponseType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__DoReauthorizationResponseType(struct soap *soap, ns1__DoReauthorizationResponseType *p)
{
	if (soap_read_ns1__DoReauthorizationResponseType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__DoReauthorizationRequestType_DEFINED
#define SOAP_TYPE_ns1__DoReauthorizationRequestType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__DoReauthorizationRequestType(struct soap*, const char*, int, const ns1__DoReauthorizationRequestType *, const char*);
SOAP_FMAC3 ns1__DoReauthorizationRequestType * SOAP_FMAC4 soap_in_ns1__DoReauthorizationRequestType(struct soap*, const char*, ns1__DoReauthorizationRequestType *, const char*);
SOAP_FMAC1 ns1__DoReauthorizationRequestType * SOAP_FMAC2 soap_instantiate_ns1__DoReauthorizationRequestType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__DoReauthorizationRequestType * soap_new_ns1__DoReauthorizationRequestType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__DoReauthorizationRequestType(soap, n, NULL, NULL, NULL);
}

inline ns1__DoReauthorizationRequestType * soap_new_req_ns1__DoReauthorizationRequestType(
	struct soap *soap,
	const std::string& AuthorizationID,
	ns2__BasicAmountType *Amount,
	const std::string& Version__1)
{
	ns1__DoReauthorizationRequestType *_p = soap_new_ns1__DoReauthorizationRequestType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__DoReauthorizationRequestType::AuthorizationID = AuthorizationID;
		_p->ns1__DoReauthorizationRequestType::Amount = Amount;
		_p->ns3__AbstractRequestType::Version = Version__1;
	}
	return _p;
}

inline ns1__DoReauthorizationRequestType * soap_new_set_ns1__DoReauthorizationRequestType(
	struct soap *soap,
	const std::string& AuthorizationID,
	ns2__BasicAmountType *Amount,
	std::string *MsgSubID,
	const std::vector<enum ns3__DetailLevelCodeType> & DetailLevel__1,
	std::string *ErrorLanguage__1,
	const std::string& Version__1,
	char *__any__1)
{
	ns1__DoReauthorizationRequestType *_p = soap_new_ns1__DoReauthorizationRequestType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__DoReauthorizationRequestType::AuthorizationID = AuthorizationID;
		_p->ns1__DoReauthorizationRequestType::Amount = Amount;
		_p->ns1__DoReauthorizationRequestType::MsgSubID = MsgSubID;
		_p->ns3__AbstractRequestType::DetailLevel = DetailLevel__1;
		_p->ns3__AbstractRequestType::ErrorLanguage = ErrorLanguage__1;
		_p->ns3__AbstractRequestType::Version = Version__1;
		_p->ns3__AbstractRequestType::__any = __any__1;
	}
	return _p;
}

inline int soap_write_ns1__DoReauthorizationRequestType(struct soap *soap, ns1__DoReauthorizationRequestType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:DoReauthorizationRequestType", p->soap_type() == SOAP_TYPE_ns1__DoReauthorizationRequestType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__DoReauthorizationRequestType(struct soap *soap, const char *URL, ns1__DoReauthorizationRequestType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:DoReauthorizationRequestType", p->soap_type() == SOAP_TYPE_ns1__DoReauthorizationRequestType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__DoReauthorizationRequestType(struct soap *soap, const char *URL, ns1__DoReauthorizationRequestType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:DoReauthorizationRequestType", p->soap_type() == SOAP_TYPE_ns1__DoReauthorizationRequestType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__DoReauthorizationRequestType * SOAP_FMAC4 soap_get_ns1__DoReauthorizationRequestType(struct soap*, ns1__DoReauthorizationRequestType *, const char*, const char*);

inline int soap_read_ns1__DoReauthorizationRequestType(struct soap *soap, ns1__DoReauthorizationRequestType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__DoReauthorizationRequestType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__DoReauthorizationRequestType(struct soap *soap, const char *URL, ns1__DoReauthorizationRequestType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__DoReauthorizationRequestType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__DoReauthorizationRequestType(struct soap *soap, ns1__DoReauthorizationRequestType *p)
{
	if (soap_read_ns1__DoReauthorizationRequestType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__DoCaptureResponseType_DEFINED
#define SOAP_TYPE_ns1__DoCaptureResponseType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__DoCaptureResponseType(struct soap*, const char*, int, const ns1__DoCaptureResponseType *, const char*);
SOAP_FMAC3 ns1__DoCaptureResponseType * SOAP_FMAC4 soap_in_ns1__DoCaptureResponseType(struct soap*, const char*, ns1__DoCaptureResponseType *, const char*);
SOAP_FMAC1 ns1__DoCaptureResponseType * SOAP_FMAC2 soap_instantiate_ns1__DoCaptureResponseType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__DoCaptureResponseType * soap_new_ns1__DoCaptureResponseType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__DoCaptureResponseType(soap, n, NULL, NULL, NULL);
}

inline ns1__DoCaptureResponseType * soap_new_req_ns1__DoCaptureResponseType(
	struct soap *soap,
	ns3__DoCaptureResponseDetailsType *ns3__DoCaptureResponseDetails,
	enum ns3__AckCodeType Ack__1,
	const std::string& Version__1,
	const std::string& Build__1)
{
	ns1__DoCaptureResponseType *_p = soap_new_ns1__DoCaptureResponseType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__DoCaptureResponseType::ns3__DoCaptureResponseDetails = ns3__DoCaptureResponseDetails;
		_p->ns3__AbstractResponseType::Ack = Ack__1;
		_p->ns3__AbstractResponseType::Version = Version__1;
		_p->ns3__AbstractResponseType::Build = Build__1;
	}
	return _p;
}

inline ns1__DoCaptureResponseType * soap_new_set_ns1__DoCaptureResponseType(
	struct soap *soap,
	ns3__DoCaptureResponseDetailsType *ns3__DoCaptureResponseDetails,
	time_t *Timestamp__1,
	enum ns3__AckCodeType Ack__1,
	std::string *CorrelationID__1,
	const std::vector<ns3__ErrorType *> & Errors__1,
	const std::string& Version__1,
	const std::string& Build__1,
	char *__any__1)
{
	ns1__DoCaptureResponseType *_p = soap_new_ns1__DoCaptureResponseType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__DoCaptureResponseType::ns3__DoCaptureResponseDetails = ns3__DoCaptureResponseDetails;
		_p->ns3__AbstractResponseType::Timestamp = Timestamp__1;
		_p->ns3__AbstractResponseType::Ack = Ack__1;
		_p->ns3__AbstractResponseType::CorrelationID = CorrelationID__1;
		_p->ns3__AbstractResponseType::Errors = Errors__1;
		_p->ns3__AbstractResponseType::Version = Version__1;
		_p->ns3__AbstractResponseType::Build = Build__1;
		_p->ns3__AbstractResponseType::__any = __any__1;
	}
	return _p;
}

inline int soap_write_ns1__DoCaptureResponseType(struct soap *soap, ns1__DoCaptureResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:DoCaptureResponseType", p->soap_type() == SOAP_TYPE_ns1__DoCaptureResponseType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__DoCaptureResponseType(struct soap *soap, const char *URL, ns1__DoCaptureResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:DoCaptureResponseType", p->soap_type() == SOAP_TYPE_ns1__DoCaptureResponseType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__DoCaptureResponseType(struct soap *soap, const char *URL, ns1__DoCaptureResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:DoCaptureResponseType", p->soap_type() == SOAP_TYPE_ns1__DoCaptureResponseType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__DoCaptureResponseType * SOAP_FMAC4 soap_get_ns1__DoCaptureResponseType(struct soap*, ns1__DoCaptureResponseType *, const char*, const char*);

inline int soap_read_ns1__DoCaptureResponseType(struct soap *soap, ns1__DoCaptureResponseType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__DoCaptureResponseType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__DoCaptureResponseType(struct soap *soap, const char *URL, ns1__DoCaptureResponseType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__DoCaptureResponseType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__DoCaptureResponseType(struct soap *soap, ns1__DoCaptureResponseType *p)
{
	if (soap_read_ns1__DoCaptureResponseType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__DoCaptureRequestType_DEFINED
#define SOAP_TYPE_ns1__DoCaptureRequestType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__DoCaptureRequestType(struct soap*, const char*, int, const ns1__DoCaptureRequestType *, const char*);
SOAP_FMAC3 ns1__DoCaptureRequestType * SOAP_FMAC4 soap_in_ns1__DoCaptureRequestType(struct soap*, const char*, ns1__DoCaptureRequestType *, const char*);
SOAP_FMAC1 ns1__DoCaptureRequestType * SOAP_FMAC2 soap_instantiate_ns1__DoCaptureRequestType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__DoCaptureRequestType * soap_new_ns1__DoCaptureRequestType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__DoCaptureRequestType(soap, n, NULL, NULL, NULL);
}

inline ns1__DoCaptureRequestType * soap_new_req_ns1__DoCaptureRequestType(
	struct soap *soap,
	const std::string& AuthorizationID,
	ns2__BasicAmountType *Amount,
	enum ns3__CompleteCodeType CompleteType,
	const std::string& Version__1)
{
	ns1__DoCaptureRequestType *_p = soap_new_ns1__DoCaptureRequestType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__DoCaptureRequestType::AuthorizationID = AuthorizationID;
		_p->ns1__DoCaptureRequestType::Amount = Amount;
		_p->ns1__DoCaptureRequestType::CompleteType = CompleteType;
		_p->ns3__AbstractRequestType::Version = Version__1;
	}
	return _p;
}

inline ns1__DoCaptureRequestType * soap_new_set_ns1__DoCaptureRequestType(
	struct soap *soap,
	const std::string& AuthorizationID,
	ns2__BasicAmountType *Amount,
	enum ns3__CompleteCodeType CompleteType,
	std::string *Note,
	std::string *InvoiceID,
	ns3__EnhancedDataType *ns3__EnhancedData,
	std::string *Descriptor,
	ns3__MerchantStoreDetailsType *ns3__MerchantStoreDetails,
	std::string *MsgSubID,
	ns3__MerchantDataType *ns3__MerchantData,
	const std::vector<enum ns3__DetailLevelCodeType> & DetailLevel__1,
	std::string *ErrorLanguage__1,
	const std::string& Version__1,
	char *__any__1)
{
	ns1__DoCaptureRequestType *_p = soap_new_ns1__DoCaptureRequestType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__DoCaptureRequestType::AuthorizationID = AuthorizationID;
		_p->ns1__DoCaptureRequestType::Amount = Amount;
		_p->ns1__DoCaptureRequestType::CompleteType = CompleteType;
		_p->ns1__DoCaptureRequestType::Note = Note;
		_p->ns1__DoCaptureRequestType::InvoiceID = InvoiceID;
		_p->ns1__DoCaptureRequestType::ns3__EnhancedData = ns3__EnhancedData;
		_p->ns1__DoCaptureRequestType::Descriptor = Descriptor;
		_p->ns1__DoCaptureRequestType::ns3__MerchantStoreDetails = ns3__MerchantStoreDetails;
		_p->ns1__DoCaptureRequestType::MsgSubID = MsgSubID;
		_p->ns1__DoCaptureRequestType::ns3__MerchantData = ns3__MerchantData;
		_p->ns3__AbstractRequestType::DetailLevel = DetailLevel__1;
		_p->ns3__AbstractRequestType::ErrorLanguage = ErrorLanguage__1;
		_p->ns3__AbstractRequestType::Version = Version__1;
		_p->ns3__AbstractRequestType::__any = __any__1;
	}
	return _p;
}

inline int soap_write_ns1__DoCaptureRequestType(struct soap *soap, ns1__DoCaptureRequestType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:DoCaptureRequestType", p->soap_type() == SOAP_TYPE_ns1__DoCaptureRequestType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__DoCaptureRequestType(struct soap *soap, const char *URL, ns1__DoCaptureRequestType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:DoCaptureRequestType", p->soap_type() == SOAP_TYPE_ns1__DoCaptureRequestType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__DoCaptureRequestType(struct soap *soap, const char *URL, ns1__DoCaptureRequestType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:DoCaptureRequestType", p->soap_type() == SOAP_TYPE_ns1__DoCaptureRequestType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__DoCaptureRequestType * SOAP_FMAC4 soap_get_ns1__DoCaptureRequestType(struct soap*, ns1__DoCaptureRequestType *, const char*, const char*);

inline int soap_read_ns1__DoCaptureRequestType(struct soap *soap, ns1__DoCaptureRequestType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__DoCaptureRequestType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__DoCaptureRequestType(struct soap *soap, const char *URL, ns1__DoCaptureRequestType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__DoCaptureRequestType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__DoCaptureRequestType(struct soap *soap, ns1__DoCaptureRequestType *p)
{
	if (soap_read_ns1__DoCaptureRequestType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__DoCancelResponseType_DEFINED
#define SOAP_TYPE_ns1__DoCancelResponseType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__DoCancelResponseType(struct soap*, const char*, int, const ns1__DoCancelResponseType *, const char*);
SOAP_FMAC3 ns1__DoCancelResponseType * SOAP_FMAC4 soap_in_ns1__DoCancelResponseType(struct soap*, const char*, ns1__DoCancelResponseType *, const char*);
SOAP_FMAC1 ns1__DoCancelResponseType * SOAP_FMAC2 soap_instantiate_ns1__DoCancelResponseType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__DoCancelResponseType * soap_new_ns1__DoCancelResponseType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__DoCancelResponseType(soap, n, NULL, NULL, NULL);
}

inline ns1__DoCancelResponseType * soap_new_req_ns1__DoCancelResponseType(
	struct soap *soap,
	enum ns3__AckCodeType Ack__1,
	const std::string& Version__1,
	const std::string& Build__1)
{
	ns1__DoCancelResponseType *_p = soap_new_ns1__DoCancelResponseType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__AbstractResponseType::Ack = Ack__1;
		_p->ns3__AbstractResponseType::Version = Version__1;
		_p->ns3__AbstractResponseType::Build = Build__1;
	}
	return _p;
}

inline ns1__DoCancelResponseType * soap_new_set_ns1__DoCancelResponseType(
	struct soap *soap,
	std::string *MsgSubID,
	time_t *Timestamp__1,
	enum ns3__AckCodeType Ack__1,
	std::string *CorrelationID__1,
	const std::vector<ns3__ErrorType *> & Errors__1,
	const std::string& Version__1,
	const std::string& Build__1,
	char *__any__1)
{
	ns1__DoCancelResponseType *_p = soap_new_ns1__DoCancelResponseType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__DoCancelResponseType::MsgSubID = MsgSubID;
		_p->ns3__AbstractResponseType::Timestamp = Timestamp__1;
		_p->ns3__AbstractResponseType::Ack = Ack__1;
		_p->ns3__AbstractResponseType::CorrelationID = CorrelationID__1;
		_p->ns3__AbstractResponseType::Errors = Errors__1;
		_p->ns3__AbstractResponseType::Version = Version__1;
		_p->ns3__AbstractResponseType::Build = Build__1;
		_p->ns3__AbstractResponseType::__any = __any__1;
	}
	return _p;
}

inline int soap_write_ns1__DoCancelResponseType(struct soap *soap, ns1__DoCancelResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:DoCancelResponseType", p->soap_type() == SOAP_TYPE_ns1__DoCancelResponseType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__DoCancelResponseType(struct soap *soap, const char *URL, ns1__DoCancelResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:DoCancelResponseType", p->soap_type() == SOAP_TYPE_ns1__DoCancelResponseType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__DoCancelResponseType(struct soap *soap, const char *URL, ns1__DoCancelResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:DoCancelResponseType", p->soap_type() == SOAP_TYPE_ns1__DoCancelResponseType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__DoCancelResponseType * SOAP_FMAC4 soap_get_ns1__DoCancelResponseType(struct soap*, ns1__DoCancelResponseType *, const char*, const char*);

inline int soap_read_ns1__DoCancelResponseType(struct soap *soap, ns1__DoCancelResponseType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__DoCancelResponseType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__DoCancelResponseType(struct soap *soap, const char *URL, ns1__DoCancelResponseType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__DoCancelResponseType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__DoCancelResponseType(struct soap *soap, ns1__DoCancelResponseType *p)
{
	if (soap_read_ns1__DoCancelResponseType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__DoCancelRequestType_DEFINED
#define SOAP_TYPE_ns1__DoCancelRequestType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__DoCancelRequestType(struct soap*, const char*, int, const ns1__DoCancelRequestType *, const char*);
SOAP_FMAC3 ns1__DoCancelRequestType * SOAP_FMAC4 soap_in_ns1__DoCancelRequestType(struct soap*, const char*, ns1__DoCancelRequestType *, const char*);
SOAP_FMAC1 ns1__DoCancelRequestType * SOAP_FMAC2 soap_instantiate_ns1__DoCancelRequestType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__DoCancelRequestType * soap_new_ns1__DoCancelRequestType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__DoCancelRequestType(soap, n, NULL, NULL, NULL);
}

inline ns1__DoCancelRequestType * soap_new_req_ns1__DoCancelRequestType(
	struct soap *soap,
	const std::string& CancelMsgSubID,
	enum ns3__APIType APIType,
	const std::string& Version__1)
{
	ns1__DoCancelRequestType *_p = soap_new_ns1__DoCancelRequestType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__DoCancelRequestType::CancelMsgSubID = CancelMsgSubID;
		_p->ns1__DoCancelRequestType::APIType = APIType;
		_p->ns3__AbstractRequestType::Version = Version__1;
	}
	return _p;
}

inline ns1__DoCancelRequestType * soap_new_set_ns1__DoCancelRequestType(
	struct soap *soap,
	const std::string& CancelMsgSubID,
	enum ns3__APIType APIType,
	std::string *MsgSubID,
	const std::vector<enum ns3__DetailLevelCodeType> & DetailLevel__1,
	std::string *ErrorLanguage__1,
	const std::string& Version__1,
	char *__any__1)
{
	ns1__DoCancelRequestType *_p = soap_new_ns1__DoCancelRequestType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__DoCancelRequestType::CancelMsgSubID = CancelMsgSubID;
		_p->ns1__DoCancelRequestType::APIType = APIType;
		_p->ns1__DoCancelRequestType::MsgSubID = MsgSubID;
		_p->ns3__AbstractRequestType::DetailLevel = DetailLevel__1;
		_p->ns3__AbstractRequestType::ErrorLanguage = ErrorLanguage__1;
		_p->ns3__AbstractRequestType::Version = Version__1;
		_p->ns3__AbstractRequestType::__any = __any__1;
	}
	return _p;
}

inline int soap_write_ns1__DoCancelRequestType(struct soap *soap, ns1__DoCancelRequestType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:DoCancelRequestType", p->soap_type() == SOAP_TYPE_ns1__DoCancelRequestType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__DoCancelRequestType(struct soap *soap, const char *URL, ns1__DoCancelRequestType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:DoCancelRequestType", p->soap_type() == SOAP_TYPE_ns1__DoCancelRequestType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__DoCancelRequestType(struct soap *soap, const char *URL, ns1__DoCancelRequestType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:DoCancelRequestType", p->soap_type() == SOAP_TYPE_ns1__DoCancelRequestType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__DoCancelRequestType * SOAP_FMAC4 soap_get_ns1__DoCancelRequestType(struct soap*, ns1__DoCancelRequestType *, const char*, const char*);

inline int soap_read_ns1__DoCancelRequestType(struct soap *soap, ns1__DoCancelRequestType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__DoCancelRequestType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__DoCancelRequestType(struct soap *soap, const char *URL, ns1__DoCancelRequestType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__DoCancelRequestType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__DoCancelRequestType(struct soap *soap, ns1__DoCancelRequestType *p)
{
	if (soap_read_ns1__DoCancelRequestType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__DoDirectPaymentResponseType_DEFINED
#define SOAP_TYPE_ns1__DoDirectPaymentResponseType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__DoDirectPaymentResponseType(struct soap*, const char*, int, const ns1__DoDirectPaymentResponseType *, const char*);
SOAP_FMAC3 ns1__DoDirectPaymentResponseType * SOAP_FMAC4 soap_in_ns1__DoDirectPaymentResponseType(struct soap*, const char*, ns1__DoDirectPaymentResponseType *, const char*);
SOAP_FMAC1 ns1__DoDirectPaymentResponseType * SOAP_FMAC2 soap_instantiate_ns1__DoDirectPaymentResponseType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__DoDirectPaymentResponseType * soap_new_ns1__DoDirectPaymentResponseType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__DoDirectPaymentResponseType(soap, n, NULL, NULL, NULL);
}

inline ns1__DoDirectPaymentResponseType * soap_new_req_ns1__DoDirectPaymentResponseType(
	struct soap *soap,
	ns2__BasicAmountType *Amount,
	const std::string& AVSCode,
	const std::string& CVV2Code,
	enum ns3__AckCodeType Ack__1,
	const std::string& Version__1,
	const std::string& Build__1)
{
	ns1__DoDirectPaymentResponseType *_p = soap_new_ns1__DoDirectPaymentResponseType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__DoDirectPaymentResponseType::Amount = Amount;
		_p->ns1__DoDirectPaymentResponseType::AVSCode = AVSCode;
		_p->ns1__DoDirectPaymentResponseType::CVV2Code = CVV2Code;
		_p->ns3__AbstractResponseType::Ack = Ack__1;
		_p->ns3__AbstractResponseType::Version = Version__1;
		_p->ns3__AbstractResponseType::Build = Build__1;
	}
	return _p;
}

inline ns1__DoDirectPaymentResponseType * soap_new_set_ns1__DoDirectPaymentResponseType(
	struct soap *soap,
	ns2__BasicAmountType *Amount,
	const std::string& AVSCode,
	const std::string& CVV2Code,
	std::string *TransactionID,
	std::string *TransactionPendingReason,
	enum ns3__PendingStatusCodeType *PendingReason,
	enum ns3__PaymentStatusCodeType *PaymentStatus,
	ns3__FMFDetailsType *FMFDetails,
	ns3__ThreeDSecureResponseType *ThreeDSecureResponse,
	std::string *PaymentAdviceCode,
	time_t *Timestamp__1,
	enum ns3__AckCodeType Ack__1,
	std::string *CorrelationID__1,
	const std::vector<ns3__ErrorType *> & Errors__1,
	const std::string& Version__1,
	const std::string& Build__1,
	char *__any__1)
{
	ns1__DoDirectPaymentResponseType *_p = soap_new_ns1__DoDirectPaymentResponseType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__DoDirectPaymentResponseType::Amount = Amount;
		_p->ns1__DoDirectPaymentResponseType::AVSCode = AVSCode;
		_p->ns1__DoDirectPaymentResponseType::CVV2Code = CVV2Code;
		_p->ns1__DoDirectPaymentResponseType::TransactionID = TransactionID;
		_p->ns1__DoDirectPaymentResponseType::TransactionPendingReason = TransactionPendingReason;
		_p->ns1__DoDirectPaymentResponseType::PendingReason = PendingReason;
		_p->ns1__DoDirectPaymentResponseType::PaymentStatus = PaymentStatus;
		_p->ns1__DoDirectPaymentResponseType::FMFDetails = FMFDetails;
		_p->ns1__DoDirectPaymentResponseType::ThreeDSecureResponse = ThreeDSecureResponse;
		_p->ns1__DoDirectPaymentResponseType::PaymentAdviceCode = PaymentAdviceCode;
		_p->ns3__AbstractResponseType::Timestamp = Timestamp__1;
		_p->ns3__AbstractResponseType::Ack = Ack__1;
		_p->ns3__AbstractResponseType::CorrelationID = CorrelationID__1;
		_p->ns3__AbstractResponseType::Errors = Errors__1;
		_p->ns3__AbstractResponseType::Version = Version__1;
		_p->ns3__AbstractResponseType::Build = Build__1;
		_p->ns3__AbstractResponseType::__any = __any__1;
	}
	return _p;
}

inline int soap_write_ns1__DoDirectPaymentResponseType(struct soap *soap, ns1__DoDirectPaymentResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:DoDirectPaymentResponseType", p->soap_type() == SOAP_TYPE_ns1__DoDirectPaymentResponseType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__DoDirectPaymentResponseType(struct soap *soap, const char *URL, ns1__DoDirectPaymentResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:DoDirectPaymentResponseType", p->soap_type() == SOAP_TYPE_ns1__DoDirectPaymentResponseType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__DoDirectPaymentResponseType(struct soap *soap, const char *URL, ns1__DoDirectPaymentResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:DoDirectPaymentResponseType", p->soap_type() == SOAP_TYPE_ns1__DoDirectPaymentResponseType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__DoDirectPaymentResponseType * SOAP_FMAC4 soap_get_ns1__DoDirectPaymentResponseType(struct soap*, ns1__DoDirectPaymentResponseType *, const char*, const char*);

inline int soap_read_ns1__DoDirectPaymentResponseType(struct soap *soap, ns1__DoDirectPaymentResponseType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__DoDirectPaymentResponseType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__DoDirectPaymentResponseType(struct soap *soap, const char *URL, ns1__DoDirectPaymentResponseType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__DoDirectPaymentResponseType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__DoDirectPaymentResponseType(struct soap *soap, ns1__DoDirectPaymentResponseType *p)
{
	if (soap_read_ns1__DoDirectPaymentResponseType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__DoDirectPaymentRequestType_DEFINED
#define SOAP_TYPE_ns1__DoDirectPaymentRequestType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__DoDirectPaymentRequestType(struct soap*, const char*, int, const ns1__DoDirectPaymentRequestType *, const char*);
SOAP_FMAC3 ns1__DoDirectPaymentRequestType * SOAP_FMAC4 soap_in_ns1__DoDirectPaymentRequestType(struct soap*, const char*, ns1__DoDirectPaymentRequestType *, const char*);
SOAP_FMAC1 ns1__DoDirectPaymentRequestType * SOAP_FMAC2 soap_instantiate_ns1__DoDirectPaymentRequestType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__DoDirectPaymentRequestType * soap_new_ns1__DoDirectPaymentRequestType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__DoDirectPaymentRequestType(soap, n, NULL, NULL, NULL);
}

inline ns1__DoDirectPaymentRequestType * soap_new_req_ns1__DoDirectPaymentRequestType(
	struct soap *soap,
	ns3__DoDirectPaymentRequestDetailsType *ns3__DoDirectPaymentRequestDetails,
	const std::string& Version__1)
{
	ns1__DoDirectPaymentRequestType *_p = soap_new_ns1__DoDirectPaymentRequestType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__DoDirectPaymentRequestType::ns3__DoDirectPaymentRequestDetails = ns3__DoDirectPaymentRequestDetails;
		_p->ns3__AbstractRequestType::Version = Version__1;
	}
	return _p;
}

inline ns1__DoDirectPaymentRequestType * soap_new_set_ns1__DoDirectPaymentRequestType(
	struct soap *soap,
	ns3__DoDirectPaymentRequestDetailsType *ns3__DoDirectPaymentRequestDetails,
	int *ReturnFMFDetails,
	const std::vector<enum ns3__DetailLevelCodeType> & DetailLevel__1,
	std::string *ErrorLanguage__1,
	const std::string& Version__1,
	char *__any__1)
{
	ns1__DoDirectPaymentRequestType *_p = soap_new_ns1__DoDirectPaymentRequestType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__DoDirectPaymentRequestType::ns3__DoDirectPaymentRequestDetails = ns3__DoDirectPaymentRequestDetails;
		_p->ns1__DoDirectPaymentRequestType::ReturnFMFDetails = ReturnFMFDetails;
		_p->ns3__AbstractRequestType::DetailLevel = DetailLevel__1;
		_p->ns3__AbstractRequestType::ErrorLanguage = ErrorLanguage__1;
		_p->ns3__AbstractRequestType::Version = Version__1;
		_p->ns3__AbstractRequestType::__any = __any__1;
	}
	return _p;
}

inline int soap_write_ns1__DoDirectPaymentRequestType(struct soap *soap, ns1__DoDirectPaymentRequestType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:DoDirectPaymentRequestType", p->soap_type() == SOAP_TYPE_ns1__DoDirectPaymentRequestType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__DoDirectPaymentRequestType(struct soap *soap, const char *URL, ns1__DoDirectPaymentRequestType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:DoDirectPaymentRequestType", p->soap_type() == SOAP_TYPE_ns1__DoDirectPaymentRequestType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__DoDirectPaymentRequestType(struct soap *soap, const char *URL, ns1__DoDirectPaymentRequestType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:DoDirectPaymentRequestType", p->soap_type() == SOAP_TYPE_ns1__DoDirectPaymentRequestType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__DoDirectPaymentRequestType * SOAP_FMAC4 soap_get_ns1__DoDirectPaymentRequestType(struct soap*, ns1__DoDirectPaymentRequestType *, const char*, const char*);

inline int soap_read_ns1__DoDirectPaymentRequestType(struct soap *soap, ns1__DoDirectPaymentRequestType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__DoDirectPaymentRequestType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__DoDirectPaymentRequestType(struct soap *soap, const char *URL, ns1__DoDirectPaymentRequestType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__DoDirectPaymentRequestType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__DoDirectPaymentRequestType(struct soap *soap, ns1__DoDirectPaymentRequestType *p)
{
	if (soap_read_ns1__DoDirectPaymentRequestType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__ManagePendingTransactionStatusResponseType_DEFINED
#define SOAP_TYPE_ns1__ManagePendingTransactionStatusResponseType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__ManagePendingTransactionStatusResponseType(struct soap*, const char*, int, const ns1__ManagePendingTransactionStatusResponseType *, const char*);
SOAP_FMAC3 ns1__ManagePendingTransactionStatusResponseType * SOAP_FMAC4 soap_in_ns1__ManagePendingTransactionStatusResponseType(struct soap*, const char*, ns1__ManagePendingTransactionStatusResponseType *, const char*);
SOAP_FMAC1 ns1__ManagePendingTransactionStatusResponseType * SOAP_FMAC2 soap_instantiate_ns1__ManagePendingTransactionStatusResponseType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__ManagePendingTransactionStatusResponseType * soap_new_ns1__ManagePendingTransactionStatusResponseType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__ManagePendingTransactionStatusResponseType(soap, n, NULL, NULL, NULL);
}

inline ns1__ManagePendingTransactionStatusResponseType * soap_new_req_ns1__ManagePendingTransactionStatusResponseType(
	struct soap *soap,
	enum ns3__AckCodeType Ack__1,
	const std::string& Version__1,
	const std::string& Build__1)
{
	ns1__ManagePendingTransactionStatusResponseType *_p = soap_new_ns1__ManagePendingTransactionStatusResponseType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__AbstractResponseType::Ack = Ack__1;
		_p->ns3__AbstractResponseType::Version = Version__1;
		_p->ns3__AbstractResponseType::Build = Build__1;
	}
	return _p;
}

inline ns1__ManagePendingTransactionStatusResponseType * soap_new_set_ns1__ManagePendingTransactionStatusResponseType(
	struct soap *soap,
	std::string *TransactionID,
	std::string *Status,
	time_t *Timestamp__1,
	enum ns3__AckCodeType Ack__1,
	std::string *CorrelationID__1,
	const std::vector<ns3__ErrorType *> & Errors__1,
	const std::string& Version__1,
	const std::string& Build__1,
	char *__any__1)
{
	ns1__ManagePendingTransactionStatusResponseType *_p = soap_new_ns1__ManagePendingTransactionStatusResponseType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__ManagePendingTransactionStatusResponseType::TransactionID = TransactionID;
		_p->ns1__ManagePendingTransactionStatusResponseType::Status = Status;
		_p->ns3__AbstractResponseType::Timestamp = Timestamp__1;
		_p->ns3__AbstractResponseType::Ack = Ack__1;
		_p->ns3__AbstractResponseType::CorrelationID = CorrelationID__1;
		_p->ns3__AbstractResponseType::Errors = Errors__1;
		_p->ns3__AbstractResponseType::Version = Version__1;
		_p->ns3__AbstractResponseType::Build = Build__1;
		_p->ns3__AbstractResponseType::__any = __any__1;
	}
	return _p;
}

inline int soap_write_ns1__ManagePendingTransactionStatusResponseType(struct soap *soap, ns1__ManagePendingTransactionStatusResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ManagePendingTransactionStatusResponseType", p->soap_type() == SOAP_TYPE_ns1__ManagePendingTransactionStatusResponseType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__ManagePendingTransactionStatusResponseType(struct soap *soap, const char *URL, ns1__ManagePendingTransactionStatusResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ManagePendingTransactionStatusResponseType", p->soap_type() == SOAP_TYPE_ns1__ManagePendingTransactionStatusResponseType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__ManagePendingTransactionStatusResponseType(struct soap *soap, const char *URL, ns1__ManagePendingTransactionStatusResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ManagePendingTransactionStatusResponseType", p->soap_type() == SOAP_TYPE_ns1__ManagePendingTransactionStatusResponseType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__ManagePendingTransactionStatusResponseType * SOAP_FMAC4 soap_get_ns1__ManagePendingTransactionStatusResponseType(struct soap*, ns1__ManagePendingTransactionStatusResponseType *, const char*, const char*);

inline int soap_read_ns1__ManagePendingTransactionStatusResponseType(struct soap *soap, ns1__ManagePendingTransactionStatusResponseType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__ManagePendingTransactionStatusResponseType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__ManagePendingTransactionStatusResponseType(struct soap *soap, const char *URL, ns1__ManagePendingTransactionStatusResponseType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__ManagePendingTransactionStatusResponseType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__ManagePendingTransactionStatusResponseType(struct soap *soap, ns1__ManagePendingTransactionStatusResponseType *p)
{
	if (soap_read_ns1__ManagePendingTransactionStatusResponseType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__ManagePendingTransactionStatusRequestType_DEFINED
#define SOAP_TYPE_ns1__ManagePendingTransactionStatusRequestType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__ManagePendingTransactionStatusRequestType(struct soap*, const char*, int, const ns1__ManagePendingTransactionStatusRequestType *, const char*);
SOAP_FMAC3 ns1__ManagePendingTransactionStatusRequestType * SOAP_FMAC4 soap_in_ns1__ManagePendingTransactionStatusRequestType(struct soap*, const char*, ns1__ManagePendingTransactionStatusRequestType *, const char*);
SOAP_FMAC1 ns1__ManagePendingTransactionStatusRequestType * SOAP_FMAC2 soap_instantiate_ns1__ManagePendingTransactionStatusRequestType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__ManagePendingTransactionStatusRequestType * soap_new_ns1__ManagePendingTransactionStatusRequestType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__ManagePendingTransactionStatusRequestType(soap, n, NULL, NULL, NULL);
}

inline ns1__ManagePendingTransactionStatusRequestType * soap_new_req_ns1__ManagePendingTransactionStatusRequestType(
	struct soap *soap,
	const std::string& TransactionID,
	enum ns3__FMFPendingTransactionActionType Action,
	const std::string& Version__1)
{
	ns1__ManagePendingTransactionStatusRequestType *_p = soap_new_ns1__ManagePendingTransactionStatusRequestType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__ManagePendingTransactionStatusRequestType::TransactionID = TransactionID;
		_p->ns1__ManagePendingTransactionStatusRequestType::Action = Action;
		_p->ns3__AbstractRequestType::Version = Version__1;
	}
	return _p;
}

inline ns1__ManagePendingTransactionStatusRequestType * soap_new_set_ns1__ManagePendingTransactionStatusRequestType(
	struct soap *soap,
	const std::string& TransactionID,
	enum ns3__FMFPendingTransactionActionType Action,
	const std::vector<enum ns3__DetailLevelCodeType> & DetailLevel__1,
	std::string *ErrorLanguage__1,
	const std::string& Version__1,
	char *__any__1)
{
	ns1__ManagePendingTransactionStatusRequestType *_p = soap_new_ns1__ManagePendingTransactionStatusRequestType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__ManagePendingTransactionStatusRequestType::TransactionID = TransactionID;
		_p->ns1__ManagePendingTransactionStatusRequestType::Action = Action;
		_p->ns3__AbstractRequestType::DetailLevel = DetailLevel__1;
		_p->ns3__AbstractRequestType::ErrorLanguage = ErrorLanguage__1;
		_p->ns3__AbstractRequestType::Version = Version__1;
		_p->ns3__AbstractRequestType::__any = __any__1;
	}
	return _p;
}

inline int soap_write_ns1__ManagePendingTransactionStatusRequestType(struct soap *soap, ns1__ManagePendingTransactionStatusRequestType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ManagePendingTransactionStatusRequestType", p->soap_type() == SOAP_TYPE_ns1__ManagePendingTransactionStatusRequestType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__ManagePendingTransactionStatusRequestType(struct soap *soap, const char *URL, ns1__ManagePendingTransactionStatusRequestType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ManagePendingTransactionStatusRequestType", p->soap_type() == SOAP_TYPE_ns1__ManagePendingTransactionStatusRequestType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__ManagePendingTransactionStatusRequestType(struct soap *soap, const char *URL, ns1__ManagePendingTransactionStatusRequestType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ManagePendingTransactionStatusRequestType", p->soap_type() == SOAP_TYPE_ns1__ManagePendingTransactionStatusRequestType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__ManagePendingTransactionStatusRequestType * SOAP_FMAC4 soap_get_ns1__ManagePendingTransactionStatusRequestType(struct soap*, ns1__ManagePendingTransactionStatusRequestType *, const char*, const char*);

inline int soap_read_ns1__ManagePendingTransactionStatusRequestType(struct soap *soap, ns1__ManagePendingTransactionStatusRequestType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__ManagePendingTransactionStatusRequestType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__ManagePendingTransactionStatusRequestType(struct soap *soap, const char *URL, ns1__ManagePendingTransactionStatusRequestType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__ManagePendingTransactionStatusRequestType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__ManagePendingTransactionStatusRequestType(struct soap *soap, ns1__ManagePendingTransactionStatusRequestType *p)
{
	if (soap_read_ns1__ManagePendingTransactionStatusRequestType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__DoUATPExpressCheckoutPaymentResponseType_DEFINED
#define SOAP_TYPE_ns1__DoUATPExpressCheckoutPaymentResponseType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__DoUATPExpressCheckoutPaymentResponseType(struct soap*, const char*, int, const ns1__DoUATPExpressCheckoutPaymentResponseType *, const char*);
SOAP_FMAC3 ns1__DoUATPExpressCheckoutPaymentResponseType * SOAP_FMAC4 soap_in_ns1__DoUATPExpressCheckoutPaymentResponseType(struct soap*, const char*, ns1__DoUATPExpressCheckoutPaymentResponseType *, const char*);
SOAP_FMAC1 ns1__DoUATPExpressCheckoutPaymentResponseType * SOAP_FMAC2 soap_instantiate_ns1__DoUATPExpressCheckoutPaymentResponseType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__DoUATPExpressCheckoutPaymentResponseType * soap_new_ns1__DoUATPExpressCheckoutPaymentResponseType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__DoUATPExpressCheckoutPaymentResponseType(soap, n, NULL, NULL, NULL);
}

inline ns1__DoUATPExpressCheckoutPaymentResponseType * soap_new_req_ns1__DoUATPExpressCheckoutPaymentResponseType(
	struct soap *soap,
	ns3__UATPDetailsType *ns3__UATPDetails,
	ns3__DoExpressCheckoutPaymentResponseDetailsType *ns3__DoExpressCheckoutPaymentResponseDetails__1,
	enum ns3__AckCodeType Ack__2,
	const std::string& Version__2,
	const std::string& Build__2)
{
	ns1__DoUATPExpressCheckoutPaymentResponseType *_p = soap_new_ns1__DoUATPExpressCheckoutPaymentResponseType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__DoUATPExpressCheckoutPaymentResponseType::ns3__UATPDetails = ns3__UATPDetails;
		_p->ns1__DoExpressCheckoutPaymentResponseType::ns3__DoExpressCheckoutPaymentResponseDetails = ns3__DoExpressCheckoutPaymentResponseDetails__1;
		_p->ns3__AbstractResponseType::Ack = Ack__2;
		_p->ns3__AbstractResponseType::Version = Version__2;
		_p->ns3__AbstractResponseType::Build = Build__2;
	}
	return _p;
}

inline ns1__DoUATPExpressCheckoutPaymentResponseType * soap_new_set_ns1__DoUATPExpressCheckoutPaymentResponseType(
	struct soap *soap,
	ns3__UATPDetailsType *ns3__UATPDetails,
	ns3__DoExpressCheckoutPaymentResponseDetailsType *ns3__DoExpressCheckoutPaymentResponseDetails__1,
	ns3__FMFDetailsType *FMFDetails__1,
	time_t *Timestamp__2,
	enum ns3__AckCodeType Ack__2,
	std::string *CorrelationID__2,
	const std::vector<ns3__ErrorType *> & Errors__2,
	const std::string& Version__2,
	const std::string& Build__2,
	char *__any__2)
{
	ns1__DoUATPExpressCheckoutPaymentResponseType *_p = soap_new_ns1__DoUATPExpressCheckoutPaymentResponseType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__DoUATPExpressCheckoutPaymentResponseType::ns3__UATPDetails = ns3__UATPDetails;
		_p->ns1__DoExpressCheckoutPaymentResponseType::ns3__DoExpressCheckoutPaymentResponseDetails = ns3__DoExpressCheckoutPaymentResponseDetails__1;
		_p->ns1__DoExpressCheckoutPaymentResponseType::FMFDetails = FMFDetails__1;
		_p->ns3__AbstractResponseType::Timestamp = Timestamp__2;
		_p->ns3__AbstractResponseType::Ack = Ack__2;
		_p->ns3__AbstractResponseType::CorrelationID = CorrelationID__2;
		_p->ns3__AbstractResponseType::Errors = Errors__2;
		_p->ns3__AbstractResponseType::Version = Version__2;
		_p->ns3__AbstractResponseType::Build = Build__2;
		_p->ns3__AbstractResponseType::__any = __any__2;
	}
	return _p;
}

inline int soap_write_ns1__DoUATPExpressCheckoutPaymentResponseType(struct soap *soap, ns1__DoUATPExpressCheckoutPaymentResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:DoUATPExpressCheckoutPaymentResponseType", p->soap_type() == SOAP_TYPE_ns1__DoUATPExpressCheckoutPaymentResponseType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__DoUATPExpressCheckoutPaymentResponseType(struct soap *soap, const char *URL, ns1__DoUATPExpressCheckoutPaymentResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:DoUATPExpressCheckoutPaymentResponseType", p->soap_type() == SOAP_TYPE_ns1__DoUATPExpressCheckoutPaymentResponseType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__DoUATPExpressCheckoutPaymentResponseType(struct soap *soap, const char *URL, ns1__DoUATPExpressCheckoutPaymentResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:DoUATPExpressCheckoutPaymentResponseType", p->soap_type() == SOAP_TYPE_ns1__DoUATPExpressCheckoutPaymentResponseType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__DoUATPExpressCheckoutPaymentResponseType * SOAP_FMAC4 soap_get_ns1__DoUATPExpressCheckoutPaymentResponseType(struct soap*, ns1__DoUATPExpressCheckoutPaymentResponseType *, const char*, const char*);

inline int soap_read_ns1__DoUATPExpressCheckoutPaymentResponseType(struct soap *soap, ns1__DoUATPExpressCheckoutPaymentResponseType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__DoUATPExpressCheckoutPaymentResponseType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__DoUATPExpressCheckoutPaymentResponseType(struct soap *soap, const char *URL, ns1__DoUATPExpressCheckoutPaymentResponseType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__DoUATPExpressCheckoutPaymentResponseType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__DoUATPExpressCheckoutPaymentResponseType(struct soap *soap, ns1__DoUATPExpressCheckoutPaymentResponseType *p)
{
	if (soap_read_ns1__DoUATPExpressCheckoutPaymentResponseType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__DoUATPExpressCheckoutPaymentRequestType_DEFINED
#define SOAP_TYPE_ns1__DoUATPExpressCheckoutPaymentRequestType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__DoUATPExpressCheckoutPaymentRequestType(struct soap*, const char*, int, const ns1__DoUATPExpressCheckoutPaymentRequestType *, const char*);
SOAP_FMAC3 ns1__DoUATPExpressCheckoutPaymentRequestType * SOAP_FMAC4 soap_in_ns1__DoUATPExpressCheckoutPaymentRequestType(struct soap*, const char*, ns1__DoUATPExpressCheckoutPaymentRequestType *, const char*);
SOAP_FMAC1 ns1__DoUATPExpressCheckoutPaymentRequestType * SOAP_FMAC2 soap_instantiate_ns1__DoUATPExpressCheckoutPaymentRequestType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__DoUATPExpressCheckoutPaymentRequestType * soap_new_ns1__DoUATPExpressCheckoutPaymentRequestType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__DoUATPExpressCheckoutPaymentRequestType(soap, n, NULL, NULL, NULL);
}

inline ns1__DoUATPExpressCheckoutPaymentRequestType * soap_new_req_ns1__DoUATPExpressCheckoutPaymentRequestType(
	struct soap *soap,
	ns3__DoExpressCheckoutPaymentRequestDetailsType *ns3__DoExpressCheckoutPaymentRequestDetails__1,
	const std::string& Version__2)
{
	ns1__DoUATPExpressCheckoutPaymentRequestType *_p = soap_new_ns1__DoUATPExpressCheckoutPaymentRequestType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__DoExpressCheckoutPaymentRequestType::ns3__DoExpressCheckoutPaymentRequestDetails = ns3__DoExpressCheckoutPaymentRequestDetails__1;
		_p->ns3__AbstractRequestType::Version = Version__2;
	}
	return _p;
}

inline ns1__DoUATPExpressCheckoutPaymentRequestType * soap_new_set_ns1__DoUATPExpressCheckoutPaymentRequestType(
	struct soap *soap,
	ns3__DoExpressCheckoutPaymentRequestDetailsType *ns3__DoExpressCheckoutPaymentRequestDetails__1,
	int *ReturnFMFDetails__1,
	const std::vector<enum ns3__DetailLevelCodeType> & DetailLevel__2,
	std::string *ErrorLanguage__2,
	const std::string& Version__2,
	char *__any__2)
{
	ns1__DoUATPExpressCheckoutPaymentRequestType *_p = soap_new_ns1__DoUATPExpressCheckoutPaymentRequestType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__DoExpressCheckoutPaymentRequestType::ns3__DoExpressCheckoutPaymentRequestDetails = ns3__DoExpressCheckoutPaymentRequestDetails__1;
		_p->ns1__DoExpressCheckoutPaymentRequestType::ReturnFMFDetails = ReturnFMFDetails__1;
		_p->ns3__AbstractRequestType::DetailLevel = DetailLevel__2;
		_p->ns3__AbstractRequestType::ErrorLanguage = ErrorLanguage__2;
		_p->ns3__AbstractRequestType::Version = Version__2;
		_p->ns3__AbstractRequestType::__any = __any__2;
	}
	return _p;
}

inline int soap_write_ns1__DoUATPExpressCheckoutPaymentRequestType(struct soap *soap, ns1__DoUATPExpressCheckoutPaymentRequestType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:DoUATPExpressCheckoutPaymentRequestType", p->soap_type() == SOAP_TYPE_ns1__DoUATPExpressCheckoutPaymentRequestType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__DoUATPExpressCheckoutPaymentRequestType(struct soap *soap, const char *URL, ns1__DoUATPExpressCheckoutPaymentRequestType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:DoUATPExpressCheckoutPaymentRequestType", p->soap_type() == SOAP_TYPE_ns1__DoUATPExpressCheckoutPaymentRequestType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__DoUATPExpressCheckoutPaymentRequestType(struct soap *soap, const char *URL, ns1__DoUATPExpressCheckoutPaymentRequestType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:DoUATPExpressCheckoutPaymentRequestType", p->soap_type() == SOAP_TYPE_ns1__DoUATPExpressCheckoutPaymentRequestType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__DoUATPExpressCheckoutPaymentRequestType * SOAP_FMAC4 soap_get_ns1__DoUATPExpressCheckoutPaymentRequestType(struct soap*, ns1__DoUATPExpressCheckoutPaymentRequestType *, const char*, const char*);

inline int soap_read_ns1__DoUATPExpressCheckoutPaymentRequestType(struct soap *soap, ns1__DoUATPExpressCheckoutPaymentRequestType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__DoUATPExpressCheckoutPaymentRequestType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__DoUATPExpressCheckoutPaymentRequestType(struct soap *soap, const char *URL, ns1__DoUATPExpressCheckoutPaymentRequestType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__DoUATPExpressCheckoutPaymentRequestType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__DoUATPExpressCheckoutPaymentRequestType(struct soap *soap, ns1__DoUATPExpressCheckoutPaymentRequestType *p)
{
	if (soap_read_ns1__DoUATPExpressCheckoutPaymentRequestType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__DoExpressCheckoutPaymentResponseType_DEFINED
#define SOAP_TYPE_ns1__DoExpressCheckoutPaymentResponseType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__DoExpressCheckoutPaymentResponseType(struct soap*, const char*, int, const ns1__DoExpressCheckoutPaymentResponseType *, const char*);
SOAP_FMAC3 ns1__DoExpressCheckoutPaymentResponseType * SOAP_FMAC4 soap_in_ns1__DoExpressCheckoutPaymentResponseType(struct soap*, const char*, ns1__DoExpressCheckoutPaymentResponseType *, const char*);
SOAP_FMAC1 ns1__DoExpressCheckoutPaymentResponseType * SOAP_FMAC2 soap_instantiate_ns1__DoExpressCheckoutPaymentResponseType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__DoExpressCheckoutPaymentResponseType * soap_new_ns1__DoExpressCheckoutPaymentResponseType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__DoExpressCheckoutPaymentResponseType(soap, n, NULL, NULL, NULL);
}

inline ns1__DoExpressCheckoutPaymentResponseType * soap_new_req_ns1__DoExpressCheckoutPaymentResponseType(
	struct soap *soap,
	ns3__DoExpressCheckoutPaymentResponseDetailsType *ns3__DoExpressCheckoutPaymentResponseDetails,
	enum ns3__AckCodeType Ack__1,
	const std::string& Version__1,
	const std::string& Build__1)
{
	ns1__DoExpressCheckoutPaymentResponseType *_p = soap_new_ns1__DoExpressCheckoutPaymentResponseType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__DoExpressCheckoutPaymentResponseType::ns3__DoExpressCheckoutPaymentResponseDetails = ns3__DoExpressCheckoutPaymentResponseDetails;
		_p->ns3__AbstractResponseType::Ack = Ack__1;
		_p->ns3__AbstractResponseType::Version = Version__1;
		_p->ns3__AbstractResponseType::Build = Build__1;
	}
	return _p;
}

inline ns1__DoExpressCheckoutPaymentResponseType * soap_new_set_ns1__DoExpressCheckoutPaymentResponseType(
	struct soap *soap,
	ns3__DoExpressCheckoutPaymentResponseDetailsType *ns3__DoExpressCheckoutPaymentResponseDetails,
	ns3__FMFDetailsType *FMFDetails,
	time_t *Timestamp__1,
	enum ns3__AckCodeType Ack__1,
	std::string *CorrelationID__1,
	const std::vector<ns3__ErrorType *> & Errors__1,
	const std::string& Version__1,
	const std::string& Build__1,
	char *__any__1)
{
	ns1__DoExpressCheckoutPaymentResponseType *_p = soap_new_ns1__DoExpressCheckoutPaymentResponseType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__DoExpressCheckoutPaymentResponseType::ns3__DoExpressCheckoutPaymentResponseDetails = ns3__DoExpressCheckoutPaymentResponseDetails;
		_p->ns1__DoExpressCheckoutPaymentResponseType::FMFDetails = FMFDetails;
		_p->ns3__AbstractResponseType::Timestamp = Timestamp__1;
		_p->ns3__AbstractResponseType::Ack = Ack__1;
		_p->ns3__AbstractResponseType::CorrelationID = CorrelationID__1;
		_p->ns3__AbstractResponseType::Errors = Errors__1;
		_p->ns3__AbstractResponseType::Version = Version__1;
		_p->ns3__AbstractResponseType::Build = Build__1;
		_p->ns3__AbstractResponseType::__any = __any__1;
	}
	return _p;
}

inline int soap_write_ns1__DoExpressCheckoutPaymentResponseType(struct soap *soap, ns1__DoExpressCheckoutPaymentResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:DoExpressCheckoutPaymentResponseType", p->soap_type() == SOAP_TYPE_ns1__DoExpressCheckoutPaymentResponseType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__DoExpressCheckoutPaymentResponseType(struct soap *soap, const char *URL, ns1__DoExpressCheckoutPaymentResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:DoExpressCheckoutPaymentResponseType", p->soap_type() == SOAP_TYPE_ns1__DoExpressCheckoutPaymentResponseType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__DoExpressCheckoutPaymentResponseType(struct soap *soap, const char *URL, ns1__DoExpressCheckoutPaymentResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:DoExpressCheckoutPaymentResponseType", p->soap_type() == SOAP_TYPE_ns1__DoExpressCheckoutPaymentResponseType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__DoExpressCheckoutPaymentResponseType * SOAP_FMAC4 soap_get_ns1__DoExpressCheckoutPaymentResponseType(struct soap*, ns1__DoExpressCheckoutPaymentResponseType *, const char*, const char*);

inline int soap_read_ns1__DoExpressCheckoutPaymentResponseType(struct soap *soap, ns1__DoExpressCheckoutPaymentResponseType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__DoExpressCheckoutPaymentResponseType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__DoExpressCheckoutPaymentResponseType(struct soap *soap, const char *URL, ns1__DoExpressCheckoutPaymentResponseType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__DoExpressCheckoutPaymentResponseType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__DoExpressCheckoutPaymentResponseType(struct soap *soap, ns1__DoExpressCheckoutPaymentResponseType *p)
{
	if (soap_read_ns1__DoExpressCheckoutPaymentResponseType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__DoExpressCheckoutPaymentRequestType_DEFINED
#define SOAP_TYPE_ns1__DoExpressCheckoutPaymentRequestType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__DoExpressCheckoutPaymentRequestType(struct soap*, const char*, int, const ns1__DoExpressCheckoutPaymentRequestType *, const char*);
SOAP_FMAC3 ns1__DoExpressCheckoutPaymentRequestType * SOAP_FMAC4 soap_in_ns1__DoExpressCheckoutPaymentRequestType(struct soap*, const char*, ns1__DoExpressCheckoutPaymentRequestType *, const char*);
SOAP_FMAC1 ns1__DoExpressCheckoutPaymentRequestType * SOAP_FMAC2 soap_instantiate_ns1__DoExpressCheckoutPaymentRequestType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__DoExpressCheckoutPaymentRequestType * soap_new_ns1__DoExpressCheckoutPaymentRequestType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__DoExpressCheckoutPaymentRequestType(soap, n, NULL, NULL, NULL);
}

inline ns1__DoExpressCheckoutPaymentRequestType * soap_new_req_ns1__DoExpressCheckoutPaymentRequestType(
	struct soap *soap,
	ns3__DoExpressCheckoutPaymentRequestDetailsType *ns3__DoExpressCheckoutPaymentRequestDetails,
	const std::string& Version__1)
{
	ns1__DoExpressCheckoutPaymentRequestType *_p = soap_new_ns1__DoExpressCheckoutPaymentRequestType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__DoExpressCheckoutPaymentRequestType::ns3__DoExpressCheckoutPaymentRequestDetails = ns3__DoExpressCheckoutPaymentRequestDetails;
		_p->ns3__AbstractRequestType::Version = Version__1;
	}
	return _p;
}

inline ns1__DoExpressCheckoutPaymentRequestType * soap_new_set_ns1__DoExpressCheckoutPaymentRequestType(
	struct soap *soap,
	ns3__DoExpressCheckoutPaymentRequestDetailsType *ns3__DoExpressCheckoutPaymentRequestDetails,
	int *ReturnFMFDetails,
	const std::vector<enum ns3__DetailLevelCodeType> & DetailLevel__1,
	std::string *ErrorLanguage__1,
	const std::string& Version__1,
	char *__any__1)
{
	ns1__DoExpressCheckoutPaymentRequestType *_p = soap_new_ns1__DoExpressCheckoutPaymentRequestType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__DoExpressCheckoutPaymentRequestType::ns3__DoExpressCheckoutPaymentRequestDetails = ns3__DoExpressCheckoutPaymentRequestDetails;
		_p->ns1__DoExpressCheckoutPaymentRequestType::ReturnFMFDetails = ReturnFMFDetails;
		_p->ns3__AbstractRequestType::DetailLevel = DetailLevel__1;
		_p->ns3__AbstractRequestType::ErrorLanguage = ErrorLanguage__1;
		_p->ns3__AbstractRequestType::Version = Version__1;
		_p->ns3__AbstractRequestType::__any = __any__1;
	}
	return _p;
}

inline int soap_write_ns1__DoExpressCheckoutPaymentRequestType(struct soap *soap, ns1__DoExpressCheckoutPaymentRequestType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:DoExpressCheckoutPaymentRequestType", p->soap_type() == SOAP_TYPE_ns1__DoExpressCheckoutPaymentRequestType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__DoExpressCheckoutPaymentRequestType(struct soap *soap, const char *URL, ns1__DoExpressCheckoutPaymentRequestType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:DoExpressCheckoutPaymentRequestType", p->soap_type() == SOAP_TYPE_ns1__DoExpressCheckoutPaymentRequestType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__DoExpressCheckoutPaymentRequestType(struct soap *soap, const char *URL, ns1__DoExpressCheckoutPaymentRequestType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:DoExpressCheckoutPaymentRequestType", p->soap_type() == SOAP_TYPE_ns1__DoExpressCheckoutPaymentRequestType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__DoExpressCheckoutPaymentRequestType * SOAP_FMAC4 soap_get_ns1__DoExpressCheckoutPaymentRequestType(struct soap*, ns1__DoExpressCheckoutPaymentRequestType *, const char*, const char*);

inline int soap_read_ns1__DoExpressCheckoutPaymentRequestType(struct soap *soap, ns1__DoExpressCheckoutPaymentRequestType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__DoExpressCheckoutPaymentRequestType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__DoExpressCheckoutPaymentRequestType(struct soap *soap, const char *URL, ns1__DoExpressCheckoutPaymentRequestType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__DoExpressCheckoutPaymentRequestType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__DoExpressCheckoutPaymentRequestType(struct soap *soap, ns1__DoExpressCheckoutPaymentRequestType *p)
{
	if (soap_read_ns1__DoExpressCheckoutPaymentRequestType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__GetExpressCheckoutDetailsResponseType_DEFINED
#define SOAP_TYPE_ns1__GetExpressCheckoutDetailsResponseType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__GetExpressCheckoutDetailsResponseType(struct soap*, const char*, int, const ns1__GetExpressCheckoutDetailsResponseType *, const char*);
SOAP_FMAC3 ns1__GetExpressCheckoutDetailsResponseType * SOAP_FMAC4 soap_in_ns1__GetExpressCheckoutDetailsResponseType(struct soap*, const char*, ns1__GetExpressCheckoutDetailsResponseType *, const char*);
SOAP_FMAC1 ns1__GetExpressCheckoutDetailsResponseType * SOAP_FMAC2 soap_instantiate_ns1__GetExpressCheckoutDetailsResponseType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__GetExpressCheckoutDetailsResponseType * soap_new_ns1__GetExpressCheckoutDetailsResponseType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__GetExpressCheckoutDetailsResponseType(soap, n, NULL, NULL, NULL);
}

inline ns1__GetExpressCheckoutDetailsResponseType * soap_new_req_ns1__GetExpressCheckoutDetailsResponseType(
	struct soap *soap,
	ns3__GetExpressCheckoutDetailsResponseDetailsType *ns3__GetExpressCheckoutDetailsResponseDetails,
	enum ns3__AckCodeType Ack__1,
	const std::string& Version__1,
	const std::string& Build__1)
{
	ns1__GetExpressCheckoutDetailsResponseType *_p = soap_new_ns1__GetExpressCheckoutDetailsResponseType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__GetExpressCheckoutDetailsResponseType::ns3__GetExpressCheckoutDetailsResponseDetails = ns3__GetExpressCheckoutDetailsResponseDetails;
		_p->ns3__AbstractResponseType::Ack = Ack__1;
		_p->ns3__AbstractResponseType::Version = Version__1;
		_p->ns3__AbstractResponseType::Build = Build__1;
	}
	return _p;
}

inline ns1__GetExpressCheckoutDetailsResponseType * soap_new_set_ns1__GetExpressCheckoutDetailsResponseType(
	struct soap *soap,
	ns3__GetExpressCheckoutDetailsResponseDetailsType *ns3__GetExpressCheckoutDetailsResponseDetails,
	time_t *Timestamp__1,
	enum ns3__AckCodeType Ack__1,
	std::string *CorrelationID__1,
	const std::vector<ns3__ErrorType *> & Errors__1,
	const std::string& Version__1,
	const std::string& Build__1,
	char *__any__1)
{
	ns1__GetExpressCheckoutDetailsResponseType *_p = soap_new_ns1__GetExpressCheckoutDetailsResponseType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__GetExpressCheckoutDetailsResponseType::ns3__GetExpressCheckoutDetailsResponseDetails = ns3__GetExpressCheckoutDetailsResponseDetails;
		_p->ns3__AbstractResponseType::Timestamp = Timestamp__1;
		_p->ns3__AbstractResponseType::Ack = Ack__1;
		_p->ns3__AbstractResponseType::CorrelationID = CorrelationID__1;
		_p->ns3__AbstractResponseType::Errors = Errors__1;
		_p->ns3__AbstractResponseType::Version = Version__1;
		_p->ns3__AbstractResponseType::Build = Build__1;
		_p->ns3__AbstractResponseType::__any = __any__1;
	}
	return _p;
}

inline int soap_write_ns1__GetExpressCheckoutDetailsResponseType(struct soap *soap, ns1__GetExpressCheckoutDetailsResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetExpressCheckoutDetailsResponseType", p->soap_type() == SOAP_TYPE_ns1__GetExpressCheckoutDetailsResponseType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__GetExpressCheckoutDetailsResponseType(struct soap *soap, const char *URL, ns1__GetExpressCheckoutDetailsResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetExpressCheckoutDetailsResponseType", p->soap_type() == SOAP_TYPE_ns1__GetExpressCheckoutDetailsResponseType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__GetExpressCheckoutDetailsResponseType(struct soap *soap, const char *URL, ns1__GetExpressCheckoutDetailsResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetExpressCheckoutDetailsResponseType", p->soap_type() == SOAP_TYPE_ns1__GetExpressCheckoutDetailsResponseType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__GetExpressCheckoutDetailsResponseType * SOAP_FMAC4 soap_get_ns1__GetExpressCheckoutDetailsResponseType(struct soap*, ns1__GetExpressCheckoutDetailsResponseType *, const char*, const char*);

inline int soap_read_ns1__GetExpressCheckoutDetailsResponseType(struct soap *soap, ns1__GetExpressCheckoutDetailsResponseType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__GetExpressCheckoutDetailsResponseType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__GetExpressCheckoutDetailsResponseType(struct soap *soap, const char *URL, ns1__GetExpressCheckoutDetailsResponseType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__GetExpressCheckoutDetailsResponseType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__GetExpressCheckoutDetailsResponseType(struct soap *soap, ns1__GetExpressCheckoutDetailsResponseType *p)
{
	if (soap_read_ns1__GetExpressCheckoutDetailsResponseType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__GetExpressCheckoutDetailsRequestType_DEFINED
#define SOAP_TYPE_ns1__GetExpressCheckoutDetailsRequestType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__GetExpressCheckoutDetailsRequestType(struct soap*, const char*, int, const ns1__GetExpressCheckoutDetailsRequestType *, const char*);
SOAP_FMAC3 ns1__GetExpressCheckoutDetailsRequestType * SOAP_FMAC4 soap_in_ns1__GetExpressCheckoutDetailsRequestType(struct soap*, const char*, ns1__GetExpressCheckoutDetailsRequestType *, const char*);
SOAP_FMAC1 ns1__GetExpressCheckoutDetailsRequestType * SOAP_FMAC2 soap_instantiate_ns1__GetExpressCheckoutDetailsRequestType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__GetExpressCheckoutDetailsRequestType * soap_new_ns1__GetExpressCheckoutDetailsRequestType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__GetExpressCheckoutDetailsRequestType(soap, n, NULL, NULL, NULL);
}

inline ns1__GetExpressCheckoutDetailsRequestType * soap_new_req_ns1__GetExpressCheckoutDetailsRequestType(
	struct soap *soap,
	const std::string& Token,
	const std::string& Version__1)
{
	ns1__GetExpressCheckoutDetailsRequestType *_p = soap_new_ns1__GetExpressCheckoutDetailsRequestType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__GetExpressCheckoutDetailsRequestType::Token = Token;
		_p->ns3__AbstractRequestType::Version = Version__1;
	}
	return _p;
}

inline ns1__GetExpressCheckoutDetailsRequestType * soap_new_set_ns1__GetExpressCheckoutDetailsRequestType(
	struct soap *soap,
	const std::string& Token,
	const std::vector<enum ns3__DetailLevelCodeType> & DetailLevel__1,
	std::string *ErrorLanguage__1,
	const std::string& Version__1,
	char *__any__1)
{
	ns1__GetExpressCheckoutDetailsRequestType *_p = soap_new_ns1__GetExpressCheckoutDetailsRequestType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__GetExpressCheckoutDetailsRequestType::Token = Token;
		_p->ns3__AbstractRequestType::DetailLevel = DetailLevel__1;
		_p->ns3__AbstractRequestType::ErrorLanguage = ErrorLanguage__1;
		_p->ns3__AbstractRequestType::Version = Version__1;
		_p->ns3__AbstractRequestType::__any = __any__1;
	}
	return _p;
}

inline int soap_write_ns1__GetExpressCheckoutDetailsRequestType(struct soap *soap, ns1__GetExpressCheckoutDetailsRequestType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetExpressCheckoutDetailsRequestType", p->soap_type() == SOAP_TYPE_ns1__GetExpressCheckoutDetailsRequestType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__GetExpressCheckoutDetailsRequestType(struct soap *soap, const char *URL, ns1__GetExpressCheckoutDetailsRequestType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetExpressCheckoutDetailsRequestType", p->soap_type() == SOAP_TYPE_ns1__GetExpressCheckoutDetailsRequestType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__GetExpressCheckoutDetailsRequestType(struct soap *soap, const char *URL, ns1__GetExpressCheckoutDetailsRequestType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetExpressCheckoutDetailsRequestType", p->soap_type() == SOAP_TYPE_ns1__GetExpressCheckoutDetailsRequestType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__GetExpressCheckoutDetailsRequestType * SOAP_FMAC4 soap_get_ns1__GetExpressCheckoutDetailsRequestType(struct soap*, ns1__GetExpressCheckoutDetailsRequestType *, const char*, const char*);

inline int soap_read_ns1__GetExpressCheckoutDetailsRequestType(struct soap *soap, ns1__GetExpressCheckoutDetailsRequestType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__GetExpressCheckoutDetailsRequestType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__GetExpressCheckoutDetailsRequestType(struct soap *soap, const char *URL, ns1__GetExpressCheckoutDetailsRequestType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__GetExpressCheckoutDetailsRequestType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__GetExpressCheckoutDetailsRequestType(struct soap *soap, ns1__GetExpressCheckoutDetailsRequestType *p)
{
	if (soap_read_ns1__GetExpressCheckoutDetailsRequestType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__ExecuteCheckoutOperationsResponseType_DEFINED
#define SOAP_TYPE_ns1__ExecuteCheckoutOperationsResponseType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__ExecuteCheckoutOperationsResponseType(struct soap*, const char*, int, const ns1__ExecuteCheckoutOperationsResponseType *, const char*);
SOAP_FMAC3 ns1__ExecuteCheckoutOperationsResponseType * SOAP_FMAC4 soap_in_ns1__ExecuteCheckoutOperationsResponseType(struct soap*, const char*, ns1__ExecuteCheckoutOperationsResponseType *, const char*);
SOAP_FMAC1 ns1__ExecuteCheckoutOperationsResponseType * SOAP_FMAC2 soap_instantiate_ns1__ExecuteCheckoutOperationsResponseType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__ExecuteCheckoutOperationsResponseType * soap_new_ns1__ExecuteCheckoutOperationsResponseType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__ExecuteCheckoutOperationsResponseType(soap, n, NULL, NULL, NULL);
}

inline ns1__ExecuteCheckoutOperationsResponseType * soap_new_req_ns1__ExecuteCheckoutOperationsResponseType(
	struct soap *soap,
	ns3__ExecuteCheckoutOperationsResponseDetailsType *ns3__ExecuteCheckoutOperationsResponseDetails,
	enum ns3__AckCodeType Ack__1,
	const std::string& Version__1,
	const std::string& Build__1)
{
	ns1__ExecuteCheckoutOperationsResponseType *_p = soap_new_ns1__ExecuteCheckoutOperationsResponseType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__ExecuteCheckoutOperationsResponseType::ns3__ExecuteCheckoutOperationsResponseDetails = ns3__ExecuteCheckoutOperationsResponseDetails;
		_p->ns3__AbstractResponseType::Ack = Ack__1;
		_p->ns3__AbstractResponseType::Version = Version__1;
		_p->ns3__AbstractResponseType::Build = Build__1;
	}
	return _p;
}

inline ns1__ExecuteCheckoutOperationsResponseType * soap_new_set_ns1__ExecuteCheckoutOperationsResponseType(
	struct soap *soap,
	ns3__ExecuteCheckoutOperationsResponseDetailsType *ns3__ExecuteCheckoutOperationsResponseDetails,
	time_t *Timestamp__1,
	enum ns3__AckCodeType Ack__1,
	std::string *CorrelationID__1,
	const std::vector<ns3__ErrorType *> & Errors__1,
	const std::string& Version__1,
	const std::string& Build__1,
	char *__any__1)
{
	ns1__ExecuteCheckoutOperationsResponseType *_p = soap_new_ns1__ExecuteCheckoutOperationsResponseType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__ExecuteCheckoutOperationsResponseType::ns3__ExecuteCheckoutOperationsResponseDetails = ns3__ExecuteCheckoutOperationsResponseDetails;
		_p->ns3__AbstractResponseType::Timestamp = Timestamp__1;
		_p->ns3__AbstractResponseType::Ack = Ack__1;
		_p->ns3__AbstractResponseType::CorrelationID = CorrelationID__1;
		_p->ns3__AbstractResponseType::Errors = Errors__1;
		_p->ns3__AbstractResponseType::Version = Version__1;
		_p->ns3__AbstractResponseType::Build = Build__1;
		_p->ns3__AbstractResponseType::__any = __any__1;
	}
	return _p;
}

inline int soap_write_ns1__ExecuteCheckoutOperationsResponseType(struct soap *soap, ns1__ExecuteCheckoutOperationsResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ExecuteCheckoutOperationsResponseType", p->soap_type() == SOAP_TYPE_ns1__ExecuteCheckoutOperationsResponseType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__ExecuteCheckoutOperationsResponseType(struct soap *soap, const char *URL, ns1__ExecuteCheckoutOperationsResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ExecuteCheckoutOperationsResponseType", p->soap_type() == SOAP_TYPE_ns1__ExecuteCheckoutOperationsResponseType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__ExecuteCheckoutOperationsResponseType(struct soap *soap, const char *URL, ns1__ExecuteCheckoutOperationsResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ExecuteCheckoutOperationsResponseType", p->soap_type() == SOAP_TYPE_ns1__ExecuteCheckoutOperationsResponseType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__ExecuteCheckoutOperationsResponseType * SOAP_FMAC4 soap_get_ns1__ExecuteCheckoutOperationsResponseType(struct soap*, ns1__ExecuteCheckoutOperationsResponseType *, const char*, const char*);

inline int soap_read_ns1__ExecuteCheckoutOperationsResponseType(struct soap *soap, ns1__ExecuteCheckoutOperationsResponseType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__ExecuteCheckoutOperationsResponseType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__ExecuteCheckoutOperationsResponseType(struct soap *soap, const char *URL, ns1__ExecuteCheckoutOperationsResponseType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__ExecuteCheckoutOperationsResponseType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__ExecuteCheckoutOperationsResponseType(struct soap *soap, ns1__ExecuteCheckoutOperationsResponseType *p)
{
	if (soap_read_ns1__ExecuteCheckoutOperationsResponseType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__ExecuteCheckoutOperationsRequestType_DEFINED
#define SOAP_TYPE_ns1__ExecuteCheckoutOperationsRequestType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__ExecuteCheckoutOperationsRequestType(struct soap*, const char*, int, const ns1__ExecuteCheckoutOperationsRequestType *, const char*);
SOAP_FMAC3 ns1__ExecuteCheckoutOperationsRequestType * SOAP_FMAC4 soap_in_ns1__ExecuteCheckoutOperationsRequestType(struct soap*, const char*, ns1__ExecuteCheckoutOperationsRequestType *, const char*);
SOAP_FMAC1 ns1__ExecuteCheckoutOperationsRequestType * SOAP_FMAC2 soap_instantiate_ns1__ExecuteCheckoutOperationsRequestType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__ExecuteCheckoutOperationsRequestType * soap_new_ns1__ExecuteCheckoutOperationsRequestType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__ExecuteCheckoutOperationsRequestType(soap, n, NULL, NULL, NULL);
}

inline ns1__ExecuteCheckoutOperationsRequestType * soap_new_req_ns1__ExecuteCheckoutOperationsRequestType(
	struct soap *soap,
	ns3__ExecuteCheckoutOperationsRequestDetailsType *ns3__ExecuteCheckoutOperationsRequestDetails,
	const std::string& Version__1)
{
	ns1__ExecuteCheckoutOperationsRequestType *_p = soap_new_ns1__ExecuteCheckoutOperationsRequestType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__ExecuteCheckoutOperationsRequestType::ns3__ExecuteCheckoutOperationsRequestDetails = ns3__ExecuteCheckoutOperationsRequestDetails;
		_p->ns3__AbstractRequestType::Version = Version__1;
	}
	return _p;
}

inline ns1__ExecuteCheckoutOperationsRequestType * soap_new_set_ns1__ExecuteCheckoutOperationsRequestType(
	struct soap *soap,
	ns3__ExecuteCheckoutOperationsRequestDetailsType *ns3__ExecuteCheckoutOperationsRequestDetails,
	const std::vector<enum ns3__DetailLevelCodeType> & DetailLevel__1,
	std::string *ErrorLanguage__1,
	const std::string& Version__1,
	char *__any__1)
{
	ns1__ExecuteCheckoutOperationsRequestType *_p = soap_new_ns1__ExecuteCheckoutOperationsRequestType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__ExecuteCheckoutOperationsRequestType::ns3__ExecuteCheckoutOperationsRequestDetails = ns3__ExecuteCheckoutOperationsRequestDetails;
		_p->ns3__AbstractRequestType::DetailLevel = DetailLevel__1;
		_p->ns3__AbstractRequestType::ErrorLanguage = ErrorLanguage__1;
		_p->ns3__AbstractRequestType::Version = Version__1;
		_p->ns3__AbstractRequestType::__any = __any__1;
	}
	return _p;
}

inline int soap_write_ns1__ExecuteCheckoutOperationsRequestType(struct soap *soap, ns1__ExecuteCheckoutOperationsRequestType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ExecuteCheckoutOperationsRequestType", p->soap_type() == SOAP_TYPE_ns1__ExecuteCheckoutOperationsRequestType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__ExecuteCheckoutOperationsRequestType(struct soap *soap, const char *URL, ns1__ExecuteCheckoutOperationsRequestType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ExecuteCheckoutOperationsRequestType", p->soap_type() == SOAP_TYPE_ns1__ExecuteCheckoutOperationsRequestType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__ExecuteCheckoutOperationsRequestType(struct soap *soap, const char *URL, ns1__ExecuteCheckoutOperationsRequestType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ExecuteCheckoutOperationsRequestType", p->soap_type() == SOAP_TYPE_ns1__ExecuteCheckoutOperationsRequestType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__ExecuteCheckoutOperationsRequestType * SOAP_FMAC4 soap_get_ns1__ExecuteCheckoutOperationsRequestType(struct soap*, ns1__ExecuteCheckoutOperationsRequestType *, const char*, const char*);

inline int soap_read_ns1__ExecuteCheckoutOperationsRequestType(struct soap *soap, ns1__ExecuteCheckoutOperationsRequestType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__ExecuteCheckoutOperationsRequestType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__ExecuteCheckoutOperationsRequestType(struct soap *soap, const char *URL, ns1__ExecuteCheckoutOperationsRequestType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__ExecuteCheckoutOperationsRequestType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__ExecuteCheckoutOperationsRequestType(struct soap *soap, ns1__ExecuteCheckoutOperationsRequestType *p)
{
	if (soap_read_ns1__ExecuteCheckoutOperationsRequestType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__SetExpressCheckoutResponseType_DEFINED
#define SOAP_TYPE_ns1__SetExpressCheckoutResponseType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__SetExpressCheckoutResponseType(struct soap*, const char*, int, const ns1__SetExpressCheckoutResponseType *, const char*);
SOAP_FMAC3 ns1__SetExpressCheckoutResponseType * SOAP_FMAC4 soap_in_ns1__SetExpressCheckoutResponseType(struct soap*, const char*, ns1__SetExpressCheckoutResponseType *, const char*);
SOAP_FMAC1 ns1__SetExpressCheckoutResponseType * SOAP_FMAC2 soap_instantiate_ns1__SetExpressCheckoutResponseType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__SetExpressCheckoutResponseType * soap_new_ns1__SetExpressCheckoutResponseType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__SetExpressCheckoutResponseType(soap, n, NULL, NULL, NULL);
}

inline ns1__SetExpressCheckoutResponseType * soap_new_req_ns1__SetExpressCheckoutResponseType(
	struct soap *soap,
	enum ns3__AckCodeType Ack__1,
	const std::string& Version__1,
	const std::string& Build__1)
{
	ns1__SetExpressCheckoutResponseType *_p = soap_new_ns1__SetExpressCheckoutResponseType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__AbstractResponseType::Ack = Ack__1;
		_p->ns3__AbstractResponseType::Version = Version__1;
		_p->ns3__AbstractResponseType::Build = Build__1;
	}
	return _p;
}

inline ns1__SetExpressCheckoutResponseType * soap_new_set_ns1__SetExpressCheckoutResponseType(
	struct soap *soap,
	std::string *Token,
	time_t *Timestamp__1,
	enum ns3__AckCodeType Ack__1,
	std::string *CorrelationID__1,
	const std::vector<ns3__ErrorType *> & Errors__1,
	const std::string& Version__1,
	const std::string& Build__1,
	char *__any__1)
{
	ns1__SetExpressCheckoutResponseType *_p = soap_new_ns1__SetExpressCheckoutResponseType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__SetExpressCheckoutResponseType::Token = Token;
		_p->ns3__AbstractResponseType::Timestamp = Timestamp__1;
		_p->ns3__AbstractResponseType::Ack = Ack__1;
		_p->ns3__AbstractResponseType::CorrelationID = CorrelationID__1;
		_p->ns3__AbstractResponseType::Errors = Errors__1;
		_p->ns3__AbstractResponseType::Version = Version__1;
		_p->ns3__AbstractResponseType::Build = Build__1;
		_p->ns3__AbstractResponseType::__any = __any__1;
	}
	return _p;
}

inline int soap_write_ns1__SetExpressCheckoutResponseType(struct soap *soap, ns1__SetExpressCheckoutResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SetExpressCheckoutResponseType", p->soap_type() == SOAP_TYPE_ns1__SetExpressCheckoutResponseType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__SetExpressCheckoutResponseType(struct soap *soap, const char *URL, ns1__SetExpressCheckoutResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SetExpressCheckoutResponseType", p->soap_type() == SOAP_TYPE_ns1__SetExpressCheckoutResponseType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__SetExpressCheckoutResponseType(struct soap *soap, const char *URL, ns1__SetExpressCheckoutResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SetExpressCheckoutResponseType", p->soap_type() == SOAP_TYPE_ns1__SetExpressCheckoutResponseType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__SetExpressCheckoutResponseType * SOAP_FMAC4 soap_get_ns1__SetExpressCheckoutResponseType(struct soap*, ns1__SetExpressCheckoutResponseType *, const char*, const char*);

inline int soap_read_ns1__SetExpressCheckoutResponseType(struct soap *soap, ns1__SetExpressCheckoutResponseType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__SetExpressCheckoutResponseType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__SetExpressCheckoutResponseType(struct soap *soap, const char *URL, ns1__SetExpressCheckoutResponseType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__SetExpressCheckoutResponseType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__SetExpressCheckoutResponseType(struct soap *soap, ns1__SetExpressCheckoutResponseType *p)
{
	if (soap_read_ns1__SetExpressCheckoutResponseType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__SetExpressCheckoutRequestType_DEFINED
#define SOAP_TYPE_ns1__SetExpressCheckoutRequestType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__SetExpressCheckoutRequestType(struct soap*, const char*, int, const ns1__SetExpressCheckoutRequestType *, const char*);
SOAP_FMAC3 ns1__SetExpressCheckoutRequestType * SOAP_FMAC4 soap_in_ns1__SetExpressCheckoutRequestType(struct soap*, const char*, ns1__SetExpressCheckoutRequestType *, const char*);
SOAP_FMAC1 ns1__SetExpressCheckoutRequestType * SOAP_FMAC2 soap_instantiate_ns1__SetExpressCheckoutRequestType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__SetExpressCheckoutRequestType * soap_new_ns1__SetExpressCheckoutRequestType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__SetExpressCheckoutRequestType(soap, n, NULL, NULL, NULL);
}

inline ns1__SetExpressCheckoutRequestType * soap_new_req_ns1__SetExpressCheckoutRequestType(
	struct soap *soap,
	ns3__SetExpressCheckoutRequestDetailsType *ns3__SetExpressCheckoutRequestDetails,
	const std::string& Version__1)
{
	ns1__SetExpressCheckoutRequestType *_p = soap_new_ns1__SetExpressCheckoutRequestType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__SetExpressCheckoutRequestType::ns3__SetExpressCheckoutRequestDetails = ns3__SetExpressCheckoutRequestDetails;
		_p->ns3__AbstractRequestType::Version = Version__1;
	}
	return _p;
}

inline ns1__SetExpressCheckoutRequestType * soap_new_set_ns1__SetExpressCheckoutRequestType(
	struct soap *soap,
	ns3__SetExpressCheckoutRequestDetailsType *ns3__SetExpressCheckoutRequestDetails,
	const std::vector<enum ns3__DetailLevelCodeType> & DetailLevel__1,
	std::string *ErrorLanguage__1,
	const std::string& Version__1,
	char *__any__1)
{
	ns1__SetExpressCheckoutRequestType *_p = soap_new_ns1__SetExpressCheckoutRequestType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__SetExpressCheckoutRequestType::ns3__SetExpressCheckoutRequestDetails = ns3__SetExpressCheckoutRequestDetails;
		_p->ns3__AbstractRequestType::DetailLevel = DetailLevel__1;
		_p->ns3__AbstractRequestType::ErrorLanguage = ErrorLanguage__1;
		_p->ns3__AbstractRequestType::Version = Version__1;
		_p->ns3__AbstractRequestType::__any = __any__1;
	}
	return _p;
}

inline int soap_write_ns1__SetExpressCheckoutRequestType(struct soap *soap, ns1__SetExpressCheckoutRequestType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SetExpressCheckoutRequestType", p->soap_type() == SOAP_TYPE_ns1__SetExpressCheckoutRequestType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__SetExpressCheckoutRequestType(struct soap *soap, const char *URL, ns1__SetExpressCheckoutRequestType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SetExpressCheckoutRequestType", p->soap_type() == SOAP_TYPE_ns1__SetExpressCheckoutRequestType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__SetExpressCheckoutRequestType(struct soap *soap, const char *URL, ns1__SetExpressCheckoutRequestType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SetExpressCheckoutRequestType", p->soap_type() == SOAP_TYPE_ns1__SetExpressCheckoutRequestType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__SetExpressCheckoutRequestType * SOAP_FMAC4 soap_get_ns1__SetExpressCheckoutRequestType(struct soap*, ns1__SetExpressCheckoutRequestType *, const char*, const char*);

inline int soap_read_ns1__SetExpressCheckoutRequestType(struct soap *soap, ns1__SetExpressCheckoutRequestType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__SetExpressCheckoutRequestType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__SetExpressCheckoutRequestType(struct soap *soap, const char *URL, ns1__SetExpressCheckoutRequestType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__SetExpressCheckoutRequestType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__SetExpressCheckoutRequestType(struct soap *soap, ns1__SetExpressCheckoutRequestType *p)
{
	if (soap_read_ns1__SetExpressCheckoutRequestType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__GetIncentiveEvaluationResponseType_DEFINED
#define SOAP_TYPE_ns1__GetIncentiveEvaluationResponseType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__GetIncentiveEvaluationResponseType(struct soap*, const char*, int, const ns1__GetIncentiveEvaluationResponseType *, const char*);
SOAP_FMAC3 ns1__GetIncentiveEvaluationResponseType * SOAP_FMAC4 soap_in_ns1__GetIncentiveEvaluationResponseType(struct soap*, const char*, ns1__GetIncentiveEvaluationResponseType *, const char*);
SOAP_FMAC1 ns1__GetIncentiveEvaluationResponseType * SOAP_FMAC2 soap_instantiate_ns1__GetIncentiveEvaluationResponseType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__GetIncentiveEvaluationResponseType * soap_new_ns1__GetIncentiveEvaluationResponseType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__GetIncentiveEvaluationResponseType(soap, n, NULL, NULL, NULL);
}

inline ns1__GetIncentiveEvaluationResponseType * soap_new_req_ns1__GetIncentiveEvaluationResponseType(
	struct soap *soap,
	ns3__GetIncentiveEvaluationResponseDetailsType *ns3__GetIncentiveEvaluationResponseDetails,
	enum ns3__AckCodeType Ack__1,
	const std::string& Version__1,
	const std::string& Build__1)
{
	ns1__GetIncentiveEvaluationResponseType *_p = soap_new_ns1__GetIncentiveEvaluationResponseType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__GetIncentiveEvaluationResponseType::ns3__GetIncentiveEvaluationResponseDetails = ns3__GetIncentiveEvaluationResponseDetails;
		_p->ns3__AbstractResponseType::Ack = Ack__1;
		_p->ns3__AbstractResponseType::Version = Version__1;
		_p->ns3__AbstractResponseType::Build = Build__1;
	}
	return _p;
}

inline ns1__GetIncentiveEvaluationResponseType * soap_new_set_ns1__GetIncentiveEvaluationResponseType(
	struct soap *soap,
	ns3__GetIncentiveEvaluationResponseDetailsType *ns3__GetIncentiveEvaluationResponseDetails,
	time_t *Timestamp__1,
	enum ns3__AckCodeType Ack__1,
	std::string *CorrelationID__1,
	const std::vector<ns3__ErrorType *> & Errors__1,
	const std::string& Version__1,
	const std::string& Build__1,
	char *__any__1)
{
	ns1__GetIncentiveEvaluationResponseType *_p = soap_new_ns1__GetIncentiveEvaluationResponseType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__GetIncentiveEvaluationResponseType::ns3__GetIncentiveEvaluationResponseDetails = ns3__GetIncentiveEvaluationResponseDetails;
		_p->ns3__AbstractResponseType::Timestamp = Timestamp__1;
		_p->ns3__AbstractResponseType::Ack = Ack__1;
		_p->ns3__AbstractResponseType::CorrelationID = CorrelationID__1;
		_p->ns3__AbstractResponseType::Errors = Errors__1;
		_p->ns3__AbstractResponseType::Version = Version__1;
		_p->ns3__AbstractResponseType::Build = Build__1;
		_p->ns3__AbstractResponseType::__any = __any__1;
	}
	return _p;
}

inline int soap_write_ns1__GetIncentiveEvaluationResponseType(struct soap *soap, ns1__GetIncentiveEvaluationResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetIncentiveEvaluationResponseType", p->soap_type() == SOAP_TYPE_ns1__GetIncentiveEvaluationResponseType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__GetIncentiveEvaluationResponseType(struct soap *soap, const char *URL, ns1__GetIncentiveEvaluationResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetIncentiveEvaluationResponseType", p->soap_type() == SOAP_TYPE_ns1__GetIncentiveEvaluationResponseType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__GetIncentiveEvaluationResponseType(struct soap *soap, const char *URL, ns1__GetIncentiveEvaluationResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetIncentiveEvaluationResponseType", p->soap_type() == SOAP_TYPE_ns1__GetIncentiveEvaluationResponseType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__GetIncentiveEvaluationResponseType * SOAP_FMAC4 soap_get_ns1__GetIncentiveEvaluationResponseType(struct soap*, ns1__GetIncentiveEvaluationResponseType *, const char*, const char*);

inline int soap_read_ns1__GetIncentiveEvaluationResponseType(struct soap *soap, ns1__GetIncentiveEvaluationResponseType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__GetIncentiveEvaluationResponseType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__GetIncentiveEvaluationResponseType(struct soap *soap, const char *URL, ns1__GetIncentiveEvaluationResponseType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__GetIncentiveEvaluationResponseType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__GetIncentiveEvaluationResponseType(struct soap *soap, ns1__GetIncentiveEvaluationResponseType *p)
{
	if (soap_read_ns1__GetIncentiveEvaluationResponseType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__GetIncentiveEvaluationRequestType_DEFINED
#define SOAP_TYPE_ns1__GetIncentiveEvaluationRequestType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__GetIncentiveEvaluationRequestType(struct soap*, const char*, int, const ns1__GetIncentiveEvaluationRequestType *, const char*);
SOAP_FMAC3 ns1__GetIncentiveEvaluationRequestType * SOAP_FMAC4 soap_in_ns1__GetIncentiveEvaluationRequestType(struct soap*, const char*, ns1__GetIncentiveEvaluationRequestType *, const char*);
SOAP_FMAC1 ns1__GetIncentiveEvaluationRequestType * SOAP_FMAC2 soap_instantiate_ns1__GetIncentiveEvaluationRequestType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__GetIncentiveEvaluationRequestType * soap_new_ns1__GetIncentiveEvaluationRequestType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__GetIncentiveEvaluationRequestType(soap, n, NULL, NULL, NULL);
}

inline ns1__GetIncentiveEvaluationRequestType * soap_new_req_ns1__GetIncentiveEvaluationRequestType(
	struct soap *soap,
	ns3__GetIncentiveEvaluationRequestDetailsType *ns3__GetIncentiveEvaluationRequestDetails,
	const std::string& Version__1)
{
	ns1__GetIncentiveEvaluationRequestType *_p = soap_new_ns1__GetIncentiveEvaluationRequestType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__GetIncentiveEvaluationRequestType::ns3__GetIncentiveEvaluationRequestDetails = ns3__GetIncentiveEvaluationRequestDetails;
		_p->ns3__AbstractRequestType::Version = Version__1;
	}
	return _p;
}

inline ns1__GetIncentiveEvaluationRequestType * soap_new_set_ns1__GetIncentiveEvaluationRequestType(
	struct soap *soap,
	ns3__GetIncentiveEvaluationRequestDetailsType *ns3__GetIncentiveEvaluationRequestDetails,
	const std::vector<enum ns3__DetailLevelCodeType> & DetailLevel__1,
	std::string *ErrorLanguage__1,
	const std::string& Version__1,
	char *__any__1)
{
	ns1__GetIncentiveEvaluationRequestType *_p = soap_new_ns1__GetIncentiveEvaluationRequestType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__GetIncentiveEvaluationRequestType::ns3__GetIncentiveEvaluationRequestDetails = ns3__GetIncentiveEvaluationRequestDetails;
		_p->ns3__AbstractRequestType::DetailLevel = DetailLevel__1;
		_p->ns3__AbstractRequestType::ErrorLanguage = ErrorLanguage__1;
		_p->ns3__AbstractRequestType::Version = Version__1;
		_p->ns3__AbstractRequestType::__any = __any__1;
	}
	return _p;
}

inline int soap_write_ns1__GetIncentiveEvaluationRequestType(struct soap *soap, ns1__GetIncentiveEvaluationRequestType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetIncentiveEvaluationRequestType", p->soap_type() == SOAP_TYPE_ns1__GetIncentiveEvaluationRequestType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__GetIncentiveEvaluationRequestType(struct soap *soap, const char *URL, ns1__GetIncentiveEvaluationRequestType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetIncentiveEvaluationRequestType", p->soap_type() == SOAP_TYPE_ns1__GetIncentiveEvaluationRequestType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__GetIncentiveEvaluationRequestType(struct soap *soap, const char *URL, ns1__GetIncentiveEvaluationRequestType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetIncentiveEvaluationRequestType", p->soap_type() == SOAP_TYPE_ns1__GetIncentiveEvaluationRequestType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__GetIncentiveEvaluationRequestType * SOAP_FMAC4 soap_get_ns1__GetIncentiveEvaluationRequestType(struct soap*, ns1__GetIncentiveEvaluationRequestType *, const char*, const char*);

inline int soap_read_ns1__GetIncentiveEvaluationRequestType(struct soap *soap, ns1__GetIncentiveEvaluationRequestType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__GetIncentiveEvaluationRequestType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__GetIncentiveEvaluationRequestType(struct soap *soap, const char *URL, ns1__GetIncentiveEvaluationRequestType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__GetIncentiveEvaluationRequestType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__GetIncentiveEvaluationRequestType(struct soap *soap, ns1__GetIncentiveEvaluationRequestType *p)
{
	if (soap_read_ns1__GetIncentiveEvaluationRequestType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__GetAccessPermissionDetailsResponseType_DEFINED
#define SOAP_TYPE_ns1__GetAccessPermissionDetailsResponseType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__GetAccessPermissionDetailsResponseType(struct soap*, const char*, int, const ns1__GetAccessPermissionDetailsResponseType *, const char*);
SOAP_FMAC3 ns1__GetAccessPermissionDetailsResponseType * SOAP_FMAC4 soap_in_ns1__GetAccessPermissionDetailsResponseType(struct soap*, const char*, ns1__GetAccessPermissionDetailsResponseType *, const char*);
SOAP_FMAC1 ns1__GetAccessPermissionDetailsResponseType * SOAP_FMAC2 soap_instantiate_ns1__GetAccessPermissionDetailsResponseType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__GetAccessPermissionDetailsResponseType * soap_new_ns1__GetAccessPermissionDetailsResponseType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__GetAccessPermissionDetailsResponseType(soap, n, NULL, NULL, NULL);
}

inline ns1__GetAccessPermissionDetailsResponseType * soap_new_req_ns1__GetAccessPermissionDetailsResponseType(
	struct soap *soap,
	ns3__GetAccessPermissionDetailsResponseDetailsType *ns3__GetAccessPermissionDetailsResponseDetails,
	enum ns3__AckCodeType Ack__1,
	const std::string& Version__1,
	const std::string& Build__1)
{
	ns1__GetAccessPermissionDetailsResponseType *_p = soap_new_ns1__GetAccessPermissionDetailsResponseType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__GetAccessPermissionDetailsResponseType::ns3__GetAccessPermissionDetailsResponseDetails = ns3__GetAccessPermissionDetailsResponseDetails;
		_p->ns3__AbstractResponseType::Ack = Ack__1;
		_p->ns3__AbstractResponseType::Version = Version__1;
		_p->ns3__AbstractResponseType::Build = Build__1;
	}
	return _p;
}

inline ns1__GetAccessPermissionDetailsResponseType * soap_new_set_ns1__GetAccessPermissionDetailsResponseType(
	struct soap *soap,
	ns3__GetAccessPermissionDetailsResponseDetailsType *ns3__GetAccessPermissionDetailsResponseDetails,
	time_t *Timestamp__1,
	enum ns3__AckCodeType Ack__1,
	std::string *CorrelationID__1,
	const std::vector<ns3__ErrorType *> & Errors__1,
	const std::string& Version__1,
	const std::string& Build__1,
	char *__any__1)
{
	ns1__GetAccessPermissionDetailsResponseType *_p = soap_new_ns1__GetAccessPermissionDetailsResponseType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__GetAccessPermissionDetailsResponseType::ns3__GetAccessPermissionDetailsResponseDetails = ns3__GetAccessPermissionDetailsResponseDetails;
		_p->ns3__AbstractResponseType::Timestamp = Timestamp__1;
		_p->ns3__AbstractResponseType::Ack = Ack__1;
		_p->ns3__AbstractResponseType::CorrelationID = CorrelationID__1;
		_p->ns3__AbstractResponseType::Errors = Errors__1;
		_p->ns3__AbstractResponseType::Version = Version__1;
		_p->ns3__AbstractResponseType::Build = Build__1;
		_p->ns3__AbstractResponseType::__any = __any__1;
	}
	return _p;
}

inline int soap_write_ns1__GetAccessPermissionDetailsResponseType(struct soap *soap, ns1__GetAccessPermissionDetailsResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetAccessPermissionDetailsResponseType", p->soap_type() == SOAP_TYPE_ns1__GetAccessPermissionDetailsResponseType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__GetAccessPermissionDetailsResponseType(struct soap *soap, const char *URL, ns1__GetAccessPermissionDetailsResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetAccessPermissionDetailsResponseType", p->soap_type() == SOAP_TYPE_ns1__GetAccessPermissionDetailsResponseType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__GetAccessPermissionDetailsResponseType(struct soap *soap, const char *URL, ns1__GetAccessPermissionDetailsResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetAccessPermissionDetailsResponseType", p->soap_type() == SOAP_TYPE_ns1__GetAccessPermissionDetailsResponseType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__GetAccessPermissionDetailsResponseType * SOAP_FMAC4 soap_get_ns1__GetAccessPermissionDetailsResponseType(struct soap*, ns1__GetAccessPermissionDetailsResponseType *, const char*, const char*);

inline int soap_read_ns1__GetAccessPermissionDetailsResponseType(struct soap *soap, ns1__GetAccessPermissionDetailsResponseType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__GetAccessPermissionDetailsResponseType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__GetAccessPermissionDetailsResponseType(struct soap *soap, const char *URL, ns1__GetAccessPermissionDetailsResponseType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__GetAccessPermissionDetailsResponseType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__GetAccessPermissionDetailsResponseType(struct soap *soap, ns1__GetAccessPermissionDetailsResponseType *p)
{
	if (soap_read_ns1__GetAccessPermissionDetailsResponseType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__GetAccessPermissionDetailsRequestType_DEFINED
#define SOAP_TYPE_ns1__GetAccessPermissionDetailsRequestType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__GetAccessPermissionDetailsRequestType(struct soap*, const char*, int, const ns1__GetAccessPermissionDetailsRequestType *, const char*);
SOAP_FMAC3 ns1__GetAccessPermissionDetailsRequestType * SOAP_FMAC4 soap_in_ns1__GetAccessPermissionDetailsRequestType(struct soap*, const char*, ns1__GetAccessPermissionDetailsRequestType *, const char*);
SOAP_FMAC1 ns1__GetAccessPermissionDetailsRequestType * SOAP_FMAC2 soap_instantiate_ns1__GetAccessPermissionDetailsRequestType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__GetAccessPermissionDetailsRequestType * soap_new_ns1__GetAccessPermissionDetailsRequestType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__GetAccessPermissionDetailsRequestType(soap, n, NULL, NULL, NULL);
}

inline ns1__GetAccessPermissionDetailsRequestType * soap_new_req_ns1__GetAccessPermissionDetailsRequestType(
	struct soap *soap,
	const std::string& Token,
	const std::string& Version__1)
{
	ns1__GetAccessPermissionDetailsRequestType *_p = soap_new_ns1__GetAccessPermissionDetailsRequestType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__GetAccessPermissionDetailsRequestType::Token = Token;
		_p->ns3__AbstractRequestType::Version = Version__1;
	}
	return _p;
}

inline ns1__GetAccessPermissionDetailsRequestType * soap_new_set_ns1__GetAccessPermissionDetailsRequestType(
	struct soap *soap,
	const std::string& Token,
	const std::vector<enum ns3__DetailLevelCodeType> & DetailLevel__1,
	std::string *ErrorLanguage__1,
	const std::string& Version__1,
	char *__any__1)
{
	ns1__GetAccessPermissionDetailsRequestType *_p = soap_new_ns1__GetAccessPermissionDetailsRequestType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__GetAccessPermissionDetailsRequestType::Token = Token;
		_p->ns3__AbstractRequestType::DetailLevel = DetailLevel__1;
		_p->ns3__AbstractRequestType::ErrorLanguage = ErrorLanguage__1;
		_p->ns3__AbstractRequestType::Version = Version__1;
		_p->ns3__AbstractRequestType::__any = __any__1;
	}
	return _p;
}

inline int soap_write_ns1__GetAccessPermissionDetailsRequestType(struct soap *soap, ns1__GetAccessPermissionDetailsRequestType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetAccessPermissionDetailsRequestType", p->soap_type() == SOAP_TYPE_ns1__GetAccessPermissionDetailsRequestType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__GetAccessPermissionDetailsRequestType(struct soap *soap, const char *URL, ns1__GetAccessPermissionDetailsRequestType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetAccessPermissionDetailsRequestType", p->soap_type() == SOAP_TYPE_ns1__GetAccessPermissionDetailsRequestType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__GetAccessPermissionDetailsRequestType(struct soap *soap, const char *URL, ns1__GetAccessPermissionDetailsRequestType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetAccessPermissionDetailsRequestType", p->soap_type() == SOAP_TYPE_ns1__GetAccessPermissionDetailsRequestType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__GetAccessPermissionDetailsRequestType * SOAP_FMAC4 soap_get_ns1__GetAccessPermissionDetailsRequestType(struct soap*, ns1__GetAccessPermissionDetailsRequestType *, const char*, const char*);

inline int soap_read_ns1__GetAccessPermissionDetailsRequestType(struct soap *soap, ns1__GetAccessPermissionDetailsRequestType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__GetAccessPermissionDetailsRequestType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__GetAccessPermissionDetailsRequestType(struct soap *soap, const char *URL, ns1__GetAccessPermissionDetailsRequestType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__GetAccessPermissionDetailsRequestType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__GetAccessPermissionDetailsRequestType(struct soap *soap, ns1__GetAccessPermissionDetailsRequestType *p)
{
	if (soap_read_ns1__GetAccessPermissionDetailsRequestType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__UpdateAccessPermissionsResponseType_DEFINED
#define SOAP_TYPE_ns1__UpdateAccessPermissionsResponseType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__UpdateAccessPermissionsResponseType(struct soap*, const char*, int, const ns1__UpdateAccessPermissionsResponseType *, const char*);
SOAP_FMAC3 ns1__UpdateAccessPermissionsResponseType * SOAP_FMAC4 soap_in_ns1__UpdateAccessPermissionsResponseType(struct soap*, const char*, ns1__UpdateAccessPermissionsResponseType *, const char*);
SOAP_FMAC1 ns1__UpdateAccessPermissionsResponseType * SOAP_FMAC2 soap_instantiate_ns1__UpdateAccessPermissionsResponseType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__UpdateAccessPermissionsResponseType * soap_new_ns1__UpdateAccessPermissionsResponseType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__UpdateAccessPermissionsResponseType(soap, n, NULL, NULL, NULL);
}

inline ns1__UpdateAccessPermissionsResponseType * soap_new_req_ns1__UpdateAccessPermissionsResponseType(
	struct soap *soap,
	const std::string& Status,
	enum ns3__AckCodeType Ack__1,
	const std::string& Version__1,
	const std::string& Build__1)
{
	ns1__UpdateAccessPermissionsResponseType *_p = soap_new_ns1__UpdateAccessPermissionsResponseType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__UpdateAccessPermissionsResponseType::Status = Status;
		_p->ns3__AbstractResponseType::Ack = Ack__1;
		_p->ns3__AbstractResponseType::Version = Version__1;
		_p->ns3__AbstractResponseType::Build = Build__1;
	}
	return _p;
}

inline ns1__UpdateAccessPermissionsResponseType * soap_new_set_ns1__UpdateAccessPermissionsResponseType(
	struct soap *soap,
	const std::string& Status,
	time_t *Timestamp__1,
	enum ns3__AckCodeType Ack__1,
	std::string *CorrelationID__1,
	const std::vector<ns3__ErrorType *> & Errors__1,
	const std::string& Version__1,
	const std::string& Build__1,
	char *__any__1)
{
	ns1__UpdateAccessPermissionsResponseType *_p = soap_new_ns1__UpdateAccessPermissionsResponseType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__UpdateAccessPermissionsResponseType::Status = Status;
		_p->ns3__AbstractResponseType::Timestamp = Timestamp__1;
		_p->ns3__AbstractResponseType::Ack = Ack__1;
		_p->ns3__AbstractResponseType::CorrelationID = CorrelationID__1;
		_p->ns3__AbstractResponseType::Errors = Errors__1;
		_p->ns3__AbstractResponseType::Version = Version__1;
		_p->ns3__AbstractResponseType::Build = Build__1;
		_p->ns3__AbstractResponseType::__any = __any__1;
	}
	return _p;
}

inline int soap_write_ns1__UpdateAccessPermissionsResponseType(struct soap *soap, ns1__UpdateAccessPermissionsResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:UpdateAccessPermissionsResponseType", p->soap_type() == SOAP_TYPE_ns1__UpdateAccessPermissionsResponseType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__UpdateAccessPermissionsResponseType(struct soap *soap, const char *URL, ns1__UpdateAccessPermissionsResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:UpdateAccessPermissionsResponseType", p->soap_type() == SOAP_TYPE_ns1__UpdateAccessPermissionsResponseType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__UpdateAccessPermissionsResponseType(struct soap *soap, const char *URL, ns1__UpdateAccessPermissionsResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:UpdateAccessPermissionsResponseType", p->soap_type() == SOAP_TYPE_ns1__UpdateAccessPermissionsResponseType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__UpdateAccessPermissionsResponseType * SOAP_FMAC4 soap_get_ns1__UpdateAccessPermissionsResponseType(struct soap*, ns1__UpdateAccessPermissionsResponseType *, const char*, const char*);

inline int soap_read_ns1__UpdateAccessPermissionsResponseType(struct soap *soap, ns1__UpdateAccessPermissionsResponseType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__UpdateAccessPermissionsResponseType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__UpdateAccessPermissionsResponseType(struct soap *soap, const char *URL, ns1__UpdateAccessPermissionsResponseType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__UpdateAccessPermissionsResponseType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__UpdateAccessPermissionsResponseType(struct soap *soap, ns1__UpdateAccessPermissionsResponseType *p)
{
	if (soap_read_ns1__UpdateAccessPermissionsResponseType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__UpdateAccessPermissionsRequestType_DEFINED
#define SOAP_TYPE_ns1__UpdateAccessPermissionsRequestType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__UpdateAccessPermissionsRequestType(struct soap*, const char*, int, const ns1__UpdateAccessPermissionsRequestType *, const char*);
SOAP_FMAC3 ns1__UpdateAccessPermissionsRequestType * SOAP_FMAC4 soap_in_ns1__UpdateAccessPermissionsRequestType(struct soap*, const char*, ns1__UpdateAccessPermissionsRequestType *, const char*);
SOAP_FMAC1 ns1__UpdateAccessPermissionsRequestType * SOAP_FMAC2 soap_instantiate_ns1__UpdateAccessPermissionsRequestType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__UpdateAccessPermissionsRequestType * soap_new_ns1__UpdateAccessPermissionsRequestType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__UpdateAccessPermissionsRequestType(soap, n, NULL, NULL, NULL);
}

inline ns1__UpdateAccessPermissionsRequestType * soap_new_req_ns1__UpdateAccessPermissionsRequestType(
	struct soap *soap,
	const std::string& PayerID,
	const std::string& Version__1)
{
	ns1__UpdateAccessPermissionsRequestType *_p = soap_new_ns1__UpdateAccessPermissionsRequestType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__UpdateAccessPermissionsRequestType::PayerID = PayerID;
		_p->ns3__AbstractRequestType::Version = Version__1;
	}
	return _p;
}

inline ns1__UpdateAccessPermissionsRequestType * soap_new_set_ns1__UpdateAccessPermissionsRequestType(
	struct soap *soap,
	const std::string& PayerID,
	const std::vector<enum ns3__DetailLevelCodeType> & DetailLevel__1,
	std::string *ErrorLanguage__1,
	const std::string& Version__1,
	char *__any__1)
{
	ns1__UpdateAccessPermissionsRequestType *_p = soap_new_ns1__UpdateAccessPermissionsRequestType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__UpdateAccessPermissionsRequestType::PayerID = PayerID;
		_p->ns3__AbstractRequestType::DetailLevel = DetailLevel__1;
		_p->ns3__AbstractRequestType::ErrorLanguage = ErrorLanguage__1;
		_p->ns3__AbstractRequestType::Version = Version__1;
		_p->ns3__AbstractRequestType::__any = __any__1;
	}
	return _p;
}

inline int soap_write_ns1__UpdateAccessPermissionsRequestType(struct soap *soap, ns1__UpdateAccessPermissionsRequestType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:UpdateAccessPermissionsRequestType", p->soap_type() == SOAP_TYPE_ns1__UpdateAccessPermissionsRequestType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__UpdateAccessPermissionsRequestType(struct soap *soap, const char *URL, ns1__UpdateAccessPermissionsRequestType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:UpdateAccessPermissionsRequestType", p->soap_type() == SOAP_TYPE_ns1__UpdateAccessPermissionsRequestType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__UpdateAccessPermissionsRequestType(struct soap *soap, const char *URL, ns1__UpdateAccessPermissionsRequestType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:UpdateAccessPermissionsRequestType", p->soap_type() == SOAP_TYPE_ns1__UpdateAccessPermissionsRequestType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__UpdateAccessPermissionsRequestType * SOAP_FMAC4 soap_get_ns1__UpdateAccessPermissionsRequestType(struct soap*, ns1__UpdateAccessPermissionsRequestType *, const char*, const char*);

inline int soap_read_ns1__UpdateAccessPermissionsRequestType(struct soap *soap, ns1__UpdateAccessPermissionsRequestType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__UpdateAccessPermissionsRequestType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__UpdateAccessPermissionsRequestType(struct soap *soap, const char *URL, ns1__UpdateAccessPermissionsRequestType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__UpdateAccessPermissionsRequestType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__UpdateAccessPermissionsRequestType(struct soap *soap, ns1__UpdateAccessPermissionsRequestType *p)
{
	if (soap_read_ns1__UpdateAccessPermissionsRequestType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__SetAccessPermissionsResponseType_DEFINED
#define SOAP_TYPE_ns1__SetAccessPermissionsResponseType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__SetAccessPermissionsResponseType(struct soap*, const char*, int, const ns1__SetAccessPermissionsResponseType *, const char*);
SOAP_FMAC3 ns1__SetAccessPermissionsResponseType * SOAP_FMAC4 soap_in_ns1__SetAccessPermissionsResponseType(struct soap*, const char*, ns1__SetAccessPermissionsResponseType *, const char*);
SOAP_FMAC1 ns1__SetAccessPermissionsResponseType * SOAP_FMAC2 soap_instantiate_ns1__SetAccessPermissionsResponseType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__SetAccessPermissionsResponseType * soap_new_ns1__SetAccessPermissionsResponseType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__SetAccessPermissionsResponseType(soap, n, NULL, NULL, NULL);
}

inline ns1__SetAccessPermissionsResponseType * soap_new_req_ns1__SetAccessPermissionsResponseType(
	struct soap *soap,
	const std::string& Token,
	enum ns3__AckCodeType Ack__1,
	const std::string& Version__1,
	const std::string& Build__1)
{
	ns1__SetAccessPermissionsResponseType *_p = soap_new_ns1__SetAccessPermissionsResponseType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__SetAccessPermissionsResponseType::Token = Token;
		_p->ns3__AbstractResponseType::Ack = Ack__1;
		_p->ns3__AbstractResponseType::Version = Version__1;
		_p->ns3__AbstractResponseType::Build = Build__1;
	}
	return _p;
}

inline ns1__SetAccessPermissionsResponseType * soap_new_set_ns1__SetAccessPermissionsResponseType(
	struct soap *soap,
	const std::string& Token,
	time_t *Timestamp__1,
	enum ns3__AckCodeType Ack__1,
	std::string *CorrelationID__1,
	const std::vector<ns3__ErrorType *> & Errors__1,
	const std::string& Version__1,
	const std::string& Build__1,
	char *__any__1)
{
	ns1__SetAccessPermissionsResponseType *_p = soap_new_ns1__SetAccessPermissionsResponseType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__SetAccessPermissionsResponseType::Token = Token;
		_p->ns3__AbstractResponseType::Timestamp = Timestamp__1;
		_p->ns3__AbstractResponseType::Ack = Ack__1;
		_p->ns3__AbstractResponseType::CorrelationID = CorrelationID__1;
		_p->ns3__AbstractResponseType::Errors = Errors__1;
		_p->ns3__AbstractResponseType::Version = Version__1;
		_p->ns3__AbstractResponseType::Build = Build__1;
		_p->ns3__AbstractResponseType::__any = __any__1;
	}
	return _p;
}

inline int soap_write_ns1__SetAccessPermissionsResponseType(struct soap *soap, ns1__SetAccessPermissionsResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SetAccessPermissionsResponseType", p->soap_type() == SOAP_TYPE_ns1__SetAccessPermissionsResponseType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__SetAccessPermissionsResponseType(struct soap *soap, const char *URL, ns1__SetAccessPermissionsResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SetAccessPermissionsResponseType", p->soap_type() == SOAP_TYPE_ns1__SetAccessPermissionsResponseType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__SetAccessPermissionsResponseType(struct soap *soap, const char *URL, ns1__SetAccessPermissionsResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SetAccessPermissionsResponseType", p->soap_type() == SOAP_TYPE_ns1__SetAccessPermissionsResponseType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__SetAccessPermissionsResponseType * SOAP_FMAC4 soap_get_ns1__SetAccessPermissionsResponseType(struct soap*, ns1__SetAccessPermissionsResponseType *, const char*, const char*);

inline int soap_read_ns1__SetAccessPermissionsResponseType(struct soap *soap, ns1__SetAccessPermissionsResponseType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__SetAccessPermissionsResponseType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__SetAccessPermissionsResponseType(struct soap *soap, const char *URL, ns1__SetAccessPermissionsResponseType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__SetAccessPermissionsResponseType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__SetAccessPermissionsResponseType(struct soap *soap, ns1__SetAccessPermissionsResponseType *p)
{
	if (soap_read_ns1__SetAccessPermissionsResponseType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__SetAccessPermissionsRequestType_DEFINED
#define SOAP_TYPE_ns1__SetAccessPermissionsRequestType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__SetAccessPermissionsRequestType(struct soap*, const char*, int, const ns1__SetAccessPermissionsRequestType *, const char*);
SOAP_FMAC3 ns1__SetAccessPermissionsRequestType * SOAP_FMAC4 soap_in_ns1__SetAccessPermissionsRequestType(struct soap*, const char*, ns1__SetAccessPermissionsRequestType *, const char*);
SOAP_FMAC1 ns1__SetAccessPermissionsRequestType * SOAP_FMAC2 soap_instantiate_ns1__SetAccessPermissionsRequestType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__SetAccessPermissionsRequestType * soap_new_ns1__SetAccessPermissionsRequestType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__SetAccessPermissionsRequestType(soap, n, NULL, NULL, NULL);
}

inline ns1__SetAccessPermissionsRequestType * soap_new_req_ns1__SetAccessPermissionsRequestType(
	struct soap *soap,
	ns3__SetAccessPermissionsRequestDetailsType *ns3__SetAccessPermissionsRequestDetails,
	const std::string& Version__1)
{
	ns1__SetAccessPermissionsRequestType *_p = soap_new_ns1__SetAccessPermissionsRequestType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__SetAccessPermissionsRequestType::ns3__SetAccessPermissionsRequestDetails = ns3__SetAccessPermissionsRequestDetails;
		_p->ns3__AbstractRequestType::Version = Version__1;
	}
	return _p;
}

inline ns1__SetAccessPermissionsRequestType * soap_new_set_ns1__SetAccessPermissionsRequestType(
	struct soap *soap,
	ns3__SetAccessPermissionsRequestDetailsType *ns3__SetAccessPermissionsRequestDetails,
	const std::vector<enum ns3__DetailLevelCodeType> & DetailLevel__1,
	std::string *ErrorLanguage__1,
	const std::string& Version__1,
	char *__any__1)
{
	ns1__SetAccessPermissionsRequestType *_p = soap_new_ns1__SetAccessPermissionsRequestType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__SetAccessPermissionsRequestType::ns3__SetAccessPermissionsRequestDetails = ns3__SetAccessPermissionsRequestDetails;
		_p->ns3__AbstractRequestType::DetailLevel = DetailLevel__1;
		_p->ns3__AbstractRequestType::ErrorLanguage = ErrorLanguage__1;
		_p->ns3__AbstractRequestType::Version = Version__1;
		_p->ns3__AbstractRequestType::__any = __any__1;
	}
	return _p;
}

inline int soap_write_ns1__SetAccessPermissionsRequestType(struct soap *soap, ns1__SetAccessPermissionsRequestType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SetAccessPermissionsRequestType", p->soap_type() == SOAP_TYPE_ns1__SetAccessPermissionsRequestType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__SetAccessPermissionsRequestType(struct soap *soap, const char *URL, ns1__SetAccessPermissionsRequestType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SetAccessPermissionsRequestType", p->soap_type() == SOAP_TYPE_ns1__SetAccessPermissionsRequestType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__SetAccessPermissionsRequestType(struct soap *soap, const char *URL, ns1__SetAccessPermissionsRequestType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SetAccessPermissionsRequestType", p->soap_type() == SOAP_TYPE_ns1__SetAccessPermissionsRequestType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__SetAccessPermissionsRequestType * SOAP_FMAC4 soap_get_ns1__SetAccessPermissionsRequestType(struct soap*, ns1__SetAccessPermissionsRequestType *, const char*, const char*);

inline int soap_read_ns1__SetAccessPermissionsRequestType(struct soap *soap, ns1__SetAccessPermissionsRequestType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__SetAccessPermissionsRequestType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__SetAccessPermissionsRequestType(struct soap *soap, const char *URL, ns1__SetAccessPermissionsRequestType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__SetAccessPermissionsRequestType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__SetAccessPermissionsRequestType(struct soap *soap, ns1__SetAccessPermissionsRequestType *p)
{
	if (soap_read_ns1__SetAccessPermissionsRequestType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__GetAuthDetailsResponseType_DEFINED
#define SOAP_TYPE_ns1__GetAuthDetailsResponseType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__GetAuthDetailsResponseType(struct soap*, const char*, int, const ns1__GetAuthDetailsResponseType *, const char*);
SOAP_FMAC3 ns1__GetAuthDetailsResponseType * SOAP_FMAC4 soap_in_ns1__GetAuthDetailsResponseType(struct soap*, const char*, ns1__GetAuthDetailsResponseType *, const char*);
SOAP_FMAC1 ns1__GetAuthDetailsResponseType * SOAP_FMAC2 soap_instantiate_ns1__GetAuthDetailsResponseType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__GetAuthDetailsResponseType * soap_new_ns1__GetAuthDetailsResponseType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__GetAuthDetailsResponseType(soap, n, NULL, NULL, NULL);
}

inline ns1__GetAuthDetailsResponseType * soap_new_req_ns1__GetAuthDetailsResponseType(
	struct soap *soap,
	ns3__GetAuthDetailsResponseDetailsType *ns3__GetAuthDetailsResponseDetails,
	enum ns3__AckCodeType Ack__1,
	const std::string& Version__1,
	const std::string& Build__1)
{
	ns1__GetAuthDetailsResponseType *_p = soap_new_ns1__GetAuthDetailsResponseType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__GetAuthDetailsResponseType::ns3__GetAuthDetailsResponseDetails = ns3__GetAuthDetailsResponseDetails;
		_p->ns3__AbstractResponseType::Ack = Ack__1;
		_p->ns3__AbstractResponseType::Version = Version__1;
		_p->ns3__AbstractResponseType::Build = Build__1;
	}
	return _p;
}

inline ns1__GetAuthDetailsResponseType * soap_new_set_ns1__GetAuthDetailsResponseType(
	struct soap *soap,
	ns3__GetAuthDetailsResponseDetailsType *ns3__GetAuthDetailsResponseDetails,
	time_t *Timestamp__1,
	enum ns3__AckCodeType Ack__1,
	std::string *CorrelationID__1,
	const std::vector<ns3__ErrorType *> & Errors__1,
	const std::string& Version__1,
	const std::string& Build__1,
	char *__any__1)
{
	ns1__GetAuthDetailsResponseType *_p = soap_new_ns1__GetAuthDetailsResponseType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__GetAuthDetailsResponseType::ns3__GetAuthDetailsResponseDetails = ns3__GetAuthDetailsResponseDetails;
		_p->ns3__AbstractResponseType::Timestamp = Timestamp__1;
		_p->ns3__AbstractResponseType::Ack = Ack__1;
		_p->ns3__AbstractResponseType::CorrelationID = CorrelationID__1;
		_p->ns3__AbstractResponseType::Errors = Errors__1;
		_p->ns3__AbstractResponseType::Version = Version__1;
		_p->ns3__AbstractResponseType::Build = Build__1;
		_p->ns3__AbstractResponseType::__any = __any__1;
	}
	return _p;
}

inline int soap_write_ns1__GetAuthDetailsResponseType(struct soap *soap, ns1__GetAuthDetailsResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetAuthDetailsResponseType", p->soap_type() == SOAP_TYPE_ns1__GetAuthDetailsResponseType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__GetAuthDetailsResponseType(struct soap *soap, const char *URL, ns1__GetAuthDetailsResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetAuthDetailsResponseType", p->soap_type() == SOAP_TYPE_ns1__GetAuthDetailsResponseType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__GetAuthDetailsResponseType(struct soap *soap, const char *URL, ns1__GetAuthDetailsResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetAuthDetailsResponseType", p->soap_type() == SOAP_TYPE_ns1__GetAuthDetailsResponseType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__GetAuthDetailsResponseType * SOAP_FMAC4 soap_get_ns1__GetAuthDetailsResponseType(struct soap*, ns1__GetAuthDetailsResponseType *, const char*, const char*);

inline int soap_read_ns1__GetAuthDetailsResponseType(struct soap *soap, ns1__GetAuthDetailsResponseType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__GetAuthDetailsResponseType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__GetAuthDetailsResponseType(struct soap *soap, const char *URL, ns1__GetAuthDetailsResponseType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__GetAuthDetailsResponseType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__GetAuthDetailsResponseType(struct soap *soap, ns1__GetAuthDetailsResponseType *p)
{
	if (soap_read_ns1__GetAuthDetailsResponseType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__GetAuthDetailsRequestType_DEFINED
#define SOAP_TYPE_ns1__GetAuthDetailsRequestType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__GetAuthDetailsRequestType(struct soap*, const char*, int, const ns1__GetAuthDetailsRequestType *, const char*);
SOAP_FMAC3 ns1__GetAuthDetailsRequestType * SOAP_FMAC4 soap_in_ns1__GetAuthDetailsRequestType(struct soap*, const char*, ns1__GetAuthDetailsRequestType *, const char*);
SOAP_FMAC1 ns1__GetAuthDetailsRequestType * SOAP_FMAC2 soap_instantiate_ns1__GetAuthDetailsRequestType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__GetAuthDetailsRequestType * soap_new_ns1__GetAuthDetailsRequestType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__GetAuthDetailsRequestType(soap, n, NULL, NULL, NULL);
}

inline ns1__GetAuthDetailsRequestType * soap_new_req_ns1__GetAuthDetailsRequestType(
	struct soap *soap,
	const std::string& Token,
	const std::string& Version__1)
{
	ns1__GetAuthDetailsRequestType *_p = soap_new_ns1__GetAuthDetailsRequestType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__GetAuthDetailsRequestType::Token = Token;
		_p->ns3__AbstractRequestType::Version = Version__1;
	}
	return _p;
}

inline ns1__GetAuthDetailsRequestType * soap_new_set_ns1__GetAuthDetailsRequestType(
	struct soap *soap,
	const std::string& Token,
	const std::vector<enum ns3__DetailLevelCodeType> & DetailLevel__1,
	std::string *ErrorLanguage__1,
	const std::string& Version__1,
	char *__any__1)
{
	ns1__GetAuthDetailsRequestType *_p = soap_new_ns1__GetAuthDetailsRequestType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__GetAuthDetailsRequestType::Token = Token;
		_p->ns3__AbstractRequestType::DetailLevel = DetailLevel__1;
		_p->ns3__AbstractRequestType::ErrorLanguage = ErrorLanguage__1;
		_p->ns3__AbstractRequestType::Version = Version__1;
		_p->ns3__AbstractRequestType::__any = __any__1;
	}
	return _p;
}

inline int soap_write_ns1__GetAuthDetailsRequestType(struct soap *soap, ns1__GetAuthDetailsRequestType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetAuthDetailsRequestType", p->soap_type() == SOAP_TYPE_ns1__GetAuthDetailsRequestType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__GetAuthDetailsRequestType(struct soap *soap, const char *URL, ns1__GetAuthDetailsRequestType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetAuthDetailsRequestType", p->soap_type() == SOAP_TYPE_ns1__GetAuthDetailsRequestType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__GetAuthDetailsRequestType(struct soap *soap, const char *URL, ns1__GetAuthDetailsRequestType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetAuthDetailsRequestType", p->soap_type() == SOAP_TYPE_ns1__GetAuthDetailsRequestType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__GetAuthDetailsRequestType * SOAP_FMAC4 soap_get_ns1__GetAuthDetailsRequestType(struct soap*, ns1__GetAuthDetailsRequestType *, const char*, const char*);

inline int soap_read_ns1__GetAuthDetailsRequestType(struct soap *soap, ns1__GetAuthDetailsRequestType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__GetAuthDetailsRequestType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__GetAuthDetailsRequestType(struct soap *soap, const char *URL, ns1__GetAuthDetailsRequestType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__GetAuthDetailsRequestType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__GetAuthDetailsRequestType(struct soap *soap, ns1__GetAuthDetailsRequestType *p)
{
	if (soap_read_ns1__GetAuthDetailsRequestType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__SetAuthFlowParamResponseType_DEFINED
#define SOAP_TYPE_ns1__SetAuthFlowParamResponseType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__SetAuthFlowParamResponseType(struct soap*, const char*, int, const ns1__SetAuthFlowParamResponseType *, const char*);
SOAP_FMAC3 ns1__SetAuthFlowParamResponseType * SOAP_FMAC4 soap_in_ns1__SetAuthFlowParamResponseType(struct soap*, const char*, ns1__SetAuthFlowParamResponseType *, const char*);
SOAP_FMAC1 ns1__SetAuthFlowParamResponseType * SOAP_FMAC2 soap_instantiate_ns1__SetAuthFlowParamResponseType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__SetAuthFlowParamResponseType * soap_new_ns1__SetAuthFlowParamResponseType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__SetAuthFlowParamResponseType(soap, n, NULL, NULL, NULL);
}

inline ns1__SetAuthFlowParamResponseType * soap_new_req_ns1__SetAuthFlowParamResponseType(
	struct soap *soap,
	const std::string& Token,
	enum ns3__AckCodeType Ack__1,
	const std::string& Version__1,
	const std::string& Build__1)
{
	ns1__SetAuthFlowParamResponseType *_p = soap_new_ns1__SetAuthFlowParamResponseType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__SetAuthFlowParamResponseType::Token = Token;
		_p->ns3__AbstractResponseType::Ack = Ack__1;
		_p->ns3__AbstractResponseType::Version = Version__1;
		_p->ns3__AbstractResponseType::Build = Build__1;
	}
	return _p;
}

inline ns1__SetAuthFlowParamResponseType * soap_new_set_ns1__SetAuthFlowParamResponseType(
	struct soap *soap,
	const std::string& Token,
	time_t *Timestamp__1,
	enum ns3__AckCodeType Ack__1,
	std::string *CorrelationID__1,
	const std::vector<ns3__ErrorType *> & Errors__1,
	const std::string& Version__1,
	const std::string& Build__1,
	char *__any__1)
{
	ns1__SetAuthFlowParamResponseType *_p = soap_new_ns1__SetAuthFlowParamResponseType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__SetAuthFlowParamResponseType::Token = Token;
		_p->ns3__AbstractResponseType::Timestamp = Timestamp__1;
		_p->ns3__AbstractResponseType::Ack = Ack__1;
		_p->ns3__AbstractResponseType::CorrelationID = CorrelationID__1;
		_p->ns3__AbstractResponseType::Errors = Errors__1;
		_p->ns3__AbstractResponseType::Version = Version__1;
		_p->ns3__AbstractResponseType::Build = Build__1;
		_p->ns3__AbstractResponseType::__any = __any__1;
	}
	return _p;
}

inline int soap_write_ns1__SetAuthFlowParamResponseType(struct soap *soap, ns1__SetAuthFlowParamResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SetAuthFlowParamResponseType", p->soap_type() == SOAP_TYPE_ns1__SetAuthFlowParamResponseType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__SetAuthFlowParamResponseType(struct soap *soap, const char *URL, ns1__SetAuthFlowParamResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SetAuthFlowParamResponseType", p->soap_type() == SOAP_TYPE_ns1__SetAuthFlowParamResponseType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__SetAuthFlowParamResponseType(struct soap *soap, const char *URL, ns1__SetAuthFlowParamResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SetAuthFlowParamResponseType", p->soap_type() == SOAP_TYPE_ns1__SetAuthFlowParamResponseType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__SetAuthFlowParamResponseType * SOAP_FMAC4 soap_get_ns1__SetAuthFlowParamResponseType(struct soap*, ns1__SetAuthFlowParamResponseType *, const char*, const char*);

inline int soap_read_ns1__SetAuthFlowParamResponseType(struct soap *soap, ns1__SetAuthFlowParamResponseType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__SetAuthFlowParamResponseType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__SetAuthFlowParamResponseType(struct soap *soap, const char *URL, ns1__SetAuthFlowParamResponseType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__SetAuthFlowParamResponseType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__SetAuthFlowParamResponseType(struct soap *soap, ns1__SetAuthFlowParamResponseType *p)
{
	if (soap_read_ns1__SetAuthFlowParamResponseType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__SetAuthFlowParamRequestType_DEFINED
#define SOAP_TYPE_ns1__SetAuthFlowParamRequestType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__SetAuthFlowParamRequestType(struct soap*, const char*, int, const ns1__SetAuthFlowParamRequestType *, const char*);
SOAP_FMAC3 ns1__SetAuthFlowParamRequestType * SOAP_FMAC4 soap_in_ns1__SetAuthFlowParamRequestType(struct soap*, const char*, ns1__SetAuthFlowParamRequestType *, const char*);
SOAP_FMAC1 ns1__SetAuthFlowParamRequestType * SOAP_FMAC2 soap_instantiate_ns1__SetAuthFlowParamRequestType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__SetAuthFlowParamRequestType * soap_new_ns1__SetAuthFlowParamRequestType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__SetAuthFlowParamRequestType(soap, n, NULL, NULL, NULL);
}

inline ns1__SetAuthFlowParamRequestType * soap_new_req_ns1__SetAuthFlowParamRequestType(
	struct soap *soap,
	ns3__SetAuthFlowParamRequestDetailsType *ns3__SetAuthFlowParamRequestDetails,
	const std::string& Version__1)
{
	ns1__SetAuthFlowParamRequestType *_p = soap_new_ns1__SetAuthFlowParamRequestType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__SetAuthFlowParamRequestType::ns3__SetAuthFlowParamRequestDetails = ns3__SetAuthFlowParamRequestDetails;
		_p->ns3__AbstractRequestType::Version = Version__1;
	}
	return _p;
}

inline ns1__SetAuthFlowParamRequestType * soap_new_set_ns1__SetAuthFlowParamRequestType(
	struct soap *soap,
	ns3__SetAuthFlowParamRequestDetailsType *ns3__SetAuthFlowParamRequestDetails,
	const std::vector<enum ns3__DetailLevelCodeType> & DetailLevel__1,
	std::string *ErrorLanguage__1,
	const std::string& Version__1,
	char *__any__1)
{
	ns1__SetAuthFlowParamRequestType *_p = soap_new_ns1__SetAuthFlowParamRequestType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__SetAuthFlowParamRequestType::ns3__SetAuthFlowParamRequestDetails = ns3__SetAuthFlowParamRequestDetails;
		_p->ns3__AbstractRequestType::DetailLevel = DetailLevel__1;
		_p->ns3__AbstractRequestType::ErrorLanguage = ErrorLanguage__1;
		_p->ns3__AbstractRequestType::Version = Version__1;
		_p->ns3__AbstractRequestType::__any = __any__1;
	}
	return _p;
}

inline int soap_write_ns1__SetAuthFlowParamRequestType(struct soap *soap, ns1__SetAuthFlowParamRequestType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SetAuthFlowParamRequestType", p->soap_type() == SOAP_TYPE_ns1__SetAuthFlowParamRequestType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__SetAuthFlowParamRequestType(struct soap *soap, const char *URL, ns1__SetAuthFlowParamRequestType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SetAuthFlowParamRequestType", p->soap_type() == SOAP_TYPE_ns1__SetAuthFlowParamRequestType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__SetAuthFlowParamRequestType(struct soap *soap, const char *URL, ns1__SetAuthFlowParamRequestType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SetAuthFlowParamRequestType", p->soap_type() == SOAP_TYPE_ns1__SetAuthFlowParamRequestType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__SetAuthFlowParamRequestType * SOAP_FMAC4 soap_get_ns1__SetAuthFlowParamRequestType(struct soap*, ns1__SetAuthFlowParamRequestType *, const char*, const char*);

inline int soap_read_ns1__SetAuthFlowParamRequestType(struct soap *soap, ns1__SetAuthFlowParamRequestType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__SetAuthFlowParamRequestType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__SetAuthFlowParamRequestType(struct soap *soap, const char *URL, ns1__SetAuthFlowParamRequestType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__SetAuthFlowParamRequestType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__SetAuthFlowParamRequestType(struct soap *soap, ns1__SetAuthFlowParamRequestType *p)
{
	if (soap_read_ns1__SetAuthFlowParamRequestType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__GetBoardingDetailsResponseType_DEFINED
#define SOAP_TYPE_ns1__GetBoardingDetailsResponseType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__GetBoardingDetailsResponseType(struct soap*, const char*, int, const ns1__GetBoardingDetailsResponseType *, const char*);
SOAP_FMAC3 ns1__GetBoardingDetailsResponseType * SOAP_FMAC4 soap_in_ns1__GetBoardingDetailsResponseType(struct soap*, const char*, ns1__GetBoardingDetailsResponseType *, const char*);
SOAP_FMAC1 ns1__GetBoardingDetailsResponseType * SOAP_FMAC2 soap_instantiate_ns1__GetBoardingDetailsResponseType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__GetBoardingDetailsResponseType * soap_new_ns1__GetBoardingDetailsResponseType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__GetBoardingDetailsResponseType(soap, n, NULL, NULL, NULL);
}

inline ns1__GetBoardingDetailsResponseType * soap_new_req_ns1__GetBoardingDetailsResponseType(
	struct soap *soap,
	ns3__GetBoardingDetailsResponseDetailsType *ns3__GetBoardingDetailsResponseDetails,
	enum ns3__AckCodeType Ack__1,
	const std::string& Version__1,
	const std::string& Build__1)
{
	ns1__GetBoardingDetailsResponseType *_p = soap_new_ns1__GetBoardingDetailsResponseType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__GetBoardingDetailsResponseType::ns3__GetBoardingDetailsResponseDetails = ns3__GetBoardingDetailsResponseDetails;
		_p->ns3__AbstractResponseType::Ack = Ack__1;
		_p->ns3__AbstractResponseType::Version = Version__1;
		_p->ns3__AbstractResponseType::Build = Build__1;
	}
	return _p;
}

inline ns1__GetBoardingDetailsResponseType * soap_new_set_ns1__GetBoardingDetailsResponseType(
	struct soap *soap,
	ns3__GetBoardingDetailsResponseDetailsType *ns3__GetBoardingDetailsResponseDetails,
	time_t *Timestamp__1,
	enum ns3__AckCodeType Ack__1,
	std::string *CorrelationID__1,
	const std::vector<ns3__ErrorType *> & Errors__1,
	const std::string& Version__1,
	const std::string& Build__1,
	char *__any__1)
{
	ns1__GetBoardingDetailsResponseType *_p = soap_new_ns1__GetBoardingDetailsResponseType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__GetBoardingDetailsResponseType::ns3__GetBoardingDetailsResponseDetails = ns3__GetBoardingDetailsResponseDetails;
		_p->ns3__AbstractResponseType::Timestamp = Timestamp__1;
		_p->ns3__AbstractResponseType::Ack = Ack__1;
		_p->ns3__AbstractResponseType::CorrelationID = CorrelationID__1;
		_p->ns3__AbstractResponseType::Errors = Errors__1;
		_p->ns3__AbstractResponseType::Version = Version__1;
		_p->ns3__AbstractResponseType::Build = Build__1;
		_p->ns3__AbstractResponseType::__any = __any__1;
	}
	return _p;
}

inline int soap_write_ns1__GetBoardingDetailsResponseType(struct soap *soap, ns1__GetBoardingDetailsResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetBoardingDetailsResponseType", p->soap_type() == SOAP_TYPE_ns1__GetBoardingDetailsResponseType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__GetBoardingDetailsResponseType(struct soap *soap, const char *URL, ns1__GetBoardingDetailsResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetBoardingDetailsResponseType", p->soap_type() == SOAP_TYPE_ns1__GetBoardingDetailsResponseType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__GetBoardingDetailsResponseType(struct soap *soap, const char *URL, ns1__GetBoardingDetailsResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetBoardingDetailsResponseType", p->soap_type() == SOAP_TYPE_ns1__GetBoardingDetailsResponseType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__GetBoardingDetailsResponseType * SOAP_FMAC4 soap_get_ns1__GetBoardingDetailsResponseType(struct soap*, ns1__GetBoardingDetailsResponseType *, const char*, const char*);

inline int soap_read_ns1__GetBoardingDetailsResponseType(struct soap *soap, ns1__GetBoardingDetailsResponseType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__GetBoardingDetailsResponseType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__GetBoardingDetailsResponseType(struct soap *soap, const char *URL, ns1__GetBoardingDetailsResponseType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__GetBoardingDetailsResponseType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__GetBoardingDetailsResponseType(struct soap *soap, ns1__GetBoardingDetailsResponseType *p)
{
	if (soap_read_ns1__GetBoardingDetailsResponseType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__GetBoardingDetailsRequestType_DEFINED
#define SOAP_TYPE_ns1__GetBoardingDetailsRequestType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__GetBoardingDetailsRequestType(struct soap*, const char*, int, const ns1__GetBoardingDetailsRequestType *, const char*);
SOAP_FMAC3 ns1__GetBoardingDetailsRequestType * SOAP_FMAC4 soap_in_ns1__GetBoardingDetailsRequestType(struct soap*, const char*, ns1__GetBoardingDetailsRequestType *, const char*);
SOAP_FMAC1 ns1__GetBoardingDetailsRequestType * SOAP_FMAC2 soap_instantiate_ns1__GetBoardingDetailsRequestType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__GetBoardingDetailsRequestType * soap_new_ns1__GetBoardingDetailsRequestType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__GetBoardingDetailsRequestType(soap, n, NULL, NULL, NULL);
}

inline ns1__GetBoardingDetailsRequestType * soap_new_req_ns1__GetBoardingDetailsRequestType(
	struct soap *soap,
	const std::string& Token,
	const std::string& Version__1)
{
	ns1__GetBoardingDetailsRequestType *_p = soap_new_ns1__GetBoardingDetailsRequestType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__GetBoardingDetailsRequestType::Token = Token;
		_p->ns3__AbstractRequestType::Version = Version__1;
	}
	return _p;
}

inline ns1__GetBoardingDetailsRequestType * soap_new_set_ns1__GetBoardingDetailsRequestType(
	struct soap *soap,
	const std::string& Token,
	const std::vector<enum ns3__DetailLevelCodeType> & DetailLevel__1,
	std::string *ErrorLanguage__1,
	const std::string& Version__1,
	char *__any__1)
{
	ns1__GetBoardingDetailsRequestType *_p = soap_new_ns1__GetBoardingDetailsRequestType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__GetBoardingDetailsRequestType::Token = Token;
		_p->ns3__AbstractRequestType::DetailLevel = DetailLevel__1;
		_p->ns3__AbstractRequestType::ErrorLanguage = ErrorLanguage__1;
		_p->ns3__AbstractRequestType::Version = Version__1;
		_p->ns3__AbstractRequestType::__any = __any__1;
	}
	return _p;
}

inline int soap_write_ns1__GetBoardingDetailsRequestType(struct soap *soap, ns1__GetBoardingDetailsRequestType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetBoardingDetailsRequestType", p->soap_type() == SOAP_TYPE_ns1__GetBoardingDetailsRequestType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__GetBoardingDetailsRequestType(struct soap *soap, const char *URL, ns1__GetBoardingDetailsRequestType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetBoardingDetailsRequestType", p->soap_type() == SOAP_TYPE_ns1__GetBoardingDetailsRequestType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__GetBoardingDetailsRequestType(struct soap *soap, const char *URL, ns1__GetBoardingDetailsRequestType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetBoardingDetailsRequestType", p->soap_type() == SOAP_TYPE_ns1__GetBoardingDetailsRequestType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__GetBoardingDetailsRequestType * SOAP_FMAC4 soap_get_ns1__GetBoardingDetailsRequestType(struct soap*, ns1__GetBoardingDetailsRequestType *, const char*, const char*);

inline int soap_read_ns1__GetBoardingDetailsRequestType(struct soap *soap, ns1__GetBoardingDetailsRequestType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__GetBoardingDetailsRequestType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__GetBoardingDetailsRequestType(struct soap *soap, const char *URL, ns1__GetBoardingDetailsRequestType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__GetBoardingDetailsRequestType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__GetBoardingDetailsRequestType(struct soap *soap, ns1__GetBoardingDetailsRequestType *p)
{
	if (soap_read_ns1__GetBoardingDetailsRequestType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__EnterBoardingResponseType_DEFINED
#define SOAP_TYPE_ns1__EnterBoardingResponseType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__EnterBoardingResponseType(struct soap*, const char*, int, const ns1__EnterBoardingResponseType *, const char*);
SOAP_FMAC3 ns1__EnterBoardingResponseType * SOAP_FMAC4 soap_in_ns1__EnterBoardingResponseType(struct soap*, const char*, ns1__EnterBoardingResponseType *, const char*);
SOAP_FMAC1 ns1__EnterBoardingResponseType * SOAP_FMAC2 soap_instantiate_ns1__EnterBoardingResponseType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__EnterBoardingResponseType * soap_new_ns1__EnterBoardingResponseType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__EnterBoardingResponseType(soap, n, NULL, NULL, NULL);
}

inline ns1__EnterBoardingResponseType * soap_new_req_ns1__EnterBoardingResponseType(
	struct soap *soap,
	const std::string& Token,
	enum ns3__AckCodeType Ack__1,
	const std::string& Version__1,
	const std::string& Build__1)
{
	ns1__EnterBoardingResponseType *_p = soap_new_ns1__EnterBoardingResponseType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__EnterBoardingResponseType::Token = Token;
		_p->ns3__AbstractResponseType::Ack = Ack__1;
		_p->ns3__AbstractResponseType::Version = Version__1;
		_p->ns3__AbstractResponseType::Build = Build__1;
	}
	return _p;
}

inline ns1__EnterBoardingResponseType * soap_new_set_ns1__EnterBoardingResponseType(
	struct soap *soap,
	const std::string& Token,
	time_t *Timestamp__1,
	enum ns3__AckCodeType Ack__1,
	std::string *CorrelationID__1,
	const std::vector<ns3__ErrorType *> & Errors__1,
	const std::string& Version__1,
	const std::string& Build__1,
	char *__any__1)
{
	ns1__EnterBoardingResponseType *_p = soap_new_ns1__EnterBoardingResponseType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__EnterBoardingResponseType::Token = Token;
		_p->ns3__AbstractResponseType::Timestamp = Timestamp__1;
		_p->ns3__AbstractResponseType::Ack = Ack__1;
		_p->ns3__AbstractResponseType::CorrelationID = CorrelationID__1;
		_p->ns3__AbstractResponseType::Errors = Errors__1;
		_p->ns3__AbstractResponseType::Version = Version__1;
		_p->ns3__AbstractResponseType::Build = Build__1;
		_p->ns3__AbstractResponseType::__any = __any__1;
	}
	return _p;
}

inline int soap_write_ns1__EnterBoardingResponseType(struct soap *soap, ns1__EnterBoardingResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:EnterBoardingResponseType", p->soap_type() == SOAP_TYPE_ns1__EnterBoardingResponseType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__EnterBoardingResponseType(struct soap *soap, const char *URL, ns1__EnterBoardingResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:EnterBoardingResponseType", p->soap_type() == SOAP_TYPE_ns1__EnterBoardingResponseType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__EnterBoardingResponseType(struct soap *soap, const char *URL, ns1__EnterBoardingResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:EnterBoardingResponseType", p->soap_type() == SOAP_TYPE_ns1__EnterBoardingResponseType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__EnterBoardingResponseType * SOAP_FMAC4 soap_get_ns1__EnterBoardingResponseType(struct soap*, ns1__EnterBoardingResponseType *, const char*, const char*);

inline int soap_read_ns1__EnterBoardingResponseType(struct soap *soap, ns1__EnterBoardingResponseType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__EnterBoardingResponseType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__EnterBoardingResponseType(struct soap *soap, const char *URL, ns1__EnterBoardingResponseType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__EnterBoardingResponseType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__EnterBoardingResponseType(struct soap *soap, ns1__EnterBoardingResponseType *p)
{
	if (soap_read_ns1__EnterBoardingResponseType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__EnterBoardingRequestType_DEFINED
#define SOAP_TYPE_ns1__EnterBoardingRequestType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__EnterBoardingRequestType(struct soap*, const char*, int, const ns1__EnterBoardingRequestType *, const char*);
SOAP_FMAC3 ns1__EnterBoardingRequestType * SOAP_FMAC4 soap_in_ns1__EnterBoardingRequestType(struct soap*, const char*, ns1__EnterBoardingRequestType *, const char*);
SOAP_FMAC1 ns1__EnterBoardingRequestType * SOAP_FMAC2 soap_instantiate_ns1__EnterBoardingRequestType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__EnterBoardingRequestType * soap_new_ns1__EnterBoardingRequestType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__EnterBoardingRequestType(soap, n, NULL, NULL, NULL);
}

inline ns1__EnterBoardingRequestType * soap_new_req_ns1__EnterBoardingRequestType(
	struct soap *soap,
	ns3__EnterBoardingRequestDetailsType *ns3__EnterBoardingRequestDetails,
	const std::string& Version__1)
{
	ns1__EnterBoardingRequestType *_p = soap_new_ns1__EnterBoardingRequestType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__EnterBoardingRequestType::ns3__EnterBoardingRequestDetails = ns3__EnterBoardingRequestDetails;
		_p->ns3__AbstractRequestType::Version = Version__1;
	}
	return _p;
}

inline ns1__EnterBoardingRequestType * soap_new_set_ns1__EnterBoardingRequestType(
	struct soap *soap,
	ns3__EnterBoardingRequestDetailsType *ns3__EnterBoardingRequestDetails,
	const std::vector<enum ns3__DetailLevelCodeType> & DetailLevel__1,
	std::string *ErrorLanguage__1,
	const std::string& Version__1,
	char *__any__1)
{
	ns1__EnterBoardingRequestType *_p = soap_new_ns1__EnterBoardingRequestType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__EnterBoardingRequestType::ns3__EnterBoardingRequestDetails = ns3__EnterBoardingRequestDetails;
		_p->ns3__AbstractRequestType::DetailLevel = DetailLevel__1;
		_p->ns3__AbstractRequestType::ErrorLanguage = ErrorLanguage__1;
		_p->ns3__AbstractRequestType::Version = Version__1;
		_p->ns3__AbstractRequestType::__any = __any__1;
	}
	return _p;
}

inline int soap_write_ns1__EnterBoardingRequestType(struct soap *soap, ns1__EnterBoardingRequestType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:EnterBoardingRequestType", p->soap_type() == SOAP_TYPE_ns1__EnterBoardingRequestType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__EnterBoardingRequestType(struct soap *soap, const char *URL, ns1__EnterBoardingRequestType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:EnterBoardingRequestType", p->soap_type() == SOAP_TYPE_ns1__EnterBoardingRequestType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__EnterBoardingRequestType(struct soap *soap, const char *URL, ns1__EnterBoardingRequestType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:EnterBoardingRequestType", p->soap_type() == SOAP_TYPE_ns1__EnterBoardingRequestType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__EnterBoardingRequestType * SOAP_FMAC4 soap_get_ns1__EnterBoardingRequestType(struct soap*, ns1__EnterBoardingRequestType *, const char*, const char*);

inline int soap_read_ns1__EnterBoardingRequestType(struct soap *soap, ns1__EnterBoardingRequestType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__EnterBoardingRequestType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__EnterBoardingRequestType(struct soap *soap, const char *URL, ns1__EnterBoardingRequestType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__EnterBoardingRequestType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__EnterBoardingRequestType(struct soap *soap, ns1__EnterBoardingRequestType *p)
{
	if (soap_read_ns1__EnterBoardingRequestType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__AddressVerifyResponseType_DEFINED
#define SOAP_TYPE_ns1__AddressVerifyResponseType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__AddressVerifyResponseType(struct soap*, const char*, int, const ns1__AddressVerifyResponseType *, const char*);
SOAP_FMAC3 ns1__AddressVerifyResponseType * SOAP_FMAC4 soap_in_ns1__AddressVerifyResponseType(struct soap*, const char*, ns1__AddressVerifyResponseType *, const char*);
SOAP_FMAC1 ns1__AddressVerifyResponseType * SOAP_FMAC2 soap_instantiate_ns1__AddressVerifyResponseType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__AddressVerifyResponseType * soap_new_ns1__AddressVerifyResponseType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__AddressVerifyResponseType(soap, n, NULL, NULL, NULL);
}

inline ns1__AddressVerifyResponseType * soap_new_req_ns1__AddressVerifyResponseType(
	struct soap *soap,
	enum ns3__AddressStatusCodeType ConfirmationCode,
	enum ns3__MatchStatusCodeType StreetMatch,
	enum ns3__AckCodeType Ack__1,
	const std::string& Version__1,
	const std::string& Build__1)
{
	ns1__AddressVerifyResponseType *_p = soap_new_ns1__AddressVerifyResponseType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__AddressVerifyResponseType::ConfirmationCode = ConfirmationCode;
		_p->ns1__AddressVerifyResponseType::StreetMatch = StreetMatch;
		_p->ns3__AbstractResponseType::Ack = Ack__1;
		_p->ns3__AbstractResponseType::Version = Version__1;
		_p->ns3__AbstractResponseType::Build = Build__1;
	}
	return _p;
}

inline ns1__AddressVerifyResponseType * soap_new_set_ns1__AddressVerifyResponseType(
	struct soap *soap,
	enum ns3__AddressStatusCodeType ConfirmationCode,
	enum ns3__MatchStatusCodeType StreetMatch,
	enum ns3__MatchStatusCodeType *ZipMatch,
	enum ns3__CountryCodeType *CountryCode,
	std::string *PayPalToken,
	time_t *Timestamp__1,
	enum ns3__AckCodeType Ack__1,
	std::string *CorrelationID__1,
	const std::vector<ns3__ErrorType *> & Errors__1,
	const std::string& Version__1,
	const std::string& Build__1,
	char *__any__1)
{
	ns1__AddressVerifyResponseType *_p = soap_new_ns1__AddressVerifyResponseType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__AddressVerifyResponseType::ConfirmationCode = ConfirmationCode;
		_p->ns1__AddressVerifyResponseType::StreetMatch = StreetMatch;
		_p->ns1__AddressVerifyResponseType::ZipMatch = ZipMatch;
		_p->ns1__AddressVerifyResponseType::CountryCode = CountryCode;
		_p->ns1__AddressVerifyResponseType::PayPalToken = PayPalToken;
		_p->ns3__AbstractResponseType::Timestamp = Timestamp__1;
		_p->ns3__AbstractResponseType::Ack = Ack__1;
		_p->ns3__AbstractResponseType::CorrelationID = CorrelationID__1;
		_p->ns3__AbstractResponseType::Errors = Errors__1;
		_p->ns3__AbstractResponseType::Version = Version__1;
		_p->ns3__AbstractResponseType::Build = Build__1;
		_p->ns3__AbstractResponseType::__any = __any__1;
	}
	return _p;
}

inline int soap_write_ns1__AddressVerifyResponseType(struct soap *soap, ns1__AddressVerifyResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:AddressVerifyResponseType", p->soap_type() == SOAP_TYPE_ns1__AddressVerifyResponseType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__AddressVerifyResponseType(struct soap *soap, const char *URL, ns1__AddressVerifyResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:AddressVerifyResponseType", p->soap_type() == SOAP_TYPE_ns1__AddressVerifyResponseType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__AddressVerifyResponseType(struct soap *soap, const char *URL, ns1__AddressVerifyResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:AddressVerifyResponseType", p->soap_type() == SOAP_TYPE_ns1__AddressVerifyResponseType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__AddressVerifyResponseType * SOAP_FMAC4 soap_get_ns1__AddressVerifyResponseType(struct soap*, ns1__AddressVerifyResponseType *, const char*, const char*);

inline int soap_read_ns1__AddressVerifyResponseType(struct soap *soap, ns1__AddressVerifyResponseType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__AddressVerifyResponseType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__AddressVerifyResponseType(struct soap *soap, const char *URL, ns1__AddressVerifyResponseType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__AddressVerifyResponseType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__AddressVerifyResponseType(struct soap *soap, ns1__AddressVerifyResponseType *p)
{
	if (soap_read_ns1__AddressVerifyResponseType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__AddressVerifyRequestType_DEFINED
#define SOAP_TYPE_ns1__AddressVerifyRequestType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__AddressVerifyRequestType(struct soap*, const char*, int, const ns1__AddressVerifyRequestType *, const char*);
SOAP_FMAC3 ns1__AddressVerifyRequestType * SOAP_FMAC4 soap_in_ns1__AddressVerifyRequestType(struct soap*, const char*, ns1__AddressVerifyRequestType *, const char*);
SOAP_FMAC1 ns1__AddressVerifyRequestType * SOAP_FMAC2 soap_instantiate_ns1__AddressVerifyRequestType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__AddressVerifyRequestType * soap_new_ns1__AddressVerifyRequestType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__AddressVerifyRequestType(soap, n, NULL, NULL, NULL);
}

inline ns1__AddressVerifyRequestType * soap_new_req_ns1__AddressVerifyRequestType(
	struct soap *soap,
	const std::string& Email,
	const std::string& Street,
	const std::string& Zip,
	const std::string& Version__1)
{
	ns1__AddressVerifyRequestType *_p = soap_new_ns1__AddressVerifyRequestType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__AddressVerifyRequestType::Email = Email;
		_p->ns1__AddressVerifyRequestType::Street = Street;
		_p->ns1__AddressVerifyRequestType::Zip = Zip;
		_p->ns3__AbstractRequestType::Version = Version__1;
	}
	return _p;
}

inline ns1__AddressVerifyRequestType * soap_new_set_ns1__AddressVerifyRequestType(
	struct soap *soap,
	const std::string& Email,
	const std::string& Street,
	const std::string& Zip,
	const std::vector<enum ns3__DetailLevelCodeType> & DetailLevel__1,
	std::string *ErrorLanguage__1,
	const std::string& Version__1,
	char *__any__1)
{
	ns1__AddressVerifyRequestType *_p = soap_new_ns1__AddressVerifyRequestType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__AddressVerifyRequestType::Email = Email;
		_p->ns1__AddressVerifyRequestType::Street = Street;
		_p->ns1__AddressVerifyRequestType::Zip = Zip;
		_p->ns3__AbstractRequestType::DetailLevel = DetailLevel__1;
		_p->ns3__AbstractRequestType::ErrorLanguage = ErrorLanguage__1;
		_p->ns3__AbstractRequestType::Version = Version__1;
		_p->ns3__AbstractRequestType::__any = __any__1;
	}
	return _p;
}

inline int soap_write_ns1__AddressVerifyRequestType(struct soap *soap, ns1__AddressVerifyRequestType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:AddressVerifyRequestType", p->soap_type() == SOAP_TYPE_ns1__AddressVerifyRequestType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__AddressVerifyRequestType(struct soap *soap, const char *URL, ns1__AddressVerifyRequestType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:AddressVerifyRequestType", p->soap_type() == SOAP_TYPE_ns1__AddressVerifyRequestType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__AddressVerifyRequestType(struct soap *soap, const char *URL, ns1__AddressVerifyRequestType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:AddressVerifyRequestType", p->soap_type() == SOAP_TYPE_ns1__AddressVerifyRequestType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__AddressVerifyRequestType * SOAP_FMAC4 soap_get_ns1__AddressVerifyRequestType(struct soap*, ns1__AddressVerifyRequestType *, const char*, const char*);

inline int soap_read_ns1__AddressVerifyRequestType(struct soap *soap, ns1__AddressVerifyRequestType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__AddressVerifyRequestType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__AddressVerifyRequestType(struct soap *soap, const char *URL, ns1__AddressVerifyRequestType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__AddressVerifyRequestType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__AddressVerifyRequestType(struct soap *soap, ns1__AddressVerifyRequestType *p)
{
	if (soap_read_ns1__AddressVerifyRequestType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__BAUpdateResponseType_DEFINED
#define SOAP_TYPE_ns1__BAUpdateResponseType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__BAUpdateResponseType(struct soap*, const char*, int, const ns1__BAUpdateResponseType *, const char*);
SOAP_FMAC3 ns1__BAUpdateResponseType * SOAP_FMAC4 soap_in_ns1__BAUpdateResponseType(struct soap*, const char*, ns1__BAUpdateResponseType *, const char*);
SOAP_FMAC1 ns1__BAUpdateResponseType * SOAP_FMAC2 soap_instantiate_ns1__BAUpdateResponseType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__BAUpdateResponseType * soap_new_ns1__BAUpdateResponseType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__BAUpdateResponseType(soap, n, NULL, NULL, NULL);
}

inline ns1__BAUpdateResponseType * soap_new_req_ns1__BAUpdateResponseType(
	struct soap *soap,
	ns3__BAUpdateResponseDetailsType *ns3__BAUpdateResponseDetails,
	enum ns3__AckCodeType Ack__1,
	const std::string& Version__1,
	const std::string& Build__1)
{
	ns1__BAUpdateResponseType *_p = soap_new_ns1__BAUpdateResponseType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__BAUpdateResponseType::ns3__BAUpdateResponseDetails = ns3__BAUpdateResponseDetails;
		_p->ns3__AbstractResponseType::Ack = Ack__1;
		_p->ns3__AbstractResponseType::Version = Version__1;
		_p->ns3__AbstractResponseType::Build = Build__1;
	}
	return _p;
}

inline ns1__BAUpdateResponseType * soap_new_set_ns1__BAUpdateResponseType(
	struct soap *soap,
	ns3__BAUpdateResponseDetailsType *ns3__BAUpdateResponseDetails,
	time_t *Timestamp__1,
	enum ns3__AckCodeType Ack__1,
	std::string *CorrelationID__1,
	const std::vector<ns3__ErrorType *> & Errors__1,
	const std::string& Version__1,
	const std::string& Build__1,
	char *__any__1)
{
	ns1__BAUpdateResponseType *_p = soap_new_ns1__BAUpdateResponseType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__BAUpdateResponseType::ns3__BAUpdateResponseDetails = ns3__BAUpdateResponseDetails;
		_p->ns3__AbstractResponseType::Timestamp = Timestamp__1;
		_p->ns3__AbstractResponseType::Ack = Ack__1;
		_p->ns3__AbstractResponseType::CorrelationID = CorrelationID__1;
		_p->ns3__AbstractResponseType::Errors = Errors__1;
		_p->ns3__AbstractResponseType::Version = Version__1;
		_p->ns3__AbstractResponseType::Build = Build__1;
		_p->ns3__AbstractResponseType::__any = __any__1;
	}
	return _p;
}

inline int soap_write_ns1__BAUpdateResponseType(struct soap *soap, ns1__BAUpdateResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:BAUpdateResponseType", p->soap_type() == SOAP_TYPE_ns1__BAUpdateResponseType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__BAUpdateResponseType(struct soap *soap, const char *URL, ns1__BAUpdateResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:BAUpdateResponseType", p->soap_type() == SOAP_TYPE_ns1__BAUpdateResponseType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__BAUpdateResponseType(struct soap *soap, const char *URL, ns1__BAUpdateResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:BAUpdateResponseType", p->soap_type() == SOAP_TYPE_ns1__BAUpdateResponseType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__BAUpdateResponseType * SOAP_FMAC4 soap_get_ns1__BAUpdateResponseType(struct soap*, ns1__BAUpdateResponseType *, const char*, const char*);

inline int soap_read_ns1__BAUpdateResponseType(struct soap *soap, ns1__BAUpdateResponseType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__BAUpdateResponseType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__BAUpdateResponseType(struct soap *soap, const char *URL, ns1__BAUpdateResponseType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__BAUpdateResponseType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__BAUpdateResponseType(struct soap *soap, ns1__BAUpdateResponseType *p)
{
	if (soap_read_ns1__BAUpdateResponseType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__BAUpdateRequestType_DEFINED
#define SOAP_TYPE_ns1__BAUpdateRequestType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__BAUpdateRequestType(struct soap*, const char*, int, const ns1__BAUpdateRequestType *, const char*);
SOAP_FMAC3 ns1__BAUpdateRequestType * SOAP_FMAC4 soap_in_ns1__BAUpdateRequestType(struct soap*, const char*, ns1__BAUpdateRequestType *, const char*);
SOAP_FMAC1 ns1__BAUpdateRequestType * SOAP_FMAC2 soap_instantiate_ns1__BAUpdateRequestType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__BAUpdateRequestType * soap_new_ns1__BAUpdateRequestType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__BAUpdateRequestType(soap, n, NULL, NULL, NULL);
}

inline ns1__BAUpdateRequestType * soap_new_req_ns1__BAUpdateRequestType(
	struct soap *soap,
	const std::string& ReferenceID,
	const std::string& Version__1)
{
	ns1__BAUpdateRequestType *_p = soap_new_ns1__BAUpdateRequestType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__BAUpdateRequestType::ReferenceID = ReferenceID;
		_p->ns3__AbstractRequestType::Version = Version__1;
	}
	return _p;
}

inline ns1__BAUpdateRequestType * soap_new_set_ns1__BAUpdateRequestType(
	struct soap *soap,
	const std::string& ReferenceID,
	std::string *BillingAgreementDescription,
	enum ns3__MerchantPullStatusCodeType *BillingAgreementStatus,
	std::string *BillingAgreementCustom,
	const std::vector<enum ns3__DetailLevelCodeType> & DetailLevel__1,
	std::string *ErrorLanguage__1,
	const std::string& Version__1,
	char *__any__1)
{
	ns1__BAUpdateRequestType *_p = soap_new_ns1__BAUpdateRequestType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__BAUpdateRequestType::ReferenceID = ReferenceID;
		_p->ns1__BAUpdateRequestType::BillingAgreementDescription = BillingAgreementDescription;
		_p->ns1__BAUpdateRequestType::BillingAgreementStatus = BillingAgreementStatus;
		_p->ns1__BAUpdateRequestType::BillingAgreementCustom = BillingAgreementCustom;
		_p->ns3__AbstractRequestType::DetailLevel = DetailLevel__1;
		_p->ns3__AbstractRequestType::ErrorLanguage = ErrorLanguage__1;
		_p->ns3__AbstractRequestType::Version = Version__1;
		_p->ns3__AbstractRequestType::__any = __any__1;
	}
	return _p;
}

inline int soap_write_ns1__BAUpdateRequestType(struct soap *soap, ns1__BAUpdateRequestType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:BAUpdateRequestType", p->soap_type() == SOAP_TYPE_ns1__BAUpdateRequestType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__BAUpdateRequestType(struct soap *soap, const char *URL, ns1__BAUpdateRequestType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:BAUpdateRequestType", p->soap_type() == SOAP_TYPE_ns1__BAUpdateRequestType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__BAUpdateRequestType(struct soap *soap, const char *URL, ns1__BAUpdateRequestType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:BAUpdateRequestType", p->soap_type() == SOAP_TYPE_ns1__BAUpdateRequestType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__BAUpdateRequestType * SOAP_FMAC4 soap_get_ns1__BAUpdateRequestType(struct soap*, ns1__BAUpdateRequestType *, const char*, const char*);

inline int soap_read_ns1__BAUpdateRequestType(struct soap *soap, ns1__BAUpdateRequestType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__BAUpdateRequestType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__BAUpdateRequestType(struct soap *soap, const char *URL, ns1__BAUpdateRequestType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__BAUpdateRequestType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__BAUpdateRequestType(struct soap *soap, ns1__BAUpdateRequestType *p)
{
	if (soap_read_ns1__BAUpdateRequestType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__MassPayRequestItemType_DEFINED
#define SOAP_TYPE_ns1__MassPayRequestItemType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__MassPayRequestItemType(struct soap*, const char*, int, const ns1__MassPayRequestItemType *, const char*);
SOAP_FMAC3 ns1__MassPayRequestItemType * SOAP_FMAC4 soap_in_ns1__MassPayRequestItemType(struct soap*, const char*, ns1__MassPayRequestItemType *, const char*);
SOAP_FMAC1 ns1__MassPayRequestItemType * SOAP_FMAC2 soap_instantiate_ns1__MassPayRequestItemType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__MassPayRequestItemType * soap_new_ns1__MassPayRequestItemType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__MassPayRequestItemType(soap, n, NULL, NULL, NULL);
}

inline ns1__MassPayRequestItemType * soap_new_req_ns1__MassPayRequestItemType(
	struct soap *soap,
	ns2__BasicAmountType *Amount)
{
	ns1__MassPayRequestItemType *_p = soap_new_ns1__MassPayRequestItemType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__MassPayRequestItemType::Amount = Amount;
	}
	return _p;
}

inline ns1__MassPayRequestItemType * soap_new_set_ns1__MassPayRequestItemType(
	struct soap *soap,
	std::string *ReceiverEmail,
	std::string *ReceiverPhone,
	std::string *ReceiverID,
	ns2__BasicAmountType *Amount,
	std::string *UniqueId,
	std::string *Note)
{
	ns1__MassPayRequestItemType *_p = soap_new_ns1__MassPayRequestItemType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__MassPayRequestItemType::ReceiverEmail = ReceiverEmail;
		_p->ns1__MassPayRequestItemType::ReceiverPhone = ReceiverPhone;
		_p->ns1__MassPayRequestItemType::ReceiverID = ReceiverID;
		_p->ns1__MassPayRequestItemType::Amount = Amount;
		_p->ns1__MassPayRequestItemType::UniqueId = UniqueId;
		_p->ns1__MassPayRequestItemType::Note = Note;
	}
	return _p;
}

inline int soap_write_ns1__MassPayRequestItemType(struct soap *soap, ns1__MassPayRequestItemType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:MassPayRequestItemType", p->soap_type() == SOAP_TYPE_ns1__MassPayRequestItemType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__MassPayRequestItemType(struct soap *soap, const char *URL, ns1__MassPayRequestItemType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:MassPayRequestItemType", p->soap_type() == SOAP_TYPE_ns1__MassPayRequestItemType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__MassPayRequestItemType(struct soap *soap, const char *URL, ns1__MassPayRequestItemType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:MassPayRequestItemType", p->soap_type() == SOAP_TYPE_ns1__MassPayRequestItemType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__MassPayRequestItemType * SOAP_FMAC4 soap_get_ns1__MassPayRequestItemType(struct soap*, ns1__MassPayRequestItemType *, const char*, const char*);

inline int soap_read_ns1__MassPayRequestItemType(struct soap *soap, ns1__MassPayRequestItemType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__MassPayRequestItemType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__MassPayRequestItemType(struct soap *soap, const char *URL, ns1__MassPayRequestItemType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__MassPayRequestItemType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__MassPayRequestItemType(struct soap *soap, ns1__MassPayRequestItemType *p)
{
	if (soap_read_ns1__MassPayRequestItemType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__MassPayResponseType_DEFINED
#define SOAP_TYPE_ns1__MassPayResponseType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__MassPayResponseType(struct soap*, const char*, int, const ns1__MassPayResponseType *, const char*);
SOAP_FMAC3 ns1__MassPayResponseType * SOAP_FMAC4 soap_in_ns1__MassPayResponseType(struct soap*, const char*, ns1__MassPayResponseType *, const char*);
SOAP_FMAC1 ns1__MassPayResponseType * SOAP_FMAC2 soap_instantiate_ns1__MassPayResponseType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__MassPayResponseType * soap_new_ns1__MassPayResponseType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__MassPayResponseType(soap, n, NULL, NULL, NULL);
}

inline ns1__MassPayResponseType * soap_new_req_ns1__MassPayResponseType(
	struct soap *soap,
	enum ns3__AckCodeType Ack__1,
	const std::string& Version__1,
	const std::string& Build__1)
{
	ns1__MassPayResponseType *_p = soap_new_ns1__MassPayResponseType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__AbstractResponseType::Ack = Ack__1;
		_p->ns3__AbstractResponseType::Version = Version__1;
		_p->ns3__AbstractResponseType::Build = Build__1;
	}
	return _p;
}

inline ns1__MassPayResponseType * soap_new_set_ns1__MassPayResponseType(
	struct soap *soap,
	time_t *Timestamp__1,
	enum ns3__AckCodeType Ack__1,
	std::string *CorrelationID__1,
	const std::vector<ns3__ErrorType *> & Errors__1,
	const std::string& Version__1,
	const std::string& Build__1,
	char *__any__1)
{
	ns1__MassPayResponseType *_p = soap_new_ns1__MassPayResponseType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__AbstractResponseType::Timestamp = Timestamp__1;
		_p->ns3__AbstractResponseType::Ack = Ack__1;
		_p->ns3__AbstractResponseType::CorrelationID = CorrelationID__1;
		_p->ns3__AbstractResponseType::Errors = Errors__1;
		_p->ns3__AbstractResponseType::Version = Version__1;
		_p->ns3__AbstractResponseType::Build = Build__1;
		_p->ns3__AbstractResponseType::__any = __any__1;
	}
	return _p;
}

inline int soap_write_ns1__MassPayResponseType(struct soap *soap, ns1__MassPayResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:MassPayResponseType", p->soap_type() == SOAP_TYPE_ns1__MassPayResponseType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__MassPayResponseType(struct soap *soap, const char *URL, ns1__MassPayResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:MassPayResponseType", p->soap_type() == SOAP_TYPE_ns1__MassPayResponseType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__MassPayResponseType(struct soap *soap, const char *URL, ns1__MassPayResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:MassPayResponseType", p->soap_type() == SOAP_TYPE_ns1__MassPayResponseType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__MassPayResponseType * SOAP_FMAC4 soap_get_ns1__MassPayResponseType(struct soap*, ns1__MassPayResponseType *, const char*, const char*);

inline int soap_read_ns1__MassPayResponseType(struct soap *soap, ns1__MassPayResponseType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__MassPayResponseType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__MassPayResponseType(struct soap *soap, const char *URL, ns1__MassPayResponseType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__MassPayResponseType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__MassPayResponseType(struct soap *soap, ns1__MassPayResponseType *p)
{
	if (soap_read_ns1__MassPayResponseType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__MassPayRequestType_DEFINED
#define SOAP_TYPE_ns1__MassPayRequestType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__MassPayRequestType(struct soap*, const char*, int, const ns1__MassPayRequestType *, const char*);
SOAP_FMAC3 ns1__MassPayRequestType * SOAP_FMAC4 soap_in_ns1__MassPayRequestType(struct soap*, const char*, ns1__MassPayRequestType *, const char*);
SOAP_FMAC1 ns1__MassPayRequestType * SOAP_FMAC2 soap_instantiate_ns1__MassPayRequestType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__MassPayRequestType * soap_new_ns1__MassPayRequestType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__MassPayRequestType(soap, n, NULL, NULL, NULL);
}

inline ns1__MassPayRequestType * soap_new_req_ns1__MassPayRequestType(
	struct soap *soap,
	const std::vector<ns1__MassPayRequestItemType *> & MassPayItem,
	const std::string& Version__1)
{
	ns1__MassPayRequestType *_p = soap_new_ns1__MassPayRequestType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__MassPayRequestType::MassPayItem = MassPayItem;
		_p->ns3__AbstractRequestType::Version = Version__1;
	}
	return _p;
}

inline ns1__MassPayRequestType * soap_new_set_ns1__MassPayRequestType(
	struct soap *soap,
	std::string *EmailSubject,
	enum ns3__ReceiverInfoCodeType *ReceiverType,
	std::string *ButtonSource,
	const std::vector<ns1__MassPayRequestItemType *> & MassPayItem,
	const std::vector<enum ns3__DetailLevelCodeType> & DetailLevel__1,
	std::string *ErrorLanguage__1,
	const std::string& Version__1,
	char *__any__1)
{
	ns1__MassPayRequestType *_p = soap_new_ns1__MassPayRequestType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__MassPayRequestType::EmailSubject = EmailSubject;
		_p->ns1__MassPayRequestType::ReceiverType = ReceiverType;
		_p->ns1__MassPayRequestType::ButtonSource = ButtonSource;
		_p->ns1__MassPayRequestType::MassPayItem = MassPayItem;
		_p->ns3__AbstractRequestType::DetailLevel = DetailLevel__1;
		_p->ns3__AbstractRequestType::ErrorLanguage = ErrorLanguage__1;
		_p->ns3__AbstractRequestType::Version = Version__1;
		_p->ns3__AbstractRequestType::__any = __any__1;
	}
	return _p;
}

inline int soap_write_ns1__MassPayRequestType(struct soap *soap, ns1__MassPayRequestType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:MassPayRequestType", p->soap_type() == SOAP_TYPE_ns1__MassPayRequestType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__MassPayRequestType(struct soap *soap, const char *URL, ns1__MassPayRequestType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:MassPayRequestType", p->soap_type() == SOAP_TYPE_ns1__MassPayRequestType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__MassPayRequestType(struct soap *soap, const char *URL, ns1__MassPayRequestType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:MassPayRequestType", p->soap_type() == SOAP_TYPE_ns1__MassPayRequestType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__MassPayRequestType * SOAP_FMAC4 soap_get_ns1__MassPayRequestType(struct soap*, ns1__MassPayRequestType *, const char*, const char*);

inline int soap_read_ns1__MassPayRequestType(struct soap *soap, ns1__MassPayRequestType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__MassPayRequestType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__MassPayRequestType(struct soap *soap, const char *URL, ns1__MassPayRequestType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__MassPayRequestType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__MassPayRequestType(struct soap *soap, ns1__MassPayRequestType *p)
{
	if (soap_read_ns1__MassPayRequestType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__TransactionSearchResponseType_DEFINED
#define SOAP_TYPE_ns1__TransactionSearchResponseType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__TransactionSearchResponseType(struct soap*, const char*, int, const ns1__TransactionSearchResponseType *, const char*);
SOAP_FMAC3 ns1__TransactionSearchResponseType * SOAP_FMAC4 soap_in_ns1__TransactionSearchResponseType(struct soap*, const char*, ns1__TransactionSearchResponseType *, const char*);
SOAP_FMAC1 ns1__TransactionSearchResponseType * SOAP_FMAC2 soap_instantiate_ns1__TransactionSearchResponseType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__TransactionSearchResponseType * soap_new_ns1__TransactionSearchResponseType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__TransactionSearchResponseType(soap, n, NULL, NULL, NULL);
}

inline ns1__TransactionSearchResponseType * soap_new_req_ns1__TransactionSearchResponseType(
	struct soap *soap,
	enum ns3__AckCodeType Ack__1,
	const std::string& Version__1,
	const std::string& Build__1)
{
	ns1__TransactionSearchResponseType *_p = soap_new_ns1__TransactionSearchResponseType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__AbstractResponseType::Ack = Ack__1;
		_p->ns3__AbstractResponseType::Version = Version__1;
		_p->ns3__AbstractResponseType::Build = Build__1;
	}
	return _p;
}

inline ns1__TransactionSearchResponseType * soap_new_set_ns1__TransactionSearchResponseType(
	struct soap *soap,
	const std::vector<ns3__PaymentTransactionSearchResultType *> & ns3__PaymentTransactions,
	time_t *Timestamp__1,
	enum ns3__AckCodeType Ack__1,
	std::string *CorrelationID__1,
	const std::vector<ns3__ErrorType *> & Errors__1,
	const std::string& Version__1,
	const std::string& Build__1,
	char *__any__1)
{
	ns1__TransactionSearchResponseType *_p = soap_new_ns1__TransactionSearchResponseType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__TransactionSearchResponseType::ns3__PaymentTransactions = ns3__PaymentTransactions;
		_p->ns3__AbstractResponseType::Timestamp = Timestamp__1;
		_p->ns3__AbstractResponseType::Ack = Ack__1;
		_p->ns3__AbstractResponseType::CorrelationID = CorrelationID__1;
		_p->ns3__AbstractResponseType::Errors = Errors__1;
		_p->ns3__AbstractResponseType::Version = Version__1;
		_p->ns3__AbstractResponseType::Build = Build__1;
		_p->ns3__AbstractResponseType::__any = __any__1;
	}
	return _p;
}

inline int soap_write_ns1__TransactionSearchResponseType(struct soap *soap, ns1__TransactionSearchResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:TransactionSearchResponseType", p->soap_type() == SOAP_TYPE_ns1__TransactionSearchResponseType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__TransactionSearchResponseType(struct soap *soap, const char *URL, ns1__TransactionSearchResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:TransactionSearchResponseType", p->soap_type() == SOAP_TYPE_ns1__TransactionSearchResponseType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__TransactionSearchResponseType(struct soap *soap, const char *URL, ns1__TransactionSearchResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:TransactionSearchResponseType", p->soap_type() == SOAP_TYPE_ns1__TransactionSearchResponseType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__TransactionSearchResponseType * SOAP_FMAC4 soap_get_ns1__TransactionSearchResponseType(struct soap*, ns1__TransactionSearchResponseType *, const char*, const char*);

inline int soap_read_ns1__TransactionSearchResponseType(struct soap *soap, ns1__TransactionSearchResponseType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__TransactionSearchResponseType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__TransactionSearchResponseType(struct soap *soap, const char *URL, ns1__TransactionSearchResponseType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__TransactionSearchResponseType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__TransactionSearchResponseType(struct soap *soap, ns1__TransactionSearchResponseType *p)
{
	if (soap_read_ns1__TransactionSearchResponseType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__TransactionSearchRequestType_DEFINED
#define SOAP_TYPE_ns1__TransactionSearchRequestType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__TransactionSearchRequestType(struct soap*, const char*, int, const ns1__TransactionSearchRequestType *, const char*);
SOAP_FMAC3 ns1__TransactionSearchRequestType * SOAP_FMAC4 soap_in_ns1__TransactionSearchRequestType(struct soap*, const char*, ns1__TransactionSearchRequestType *, const char*);
SOAP_FMAC1 ns1__TransactionSearchRequestType * SOAP_FMAC2 soap_instantiate_ns1__TransactionSearchRequestType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__TransactionSearchRequestType * soap_new_ns1__TransactionSearchRequestType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__TransactionSearchRequestType(soap, n, NULL, NULL, NULL);
}

inline ns1__TransactionSearchRequestType * soap_new_req_ns1__TransactionSearchRequestType(
	struct soap *soap,
	time_t StartDate,
	const std::string& Version__1)
{
	ns1__TransactionSearchRequestType *_p = soap_new_ns1__TransactionSearchRequestType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__TransactionSearchRequestType::StartDate = StartDate;
		_p->ns3__AbstractRequestType::Version = Version__1;
	}
	return _p;
}

inline ns1__TransactionSearchRequestType * soap_new_set_ns1__TransactionSearchRequestType(
	struct soap *soap,
	time_t StartDate,
	time_t *EndDate,
	std::string *Payer,
	std::string *Receiver,
	std::string *ReceiptID,
	std::string *TransactionID,
	std::string *ProfileID,
	ns3__PersonNameType *PayerName,
	std::string *AuctionItemNumber,
	std::string *InvoiceID,
	std::string *CardNumber,
	enum ns3__PaymentTransactionClassCodeType *TransactionClass,
	ns2__BasicAmountType *Amount,
	enum ns3__CurrencyCodeType *CurrencyCode,
	enum ns3__PaymentTransactionStatusCodeType *Status,
	const std::vector<enum ns3__DetailLevelCodeType> & DetailLevel__1,
	std::string *ErrorLanguage__1,
	const std::string& Version__1,
	char *__any__1)
{
	ns1__TransactionSearchRequestType *_p = soap_new_ns1__TransactionSearchRequestType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__TransactionSearchRequestType::StartDate = StartDate;
		_p->ns1__TransactionSearchRequestType::EndDate = EndDate;
		_p->ns1__TransactionSearchRequestType::Payer = Payer;
		_p->ns1__TransactionSearchRequestType::Receiver = Receiver;
		_p->ns1__TransactionSearchRequestType::ReceiptID = ReceiptID;
		_p->ns1__TransactionSearchRequestType::TransactionID = TransactionID;
		_p->ns1__TransactionSearchRequestType::ProfileID = ProfileID;
		_p->ns1__TransactionSearchRequestType::PayerName = PayerName;
		_p->ns1__TransactionSearchRequestType::AuctionItemNumber = AuctionItemNumber;
		_p->ns1__TransactionSearchRequestType::InvoiceID = InvoiceID;
		_p->ns1__TransactionSearchRequestType::CardNumber = CardNumber;
		_p->ns1__TransactionSearchRequestType::TransactionClass = TransactionClass;
		_p->ns1__TransactionSearchRequestType::Amount = Amount;
		_p->ns1__TransactionSearchRequestType::CurrencyCode = CurrencyCode;
		_p->ns1__TransactionSearchRequestType::Status = Status;
		_p->ns3__AbstractRequestType::DetailLevel = DetailLevel__1;
		_p->ns3__AbstractRequestType::ErrorLanguage = ErrorLanguage__1;
		_p->ns3__AbstractRequestType::Version = Version__1;
		_p->ns3__AbstractRequestType::__any = __any__1;
	}
	return _p;
}

inline int soap_write_ns1__TransactionSearchRequestType(struct soap *soap, ns1__TransactionSearchRequestType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:TransactionSearchRequestType", p->soap_type() == SOAP_TYPE_ns1__TransactionSearchRequestType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__TransactionSearchRequestType(struct soap *soap, const char *URL, ns1__TransactionSearchRequestType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:TransactionSearchRequestType", p->soap_type() == SOAP_TYPE_ns1__TransactionSearchRequestType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__TransactionSearchRequestType(struct soap *soap, const char *URL, ns1__TransactionSearchRequestType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:TransactionSearchRequestType", p->soap_type() == SOAP_TYPE_ns1__TransactionSearchRequestType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__TransactionSearchRequestType * SOAP_FMAC4 soap_get_ns1__TransactionSearchRequestType(struct soap*, ns1__TransactionSearchRequestType *, const char*, const char*);

inline int soap_read_ns1__TransactionSearchRequestType(struct soap *soap, ns1__TransactionSearchRequestType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__TransactionSearchRequestType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__TransactionSearchRequestType(struct soap *soap, const char *URL, ns1__TransactionSearchRequestType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__TransactionSearchRequestType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__TransactionSearchRequestType(struct soap *soap, ns1__TransactionSearchRequestType *p)
{
	if (soap_read_ns1__TransactionSearchRequestType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__BillUserResponseType_DEFINED
#define SOAP_TYPE_ns1__BillUserResponseType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__BillUserResponseType(struct soap*, const char*, int, const ns1__BillUserResponseType *, const char*);
SOAP_FMAC3 ns1__BillUserResponseType * SOAP_FMAC4 soap_in_ns1__BillUserResponseType(struct soap*, const char*, ns1__BillUserResponseType *, const char*);
SOAP_FMAC1 ns1__BillUserResponseType * SOAP_FMAC2 soap_instantiate_ns1__BillUserResponseType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__BillUserResponseType * soap_new_ns1__BillUserResponseType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__BillUserResponseType(soap, n, NULL, NULL, NULL);
}

inline ns1__BillUserResponseType * soap_new_req_ns1__BillUserResponseType(
	struct soap *soap,
	ns3__MerchantPullPaymentResponseType *ns3__BillUserResponseDetails,
	enum ns3__AckCodeType Ack__1,
	const std::string& Version__1,
	const std::string& Build__1)
{
	ns1__BillUserResponseType *_p = soap_new_ns1__BillUserResponseType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__BillUserResponseType::ns3__BillUserResponseDetails = ns3__BillUserResponseDetails;
		_p->ns3__AbstractResponseType::Ack = Ack__1;
		_p->ns3__AbstractResponseType::Version = Version__1;
		_p->ns3__AbstractResponseType::Build = Build__1;
	}
	return _p;
}

inline ns1__BillUserResponseType * soap_new_set_ns1__BillUserResponseType(
	struct soap *soap,
	ns3__MerchantPullPaymentResponseType *ns3__BillUserResponseDetails,
	ns3__FMFDetailsType *FMFDetails,
	time_t *Timestamp__1,
	enum ns3__AckCodeType Ack__1,
	std::string *CorrelationID__1,
	const std::vector<ns3__ErrorType *> & Errors__1,
	const std::string& Version__1,
	const std::string& Build__1,
	char *__any__1)
{
	ns1__BillUserResponseType *_p = soap_new_ns1__BillUserResponseType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__BillUserResponseType::ns3__BillUserResponseDetails = ns3__BillUserResponseDetails;
		_p->ns1__BillUserResponseType::FMFDetails = FMFDetails;
		_p->ns3__AbstractResponseType::Timestamp = Timestamp__1;
		_p->ns3__AbstractResponseType::Ack = Ack__1;
		_p->ns3__AbstractResponseType::CorrelationID = CorrelationID__1;
		_p->ns3__AbstractResponseType::Errors = Errors__1;
		_p->ns3__AbstractResponseType::Version = Version__1;
		_p->ns3__AbstractResponseType::Build = Build__1;
		_p->ns3__AbstractResponseType::__any = __any__1;
	}
	return _p;
}

inline int soap_write_ns1__BillUserResponseType(struct soap *soap, ns1__BillUserResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:BillUserResponseType", p->soap_type() == SOAP_TYPE_ns1__BillUserResponseType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__BillUserResponseType(struct soap *soap, const char *URL, ns1__BillUserResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:BillUserResponseType", p->soap_type() == SOAP_TYPE_ns1__BillUserResponseType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__BillUserResponseType(struct soap *soap, const char *URL, ns1__BillUserResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:BillUserResponseType", p->soap_type() == SOAP_TYPE_ns1__BillUserResponseType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__BillUserResponseType * SOAP_FMAC4 soap_get_ns1__BillUserResponseType(struct soap*, ns1__BillUserResponseType *, const char*, const char*);

inline int soap_read_ns1__BillUserResponseType(struct soap *soap, ns1__BillUserResponseType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__BillUserResponseType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__BillUserResponseType(struct soap *soap, const char *URL, ns1__BillUserResponseType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__BillUserResponseType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__BillUserResponseType(struct soap *soap, ns1__BillUserResponseType *p)
{
	if (soap_read_ns1__BillUserResponseType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__BillUserRequestType_DEFINED
#define SOAP_TYPE_ns1__BillUserRequestType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__BillUserRequestType(struct soap*, const char*, int, const ns1__BillUserRequestType *, const char*);
SOAP_FMAC3 ns1__BillUserRequestType * SOAP_FMAC4 soap_in_ns1__BillUserRequestType(struct soap*, const char*, ns1__BillUserRequestType *, const char*);
SOAP_FMAC1 ns1__BillUserRequestType * SOAP_FMAC2 soap_instantiate_ns1__BillUserRequestType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__BillUserRequestType * soap_new_ns1__BillUserRequestType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__BillUserRequestType(soap, n, NULL, NULL, NULL);
}

inline ns1__BillUserRequestType * soap_new_req_ns1__BillUserRequestType(
	struct soap *soap,
	ns3__MerchantPullPaymentType *ns3__MerchantPullPaymentDetails,
	const std::string& Version__1)
{
	ns1__BillUserRequestType *_p = soap_new_ns1__BillUserRequestType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__BillUserRequestType::ns3__MerchantPullPaymentDetails = ns3__MerchantPullPaymentDetails;
		_p->ns3__AbstractRequestType::Version = Version__1;
	}
	return _p;
}

inline ns1__BillUserRequestType * soap_new_set_ns1__BillUserRequestType(
	struct soap *soap,
	ns3__MerchantPullPaymentType *ns3__MerchantPullPaymentDetails,
	int *ReturnFMFDetails,
	const std::vector<enum ns3__DetailLevelCodeType> & DetailLevel__1,
	std::string *ErrorLanguage__1,
	const std::string& Version__1,
	char *__any__1)
{
	ns1__BillUserRequestType *_p = soap_new_ns1__BillUserRequestType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__BillUserRequestType::ns3__MerchantPullPaymentDetails = ns3__MerchantPullPaymentDetails;
		_p->ns1__BillUserRequestType::ReturnFMFDetails = ReturnFMFDetails;
		_p->ns3__AbstractRequestType::DetailLevel = DetailLevel__1;
		_p->ns3__AbstractRequestType::ErrorLanguage = ErrorLanguage__1;
		_p->ns3__AbstractRequestType::Version = Version__1;
		_p->ns3__AbstractRequestType::__any = __any__1;
	}
	return _p;
}

inline int soap_write_ns1__BillUserRequestType(struct soap *soap, ns1__BillUserRequestType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:BillUserRequestType", p->soap_type() == SOAP_TYPE_ns1__BillUserRequestType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__BillUserRequestType(struct soap *soap, const char *URL, ns1__BillUserRequestType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:BillUserRequestType", p->soap_type() == SOAP_TYPE_ns1__BillUserRequestType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__BillUserRequestType(struct soap *soap, const char *URL, ns1__BillUserRequestType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:BillUserRequestType", p->soap_type() == SOAP_TYPE_ns1__BillUserRequestType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__BillUserRequestType * SOAP_FMAC4 soap_get_ns1__BillUserRequestType(struct soap*, ns1__BillUserRequestType *, const char*, const char*);

inline int soap_read_ns1__BillUserRequestType(struct soap *soap, ns1__BillUserRequestType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__BillUserRequestType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__BillUserRequestType(struct soap *soap, const char *URL, ns1__BillUserRequestType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__BillUserRequestType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__BillUserRequestType(struct soap *soap, ns1__BillUserRequestType *p)
{
	if (soap_read_ns1__BillUserRequestType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__GetTransactionDetailsResponseType_DEFINED
#define SOAP_TYPE_ns1__GetTransactionDetailsResponseType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__GetTransactionDetailsResponseType(struct soap*, const char*, int, const ns1__GetTransactionDetailsResponseType *, const char*);
SOAP_FMAC3 ns1__GetTransactionDetailsResponseType * SOAP_FMAC4 soap_in_ns1__GetTransactionDetailsResponseType(struct soap*, const char*, ns1__GetTransactionDetailsResponseType *, const char*);
SOAP_FMAC1 ns1__GetTransactionDetailsResponseType * SOAP_FMAC2 soap_instantiate_ns1__GetTransactionDetailsResponseType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__GetTransactionDetailsResponseType * soap_new_ns1__GetTransactionDetailsResponseType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__GetTransactionDetailsResponseType(soap, n, NULL, NULL, NULL);
}

inline ns1__GetTransactionDetailsResponseType * soap_new_req_ns1__GetTransactionDetailsResponseType(
	struct soap *soap,
	ns3__PaymentTransactionType *ns3__PaymentTransactionDetails,
	ns3__ThreeDSecureInfoType *ns3__ThreeDSecureDetails,
	enum ns3__AckCodeType Ack__1,
	const std::string& Version__1,
	const std::string& Build__1)
{
	ns1__GetTransactionDetailsResponseType *_p = soap_new_ns1__GetTransactionDetailsResponseType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__GetTransactionDetailsResponseType::ns3__PaymentTransactionDetails = ns3__PaymentTransactionDetails;
		_p->ns1__GetTransactionDetailsResponseType::ns3__ThreeDSecureDetails = ns3__ThreeDSecureDetails;
		_p->ns3__AbstractResponseType::Ack = Ack__1;
		_p->ns3__AbstractResponseType::Version = Version__1;
		_p->ns3__AbstractResponseType::Build = Build__1;
	}
	return _p;
}

inline ns1__GetTransactionDetailsResponseType * soap_new_set_ns1__GetTransactionDetailsResponseType(
	struct soap *soap,
	ns3__PaymentTransactionType *ns3__PaymentTransactionDetails,
	ns3__ThreeDSecureInfoType *ns3__ThreeDSecureDetails,
	time_t *Timestamp__1,
	enum ns3__AckCodeType Ack__1,
	std::string *CorrelationID__1,
	const std::vector<ns3__ErrorType *> & Errors__1,
	const std::string& Version__1,
	const std::string& Build__1,
	char *__any__1)
{
	ns1__GetTransactionDetailsResponseType *_p = soap_new_ns1__GetTransactionDetailsResponseType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__GetTransactionDetailsResponseType::ns3__PaymentTransactionDetails = ns3__PaymentTransactionDetails;
		_p->ns1__GetTransactionDetailsResponseType::ns3__ThreeDSecureDetails = ns3__ThreeDSecureDetails;
		_p->ns3__AbstractResponseType::Timestamp = Timestamp__1;
		_p->ns3__AbstractResponseType::Ack = Ack__1;
		_p->ns3__AbstractResponseType::CorrelationID = CorrelationID__1;
		_p->ns3__AbstractResponseType::Errors = Errors__1;
		_p->ns3__AbstractResponseType::Version = Version__1;
		_p->ns3__AbstractResponseType::Build = Build__1;
		_p->ns3__AbstractResponseType::__any = __any__1;
	}
	return _p;
}

inline int soap_write_ns1__GetTransactionDetailsResponseType(struct soap *soap, ns1__GetTransactionDetailsResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetTransactionDetailsResponseType", p->soap_type() == SOAP_TYPE_ns1__GetTransactionDetailsResponseType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__GetTransactionDetailsResponseType(struct soap *soap, const char *URL, ns1__GetTransactionDetailsResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetTransactionDetailsResponseType", p->soap_type() == SOAP_TYPE_ns1__GetTransactionDetailsResponseType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__GetTransactionDetailsResponseType(struct soap *soap, const char *URL, ns1__GetTransactionDetailsResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetTransactionDetailsResponseType", p->soap_type() == SOAP_TYPE_ns1__GetTransactionDetailsResponseType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__GetTransactionDetailsResponseType * SOAP_FMAC4 soap_get_ns1__GetTransactionDetailsResponseType(struct soap*, ns1__GetTransactionDetailsResponseType *, const char*, const char*);

inline int soap_read_ns1__GetTransactionDetailsResponseType(struct soap *soap, ns1__GetTransactionDetailsResponseType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__GetTransactionDetailsResponseType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__GetTransactionDetailsResponseType(struct soap *soap, const char *URL, ns1__GetTransactionDetailsResponseType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__GetTransactionDetailsResponseType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__GetTransactionDetailsResponseType(struct soap *soap, ns1__GetTransactionDetailsResponseType *p)
{
	if (soap_read_ns1__GetTransactionDetailsResponseType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__GetTransactionDetailsRequestType_DEFINED
#define SOAP_TYPE_ns1__GetTransactionDetailsRequestType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__GetTransactionDetailsRequestType(struct soap*, const char*, int, const ns1__GetTransactionDetailsRequestType *, const char*);
SOAP_FMAC3 ns1__GetTransactionDetailsRequestType * SOAP_FMAC4 soap_in_ns1__GetTransactionDetailsRequestType(struct soap*, const char*, ns1__GetTransactionDetailsRequestType *, const char*);
SOAP_FMAC1 ns1__GetTransactionDetailsRequestType * SOAP_FMAC2 soap_instantiate_ns1__GetTransactionDetailsRequestType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__GetTransactionDetailsRequestType * soap_new_ns1__GetTransactionDetailsRequestType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__GetTransactionDetailsRequestType(soap, n, NULL, NULL, NULL);
}

inline ns1__GetTransactionDetailsRequestType * soap_new_req_ns1__GetTransactionDetailsRequestType(
	struct soap *soap,
	const std::string& TransactionID,
	const std::string& Version__1)
{
	ns1__GetTransactionDetailsRequestType *_p = soap_new_ns1__GetTransactionDetailsRequestType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__GetTransactionDetailsRequestType::TransactionID = TransactionID;
		_p->ns3__AbstractRequestType::Version = Version__1;
	}
	return _p;
}

inline ns1__GetTransactionDetailsRequestType * soap_new_set_ns1__GetTransactionDetailsRequestType(
	struct soap *soap,
	const std::string& TransactionID,
	const std::vector<enum ns3__DetailLevelCodeType> & DetailLevel__1,
	std::string *ErrorLanguage__1,
	const std::string& Version__1,
	char *__any__1)
{
	ns1__GetTransactionDetailsRequestType *_p = soap_new_ns1__GetTransactionDetailsRequestType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__GetTransactionDetailsRequestType::TransactionID = TransactionID;
		_p->ns3__AbstractRequestType::DetailLevel = DetailLevel__1;
		_p->ns3__AbstractRequestType::ErrorLanguage = ErrorLanguage__1;
		_p->ns3__AbstractRequestType::Version = Version__1;
		_p->ns3__AbstractRequestType::__any = __any__1;
	}
	return _p;
}

inline int soap_write_ns1__GetTransactionDetailsRequestType(struct soap *soap, ns1__GetTransactionDetailsRequestType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetTransactionDetailsRequestType", p->soap_type() == SOAP_TYPE_ns1__GetTransactionDetailsRequestType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__GetTransactionDetailsRequestType(struct soap *soap, const char *URL, ns1__GetTransactionDetailsRequestType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetTransactionDetailsRequestType", p->soap_type() == SOAP_TYPE_ns1__GetTransactionDetailsRequestType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__GetTransactionDetailsRequestType(struct soap *soap, const char *URL, ns1__GetTransactionDetailsRequestType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetTransactionDetailsRequestType", p->soap_type() == SOAP_TYPE_ns1__GetTransactionDetailsRequestType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__GetTransactionDetailsRequestType * SOAP_FMAC4 soap_get_ns1__GetTransactionDetailsRequestType(struct soap*, ns1__GetTransactionDetailsRequestType *, const char*, const char*);

inline int soap_read_ns1__GetTransactionDetailsRequestType(struct soap *soap, ns1__GetTransactionDetailsRequestType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__GetTransactionDetailsRequestType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__GetTransactionDetailsRequestType(struct soap *soap, const char *URL, ns1__GetTransactionDetailsRequestType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__GetTransactionDetailsRequestType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__GetTransactionDetailsRequestType(struct soap *soap, ns1__GetTransactionDetailsRequestType *p)
{
	if (soap_read_ns1__GetTransactionDetailsRequestType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__CancelRecoupResponseType_DEFINED
#define SOAP_TYPE_ns1__CancelRecoupResponseType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__CancelRecoupResponseType(struct soap*, const char*, int, const ns1__CancelRecoupResponseType *, const char*);
SOAP_FMAC3 ns1__CancelRecoupResponseType * SOAP_FMAC4 soap_in_ns1__CancelRecoupResponseType(struct soap*, const char*, ns1__CancelRecoupResponseType *, const char*);
SOAP_FMAC1 ns1__CancelRecoupResponseType * SOAP_FMAC2 soap_instantiate_ns1__CancelRecoupResponseType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__CancelRecoupResponseType * soap_new_ns1__CancelRecoupResponseType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__CancelRecoupResponseType(soap, n, NULL, NULL, NULL);
}

inline ns1__CancelRecoupResponseType * soap_new_req_ns1__CancelRecoupResponseType(
	struct soap *soap,
	enum ns3__AckCodeType Ack__1,
	const std::string& Version__1,
	const std::string& Build__1)
{
	ns1__CancelRecoupResponseType *_p = soap_new_ns1__CancelRecoupResponseType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__AbstractResponseType::Ack = Ack__1;
		_p->ns3__AbstractResponseType::Version = Version__1;
		_p->ns3__AbstractResponseType::Build = Build__1;
	}
	return _p;
}

inline ns1__CancelRecoupResponseType * soap_new_set_ns1__CancelRecoupResponseType(
	struct soap *soap,
	time_t *Timestamp__1,
	enum ns3__AckCodeType Ack__1,
	std::string *CorrelationID__1,
	const std::vector<ns3__ErrorType *> & Errors__1,
	const std::string& Version__1,
	const std::string& Build__1,
	char *__any__1)
{
	ns1__CancelRecoupResponseType *_p = soap_new_ns1__CancelRecoupResponseType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__AbstractResponseType::Timestamp = Timestamp__1;
		_p->ns3__AbstractResponseType::Ack = Ack__1;
		_p->ns3__AbstractResponseType::CorrelationID = CorrelationID__1;
		_p->ns3__AbstractResponseType::Errors = Errors__1;
		_p->ns3__AbstractResponseType::Version = Version__1;
		_p->ns3__AbstractResponseType::Build = Build__1;
		_p->ns3__AbstractResponseType::__any = __any__1;
	}
	return _p;
}

inline int soap_write_ns1__CancelRecoupResponseType(struct soap *soap, ns1__CancelRecoupResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CancelRecoupResponseType", p->soap_type() == SOAP_TYPE_ns1__CancelRecoupResponseType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__CancelRecoupResponseType(struct soap *soap, const char *URL, ns1__CancelRecoupResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CancelRecoupResponseType", p->soap_type() == SOAP_TYPE_ns1__CancelRecoupResponseType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__CancelRecoupResponseType(struct soap *soap, const char *URL, ns1__CancelRecoupResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CancelRecoupResponseType", p->soap_type() == SOAP_TYPE_ns1__CancelRecoupResponseType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__CancelRecoupResponseType * SOAP_FMAC4 soap_get_ns1__CancelRecoupResponseType(struct soap*, ns1__CancelRecoupResponseType *, const char*, const char*);

inline int soap_read_ns1__CancelRecoupResponseType(struct soap *soap, ns1__CancelRecoupResponseType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__CancelRecoupResponseType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__CancelRecoupResponseType(struct soap *soap, const char *URL, ns1__CancelRecoupResponseType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__CancelRecoupResponseType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__CancelRecoupResponseType(struct soap *soap, ns1__CancelRecoupResponseType *p)
{
	if (soap_read_ns1__CancelRecoupResponseType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__CancelRecoupRequestType_DEFINED
#define SOAP_TYPE_ns1__CancelRecoupRequestType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__CancelRecoupRequestType(struct soap*, const char*, int, const ns1__CancelRecoupRequestType *, const char*);
SOAP_FMAC3 ns1__CancelRecoupRequestType * SOAP_FMAC4 soap_in_ns1__CancelRecoupRequestType(struct soap*, const char*, ns1__CancelRecoupRequestType *, const char*);
SOAP_FMAC1 ns1__CancelRecoupRequestType * SOAP_FMAC2 soap_instantiate_ns1__CancelRecoupRequestType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__CancelRecoupRequestType * soap_new_ns1__CancelRecoupRequestType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__CancelRecoupRequestType(soap, n, NULL, NULL, NULL);
}

inline ns1__CancelRecoupRequestType * soap_new_req_ns1__CancelRecoupRequestType(
	struct soap *soap,
	ns4__EnhancedCancelRecoupRequestDetailsType *ns4__EnhancedCancelRecoupRequestDetails,
	const std::string& Version__1)
{
	ns1__CancelRecoupRequestType *_p = soap_new_ns1__CancelRecoupRequestType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__CancelRecoupRequestType::ns4__EnhancedCancelRecoupRequestDetails = ns4__EnhancedCancelRecoupRequestDetails;
		_p->ns3__AbstractRequestType::Version = Version__1;
	}
	return _p;
}

inline ns1__CancelRecoupRequestType * soap_new_set_ns1__CancelRecoupRequestType(
	struct soap *soap,
	ns4__EnhancedCancelRecoupRequestDetailsType *ns4__EnhancedCancelRecoupRequestDetails,
	const std::vector<enum ns3__DetailLevelCodeType> & DetailLevel__1,
	std::string *ErrorLanguage__1,
	const std::string& Version__1,
	char *__any__1)
{
	ns1__CancelRecoupRequestType *_p = soap_new_ns1__CancelRecoupRequestType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__CancelRecoupRequestType::ns4__EnhancedCancelRecoupRequestDetails = ns4__EnhancedCancelRecoupRequestDetails;
		_p->ns3__AbstractRequestType::DetailLevel = DetailLevel__1;
		_p->ns3__AbstractRequestType::ErrorLanguage = ErrorLanguage__1;
		_p->ns3__AbstractRequestType::Version = Version__1;
		_p->ns3__AbstractRequestType::__any = __any__1;
	}
	return _p;
}

inline int soap_write_ns1__CancelRecoupRequestType(struct soap *soap, ns1__CancelRecoupRequestType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CancelRecoupRequestType", p->soap_type() == SOAP_TYPE_ns1__CancelRecoupRequestType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__CancelRecoupRequestType(struct soap *soap, const char *URL, ns1__CancelRecoupRequestType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CancelRecoupRequestType", p->soap_type() == SOAP_TYPE_ns1__CancelRecoupRequestType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__CancelRecoupRequestType(struct soap *soap, const char *URL, ns1__CancelRecoupRequestType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CancelRecoupRequestType", p->soap_type() == SOAP_TYPE_ns1__CancelRecoupRequestType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__CancelRecoupRequestType * SOAP_FMAC4 soap_get_ns1__CancelRecoupRequestType(struct soap*, ns1__CancelRecoupRequestType *, const char*, const char*);

inline int soap_read_ns1__CancelRecoupRequestType(struct soap *soap, ns1__CancelRecoupRequestType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__CancelRecoupRequestType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__CancelRecoupRequestType(struct soap *soap, const char *URL, ns1__CancelRecoupRequestType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__CancelRecoupRequestType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__CancelRecoupRequestType(struct soap *soap, ns1__CancelRecoupRequestType *p)
{
	if (soap_read_ns1__CancelRecoupRequestType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__CompleteRecoupResponseType_DEFINED
#define SOAP_TYPE_ns1__CompleteRecoupResponseType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__CompleteRecoupResponseType(struct soap*, const char*, int, const ns1__CompleteRecoupResponseType *, const char*);
SOAP_FMAC3 ns1__CompleteRecoupResponseType * SOAP_FMAC4 soap_in_ns1__CompleteRecoupResponseType(struct soap*, const char*, ns1__CompleteRecoupResponseType *, const char*);
SOAP_FMAC1 ns1__CompleteRecoupResponseType * SOAP_FMAC2 soap_instantiate_ns1__CompleteRecoupResponseType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__CompleteRecoupResponseType * soap_new_ns1__CompleteRecoupResponseType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__CompleteRecoupResponseType(soap, n, NULL, NULL, NULL);
}

inline ns1__CompleteRecoupResponseType * soap_new_req_ns1__CompleteRecoupResponseType(
	struct soap *soap,
	ns4__EnhancedCompleteRecoupResponseDetailsType *ns4__EnhancedCompleteRecoupResponseDetails,
	enum ns3__AckCodeType Ack__1,
	const std::string& Version__1,
	const std::string& Build__1)
{
	ns1__CompleteRecoupResponseType *_p = soap_new_ns1__CompleteRecoupResponseType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__CompleteRecoupResponseType::ns4__EnhancedCompleteRecoupResponseDetails = ns4__EnhancedCompleteRecoupResponseDetails;
		_p->ns3__AbstractResponseType::Ack = Ack__1;
		_p->ns3__AbstractResponseType::Version = Version__1;
		_p->ns3__AbstractResponseType::Build = Build__1;
	}
	return _p;
}

inline ns1__CompleteRecoupResponseType * soap_new_set_ns1__CompleteRecoupResponseType(
	struct soap *soap,
	ns4__EnhancedCompleteRecoupResponseDetailsType *ns4__EnhancedCompleteRecoupResponseDetails,
	time_t *Timestamp__1,
	enum ns3__AckCodeType Ack__1,
	std::string *CorrelationID__1,
	const std::vector<ns3__ErrorType *> & Errors__1,
	const std::string& Version__1,
	const std::string& Build__1,
	char *__any__1)
{
	ns1__CompleteRecoupResponseType *_p = soap_new_ns1__CompleteRecoupResponseType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__CompleteRecoupResponseType::ns4__EnhancedCompleteRecoupResponseDetails = ns4__EnhancedCompleteRecoupResponseDetails;
		_p->ns3__AbstractResponseType::Timestamp = Timestamp__1;
		_p->ns3__AbstractResponseType::Ack = Ack__1;
		_p->ns3__AbstractResponseType::CorrelationID = CorrelationID__1;
		_p->ns3__AbstractResponseType::Errors = Errors__1;
		_p->ns3__AbstractResponseType::Version = Version__1;
		_p->ns3__AbstractResponseType::Build = Build__1;
		_p->ns3__AbstractResponseType::__any = __any__1;
	}
	return _p;
}

inline int soap_write_ns1__CompleteRecoupResponseType(struct soap *soap, ns1__CompleteRecoupResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CompleteRecoupResponseType", p->soap_type() == SOAP_TYPE_ns1__CompleteRecoupResponseType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__CompleteRecoupResponseType(struct soap *soap, const char *URL, ns1__CompleteRecoupResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CompleteRecoupResponseType", p->soap_type() == SOAP_TYPE_ns1__CompleteRecoupResponseType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__CompleteRecoupResponseType(struct soap *soap, const char *URL, ns1__CompleteRecoupResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CompleteRecoupResponseType", p->soap_type() == SOAP_TYPE_ns1__CompleteRecoupResponseType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__CompleteRecoupResponseType * SOAP_FMAC4 soap_get_ns1__CompleteRecoupResponseType(struct soap*, ns1__CompleteRecoupResponseType *, const char*, const char*);

inline int soap_read_ns1__CompleteRecoupResponseType(struct soap *soap, ns1__CompleteRecoupResponseType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__CompleteRecoupResponseType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__CompleteRecoupResponseType(struct soap *soap, const char *URL, ns1__CompleteRecoupResponseType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__CompleteRecoupResponseType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__CompleteRecoupResponseType(struct soap *soap, ns1__CompleteRecoupResponseType *p)
{
	if (soap_read_ns1__CompleteRecoupResponseType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__CompleteRecoupRequestType_DEFINED
#define SOAP_TYPE_ns1__CompleteRecoupRequestType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__CompleteRecoupRequestType(struct soap*, const char*, int, const ns1__CompleteRecoupRequestType *, const char*);
SOAP_FMAC3 ns1__CompleteRecoupRequestType * SOAP_FMAC4 soap_in_ns1__CompleteRecoupRequestType(struct soap*, const char*, ns1__CompleteRecoupRequestType *, const char*);
SOAP_FMAC1 ns1__CompleteRecoupRequestType * SOAP_FMAC2 soap_instantiate_ns1__CompleteRecoupRequestType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__CompleteRecoupRequestType * soap_new_ns1__CompleteRecoupRequestType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__CompleteRecoupRequestType(soap, n, NULL, NULL, NULL);
}

inline ns1__CompleteRecoupRequestType * soap_new_req_ns1__CompleteRecoupRequestType(
	struct soap *soap,
	ns4__EnhancedCompleteRecoupRequestDetailsType *ns4__EnhancedCompleteRecoupRequestDetails,
	const std::string& Version__1)
{
	ns1__CompleteRecoupRequestType *_p = soap_new_ns1__CompleteRecoupRequestType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__CompleteRecoupRequestType::ns4__EnhancedCompleteRecoupRequestDetails = ns4__EnhancedCompleteRecoupRequestDetails;
		_p->ns3__AbstractRequestType::Version = Version__1;
	}
	return _p;
}

inline ns1__CompleteRecoupRequestType * soap_new_set_ns1__CompleteRecoupRequestType(
	struct soap *soap,
	ns4__EnhancedCompleteRecoupRequestDetailsType *ns4__EnhancedCompleteRecoupRequestDetails,
	const std::vector<enum ns3__DetailLevelCodeType> & DetailLevel__1,
	std::string *ErrorLanguage__1,
	const std::string& Version__1,
	char *__any__1)
{
	ns1__CompleteRecoupRequestType *_p = soap_new_ns1__CompleteRecoupRequestType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__CompleteRecoupRequestType::ns4__EnhancedCompleteRecoupRequestDetails = ns4__EnhancedCompleteRecoupRequestDetails;
		_p->ns3__AbstractRequestType::DetailLevel = DetailLevel__1;
		_p->ns3__AbstractRequestType::ErrorLanguage = ErrorLanguage__1;
		_p->ns3__AbstractRequestType::Version = Version__1;
		_p->ns3__AbstractRequestType::__any = __any__1;
	}
	return _p;
}

inline int soap_write_ns1__CompleteRecoupRequestType(struct soap *soap, ns1__CompleteRecoupRequestType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CompleteRecoupRequestType", p->soap_type() == SOAP_TYPE_ns1__CompleteRecoupRequestType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__CompleteRecoupRequestType(struct soap *soap, const char *URL, ns1__CompleteRecoupRequestType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CompleteRecoupRequestType", p->soap_type() == SOAP_TYPE_ns1__CompleteRecoupRequestType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__CompleteRecoupRequestType(struct soap *soap, const char *URL, ns1__CompleteRecoupRequestType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CompleteRecoupRequestType", p->soap_type() == SOAP_TYPE_ns1__CompleteRecoupRequestType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__CompleteRecoupRequestType * SOAP_FMAC4 soap_get_ns1__CompleteRecoupRequestType(struct soap*, ns1__CompleteRecoupRequestType *, const char*, const char*);

inline int soap_read_ns1__CompleteRecoupRequestType(struct soap *soap, ns1__CompleteRecoupRequestType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__CompleteRecoupRequestType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__CompleteRecoupRequestType(struct soap *soap, const char *URL, ns1__CompleteRecoupRequestType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__CompleteRecoupRequestType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__CompleteRecoupRequestType(struct soap *soap, ns1__CompleteRecoupRequestType *p)
{
	if (soap_read_ns1__CompleteRecoupRequestType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__InitiateRecoupResponseType_DEFINED
#define SOAP_TYPE_ns1__InitiateRecoupResponseType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__InitiateRecoupResponseType(struct soap*, const char*, int, const ns1__InitiateRecoupResponseType *, const char*);
SOAP_FMAC3 ns1__InitiateRecoupResponseType * SOAP_FMAC4 soap_in_ns1__InitiateRecoupResponseType(struct soap*, const char*, ns1__InitiateRecoupResponseType *, const char*);
SOAP_FMAC1 ns1__InitiateRecoupResponseType * SOAP_FMAC2 soap_instantiate_ns1__InitiateRecoupResponseType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__InitiateRecoupResponseType * soap_new_ns1__InitiateRecoupResponseType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__InitiateRecoupResponseType(soap, n, NULL, NULL, NULL);
}

inline ns1__InitiateRecoupResponseType * soap_new_req_ns1__InitiateRecoupResponseType(
	struct soap *soap,
	enum ns3__AckCodeType Ack__1,
	const std::string& Version__1,
	const std::string& Build__1)
{
	ns1__InitiateRecoupResponseType *_p = soap_new_ns1__InitiateRecoupResponseType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__AbstractResponseType::Ack = Ack__1;
		_p->ns3__AbstractResponseType::Version = Version__1;
		_p->ns3__AbstractResponseType::Build = Build__1;
	}
	return _p;
}

inline ns1__InitiateRecoupResponseType * soap_new_set_ns1__InitiateRecoupResponseType(
	struct soap *soap,
	time_t *Timestamp__1,
	enum ns3__AckCodeType Ack__1,
	std::string *CorrelationID__1,
	const std::vector<ns3__ErrorType *> & Errors__1,
	const std::string& Version__1,
	const std::string& Build__1,
	char *__any__1)
{
	ns1__InitiateRecoupResponseType *_p = soap_new_ns1__InitiateRecoupResponseType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__AbstractResponseType::Timestamp = Timestamp__1;
		_p->ns3__AbstractResponseType::Ack = Ack__1;
		_p->ns3__AbstractResponseType::CorrelationID = CorrelationID__1;
		_p->ns3__AbstractResponseType::Errors = Errors__1;
		_p->ns3__AbstractResponseType::Version = Version__1;
		_p->ns3__AbstractResponseType::Build = Build__1;
		_p->ns3__AbstractResponseType::__any = __any__1;
	}
	return _p;
}

inline int soap_write_ns1__InitiateRecoupResponseType(struct soap *soap, ns1__InitiateRecoupResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:InitiateRecoupResponseType", p->soap_type() == SOAP_TYPE_ns1__InitiateRecoupResponseType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__InitiateRecoupResponseType(struct soap *soap, const char *URL, ns1__InitiateRecoupResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:InitiateRecoupResponseType", p->soap_type() == SOAP_TYPE_ns1__InitiateRecoupResponseType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__InitiateRecoupResponseType(struct soap *soap, const char *URL, ns1__InitiateRecoupResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:InitiateRecoupResponseType", p->soap_type() == SOAP_TYPE_ns1__InitiateRecoupResponseType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__InitiateRecoupResponseType * SOAP_FMAC4 soap_get_ns1__InitiateRecoupResponseType(struct soap*, ns1__InitiateRecoupResponseType *, const char*, const char*);

inline int soap_read_ns1__InitiateRecoupResponseType(struct soap *soap, ns1__InitiateRecoupResponseType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__InitiateRecoupResponseType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__InitiateRecoupResponseType(struct soap *soap, const char *URL, ns1__InitiateRecoupResponseType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__InitiateRecoupResponseType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__InitiateRecoupResponseType(struct soap *soap, ns1__InitiateRecoupResponseType *p)
{
	if (soap_read_ns1__InitiateRecoupResponseType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__InitiateRecoupRequestType_DEFINED
#define SOAP_TYPE_ns1__InitiateRecoupRequestType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__InitiateRecoupRequestType(struct soap*, const char*, int, const ns1__InitiateRecoupRequestType *, const char*);
SOAP_FMAC3 ns1__InitiateRecoupRequestType * SOAP_FMAC4 soap_in_ns1__InitiateRecoupRequestType(struct soap*, const char*, ns1__InitiateRecoupRequestType *, const char*);
SOAP_FMAC1 ns1__InitiateRecoupRequestType * SOAP_FMAC2 soap_instantiate_ns1__InitiateRecoupRequestType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__InitiateRecoupRequestType * soap_new_ns1__InitiateRecoupRequestType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__InitiateRecoupRequestType(soap, n, NULL, NULL, NULL);
}

inline ns1__InitiateRecoupRequestType * soap_new_req_ns1__InitiateRecoupRequestType(
	struct soap *soap,
	ns4__EnhancedInitiateRecoupRequestDetailsType *ns4__EnhancedInitiateRecoupRequestDetails,
	const std::string& Version__1)
{
	ns1__InitiateRecoupRequestType *_p = soap_new_ns1__InitiateRecoupRequestType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__InitiateRecoupRequestType::ns4__EnhancedInitiateRecoupRequestDetails = ns4__EnhancedInitiateRecoupRequestDetails;
		_p->ns3__AbstractRequestType::Version = Version__1;
	}
	return _p;
}

inline ns1__InitiateRecoupRequestType * soap_new_set_ns1__InitiateRecoupRequestType(
	struct soap *soap,
	ns4__EnhancedInitiateRecoupRequestDetailsType *ns4__EnhancedInitiateRecoupRequestDetails,
	const std::vector<enum ns3__DetailLevelCodeType> & DetailLevel__1,
	std::string *ErrorLanguage__1,
	const std::string& Version__1,
	char *__any__1)
{
	ns1__InitiateRecoupRequestType *_p = soap_new_ns1__InitiateRecoupRequestType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__InitiateRecoupRequestType::ns4__EnhancedInitiateRecoupRequestDetails = ns4__EnhancedInitiateRecoupRequestDetails;
		_p->ns3__AbstractRequestType::DetailLevel = DetailLevel__1;
		_p->ns3__AbstractRequestType::ErrorLanguage = ErrorLanguage__1;
		_p->ns3__AbstractRequestType::Version = Version__1;
		_p->ns3__AbstractRequestType::__any = __any__1;
	}
	return _p;
}

inline int soap_write_ns1__InitiateRecoupRequestType(struct soap *soap, ns1__InitiateRecoupRequestType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:InitiateRecoupRequestType", p->soap_type() == SOAP_TYPE_ns1__InitiateRecoupRequestType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__InitiateRecoupRequestType(struct soap *soap, const char *URL, ns1__InitiateRecoupRequestType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:InitiateRecoupRequestType", p->soap_type() == SOAP_TYPE_ns1__InitiateRecoupRequestType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__InitiateRecoupRequestType(struct soap *soap, const char *URL, ns1__InitiateRecoupRequestType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:InitiateRecoupRequestType", p->soap_type() == SOAP_TYPE_ns1__InitiateRecoupRequestType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__InitiateRecoupRequestType * SOAP_FMAC4 soap_get_ns1__InitiateRecoupRequestType(struct soap*, ns1__InitiateRecoupRequestType *, const char*, const char*);

inline int soap_read_ns1__InitiateRecoupRequestType(struct soap *soap, ns1__InitiateRecoupRequestType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__InitiateRecoupRequestType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__InitiateRecoupRequestType(struct soap *soap, const char *URL, ns1__InitiateRecoupRequestType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__InitiateRecoupRequestType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__InitiateRecoupRequestType(struct soap *soap, ns1__InitiateRecoupRequestType *p)
{
	if (soap_read_ns1__InitiateRecoupRequestType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__RefundTransactionResponseType_DEFINED
#define SOAP_TYPE_ns1__RefundTransactionResponseType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__RefundTransactionResponseType(struct soap*, const char*, int, const ns1__RefundTransactionResponseType *, const char*);
SOAP_FMAC3 ns1__RefundTransactionResponseType * SOAP_FMAC4 soap_in_ns1__RefundTransactionResponseType(struct soap*, const char*, ns1__RefundTransactionResponseType *, const char*);
SOAP_FMAC1 ns1__RefundTransactionResponseType * SOAP_FMAC2 soap_instantiate_ns1__RefundTransactionResponseType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__RefundTransactionResponseType * soap_new_ns1__RefundTransactionResponseType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__RefundTransactionResponseType(soap, n, NULL, NULL, NULL);
}

inline ns1__RefundTransactionResponseType * soap_new_req_ns1__RefundTransactionResponseType(
	struct soap *soap,
	enum ns3__AckCodeType Ack__1,
	const std::string& Version__1,
	const std::string& Build__1)
{
	ns1__RefundTransactionResponseType *_p = soap_new_ns1__RefundTransactionResponseType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__AbstractResponseType::Ack = Ack__1;
		_p->ns3__AbstractResponseType::Version = Version__1;
		_p->ns3__AbstractResponseType::Build = Build__1;
	}
	return _p;
}

inline ns1__RefundTransactionResponseType * soap_new_set_ns1__RefundTransactionResponseType(
	struct soap *soap,
	std::string *RefundTransactionID,
	ns2__BasicAmountType *NetRefundAmount,
	ns2__BasicAmountType *FeeRefundAmount,
	ns2__BasicAmountType *GrossRefundAmount,
	ns2__BasicAmountType *TotalRefundedAmount,
	ns3__RefundInfoType *ns3__RefundInfo,
	std::string *ReceiptData,
	std::string *MsgSubID,
	time_t *Timestamp__1,
	enum ns3__AckCodeType Ack__1,
	std::string *CorrelationID__1,
	const std::vector<ns3__ErrorType *> & Errors__1,
	const std::string& Version__1,
	const std::string& Build__1,
	char *__any__1)
{
	ns1__RefundTransactionResponseType *_p = soap_new_ns1__RefundTransactionResponseType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__RefundTransactionResponseType::RefundTransactionID = RefundTransactionID;
		_p->ns1__RefundTransactionResponseType::NetRefundAmount = NetRefundAmount;
		_p->ns1__RefundTransactionResponseType::FeeRefundAmount = FeeRefundAmount;
		_p->ns1__RefundTransactionResponseType::GrossRefundAmount = GrossRefundAmount;
		_p->ns1__RefundTransactionResponseType::TotalRefundedAmount = TotalRefundedAmount;
		_p->ns1__RefundTransactionResponseType::ns3__RefundInfo = ns3__RefundInfo;
		_p->ns1__RefundTransactionResponseType::ReceiptData = ReceiptData;
		_p->ns1__RefundTransactionResponseType::MsgSubID = MsgSubID;
		_p->ns3__AbstractResponseType::Timestamp = Timestamp__1;
		_p->ns3__AbstractResponseType::Ack = Ack__1;
		_p->ns3__AbstractResponseType::CorrelationID = CorrelationID__1;
		_p->ns3__AbstractResponseType::Errors = Errors__1;
		_p->ns3__AbstractResponseType::Version = Version__1;
		_p->ns3__AbstractResponseType::Build = Build__1;
		_p->ns3__AbstractResponseType::__any = __any__1;
	}
	return _p;
}

inline int soap_write_ns1__RefundTransactionResponseType(struct soap *soap, ns1__RefundTransactionResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:RefundTransactionResponseType", p->soap_type() == SOAP_TYPE_ns1__RefundTransactionResponseType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__RefundTransactionResponseType(struct soap *soap, const char *URL, ns1__RefundTransactionResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:RefundTransactionResponseType", p->soap_type() == SOAP_TYPE_ns1__RefundTransactionResponseType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__RefundTransactionResponseType(struct soap *soap, const char *URL, ns1__RefundTransactionResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:RefundTransactionResponseType", p->soap_type() == SOAP_TYPE_ns1__RefundTransactionResponseType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__RefundTransactionResponseType * SOAP_FMAC4 soap_get_ns1__RefundTransactionResponseType(struct soap*, ns1__RefundTransactionResponseType *, const char*, const char*);

inline int soap_read_ns1__RefundTransactionResponseType(struct soap *soap, ns1__RefundTransactionResponseType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__RefundTransactionResponseType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__RefundTransactionResponseType(struct soap *soap, const char *URL, ns1__RefundTransactionResponseType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__RefundTransactionResponseType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__RefundTransactionResponseType(struct soap *soap, ns1__RefundTransactionResponseType *p)
{
	if (soap_read_ns1__RefundTransactionResponseType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__RefundTransactionRequestType_DEFINED
#define SOAP_TYPE_ns1__RefundTransactionRequestType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__RefundTransactionRequestType(struct soap*, const char*, int, const ns1__RefundTransactionRequestType *, const char*);
SOAP_FMAC3 ns1__RefundTransactionRequestType * SOAP_FMAC4 soap_in_ns1__RefundTransactionRequestType(struct soap*, const char*, ns1__RefundTransactionRequestType *, const char*);
SOAP_FMAC1 ns1__RefundTransactionRequestType * SOAP_FMAC2 soap_instantiate_ns1__RefundTransactionRequestType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__RefundTransactionRequestType * soap_new_ns1__RefundTransactionRequestType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__RefundTransactionRequestType(soap, n, NULL, NULL, NULL);
}

inline ns1__RefundTransactionRequestType * soap_new_req_ns1__RefundTransactionRequestType(
	struct soap *soap,
	const std::string& Version__1)
{
	ns1__RefundTransactionRequestType *_p = soap_new_ns1__RefundTransactionRequestType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__AbstractRequestType::Version = Version__1;
	}
	return _p;
}

inline ns1__RefundTransactionRequestType * soap_new_set_ns1__RefundTransactionRequestType(
	struct soap *soap,
	std::string *TransactionID,
	std::string *PayerID,
	std::string *InvoiceID,
	enum ns3__RefundType *RefundType,
	ns2__BasicAmountType *Amount,
	ns2__BasicAmountType *ShippingAmount,
	ns2__BasicAmountType *TaxAmount,
	std::string *Memo,
	time_t *RetryUntil,
	enum ns3__RefundSourceCodeType *RefundSource,
	bool *RefundAdvice,
	ns3__MerchantStoreDetailsType *ns3__MerchantStoreDetails,
	const std::vector<ns3__InvoiceItemType *> & ns3__RefundItemDetails,
	std::string *MsgSubID,
	ns3__MerchantDataType *ns3__MerchantData,
	const std::vector<enum ns3__DetailLevelCodeType> & DetailLevel__1,
	std::string *ErrorLanguage__1,
	const std::string& Version__1,
	char *__any__1)
{
	ns1__RefundTransactionRequestType *_p = soap_new_ns1__RefundTransactionRequestType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__RefundTransactionRequestType::TransactionID = TransactionID;
		_p->ns1__RefundTransactionRequestType::PayerID = PayerID;
		_p->ns1__RefundTransactionRequestType::InvoiceID = InvoiceID;
		_p->ns1__RefundTransactionRequestType::RefundType = RefundType;
		_p->ns1__RefundTransactionRequestType::Amount = Amount;
		_p->ns1__RefundTransactionRequestType::ShippingAmount = ShippingAmount;
		_p->ns1__RefundTransactionRequestType::TaxAmount = TaxAmount;
		_p->ns1__RefundTransactionRequestType::Memo = Memo;
		_p->ns1__RefundTransactionRequestType::RetryUntil = RetryUntil;
		_p->ns1__RefundTransactionRequestType::RefundSource = RefundSource;
		_p->ns1__RefundTransactionRequestType::RefundAdvice = RefundAdvice;
		_p->ns1__RefundTransactionRequestType::ns3__MerchantStoreDetails = ns3__MerchantStoreDetails;
		_p->ns1__RefundTransactionRequestType::ns3__RefundItemDetails = ns3__RefundItemDetails;
		_p->ns1__RefundTransactionRequestType::MsgSubID = MsgSubID;
		_p->ns1__RefundTransactionRequestType::ns3__MerchantData = ns3__MerchantData;
		_p->ns3__AbstractRequestType::DetailLevel = DetailLevel__1;
		_p->ns3__AbstractRequestType::ErrorLanguage = ErrorLanguage__1;
		_p->ns3__AbstractRequestType::Version = Version__1;
		_p->ns3__AbstractRequestType::__any = __any__1;
	}
	return _p;
}

inline int soap_write_ns1__RefundTransactionRequestType(struct soap *soap, ns1__RefundTransactionRequestType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:RefundTransactionRequestType", p->soap_type() == SOAP_TYPE_ns1__RefundTransactionRequestType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__RefundTransactionRequestType(struct soap *soap, const char *URL, ns1__RefundTransactionRequestType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:RefundTransactionRequestType", p->soap_type() == SOAP_TYPE_ns1__RefundTransactionRequestType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__RefundTransactionRequestType(struct soap *soap, const char *URL, ns1__RefundTransactionRequestType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:RefundTransactionRequestType", p->soap_type() == SOAP_TYPE_ns1__RefundTransactionRequestType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__RefundTransactionRequestType * SOAP_FMAC4 soap_get_ns1__RefundTransactionRequestType(struct soap*, ns1__RefundTransactionRequestType *, const char*, const char*);

inline int soap_read_ns1__RefundTransactionRequestType(struct soap *soap, ns1__RefundTransactionRequestType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__RefundTransactionRequestType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__RefundTransactionRequestType(struct soap *soap, const char *URL, ns1__RefundTransactionRequestType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__RefundTransactionRequestType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__RefundTransactionRequestType(struct soap *soap, ns1__RefundTransactionRequestType *p)
{
	if (soap_read_ns1__RefundTransactionRequestType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__BMButtonSearchResponseType_DEFINED
#define SOAP_TYPE_ns1__BMButtonSearchResponseType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__BMButtonSearchResponseType(struct soap*, const char*, int, const ns1__BMButtonSearchResponseType *, const char*);
SOAP_FMAC3 ns1__BMButtonSearchResponseType * SOAP_FMAC4 soap_in_ns1__BMButtonSearchResponseType(struct soap*, const char*, ns1__BMButtonSearchResponseType *, const char*);
SOAP_FMAC1 ns1__BMButtonSearchResponseType * SOAP_FMAC2 soap_instantiate_ns1__BMButtonSearchResponseType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__BMButtonSearchResponseType * soap_new_ns1__BMButtonSearchResponseType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__BMButtonSearchResponseType(soap, n, NULL, NULL, NULL);
}

inline ns1__BMButtonSearchResponseType * soap_new_req_ns1__BMButtonSearchResponseType(
	struct soap *soap,
	enum ns3__AckCodeType Ack__1,
	const std::string& Version__1,
	const std::string& Build__1)
{
	ns1__BMButtonSearchResponseType *_p = soap_new_ns1__BMButtonSearchResponseType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__AbstractResponseType::Ack = Ack__1;
		_p->ns3__AbstractResponseType::Version = Version__1;
		_p->ns3__AbstractResponseType::Build = Build__1;
	}
	return _p;
}

inline ns1__BMButtonSearchResponseType * soap_new_set_ns1__BMButtonSearchResponseType(
	struct soap *soap,
	const std::vector<ns3__ButtonSearchResultType *> & ns3__ButtonSearchResult,
	time_t *Timestamp__1,
	enum ns3__AckCodeType Ack__1,
	std::string *CorrelationID__1,
	const std::vector<ns3__ErrorType *> & Errors__1,
	const std::string& Version__1,
	const std::string& Build__1,
	char *__any__1)
{
	ns1__BMButtonSearchResponseType *_p = soap_new_ns1__BMButtonSearchResponseType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__BMButtonSearchResponseType::ns3__ButtonSearchResult = ns3__ButtonSearchResult;
		_p->ns3__AbstractResponseType::Timestamp = Timestamp__1;
		_p->ns3__AbstractResponseType::Ack = Ack__1;
		_p->ns3__AbstractResponseType::CorrelationID = CorrelationID__1;
		_p->ns3__AbstractResponseType::Errors = Errors__1;
		_p->ns3__AbstractResponseType::Version = Version__1;
		_p->ns3__AbstractResponseType::Build = Build__1;
		_p->ns3__AbstractResponseType::__any = __any__1;
	}
	return _p;
}

inline int soap_write_ns1__BMButtonSearchResponseType(struct soap *soap, ns1__BMButtonSearchResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:BMButtonSearchResponseType", p->soap_type() == SOAP_TYPE_ns1__BMButtonSearchResponseType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__BMButtonSearchResponseType(struct soap *soap, const char *URL, ns1__BMButtonSearchResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:BMButtonSearchResponseType", p->soap_type() == SOAP_TYPE_ns1__BMButtonSearchResponseType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__BMButtonSearchResponseType(struct soap *soap, const char *URL, ns1__BMButtonSearchResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:BMButtonSearchResponseType", p->soap_type() == SOAP_TYPE_ns1__BMButtonSearchResponseType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__BMButtonSearchResponseType * SOAP_FMAC4 soap_get_ns1__BMButtonSearchResponseType(struct soap*, ns1__BMButtonSearchResponseType *, const char*, const char*);

inline int soap_read_ns1__BMButtonSearchResponseType(struct soap *soap, ns1__BMButtonSearchResponseType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__BMButtonSearchResponseType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__BMButtonSearchResponseType(struct soap *soap, const char *URL, ns1__BMButtonSearchResponseType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__BMButtonSearchResponseType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__BMButtonSearchResponseType(struct soap *soap, ns1__BMButtonSearchResponseType *p)
{
	if (soap_read_ns1__BMButtonSearchResponseType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__BMButtonSearchRequestType_DEFINED
#define SOAP_TYPE_ns1__BMButtonSearchRequestType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__BMButtonSearchRequestType(struct soap*, const char*, int, const ns1__BMButtonSearchRequestType *, const char*);
SOAP_FMAC3 ns1__BMButtonSearchRequestType * SOAP_FMAC4 soap_in_ns1__BMButtonSearchRequestType(struct soap*, const char*, ns1__BMButtonSearchRequestType *, const char*);
SOAP_FMAC1 ns1__BMButtonSearchRequestType * SOAP_FMAC2 soap_instantiate_ns1__BMButtonSearchRequestType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__BMButtonSearchRequestType * soap_new_ns1__BMButtonSearchRequestType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__BMButtonSearchRequestType(soap, n, NULL, NULL, NULL);
}

inline ns1__BMButtonSearchRequestType * soap_new_req_ns1__BMButtonSearchRequestType(
	struct soap *soap,
	const std::string& Version__1)
{
	ns1__BMButtonSearchRequestType *_p = soap_new_ns1__BMButtonSearchRequestType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__AbstractRequestType::Version = Version__1;
	}
	return _p;
}

inline ns1__BMButtonSearchRequestType * soap_new_set_ns1__BMButtonSearchRequestType(
	struct soap *soap,
	time_t *StartDate,
	time_t *EndDate,
	const std::vector<enum ns3__DetailLevelCodeType> & DetailLevel__1,
	std::string *ErrorLanguage__1,
	const std::string& Version__1,
	char *__any__1)
{
	ns1__BMButtonSearchRequestType *_p = soap_new_ns1__BMButtonSearchRequestType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__BMButtonSearchRequestType::StartDate = StartDate;
		_p->ns1__BMButtonSearchRequestType::EndDate = EndDate;
		_p->ns3__AbstractRequestType::DetailLevel = DetailLevel__1;
		_p->ns3__AbstractRequestType::ErrorLanguage = ErrorLanguage__1;
		_p->ns3__AbstractRequestType::Version = Version__1;
		_p->ns3__AbstractRequestType::__any = __any__1;
	}
	return _p;
}

inline int soap_write_ns1__BMButtonSearchRequestType(struct soap *soap, ns1__BMButtonSearchRequestType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:BMButtonSearchRequestType", p->soap_type() == SOAP_TYPE_ns1__BMButtonSearchRequestType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__BMButtonSearchRequestType(struct soap *soap, const char *URL, ns1__BMButtonSearchRequestType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:BMButtonSearchRequestType", p->soap_type() == SOAP_TYPE_ns1__BMButtonSearchRequestType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__BMButtonSearchRequestType(struct soap *soap, const char *URL, ns1__BMButtonSearchRequestType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:BMButtonSearchRequestType", p->soap_type() == SOAP_TYPE_ns1__BMButtonSearchRequestType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__BMButtonSearchRequestType * SOAP_FMAC4 soap_get_ns1__BMButtonSearchRequestType(struct soap*, ns1__BMButtonSearchRequestType *, const char*, const char*);

inline int soap_read_ns1__BMButtonSearchRequestType(struct soap *soap, ns1__BMButtonSearchRequestType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__BMButtonSearchRequestType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__BMButtonSearchRequestType(struct soap *soap, const char *URL, ns1__BMButtonSearchRequestType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__BMButtonSearchRequestType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__BMButtonSearchRequestType(struct soap *soap, ns1__BMButtonSearchRequestType *p)
{
	if (soap_read_ns1__BMButtonSearchRequestType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__BMGetInventoryResponseType_DEFINED
#define SOAP_TYPE_ns1__BMGetInventoryResponseType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__BMGetInventoryResponseType(struct soap*, const char*, int, const ns1__BMGetInventoryResponseType *, const char*);
SOAP_FMAC3 ns1__BMGetInventoryResponseType * SOAP_FMAC4 soap_in_ns1__BMGetInventoryResponseType(struct soap*, const char*, ns1__BMGetInventoryResponseType *, const char*);
SOAP_FMAC1 ns1__BMGetInventoryResponseType * SOAP_FMAC2 soap_instantiate_ns1__BMGetInventoryResponseType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__BMGetInventoryResponseType * soap_new_ns1__BMGetInventoryResponseType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__BMGetInventoryResponseType(soap, n, NULL, NULL, NULL);
}

inline ns1__BMGetInventoryResponseType * soap_new_req_ns1__BMGetInventoryResponseType(
	struct soap *soap,
	const std::string& HostedButtonID,
	const std::string& TrackInv,
	const std::string& TrackPnl,
	enum ns3__AckCodeType Ack__1,
	const std::string& Version__1,
	const std::string& Build__1)
{
	ns1__BMGetInventoryResponseType *_p = soap_new_ns1__BMGetInventoryResponseType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__BMGetInventoryResponseType::HostedButtonID = HostedButtonID;
		_p->ns1__BMGetInventoryResponseType::TrackInv = TrackInv;
		_p->ns1__BMGetInventoryResponseType::TrackPnl = TrackPnl;
		_p->ns3__AbstractResponseType::Ack = Ack__1;
		_p->ns3__AbstractResponseType::Version = Version__1;
		_p->ns3__AbstractResponseType::Build = Build__1;
	}
	return _p;
}

inline ns1__BMGetInventoryResponseType * soap_new_set_ns1__BMGetInventoryResponseType(
	struct soap *soap,
	const std::string& HostedButtonID,
	const std::string& TrackInv,
	const std::string& TrackPnl,
	ns3__ItemTrackingDetailsType *ns3__ItemTrackingDetails,
	std::string *OptionIndex,
	std::string *OptionName,
	const std::vector<ns3__OptionTrackingDetailsType *> & ns3__OptionTrackingDetails,
	std::string *SoldoutURL,
	const std::vector<std::string> & DigitalDownloadKeys,
	time_t *Timestamp__1,
	enum ns3__AckCodeType Ack__1,
	std::string *CorrelationID__1,
	const std::vector<ns3__ErrorType *> & Errors__1,
	const std::string& Version__1,
	const std::string& Build__1,
	char *__any__1)
{
	ns1__BMGetInventoryResponseType *_p = soap_new_ns1__BMGetInventoryResponseType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__BMGetInventoryResponseType::HostedButtonID = HostedButtonID;
		_p->ns1__BMGetInventoryResponseType::TrackInv = TrackInv;
		_p->ns1__BMGetInventoryResponseType::TrackPnl = TrackPnl;
		_p->ns1__BMGetInventoryResponseType::ns3__ItemTrackingDetails = ns3__ItemTrackingDetails;
		_p->ns1__BMGetInventoryResponseType::OptionIndex = OptionIndex;
		_p->ns1__BMGetInventoryResponseType::OptionName = OptionName;
		_p->ns1__BMGetInventoryResponseType::ns3__OptionTrackingDetails = ns3__OptionTrackingDetails;
		_p->ns1__BMGetInventoryResponseType::SoldoutURL = SoldoutURL;
		_p->ns1__BMGetInventoryResponseType::DigitalDownloadKeys = DigitalDownloadKeys;
		_p->ns3__AbstractResponseType::Timestamp = Timestamp__1;
		_p->ns3__AbstractResponseType::Ack = Ack__1;
		_p->ns3__AbstractResponseType::CorrelationID = CorrelationID__1;
		_p->ns3__AbstractResponseType::Errors = Errors__1;
		_p->ns3__AbstractResponseType::Version = Version__1;
		_p->ns3__AbstractResponseType::Build = Build__1;
		_p->ns3__AbstractResponseType::__any = __any__1;
	}
	return _p;
}

inline int soap_write_ns1__BMGetInventoryResponseType(struct soap *soap, ns1__BMGetInventoryResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:BMGetInventoryResponseType", p->soap_type() == SOAP_TYPE_ns1__BMGetInventoryResponseType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__BMGetInventoryResponseType(struct soap *soap, const char *URL, ns1__BMGetInventoryResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:BMGetInventoryResponseType", p->soap_type() == SOAP_TYPE_ns1__BMGetInventoryResponseType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__BMGetInventoryResponseType(struct soap *soap, const char *URL, ns1__BMGetInventoryResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:BMGetInventoryResponseType", p->soap_type() == SOAP_TYPE_ns1__BMGetInventoryResponseType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__BMGetInventoryResponseType * SOAP_FMAC4 soap_get_ns1__BMGetInventoryResponseType(struct soap*, ns1__BMGetInventoryResponseType *, const char*, const char*);

inline int soap_read_ns1__BMGetInventoryResponseType(struct soap *soap, ns1__BMGetInventoryResponseType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__BMGetInventoryResponseType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__BMGetInventoryResponseType(struct soap *soap, const char *URL, ns1__BMGetInventoryResponseType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__BMGetInventoryResponseType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__BMGetInventoryResponseType(struct soap *soap, ns1__BMGetInventoryResponseType *p)
{
	if (soap_read_ns1__BMGetInventoryResponseType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__BMGetInventoryRequestType_DEFINED
#define SOAP_TYPE_ns1__BMGetInventoryRequestType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__BMGetInventoryRequestType(struct soap*, const char*, int, const ns1__BMGetInventoryRequestType *, const char*);
SOAP_FMAC3 ns1__BMGetInventoryRequestType * SOAP_FMAC4 soap_in_ns1__BMGetInventoryRequestType(struct soap*, const char*, ns1__BMGetInventoryRequestType *, const char*);
SOAP_FMAC1 ns1__BMGetInventoryRequestType * SOAP_FMAC2 soap_instantiate_ns1__BMGetInventoryRequestType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__BMGetInventoryRequestType * soap_new_ns1__BMGetInventoryRequestType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__BMGetInventoryRequestType(soap, n, NULL, NULL, NULL);
}

inline ns1__BMGetInventoryRequestType * soap_new_req_ns1__BMGetInventoryRequestType(
	struct soap *soap,
	const std::string& HostedButtonID,
	const std::string& Version__1)
{
	ns1__BMGetInventoryRequestType *_p = soap_new_ns1__BMGetInventoryRequestType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__BMGetInventoryRequestType::HostedButtonID = HostedButtonID;
		_p->ns3__AbstractRequestType::Version = Version__1;
	}
	return _p;
}

inline ns1__BMGetInventoryRequestType * soap_new_set_ns1__BMGetInventoryRequestType(
	struct soap *soap,
	const std::string& HostedButtonID,
	const std::vector<enum ns3__DetailLevelCodeType> & DetailLevel__1,
	std::string *ErrorLanguage__1,
	const std::string& Version__1,
	char *__any__1)
{
	ns1__BMGetInventoryRequestType *_p = soap_new_ns1__BMGetInventoryRequestType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__BMGetInventoryRequestType::HostedButtonID = HostedButtonID;
		_p->ns3__AbstractRequestType::DetailLevel = DetailLevel__1;
		_p->ns3__AbstractRequestType::ErrorLanguage = ErrorLanguage__1;
		_p->ns3__AbstractRequestType::Version = Version__1;
		_p->ns3__AbstractRequestType::__any = __any__1;
	}
	return _p;
}

inline int soap_write_ns1__BMGetInventoryRequestType(struct soap *soap, ns1__BMGetInventoryRequestType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:BMGetInventoryRequestType", p->soap_type() == SOAP_TYPE_ns1__BMGetInventoryRequestType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__BMGetInventoryRequestType(struct soap *soap, const char *URL, ns1__BMGetInventoryRequestType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:BMGetInventoryRequestType", p->soap_type() == SOAP_TYPE_ns1__BMGetInventoryRequestType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__BMGetInventoryRequestType(struct soap *soap, const char *URL, ns1__BMGetInventoryRequestType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:BMGetInventoryRequestType", p->soap_type() == SOAP_TYPE_ns1__BMGetInventoryRequestType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__BMGetInventoryRequestType * SOAP_FMAC4 soap_get_ns1__BMGetInventoryRequestType(struct soap*, ns1__BMGetInventoryRequestType *, const char*, const char*);

inline int soap_read_ns1__BMGetInventoryRequestType(struct soap *soap, ns1__BMGetInventoryRequestType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__BMGetInventoryRequestType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__BMGetInventoryRequestType(struct soap *soap, const char *URL, ns1__BMGetInventoryRequestType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__BMGetInventoryRequestType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__BMGetInventoryRequestType(struct soap *soap, ns1__BMGetInventoryRequestType *p)
{
	if (soap_read_ns1__BMGetInventoryRequestType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__BMSetInventoryResponseType_DEFINED
#define SOAP_TYPE_ns1__BMSetInventoryResponseType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__BMSetInventoryResponseType(struct soap*, const char*, int, const ns1__BMSetInventoryResponseType *, const char*);
SOAP_FMAC3 ns1__BMSetInventoryResponseType * SOAP_FMAC4 soap_in_ns1__BMSetInventoryResponseType(struct soap*, const char*, ns1__BMSetInventoryResponseType *, const char*);
SOAP_FMAC1 ns1__BMSetInventoryResponseType * SOAP_FMAC2 soap_instantiate_ns1__BMSetInventoryResponseType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__BMSetInventoryResponseType * soap_new_ns1__BMSetInventoryResponseType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__BMSetInventoryResponseType(soap, n, NULL, NULL, NULL);
}

inline ns1__BMSetInventoryResponseType * soap_new_req_ns1__BMSetInventoryResponseType(
	struct soap *soap,
	enum ns3__AckCodeType Ack__1,
	const std::string& Version__1,
	const std::string& Build__1)
{
	ns1__BMSetInventoryResponseType *_p = soap_new_ns1__BMSetInventoryResponseType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__AbstractResponseType::Ack = Ack__1;
		_p->ns3__AbstractResponseType::Version = Version__1;
		_p->ns3__AbstractResponseType::Build = Build__1;
	}
	return _p;
}

inline ns1__BMSetInventoryResponseType * soap_new_set_ns1__BMSetInventoryResponseType(
	struct soap *soap,
	time_t *Timestamp__1,
	enum ns3__AckCodeType Ack__1,
	std::string *CorrelationID__1,
	const std::vector<ns3__ErrorType *> & Errors__1,
	const std::string& Version__1,
	const std::string& Build__1,
	char *__any__1)
{
	ns1__BMSetInventoryResponseType *_p = soap_new_ns1__BMSetInventoryResponseType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__AbstractResponseType::Timestamp = Timestamp__1;
		_p->ns3__AbstractResponseType::Ack = Ack__1;
		_p->ns3__AbstractResponseType::CorrelationID = CorrelationID__1;
		_p->ns3__AbstractResponseType::Errors = Errors__1;
		_p->ns3__AbstractResponseType::Version = Version__1;
		_p->ns3__AbstractResponseType::Build = Build__1;
		_p->ns3__AbstractResponseType::__any = __any__1;
	}
	return _p;
}

inline int soap_write_ns1__BMSetInventoryResponseType(struct soap *soap, ns1__BMSetInventoryResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:BMSetInventoryResponseType", p->soap_type() == SOAP_TYPE_ns1__BMSetInventoryResponseType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__BMSetInventoryResponseType(struct soap *soap, const char *URL, ns1__BMSetInventoryResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:BMSetInventoryResponseType", p->soap_type() == SOAP_TYPE_ns1__BMSetInventoryResponseType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__BMSetInventoryResponseType(struct soap *soap, const char *URL, ns1__BMSetInventoryResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:BMSetInventoryResponseType", p->soap_type() == SOAP_TYPE_ns1__BMSetInventoryResponseType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__BMSetInventoryResponseType * SOAP_FMAC4 soap_get_ns1__BMSetInventoryResponseType(struct soap*, ns1__BMSetInventoryResponseType *, const char*, const char*);

inline int soap_read_ns1__BMSetInventoryResponseType(struct soap *soap, ns1__BMSetInventoryResponseType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__BMSetInventoryResponseType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__BMSetInventoryResponseType(struct soap *soap, const char *URL, ns1__BMSetInventoryResponseType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__BMSetInventoryResponseType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__BMSetInventoryResponseType(struct soap *soap, ns1__BMSetInventoryResponseType *p)
{
	if (soap_read_ns1__BMSetInventoryResponseType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__BMSetInventoryRequestType_DEFINED
#define SOAP_TYPE_ns1__BMSetInventoryRequestType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__BMSetInventoryRequestType(struct soap*, const char*, int, const ns1__BMSetInventoryRequestType *, const char*);
SOAP_FMAC3 ns1__BMSetInventoryRequestType * SOAP_FMAC4 soap_in_ns1__BMSetInventoryRequestType(struct soap*, const char*, ns1__BMSetInventoryRequestType *, const char*);
SOAP_FMAC1 ns1__BMSetInventoryRequestType * SOAP_FMAC2 soap_instantiate_ns1__BMSetInventoryRequestType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__BMSetInventoryRequestType * soap_new_ns1__BMSetInventoryRequestType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__BMSetInventoryRequestType(soap, n, NULL, NULL, NULL);
}

inline ns1__BMSetInventoryRequestType * soap_new_req_ns1__BMSetInventoryRequestType(
	struct soap *soap,
	const std::string& HostedButtonID,
	const std::string& TrackInv,
	const std::string& TrackPnl,
	const std::string& Version__1)
{
	ns1__BMSetInventoryRequestType *_p = soap_new_ns1__BMSetInventoryRequestType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__BMSetInventoryRequestType::HostedButtonID = HostedButtonID;
		_p->ns1__BMSetInventoryRequestType::TrackInv = TrackInv;
		_p->ns1__BMSetInventoryRequestType::TrackPnl = TrackPnl;
		_p->ns3__AbstractRequestType::Version = Version__1;
	}
	return _p;
}

inline ns1__BMSetInventoryRequestType * soap_new_set_ns1__BMSetInventoryRequestType(
	struct soap *soap,
	const std::string& HostedButtonID,
	const std::string& TrackInv,
	const std::string& TrackPnl,
	ns3__ItemTrackingDetailsType *ns3__ItemTrackingDetails,
	std::string *OptionIndex,
	const std::vector<ns3__OptionTrackingDetailsType *> & ns3__OptionTrackingDetails,
	std::string *SoldoutURL,
	std::string *ReuseDigitalDownloadKeys,
	std::string *AppendDigitalDownloadKeys,
	const std::vector<std::string> & DigitalDownloadKeys,
	const std::vector<enum ns3__DetailLevelCodeType> & DetailLevel__1,
	std::string *ErrorLanguage__1,
	const std::string& Version__1,
	char *__any__1)
{
	ns1__BMSetInventoryRequestType *_p = soap_new_ns1__BMSetInventoryRequestType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__BMSetInventoryRequestType::HostedButtonID = HostedButtonID;
		_p->ns1__BMSetInventoryRequestType::TrackInv = TrackInv;
		_p->ns1__BMSetInventoryRequestType::TrackPnl = TrackPnl;
		_p->ns1__BMSetInventoryRequestType::ns3__ItemTrackingDetails = ns3__ItemTrackingDetails;
		_p->ns1__BMSetInventoryRequestType::OptionIndex = OptionIndex;
		_p->ns1__BMSetInventoryRequestType::ns3__OptionTrackingDetails = ns3__OptionTrackingDetails;
		_p->ns1__BMSetInventoryRequestType::SoldoutURL = SoldoutURL;
		_p->ns1__BMSetInventoryRequestType::ReuseDigitalDownloadKeys = ReuseDigitalDownloadKeys;
		_p->ns1__BMSetInventoryRequestType::AppendDigitalDownloadKeys = AppendDigitalDownloadKeys;
		_p->ns1__BMSetInventoryRequestType::DigitalDownloadKeys = DigitalDownloadKeys;
		_p->ns3__AbstractRequestType::DetailLevel = DetailLevel__1;
		_p->ns3__AbstractRequestType::ErrorLanguage = ErrorLanguage__1;
		_p->ns3__AbstractRequestType::Version = Version__1;
		_p->ns3__AbstractRequestType::__any = __any__1;
	}
	return _p;
}

inline int soap_write_ns1__BMSetInventoryRequestType(struct soap *soap, ns1__BMSetInventoryRequestType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:BMSetInventoryRequestType", p->soap_type() == SOAP_TYPE_ns1__BMSetInventoryRequestType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__BMSetInventoryRequestType(struct soap *soap, const char *URL, ns1__BMSetInventoryRequestType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:BMSetInventoryRequestType", p->soap_type() == SOAP_TYPE_ns1__BMSetInventoryRequestType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__BMSetInventoryRequestType(struct soap *soap, const char *URL, ns1__BMSetInventoryRequestType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:BMSetInventoryRequestType", p->soap_type() == SOAP_TYPE_ns1__BMSetInventoryRequestType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__BMSetInventoryRequestType * SOAP_FMAC4 soap_get_ns1__BMSetInventoryRequestType(struct soap*, ns1__BMSetInventoryRequestType *, const char*, const char*);

inline int soap_read_ns1__BMSetInventoryRequestType(struct soap *soap, ns1__BMSetInventoryRequestType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__BMSetInventoryRequestType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__BMSetInventoryRequestType(struct soap *soap, const char *URL, ns1__BMSetInventoryRequestType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__BMSetInventoryRequestType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__BMSetInventoryRequestType(struct soap *soap, ns1__BMSetInventoryRequestType *p)
{
	if (soap_read_ns1__BMSetInventoryRequestType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__BMGetButtonDetailsResponseType_DEFINED
#define SOAP_TYPE_ns1__BMGetButtonDetailsResponseType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__BMGetButtonDetailsResponseType(struct soap*, const char*, int, const ns1__BMGetButtonDetailsResponseType *, const char*);
SOAP_FMAC3 ns1__BMGetButtonDetailsResponseType * SOAP_FMAC4 soap_in_ns1__BMGetButtonDetailsResponseType(struct soap*, const char*, ns1__BMGetButtonDetailsResponseType *, const char*);
SOAP_FMAC1 ns1__BMGetButtonDetailsResponseType * SOAP_FMAC2 soap_instantiate_ns1__BMGetButtonDetailsResponseType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__BMGetButtonDetailsResponseType * soap_new_ns1__BMGetButtonDetailsResponseType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__BMGetButtonDetailsResponseType(soap, n, NULL, NULL, NULL);
}

inline ns1__BMGetButtonDetailsResponseType * soap_new_req_ns1__BMGetButtonDetailsResponseType(
	struct soap *soap,
	enum ns3__AckCodeType Ack__1,
	const std::string& Version__1,
	const std::string& Build__1)
{
	ns1__BMGetButtonDetailsResponseType *_p = soap_new_ns1__BMGetButtonDetailsResponseType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__AbstractResponseType::Ack = Ack__1;
		_p->ns3__AbstractResponseType::Version = Version__1;
		_p->ns3__AbstractResponseType::Build = Build__1;
	}
	return _p;
}

inline ns1__BMGetButtonDetailsResponseType * soap_new_set_ns1__BMGetButtonDetailsResponseType(
	struct soap *soap,
	std::string *Website,
	std::string *Email,
	std::string *Mobile,
	std::string *HostedButtonID,
	enum ns3__ButtonTypeType *ButtonType,
	enum ns3__ButtonCodeType *ButtonCode,
	enum ns3__ButtonSubTypeType *ButtonSubType,
	const std::vector<std::string> & ButtonVar,
	const std::vector<ns1__OptionDetailsType *> & OptionDetails,
	const std::vector<std::string> & TextBox,
	enum ns3__ButtonImageType *ButtonImage,
	std::string *ButtonImageURL,
	enum ns3__BuyNowTextType *BuyNowText,
	enum ns3__SubscribeTextType *SubscribeText,
	enum ns3__CountryCodeType *ButtonCountry,
	std::string *ButtonLanguage,
	time_t *Timestamp__1,
	enum ns3__AckCodeType Ack__1,
	std::string *CorrelationID__1,
	const std::vector<ns3__ErrorType *> & Errors__1,
	const std::string& Version__1,
	const std::string& Build__1,
	char *__any__1)
{
	ns1__BMGetButtonDetailsResponseType *_p = soap_new_ns1__BMGetButtonDetailsResponseType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__BMGetButtonDetailsResponseType::Website = Website;
		_p->ns1__BMGetButtonDetailsResponseType::Email = Email;
		_p->ns1__BMGetButtonDetailsResponseType::Mobile = Mobile;
		_p->ns1__BMGetButtonDetailsResponseType::HostedButtonID = HostedButtonID;
		_p->ns1__BMGetButtonDetailsResponseType::ButtonType = ButtonType;
		_p->ns1__BMGetButtonDetailsResponseType::ButtonCode = ButtonCode;
		_p->ns1__BMGetButtonDetailsResponseType::ButtonSubType = ButtonSubType;
		_p->ns1__BMGetButtonDetailsResponseType::ButtonVar = ButtonVar;
		_p->ns1__BMGetButtonDetailsResponseType::OptionDetails = OptionDetails;
		_p->ns1__BMGetButtonDetailsResponseType::TextBox = TextBox;
		_p->ns1__BMGetButtonDetailsResponseType::ButtonImage = ButtonImage;
		_p->ns1__BMGetButtonDetailsResponseType::ButtonImageURL = ButtonImageURL;
		_p->ns1__BMGetButtonDetailsResponseType::BuyNowText = BuyNowText;
		_p->ns1__BMGetButtonDetailsResponseType::SubscribeText = SubscribeText;
		_p->ns1__BMGetButtonDetailsResponseType::ButtonCountry = ButtonCountry;
		_p->ns1__BMGetButtonDetailsResponseType::ButtonLanguage = ButtonLanguage;
		_p->ns3__AbstractResponseType::Timestamp = Timestamp__1;
		_p->ns3__AbstractResponseType::Ack = Ack__1;
		_p->ns3__AbstractResponseType::CorrelationID = CorrelationID__1;
		_p->ns3__AbstractResponseType::Errors = Errors__1;
		_p->ns3__AbstractResponseType::Version = Version__1;
		_p->ns3__AbstractResponseType::Build = Build__1;
		_p->ns3__AbstractResponseType::__any = __any__1;
	}
	return _p;
}

inline int soap_write_ns1__BMGetButtonDetailsResponseType(struct soap *soap, ns1__BMGetButtonDetailsResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:BMGetButtonDetailsResponseType", p->soap_type() == SOAP_TYPE_ns1__BMGetButtonDetailsResponseType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__BMGetButtonDetailsResponseType(struct soap *soap, const char *URL, ns1__BMGetButtonDetailsResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:BMGetButtonDetailsResponseType", p->soap_type() == SOAP_TYPE_ns1__BMGetButtonDetailsResponseType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__BMGetButtonDetailsResponseType(struct soap *soap, const char *URL, ns1__BMGetButtonDetailsResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:BMGetButtonDetailsResponseType", p->soap_type() == SOAP_TYPE_ns1__BMGetButtonDetailsResponseType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__BMGetButtonDetailsResponseType * SOAP_FMAC4 soap_get_ns1__BMGetButtonDetailsResponseType(struct soap*, ns1__BMGetButtonDetailsResponseType *, const char*, const char*);

inline int soap_read_ns1__BMGetButtonDetailsResponseType(struct soap *soap, ns1__BMGetButtonDetailsResponseType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__BMGetButtonDetailsResponseType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__BMGetButtonDetailsResponseType(struct soap *soap, const char *URL, ns1__BMGetButtonDetailsResponseType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__BMGetButtonDetailsResponseType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__BMGetButtonDetailsResponseType(struct soap *soap, ns1__BMGetButtonDetailsResponseType *p)
{
	if (soap_read_ns1__BMGetButtonDetailsResponseType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__BMGetButtonDetailsRequestType_DEFINED
#define SOAP_TYPE_ns1__BMGetButtonDetailsRequestType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__BMGetButtonDetailsRequestType(struct soap*, const char*, int, const ns1__BMGetButtonDetailsRequestType *, const char*);
SOAP_FMAC3 ns1__BMGetButtonDetailsRequestType * SOAP_FMAC4 soap_in_ns1__BMGetButtonDetailsRequestType(struct soap*, const char*, ns1__BMGetButtonDetailsRequestType *, const char*);
SOAP_FMAC1 ns1__BMGetButtonDetailsRequestType * SOAP_FMAC2 soap_instantiate_ns1__BMGetButtonDetailsRequestType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__BMGetButtonDetailsRequestType * soap_new_ns1__BMGetButtonDetailsRequestType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__BMGetButtonDetailsRequestType(soap, n, NULL, NULL, NULL);
}

inline ns1__BMGetButtonDetailsRequestType * soap_new_req_ns1__BMGetButtonDetailsRequestType(
	struct soap *soap,
	const std::string& HostedButtonID,
	const std::string& Version__1)
{
	ns1__BMGetButtonDetailsRequestType *_p = soap_new_ns1__BMGetButtonDetailsRequestType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__BMGetButtonDetailsRequestType::HostedButtonID = HostedButtonID;
		_p->ns3__AbstractRequestType::Version = Version__1;
	}
	return _p;
}

inline ns1__BMGetButtonDetailsRequestType * soap_new_set_ns1__BMGetButtonDetailsRequestType(
	struct soap *soap,
	const std::string& HostedButtonID,
	const std::vector<enum ns3__DetailLevelCodeType> & DetailLevel__1,
	std::string *ErrorLanguage__1,
	const std::string& Version__1,
	char *__any__1)
{
	ns1__BMGetButtonDetailsRequestType *_p = soap_new_ns1__BMGetButtonDetailsRequestType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__BMGetButtonDetailsRequestType::HostedButtonID = HostedButtonID;
		_p->ns3__AbstractRequestType::DetailLevel = DetailLevel__1;
		_p->ns3__AbstractRequestType::ErrorLanguage = ErrorLanguage__1;
		_p->ns3__AbstractRequestType::Version = Version__1;
		_p->ns3__AbstractRequestType::__any = __any__1;
	}
	return _p;
}

inline int soap_write_ns1__BMGetButtonDetailsRequestType(struct soap *soap, ns1__BMGetButtonDetailsRequestType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:BMGetButtonDetailsRequestType", p->soap_type() == SOAP_TYPE_ns1__BMGetButtonDetailsRequestType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__BMGetButtonDetailsRequestType(struct soap *soap, const char *URL, ns1__BMGetButtonDetailsRequestType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:BMGetButtonDetailsRequestType", p->soap_type() == SOAP_TYPE_ns1__BMGetButtonDetailsRequestType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__BMGetButtonDetailsRequestType(struct soap *soap, const char *URL, ns1__BMGetButtonDetailsRequestType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:BMGetButtonDetailsRequestType", p->soap_type() == SOAP_TYPE_ns1__BMGetButtonDetailsRequestType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__BMGetButtonDetailsRequestType * SOAP_FMAC4 soap_get_ns1__BMGetButtonDetailsRequestType(struct soap*, ns1__BMGetButtonDetailsRequestType *, const char*, const char*);

inline int soap_read_ns1__BMGetButtonDetailsRequestType(struct soap *soap, ns1__BMGetButtonDetailsRequestType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__BMGetButtonDetailsRequestType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__BMGetButtonDetailsRequestType(struct soap *soap, const char *URL, ns1__BMGetButtonDetailsRequestType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__BMGetButtonDetailsRequestType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__BMGetButtonDetailsRequestType(struct soap *soap, ns1__BMGetButtonDetailsRequestType *p)
{
	if (soap_read_ns1__BMGetButtonDetailsRequestType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__BMManageButtonStatusResponseType_DEFINED
#define SOAP_TYPE_ns1__BMManageButtonStatusResponseType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__BMManageButtonStatusResponseType(struct soap*, const char*, int, const ns1__BMManageButtonStatusResponseType *, const char*);
SOAP_FMAC3 ns1__BMManageButtonStatusResponseType * SOAP_FMAC4 soap_in_ns1__BMManageButtonStatusResponseType(struct soap*, const char*, ns1__BMManageButtonStatusResponseType *, const char*);
SOAP_FMAC1 ns1__BMManageButtonStatusResponseType * SOAP_FMAC2 soap_instantiate_ns1__BMManageButtonStatusResponseType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__BMManageButtonStatusResponseType * soap_new_ns1__BMManageButtonStatusResponseType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__BMManageButtonStatusResponseType(soap, n, NULL, NULL, NULL);
}

inline ns1__BMManageButtonStatusResponseType * soap_new_req_ns1__BMManageButtonStatusResponseType(
	struct soap *soap,
	enum ns3__AckCodeType Ack__1,
	const std::string& Version__1,
	const std::string& Build__1)
{
	ns1__BMManageButtonStatusResponseType *_p = soap_new_ns1__BMManageButtonStatusResponseType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__AbstractResponseType::Ack = Ack__1;
		_p->ns3__AbstractResponseType::Version = Version__1;
		_p->ns3__AbstractResponseType::Build = Build__1;
	}
	return _p;
}

inline ns1__BMManageButtonStatusResponseType * soap_new_set_ns1__BMManageButtonStatusResponseType(
	struct soap *soap,
	time_t *Timestamp__1,
	enum ns3__AckCodeType Ack__1,
	std::string *CorrelationID__1,
	const std::vector<ns3__ErrorType *> & Errors__1,
	const std::string& Version__1,
	const std::string& Build__1,
	char *__any__1)
{
	ns1__BMManageButtonStatusResponseType *_p = soap_new_ns1__BMManageButtonStatusResponseType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__AbstractResponseType::Timestamp = Timestamp__1;
		_p->ns3__AbstractResponseType::Ack = Ack__1;
		_p->ns3__AbstractResponseType::CorrelationID = CorrelationID__1;
		_p->ns3__AbstractResponseType::Errors = Errors__1;
		_p->ns3__AbstractResponseType::Version = Version__1;
		_p->ns3__AbstractResponseType::Build = Build__1;
		_p->ns3__AbstractResponseType::__any = __any__1;
	}
	return _p;
}

inline int soap_write_ns1__BMManageButtonStatusResponseType(struct soap *soap, ns1__BMManageButtonStatusResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:BMManageButtonStatusResponseType", p->soap_type() == SOAP_TYPE_ns1__BMManageButtonStatusResponseType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__BMManageButtonStatusResponseType(struct soap *soap, const char *URL, ns1__BMManageButtonStatusResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:BMManageButtonStatusResponseType", p->soap_type() == SOAP_TYPE_ns1__BMManageButtonStatusResponseType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__BMManageButtonStatusResponseType(struct soap *soap, const char *URL, ns1__BMManageButtonStatusResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:BMManageButtonStatusResponseType", p->soap_type() == SOAP_TYPE_ns1__BMManageButtonStatusResponseType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__BMManageButtonStatusResponseType * SOAP_FMAC4 soap_get_ns1__BMManageButtonStatusResponseType(struct soap*, ns1__BMManageButtonStatusResponseType *, const char*, const char*);

inline int soap_read_ns1__BMManageButtonStatusResponseType(struct soap *soap, ns1__BMManageButtonStatusResponseType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__BMManageButtonStatusResponseType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__BMManageButtonStatusResponseType(struct soap *soap, const char *URL, ns1__BMManageButtonStatusResponseType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__BMManageButtonStatusResponseType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__BMManageButtonStatusResponseType(struct soap *soap, ns1__BMManageButtonStatusResponseType *p)
{
	if (soap_read_ns1__BMManageButtonStatusResponseType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__BMManageButtonStatusRequestType_DEFINED
#define SOAP_TYPE_ns1__BMManageButtonStatusRequestType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__BMManageButtonStatusRequestType(struct soap*, const char*, int, const ns1__BMManageButtonStatusRequestType *, const char*);
SOAP_FMAC3 ns1__BMManageButtonStatusRequestType * SOAP_FMAC4 soap_in_ns1__BMManageButtonStatusRequestType(struct soap*, const char*, ns1__BMManageButtonStatusRequestType *, const char*);
SOAP_FMAC1 ns1__BMManageButtonStatusRequestType * SOAP_FMAC2 soap_instantiate_ns1__BMManageButtonStatusRequestType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__BMManageButtonStatusRequestType * soap_new_ns1__BMManageButtonStatusRequestType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__BMManageButtonStatusRequestType(soap, n, NULL, NULL, NULL);
}

inline ns1__BMManageButtonStatusRequestType * soap_new_req_ns1__BMManageButtonStatusRequestType(
	struct soap *soap,
	const std::string& Version__1)
{
	ns1__BMManageButtonStatusRequestType *_p = soap_new_ns1__BMManageButtonStatusRequestType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__AbstractRequestType::Version = Version__1;
	}
	return _p;
}

inline ns1__BMManageButtonStatusRequestType * soap_new_set_ns1__BMManageButtonStatusRequestType(
	struct soap *soap,
	std::string *HostedButtonID,
	enum ns3__ButtonStatusType *ButtonStatus,
	const std::vector<enum ns3__DetailLevelCodeType> & DetailLevel__1,
	std::string *ErrorLanguage__1,
	const std::string& Version__1,
	char *__any__1)
{
	ns1__BMManageButtonStatusRequestType *_p = soap_new_ns1__BMManageButtonStatusRequestType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__BMManageButtonStatusRequestType::HostedButtonID = HostedButtonID;
		_p->ns1__BMManageButtonStatusRequestType::ButtonStatus = ButtonStatus;
		_p->ns3__AbstractRequestType::DetailLevel = DetailLevel__1;
		_p->ns3__AbstractRequestType::ErrorLanguage = ErrorLanguage__1;
		_p->ns3__AbstractRequestType::Version = Version__1;
		_p->ns3__AbstractRequestType::__any = __any__1;
	}
	return _p;
}

inline int soap_write_ns1__BMManageButtonStatusRequestType(struct soap *soap, ns1__BMManageButtonStatusRequestType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:BMManageButtonStatusRequestType", p->soap_type() == SOAP_TYPE_ns1__BMManageButtonStatusRequestType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__BMManageButtonStatusRequestType(struct soap *soap, const char *URL, ns1__BMManageButtonStatusRequestType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:BMManageButtonStatusRequestType", p->soap_type() == SOAP_TYPE_ns1__BMManageButtonStatusRequestType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__BMManageButtonStatusRequestType(struct soap *soap, const char *URL, ns1__BMManageButtonStatusRequestType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:BMManageButtonStatusRequestType", p->soap_type() == SOAP_TYPE_ns1__BMManageButtonStatusRequestType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__BMManageButtonStatusRequestType * SOAP_FMAC4 soap_get_ns1__BMManageButtonStatusRequestType(struct soap*, ns1__BMManageButtonStatusRequestType *, const char*, const char*);

inline int soap_read_ns1__BMManageButtonStatusRequestType(struct soap *soap, ns1__BMManageButtonStatusRequestType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__BMManageButtonStatusRequestType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__BMManageButtonStatusRequestType(struct soap *soap, const char *URL, ns1__BMManageButtonStatusRequestType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__BMManageButtonStatusRequestType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__BMManageButtonStatusRequestType(struct soap *soap, ns1__BMManageButtonStatusRequestType *p)
{
	if (soap_read_ns1__BMManageButtonStatusRequestType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__BMUpdateButtonResponseType_DEFINED
#define SOAP_TYPE_ns1__BMUpdateButtonResponseType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__BMUpdateButtonResponseType(struct soap*, const char*, int, const ns1__BMUpdateButtonResponseType *, const char*);
SOAP_FMAC3 ns1__BMUpdateButtonResponseType * SOAP_FMAC4 soap_in_ns1__BMUpdateButtonResponseType(struct soap*, const char*, ns1__BMUpdateButtonResponseType *, const char*);
SOAP_FMAC1 ns1__BMUpdateButtonResponseType * SOAP_FMAC2 soap_instantiate_ns1__BMUpdateButtonResponseType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__BMUpdateButtonResponseType * soap_new_ns1__BMUpdateButtonResponseType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__BMUpdateButtonResponseType(soap, n, NULL, NULL, NULL);
}

inline ns1__BMUpdateButtonResponseType * soap_new_req_ns1__BMUpdateButtonResponseType(
	struct soap *soap,
	const std::string& Website,
	enum ns3__AckCodeType Ack__1,
	const std::string& Version__1,
	const std::string& Build__1)
{
	ns1__BMUpdateButtonResponseType *_p = soap_new_ns1__BMUpdateButtonResponseType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__BMUpdateButtonResponseType::Website = Website;
		_p->ns3__AbstractResponseType::Ack = Ack__1;
		_p->ns3__AbstractResponseType::Version = Version__1;
		_p->ns3__AbstractResponseType::Build = Build__1;
	}
	return _p;
}

inline ns1__BMUpdateButtonResponseType * soap_new_set_ns1__BMUpdateButtonResponseType(
	struct soap *soap,
	const std::string& Website,
	std::string *Email,
	std::string *Mobile,
	std::string *HostedButtonID,
	time_t *Timestamp__1,
	enum ns3__AckCodeType Ack__1,
	std::string *CorrelationID__1,
	const std::vector<ns3__ErrorType *> & Errors__1,
	const std::string& Version__1,
	const std::string& Build__1,
	char *__any__1)
{
	ns1__BMUpdateButtonResponseType *_p = soap_new_ns1__BMUpdateButtonResponseType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__BMUpdateButtonResponseType::Website = Website;
		_p->ns1__BMUpdateButtonResponseType::Email = Email;
		_p->ns1__BMUpdateButtonResponseType::Mobile = Mobile;
		_p->ns1__BMUpdateButtonResponseType::HostedButtonID = HostedButtonID;
		_p->ns3__AbstractResponseType::Timestamp = Timestamp__1;
		_p->ns3__AbstractResponseType::Ack = Ack__1;
		_p->ns3__AbstractResponseType::CorrelationID = CorrelationID__1;
		_p->ns3__AbstractResponseType::Errors = Errors__1;
		_p->ns3__AbstractResponseType::Version = Version__1;
		_p->ns3__AbstractResponseType::Build = Build__1;
		_p->ns3__AbstractResponseType::__any = __any__1;
	}
	return _p;
}

inline int soap_write_ns1__BMUpdateButtonResponseType(struct soap *soap, ns1__BMUpdateButtonResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:BMUpdateButtonResponseType", p->soap_type() == SOAP_TYPE_ns1__BMUpdateButtonResponseType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__BMUpdateButtonResponseType(struct soap *soap, const char *URL, ns1__BMUpdateButtonResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:BMUpdateButtonResponseType", p->soap_type() == SOAP_TYPE_ns1__BMUpdateButtonResponseType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__BMUpdateButtonResponseType(struct soap *soap, const char *URL, ns1__BMUpdateButtonResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:BMUpdateButtonResponseType", p->soap_type() == SOAP_TYPE_ns1__BMUpdateButtonResponseType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__BMUpdateButtonResponseType * SOAP_FMAC4 soap_get_ns1__BMUpdateButtonResponseType(struct soap*, ns1__BMUpdateButtonResponseType *, const char*, const char*);

inline int soap_read_ns1__BMUpdateButtonResponseType(struct soap *soap, ns1__BMUpdateButtonResponseType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__BMUpdateButtonResponseType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__BMUpdateButtonResponseType(struct soap *soap, const char *URL, ns1__BMUpdateButtonResponseType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__BMUpdateButtonResponseType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__BMUpdateButtonResponseType(struct soap *soap, ns1__BMUpdateButtonResponseType *p)
{
	if (soap_read_ns1__BMUpdateButtonResponseType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__BMUpdateButtonRequestType_DEFINED
#define SOAP_TYPE_ns1__BMUpdateButtonRequestType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__BMUpdateButtonRequestType(struct soap*, const char*, int, const ns1__BMUpdateButtonRequestType *, const char*);
SOAP_FMAC3 ns1__BMUpdateButtonRequestType * SOAP_FMAC4 soap_in_ns1__BMUpdateButtonRequestType(struct soap*, const char*, ns1__BMUpdateButtonRequestType *, const char*);
SOAP_FMAC1 ns1__BMUpdateButtonRequestType * SOAP_FMAC2 soap_instantiate_ns1__BMUpdateButtonRequestType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__BMUpdateButtonRequestType * soap_new_ns1__BMUpdateButtonRequestType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__BMUpdateButtonRequestType(soap, n, NULL, NULL, NULL);
}

inline ns1__BMUpdateButtonRequestType * soap_new_req_ns1__BMUpdateButtonRequestType(
	struct soap *soap,
	const std::string& HostedButtonID,
	const std::string& Version__1)
{
	ns1__BMUpdateButtonRequestType *_p = soap_new_ns1__BMUpdateButtonRequestType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__BMUpdateButtonRequestType::HostedButtonID = HostedButtonID;
		_p->ns3__AbstractRequestType::Version = Version__1;
	}
	return _p;
}

inline ns1__BMUpdateButtonRequestType * soap_new_set_ns1__BMUpdateButtonRequestType(
	struct soap *soap,
	const std::string& HostedButtonID,
	enum ns3__ButtonTypeType *ButtonType,
	enum ns3__ButtonCodeType *ButtonCode,
	enum ns3__ButtonSubTypeType *ButtonSubType,
	const std::vector<std::string> & ButtonVar,
	const std::vector<ns1__OptionDetailsType *> & OptionDetails,
	const std::vector<std::string> & TextBox,
	enum ns3__ButtonImageType *ButtonImage,
	std::string *ButtonImageURL,
	enum ns3__BuyNowTextType *BuyNowText,
	enum ns3__SubscribeTextType *SubscribeText,
	enum ns3__CountryCodeType *ButtonCountry,
	std::string *ButtonLanguage,
	const std::vector<enum ns3__DetailLevelCodeType> & DetailLevel__1,
	std::string *ErrorLanguage__1,
	const std::string& Version__1,
	char *__any__1)
{
	ns1__BMUpdateButtonRequestType *_p = soap_new_ns1__BMUpdateButtonRequestType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__BMUpdateButtonRequestType::HostedButtonID = HostedButtonID;
		_p->ns1__BMUpdateButtonRequestType::ButtonType = ButtonType;
		_p->ns1__BMUpdateButtonRequestType::ButtonCode = ButtonCode;
		_p->ns1__BMUpdateButtonRequestType::ButtonSubType = ButtonSubType;
		_p->ns1__BMUpdateButtonRequestType::ButtonVar = ButtonVar;
		_p->ns1__BMUpdateButtonRequestType::OptionDetails = OptionDetails;
		_p->ns1__BMUpdateButtonRequestType::TextBox = TextBox;
		_p->ns1__BMUpdateButtonRequestType::ButtonImage = ButtonImage;
		_p->ns1__BMUpdateButtonRequestType::ButtonImageURL = ButtonImageURL;
		_p->ns1__BMUpdateButtonRequestType::BuyNowText = BuyNowText;
		_p->ns1__BMUpdateButtonRequestType::SubscribeText = SubscribeText;
		_p->ns1__BMUpdateButtonRequestType::ButtonCountry = ButtonCountry;
		_p->ns1__BMUpdateButtonRequestType::ButtonLanguage = ButtonLanguage;
		_p->ns3__AbstractRequestType::DetailLevel = DetailLevel__1;
		_p->ns3__AbstractRequestType::ErrorLanguage = ErrorLanguage__1;
		_p->ns3__AbstractRequestType::Version = Version__1;
		_p->ns3__AbstractRequestType::__any = __any__1;
	}
	return _p;
}

inline int soap_write_ns1__BMUpdateButtonRequestType(struct soap *soap, ns1__BMUpdateButtonRequestType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:BMUpdateButtonRequestType", p->soap_type() == SOAP_TYPE_ns1__BMUpdateButtonRequestType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__BMUpdateButtonRequestType(struct soap *soap, const char *URL, ns1__BMUpdateButtonRequestType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:BMUpdateButtonRequestType", p->soap_type() == SOAP_TYPE_ns1__BMUpdateButtonRequestType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__BMUpdateButtonRequestType(struct soap *soap, const char *URL, ns1__BMUpdateButtonRequestType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:BMUpdateButtonRequestType", p->soap_type() == SOAP_TYPE_ns1__BMUpdateButtonRequestType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__BMUpdateButtonRequestType * SOAP_FMAC4 soap_get_ns1__BMUpdateButtonRequestType(struct soap*, ns1__BMUpdateButtonRequestType *, const char*, const char*);

inline int soap_read_ns1__BMUpdateButtonRequestType(struct soap *soap, ns1__BMUpdateButtonRequestType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__BMUpdateButtonRequestType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__BMUpdateButtonRequestType(struct soap *soap, const char *URL, ns1__BMUpdateButtonRequestType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__BMUpdateButtonRequestType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__BMUpdateButtonRequestType(struct soap *soap, ns1__BMUpdateButtonRequestType *p)
{
	if (soap_read_ns1__BMUpdateButtonRequestType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__BMCreateButtonResponseType_DEFINED
#define SOAP_TYPE_ns1__BMCreateButtonResponseType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__BMCreateButtonResponseType(struct soap*, const char*, int, const ns1__BMCreateButtonResponseType *, const char*);
SOAP_FMAC3 ns1__BMCreateButtonResponseType * SOAP_FMAC4 soap_in_ns1__BMCreateButtonResponseType(struct soap*, const char*, ns1__BMCreateButtonResponseType *, const char*);
SOAP_FMAC1 ns1__BMCreateButtonResponseType * SOAP_FMAC2 soap_instantiate_ns1__BMCreateButtonResponseType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__BMCreateButtonResponseType * soap_new_ns1__BMCreateButtonResponseType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__BMCreateButtonResponseType(soap, n, NULL, NULL, NULL);
}

inline ns1__BMCreateButtonResponseType * soap_new_req_ns1__BMCreateButtonResponseType(
	struct soap *soap,
	const std::string& Website,
	enum ns3__AckCodeType Ack__1,
	const std::string& Version__1,
	const std::string& Build__1)
{
	ns1__BMCreateButtonResponseType *_p = soap_new_ns1__BMCreateButtonResponseType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__BMCreateButtonResponseType::Website = Website;
		_p->ns3__AbstractResponseType::Ack = Ack__1;
		_p->ns3__AbstractResponseType::Version = Version__1;
		_p->ns3__AbstractResponseType::Build = Build__1;
	}
	return _p;
}

inline ns1__BMCreateButtonResponseType * soap_new_set_ns1__BMCreateButtonResponseType(
	struct soap *soap,
	const std::string& Website,
	std::string *Email,
	std::string *Mobile,
	std::string *HostedButtonID,
	time_t *Timestamp__1,
	enum ns3__AckCodeType Ack__1,
	std::string *CorrelationID__1,
	const std::vector<ns3__ErrorType *> & Errors__1,
	const std::string& Version__1,
	const std::string& Build__1,
	char *__any__1)
{
	ns1__BMCreateButtonResponseType *_p = soap_new_ns1__BMCreateButtonResponseType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__BMCreateButtonResponseType::Website = Website;
		_p->ns1__BMCreateButtonResponseType::Email = Email;
		_p->ns1__BMCreateButtonResponseType::Mobile = Mobile;
		_p->ns1__BMCreateButtonResponseType::HostedButtonID = HostedButtonID;
		_p->ns3__AbstractResponseType::Timestamp = Timestamp__1;
		_p->ns3__AbstractResponseType::Ack = Ack__1;
		_p->ns3__AbstractResponseType::CorrelationID = CorrelationID__1;
		_p->ns3__AbstractResponseType::Errors = Errors__1;
		_p->ns3__AbstractResponseType::Version = Version__1;
		_p->ns3__AbstractResponseType::Build = Build__1;
		_p->ns3__AbstractResponseType::__any = __any__1;
	}
	return _p;
}

inline int soap_write_ns1__BMCreateButtonResponseType(struct soap *soap, ns1__BMCreateButtonResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:BMCreateButtonResponseType", p->soap_type() == SOAP_TYPE_ns1__BMCreateButtonResponseType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__BMCreateButtonResponseType(struct soap *soap, const char *URL, ns1__BMCreateButtonResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:BMCreateButtonResponseType", p->soap_type() == SOAP_TYPE_ns1__BMCreateButtonResponseType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__BMCreateButtonResponseType(struct soap *soap, const char *URL, ns1__BMCreateButtonResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:BMCreateButtonResponseType", p->soap_type() == SOAP_TYPE_ns1__BMCreateButtonResponseType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__BMCreateButtonResponseType * SOAP_FMAC4 soap_get_ns1__BMCreateButtonResponseType(struct soap*, ns1__BMCreateButtonResponseType *, const char*, const char*);

inline int soap_read_ns1__BMCreateButtonResponseType(struct soap *soap, ns1__BMCreateButtonResponseType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__BMCreateButtonResponseType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__BMCreateButtonResponseType(struct soap *soap, const char *URL, ns1__BMCreateButtonResponseType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__BMCreateButtonResponseType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__BMCreateButtonResponseType(struct soap *soap, ns1__BMCreateButtonResponseType *p)
{
	if (soap_read_ns1__BMCreateButtonResponseType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__BMCreateButtonRequestType_DEFINED
#define SOAP_TYPE_ns1__BMCreateButtonRequestType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__BMCreateButtonRequestType(struct soap*, const char*, int, const ns1__BMCreateButtonRequestType *, const char*);
SOAP_FMAC3 ns1__BMCreateButtonRequestType * SOAP_FMAC4 soap_in_ns1__BMCreateButtonRequestType(struct soap*, const char*, ns1__BMCreateButtonRequestType *, const char*);
SOAP_FMAC1 ns1__BMCreateButtonRequestType * SOAP_FMAC2 soap_instantiate_ns1__BMCreateButtonRequestType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__BMCreateButtonRequestType * soap_new_ns1__BMCreateButtonRequestType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__BMCreateButtonRequestType(soap, n, NULL, NULL, NULL);
}

inline ns1__BMCreateButtonRequestType * soap_new_req_ns1__BMCreateButtonRequestType(
	struct soap *soap,
	const std::string& Version__1)
{
	ns1__BMCreateButtonRequestType *_p = soap_new_ns1__BMCreateButtonRequestType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__AbstractRequestType::Version = Version__1;
	}
	return _p;
}

inline ns1__BMCreateButtonRequestType * soap_new_set_ns1__BMCreateButtonRequestType(
	struct soap *soap,
	enum ns3__ButtonTypeType *ButtonType,
	enum ns3__ButtonCodeType *ButtonCode,
	enum ns3__ButtonSubTypeType *ButtonSubType,
	const std::vector<std::string> & ButtonVar,
	const std::vector<ns1__OptionDetailsType *> & OptionDetails,
	const std::vector<std::string> & TextBox,
	enum ns3__ButtonImageType *ButtonImage,
	std::string *ButtonImageURL,
	enum ns3__BuyNowTextType *BuyNowText,
	enum ns3__SubscribeTextType *SubscribeText,
	enum ns3__CountryCodeType *ButtonCountry,
	std::string *ButtonLanguage,
	const std::vector<enum ns3__DetailLevelCodeType> & DetailLevel__1,
	std::string *ErrorLanguage__1,
	const std::string& Version__1,
	char *__any__1)
{
	ns1__BMCreateButtonRequestType *_p = soap_new_ns1__BMCreateButtonRequestType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__BMCreateButtonRequestType::ButtonType = ButtonType;
		_p->ns1__BMCreateButtonRequestType::ButtonCode = ButtonCode;
		_p->ns1__BMCreateButtonRequestType::ButtonSubType = ButtonSubType;
		_p->ns1__BMCreateButtonRequestType::ButtonVar = ButtonVar;
		_p->ns1__BMCreateButtonRequestType::OptionDetails = OptionDetails;
		_p->ns1__BMCreateButtonRequestType::TextBox = TextBox;
		_p->ns1__BMCreateButtonRequestType::ButtonImage = ButtonImage;
		_p->ns1__BMCreateButtonRequestType::ButtonImageURL = ButtonImageURL;
		_p->ns1__BMCreateButtonRequestType::BuyNowText = BuyNowText;
		_p->ns1__BMCreateButtonRequestType::SubscribeText = SubscribeText;
		_p->ns1__BMCreateButtonRequestType::ButtonCountry = ButtonCountry;
		_p->ns1__BMCreateButtonRequestType::ButtonLanguage = ButtonLanguage;
		_p->ns3__AbstractRequestType::DetailLevel = DetailLevel__1;
		_p->ns3__AbstractRequestType::ErrorLanguage = ErrorLanguage__1;
		_p->ns3__AbstractRequestType::Version = Version__1;
		_p->ns3__AbstractRequestType::__any = __any__1;
	}
	return _p;
}

inline int soap_write_ns1__BMCreateButtonRequestType(struct soap *soap, ns1__BMCreateButtonRequestType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:BMCreateButtonRequestType", p->soap_type() == SOAP_TYPE_ns1__BMCreateButtonRequestType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__BMCreateButtonRequestType(struct soap *soap, const char *URL, ns1__BMCreateButtonRequestType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:BMCreateButtonRequestType", p->soap_type() == SOAP_TYPE_ns1__BMCreateButtonRequestType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__BMCreateButtonRequestType(struct soap *soap, const char *URL, ns1__BMCreateButtonRequestType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:BMCreateButtonRequestType", p->soap_type() == SOAP_TYPE_ns1__BMCreateButtonRequestType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__BMCreateButtonRequestType * SOAP_FMAC4 soap_get_ns1__BMCreateButtonRequestType(struct soap*, ns1__BMCreateButtonRequestType *, const char*, const char*);

inline int soap_read_ns1__BMCreateButtonRequestType(struct soap *soap, ns1__BMCreateButtonRequestType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__BMCreateButtonRequestType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__BMCreateButtonRequestType(struct soap *soap, const char *URL, ns1__BMCreateButtonRequestType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__BMCreateButtonRequestType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__BMCreateButtonRequestType(struct soap *soap, ns1__BMCreateButtonRequestType *p)
{
	if (soap_read_ns1__BMCreateButtonRequestType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__OptionDetailsType_DEFINED
#define SOAP_TYPE_ns1__OptionDetailsType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__OptionDetailsType(struct soap*, const char*, int, const ns1__OptionDetailsType *, const char*);
SOAP_FMAC3 ns1__OptionDetailsType * SOAP_FMAC4 soap_in_ns1__OptionDetailsType(struct soap*, const char*, ns1__OptionDetailsType *, const char*);
SOAP_FMAC1 ns1__OptionDetailsType * SOAP_FMAC2 soap_instantiate_ns1__OptionDetailsType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__OptionDetailsType * soap_new_ns1__OptionDetailsType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__OptionDetailsType(soap, n, NULL, NULL, NULL);
}

inline ns1__OptionDetailsType * soap_new_req_ns1__OptionDetailsType(
	struct soap *soap,
	const std::string& OptionName)
{
	ns1__OptionDetailsType *_p = soap_new_ns1__OptionDetailsType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__OptionDetailsType::OptionName = OptionName;
	}
	return _p;
}

inline ns1__OptionDetailsType * soap_new_set_ns1__OptionDetailsType(
	struct soap *soap,
	const std::string& OptionName,
	const std::vector<ns1__OptionSelectionDetailsType *> & OptionSelectionDetails)
{
	ns1__OptionDetailsType *_p = soap_new_ns1__OptionDetailsType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__OptionDetailsType::OptionName = OptionName;
		_p->ns1__OptionDetailsType::OptionSelectionDetails = OptionSelectionDetails;
	}
	return _p;
}

inline int soap_write_ns1__OptionDetailsType(struct soap *soap, ns1__OptionDetailsType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:OptionDetailsType", p->soap_type() == SOAP_TYPE_ns1__OptionDetailsType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__OptionDetailsType(struct soap *soap, const char *URL, ns1__OptionDetailsType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:OptionDetailsType", p->soap_type() == SOAP_TYPE_ns1__OptionDetailsType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__OptionDetailsType(struct soap *soap, const char *URL, ns1__OptionDetailsType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:OptionDetailsType", p->soap_type() == SOAP_TYPE_ns1__OptionDetailsType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__OptionDetailsType * SOAP_FMAC4 soap_get_ns1__OptionDetailsType(struct soap*, ns1__OptionDetailsType *, const char*, const char*);

inline int soap_read_ns1__OptionDetailsType(struct soap *soap, ns1__OptionDetailsType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__OptionDetailsType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__OptionDetailsType(struct soap *soap, const char *URL, ns1__OptionDetailsType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__OptionDetailsType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__OptionDetailsType(struct soap *soap, ns1__OptionDetailsType *p)
{
	if (soap_read_ns1__OptionDetailsType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__OptionSelectionDetailsType_DEFINED
#define SOAP_TYPE_ns1__OptionSelectionDetailsType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__OptionSelectionDetailsType(struct soap*, const char*, int, const ns1__OptionSelectionDetailsType *, const char*);
SOAP_FMAC3 ns1__OptionSelectionDetailsType * SOAP_FMAC4 soap_in_ns1__OptionSelectionDetailsType(struct soap*, const char*, ns1__OptionSelectionDetailsType *, const char*);
SOAP_FMAC1 ns1__OptionSelectionDetailsType * SOAP_FMAC2 soap_instantiate_ns1__OptionSelectionDetailsType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__OptionSelectionDetailsType * soap_new_ns1__OptionSelectionDetailsType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__OptionSelectionDetailsType(soap, n, NULL, NULL, NULL);
}

inline ns1__OptionSelectionDetailsType * soap_new_req_ns1__OptionSelectionDetailsType(
	struct soap *soap,
	const std::string& OptionSelection)
{
	ns1__OptionSelectionDetailsType *_p = soap_new_ns1__OptionSelectionDetailsType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__OptionSelectionDetailsType::OptionSelection = OptionSelection;
	}
	return _p;
}

inline ns1__OptionSelectionDetailsType * soap_new_set_ns1__OptionSelectionDetailsType(
	struct soap *soap,
	const std::string& OptionSelection,
	std::string *Price,
	enum ns3__OptionTypeListType *OptionType,
	const std::vector<ns1__InstallmentDetailsType *> & PaymentPeriod)
{
	ns1__OptionSelectionDetailsType *_p = soap_new_ns1__OptionSelectionDetailsType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__OptionSelectionDetailsType::OptionSelection = OptionSelection;
		_p->ns1__OptionSelectionDetailsType::Price = Price;
		_p->ns1__OptionSelectionDetailsType::OptionType = OptionType;
		_p->ns1__OptionSelectionDetailsType::PaymentPeriod = PaymentPeriod;
	}
	return _p;
}

inline int soap_write_ns1__OptionSelectionDetailsType(struct soap *soap, ns1__OptionSelectionDetailsType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:OptionSelectionDetailsType", p->soap_type() == SOAP_TYPE_ns1__OptionSelectionDetailsType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__OptionSelectionDetailsType(struct soap *soap, const char *URL, ns1__OptionSelectionDetailsType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:OptionSelectionDetailsType", p->soap_type() == SOAP_TYPE_ns1__OptionSelectionDetailsType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__OptionSelectionDetailsType(struct soap *soap, const char *URL, ns1__OptionSelectionDetailsType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:OptionSelectionDetailsType", p->soap_type() == SOAP_TYPE_ns1__OptionSelectionDetailsType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__OptionSelectionDetailsType * SOAP_FMAC4 soap_get_ns1__OptionSelectionDetailsType(struct soap*, ns1__OptionSelectionDetailsType *, const char*, const char*);

inline int soap_read_ns1__OptionSelectionDetailsType(struct soap *soap, ns1__OptionSelectionDetailsType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__OptionSelectionDetailsType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__OptionSelectionDetailsType(struct soap *soap, const char *URL, ns1__OptionSelectionDetailsType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__OptionSelectionDetailsType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__OptionSelectionDetailsType(struct soap *soap, ns1__OptionSelectionDetailsType *p)
{
	if (soap_read_ns1__OptionSelectionDetailsType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__InstallmentDetailsType_DEFINED
#define SOAP_TYPE_ns1__InstallmentDetailsType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__InstallmentDetailsType(struct soap*, const char*, int, const ns1__InstallmentDetailsType *, const char*);
SOAP_FMAC3 ns1__InstallmentDetailsType * SOAP_FMAC4 soap_in_ns1__InstallmentDetailsType(struct soap*, const char*, ns1__InstallmentDetailsType *, const char*);
SOAP_FMAC1 ns1__InstallmentDetailsType * SOAP_FMAC2 soap_instantiate_ns1__InstallmentDetailsType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__InstallmentDetailsType * soap_new_ns1__InstallmentDetailsType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__InstallmentDetailsType(soap, n, NULL, NULL, NULL);
}

inline ns1__InstallmentDetailsType * soap_new_req_ns1__InstallmentDetailsType(
	struct soap *soap)
{
	ns1__InstallmentDetailsType *_p = soap_new_ns1__InstallmentDetailsType(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns1__InstallmentDetailsType * soap_new_set_ns1__InstallmentDetailsType(
	struct soap *soap,
	enum ns3__BillingPeriodType *BillingPeriod,
	int *BillingFrequency,
	int *TotalBillingCycles,
	std::string *Amount,
	std::string *ShippingAmount,
	std::string *TaxAmount)
{
	ns1__InstallmentDetailsType *_p = soap_new_ns1__InstallmentDetailsType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__InstallmentDetailsType::BillingPeriod = BillingPeriod;
		_p->ns1__InstallmentDetailsType::BillingFrequency = BillingFrequency;
		_p->ns1__InstallmentDetailsType::TotalBillingCycles = TotalBillingCycles;
		_p->ns1__InstallmentDetailsType::Amount = Amount;
		_p->ns1__InstallmentDetailsType::ShippingAmount = ShippingAmount;
		_p->ns1__InstallmentDetailsType::TaxAmount = TaxAmount;
	}
	return _p;
}

inline int soap_write_ns1__InstallmentDetailsType(struct soap *soap, ns1__InstallmentDetailsType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:InstallmentDetailsType", p->soap_type() == SOAP_TYPE_ns1__InstallmentDetailsType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__InstallmentDetailsType(struct soap *soap, const char *URL, ns1__InstallmentDetailsType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:InstallmentDetailsType", p->soap_type() == SOAP_TYPE_ns1__InstallmentDetailsType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__InstallmentDetailsType(struct soap *soap, const char *URL, ns1__InstallmentDetailsType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:InstallmentDetailsType", p->soap_type() == SOAP_TYPE_ns1__InstallmentDetailsType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__InstallmentDetailsType * SOAP_FMAC4 soap_get_ns1__InstallmentDetailsType(struct soap*, ns1__InstallmentDetailsType *, const char*, const char*);

inline int soap_read_ns1__InstallmentDetailsType(struct soap *soap, ns1__InstallmentDetailsType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__InstallmentDetailsType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__InstallmentDetailsType(struct soap *soap, const char *URL, ns1__InstallmentDetailsType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__InstallmentDetailsType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__InstallmentDetailsType(struct soap *soap, ns1__InstallmentDetailsType *p)
{
	if (soap_read_ns1__InstallmentDetailsType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_xsd__token_DEFINED
#define SOAP_TYPE_xsd__token_DEFINED

inline void soap_default_xsd__token(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__token(struct soap*, const std::string *);

#define soap_xsd__token2s(soap, a) ((a).c_str())
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__token(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2xsd__token(soap, s, a) soap_s2stdchar((soap), (s), (a), 5, 0, -1, NULL)
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_xsd__token(struct soap*, const char*, std::string*, const char*);

#define soap_instantiate_xsd__token soap_instantiate_std__string


#define soap_new_xsd__token soap_new_std__string

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__token(struct soap*, const std::string *, const char*, const char*);

inline int soap_write_xsd__token(struct soap *soap, std::string const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_xsd__token(soap, p, "xsd:token", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_xsd__token(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_xsd__token(soap, p, "xsd:token", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_xsd__token(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_xsd__token(soap, p, "xsd:token", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_xsd__token(struct soap*, std::string *, const char*, const char*);

inline int soap_read_xsd__token(struct soap *soap, std::string *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_xsd__token(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_xsd__token(struct soap *soap, const char *URL, std::string *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_xsd__token(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_xsd__token(struct soap *soap, std::string *p)
{
	if (soap_read_xsd__token(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_xsd__integer_DEFINED
#define SOAP_TYPE_xsd__integer_DEFINED

inline void soap_default_xsd__integer(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__integer(struct soap*, const std::string *);

#define soap_xsd__integer2s(soap, a) ((a).c_str())
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__integer(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2xsd__integer(soap, s, a) soap_s2stdchar((soap), (s), (a), 5, 0, -1, "[-+]?\\d+")
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_xsd__integer(struct soap*, const char*, std::string*, const char*);

#define soap_instantiate_xsd__integer soap_instantiate_std__string


#define soap_new_xsd__integer soap_new_std__string

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__integer(struct soap*, const std::string *, const char*, const char*);

inline int soap_write_xsd__integer(struct soap *soap, std::string const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_xsd__integer(soap, p, "xsd:integer", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_xsd__integer(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_xsd__integer(soap, p, "xsd:integer", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_xsd__integer(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_xsd__integer(soap, p, "xsd:integer", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_xsd__integer(struct soap*, std::string *, const char*, const char*);

inline int soap_read_xsd__integer(struct soap *soap, std::string *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_xsd__integer(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_xsd__integer(struct soap *soap, const char *URL, std::string *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_xsd__integer(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_xsd__integer(struct soap *soap, std::string *p)
{
	if (soap_read_xsd__integer(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_xsd__decimal_DEFINED
#define SOAP_TYPE_xsd__decimal_DEFINED

inline void soap_default_xsd__decimal(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__decimal(struct soap*, const std::string *);

#define soap_xsd__decimal2s(soap, a) ((a).c_str())
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__decimal(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2xsd__decimal(soap, s, a) soap_s2stdchar((soap), (s), (a), 5, 0, -1, "[-+]?(\\d+|\\d*\\.\\d*)")
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_xsd__decimal(struct soap*, const char*, std::string*, const char*);

#define soap_instantiate_xsd__decimal soap_instantiate_std__string


#define soap_new_xsd__decimal soap_new_std__string

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__decimal(struct soap*, const std::string *, const char*, const char*);

inline int soap_write_xsd__decimal(struct soap *soap, std::string const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_xsd__decimal(soap, p, "xsd:decimal", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_xsd__decimal(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_xsd__decimal(soap, p, "xsd:decimal", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_xsd__decimal(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_xsd__decimal(soap, p, "xsd:decimal", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_xsd__decimal(struct soap*, std::string *, const char*, const char*);

inline int soap_read_xsd__decimal(struct soap *soap, std::string *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_xsd__decimal(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_xsd__decimal(struct soap *soap, const char *URL, std::string *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_xsd__decimal(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_xsd__decimal(struct soap *soap, std::string *p)
{
	if (soap_read_xsd__decimal(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_xsd__anyURI_DEFINED
#define SOAP_TYPE_xsd__anyURI_DEFINED

inline void soap_default_xsd__anyURI(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__anyURI(struct soap*, const std::string *);

#define soap_xsd__anyURI2s(soap, a) ((a).c_str())
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__anyURI(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2xsd__anyURI(soap, s, a) soap_s2stdchar((soap), (s), (a), 4, 0, -1, NULL)
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_xsd__anyURI(struct soap*, const char*, std::string*, const char*);

#define soap_instantiate_xsd__anyURI soap_instantiate_std__string


#define soap_new_xsd__anyURI soap_new_std__string

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__anyURI(struct soap*, const std::string *, const char*, const char*);

inline int soap_write_xsd__anyURI(struct soap *soap, std::string const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_xsd__anyURI(soap, p, "xsd:anyURI", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_xsd__anyURI(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_xsd__anyURI(soap, p, "xsd:anyURI", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_xsd__anyURI(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_xsd__anyURI(soap, p, "xsd:anyURI", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_xsd__anyURI(struct soap*, std::string *, const char*, const char*);

inline int soap_read_xsd__anyURI(struct soap *soap, std::string *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_xsd__anyURI(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_xsd__anyURI(struct soap *soap, const char *URL, std::string *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_xsd__anyURI(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_xsd__anyURI(struct soap *soap, std::string *p)
{
	if (soap_read_xsd__anyURI(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_std__string_DEFINED
#define SOAP_TYPE_std__string_DEFINED

inline void soap_default_std__string(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__string(struct soap*, const std::string *);

#define soap_std__string2s(soap, a) ((a).c_str())
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__string(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2std__string(soap, s, a) soap_s2stdchar((soap), (s), (a), 1, 0, -1, NULL)
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_std__string(struct soap*, const char*, std::string*, const char*);
SOAP_FMAC1 std::string * SOAP_FMAC2 soap_instantiate_std__string(struct soap*, int, const char*, const char*, size_t*);

inline std::string * soap_new_std__string(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__string(soap, n, NULL, NULL, NULL);
}

inline std::string * soap_new_req_std__string(
	struct soap *soap)
{
	std::string *_p = soap_new_std__string(soap);
	if (_p)
	{	soap_default_std__string(soap, _p);
	}
	return _p;
}

inline std::string * soap_new_set_std__string(
	struct soap *soap)
{
	std::string *_p = soap_new_std__string(soap);
	if (_p)
	{	soap_default_std__string(soap, _p);
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_std__string(struct soap*, const std::string *, const char*, const char*);

inline int soap_write_std__string(struct soap *soap, std::string const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_std__string(soap, p, "string", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_std__string(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_std__string(soap, p, "string", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_std__string(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_std__string(soap, p, "string", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_std__string(struct soap*, std::string *, const char*, const char*);

inline int soap_read_std__string(struct soap *soap, std::string *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_std__string(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_std__string(struct soap *soap, const char *URL, std::string *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_std__string(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_std__string(struct soap *soap, std::string *p)
{
	if (soap_read_std__string(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_xsd__duration_DEFINED
#define SOAP_TYPE_xsd__duration_DEFINED
SOAP_FMAC1 void SOAP_FMAC2 soap_default_xsd__duration(struct soap*, std::chrono::nanoseconds *);
SOAP_FMAC1 void SOAP_FMAC2 soap_serialize_xsd__duration(struct soap*, const std::chrono::nanoseconds *);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_xsd__duration2s(struct soap*, std::chrono::nanoseconds);
SOAP_FMAC1 int SOAP_FMAC2 soap_out_xsd__duration(struct soap*, const char*, int, const std::chrono::nanoseconds *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2xsd__duration(struct soap*, const char*, std::chrono::nanoseconds *);
SOAP_FMAC1 std::chrono::nanoseconds * SOAP_FMAC2 soap_in_xsd__duration(struct soap*, const char*, std::chrono::nanoseconds *, const char*);
SOAP_FMAC1 std::chrono::nanoseconds * SOAP_FMAC2 soap_instantiate_xsd__duration(struct soap*, int, const char*, const char*, size_t*);

inline std::chrono::nanoseconds * soap_new_xsd__duration(struct soap *soap, int n = -1)
{
	return soap_instantiate_xsd__duration(soap, n, NULL, NULL, NULL);
}

inline std::chrono::nanoseconds * soap_new_req_xsd__duration(
	struct soap *soap)
{
	std::chrono::nanoseconds *_p = soap_new_xsd__duration(soap);
	if (_p)
	{	
	}
	return _p;
}

inline std::chrono::nanoseconds * soap_new_set_xsd__duration(
	struct soap *soap)
{
	std::chrono::nanoseconds *_p = soap_new_xsd__duration(soap);
	if (_p)
	{	
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__duration(struct soap*, const std::chrono::nanoseconds *, const char*, const char*);

inline int soap_write_xsd__duration(struct soap *soap, std::chrono::nanoseconds const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize_xsd__duration(soap, p), 0) || soap_put_xsd__duration(soap, p, "xsd:duration", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_xsd__duration(struct soap *soap, const char *URL, std::chrono::nanoseconds const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_xsd__duration(soap, p), 0) || soap_put_xsd__duration(soap, p, "xsd:duration", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_xsd__duration(struct soap *soap, const char *URL, std::chrono::nanoseconds const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_xsd__duration(soap, p), 0) || soap_put_xsd__duration(soap, p, "xsd:duration", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 std::chrono::nanoseconds * SOAP_FMAC4 soap_get_xsd__duration(struct soap*, std::chrono::nanoseconds *, const char*, const char*);

inline int soap_read_xsd__duration(struct soap *soap, std::chrono::nanoseconds *p)
{
	if (p)
	{	soap_default_xsd__duration(soap, p);
		if (soap_begin_recv(soap) || soap_get_xsd__duration(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_xsd__duration(struct soap *soap, const char *URL, std::chrono::nanoseconds *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_xsd__duration(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_xsd__duration(struct soap *soap, std::chrono::nanoseconds *p)
{
	if (soap_read_xsd__duration(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Fault_DEFINED
#define SOAP_TYPE_SOAP_ENV__Fault_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Fault(struct soap*, struct SOAP_ENV__Fault *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Fault(struct soap*, const struct SOAP_ENV__Fault *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Fault(struct soap*, const char*, int, const struct SOAP_ENV__Fault *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_in_SOAP_ENV__Fault(struct soap*, const char*, struct SOAP_ENV__Fault *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Fault * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Fault(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Fault * soap_new_SOAP_ENV__Fault(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Fault(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Fault * soap_new_req_SOAP_ENV__Fault(
	struct soap *soap)
{
	struct SOAP_ENV__Fault *_p = soap_new_SOAP_ENV__Fault(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Fault(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Fault * soap_new_set_SOAP_ENV__Fault(
	struct soap *soap,
	char *faultcode,
	char *faultstring,
	char *faultactor,
	struct SOAP_ENV__Detail *detail,
	struct SOAP_ENV__Code *SOAP_ENV__Code,
	struct SOAP_ENV__Reason *SOAP_ENV__Reason,
	char *SOAP_ENV__Node,
	char *SOAP_ENV__Role,
	struct SOAP_ENV__Detail *SOAP_ENV__Detail)
{
	struct SOAP_ENV__Fault *_p = soap_new_SOAP_ENV__Fault(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Fault(soap, _p);
		_p->faultcode = faultcode;
		_p->faultstring = faultstring;
		_p->faultactor = faultactor;
		_p->detail = detail;
		_p->SOAP_ENV__Code = SOAP_ENV__Code;
		_p->SOAP_ENV__Reason = SOAP_ENV__Reason;
		_p->SOAP_ENV__Node = SOAP_ENV__Node;
		_p->SOAP_ENV__Role = SOAP_ENV__Role;
		_p->SOAP_ENV__Detail = SOAP_ENV__Detail;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Fault(struct soap*, const struct SOAP_ENV__Fault *, const char*, const char*);

inline int soap_write_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Fault(soap, p), 0) || soap_put_SOAP_ENV__Fault(soap, p, "SOAP-ENV:Fault", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Fault(struct soap *soap, const char *URL, struct SOAP_ENV__Fault const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_SOAP_ENV__Fault(soap, p), 0) || soap_put_SOAP_ENV__Fault(soap, p, "SOAP-ENV:Fault", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Fault(struct soap *soap, const char *URL, struct SOAP_ENV__Fault const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_SOAP_ENV__Fault(soap, p), 0) || soap_put_SOAP_ENV__Fault(soap, p, "SOAP-ENV:Fault", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_get_SOAP_ENV__Fault(struct soap*, struct SOAP_ENV__Fault *, const char*, const char*);

inline int soap_read_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p)
{
	if (p)
	{	soap_default_SOAP_ENV__Fault(soap, p);
		if (soap_begin_recv(soap) || soap_get_SOAP_ENV__Fault(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Fault(struct soap *soap, const char *URL, struct SOAP_ENV__Fault *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_SOAP_ENV__Fault(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p)
{
	if (soap_read_SOAP_ENV__Fault(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Reason_DEFINED
#define SOAP_TYPE_SOAP_ENV__Reason_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Reason(struct soap*, const struct SOAP_ENV__Reason *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Reason(struct soap*, const char*, int, const struct SOAP_ENV__Reason *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_in_SOAP_ENV__Reason(struct soap*, const char*, struct SOAP_ENV__Reason *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Reason * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Reason(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Reason * soap_new_SOAP_ENV__Reason(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Reason(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Reason * soap_new_req_SOAP_ENV__Reason(
	struct soap *soap)
{
	struct SOAP_ENV__Reason *_p = soap_new_SOAP_ENV__Reason(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Reason(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Reason * soap_new_set_SOAP_ENV__Reason(
	struct soap *soap,
	char *SOAP_ENV__Text)
{
	struct SOAP_ENV__Reason *_p = soap_new_SOAP_ENV__Reason(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Reason(soap, _p);
		_p->SOAP_ENV__Text = SOAP_ENV__Text;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Reason(struct soap*, const struct SOAP_ENV__Reason *, const char*, const char*);

inline int soap_write_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Reason(soap, p), 0) || soap_put_SOAP_ENV__Reason(soap, p, "SOAP-ENV:Reason", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Reason(struct soap *soap, const char *URL, struct SOAP_ENV__Reason const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_SOAP_ENV__Reason(soap, p), 0) || soap_put_SOAP_ENV__Reason(soap, p, "SOAP-ENV:Reason", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Reason(struct soap *soap, const char *URL, struct SOAP_ENV__Reason const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_SOAP_ENV__Reason(soap, p), 0) || soap_put_SOAP_ENV__Reason(soap, p, "SOAP-ENV:Reason", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_get_SOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *, const char*, const char*);

inline int soap_read_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p)
{
	if (p)
	{	soap_default_SOAP_ENV__Reason(soap, p);
		if (soap_begin_recv(soap) || soap_get_SOAP_ENV__Reason(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Reason(struct soap *soap, const char *URL, struct SOAP_ENV__Reason *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_SOAP_ENV__Reason(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p)
{
	if (soap_read_SOAP_ENV__Reason(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Detail_DEFINED
#define SOAP_TYPE_SOAP_ENV__Detail_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Detail(struct soap*, const struct SOAP_ENV__Detail *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Detail(struct soap*, const char*, int, const struct SOAP_ENV__Detail *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_in_SOAP_ENV__Detail(struct soap*, const char*, struct SOAP_ENV__Detail *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Detail * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Detail(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Detail * soap_new_SOAP_ENV__Detail(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Detail(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Detail * soap_new_req_SOAP_ENV__Detail(
	struct soap *soap,
	int __type,
	void *fault)
{
	struct SOAP_ENV__Detail *_p = soap_new_SOAP_ENV__Detail(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Detail(soap, _p);
		_p->__type = __type;
		_p->fault = fault;
	}
	return _p;
}

inline struct SOAP_ENV__Detail * soap_new_set_SOAP_ENV__Detail(
	struct soap *soap,
	char *__any,
	int __type,
	void *fault)
{
	struct SOAP_ENV__Detail *_p = soap_new_SOAP_ENV__Detail(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Detail(soap, _p);
		_p->__any = __any;
		_p->__type = __type;
		_p->fault = fault;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Detail(struct soap*, const struct SOAP_ENV__Detail *, const char*, const char*);

inline int soap_write_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Detail(soap, p), 0) || soap_put_SOAP_ENV__Detail(soap, p, "SOAP-ENV:Detail", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Detail(struct soap *soap, const char *URL, struct SOAP_ENV__Detail const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_SOAP_ENV__Detail(soap, p), 0) || soap_put_SOAP_ENV__Detail(soap, p, "SOAP-ENV:Detail", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Detail(struct soap *soap, const char *URL, struct SOAP_ENV__Detail const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_SOAP_ENV__Detail(soap, p), 0) || soap_put_SOAP_ENV__Detail(soap, p, "SOAP-ENV:Detail", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_get_SOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *, const char*, const char*);

inline int soap_read_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p)
{
	if (p)
	{	soap_default_SOAP_ENV__Detail(soap, p);
		if (soap_begin_recv(soap) || soap_get_SOAP_ENV__Detail(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Detail(struct soap *soap, const char *URL, struct SOAP_ENV__Detail *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_SOAP_ENV__Detail(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p)
{
	if (soap_read_SOAP_ENV__Detail(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Code_DEFINED
#define SOAP_TYPE_SOAP_ENV__Code_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Code(struct soap*, const struct SOAP_ENV__Code *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Code(struct soap*, const char*, int, const struct SOAP_ENV__Code *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_in_SOAP_ENV__Code(struct soap*, const char*, struct SOAP_ENV__Code *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Code * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Code(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Code * soap_new_SOAP_ENV__Code(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Code(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Code * soap_new_req_SOAP_ENV__Code(
	struct soap *soap)
{
	struct SOAP_ENV__Code *_p = soap_new_SOAP_ENV__Code(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Code(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Code * soap_new_set_SOAP_ENV__Code(
	struct soap *soap,
	char *SOAP_ENV__Value,
	struct SOAP_ENV__Code *SOAP_ENV__Subcode)
{
	struct SOAP_ENV__Code *_p = soap_new_SOAP_ENV__Code(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Code(soap, _p);
		_p->SOAP_ENV__Value = SOAP_ENV__Value;
		_p->SOAP_ENV__Subcode = SOAP_ENV__Subcode;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Code(struct soap*, const struct SOAP_ENV__Code *, const char*, const char*);

inline int soap_write_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Code(soap, p), 0) || soap_put_SOAP_ENV__Code(soap, p, "SOAP-ENV:Code", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Code(struct soap *soap, const char *URL, struct SOAP_ENV__Code const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_SOAP_ENV__Code(soap, p), 0) || soap_put_SOAP_ENV__Code(soap, p, "SOAP-ENV:Code", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Code(struct soap *soap, const char *URL, struct SOAP_ENV__Code const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_SOAP_ENV__Code(soap, p), 0) || soap_put_SOAP_ENV__Code(soap, p, "SOAP-ENV:Code", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_get_SOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *, const char*, const char*);

inline int soap_read_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p)
{
	if (p)
	{	soap_default_SOAP_ENV__Code(soap, p);
		if (soap_begin_recv(soap) || soap_get_SOAP_ENV__Code(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Code(struct soap *soap, const char *URL, struct SOAP_ENV__Code *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_SOAP_ENV__Code(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p)
{
	if (soap_read_SOAP_ENV__Code(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#endif

#ifndef SOAP_TYPE___ns1__ExternalRememberMeOptOut_DEFINED
#define SOAP_TYPE___ns1__ExternalRememberMeOptOut_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__ExternalRememberMeOptOut(struct soap*, struct __ns1__ExternalRememberMeOptOut *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__ExternalRememberMeOptOut(struct soap*, const struct __ns1__ExternalRememberMeOptOut *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__ExternalRememberMeOptOut(struct soap*, const char*, int, const struct __ns1__ExternalRememberMeOptOut *, const char*);
SOAP_FMAC3 struct __ns1__ExternalRememberMeOptOut * SOAP_FMAC4 soap_in___ns1__ExternalRememberMeOptOut(struct soap*, const char*, struct __ns1__ExternalRememberMeOptOut *, const char*);
SOAP_FMAC1 struct __ns1__ExternalRememberMeOptOut * SOAP_FMAC2 soap_instantiate___ns1__ExternalRememberMeOptOut(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__ExternalRememberMeOptOut * soap_new___ns1__ExternalRememberMeOptOut(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__ExternalRememberMeOptOut(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__ExternalRememberMeOptOut * soap_new_req___ns1__ExternalRememberMeOptOut(
	struct soap *soap)
{
	struct __ns1__ExternalRememberMeOptOut *_p = soap_new___ns1__ExternalRememberMeOptOut(soap);
	if (_p)
	{	soap_default___ns1__ExternalRememberMeOptOut(soap, _p);
	}
	return _p;
}

inline struct __ns1__ExternalRememberMeOptOut * soap_new_set___ns1__ExternalRememberMeOptOut(
	struct soap *soap,
	_ns1__ExternalRememberMeOptOutReq *ns1__ExternalRememberMeOptOutReq)
{
	struct __ns1__ExternalRememberMeOptOut *_p = soap_new___ns1__ExternalRememberMeOptOut(soap);
	if (_p)
	{	soap_default___ns1__ExternalRememberMeOptOut(soap, _p);
		_p->ns1__ExternalRememberMeOptOutReq = ns1__ExternalRememberMeOptOutReq;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__ExternalRememberMeOptOut(struct soap*, const struct __ns1__ExternalRememberMeOptOut *, const char*, const char*);

inline int soap_write___ns1__ExternalRememberMeOptOut(struct soap *soap, struct __ns1__ExternalRememberMeOptOut const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__ExternalRememberMeOptOut(soap, p), 0) || soap_put___ns1__ExternalRememberMeOptOut(soap, p, "-ns1:ExternalRememberMeOptOut", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__ExternalRememberMeOptOut(struct soap *soap, const char *URL, struct __ns1__ExternalRememberMeOptOut const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__ExternalRememberMeOptOut(soap, p), 0) || soap_put___ns1__ExternalRememberMeOptOut(soap, p, "-ns1:ExternalRememberMeOptOut", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__ExternalRememberMeOptOut(struct soap *soap, const char *URL, struct __ns1__ExternalRememberMeOptOut const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__ExternalRememberMeOptOut(soap, p), 0) || soap_put___ns1__ExternalRememberMeOptOut(soap, p, "-ns1:ExternalRememberMeOptOut", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__ExternalRememberMeOptOut * SOAP_FMAC4 soap_get___ns1__ExternalRememberMeOptOut(struct soap*, struct __ns1__ExternalRememberMeOptOut *, const char*, const char*);

inline int soap_read___ns1__ExternalRememberMeOptOut(struct soap *soap, struct __ns1__ExternalRememberMeOptOut *p)
{
	if (p)
	{	soap_default___ns1__ExternalRememberMeOptOut(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__ExternalRememberMeOptOut(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__ExternalRememberMeOptOut(struct soap *soap, const char *URL, struct __ns1__ExternalRememberMeOptOut *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__ExternalRememberMeOptOut(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__ExternalRememberMeOptOut(struct soap *soap, struct __ns1__ExternalRememberMeOptOut *p)
{
	if (soap_read___ns1__ExternalRememberMeOptOut(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__ReverseTransaction_DEFINED
#define SOAP_TYPE___ns1__ReverseTransaction_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__ReverseTransaction(struct soap*, struct __ns1__ReverseTransaction *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__ReverseTransaction(struct soap*, const struct __ns1__ReverseTransaction *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__ReverseTransaction(struct soap*, const char*, int, const struct __ns1__ReverseTransaction *, const char*);
SOAP_FMAC3 struct __ns1__ReverseTransaction * SOAP_FMAC4 soap_in___ns1__ReverseTransaction(struct soap*, const char*, struct __ns1__ReverseTransaction *, const char*);
SOAP_FMAC1 struct __ns1__ReverseTransaction * SOAP_FMAC2 soap_instantiate___ns1__ReverseTransaction(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__ReverseTransaction * soap_new___ns1__ReverseTransaction(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__ReverseTransaction(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__ReverseTransaction * soap_new_req___ns1__ReverseTransaction(
	struct soap *soap)
{
	struct __ns1__ReverseTransaction *_p = soap_new___ns1__ReverseTransaction(soap);
	if (_p)
	{	soap_default___ns1__ReverseTransaction(soap, _p);
	}
	return _p;
}

inline struct __ns1__ReverseTransaction * soap_new_set___ns1__ReverseTransaction(
	struct soap *soap,
	_ns1__ReverseTransactionReq *ns1__ReverseTransactionReq)
{
	struct __ns1__ReverseTransaction *_p = soap_new___ns1__ReverseTransaction(soap);
	if (_p)
	{	soap_default___ns1__ReverseTransaction(soap, _p);
		_p->ns1__ReverseTransactionReq = ns1__ReverseTransactionReq;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__ReverseTransaction(struct soap*, const struct __ns1__ReverseTransaction *, const char*, const char*);

inline int soap_write___ns1__ReverseTransaction(struct soap *soap, struct __ns1__ReverseTransaction const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__ReverseTransaction(soap, p), 0) || soap_put___ns1__ReverseTransaction(soap, p, "-ns1:ReverseTransaction", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__ReverseTransaction(struct soap *soap, const char *URL, struct __ns1__ReverseTransaction const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__ReverseTransaction(soap, p), 0) || soap_put___ns1__ReverseTransaction(soap, p, "-ns1:ReverseTransaction", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__ReverseTransaction(struct soap *soap, const char *URL, struct __ns1__ReverseTransaction const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__ReverseTransaction(soap, p), 0) || soap_put___ns1__ReverseTransaction(soap, p, "-ns1:ReverseTransaction", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__ReverseTransaction * SOAP_FMAC4 soap_get___ns1__ReverseTransaction(struct soap*, struct __ns1__ReverseTransaction *, const char*, const char*);

inline int soap_read___ns1__ReverseTransaction(struct soap *soap, struct __ns1__ReverseTransaction *p)
{
	if (p)
	{	soap_default___ns1__ReverseTransaction(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__ReverseTransaction(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__ReverseTransaction(struct soap *soap, const char *URL, struct __ns1__ReverseTransaction *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__ReverseTransaction(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__ReverseTransaction(struct soap *soap, struct __ns1__ReverseTransaction *p)
{
	if (soap_read___ns1__ReverseTransaction(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__DoNonReferencedCredit_DEFINED
#define SOAP_TYPE___ns1__DoNonReferencedCredit_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__DoNonReferencedCredit(struct soap*, struct __ns1__DoNonReferencedCredit *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__DoNonReferencedCredit(struct soap*, const struct __ns1__DoNonReferencedCredit *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__DoNonReferencedCredit(struct soap*, const char*, int, const struct __ns1__DoNonReferencedCredit *, const char*);
SOAP_FMAC3 struct __ns1__DoNonReferencedCredit * SOAP_FMAC4 soap_in___ns1__DoNonReferencedCredit(struct soap*, const char*, struct __ns1__DoNonReferencedCredit *, const char*);
SOAP_FMAC1 struct __ns1__DoNonReferencedCredit * SOAP_FMAC2 soap_instantiate___ns1__DoNonReferencedCredit(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__DoNonReferencedCredit * soap_new___ns1__DoNonReferencedCredit(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__DoNonReferencedCredit(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__DoNonReferencedCredit * soap_new_req___ns1__DoNonReferencedCredit(
	struct soap *soap)
{
	struct __ns1__DoNonReferencedCredit *_p = soap_new___ns1__DoNonReferencedCredit(soap);
	if (_p)
	{	soap_default___ns1__DoNonReferencedCredit(soap, _p);
	}
	return _p;
}

inline struct __ns1__DoNonReferencedCredit * soap_new_set___ns1__DoNonReferencedCredit(
	struct soap *soap,
	_ns1__DoNonReferencedCreditReq *ns1__DoNonReferencedCreditReq)
{
	struct __ns1__DoNonReferencedCredit *_p = soap_new___ns1__DoNonReferencedCredit(soap);
	if (_p)
	{	soap_default___ns1__DoNonReferencedCredit(soap, _p);
		_p->ns1__DoNonReferencedCreditReq = ns1__DoNonReferencedCreditReq;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__DoNonReferencedCredit(struct soap*, const struct __ns1__DoNonReferencedCredit *, const char*, const char*);

inline int soap_write___ns1__DoNonReferencedCredit(struct soap *soap, struct __ns1__DoNonReferencedCredit const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__DoNonReferencedCredit(soap, p), 0) || soap_put___ns1__DoNonReferencedCredit(soap, p, "-ns1:DoNonReferencedCredit", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__DoNonReferencedCredit(struct soap *soap, const char *URL, struct __ns1__DoNonReferencedCredit const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__DoNonReferencedCredit(soap, p), 0) || soap_put___ns1__DoNonReferencedCredit(soap, p, "-ns1:DoNonReferencedCredit", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__DoNonReferencedCredit(struct soap *soap, const char *URL, struct __ns1__DoNonReferencedCredit const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__DoNonReferencedCredit(soap, p), 0) || soap_put___ns1__DoNonReferencedCredit(soap, p, "-ns1:DoNonReferencedCredit", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__DoNonReferencedCredit * SOAP_FMAC4 soap_get___ns1__DoNonReferencedCredit(struct soap*, struct __ns1__DoNonReferencedCredit *, const char*, const char*);

inline int soap_read___ns1__DoNonReferencedCredit(struct soap *soap, struct __ns1__DoNonReferencedCredit *p)
{
	if (p)
	{	soap_default___ns1__DoNonReferencedCredit(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__DoNonReferencedCredit(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__DoNonReferencedCredit(struct soap *soap, const char *URL, struct __ns1__DoNonReferencedCredit *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__DoNonReferencedCredit(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__DoNonReferencedCredit(struct soap *soap, struct __ns1__DoNonReferencedCredit *p)
{
	if (soap_read___ns1__DoNonReferencedCredit(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__UpdateRecurringPaymentsProfile_DEFINED
#define SOAP_TYPE___ns1__UpdateRecurringPaymentsProfile_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__UpdateRecurringPaymentsProfile(struct soap*, struct __ns1__UpdateRecurringPaymentsProfile *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__UpdateRecurringPaymentsProfile(struct soap*, const struct __ns1__UpdateRecurringPaymentsProfile *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__UpdateRecurringPaymentsProfile(struct soap*, const char*, int, const struct __ns1__UpdateRecurringPaymentsProfile *, const char*);
SOAP_FMAC3 struct __ns1__UpdateRecurringPaymentsProfile * SOAP_FMAC4 soap_in___ns1__UpdateRecurringPaymentsProfile(struct soap*, const char*, struct __ns1__UpdateRecurringPaymentsProfile *, const char*);
SOAP_FMAC1 struct __ns1__UpdateRecurringPaymentsProfile * SOAP_FMAC2 soap_instantiate___ns1__UpdateRecurringPaymentsProfile(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__UpdateRecurringPaymentsProfile * soap_new___ns1__UpdateRecurringPaymentsProfile(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__UpdateRecurringPaymentsProfile(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__UpdateRecurringPaymentsProfile * soap_new_req___ns1__UpdateRecurringPaymentsProfile(
	struct soap *soap)
{
	struct __ns1__UpdateRecurringPaymentsProfile *_p = soap_new___ns1__UpdateRecurringPaymentsProfile(soap);
	if (_p)
	{	soap_default___ns1__UpdateRecurringPaymentsProfile(soap, _p);
	}
	return _p;
}

inline struct __ns1__UpdateRecurringPaymentsProfile * soap_new_set___ns1__UpdateRecurringPaymentsProfile(
	struct soap *soap,
	_ns1__UpdateRecurringPaymentsProfileReq *ns1__UpdateRecurringPaymentsProfileReq)
{
	struct __ns1__UpdateRecurringPaymentsProfile *_p = soap_new___ns1__UpdateRecurringPaymentsProfile(soap);
	if (_p)
	{	soap_default___ns1__UpdateRecurringPaymentsProfile(soap, _p);
		_p->ns1__UpdateRecurringPaymentsProfileReq = ns1__UpdateRecurringPaymentsProfileReq;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__UpdateRecurringPaymentsProfile(struct soap*, const struct __ns1__UpdateRecurringPaymentsProfile *, const char*, const char*);

inline int soap_write___ns1__UpdateRecurringPaymentsProfile(struct soap *soap, struct __ns1__UpdateRecurringPaymentsProfile const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__UpdateRecurringPaymentsProfile(soap, p), 0) || soap_put___ns1__UpdateRecurringPaymentsProfile(soap, p, "-ns1:UpdateRecurringPaymentsProfile", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__UpdateRecurringPaymentsProfile(struct soap *soap, const char *URL, struct __ns1__UpdateRecurringPaymentsProfile const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__UpdateRecurringPaymentsProfile(soap, p), 0) || soap_put___ns1__UpdateRecurringPaymentsProfile(soap, p, "-ns1:UpdateRecurringPaymentsProfile", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__UpdateRecurringPaymentsProfile(struct soap *soap, const char *URL, struct __ns1__UpdateRecurringPaymentsProfile const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__UpdateRecurringPaymentsProfile(soap, p), 0) || soap_put___ns1__UpdateRecurringPaymentsProfile(soap, p, "-ns1:UpdateRecurringPaymentsProfile", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__UpdateRecurringPaymentsProfile * SOAP_FMAC4 soap_get___ns1__UpdateRecurringPaymentsProfile(struct soap*, struct __ns1__UpdateRecurringPaymentsProfile *, const char*, const char*);

inline int soap_read___ns1__UpdateRecurringPaymentsProfile(struct soap *soap, struct __ns1__UpdateRecurringPaymentsProfile *p)
{
	if (p)
	{	soap_default___ns1__UpdateRecurringPaymentsProfile(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__UpdateRecurringPaymentsProfile(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__UpdateRecurringPaymentsProfile(struct soap *soap, const char *URL, struct __ns1__UpdateRecurringPaymentsProfile *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__UpdateRecurringPaymentsProfile(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__UpdateRecurringPaymentsProfile(struct soap *soap, struct __ns1__UpdateRecurringPaymentsProfile *p)
{
	if (soap_read___ns1__UpdateRecurringPaymentsProfile(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__BillOutstandingAmount_DEFINED
#define SOAP_TYPE___ns1__BillOutstandingAmount_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__BillOutstandingAmount(struct soap*, struct __ns1__BillOutstandingAmount *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__BillOutstandingAmount(struct soap*, const struct __ns1__BillOutstandingAmount *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__BillOutstandingAmount(struct soap*, const char*, int, const struct __ns1__BillOutstandingAmount *, const char*);
SOAP_FMAC3 struct __ns1__BillOutstandingAmount * SOAP_FMAC4 soap_in___ns1__BillOutstandingAmount(struct soap*, const char*, struct __ns1__BillOutstandingAmount *, const char*);
SOAP_FMAC1 struct __ns1__BillOutstandingAmount * SOAP_FMAC2 soap_instantiate___ns1__BillOutstandingAmount(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__BillOutstandingAmount * soap_new___ns1__BillOutstandingAmount(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__BillOutstandingAmount(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__BillOutstandingAmount * soap_new_req___ns1__BillOutstandingAmount(
	struct soap *soap)
{
	struct __ns1__BillOutstandingAmount *_p = soap_new___ns1__BillOutstandingAmount(soap);
	if (_p)
	{	soap_default___ns1__BillOutstandingAmount(soap, _p);
	}
	return _p;
}

inline struct __ns1__BillOutstandingAmount * soap_new_set___ns1__BillOutstandingAmount(
	struct soap *soap,
	_ns1__BillOutstandingAmountReq *ns1__BillOutstandingAmountReq)
{
	struct __ns1__BillOutstandingAmount *_p = soap_new___ns1__BillOutstandingAmount(soap);
	if (_p)
	{	soap_default___ns1__BillOutstandingAmount(soap, _p);
		_p->ns1__BillOutstandingAmountReq = ns1__BillOutstandingAmountReq;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__BillOutstandingAmount(struct soap*, const struct __ns1__BillOutstandingAmount *, const char*, const char*);

inline int soap_write___ns1__BillOutstandingAmount(struct soap *soap, struct __ns1__BillOutstandingAmount const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__BillOutstandingAmount(soap, p), 0) || soap_put___ns1__BillOutstandingAmount(soap, p, "-ns1:BillOutstandingAmount", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__BillOutstandingAmount(struct soap *soap, const char *URL, struct __ns1__BillOutstandingAmount const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__BillOutstandingAmount(soap, p), 0) || soap_put___ns1__BillOutstandingAmount(soap, p, "-ns1:BillOutstandingAmount", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__BillOutstandingAmount(struct soap *soap, const char *URL, struct __ns1__BillOutstandingAmount const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__BillOutstandingAmount(soap, p), 0) || soap_put___ns1__BillOutstandingAmount(soap, p, "-ns1:BillOutstandingAmount", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__BillOutstandingAmount * SOAP_FMAC4 soap_get___ns1__BillOutstandingAmount(struct soap*, struct __ns1__BillOutstandingAmount *, const char*, const char*);

inline int soap_read___ns1__BillOutstandingAmount(struct soap *soap, struct __ns1__BillOutstandingAmount *p)
{
	if (p)
	{	soap_default___ns1__BillOutstandingAmount(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__BillOutstandingAmount(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__BillOutstandingAmount(struct soap *soap, const char *URL, struct __ns1__BillOutstandingAmount *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__BillOutstandingAmount(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__BillOutstandingAmount(struct soap *soap, struct __ns1__BillOutstandingAmount *p)
{
	if (soap_read___ns1__BillOutstandingAmount(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__ManageRecurringPaymentsProfileStatus_DEFINED
#define SOAP_TYPE___ns1__ManageRecurringPaymentsProfileStatus_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__ManageRecurringPaymentsProfileStatus(struct soap*, struct __ns1__ManageRecurringPaymentsProfileStatus *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__ManageRecurringPaymentsProfileStatus(struct soap*, const struct __ns1__ManageRecurringPaymentsProfileStatus *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__ManageRecurringPaymentsProfileStatus(struct soap*, const char*, int, const struct __ns1__ManageRecurringPaymentsProfileStatus *, const char*);
SOAP_FMAC3 struct __ns1__ManageRecurringPaymentsProfileStatus * SOAP_FMAC4 soap_in___ns1__ManageRecurringPaymentsProfileStatus(struct soap*, const char*, struct __ns1__ManageRecurringPaymentsProfileStatus *, const char*);
SOAP_FMAC1 struct __ns1__ManageRecurringPaymentsProfileStatus * SOAP_FMAC2 soap_instantiate___ns1__ManageRecurringPaymentsProfileStatus(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__ManageRecurringPaymentsProfileStatus * soap_new___ns1__ManageRecurringPaymentsProfileStatus(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__ManageRecurringPaymentsProfileStatus(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__ManageRecurringPaymentsProfileStatus * soap_new_req___ns1__ManageRecurringPaymentsProfileStatus(
	struct soap *soap)
{
	struct __ns1__ManageRecurringPaymentsProfileStatus *_p = soap_new___ns1__ManageRecurringPaymentsProfileStatus(soap);
	if (_p)
	{	soap_default___ns1__ManageRecurringPaymentsProfileStatus(soap, _p);
	}
	return _p;
}

inline struct __ns1__ManageRecurringPaymentsProfileStatus * soap_new_set___ns1__ManageRecurringPaymentsProfileStatus(
	struct soap *soap,
	_ns1__ManageRecurringPaymentsProfileStatusReq *ns1__ManageRecurringPaymentsProfileStatusReq)
{
	struct __ns1__ManageRecurringPaymentsProfileStatus *_p = soap_new___ns1__ManageRecurringPaymentsProfileStatus(soap);
	if (_p)
	{	soap_default___ns1__ManageRecurringPaymentsProfileStatus(soap, _p);
		_p->ns1__ManageRecurringPaymentsProfileStatusReq = ns1__ManageRecurringPaymentsProfileStatusReq;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__ManageRecurringPaymentsProfileStatus(struct soap*, const struct __ns1__ManageRecurringPaymentsProfileStatus *, const char*, const char*);

inline int soap_write___ns1__ManageRecurringPaymentsProfileStatus(struct soap *soap, struct __ns1__ManageRecurringPaymentsProfileStatus const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__ManageRecurringPaymentsProfileStatus(soap, p), 0) || soap_put___ns1__ManageRecurringPaymentsProfileStatus(soap, p, "-ns1:ManageRecurringPaymentsProfileStatus", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__ManageRecurringPaymentsProfileStatus(struct soap *soap, const char *URL, struct __ns1__ManageRecurringPaymentsProfileStatus const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__ManageRecurringPaymentsProfileStatus(soap, p), 0) || soap_put___ns1__ManageRecurringPaymentsProfileStatus(soap, p, "-ns1:ManageRecurringPaymentsProfileStatus", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__ManageRecurringPaymentsProfileStatus(struct soap *soap, const char *URL, struct __ns1__ManageRecurringPaymentsProfileStatus const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__ManageRecurringPaymentsProfileStatus(soap, p), 0) || soap_put___ns1__ManageRecurringPaymentsProfileStatus(soap, p, "-ns1:ManageRecurringPaymentsProfileStatus", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__ManageRecurringPaymentsProfileStatus * SOAP_FMAC4 soap_get___ns1__ManageRecurringPaymentsProfileStatus(struct soap*, struct __ns1__ManageRecurringPaymentsProfileStatus *, const char*, const char*);

inline int soap_read___ns1__ManageRecurringPaymentsProfileStatus(struct soap *soap, struct __ns1__ManageRecurringPaymentsProfileStatus *p)
{
	if (p)
	{	soap_default___ns1__ManageRecurringPaymentsProfileStatus(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__ManageRecurringPaymentsProfileStatus(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__ManageRecurringPaymentsProfileStatus(struct soap *soap, const char *URL, struct __ns1__ManageRecurringPaymentsProfileStatus *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__ManageRecurringPaymentsProfileStatus(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__ManageRecurringPaymentsProfileStatus(struct soap *soap, struct __ns1__ManageRecurringPaymentsProfileStatus *p)
{
	if (soap_read___ns1__ManageRecurringPaymentsProfileStatus(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__GetRecurringPaymentsProfileDetails_DEFINED
#define SOAP_TYPE___ns1__GetRecurringPaymentsProfileDetails_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetRecurringPaymentsProfileDetails(struct soap*, struct __ns1__GetRecurringPaymentsProfileDetails *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetRecurringPaymentsProfileDetails(struct soap*, const struct __ns1__GetRecurringPaymentsProfileDetails *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetRecurringPaymentsProfileDetails(struct soap*, const char*, int, const struct __ns1__GetRecurringPaymentsProfileDetails *, const char*);
SOAP_FMAC3 struct __ns1__GetRecurringPaymentsProfileDetails * SOAP_FMAC4 soap_in___ns1__GetRecurringPaymentsProfileDetails(struct soap*, const char*, struct __ns1__GetRecurringPaymentsProfileDetails *, const char*);
SOAP_FMAC1 struct __ns1__GetRecurringPaymentsProfileDetails * SOAP_FMAC2 soap_instantiate___ns1__GetRecurringPaymentsProfileDetails(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__GetRecurringPaymentsProfileDetails * soap_new___ns1__GetRecurringPaymentsProfileDetails(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__GetRecurringPaymentsProfileDetails(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__GetRecurringPaymentsProfileDetails * soap_new_req___ns1__GetRecurringPaymentsProfileDetails(
	struct soap *soap)
{
	struct __ns1__GetRecurringPaymentsProfileDetails *_p = soap_new___ns1__GetRecurringPaymentsProfileDetails(soap);
	if (_p)
	{	soap_default___ns1__GetRecurringPaymentsProfileDetails(soap, _p);
	}
	return _p;
}

inline struct __ns1__GetRecurringPaymentsProfileDetails * soap_new_set___ns1__GetRecurringPaymentsProfileDetails(
	struct soap *soap,
	_ns1__GetRecurringPaymentsProfileDetailsReq *ns1__GetRecurringPaymentsProfileDetailsReq)
{
	struct __ns1__GetRecurringPaymentsProfileDetails *_p = soap_new___ns1__GetRecurringPaymentsProfileDetails(soap);
	if (_p)
	{	soap_default___ns1__GetRecurringPaymentsProfileDetails(soap, _p);
		_p->ns1__GetRecurringPaymentsProfileDetailsReq = ns1__GetRecurringPaymentsProfileDetailsReq;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetRecurringPaymentsProfileDetails(struct soap*, const struct __ns1__GetRecurringPaymentsProfileDetails *, const char*, const char*);

inline int soap_write___ns1__GetRecurringPaymentsProfileDetails(struct soap *soap, struct __ns1__GetRecurringPaymentsProfileDetails const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__GetRecurringPaymentsProfileDetails(soap, p), 0) || soap_put___ns1__GetRecurringPaymentsProfileDetails(soap, p, "-ns1:GetRecurringPaymentsProfileDetails", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__GetRecurringPaymentsProfileDetails(struct soap *soap, const char *URL, struct __ns1__GetRecurringPaymentsProfileDetails const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__GetRecurringPaymentsProfileDetails(soap, p), 0) || soap_put___ns1__GetRecurringPaymentsProfileDetails(soap, p, "-ns1:GetRecurringPaymentsProfileDetails", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__GetRecurringPaymentsProfileDetails(struct soap *soap, const char *URL, struct __ns1__GetRecurringPaymentsProfileDetails const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__GetRecurringPaymentsProfileDetails(soap, p), 0) || soap_put___ns1__GetRecurringPaymentsProfileDetails(soap, p, "-ns1:GetRecurringPaymentsProfileDetails", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__GetRecurringPaymentsProfileDetails * SOAP_FMAC4 soap_get___ns1__GetRecurringPaymentsProfileDetails(struct soap*, struct __ns1__GetRecurringPaymentsProfileDetails *, const char*, const char*);

inline int soap_read___ns1__GetRecurringPaymentsProfileDetails(struct soap *soap, struct __ns1__GetRecurringPaymentsProfileDetails *p)
{
	if (p)
	{	soap_default___ns1__GetRecurringPaymentsProfileDetails(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__GetRecurringPaymentsProfileDetails(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__GetRecurringPaymentsProfileDetails(struct soap *soap, const char *URL, struct __ns1__GetRecurringPaymentsProfileDetails *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__GetRecurringPaymentsProfileDetails(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__GetRecurringPaymentsProfileDetails(struct soap *soap, struct __ns1__GetRecurringPaymentsProfileDetails *p)
{
	if (soap_read___ns1__GetRecurringPaymentsProfileDetails(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__CreateRecurringPaymentsProfile_DEFINED
#define SOAP_TYPE___ns1__CreateRecurringPaymentsProfile_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__CreateRecurringPaymentsProfile(struct soap*, struct __ns1__CreateRecurringPaymentsProfile *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__CreateRecurringPaymentsProfile(struct soap*, const struct __ns1__CreateRecurringPaymentsProfile *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__CreateRecurringPaymentsProfile(struct soap*, const char*, int, const struct __ns1__CreateRecurringPaymentsProfile *, const char*);
SOAP_FMAC3 struct __ns1__CreateRecurringPaymentsProfile * SOAP_FMAC4 soap_in___ns1__CreateRecurringPaymentsProfile(struct soap*, const char*, struct __ns1__CreateRecurringPaymentsProfile *, const char*);
SOAP_FMAC1 struct __ns1__CreateRecurringPaymentsProfile * SOAP_FMAC2 soap_instantiate___ns1__CreateRecurringPaymentsProfile(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__CreateRecurringPaymentsProfile * soap_new___ns1__CreateRecurringPaymentsProfile(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__CreateRecurringPaymentsProfile(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__CreateRecurringPaymentsProfile * soap_new_req___ns1__CreateRecurringPaymentsProfile(
	struct soap *soap)
{
	struct __ns1__CreateRecurringPaymentsProfile *_p = soap_new___ns1__CreateRecurringPaymentsProfile(soap);
	if (_p)
	{	soap_default___ns1__CreateRecurringPaymentsProfile(soap, _p);
	}
	return _p;
}

inline struct __ns1__CreateRecurringPaymentsProfile * soap_new_set___ns1__CreateRecurringPaymentsProfile(
	struct soap *soap,
	_ns1__CreateRecurringPaymentsProfileReq *ns1__CreateRecurringPaymentsProfileReq)
{
	struct __ns1__CreateRecurringPaymentsProfile *_p = soap_new___ns1__CreateRecurringPaymentsProfile(soap);
	if (_p)
	{	soap_default___ns1__CreateRecurringPaymentsProfile(soap, _p);
		_p->ns1__CreateRecurringPaymentsProfileReq = ns1__CreateRecurringPaymentsProfileReq;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__CreateRecurringPaymentsProfile(struct soap*, const struct __ns1__CreateRecurringPaymentsProfile *, const char*, const char*);

inline int soap_write___ns1__CreateRecurringPaymentsProfile(struct soap *soap, struct __ns1__CreateRecurringPaymentsProfile const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__CreateRecurringPaymentsProfile(soap, p), 0) || soap_put___ns1__CreateRecurringPaymentsProfile(soap, p, "-ns1:CreateRecurringPaymentsProfile", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__CreateRecurringPaymentsProfile(struct soap *soap, const char *URL, struct __ns1__CreateRecurringPaymentsProfile const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__CreateRecurringPaymentsProfile(soap, p), 0) || soap_put___ns1__CreateRecurringPaymentsProfile(soap, p, "-ns1:CreateRecurringPaymentsProfile", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__CreateRecurringPaymentsProfile(struct soap *soap, const char *URL, struct __ns1__CreateRecurringPaymentsProfile const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__CreateRecurringPaymentsProfile(soap, p), 0) || soap_put___ns1__CreateRecurringPaymentsProfile(soap, p, "-ns1:CreateRecurringPaymentsProfile", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__CreateRecurringPaymentsProfile * SOAP_FMAC4 soap_get___ns1__CreateRecurringPaymentsProfile(struct soap*, struct __ns1__CreateRecurringPaymentsProfile *, const char*, const char*);

inline int soap_read___ns1__CreateRecurringPaymentsProfile(struct soap *soap, struct __ns1__CreateRecurringPaymentsProfile *p)
{
	if (p)
	{	soap_default___ns1__CreateRecurringPaymentsProfile(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__CreateRecurringPaymentsProfile(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__CreateRecurringPaymentsProfile(struct soap *soap, const char *URL, struct __ns1__CreateRecurringPaymentsProfile *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__CreateRecurringPaymentsProfile(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__CreateRecurringPaymentsProfile(struct soap *soap, struct __ns1__CreateRecurringPaymentsProfile *p)
{
	if (soap_read___ns1__CreateRecurringPaymentsProfile(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__DoReferenceTransaction_DEFINED
#define SOAP_TYPE___ns1__DoReferenceTransaction_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__DoReferenceTransaction(struct soap*, struct __ns1__DoReferenceTransaction *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__DoReferenceTransaction(struct soap*, const struct __ns1__DoReferenceTransaction *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__DoReferenceTransaction(struct soap*, const char*, int, const struct __ns1__DoReferenceTransaction *, const char*);
SOAP_FMAC3 struct __ns1__DoReferenceTransaction * SOAP_FMAC4 soap_in___ns1__DoReferenceTransaction(struct soap*, const char*, struct __ns1__DoReferenceTransaction *, const char*);
SOAP_FMAC1 struct __ns1__DoReferenceTransaction * SOAP_FMAC2 soap_instantiate___ns1__DoReferenceTransaction(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__DoReferenceTransaction * soap_new___ns1__DoReferenceTransaction(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__DoReferenceTransaction(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__DoReferenceTransaction * soap_new_req___ns1__DoReferenceTransaction(
	struct soap *soap)
{
	struct __ns1__DoReferenceTransaction *_p = soap_new___ns1__DoReferenceTransaction(soap);
	if (_p)
	{	soap_default___ns1__DoReferenceTransaction(soap, _p);
	}
	return _p;
}

inline struct __ns1__DoReferenceTransaction * soap_new_set___ns1__DoReferenceTransaction(
	struct soap *soap,
	_ns1__DoReferenceTransactionReq *ns1__DoReferenceTransactionReq)
{
	struct __ns1__DoReferenceTransaction *_p = soap_new___ns1__DoReferenceTransaction(soap);
	if (_p)
	{	soap_default___ns1__DoReferenceTransaction(soap, _p);
		_p->ns1__DoReferenceTransactionReq = ns1__DoReferenceTransactionReq;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__DoReferenceTransaction(struct soap*, const struct __ns1__DoReferenceTransaction *, const char*, const char*);

inline int soap_write___ns1__DoReferenceTransaction(struct soap *soap, struct __ns1__DoReferenceTransaction const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__DoReferenceTransaction(soap, p), 0) || soap_put___ns1__DoReferenceTransaction(soap, p, "-ns1:DoReferenceTransaction", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__DoReferenceTransaction(struct soap *soap, const char *URL, struct __ns1__DoReferenceTransaction const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__DoReferenceTransaction(soap, p), 0) || soap_put___ns1__DoReferenceTransaction(soap, p, "-ns1:DoReferenceTransaction", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__DoReferenceTransaction(struct soap *soap, const char *URL, struct __ns1__DoReferenceTransaction const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__DoReferenceTransaction(soap, p), 0) || soap_put___ns1__DoReferenceTransaction(soap, p, "-ns1:DoReferenceTransaction", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__DoReferenceTransaction * SOAP_FMAC4 soap_get___ns1__DoReferenceTransaction(struct soap*, struct __ns1__DoReferenceTransaction *, const char*, const char*);

inline int soap_read___ns1__DoReferenceTransaction(struct soap *soap, struct __ns1__DoReferenceTransaction *p)
{
	if (p)
	{	soap_default___ns1__DoReferenceTransaction(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__DoReferenceTransaction(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__DoReferenceTransaction(struct soap *soap, const char *URL, struct __ns1__DoReferenceTransaction *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__DoReferenceTransaction(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__DoReferenceTransaction(struct soap *soap, struct __ns1__DoReferenceTransaction *p)
{
	if (soap_read___ns1__DoReferenceTransaction(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__CreateBillingAgreement_DEFINED
#define SOAP_TYPE___ns1__CreateBillingAgreement_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__CreateBillingAgreement(struct soap*, struct __ns1__CreateBillingAgreement *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__CreateBillingAgreement(struct soap*, const struct __ns1__CreateBillingAgreement *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__CreateBillingAgreement(struct soap*, const char*, int, const struct __ns1__CreateBillingAgreement *, const char*);
SOAP_FMAC3 struct __ns1__CreateBillingAgreement * SOAP_FMAC4 soap_in___ns1__CreateBillingAgreement(struct soap*, const char*, struct __ns1__CreateBillingAgreement *, const char*);
SOAP_FMAC1 struct __ns1__CreateBillingAgreement * SOAP_FMAC2 soap_instantiate___ns1__CreateBillingAgreement(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__CreateBillingAgreement * soap_new___ns1__CreateBillingAgreement(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__CreateBillingAgreement(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__CreateBillingAgreement * soap_new_req___ns1__CreateBillingAgreement(
	struct soap *soap)
{
	struct __ns1__CreateBillingAgreement *_p = soap_new___ns1__CreateBillingAgreement(soap);
	if (_p)
	{	soap_default___ns1__CreateBillingAgreement(soap, _p);
	}
	return _p;
}

inline struct __ns1__CreateBillingAgreement * soap_new_set___ns1__CreateBillingAgreement(
	struct soap *soap,
	_ns1__CreateBillingAgreementReq *ns1__CreateBillingAgreementReq)
{
	struct __ns1__CreateBillingAgreement *_p = soap_new___ns1__CreateBillingAgreement(soap);
	if (_p)
	{	soap_default___ns1__CreateBillingAgreement(soap, _p);
		_p->ns1__CreateBillingAgreementReq = ns1__CreateBillingAgreementReq;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__CreateBillingAgreement(struct soap*, const struct __ns1__CreateBillingAgreement *, const char*, const char*);

inline int soap_write___ns1__CreateBillingAgreement(struct soap *soap, struct __ns1__CreateBillingAgreement const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__CreateBillingAgreement(soap, p), 0) || soap_put___ns1__CreateBillingAgreement(soap, p, "-ns1:CreateBillingAgreement", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__CreateBillingAgreement(struct soap *soap, const char *URL, struct __ns1__CreateBillingAgreement const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__CreateBillingAgreement(soap, p), 0) || soap_put___ns1__CreateBillingAgreement(soap, p, "-ns1:CreateBillingAgreement", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__CreateBillingAgreement(struct soap *soap, const char *URL, struct __ns1__CreateBillingAgreement const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__CreateBillingAgreement(soap, p), 0) || soap_put___ns1__CreateBillingAgreement(soap, p, "-ns1:CreateBillingAgreement", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__CreateBillingAgreement * SOAP_FMAC4 soap_get___ns1__CreateBillingAgreement(struct soap*, struct __ns1__CreateBillingAgreement *, const char*, const char*);

inline int soap_read___ns1__CreateBillingAgreement(struct soap *soap, struct __ns1__CreateBillingAgreement *p)
{
	if (p)
	{	soap_default___ns1__CreateBillingAgreement(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__CreateBillingAgreement(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__CreateBillingAgreement(struct soap *soap, const char *URL, struct __ns1__CreateBillingAgreement *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__CreateBillingAgreement(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__CreateBillingAgreement(struct soap *soap, struct __ns1__CreateBillingAgreement *p)
{
	if (soap_read___ns1__CreateBillingAgreement(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__GetBillingAgreementCustomerDetails_DEFINED
#define SOAP_TYPE___ns1__GetBillingAgreementCustomerDetails_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetBillingAgreementCustomerDetails(struct soap*, struct __ns1__GetBillingAgreementCustomerDetails *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetBillingAgreementCustomerDetails(struct soap*, const struct __ns1__GetBillingAgreementCustomerDetails *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetBillingAgreementCustomerDetails(struct soap*, const char*, int, const struct __ns1__GetBillingAgreementCustomerDetails *, const char*);
SOAP_FMAC3 struct __ns1__GetBillingAgreementCustomerDetails * SOAP_FMAC4 soap_in___ns1__GetBillingAgreementCustomerDetails(struct soap*, const char*, struct __ns1__GetBillingAgreementCustomerDetails *, const char*);
SOAP_FMAC1 struct __ns1__GetBillingAgreementCustomerDetails * SOAP_FMAC2 soap_instantiate___ns1__GetBillingAgreementCustomerDetails(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__GetBillingAgreementCustomerDetails * soap_new___ns1__GetBillingAgreementCustomerDetails(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__GetBillingAgreementCustomerDetails(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__GetBillingAgreementCustomerDetails * soap_new_req___ns1__GetBillingAgreementCustomerDetails(
	struct soap *soap)
{
	struct __ns1__GetBillingAgreementCustomerDetails *_p = soap_new___ns1__GetBillingAgreementCustomerDetails(soap);
	if (_p)
	{	soap_default___ns1__GetBillingAgreementCustomerDetails(soap, _p);
	}
	return _p;
}

inline struct __ns1__GetBillingAgreementCustomerDetails * soap_new_set___ns1__GetBillingAgreementCustomerDetails(
	struct soap *soap,
	_ns1__GetBillingAgreementCustomerDetailsReq *ns1__GetBillingAgreementCustomerDetailsReq)
{
	struct __ns1__GetBillingAgreementCustomerDetails *_p = soap_new___ns1__GetBillingAgreementCustomerDetails(soap);
	if (_p)
	{	soap_default___ns1__GetBillingAgreementCustomerDetails(soap, _p);
		_p->ns1__GetBillingAgreementCustomerDetailsReq = ns1__GetBillingAgreementCustomerDetailsReq;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetBillingAgreementCustomerDetails(struct soap*, const struct __ns1__GetBillingAgreementCustomerDetails *, const char*, const char*);

inline int soap_write___ns1__GetBillingAgreementCustomerDetails(struct soap *soap, struct __ns1__GetBillingAgreementCustomerDetails const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__GetBillingAgreementCustomerDetails(soap, p), 0) || soap_put___ns1__GetBillingAgreementCustomerDetails(soap, p, "-ns1:GetBillingAgreementCustomerDetails", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__GetBillingAgreementCustomerDetails(struct soap *soap, const char *URL, struct __ns1__GetBillingAgreementCustomerDetails const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__GetBillingAgreementCustomerDetails(soap, p), 0) || soap_put___ns1__GetBillingAgreementCustomerDetails(soap, p, "-ns1:GetBillingAgreementCustomerDetails", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__GetBillingAgreementCustomerDetails(struct soap *soap, const char *URL, struct __ns1__GetBillingAgreementCustomerDetails const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__GetBillingAgreementCustomerDetails(soap, p), 0) || soap_put___ns1__GetBillingAgreementCustomerDetails(soap, p, "-ns1:GetBillingAgreementCustomerDetails", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__GetBillingAgreementCustomerDetails * SOAP_FMAC4 soap_get___ns1__GetBillingAgreementCustomerDetails(struct soap*, struct __ns1__GetBillingAgreementCustomerDetails *, const char*, const char*);

inline int soap_read___ns1__GetBillingAgreementCustomerDetails(struct soap *soap, struct __ns1__GetBillingAgreementCustomerDetails *p)
{
	if (p)
	{	soap_default___ns1__GetBillingAgreementCustomerDetails(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__GetBillingAgreementCustomerDetails(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__GetBillingAgreementCustomerDetails(struct soap *soap, const char *URL, struct __ns1__GetBillingAgreementCustomerDetails *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__GetBillingAgreementCustomerDetails(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__GetBillingAgreementCustomerDetails(struct soap *soap, struct __ns1__GetBillingAgreementCustomerDetails *p)
{
	if (soap_read___ns1__GetBillingAgreementCustomerDetails(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__SetCustomerBillingAgreement_DEFINED
#define SOAP_TYPE___ns1__SetCustomerBillingAgreement_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__SetCustomerBillingAgreement(struct soap*, struct __ns1__SetCustomerBillingAgreement *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__SetCustomerBillingAgreement(struct soap*, const struct __ns1__SetCustomerBillingAgreement *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__SetCustomerBillingAgreement(struct soap*, const char*, int, const struct __ns1__SetCustomerBillingAgreement *, const char*);
SOAP_FMAC3 struct __ns1__SetCustomerBillingAgreement * SOAP_FMAC4 soap_in___ns1__SetCustomerBillingAgreement(struct soap*, const char*, struct __ns1__SetCustomerBillingAgreement *, const char*);
SOAP_FMAC1 struct __ns1__SetCustomerBillingAgreement * SOAP_FMAC2 soap_instantiate___ns1__SetCustomerBillingAgreement(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__SetCustomerBillingAgreement * soap_new___ns1__SetCustomerBillingAgreement(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__SetCustomerBillingAgreement(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__SetCustomerBillingAgreement * soap_new_req___ns1__SetCustomerBillingAgreement(
	struct soap *soap)
{
	struct __ns1__SetCustomerBillingAgreement *_p = soap_new___ns1__SetCustomerBillingAgreement(soap);
	if (_p)
	{	soap_default___ns1__SetCustomerBillingAgreement(soap, _p);
	}
	return _p;
}

inline struct __ns1__SetCustomerBillingAgreement * soap_new_set___ns1__SetCustomerBillingAgreement(
	struct soap *soap,
	_ns1__SetCustomerBillingAgreementReq *ns1__SetCustomerBillingAgreementReq)
{
	struct __ns1__SetCustomerBillingAgreement *_p = soap_new___ns1__SetCustomerBillingAgreement(soap);
	if (_p)
	{	soap_default___ns1__SetCustomerBillingAgreement(soap, _p);
		_p->ns1__SetCustomerBillingAgreementReq = ns1__SetCustomerBillingAgreementReq;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__SetCustomerBillingAgreement(struct soap*, const struct __ns1__SetCustomerBillingAgreement *, const char*, const char*);

inline int soap_write___ns1__SetCustomerBillingAgreement(struct soap *soap, struct __ns1__SetCustomerBillingAgreement const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__SetCustomerBillingAgreement(soap, p), 0) || soap_put___ns1__SetCustomerBillingAgreement(soap, p, "-ns1:SetCustomerBillingAgreement", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__SetCustomerBillingAgreement(struct soap *soap, const char *URL, struct __ns1__SetCustomerBillingAgreement const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__SetCustomerBillingAgreement(soap, p), 0) || soap_put___ns1__SetCustomerBillingAgreement(soap, p, "-ns1:SetCustomerBillingAgreement", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__SetCustomerBillingAgreement(struct soap *soap, const char *URL, struct __ns1__SetCustomerBillingAgreement const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__SetCustomerBillingAgreement(soap, p), 0) || soap_put___ns1__SetCustomerBillingAgreement(soap, p, "-ns1:SetCustomerBillingAgreement", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__SetCustomerBillingAgreement * SOAP_FMAC4 soap_get___ns1__SetCustomerBillingAgreement(struct soap*, struct __ns1__SetCustomerBillingAgreement *, const char*, const char*);

inline int soap_read___ns1__SetCustomerBillingAgreement(struct soap *soap, struct __ns1__SetCustomerBillingAgreement *p)
{
	if (p)
	{	soap_default___ns1__SetCustomerBillingAgreement(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__SetCustomerBillingAgreement(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__SetCustomerBillingAgreement(struct soap *soap, const char *URL, struct __ns1__SetCustomerBillingAgreement *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__SetCustomerBillingAgreement(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__SetCustomerBillingAgreement(struct soap *soap, struct __ns1__SetCustomerBillingAgreement *p)
{
	if (soap_read___ns1__SetCustomerBillingAgreement(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__DoUATPAuthorization_DEFINED
#define SOAP_TYPE___ns1__DoUATPAuthorization_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__DoUATPAuthorization(struct soap*, struct __ns1__DoUATPAuthorization *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__DoUATPAuthorization(struct soap*, const struct __ns1__DoUATPAuthorization *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__DoUATPAuthorization(struct soap*, const char*, int, const struct __ns1__DoUATPAuthorization *, const char*);
SOAP_FMAC3 struct __ns1__DoUATPAuthorization * SOAP_FMAC4 soap_in___ns1__DoUATPAuthorization(struct soap*, const char*, struct __ns1__DoUATPAuthorization *, const char*);
SOAP_FMAC1 struct __ns1__DoUATPAuthorization * SOAP_FMAC2 soap_instantiate___ns1__DoUATPAuthorization(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__DoUATPAuthorization * soap_new___ns1__DoUATPAuthorization(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__DoUATPAuthorization(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__DoUATPAuthorization * soap_new_req___ns1__DoUATPAuthorization(
	struct soap *soap)
{
	struct __ns1__DoUATPAuthorization *_p = soap_new___ns1__DoUATPAuthorization(soap);
	if (_p)
	{	soap_default___ns1__DoUATPAuthorization(soap, _p);
	}
	return _p;
}

inline struct __ns1__DoUATPAuthorization * soap_new_set___ns1__DoUATPAuthorization(
	struct soap *soap,
	_ns1__DoUATPAuthorizationReq *ns1__DoUATPAuthorizationReq)
{
	struct __ns1__DoUATPAuthorization *_p = soap_new___ns1__DoUATPAuthorization(soap);
	if (_p)
	{	soap_default___ns1__DoUATPAuthorization(soap, _p);
		_p->ns1__DoUATPAuthorizationReq = ns1__DoUATPAuthorizationReq;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__DoUATPAuthorization(struct soap*, const struct __ns1__DoUATPAuthorization *, const char*, const char*);

inline int soap_write___ns1__DoUATPAuthorization(struct soap *soap, struct __ns1__DoUATPAuthorization const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__DoUATPAuthorization(soap, p), 0) || soap_put___ns1__DoUATPAuthorization(soap, p, "-ns1:DoUATPAuthorization", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__DoUATPAuthorization(struct soap *soap, const char *URL, struct __ns1__DoUATPAuthorization const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__DoUATPAuthorization(soap, p), 0) || soap_put___ns1__DoUATPAuthorization(soap, p, "-ns1:DoUATPAuthorization", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__DoUATPAuthorization(struct soap *soap, const char *URL, struct __ns1__DoUATPAuthorization const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__DoUATPAuthorization(soap, p), 0) || soap_put___ns1__DoUATPAuthorization(soap, p, "-ns1:DoUATPAuthorization", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__DoUATPAuthorization * SOAP_FMAC4 soap_get___ns1__DoUATPAuthorization(struct soap*, struct __ns1__DoUATPAuthorization *, const char*, const char*);

inline int soap_read___ns1__DoUATPAuthorization(struct soap *soap, struct __ns1__DoUATPAuthorization *p)
{
	if (p)
	{	soap_default___ns1__DoUATPAuthorization(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__DoUATPAuthorization(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__DoUATPAuthorization(struct soap *soap, const char *URL, struct __ns1__DoUATPAuthorization *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__DoUATPAuthorization(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__DoUATPAuthorization(struct soap *soap, struct __ns1__DoUATPAuthorization *p)
{
	if (soap_read___ns1__DoUATPAuthorization(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__UpdateAuthorization_DEFINED
#define SOAP_TYPE___ns1__UpdateAuthorization_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__UpdateAuthorization(struct soap*, struct __ns1__UpdateAuthorization *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__UpdateAuthorization(struct soap*, const struct __ns1__UpdateAuthorization *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__UpdateAuthorization(struct soap*, const char*, int, const struct __ns1__UpdateAuthorization *, const char*);
SOAP_FMAC3 struct __ns1__UpdateAuthorization * SOAP_FMAC4 soap_in___ns1__UpdateAuthorization(struct soap*, const char*, struct __ns1__UpdateAuthorization *, const char*);
SOAP_FMAC1 struct __ns1__UpdateAuthorization * SOAP_FMAC2 soap_instantiate___ns1__UpdateAuthorization(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__UpdateAuthorization * soap_new___ns1__UpdateAuthorization(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__UpdateAuthorization(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__UpdateAuthorization * soap_new_req___ns1__UpdateAuthorization(
	struct soap *soap)
{
	struct __ns1__UpdateAuthorization *_p = soap_new___ns1__UpdateAuthorization(soap);
	if (_p)
	{	soap_default___ns1__UpdateAuthorization(soap, _p);
	}
	return _p;
}

inline struct __ns1__UpdateAuthorization * soap_new_set___ns1__UpdateAuthorization(
	struct soap *soap,
	_ns1__UpdateAuthorizationReq *ns1__UpdateAuthorizationReq)
{
	struct __ns1__UpdateAuthorization *_p = soap_new___ns1__UpdateAuthorization(soap);
	if (_p)
	{	soap_default___ns1__UpdateAuthorization(soap, _p);
		_p->ns1__UpdateAuthorizationReq = ns1__UpdateAuthorizationReq;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__UpdateAuthorization(struct soap*, const struct __ns1__UpdateAuthorization *, const char*, const char*);

inline int soap_write___ns1__UpdateAuthorization(struct soap *soap, struct __ns1__UpdateAuthorization const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__UpdateAuthorization(soap, p), 0) || soap_put___ns1__UpdateAuthorization(soap, p, "-ns1:UpdateAuthorization", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__UpdateAuthorization(struct soap *soap, const char *URL, struct __ns1__UpdateAuthorization const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__UpdateAuthorization(soap, p), 0) || soap_put___ns1__UpdateAuthorization(soap, p, "-ns1:UpdateAuthorization", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__UpdateAuthorization(struct soap *soap, const char *URL, struct __ns1__UpdateAuthorization const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__UpdateAuthorization(soap, p), 0) || soap_put___ns1__UpdateAuthorization(soap, p, "-ns1:UpdateAuthorization", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__UpdateAuthorization * SOAP_FMAC4 soap_get___ns1__UpdateAuthorization(struct soap*, struct __ns1__UpdateAuthorization *, const char*, const char*);

inline int soap_read___ns1__UpdateAuthorization(struct soap *soap, struct __ns1__UpdateAuthorization *p)
{
	if (p)
	{	soap_default___ns1__UpdateAuthorization(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__UpdateAuthorization(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__UpdateAuthorization(struct soap *soap, const char *URL, struct __ns1__UpdateAuthorization *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__UpdateAuthorization(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__UpdateAuthorization(struct soap *soap, struct __ns1__UpdateAuthorization *p)
{
	if (soap_read___ns1__UpdateAuthorization(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__DoAuthorization_DEFINED
#define SOAP_TYPE___ns1__DoAuthorization_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__DoAuthorization(struct soap*, struct __ns1__DoAuthorization *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__DoAuthorization(struct soap*, const struct __ns1__DoAuthorization *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__DoAuthorization(struct soap*, const char*, int, const struct __ns1__DoAuthorization *, const char*);
SOAP_FMAC3 struct __ns1__DoAuthorization * SOAP_FMAC4 soap_in___ns1__DoAuthorization(struct soap*, const char*, struct __ns1__DoAuthorization *, const char*);
SOAP_FMAC1 struct __ns1__DoAuthorization * SOAP_FMAC2 soap_instantiate___ns1__DoAuthorization(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__DoAuthorization * soap_new___ns1__DoAuthorization(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__DoAuthorization(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__DoAuthorization * soap_new_req___ns1__DoAuthorization(
	struct soap *soap)
{
	struct __ns1__DoAuthorization *_p = soap_new___ns1__DoAuthorization(soap);
	if (_p)
	{	soap_default___ns1__DoAuthorization(soap, _p);
	}
	return _p;
}

inline struct __ns1__DoAuthorization * soap_new_set___ns1__DoAuthorization(
	struct soap *soap,
	_ns1__DoAuthorizationReq *ns1__DoAuthorizationReq)
{
	struct __ns1__DoAuthorization *_p = soap_new___ns1__DoAuthorization(soap);
	if (_p)
	{	soap_default___ns1__DoAuthorization(soap, _p);
		_p->ns1__DoAuthorizationReq = ns1__DoAuthorizationReq;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__DoAuthorization(struct soap*, const struct __ns1__DoAuthorization *, const char*, const char*);

inline int soap_write___ns1__DoAuthorization(struct soap *soap, struct __ns1__DoAuthorization const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__DoAuthorization(soap, p), 0) || soap_put___ns1__DoAuthorization(soap, p, "-ns1:DoAuthorization", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__DoAuthorization(struct soap *soap, const char *URL, struct __ns1__DoAuthorization const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__DoAuthorization(soap, p), 0) || soap_put___ns1__DoAuthorization(soap, p, "-ns1:DoAuthorization", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__DoAuthorization(struct soap *soap, const char *URL, struct __ns1__DoAuthorization const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__DoAuthorization(soap, p), 0) || soap_put___ns1__DoAuthorization(soap, p, "-ns1:DoAuthorization", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__DoAuthorization * SOAP_FMAC4 soap_get___ns1__DoAuthorization(struct soap*, struct __ns1__DoAuthorization *, const char*, const char*);

inline int soap_read___ns1__DoAuthorization(struct soap *soap, struct __ns1__DoAuthorization *p)
{
	if (p)
	{	soap_default___ns1__DoAuthorization(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__DoAuthorization(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__DoAuthorization(struct soap *soap, const char *URL, struct __ns1__DoAuthorization *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__DoAuthorization(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__DoAuthorization(struct soap *soap, struct __ns1__DoAuthorization *p)
{
	if (soap_read___ns1__DoAuthorization(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__DoVoid_DEFINED
#define SOAP_TYPE___ns1__DoVoid_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__DoVoid(struct soap*, struct __ns1__DoVoid *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__DoVoid(struct soap*, const struct __ns1__DoVoid *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__DoVoid(struct soap*, const char*, int, const struct __ns1__DoVoid *, const char*);
SOAP_FMAC3 struct __ns1__DoVoid * SOAP_FMAC4 soap_in___ns1__DoVoid(struct soap*, const char*, struct __ns1__DoVoid *, const char*);
SOAP_FMAC1 struct __ns1__DoVoid * SOAP_FMAC2 soap_instantiate___ns1__DoVoid(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__DoVoid * soap_new___ns1__DoVoid(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__DoVoid(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__DoVoid * soap_new_req___ns1__DoVoid(
	struct soap *soap)
{
	struct __ns1__DoVoid *_p = soap_new___ns1__DoVoid(soap);
	if (_p)
	{	soap_default___ns1__DoVoid(soap, _p);
	}
	return _p;
}

inline struct __ns1__DoVoid * soap_new_set___ns1__DoVoid(
	struct soap *soap,
	_ns1__DoVoidReq *ns1__DoVoidReq)
{
	struct __ns1__DoVoid *_p = soap_new___ns1__DoVoid(soap);
	if (_p)
	{	soap_default___ns1__DoVoid(soap, _p);
		_p->ns1__DoVoidReq = ns1__DoVoidReq;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__DoVoid(struct soap*, const struct __ns1__DoVoid *, const char*, const char*);

inline int soap_write___ns1__DoVoid(struct soap *soap, struct __ns1__DoVoid const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__DoVoid(soap, p), 0) || soap_put___ns1__DoVoid(soap, p, "-ns1:DoVoid", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__DoVoid(struct soap *soap, const char *URL, struct __ns1__DoVoid const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__DoVoid(soap, p), 0) || soap_put___ns1__DoVoid(soap, p, "-ns1:DoVoid", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__DoVoid(struct soap *soap, const char *URL, struct __ns1__DoVoid const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__DoVoid(soap, p), 0) || soap_put___ns1__DoVoid(soap, p, "-ns1:DoVoid", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__DoVoid * SOAP_FMAC4 soap_get___ns1__DoVoid(struct soap*, struct __ns1__DoVoid *, const char*, const char*);

inline int soap_read___ns1__DoVoid(struct soap *soap, struct __ns1__DoVoid *p)
{
	if (p)
	{	soap_default___ns1__DoVoid(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__DoVoid(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__DoVoid(struct soap *soap, const char *URL, struct __ns1__DoVoid *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__DoVoid(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__DoVoid(struct soap *soap, struct __ns1__DoVoid *p)
{
	if (soap_read___ns1__DoVoid(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__DoReauthorization_DEFINED
#define SOAP_TYPE___ns1__DoReauthorization_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__DoReauthorization(struct soap*, struct __ns1__DoReauthorization *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__DoReauthorization(struct soap*, const struct __ns1__DoReauthorization *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__DoReauthorization(struct soap*, const char*, int, const struct __ns1__DoReauthorization *, const char*);
SOAP_FMAC3 struct __ns1__DoReauthorization * SOAP_FMAC4 soap_in___ns1__DoReauthorization(struct soap*, const char*, struct __ns1__DoReauthorization *, const char*);
SOAP_FMAC1 struct __ns1__DoReauthorization * SOAP_FMAC2 soap_instantiate___ns1__DoReauthorization(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__DoReauthorization * soap_new___ns1__DoReauthorization(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__DoReauthorization(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__DoReauthorization * soap_new_req___ns1__DoReauthorization(
	struct soap *soap)
{
	struct __ns1__DoReauthorization *_p = soap_new___ns1__DoReauthorization(soap);
	if (_p)
	{	soap_default___ns1__DoReauthorization(soap, _p);
	}
	return _p;
}

inline struct __ns1__DoReauthorization * soap_new_set___ns1__DoReauthorization(
	struct soap *soap,
	_ns1__DoReauthorizationReq *ns1__DoReauthorizationReq)
{
	struct __ns1__DoReauthorization *_p = soap_new___ns1__DoReauthorization(soap);
	if (_p)
	{	soap_default___ns1__DoReauthorization(soap, _p);
		_p->ns1__DoReauthorizationReq = ns1__DoReauthorizationReq;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__DoReauthorization(struct soap*, const struct __ns1__DoReauthorization *, const char*, const char*);

inline int soap_write___ns1__DoReauthorization(struct soap *soap, struct __ns1__DoReauthorization const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__DoReauthorization(soap, p), 0) || soap_put___ns1__DoReauthorization(soap, p, "-ns1:DoReauthorization", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__DoReauthorization(struct soap *soap, const char *URL, struct __ns1__DoReauthorization const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__DoReauthorization(soap, p), 0) || soap_put___ns1__DoReauthorization(soap, p, "-ns1:DoReauthorization", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__DoReauthorization(struct soap *soap, const char *URL, struct __ns1__DoReauthorization const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__DoReauthorization(soap, p), 0) || soap_put___ns1__DoReauthorization(soap, p, "-ns1:DoReauthorization", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__DoReauthorization * SOAP_FMAC4 soap_get___ns1__DoReauthorization(struct soap*, struct __ns1__DoReauthorization *, const char*, const char*);

inline int soap_read___ns1__DoReauthorization(struct soap *soap, struct __ns1__DoReauthorization *p)
{
	if (p)
	{	soap_default___ns1__DoReauthorization(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__DoReauthorization(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__DoReauthorization(struct soap *soap, const char *URL, struct __ns1__DoReauthorization *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__DoReauthorization(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__DoReauthorization(struct soap *soap, struct __ns1__DoReauthorization *p)
{
	if (soap_read___ns1__DoReauthorization(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__DoCapture_DEFINED
#define SOAP_TYPE___ns1__DoCapture_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__DoCapture(struct soap*, struct __ns1__DoCapture *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__DoCapture(struct soap*, const struct __ns1__DoCapture *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__DoCapture(struct soap*, const char*, int, const struct __ns1__DoCapture *, const char*);
SOAP_FMAC3 struct __ns1__DoCapture * SOAP_FMAC4 soap_in___ns1__DoCapture(struct soap*, const char*, struct __ns1__DoCapture *, const char*);
SOAP_FMAC1 struct __ns1__DoCapture * SOAP_FMAC2 soap_instantiate___ns1__DoCapture(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__DoCapture * soap_new___ns1__DoCapture(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__DoCapture(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__DoCapture * soap_new_req___ns1__DoCapture(
	struct soap *soap)
{
	struct __ns1__DoCapture *_p = soap_new___ns1__DoCapture(soap);
	if (_p)
	{	soap_default___ns1__DoCapture(soap, _p);
	}
	return _p;
}

inline struct __ns1__DoCapture * soap_new_set___ns1__DoCapture(
	struct soap *soap,
	_ns1__DoCaptureReq *ns1__DoCaptureReq)
{
	struct __ns1__DoCapture *_p = soap_new___ns1__DoCapture(soap);
	if (_p)
	{	soap_default___ns1__DoCapture(soap, _p);
		_p->ns1__DoCaptureReq = ns1__DoCaptureReq;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__DoCapture(struct soap*, const struct __ns1__DoCapture *, const char*, const char*);

inline int soap_write___ns1__DoCapture(struct soap *soap, struct __ns1__DoCapture const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__DoCapture(soap, p), 0) || soap_put___ns1__DoCapture(soap, p, "-ns1:DoCapture", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__DoCapture(struct soap *soap, const char *URL, struct __ns1__DoCapture const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__DoCapture(soap, p), 0) || soap_put___ns1__DoCapture(soap, p, "-ns1:DoCapture", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__DoCapture(struct soap *soap, const char *URL, struct __ns1__DoCapture const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__DoCapture(soap, p), 0) || soap_put___ns1__DoCapture(soap, p, "-ns1:DoCapture", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__DoCapture * SOAP_FMAC4 soap_get___ns1__DoCapture(struct soap*, struct __ns1__DoCapture *, const char*, const char*);

inline int soap_read___ns1__DoCapture(struct soap *soap, struct __ns1__DoCapture *p)
{
	if (p)
	{	soap_default___ns1__DoCapture(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__DoCapture(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__DoCapture(struct soap *soap, const char *URL, struct __ns1__DoCapture *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__DoCapture(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__DoCapture(struct soap *soap, struct __ns1__DoCapture *p)
{
	if (soap_read___ns1__DoCapture(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__DoCancel_DEFINED
#define SOAP_TYPE___ns1__DoCancel_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__DoCancel(struct soap*, struct __ns1__DoCancel *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__DoCancel(struct soap*, const struct __ns1__DoCancel *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__DoCancel(struct soap*, const char*, int, const struct __ns1__DoCancel *, const char*);
SOAP_FMAC3 struct __ns1__DoCancel * SOAP_FMAC4 soap_in___ns1__DoCancel(struct soap*, const char*, struct __ns1__DoCancel *, const char*);
SOAP_FMAC1 struct __ns1__DoCancel * SOAP_FMAC2 soap_instantiate___ns1__DoCancel(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__DoCancel * soap_new___ns1__DoCancel(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__DoCancel(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__DoCancel * soap_new_req___ns1__DoCancel(
	struct soap *soap)
{
	struct __ns1__DoCancel *_p = soap_new___ns1__DoCancel(soap);
	if (_p)
	{	soap_default___ns1__DoCancel(soap, _p);
	}
	return _p;
}

inline struct __ns1__DoCancel * soap_new_set___ns1__DoCancel(
	struct soap *soap,
	_ns1__DoCancelReq *ns1__DoCancelReq)
{
	struct __ns1__DoCancel *_p = soap_new___ns1__DoCancel(soap);
	if (_p)
	{	soap_default___ns1__DoCancel(soap, _p);
		_p->ns1__DoCancelReq = ns1__DoCancelReq;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__DoCancel(struct soap*, const struct __ns1__DoCancel *, const char*, const char*);

inline int soap_write___ns1__DoCancel(struct soap *soap, struct __ns1__DoCancel const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__DoCancel(soap, p), 0) || soap_put___ns1__DoCancel(soap, p, "-ns1:DoCancel", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__DoCancel(struct soap *soap, const char *URL, struct __ns1__DoCancel const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__DoCancel(soap, p), 0) || soap_put___ns1__DoCancel(soap, p, "-ns1:DoCancel", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__DoCancel(struct soap *soap, const char *URL, struct __ns1__DoCancel const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__DoCancel(soap, p), 0) || soap_put___ns1__DoCancel(soap, p, "-ns1:DoCancel", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__DoCancel * SOAP_FMAC4 soap_get___ns1__DoCancel(struct soap*, struct __ns1__DoCancel *, const char*, const char*);

inline int soap_read___ns1__DoCancel(struct soap *soap, struct __ns1__DoCancel *p)
{
	if (p)
	{	soap_default___ns1__DoCancel(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__DoCancel(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__DoCancel(struct soap *soap, const char *URL, struct __ns1__DoCancel *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__DoCancel(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__DoCancel(struct soap *soap, struct __ns1__DoCancel *p)
{
	if (soap_read___ns1__DoCancel(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__ManagePendingTransactionStatus_DEFINED
#define SOAP_TYPE___ns1__ManagePendingTransactionStatus_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__ManagePendingTransactionStatus(struct soap*, struct __ns1__ManagePendingTransactionStatus *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__ManagePendingTransactionStatus(struct soap*, const struct __ns1__ManagePendingTransactionStatus *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__ManagePendingTransactionStatus(struct soap*, const char*, int, const struct __ns1__ManagePendingTransactionStatus *, const char*);
SOAP_FMAC3 struct __ns1__ManagePendingTransactionStatus * SOAP_FMAC4 soap_in___ns1__ManagePendingTransactionStatus(struct soap*, const char*, struct __ns1__ManagePendingTransactionStatus *, const char*);
SOAP_FMAC1 struct __ns1__ManagePendingTransactionStatus * SOAP_FMAC2 soap_instantiate___ns1__ManagePendingTransactionStatus(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__ManagePendingTransactionStatus * soap_new___ns1__ManagePendingTransactionStatus(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__ManagePendingTransactionStatus(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__ManagePendingTransactionStatus * soap_new_req___ns1__ManagePendingTransactionStatus(
	struct soap *soap)
{
	struct __ns1__ManagePendingTransactionStatus *_p = soap_new___ns1__ManagePendingTransactionStatus(soap);
	if (_p)
	{	soap_default___ns1__ManagePendingTransactionStatus(soap, _p);
	}
	return _p;
}

inline struct __ns1__ManagePendingTransactionStatus * soap_new_set___ns1__ManagePendingTransactionStatus(
	struct soap *soap,
	_ns1__ManagePendingTransactionStatusReq *ns1__ManagePendingTransactionStatusReq)
{
	struct __ns1__ManagePendingTransactionStatus *_p = soap_new___ns1__ManagePendingTransactionStatus(soap);
	if (_p)
	{	soap_default___ns1__ManagePendingTransactionStatus(soap, _p);
		_p->ns1__ManagePendingTransactionStatusReq = ns1__ManagePendingTransactionStatusReq;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__ManagePendingTransactionStatus(struct soap*, const struct __ns1__ManagePendingTransactionStatus *, const char*, const char*);

inline int soap_write___ns1__ManagePendingTransactionStatus(struct soap *soap, struct __ns1__ManagePendingTransactionStatus const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__ManagePendingTransactionStatus(soap, p), 0) || soap_put___ns1__ManagePendingTransactionStatus(soap, p, "-ns1:ManagePendingTransactionStatus", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__ManagePendingTransactionStatus(struct soap *soap, const char *URL, struct __ns1__ManagePendingTransactionStatus const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__ManagePendingTransactionStatus(soap, p), 0) || soap_put___ns1__ManagePendingTransactionStatus(soap, p, "-ns1:ManagePendingTransactionStatus", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__ManagePendingTransactionStatus(struct soap *soap, const char *URL, struct __ns1__ManagePendingTransactionStatus const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__ManagePendingTransactionStatus(soap, p), 0) || soap_put___ns1__ManagePendingTransactionStatus(soap, p, "-ns1:ManagePendingTransactionStatus", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__ManagePendingTransactionStatus * SOAP_FMAC4 soap_get___ns1__ManagePendingTransactionStatus(struct soap*, struct __ns1__ManagePendingTransactionStatus *, const char*, const char*);

inline int soap_read___ns1__ManagePendingTransactionStatus(struct soap *soap, struct __ns1__ManagePendingTransactionStatus *p)
{
	if (p)
	{	soap_default___ns1__ManagePendingTransactionStatus(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__ManagePendingTransactionStatus(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__ManagePendingTransactionStatus(struct soap *soap, const char *URL, struct __ns1__ManagePendingTransactionStatus *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__ManagePendingTransactionStatus(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__ManagePendingTransactionStatus(struct soap *soap, struct __ns1__ManagePendingTransactionStatus *p)
{
	if (soap_read___ns1__ManagePendingTransactionStatus(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__DoDirectPayment_DEFINED
#define SOAP_TYPE___ns1__DoDirectPayment_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__DoDirectPayment(struct soap*, struct __ns1__DoDirectPayment *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__DoDirectPayment(struct soap*, const struct __ns1__DoDirectPayment *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__DoDirectPayment(struct soap*, const char*, int, const struct __ns1__DoDirectPayment *, const char*);
SOAP_FMAC3 struct __ns1__DoDirectPayment * SOAP_FMAC4 soap_in___ns1__DoDirectPayment(struct soap*, const char*, struct __ns1__DoDirectPayment *, const char*);
SOAP_FMAC1 struct __ns1__DoDirectPayment * SOAP_FMAC2 soap_instantiate___ns1__DoDirectPayment(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__DoDirectPayment * soap_new___ns1__DoDirectPayment(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__DoDirectPayment(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__DoDirectPayment * soap_new_req___ns1__DoDirectPayment(
	struct soap *soap)
{
	struct __ns1__DoDirectPayment *_p = soap_new___ns1__DoDirectPayment(soap);
	if (_p)
	{	soap_default___ns1__DoDirectPayment(soap, _p);
	}
	return _p;
}

inline struct __ns1__DoDirectPayment * soap_new_set___ns1__DoDirectPayment(
	struct soap *soap,
	_ns1__DoDirectPaymentReq *ns1__DoDirectPaymentReq)
{
	struct __ns1__DoDirectPayment *_p = soap_new___ns1__DoDirectPayment(soap);
	if (_p)
	{	soap_default___ns1__DoDirectPayment(soap, _p);
		_p->ns1__DoDirectPaymentReq = ns1__DoDirectPaymentReq;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__DoDirectPayment(struct soap*, const struct __ns1__DoDirectPayment *, const char*, const char*);

inline int soap_write___ns1__DoDirectPayment(struct soap *soap, struct __ns1__DoDirectPayment const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__DoDirectPayment(soap, p), 0) || soap_put___ns1__DoDirectPayment(soap, p, "-ns1:DoDirectPayment", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__DoDirectPayment(struct soap *soap, const char *URL, struct __ns1__DoDirectPayment const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__DoDirectPayment(soap, p), 0) || soap_put___ns1__DoDirectPayment(soap, p, "-ns1:DoDirectPayment", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__DoDirectPayment(struct soap *soap, const char *URL, struct __ns1__DoDirectPayment const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__DoDirectPayment(soap, p), 0) || soap_put___ns1__DoDirectPayment(soap, p, "-ns1:DoDirectPayment", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__DoDirectPayment * SOAP_FMAC4 soap_get___ns1__DoDirectPayment(struct soap*, struct __ns1__DoDirectPayment *, const char*, const char*);

inline int soap_read___ns1__DoDirectPayment(struct soap *soap, struct __ns1__DoDirectPayment *p)
{
	if (p)
	{	soap_default___ns1__DoDirectPayment(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__DoDirectPayment(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__DoDirectPayment(struct soap *soap, const char *URL, struct __ns1__DoDirectPayment *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__DoDirectPayment(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__DoDirectPayment(struct soap *soap, struct __ns1__DoDirectPayment *p)
{
	if (soap_read___ns1__DoDirectPayment(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__GetExpressCheckoutDetails_DEFINED
#define SOAP_TYPE___ns1__GetExpressCheckoutDetails_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetExpressCheckoutDetails(struct soap*, struct __ns1__GetExpressCheckoutDetails *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetExpressCheckoutDetails(struct soap*, const struct __ns1__GetExpressCheckoutDetails *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetExpressCheckoutDetails(struct soap*, const char*, int, const struct __ns1__GetExpressCheckoutDetails *, const char*);
SOAP_FMAC3 struct __ns1__GetExpressCheckoutDetails * SOAP_FMAC4 soap_in___ns1__GetExpressCheckoutDetails(struct soap*, const char*, struct __ns1__GetExpressCheckoutDetails *, const char*);
SOAP_FMAC1 struct __ns1__GetExpressCheckoutDetails * SOAP_FMAC2 soap_instantiate___ns1__GetExpressCheckoutDetails(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__GetExpressCheckoutDetails * soap_new___ns1__GetExpressCheckoutDetails(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__GetExpressCheckoutDetails(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__GetExpressCheckoutDetails * soap_new_req___ns1__GetExpressCheckoutDetails(
	struct soap *soap)
{
	struct __ns1__GetExpressCheckoutDetails *_p = soap_new___ns1__GetExpressCheckoutDetails(soap);
	if (_p)
	{	soap_default___ns1__GetExpressCheckoutDetails(soap, _p);
	}
	return _p;
}

inline struct __ns1__GetExpressCheckoutDetails * soap_new_set___ns1__GetExpressCheckoutDetails(
	struct soap *soap,
	_ns1__GetExpressCheckoutDetailsReq *ns1__GetExpressCheckoutDetailsReq)
{
	struct __ns1__GetExpressCheckoutDetails *_p = soap_new___ns1__GetExpressCheckoutDetails(soap);
	if (_p)
	{	soap_default___ns1__GetExpressCheckoutDetails(soap, _p);
		_p->ns1__GetExpressCheckoutDetailsReq = ns1__GetExpressCheckoutDetailsReq;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetExpressCheckoutDetails(struct soap*, const struct __ns1__GetExpressCheckoutDetails *, const char*, const char*);

inline int soap_write___ns1__GetExpressCheckoutDetails(struct soap *soap, struct __ns1__GetExpressCheckoutDetails const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__GetExpressCheckoutDetails(soap, p), 0) || soap_put___ns1__GetExpressCheckoutDetails(soap, p, "-ns1:GetExpressCheckoutDetails", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__GetExpressCheckoutDetails(struct soap *soap, const char *URL, struct __ns1__GetExpressCheckoutDetails const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__GetExpressCheckoutDetails(soap, p), 0) || soap_put___ns1__GetExpressCheckoutDetails(soap, p, "-ns1:GetExpressCheckoutDetails", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__GetExpressCheckoutDetails(struct soap *soap, const char *URL, struct __ns1__GetExpressCheckoutDetails const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__GetExpressCheckoutDetails(soap, p), 0) || soap_put___ns1__GetExpressCheckoutDetails(soap, p, "-ns1:GetExpressCheckoutDetails", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__GetExpressCheckoutDetails * SOAP_FMAC4 soap_get___ns1__GetExpressCheckoutDetails(struct soap*, struct __ns1__GetExpressCheckoutDetails *, const char*, const char*);

inline int soap_read___ns1__GetExpressCheckoutDetails(struct soap *soap, struct __ns1__GetExpressCheckoutDetails *p)
{
	if (p)
	{	soap_default___ns1__GetExpressCheckoutDetails(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__GetExpressCheckoutDetails(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__GetExpressCheckoutDetails(struct soap *soap, const char *URL, struct __ns1__GetExpressCheckoutDetails *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__GetExpressCheckoutDetails(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__GetExpressCheckoutDetails(struct soap *soap, struct __ns1__GetExpressCheckoutDetails *p)
{
	if (soap_read___ns1__GetExpressCheckoutDetails(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__ExecuteCheckoutOperations_DEFINED
#define SOAP_TYPE___ns1__ExecuteCheckoutOperations_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__ExecuteCheckoutOperations(struct soap*, struct __ns1__ExecuteCheckoutOperations *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__ExecuteCheckoutOperations(struct soap*, const struct __ns1__ExecuteCheckoutOperations *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__ExecuteCheckoutOperations(struct soap*, const char*, int, const struct __ns1__ExecuteCheckoutOperations *, const char*);
SOAP_FMAC3 struct __ns1__ExecuteCheckoutOperations * SOAP_FMAC4 soap_in___ns1__ExecuteCheckoutOperations(struct soap*, const char*, struct __ns1__ExecuteCheckoutOperations *, const char*);
SOAP_FMAC1 struct __ns1__ExecuteCheckoutOperations * SOAP_FMAC2 soap_instantiate___ns1__ExecuteCheckoutOperations(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__ExecuteCheckoutOperations * soap_new___ns1__ExecuteCheckoutOperations(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__ExecuteCheckoutOperations(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__ExecuteCheckoutOperations * soap_new_req___ns1__ExecuteCheckoutOperations(
	struct soap *soap)
{
	struct __ns1__ExecuteCheckoutOperations *_p = soap_new___ns1__ExecuteCheckoutOperations(soap);
	if (_p)
	{	soap_default___ns1__ExecuteCheckoutOperations(soap, _p);
	}
	return _p;
}

inline struct __ns1__ExecuteCheckoutOperations * soap_new_set___ns1__ExecuteCheckoutOperations(
	struct soap *soap,
	_ns1__ExecuteCheckoutOperationsReq *ns1__ExecuteCheckoutOperationsReq)
{
	struct __ns1__ExecuteCheckoutOperations *_p = soap_new___ns1__ExecuteCheckoutOperations(soap);
	if (_p)
	{	soap_default___ns1__ExecuteCheckoutOperations(soap, _p);
		_p->ns1__ExecuteCheckoutOperationsReq = ns1__ExecuteCheckoutOperationsReq;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__ExecuteCheckoutOperations(struct soap*, const struct __ns1__ExecuteCheckoutOperations *, const char*, const char*);

inline int soap_write___ns1__ExecuteCheckoutOperations(struct soap *soap, struct __ns1__ExecuteCheckoutOperations const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__ExecuteCheckoutOperations(soap, p), 0) || soap_put___ns1__ExecuteCheckoutOperations(soap, p, "-ns1:ExecuteCheckoutOperations", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__ExecuteCheckoutOperations(struct soap *soap, const char *URL, struct __ns1__ExecuteCheckoutOperations const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__ExecuteCheckoutOperations(soap, p), 0) || soap_put___ns1__ExecuteCheckoutOperations(soap, p, "-ns1:ExecuteCheckoutOperations", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__ExecuteCheckoutOperations(struct soap *soap, const char *URL, struct __ns1__ExecuteCheckoutOperations const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__ExecuteCheckoutOperations(soap, p), 0) || soap_put___ns1__ExecuteCheckoutOperations(soap, p, "-ns1:ExecuteCheckoutOperations", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__ExecuteCheckoutOperations * SOAP_FMAC4 soap_get___ns1__ExecuteCheckoutOperations(struct soap*, struct __ns1__ExecuteCheckoutOperations *, const char*, const char*);

inline int soap_read___ns1__ExecuteCheckoutOperations(struct soap *soap, struct __ns1__ExecuteCheckoutOperations *p)
{
	if (p)
	{	soap_default___ns1__ExecuteCheckoutOperations(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__ExecuteCheckoutOperations(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__ExecuteCheckoutOperations(struct soap *soap, const char *URL, struct __ns1__ExecuteCheckoutOperations *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__ExecuteCheckoutOperations(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__ExecuteCheckoutOperations(struct soap *soap, struct __ns1__ExecuteCheckoutOperations *p)
{
	if (soap_read___ns1__ExecuteCheckoutOperations(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__SetExpressCheckout_DEFINED
#define SOAP_TYPE___ns1__SetExpressCheckout_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__SetExpressCheckout(struct soap*, struct __ns1__SetExpressCheckout *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__SetExpressCheckout(struct soap*, const struct __ns1__SetExpressCheckout *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__SetExpressCheckout(struct soap*, const char*, int, const struct __ns1__SetExpressCheckout *, const char*);
SOAP_FMAC3 struct __ns1__SetExpressCheckout * SOAP_FMAC4 soap_in___ns1__SetExpressCheckout(struct soap*, const char*, struct __ns1__SetExpressCheckout *, const char*);
SOAP_FMAC1 struct __ns1__SetExpressCheckout * SOAP_FMAC2 soap_instantiate___ns1__SetExpressCheckout(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__SetExpressCheckout * soap_new___ns1__SetExpressCheckout(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__SetExpressCheckout(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__SetExpressCheckout * soap_new_req___ns1__SetExpressCheckout(
	struct soap *soap)
{
	struct __ns1__SetExpressCheckout *_p = soap_new___ns1__SetExpressCheckout(soap);
	if (_p)
	{	soap_default___ns1__SetExpressCheckout(soap, _p);
	}
	return _p;
}

inline struct __ns1__SetExpressCheckout * soap_new_set___ns1__SetExpressCheckout(
	struct soap *soap,
	_ns1__SetExpressCheckoutReq *ns1__SetExpressCheckoutReq)
{
	struct __ns1__SetExpressCheckout *_p = soap_new___ns1__SetExpressCheckout(soap);
	if (_p)
	{	soap_default___ns1__SetExpressCheckout(soap, _p);
		_p->ns1__SetExpressCheckoutReq = ns1__SetExpressCheckoutReq;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__SetExpressCheckout(struct soap*, const struct __ns1__SetExpressCheckout *, const char*, const char*);

inline int soap_write___ns1__SetExpressCheckout(struct soap *soap, struct __ns1__SetExpressCheckout const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__SetExpressCheckout(soap, p), 0) || soap_put___ns1__SetExpressCheckout(soap, p, "-ns1:SetExpressCheckout", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__SetExpressCheckout(struct soap *soap, const char *URL, struct __ns1__SetExpressCheckout const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__SetExpressCheckout(soap, p), 0) || soap_put___ns1__SetExpressCheckout(soap, p, "-ns1:SetExpressCheckout", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__SetExpressCheckout(struct soap *soap, const char *URL, struct __ns1__SetExpressCheckout const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__SetExpressCheckout(soap, p), 0) || soap_put___ns1__SetExpressCheckout(soap, p, "-ns1:SetExpressCheckout", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__SetExpressCheckout * SOAP_FMAC4 soap_get___ns1__SetExpressCheckout(struct soap*, struct __ns1__SetExpressCheckout *, const char*, const char*);

inline int soap_read___ns1__SetExpressCheckout(struct soap *soap, struct __ns1__SetExpressCheckout *p)
{
	if (p)
	{	soap_default___ns1__SetExpressCheckout(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__SetExpressCheckout(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__SetExpressCheckout(struct soap *soap, const char *URL, struct __ns1__SetExpressCheckout *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__SetExpressCheckout(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__SetExpressCheckout(struct soap *soap, struct __ns1__SetExpressCheckout *p)
{
	if (soap_read___ns1__SetExpressCheckout(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__GetIncentiveEvaluation_DEFINED
#define SOAP_TYPE___ns1__GetIncentiveEvaluation_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetIncentiveEvaluation(struct soap*, struct __ns1__GetIncentiveEvaluation *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetIncentiveEvaluation(struct soap*, const struct __ns1__GetIncentiveEvaluation *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetIncentiveEvaluation(struct soap*, const char*, int, const struct __ns1__GetIncentiveEvaluation *, const char*);
SOAP_FMAC3 struct __ns1__GetIncentiveEvaluation * SOAP_FMAC4 soap_in___ns1__GetIncentiveEvaluation(struct soap*, const char*, struct __ns1__GetIncentiveEvaluation *, const char*);
SOAP_FMAC1 struct __ns1__GetIncentiveEvaluation * SOAP_FMAC2 soap_instantiate___ns1__GetIncentiveEvaluation(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__GetIncentiveEvaluation * soap_new___ns1__GetIncentiveEvaluation(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__GetIncentiveEvaluation(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__GetIncentiveEvaluation * soap_new_req___ns1__GetIncentiveEvaluation(
	struct soap *soap)
{
	struct __ns1__GetIncentiveEvaluation *_p = soap_new___ns1__GetIncentiveEvaluation(soap);
	if (_p)
	{	soap_default___ns1__GetIncentiveEvaluation(soap, _p);
	}
	return _p;
}

inline struct __ns1__GetIncentiveEvaluation * soap_new_set___ns1__GetIncentiveEvaluation(
	struct soap *soap,
	_ns1__GetIncentiveEvaluationReq *ns1__GetIncentiveEvaluationReq)
{
	struct __ns1__GetIncentiveEvaluation *_p = soap_new___ns1__GetIncentiveEvaluation(soap);
	if (_p)
	{	soap_default___ns1__GetIncentiveEvaluation(soap, _p);
		_p->ns1__GetIncentiveEvaluationReq = ns1__GetIncentiveEvaluationReq;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetIncentiveEvaluation(struct soap*, const struct __ns1__GetIncentiveEvaluation *, const char*, const char*);

inline int soap_write___ns1__GetIncentiveEvaluation(struct soap *soap, struct __ns1__GetIncentiveEvaluation const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__GetIncentiveEvaluation(soap, p), 0) || soap_put___ns1__GetIncentiveEvaluation(soap, p, "-ns1:GetIncentiveEvaluation", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__GetIncentiveEvaluation(struct soap *soap, const char *URL, struct __ns1__GetIncentiveEvaluation const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__GetIncentiveEvaluation(soap, p), 0) || soap_put___ns1__GetIncentiveEvaluation(soap, p, "-ns1:GetIncentiveEvaluation", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__GetIncentiveEvaluation(struct soap *soap, const char *URL, struct __ns1__GetIncentiveEvaluation const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__GetIncentiveEvaluation(soap, p), 0) || soap_put___ns1__GetIncentiveEvaluation(soap, p, "-ns1:GetIncentiveEvaluation", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__GetIncentiveEvaluation * SOAP_FMAC4 soap_get___ns1__GetIncentiveEvaluation(struct soap*, struct __ns1__GetIncentiveEvaluation *, const char*, const char*);

inline int soap_read___ns1__GetIncentiveEvaluation(struct soap *soap, struct __ns1__GetIncentiveEvaluation *p)
{
	if (p)
	{	soap_default___ns1__GetIncentiveEvaluation(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__GetIncentiveEvaluation(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__GetIncentiveEvaluation(struct soap *soap, const char *URL, struct __ns1__GetIncentiveEvaluation *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__GetIncentiveEvaluation(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__GetIncentiveEvaluation(struct soap *soap, struct __ns1__GetIncentiveEvaluation *p)
{
	if (soap_read___ns1__GetIncentiveEvaluation(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__GetAccessPermissionDetails_DEFINED
#define SOAP_TYPE___ns1__GetAccessPermissionDetails_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetAccessPermissionDetails(struct soap*, struct __ns1__GetAccessPermissionDetails *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetAccessPermissionDetails(struct soap*, const struct __ns1__GetAccessPermissionDetails *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetAccessPermissionDetails(struct soap*, const char*, int, const struct __ns1__GetAccessPermissionDetails *, const char*);
SOAP_FMAC3 struct __ns1__GetAccessPermissionDetails * SOAP_FMAC4 soap_in___ns1__GetAccessPermissionDetails(struct soap*, const char*, struct __ns1__GetAccessPermissionDetails *, const char*);
SOAP_FMAC1 struct __ns1__GetAccessPermissionDetails * SOAP_FMAC2 soap_instantiate___ns1__GetAccessPermissionDetails(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__GetAccessPermissionDetails * soap_new___ns1__GetAccessPermissionDetails(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__GetAccessPermissionDetails(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__GetAccessPermissionDetails * soap_new_req___ns1__GetAccessPermissionDetails(
	struct soap *soap)
{
	struct __ns1__GetAccessPermissionDetails *_p = soap_new___ns1__GetAccessPermissionDetails(soap);
	if (_p)
	{	soap_default___ns1__GetAccessPermissionDetails(soap, _p);
	}
	return _p;
}

inline struct __ns1__GetAccessPermissionDetails * soap_new_set___ns1__GetAccessPermissionDetails(
	struct soap *soap,
	_ns1__GetAccessPermissionDetailsReq *ns1__GetAccessPermissionDetailsReq)
{
	struct __ns1__GetAccessPermissionDetails *_p = soap_new___ns1__GetAccessPermissionDetails(soap);
	if (_p)
	{	soap_default___ns1__GetAccessPermissionDetails(soap, _p);
		_p->ns1__GetAccessPermissionDetailsReq = ns1__GetAccessPermissionDetailsReq;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetAccessPermissionDetails(struct soap*, const struct __ns1__GetAccessPermissionDetails *, const char*, const char*);

inline int soap_write___ns1__GetAccessPermissionDetails(struct soap *soap, struct __ns1__GetAccessPermissionDetails const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__GetAccessPermissionDetails(soap, p), 0) || soap_put___ns1__GetAccessPermissionDetails(soap, p, "-ns1:GetAccessPermissionDetails", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__GetAccessPermissionDetails(struct soap *soap, const char *URL, struct __ns1__GetAccessPermissionDetails const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__GetAccessPermissionDetails(soap, p), 0) || soap_put___ns1__GetAccessPermissionDetails(soap, p, "-ns1:GetAccessPermissionDetails", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__GetAccessPermissionDetails(struct soap *soap, const char *URL, struct __ns1__GetAccessPermissionDetails const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__GetAccessPermissionDetails(soap, p), 0) || soap_put___ns1__GetAccessPermissionDetails(soap, p, "-ns1:GetAccessPermissionDetails", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__GetAccessPermissionDetails * SOAP_FMAC4 soap_get___ns1__GetAccessPermissionDetails(struct soap*, struct __ns1__GetAccessPermissionDetails *, const char*, const char*);

inline int soap_read___ns1__GetAccessPermissionDetails(struct soap *soap, struct __ns1__GetAccessPermissionDetails *p)
{
	if (p)
	{	soap_default___ns1__GetAccessPermissionDetails(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__GetAccessPermissionDetails(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__GetAccessPermissionDetails(struct soap *soap, const char *URL, struct __ns1__GetAccessPermissionDetails *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__GetAccessPermissionDetails(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__GetAccessPermissionDetails(struct soap *soap, struct __ns1__GetAccessPermissionDetails *p)
{
	if (soap_read___ns1__GetAccessPermissionDetails(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__UpdateAccessPermissions_DEFINED
#define SOAP_TYPE___ns1__UpdateAccessPermissions_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__UpdateAccessPermissions(struct soap*, struct __ns1__UpdateAccessPermissions *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__UpdateAccessPermissions(struct soap*, const struct __ns1__UpdateAccessPermissions *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__UpdateAccessPermissions(struct soap*, const char*, int, const struct __ns1__UpdateAccessPermissions *, const char*);
SOAP_FMAC3 struct __ns1__UpdateAccessPermissions * SOAP_FMAC4 soap_in___ns1__UpdateAccessPermissions(struct soap*, const char*, struct __ns1__UpdateAccessPermissions *, const char*);
SOAP_FMAC1 struct __ns1__UpdateAccessPermissions * SOAP_FMAC2 soap_instantiate___ns1__UpdateAccessPermissions(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__UpdateAccessPermissions * soap_new___ns1__UpdateAccessPermissions(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__UpdateAccessPermissions(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__UpdateAccessPermissions * soap_new_req___ns1__UpdateAccessPermissions(
	struct soap *soap)
{
	struct __ns1__UpdateAccessPermissions *_p = soap_new___ns1__UpdateAccessPermissions(soap);
	if (_p)
	{	soap_default___ns1__UpdateAccessPermissions(soap, _p);
	}
	return _p;
}

inline struct __ns1__UpdateAccessPermissions * soap_new_set___ns1__UpdateAccessPermissions(
	struct soap *soap,
	_ns1__UpdateAccessPermissionsReq *ns1__UpdateAccessPermissionsReq)
{
	struct __ns1__UpdateAccessPermissions *_p = soap_new___ns1__UpdateAccessPermissions(soap);
	if (_p)
	{	soap_default___ns1__UpdateAccessPermissions(soap, _p);
		_p->ns1__UpdateAccessPermissionsReq = ns1__UpdateAccessPermissionsReq;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__UpdateAccessPermissions(struct soap*, const struct __ns1__UpdateAccessPermissions *, const char*, const char*);

inline int soap_write___ns1__UpdateAccessPermissions(struct soap *soap, struct __ns1__UpdateAccessPermissions const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__UpdateAccessPermissions(soap, p), 0) || soap_put___ns1__UpdateAccessPermissions(soap, p, "-ns1:UpdateAccessPermissions", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__UpdateAccessPermissions(struct soap *soap, const char *URL, struct __ns1__UpdateAccessPermissions const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__UpdateAccessPermissions(soap, p), 0) || soap_put___ns1__UpdateAccessPermissions(soap, p, "-ns1:UpdateAccessPermissions", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__UpdateAccessPermissions(struct soap *soap, const char *URL, struct __ns1__UpdateAccessPermissions const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__UpdateAccessPermissions(soap, p), 0) || soap_put___ns1__UpdateAccessPermissions(soap, p, "-ns1:UpdateAccessPermissions", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__UpdateAccessPermissions * SOAP_FMAC4 soap_get___ns1__UpdateAccessPermissions(struct soap*, struct __ns1__UpdateAccessPermissions *, const char*, const char*);

inline int soap_read___ns1__UpdateAccessPermissions(struct soap *soap, struct __ns1__UpdateAccessPermissions *p)
{
	if (p)
	{	soap_default___ns1__UpdateAccessPermissions(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__UpdateAccessPermissions(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__UpdateAccessPermissions(struct soap *soap, const char *URL, struct __ns1__UpdateAccessPermissions *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__UpdateAccessPermissions(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__UpdateAccessPermissions(struct soap *soap, struct __ns1__UpdateAccessPermissions *p)
{
	if (soap_read___ns1__UpdateAccessPermissions(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__SetAccessPermissions_DEFINED
#define SOAP_TYPE___ns1__SetAccessPermissions_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__SetAccessPermissions(struct soap*, struct __ns1__SetAccessPermissions *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__SetAccessPermissions(struct soap*, const struct __ns1__SetAccessPermissions *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__SetAccessPermissions(struct soap*, const char*, int, const struct __ns1__SetAccessPermissions *, const char*);
SOAP_FMAC3 struct __ns1__SetAccessPermissions * SOAP_FMAC4 soap_in___ns1__SetAccessPermissions(struct soap*, const char*, struct __ns1__SetAccessPermissions *, const char*);
SOAP_FMAC1 struct __ns1__SetAccessPermissions * SOAP_FMAC2 soap_instantiate___ns1__SetAccessPermissions(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__SetAccessPermissions * soap_new___ns1__SetAccessPermissions(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__SetAccessPermissions(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__SetAccessPermissions * soap_new_req___ns1__SetAccessPermissions(
	struct soap *soap)
{
	struct __ns1__SetAccessPermissions *_p = soap_new___ns1__SetAccessPermissions(soap);
	if (_p)
	{	soap_default___ns1__SetAccessPermissions(soap, _p);
	}
	return _p;
}

inline struct __ns1__SetAccessPermissions * soap_new_set___ns1__SetAccessPermissions(
	struct soap *soap,
	_ns1__SetAccessPermissionsReq *ns1__SetAccessPermissionsReq)
{
	struct __ns1__SetAccessPermissions *_p = soap_new___ns1__SetAccessPermissions(soap);
	if (_p)
	{	soap_default___ns1__SetAccessPermissions(soap, _p);
		_p->ns1__SetAccessPermissionsReq = ns1__SetAccessPermissionsReq;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__SetAccessPermissions(struct soap*, const struct __ns1__SetAccessPermissions *, const char*, const char*);

inline int soap_write___ns1__SetAccessPermissions(struct soap *soap, struct __ns1__SetAccessPermissions const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__SetAccessPermissions(soap, p), 0) || soap_put___ns1__SetAccessPermissions(soap, p, "-ns1:SetAccessPermissions", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__SetAccessPermissions(struct soap *soap, const char *URL, struct __ns1__SetAccessPermissions const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__SetAccessPermissions(soap, p), 0) || soap_put___ns1__SetAccessPermissions(soap, p, "-ns1:SetAccessPermissions", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__SetAccessPermissions(struct soap *soap, const char *URL, struct __ns1__SetAccessPermissions const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__SetAccessPermissions(soap, p), 0) || soap_put___ns1__SetAccessPermissions(soap, p, "-ns1:SetAccessPermissions", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__SetAccessPermissions * SOAP_FMAC4 soap_get___ns1__SetAccessPermissions(struct soap*, struct __ns1__SetAccessPermissions *, const char*, const char*);

inline int soap_read___ns1__SetAccessPermissions(struct soap *soap, struct __ns1__SetAccessPermissions *p)
{
	if (p)
	{	soap_default___ns1__SetAccessPermissions(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__SetAccessPermissions(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__SetAccessPermissions(struct soap *soap, const char *URL, struct __ns1__SetAccessPermissions *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__SetAccessPermissions(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__SetAccessPermissions(struct soap *soap, struct __ns1__SetAccessPermissions *p)
{
	if (soap_read___ns1__SetAccessPermissions(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__GetAuthDetails_DEFINED
#define SOAP_TYPE___ns1__GetAuthDetails_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetAuthDetails(struct soap*, struct __ns1__GetAuthDetails *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetAuthDetails(struct soap*, const struct __ns1__GetAuthDetails *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetAuthDetails(struct soap*, const char*, int, const struct __ns1__GetAuthDetails *, const char*);
SOAP_FMAC3 struct __ns1__GetAuthDetails * SOAP_FMAC4 soap_in___ns1__GetAuthDetails(struct soap*, const char*, struct __ns1__GetAuthDetails *, const char*);
SOAP_FMAC1 struct __ns1__GetAuthDetails * SOAP_FMAC2 soap_instantiate___ns1__GetAuthDetails(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__GetAuthDetails * soap_new___ns1__GetAuthDetails(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__GetAuthDetails(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__GetAuthDetails * soap_new_req___ns1__GetAuthDetails(
	struct soap *soap)
{
	struct __ns1__GetAuthDetails *_p = soap_new___ns1__GetAuthDetails(soap);
	if (_p)
	{	soap_default___ns1__GetAuthDetails(soap, _p);
	}
	return _p;
}

inline struct __ns1__GetAuthDetails * soap_new_set___ns1__GetAuthDetails(
	struct soap *soap,
	_ns1__GetAuthDetailsReq *ns1__GetAuthDetailsReq)
{
	struct __ns1__GetAuthDetails *_p = soap_new___ns1__GetAuthDetails(soap);
	if (_p)
	{	soap_default___ns1__GetAuthDetails(soap, _p);
		_p->ns1__GetAuthDetailsReq = ns1__GetAuthDetailsReq;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetAuthDetails(struct soap*, const struct __ns1__GetAuthDetails *, const char*, const char*);

inline int soap_write___ns1__GetAuthDetails(struct soap *soap, struct __ns1__GetAuthDetails const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__GetAuthDetails(soap, p), 0) || soap_put___ns1__GetAuthDetails(soap, p, "-ns1:GetAuthDetails", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__GetAuthDetails(struct soap *soap, const char *URL, struct __ns1__GetAuthDetails const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__GetAuthDetails(soap, p), 0) || soap_put___ns1__GetAuthDetails(soap, p, "-ns1:GetAuthDetails", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__GetAuthDetails(struct soap *soap, const char *URL, struct __ns1__GetAuthDetails const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__GetAuthDetails(soap, p), 0) || soap_put___ns1__GetAuthDetails(soap, p, "-ns1:GetAuthDetails", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__GetAuthDetails * SOAP_FMAC4 soap_get___ns1__GetAuthDetails(struct soap*, struct __ns1__GetAuthDetails *, const char*, const char*);

inline int soap_read___ns1__GetAuthDetails(struct soap *soap, struct __ns1__GetAuthDetails *p)
{
	if (p)
	{	soap_default___ns1__GetAuthDetails(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__GetAuthDetails(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__GetAuthDetails(struct soap *soap, const char *URL, struct __ns1__GetAuthDetails *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__GetAuthDetails(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__GetAuthDetails(struct soap *soap, struct __ns1__GetAuthDetails *p)
{
	if (soap_read___ns1__GetAuthDetails(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__SetAuthFlowParam_DEFINED
#define SOAP_TYPE___ns1__SetAuthFlowParam_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__SetAuthFlowParam(struct soap*, struct __ns1__SetAuthFlowParam *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__SetAuthFlowParam(struct soap*, const struct __ns1__SetAuthFlowParam *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__SetAuthFlowParam(struct soap*, const char*, int, const struct __ns1__SetAuthFlowParam *, const char*);
SOAP_FMAC3 struct __ns1__SetAuthFlowParam * SOAP_FMAC4 soap_in___ns1__SetAuthFlowParam(struct soap*, const char*, struct __ns1__SetAuthFlowParam *, const char*);
SOAP_FMAC1 struct __ns1__SetAuthFlowParam * SOAP_FMAC2 soap_instantiate___ns1__SetAuthFlowParam(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__SetAuthFlowParam * soap_new___ns1__SetAuthFlowParam(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__SetAuthFlowParam(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__SetAuthFlowParam * soap_new_req___ns1__SetAuthFlowParam(
	struct soap *soap)
{
	struct __ns1__SetAuthFlowParam *_p = soap_new___ns1__SetAuthFlowParam(soap);
	if (_p)
	{	soap_default___ns1__SetAuthFlowParam(soap, _p);
	}
	return _p;
}

inline struct __ns1__SetAuthFlowParam * soap_new_set___ns1__SetAuthFlowParam(
	struct soap *soap,
	_ns1__SetAuthFlowParamReq *ns1__SetAuthFlowParamReq)
{
	struct __ns1__SetAuthFlowParam *_p = soap_new___ns1__SetAuthFlowParam(soap);
	if (_p)
	{	soap_default___ns1__SetAuthFlowParam(soap, _p);
		_p->ns1__SetAuthFlowParamReq = ns1__SetAuthFlowParamReq;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__SetAuthFlowParam(struct soap*, const struct __ns1__SetAuthFlowParam *, const char*, const char*);

inline int soap_write___ns1__SetAuthFlowParam(struct soap *soap, struct __ns1__SetAuthFlowParam const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__SetAuthFlowParam(soap, p), 0) || soap_put___ns1__SetAuthFlowParam(soap, p, "-ns1:SetAuthFlowParam", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__SetAuthFlowParam(struct soap *soap, const char *URL, struct __ns1__SetAuthFlowParam const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__SetAuthFlowParam(soap, p), 0) || soap_put___ns1__SetAuthFlowParam(soap, p, "-ns1:SetAuthFlowParam", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__SetAuthFlowParam(struct soap *soap, const char *URL, struct __ns1__SetAuthFlowParam const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__SetAuthFlowParam(soap, p), 0) || soap_put___ns1__SetAuthFlowParam(soap, p, "-ns1:SetAuthFlowParam", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__SetAuthFlowParam * SOAP_FMAC4 soap_get___ns1__SetAuthFlowParam(struct soap*, struct __ns1__SetAuthFlowParam *, const char*, const char*);

inline int soap_read___ns1__SetAuthFlowParam(struct soap *soap, struct __ns1__SetAuthFlowParam *p)
{
	if (p)
	{	soap_default___ns1__SetAuthFlowParam(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__SetAuthFlowParam(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__SetAuthFlowParam(struct soap *soap, const char *URL, struct __ns1__SetAuthFlowParam *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__SetAuthFlowParam(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__SetAuthFlowParam(struct soap *soap, struct __ns1__SetAuthFlowParam *p)
{
	if (soap_read___ns1__SetAuthFlowParam(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__DoUATPExpressCheckoutPayment_DEFINED
#define SOAP_TYPE___ns1__DoUATPExpressCheckoutPayment_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__DoUATPExpressCheckoutPayment(struct soap*, struct __ns1__DoUATPExpressCheckoutPayment *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__DoUATPExpressCheckoutPayment(struct soap*, const struct __ns1__DoUATPExpressCheckoutPayment *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__DoUATPExpressCheckoutPayment(struct soap*, const char*, int, const struct __ns1__DoUATPExpressCheckoutPayment *, const char*);
SOAP_FMAC3 struct __ns1__DoUATPExpressCheckoutPayment * SOAP_FMAC4 soap_in___ns1__DoUATPExpressCheckoutPayment(struct soap*, const char*, struct __ns1__DoUATPExpressCheckoutPayment *, const char*);
SOAP_FMAC1 struct __ns1__DoUATPExpressCheckoutPayment * SOAP_FMAC2 soap_instantiate___ns1__DoUATPExpressCheckoutPayment(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__DoUATPExpressCheckoutPayment * soap_new___ns1__DoUATPExpressCheckoutPayment(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__DoUATPExpressCheckoutPayment(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__DoUATPExpressCheckoutPayment * soap_new_req___ns1__DoUATPExpressCheckoutPayment(
	struct soap *soap)
{
	struct __ns1__DoUATPExpressCheckoutPayment *_p = soap_new___ns1__DoUATPExpressCheckoutPayment(soap);
	if (_p)
	{	soap_default___ns1__DoUATPExpressCheckoutPayment(soap, _p);
	}
	return _p;
}

inline struct __ns1__DoUATPExpressCheckoutPayment * soap_new_set___ns1__DoUATPExpressCheckoutPayment(
	struct soap *soap,
	_ns1__DoUATPExpressCheckoutPaymentReq *ns1__DoUATPExpressCheckoutPaymentReq)
{
	struct __ns1__DoUATPExpressCheckoutPayment *_p = soap_new___ns1__DoUATPExpressCheckoutPayment(soap);
	if (_p)
	{	soap_default___ns1__DoUATPExpressCheckoutPayment(soap, _p);
		_p->ns1__DoUATPExpressCheckoutPaymentReq = ns1__DoUATPExpressCheckoutPaymentReq;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__DoUATPExpressCheckoutPayment(struct soap*, const struct __ns1__DoUATPExpressCheckoutPayment *, const char*, const char*);

inline int soap_write___ns1__DoUATPExpressCheckoutPayment(struct soap *soap, struct __ns1__DoUATPExpressCheckoutPayment const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__DoUATPExpressCheckoutPayment(soap, p), 0) || soap_put___ns1__DoUATPExpressCheckoutPayment(soap, p, "-ns1:DoUATPExpressCheckoutPayment", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__DoUATPExpressCheckoutPayment(struct soap *soap, const char *URL, struct __ns1__DoUATPExpressCheckoutPayment const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__DoUATPExpressCheckoutPayment(soap, p), 0) || soap_put___ns1__DoUATPExpressCheckoutPayment(soap, p, "-ns1:DoUATPExpressCheckoutPayment", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__DoUATPExpressCheckoutPayment(struct soap *soap, const char *URL, struct __ns1__DoUATPExpressCheckoutPayment const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__DoUATPExpressCheckoutPayment(soap, p), 0) || soap_put___ns1__DoUATPExpressCheckoutPayment(soap, p, "-ns1:DoUATPExpressCheckoutPayment", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__DoUATPExpressCheckoutPayment * SOAP_FMAC4 soap_get___ns1__DoUATPExpressCheckoutPayment(struct soap*, struct __ns1__DoUATPExpressCheckoutPayment *, const char*, const char*);

inline int soap_read___ns1__DoUATPExpressCheckoutPayment(struct soap *soap, struct __ns1__DoUATPExpressCheckoutPayment *p)
{
	if (p)
	{	soap_default___ns1__DoUATPExpressCheckoutPayment(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__DoUATPExpressCheckoutPayment(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__DoUATPExpressCheckoutPayment(struct soap *soap, const char *URL, struct __ns1__DoUATPExpressCheckoutPayment *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__DoUATPExpressCheckoutPayment(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__DoUATPExpressCheckoutPayment(struct soap *soap, struct __ns1__DoUATPExpressCheckoutPayment *p)
{
	if (soap_read___ns1__DoUATPExpressCheckoutPayment(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__DoExpressCheckoutPayment_DEFINED
#define SOAP_TYPE___ns1__DoExpressCheckoutPayment_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__DoExpressCheckoutPayment(struct soap*, struct __ns1__DoExpressCheckoutPayment *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__DoExpressCheckoutPayment(struct soap*, const struct __ns1__DoExpressCheckoutPayment *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__DoExpressCheckoutPayment(struct soap*, const char*, int, const struct __ns1__DoExpressCheckoutPayment *, const char*);
SOAP_FMAC3 struct __ns1__DoExpressCheckoutPayment * SOAP_FMAC4 soap_in___ns1__DoExpressCheckoutPayment(struct soap*, const char*, struct __ns1__DoExpressCheckoutPayment *, const char*);
SOAP_FMAC1 struct __ns1__DoExpressCheckoutPayment * SOAP_FMAC2 soap_instantiate___ns1__DoExpressCheckoutPayment(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__DoExpressCheckoutPayment * soap_new___ns1__DoExpressCheckoutPayment(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__DoExpressCheckoutPayment(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__DoExpressCheckoutPayment * soap_new_req___ns1__DoExpressCheckoutPayment(
	struct soap *soap)
{
	struct __ns1__DoExpressCheckoutPayment *_p = soap_new___ns1__DoExpressCheckoutPayment(soap);
	if (_p)
	{	soap_default___ns1__DoExpressCheckoutPayment(soap, _p);
	}
	return _p;
}

inline struct __ns1__DoExpressCheckoutPayment * soap_new_set___ns1__DoExpressCheckoutPayment(
	struct soap *soap,
	_ns1__DoExpressCheckoutPaymentReq *ns1__DoExpressCheckoutPaymentReq)
{
	struct __ns1__DoExpressCheckoutPayment *_p = soap_new___ns1__DoExpressCheckoutPayment(soap);
	if (_p)
	{	soap_default___ns1__DoExpressCheckoutPayment(soap, _p);
		_p->ns1__DoExpressCheckoutPaymentReq = ns1__DoExpressCheckoutPaymentReq;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__DoExpressCheckoutPayment(struct soap*, const struct __ns1__DoExpressCheckoutPayment *, const char*, const char*);

inline int soap_write___ns1__DoExpressCheckoutPayment(struct soap *soap, struct __ns1__DoExpressCheckoutPayment const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__DoExpressCheckoutPayment(soap, p), 0) || soap_put___ns1__DoExpressCheckoutPayment(soap, p, "-ns1:DoExpressCheckoutPayment", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__DoExpressCheckoutPayment(struct soap *soap, const char *URL, struct __ns1__DoExpressCheckoutPayment const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__DoExpressCheckoutPayment(soap, p), 0) || soap_put___ns1__DoExpressCheckoutPayment(soap, p, "-ns1:DoExpressCheckoutPayment", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__DoExpressCheckoutPayment(struct soap *soap, const char *URL, struct __ns1__DoExpressCheckoutPayment const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__DoExpressCheckoutPayment(soap, p), 0) || soap_put___ns1__DoExpressCheckoutPayment(soap, p, "-ns1:DoExpressCheckoutPayment", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__DoExpressCheckoutPayment * SOAP_FMAC4 soap_get___ns1__DoExpressCheckoutPayment(struct soap*, struct __ns1__DoExpressCheckoutPayment *, const char*, const char*);

inline int soap_read___ns1__DoExpressCheckoutPayment(struct soap *soap, struct __ns1__DoExpressCheckoutPayment *p)
{
	if (p)
	{	soap_default___ns1__DoExpressCheckoutPayment(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__DoExpressCheckoutPayment(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__DoExpressCheckoutPayment(struct soap *soap, const char *URL, struct __ns1__DoExpressCheckoutPayment *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__DoExpressCheckoutPayment(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__DoExpressCheckoutPayment(struct soap *soap, struct __ns1__DoExpressCheckoutPayment *p)
{
	if (soap_read___ns1__DoExpressCheckoutPayment(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__GetPalDetails_DEFINED
#define SOAP_TYPE___ns1__GetPalDetails_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetPalDetails(struct soap*, struct __ns1__GetPalDetails *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetPalDetails(struct soap*, const struct __ns1__GetPalDetails *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetPalDetails(struct soap*, const char*, int, const struct __ns1__GetPalDetails *, const char*);
SOAP_FMAC3 struct __ns1__GetPalDetails * SOAP_FMAC4 soap_in___ns1__GetPalDetails(struct soap*, const char*, struct __ns1__GetPalDetails *, const char*);
SOAP_FMAC1 struct __ns1__GetPalDetails * SOAP_FMAC2 soap_instantiate___ns1__GetPalDetails(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__GetPalDetails * soap_new___ns1__GetPalDetails(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__GetPalDetails(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__GetPalDetails * soap_new_req___ns1__GetPalDetails(
	struct soap *soap)
{
	struct __ns1__GetPalDetails *_p = soap_new___ns1__GetPalDetails(soap);
	if (_p)
	{	soap_default___ns1__GetPalDetails(soap, _p);
	}
	return _p;
}

inline struct __ns1__GetPalDetails * soap_new_set___ns1__GetPalDetails(
	struct soap *soap,
	_ns1__GetPalDetailsReq *ns1__GetPalDetailsReq)
{
	struct __ns1__GetPalDetails *_p = soap_new___ns1__GetPalDetails(soap);
	if (_p)
	{	soap_default___ns1__GetPalDetails(soap, _p);
		_p->ns1__GetPalDetailsReq = ns1__GetPalDetailsReq;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetPalDetails(struct soap*, const struct __ns1__GetPalDetails *, const char*, const char*);

inline int soap_write___ns1__GetPalDetails(struct soap *soap, struct __ns1__GetPalDetails const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__GetPalDetails(soap, p), 0) || soap_put___ns1__GetPalDetails(soap, p, "-ns1:GetPalDetails", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__GetPalDetails(struct soap *soap, const char *URL, struct __ns1__GetPalDetails const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__GetPalDetails(soap, p), 0) || soap_put___ns1__GetPalDetails(soap, p, "-ns1:GetPalDetails", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__GetPalDetails(struct soap *soap, const char *URL, struct __ns1__GetPalDetails const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__GetPalDetails(soap, p), 0) || soap_put___ns1__GetPalDetails(soap, p, "-ns1:GetPalDetails", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__GetPalDetails * SOAP_FMAC4 soap_get___ns1__GetPalDetails(struct soap*, struct __ns1__GetPalDetails *, const char*, const char*);

inline int soap_read___ns1__GetPalDetails(struct soap *soap, struct __ns1__GetPalDetails *p)
{
	if (p)
	{	soap_default___ns1__GetPalDetails(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__GetPalDetails(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__GetPalDetails(struct soap *soap, const char *URL, struct __ns1__GetPalDetails *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__GetPalDetails(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__GetPalDetails(struct soap *soap, struct __ns1__GetPalDetails *p)
{
	if (soap_read___ns1__GetPalDetails(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__GetBalance_DEFINED
#define SOAP_TYPE___ns1__GetBalance_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetBalance(struct soap*, struct __ns1__GetBalance *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetBalance(struct soap*, const struct __ns1__GetBalance *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetBalance(struct soap*, const char*, int, const struct __ns1__GetBalance *, const char*);
SOAP_FMAC3 struct __ns1__GetBalance * SOAP_FMAC4 soap_in___ns1__GetBalance(struct soap*, const char*, struct __ns1__GetBalance *, const char*);
SOAP_FMAC1 struct __ns1__GetBalance * SOAP_FMAC2 soap_instantiate___ns1__GetBalance(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__GetBalance * soap_new___ns1__GetBalance(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__GetBalance(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__GetBalance * soap_new_req___ns1__GetBalance(
	struct soap *soap)
{
	struct __ns1__GetBalance *_p = soap_new___ns1__GetBalance(soap);
	if (_p)
	{	soap_default___ns1__GetBalance(soap, _p);
	}
	return _p;
}

inline struct __ns1__GetBalance * soap_new_set___ns1__GetBalance(
	struct soap *soap,
	_ns1__GetBalanceReq *ns1__GetBalanceReq)
{
	struct __ns1__GetBalance *_p = soap_new___ns1__GetBalance(soap);
	if (_p)
	{	soap_default___ns1__GetBalance(soap, _p);
		_p->ns1__GetBalanceReq = ns1__GetBalanceReq;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetBalance(struct soap*, const struct __ns1__GetBalance *, const char*, const char*);

inline int soap_write___ns1__GetBalance(struct soap *soap, struct __ns1__GetBalance const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__GetBalance(soap, p), 0) || soap_put___ns1__GetBalance(soap, p, "-ns1:GetBalance", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__GetBalance(struct soap *soap, const char *URL, struct __ns1__GetBalance const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__GetBalance(soap, p), 0) || soap_put___ns1__GetBalance(soap, p, "-ns1:GetBalance", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__GetBalance(struct soap *soap, const char *URL, struct __ns1__GetBalance const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__GetBalance(soap, p), 0) || soap_put___ns1__GetBalance(soap, p, "-ns1:GetBalance", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__GetBalance * SOAP_FMAC4 soap_get___ns1__GetBalance(struct soap*, struct __ns1__GetBalance *, const char*, const char*);

inline int soap_read___ns1__GetBalance(struct soap *soap, struct __ns1__GetBalance *p)
{
	if (p)
	{	soap_default___ns1__GetBalance(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__GetBalance(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__GetBalance(struct soap *soap, const char *URL, struct __ns1__GetBalance *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__GetBalance(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__GetBalance(struct soap *soap, struct __ns1__GetBalance *p)
{
	if (soap_read___ns1__GetBalance(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__DoMobileCheckoutPayment_DEFINED
#define SOAP_TYPE___ns1__DoMobileCheckoutPayment_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__DoMobileCheckoutPayment(struct soap*, struct __ns1__DoMobileCheckoutPayment *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__DoMobileCheckoutPayment(struct soap*, const struct __ns1__DoMobileCheckoutPayment *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__DoMobileCheckoutPayment(struct soap*, const char*, int, const struct __ns1__DoMobileCheckoutPayment *, const char*);
SOAP_FMAC3 struct __ns1__DoMobileCheckoutPayment * SOAP_FMAC4 soap_in___ns1__DoMobileCheckoutPayment(struct soap*, const char*, struct __ns1__DoMobileCheckoutPayment *, const char*);
SOAP_FMAC1 struct __ns1__DoMobileCheckoutPayment * SOAP_FMAC2 soap_instantiate___ns1__DoMobileCheckoutPayment(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__DoMobileCheckoutPayment * soap_new___ns1__DoMobileCheckoutPayment(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__DoMobileCheckoutPayment(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__DoMobileCheckoutPayment * soap_new_req___ns1__DoMobileCheckoutPayment(
	struct soap *soap)
{
	struct __ns1__DoMobileCheckoutPayment *_p = soap_new___ns1__DoMobileCheckoutPayment(soap);
	if (_p)
	{	soap_default___ns1__DoMobileCheckoutPayment(soap, _p);
	}
	return _p;
}

inline struct __ns1__DoMobileCheckoutPayment * soap_new_set___ns1__DoMobileCheckoutPayment(
	struct soap *soap,
	_ns1__DoMobileCheckoutPaymentReq *ns1__DoMobileCheckoutPaymentReq)
{
	struct __ns1__DoMobileCheckoutPayment *_p = soap_new___ns1__DoMobileCheckoutPayment(soap);
	if (_p)
	{	soap_default___ns1__DoMobileCheckoutPayment(soap, _p);
		_p->ns1__DoMobileCheckoutPaymentReq = ns1__DoMobileCheckoutPaymentReq;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__DoMobileCheckoutPayment(struct soap*, const struct __ns1__DoMobileCheckoutPayment *, const char*, const char*);

inline int soap_write___ns1__DoMobileCheckoutPayment(struct soap *soap, struct __ns1__DoMobileCheckoutPayment const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__DoMobileCheckoutPayment(soap, p), 0) || soap_put___ns1__DoMobileCheckoutPayment(soap, p, "-ns1:DoMobileCheckoutPayment", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__DoMobileCheckoutPayment(struct soap *soap, const char *URL, struct __ns1__DoMobileCheckoutPayment const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__DoMobileCheckoutPayment(soap, p), 0) || soap_put___ns1__DoMobileCheckoutPayment(soap, p, "-ns1:DoMobileCheckoutPayment", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__DoMobileCheckoutPayment(struct soap *soap, const char *URL, struct __ns1__DoMobileCheckoutPayment const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__DoMobileCheckoutPayment(soap, p), 0) || soap_put___ns1__DoMobileCheckoutPayment(soap, p, "-ns1:DoMobileCheckoutPayment", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__DoMobileCheckoutPayment * SOAP_FMAC4 soap_get___ns1__DoMobileCheckoutPayment(struct soap*, struct __ns1__DoMobileCheckoutPayment *, const char*, const char*);

inline int soap_read___ns1__DoMobileCheckoutPayment(struct soap *soap, struct __ns1__DoMobileCheckoutPayment *p)
{
	if (p)
	{	soap_default___ns1__DoMobileCheckoutPayment(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__DoMobileCheckoutPayment(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__DoMobileCheckoutPayment(struct soap *soap, const char *URL, struct __ns1__DoMobileCheckoutPayment *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__DoMobileCheckoutPayment(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__DoMobileCheckoutPayment(struct soap *soap, struct __ns1__DoMobileCheckoutPayment *p)
{
	if (soap_read___ns1__DoMobileCheckoutPayment(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__SetMobileCheckout_DEFINED
#define SOAP_TYPE___ns1__SetMobileCheckout_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__SetMobileCheckout(struct soap*, struct __ns1__SetMobileCheckout *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__SetMobileCheckout(struct soap*, const struct __ns1__SetMobileCheckout *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__SetMobileCheckout(struct soap*, const char*, int, const struct __ns1__SetMobileCheckout *, const char*);
SOAP_FMAC3 struct __ns1__SetMobileCheckout * SOAP_FMAC4 soap_in___ns1__SetMobileCheckout(struct soap*, const char*, struct __ns1__SetMobileCheckout *, const char*);
SOAP_FMAC1 struct __ns1__SetMobileCheckout * SOAP_FMAC2 soap_instantiate___ns1__SetMobileCheckout(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__SetMobileCheckout * soap_new___ns1__SetMobileCheckout(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__SetMobileCheckout(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__SetMobileCheckout * soap_new_req___ns1__SetMobileCheckout(
	struct soap *soap)
{
	struct __ns1__SetMobileCheckout *_p = soap_new___ns1__SetMobileCheckout(soap);
	if (_p)
	{	soap_default___ns1__SetMobileCheckout(soap, _p);
	}
	return _p;
}

inline struct __ns1__SetMobileCheckout * soap_new_set___ns1__SetMobileCheckout(
	struct soap *soap,
	_ns1__SetMobileCheckoutReq *ns1__SetMobileCheckoutReq)
{
	struct __ns1__SetMobileCheckout *_p = soap_new___ns1__SetMobileCheckout(soap);
	if (_p)
	{	soap_default___ns1__SetMobileCheckout(soap, _p);
		_p->ns1__SetMobileCheckoutReq = ns1__SetMobileCheckoutReq;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__SetMobileCheckout(struct soap*, const struct __ns1__SetMobileCheckout *, const char*, const char*);

inline int soap_write___ns1__SetMobileCheckout(struct soap *soap, struct __ns1__SetMobileCheckout const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__SetMobileCheckout(soap, p), 0) || soap_put___ns1__SetMobileCheckout(soap, p, "-ns1:SetMobileCheckout", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__SetMobileCheckout(struct soap *soap, const char *URL, struct __ns1__SetMobileCheckout const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__SetMobileCheckout(soap, p), 0) || soap_put___ns1__SetMobileCheckout(soap, p, "-ns1:SetMobileCheckout", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__SetMobileCheckout(struct soap *soap, const char *URL, struct __ns1__SetMobileCheckout const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__SetMobileCheckout(soap, p), 0) || soap_put___ns1__SetMobileCheckout(soap, p, "-ns1:SetMobileCheckout", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__SetMobileCheckout * SOAP_FMAC4 soap_get___ns1__SetMobileCheckout(struct soap*, struct __ns1__SetMobileCheckout *, const char*, const char*);

inline int soap_read___ns1__SetMobileCheckout(struct soap *soap, struct __ns1__SetMobileCheckout *p)
{
	if (p)
	{	soap_default___ns1__SetMobileCheckout(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__SetMobileCheckout(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__SetMobileCheckout(struct soap *soap, const char *URL, struct __ns1__SetMobileCheckout *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__SetMobileCheckout(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__SetMobileCheckout(struct soap *soap, struct __ns1__SetMobileCheckout *p)
{
	if (soap_read___ns1__SetMobileCheckout(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__GetMobileStatus_DEFINED
#define SOAP_TYPE___ns1__GetMobileStatus_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetMobileStatus(struct soap*, struct __ns1__GetMobileStatus *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetMobileStatus(struct soap*, const struct __ns1__GetMobileStatus *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetMobileStatus(struct soap*, const char*, int, const struct __ns1__GetMobileStatus *, const char*);
SOAP_FMAC3 struct __ns1__GetMobileStatus * SOAP_FMAC4 soap_in___ns1__GetMobileStatus(struct soap*, const char*, struct __ns1__GetMobileStatus *, const char*);
SOAP_FMAC1 struct __ns1__GetMobileStatus * SOAP_FMAC2 soap_instantiate___ns1__GetMobileStatus(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__GetMobileStatus * soap_new___ns1__GetMobileStatus(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__GetMobileStatus(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__GetMobileStatus * soap_new_req___ns1__GetMobileStatus(
	struct soap *soap)
{
	struct __ns1__GetMobileStatus *_p = soap_new___ns1__GetMobileStatus(soap);
	if (_p)
	{	soap_default___ns1__GetMobileStatus(soap, _p);
	}
	return _p;
}

inline struct __ns1__GetMobileStatus * soap_new_set___ns1__GetMobileStatus(
	struct soap *soap,
	_ns1__GetMobileStatusReq *ns1__GetMobileStatusReq)
{
	struct __ns1__GetMobileStatus *_p = soap_new___ns1__GetMobileStatus(soap);
	if (_p)
	{	soap_default___ns1__GetMobileStatus(soap, _p);
		_p->ns1__GetMobileStatusReq = ns1__GetMobileStatusReq;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetMobileStatus(struct soap*, const struct __ns1__GetMobileStatus *, const char*, const char*);

inline int soap_write___ns1__GetMobileStatus(struct soap *soap, struct __ns1__GetMobileStatus const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__GetMobileStatus(soap, p), 0) || soap_put___ns1__GetMobileStatus(soap, p, "-ns1:GetMobileStatus", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__GetMobileStatus(struct soap *soap, const char *URL, struct __ns1__GetMobileStatus const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__GetMobileStatus(soap, p), 0) || soap_put___ns1__GetMobileStatus(soap, p, "-ns1:GetMobileStatus", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__GetMobileStatus(struct soap *soap, const char *URL, struct __ns1__GetMobileStatus const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__GetMobileStatus(soap, p), 0) || soap_put___ns1__GetMobileStatus(soap, p, "-ns1:GetMobileStatus", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__GetMobileStatus * SOAP_FMAC4 soap_get___ns1__GetMobileStatus(struct soap*, struct __ns1__GetMobileStatus *, const char*, const char*);

inline int soap_read___ns1__GetMobileStatus(struct soap *soap, struct __ns1__GetMobileStatus *p)
{
	if (p)
	{	soap_default___ns1__GetMobileStatus(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__GetMobileStatus(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__GetMobileStatus(struct soap *soap, const char *URL, struct __ns1__GetMobileStatus *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__GetMobileStatus(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__GetMobileStatus(struct soap *soap, struct __ns1__GetMobileStatus *p)
{
	if (soap_read___ns1__GetMobileStatus(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__CreateMobilePayment_DEFINED
#define SOAP_TYPE___ns1__CreateMobilePayment_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__CreateMobilePayment(struct soap*, struct __ns1__CreateMobilePayment *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__CreateMobilePayment(struct soap*, const struct __ns1__CreateMobilePayment *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__CreateMobilePayment(struct soap*, const char*, int, const struct __ns1__CreateMobilePayment *, const char*);
SOAP_FMAC3 struct __ns1__CreateMobilePayment * SOAP_FMAC4 soap_in___ns1__CreateMobilePayment(struct soap*, const char*, struct __ns1__CreateMobilePayment *, const char*);
SOAP_FMAC1 struct __ns1__CreateMobilePayment * SOAP_FMAC2 soap_instantiate___ns1__CreateMobilePayment(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__CreateMobilePayment * soap_new___ns1__CreateMobilePayment(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__CreateMobilePayment(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__CreateMobilePayment * soap_new_req___ns1__CreateMobilePayment(
	struct soap *soap)
{
	struct __ns1__CreateMobilePayment *_p = soap_new___ns1__CreateMobilePayment(soap);
	if (_p)
	{	soap_default___ns1__CreateMobilePayment(soap, _p);
	}
	return _p;
}

inline struct __ns1__CreateMobilePayment * soap_new_set___ns1__CreateMobilePayment(
	struct soap *soap,
	_ns1__CreateMobilePaymentReq *ns1__CreateMobilePaymentReq)
{
	struct __ns1__CreateMobilePayment *_p = soap_new___ns1__CreateMobilePayment(soap);
	if (_p)
	{	soap_default___ns1__CreateMobilePayment(soap, _p);
		_p->ns1__CreateMobilePaymentReq = ns1__CreateMobilePaymentReq;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__CreateMobilePayment(struct soap*, const struct __ns1__CreateMobilePayment *, const char*, const char*);

inline int soap_write___ns1__CreateMobilePayment(struct soap *soap, struct __ns1__CreateMobilePayment const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__CreateMobilePayment(soap, p), 0) || soap_put___ns1__CreateMobilePayment(soap, p, "-ns1:CreateMobilePayment", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__CreateMobilePayment(struct soap *soap, const char *URL, struct __ns1__CreateMobilePayment const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__CreateMobilePayment(soap, p), 0) || soap_put___ns1__CreateMobilePayment(soap, p, "-ns1:CreateMobilePayment", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__CreateMobilePayment(struct soap *soap, const char *URL, struct __ns1__CreateMobilePayment const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__CreateMobilePayment(soap, p), 0) || soap_put___ns1__CreateMobilePayment(soap, p, "-ns1:CreateMobilePayment", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__CreateMobilePayment * SOAP_FMAC4 soap_get___ns1__CreateMobilePayment(struct soap*, struct __ns1__CreateMobilePayment *, const char*, const char*);

inline int soap_read___ns1__CreateMobilePayment(struct soap *soap, struct __ns1__CreateMobilePayment *p)
{
	if (p)
	{	soap_default___ns1__CreateMobilePayment(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__CreateMobilePayment(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__CreateMobilePayment(struct soap *soap, const char *URL, struct __ns1__CreateMobilePayment *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__CreateMobilePayment(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__CreateMobilePayment(struct soap *soap, struct __ns1__CreateMobilePayment *p)
{
	if (soap_read___ns1__CreateMobilePayment(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__GetBoardingDetails_DEFINED
#define SOAP_TYPE___ns1__GetBoardingDetails_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetBoardingDetails(struct soap*, struct __ns1__GetBoardingDetails *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetBoardingDetails(struct soap*, const struct __ns1__GetBoardingDetails *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetBoardingDetails(struct soap*, const char*, int, const struct __ns1__GetBoardingDetails *, const char*);
SOAP_FMAC3 struct __ns1__GetBoardingDetails * SOAP_FMAC4 soap_in___ns1__GetBoardingDetails(struct soap*, const char*, struct __ns1__GetBoardingDetails *, const char*);
SOAP_FMAC1 struct __ns1__GetBoardingDetails * SOAP_FMAC2 soap_instantiate___ns1__GetBoardingDetails(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__GetBoardingDetails * soap_new___ns1__GetBoardingDetails(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__GetBoardingDetails(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__GetBoardingDetails * soap_new_req___ns1__GetBoardingDetails(
	struct soap *soap)
{
	struct __ns1__GetBoardingDetails *_p = soap_new___ns1__GetBoardingDetails(soap);
	if (_p)
	{	soap_default___ns1__GetBoardingDetails(soap, _p);
	}
	return _p;
}

inline struct __ns1__GetBoardingDetails * soap_new_set___ns1__GetBoardingDetails(
	struct soap *soap,
	_ns1__GetBoardingDetailsReq *ns1__GetBoardingDetailsReq)
{
	struct __ns1__GetBoardingDetails *_p = soap_new___ns1__GetBoardingDetails(soap);
	if (_p)
	{	soap_default___ns1__GetBoardingDetails(soap, _p);
		_p->ns1__GetBoardingDetailsReq = ns1__GetBoardingDetailsReq;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetBoardingDetails(struct soap*, const struct __ns1__GetBoardingDetails *, const char*, const char*);

inline int soap_write___ns1__GetBoardingDetails(struct soap *soap, struct __ns1__GetBoardingDetails const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__GetBoardingDetails(soap, p), 0) || soap_put___ns1__GetBoardingDetails(soap, p, "-ns1:GetBoardingDetails", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__GetBoardingDetails(struct soap *soap, const char *URL, struct __ns1__GetBoardingDetails const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__GetBoardingDetails(soap, p), 0) || soap_put___ns1__GetBoardingDetails(soap, p, "-ns1:GetBoardingDetails", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__GetBoardingDetails(struct soap *soap, const char *URL, struct __ns1__GetBoardingDetails const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__GetBoardingDetails(soap, p), 0) || soap_put___ns1__GetBoardingDetails(soap, p, "-ns1:GetBoardingDetails", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__GetBoardingDetails * SOAP_FMAC4 soap_get___ns1__GetBoardingDetails(struct soap*, struct __ns1__GetBoardingDetails *, const char*, const char*);

inline int soap_read___ns1__GetBoardingDetails(struct soap *soap, struct __ns1__GetBoardingDetails *p)
{
	if (p)
	{	soap_default___ns1__GetBoardingDetails(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__GetBoardingDetails(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__GetBoardingDetails(struct soap *soap, const char *URL, struct __ns1__GetBoardingDetails *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__GetBoardingDetails(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__GetBoardingDetails(struct soap *soap, struct __ns1__GetBoardingDetails *p)
{
	if (soap_read___ns1__GetBoardingDetails(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__EnterBoarding_DEFINED
#define SOAP_TYPE___ns1__EnterBoarding_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__EnterBoarding(struct soap*, struct __ns1__EnterBoarding *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__EnterBoarding(struct soap*, const struct __ns1__EnterBoarding *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__EnterBoarding(struct soap*, const char*, int, const struct __ns1__EnterBoarding *, const char*);
SOAP_FMAC3 struct __ns1__EnterBoarding * SOAP_FMAC4 soap_in___ns1__EnterBoarding(struct soap*, const char*, struct __ns1__EnterBoarding *, const char*);
SOAP_FMAC1 struct __ns1__EnterBoarding * SOAP_FMAC2 soap_instantiate___ns1__EnterBoarding(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__EnterBoarding * soap_new___ns1__EnterBoarding(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__EnterBoarding(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__EnterBoarding * soap_new_req___ns1__EnterBoarding(
	struct soap *soap)
{
	struct __ns1__EnterBoarding *_p = soap_new___ns1__EnterBoarding(soap);
	if (_p)
	{	soap_default___ns1__EnterBoarding(soap, _p);
	}
	return _p;
}

inline struct __ns1__EnterBoarding * soap_new_set___ns1__EnterBoarding(
	struct soap *soap,
	_ns1__EnterBoardingReq *ns1__EnterBoardingReq)
{
	struct __ns1__EnterBoarding *_p = soap_new___ns1__EnterBoarding(soap);
	if (_p)
	{	soap_default___ns1__EnterBoarding(soap, _p);
		_p->ns1__EnterBoardingReq = ns1__EnterBoardingReq;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__EnterBoarding(struct soap*, const struct __ns1__EnterBoarding *, const char*, const char*);

inline int soap_write___ns1__EnterBoarding(struct soap *soap, struct __ns1__EnterBoarding const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__EnterBoarding(soap, p), 0) || soap_put___ns1__EnterBoarding(soap, p, "-ns1:EnterBoarding", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__EnterBoarding(struct soap *soap, const char *URL, struct __ns1__EnterBoarding const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__EnterBoarding(soap, p), 0) || soap_put___ns1__EnterBoarding(soap, p, "-ns1:EnterBoarding", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__EnterBoarding(struct soap *soap, const char *URL, struct __ns1__EnterBoarding const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__EnterBoarding(soap, p), 0) || soap_put___ns1__EnterBoarding(soap, p, "-ns1:EnterBoarding", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__EnterBoarding * SOAP_FMAC4 soap_get___ns1__EnterBoarding(struct soap*, struct __ns1__EnterBoarding *, const char*, const char*);

inline int soap_read___ns1__EnterBoarding(struct soap *soap, struct __ns1__EnterBoarding *p)
{
	if (p)
	{	soap_default___ns1__EnterBoarding(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__EnterBoarding(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__EnterBoarding(struct soap *soap, const char *URL, struct __ns1__EnterBoarding *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__EnterBoarding(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__EnterBoarding(struct soap *soap, struct __ns1__EnterBoarding *p)
{
	if (soap_read___ns1__EnterBoarding(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__AddressVerify_DEFINED
#define SOAP_TYPE___ns1__AddressVerify_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__AddressVerify(struct soap*, struct __ns1__AddressVerify *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__AddressVerify(struct soap*, const struct __ns1__AddressVerify *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__AddressVerify(struct soap*, const char*, int, const struct __ns1__AddressVerify *, const char*);
SOAP_FMAC3 struct __ns1__AddressVerify * SOAP_FMAC4 soap_in___ns1__AddressVerify(struct soap*, const char*, struct __ns1__AddressVerify *, const char*);
SOAP_FMAC1 struct __ns1__AddressVerify * SOAP_FMAC2 soap_instantiate___ns1__AddressVerify(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__AddressVerify * soap_new___ns1__AddressVerify(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__AddressVerify(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__AddressVerify * soap_new_req___ns1__AddressVerify(
	struct soap *soap)
{
	struct __ns1__AddressVerify *_p = soap_new___ns1__AddressVerify(soap);
	if (_p)
	{	soap_default___ns1__AddressVerify(soap, _p);
	}
	return _p;
}

inline struct __ns1__AddressVerify * soap_new_set___ns1__AddressVerify(
	struct soap *soap,
	_ns1__AddressVerifyReq *ns1__AddressVerifyReq)
{
	struct __ns1__AddressVerify *_p = soap_new___ns1__AddressVerify(soap);
	if (_p)
	{	soap_default___ns1__AddressVerify(soap, _p);
		_p->ns1__AddressVerifyReq = ns1__AddressVerifyReq;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__AddressVerify(struct soap*, const struct __ns1__AddressVerify *, const char*, const char*);

inline int soap_write___ns1__AddressVerify(struct soap *soap, struct __ns1__AddressVerify const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__AddressVerify(soap, p), 0) || soap_put___ns1__AddressVerify(soap, p, "-ns1:AddressVerify", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__AddressVerify(struct soap *soap, const char *URL, struct __ns1__AddressVerify const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__AddressVerify(soap, p), 0) || soap_put___ns1__AddressVerify(soap, p, "-ns1:AddressVerify", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__AddressVerify(struct soap *soap, const char *URL, struct __ns1__AddressVerify const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__AddressVerify(soap, p), 0) || soap_put___ns1__AddressVerify(soap, p, "-ns1:AddressVerify", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__AddressVerify * SOAP_FMAC4 soap_get___ns1__AddressVerify(struct soap*, struct __ns1__AddressVerify *, const char*, const char*);

inline int soap_read___ns1__AddressVerify(struct soap *soap, struct __ns1__AddressVerify *p)
{
	if (p)
	{	soap_default___ns1__AddressVerify(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__AddressVerify(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__AddressVerify(struct soap *soap, const char *URL, struct __ns1__AddressVerify *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__AddressVerify(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__AddressVerify(struct soap *soap, struct __ns1__AddressVerify *p)
{
	if (soap_read___ns1__AddressVerify(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__BillAgreementUpdate_DEFINED
#define SOAP_TYPE___ns1__BillAgreementUpdate_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__BillAgreementUpdate(struct soap*, struct __ns1__BillAgreementUpdate *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__BillAgreementUpdate(struct soap*, const struct __ns1__BillAgreementUpdate *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__BillAgreementUpdate(struct soap*, const char*, int, const struct __ns1__BillAgreementUpdate *, const char*);
SOAP_FMAC3 struct __ns1__BillAgreementUpdate * SOAP_FMAC4 soap_in___ns1__BillAgreementUpdate(struct soap*, const char*, struct __ns1__BillAgreementUpdate *, const char*);
SOAP_FMAC1 struct __ns1__BillAgreementUpdate * SOAP_FMAC2 soap_instantiate___ns1__BillAgreementUpdate(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__BillAgreementUpdate * soap_new___ns1__BillAgreementUpdate(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__BillAgreementUpdate(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__BillAgreementUpdate * soap_new_req___ns1__BillAgreementUpdate(
	struct soap *soap)
{
	struct __ns1__BillAgreementUpdate *_p = soap_new___ns1__BillAgreementUpdate(soap);
	if (_p)
	{	soap_default___ns1__BillAgreementUpdate(soap, _p);
	}
	return _p;
}

inline struct __ns1__BillAgreementUpdate * soap_new_set___ns1__BillAgreementUpdate(
	struct soap *soap,
	_ns1__BillAgreementUpdateReq *ns1__BillAgreementUpdateReq)
{
	struct __ns1__BillAgreementUpdate *_p = soap_new___ns1__BillAgreementUpdate(soap);
	if (_p)
	{	soap_default___ns1__BillAgreementUpdate(soap, _p);
		_p->ns1__BillAgreementUpdateReq = ns1__BillAgreementUpdateReq;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__BillAgreementUpdate(struct soap*, const struct __ns1__BillAgreementUpdate *, const char*, const char*);

inline int soap_write___ns1__BillAgreementUpdate(struct soap *soap, struct __ns1__BillAgreementUpdate const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__BillAgreementUpdate(soap, p), 0) || soap_put___ns1__BillAgreementUpdate(soap, p, "-ns1:BillAgreementUpdate", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__BillAgreementUpdate(struct soap *soap, const char *URL, struct __ns1__BillAgreementUpdate const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__BillAgreementUpdate(soap, p), 0) || soap_put___ns1__BillAgreementUpdate(soap, p, "-ns1:BillAgreementUpdate", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__BillAgreementUpdate(struct soap *soap, const char *URL, struct __ns1__BillAgreementUpdate const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__BillAgreementUpdate(soap, p), 0) || soap_put___ns1__BillAgreementUpdate(soap, p, "-ns1:BillAgreementUpdate", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__BillAgreementUpdate * SOAP_FMAC4 soap_get___ns1__BillAgreementUpdate(struct soap*, struct __ns1__BillAgreementUpdate *, const char*, const char*);

inline int soap_read___ns1__BillAgreementUpdate(struct soap *soap, struct __ns1__BillAgreementUpdate *p)
{
	if (p)
	{	soap_default___ns1__BillAgreementUpdate(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__BillAgreementUpdate(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__BillAgreementUpdate(struct soap *soap, const char *URL, struct __ns1__BillAgreementUpdate *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__BillAgreementUpdate(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__BillAgreementUpdate(struct soap *soap, struct __ns1__BillAgreementUpdate *p)
{
	if (soap_read___ns1__BillAgreementUpdate(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__MassPay_DEFINED
#define SOAP_TYPE___ns1__MassPay_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__MassPay(struct soap*, struct __ns1__MassPay *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__MassPay(struct soap*, const struct __ns1__MassPay *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__MassPay(struct soap*, const char*, int, const struct __ns1__MassPay *, const char*);
SOAP_FMAC3 struct __ns1__MassPay * SOAP_FMAC4 soap_in___ns1__MassPay(struct soap*, const char*, struct __ns1__MassPay *, const char*);
SOAP_FMAC1 struct __ns1__MassPay * SOAP_FMAC2 soap_instantiate___ns1__MassPay(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__MassPay * soap_new___ns1__MassPay(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__MassPay(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__MassPay * soap_new_req___ns1__MassPay(
	struct soap *soap)
{
	struct __ns1__MassPay *_p = soap_new___ns1__MassPay(soap);
	if (_p)
	{	soap_default___ns1__MassPay(soap, _p);
	}
	return _p;
}

inline struct __ns1__MassPay * soap_new_set___ns1__MassPay(
	struct soap *soap,
	_ns1__MassPayReq *ns1__MassPayReq)
{
	struct __ns1__MassPay *_p = soap_new___ns1__MassPay(soap);
	if (_p)
	{	soap_default___ns1__MassPay(soap, _p);
		_p->ns1__MassPayReq = ns1__MassPayReq;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__MassPay(struct soap*, const struct __ns1__MassPay *, const char*, const char*);

inline int soap_write___ns1__MassPay(struct soap *soap, struct __ns1__MassPay const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__MassPay(soap, p), 0) || soap_put___ns1__MassPay(soap, p, "-ns1:MassPay", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__MassPay(struct soap *soap, const char *URL, struct __ns1__MassPay const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__MassPay(soap, p), 0) || soap_put___ns1__MassPay(soap, p, "-ns1:MassPay", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__MassPay(struct soap *soap, const char *URL, struct __ns1__MassPay const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__MassPay(soap, p), 0) || soap_put___ns1__MassPay(soap, p, "-ns1:MassPay", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__MassPay * SOAP_FMAC4 soap_get___ns1__MassPay(struct soap*, struct __ns1__MassPay *, const char*, const char*);

inline int soap_read___ns1__MassPay(struct soap *soap, struct __ns1__MassPay *p)
{
	if (p)
	{	soap_default___ns1__MassPay(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__MassPay(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__MassPay(struct soap *soap, const char *URL, struct __ns1__MassPay *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__MassPay(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__MassPay(struct soap *soap, struct __ns1__MassPay *p)
{
	if (soap_read___ns1__MassPay(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__TransactionSearch_DEFINED
#define SOAP_TYPE___ns1__TransactionSearch_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__TransactionSearch(struct soap*, struct __ns1__TransactionSearch *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__TransactionSearch(struct soap*, const struct __ns1__TransactionSearch *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__TransactionSearch(struct soap*, const char*, int, const struct __ns1__TransactionSearch *, const char*);
SOAP_FMAC3 struct __ns1__TransactionSearch * SOAP_FMAC4 soap_in___ns1__TransactionSearch(struct soap*, const char*, struct __ns1__TransactionSearch *, const char*);
SOAP_FMAC1 struct __ns1__TransactionSearch * SOAP_FMAC2 soap_instantiate___ns1__TransactionSearch(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__TransactionSearch * soap_new___ns1__TransactionSearch(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__TransactionSearch(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__TransactionSearch * soap_new_req___ns1__TransactionSearch(
	struct soap *soap)
{
	struct __ns1__TransactionSearch *_p = soap_new___ns1__TransactionSearch(soap);
	if (_p)
	{	soap_default___ns1__TransactionSearch(soap, _p);
	}
	return _p;
}

inline struct __ns1__TransactionSearch * soap_new_set___ns1__TransactionSearch(
	struct soap *soap,
	_ns1__TransactionSearchReq *ns1__TransactionSearchReq)
{
	struct __ns1__TransactionSearch *_p = soap_new___ns1__TransactionSearch(soap);
	if (_p)
	{	soap_default___ns1__TransactionSearch(soap, _p);
		_p->ns1__TransactionSearchReq = ns1__TransactionSearchReq;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__TransactionSearch(struct soap*, const struct __ns1__TransactionSearch *, const char*, const char*);

inline int soap_write___ns1__TransactionSearch(struct soap *soap, struct __ns1__TransactionSearch const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__TransactionSearch(soap, p), 0) || soap_put___ns1__TransactionSearch(soap, p, "-ns1:TransactionSearch", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__TransactionSearch(struct soap *soap, const char *URL, struct __ns1__TransactionSearch const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__TransactionSearch(soap, p), 0) || soap_put___ns1__TransactionSearch(soap, p, "-ns1:TransactionSearch", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__TransactionSearch(struct soap *soap, const char *URL, struct __ns1__TransactionSearch const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__TransactionSearch(soap, p), 0) || soap_put___ns1__TransactionSearch(soap, p, "-ns1:TransactionSearch", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__TransactionSearch * SOAP_FMAC4 soap_get___ns1__TransactionSearch(struct soap*, struct __ns1__TransactionSearch *, const char*, const char*);

inline int soap_read___ns1__TransactionSearch(struct soap *soap, struct __ns1__TransactionSearch *p)
{
	if (p)
	{	soap_default___ns1__TransactionSearch(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__TransactionSearch(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__TransactionSearch(struct soap *soap, const char *URL, struct __ns1__TransactionSearch *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__TransactionSearch(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__TransactionSearch(struct soap *soap, struct __ns1__TransactionSearch *p)
{
	if (soap_read___ns1__TransactionSearch(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__BillUser_DEFINED
#define SOAP_TYPE___ns1__BillUser_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__BillUser(struct soap*, struct __ns1__BillUser *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__BillUser(struct soap*, const struct __ns1__BillUser *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__BillUser(struct soap*, const char*, int, const struct __ns1__BillUser *, const char*);
SOAP_FMAC3 struct __ns1__BillUser * SOAP_FMAC4 soap_in___ns1__BillUser(struct soap*, const char*, struct __ns1__BillUser *, const char*);
SOAP_FMAC1 struct __ns1__BillUser * SOAP_FMAC2 soap_instantiate___ns1__BillUser(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__BillUser * soap_new___ns1__BillUser(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__BillUser(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__BillUser * soap_new_req___ns1__BillUser(
	struct soap *soap)
{
	struct __ns1__BillUser *_p = soap_new___ns1__BillUser(soap);
	if (_p)
	{	soap_default___ns1__BillUser(soap, _p);
	}
	return _p;
}

inline struct __ns1__BillUser * soap_new_set___ns1__BillUser(
	struct soap *soap,
	_ns1__BillUserReq *ns1__BillUserReq)
{
	struct __ns1__BillUser *_p = soap_new___ns1__BillUser(soap);
	if (_p)
	{	soap_default___ns1__BillUser(soap, _p);
		_p->ns1__BillUserReq = ns1__BillUserReq;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__BillUser(struct soap*, const struct __ns1__BillUser *, const char*, const char*);

inline int soap_write___ns1__BillUser(struct soap *soap, struct __ns1__BillUser const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__BillUser(soap, p), 0) || soap_put___ns1__BillUser(soap, p, "-ns1:BillUser", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__BillUser(struct soap *soap, const char *URL, struct __ns1__BillUser const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__BillUser(soap, p), 0) || soap_put___ns1__BillUser(soap, p, "-ns1:BillUser", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__BillUser(struct soap *soap, const char *URL, struct __ns1__BillUser const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__BillUser(soap, p), 0) || soap_put___ns1__BillUser(soap, p, "-ns1:BillUser", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__BillUser * SOAP_FMAC4 soap_get___ns1__BillUser(struct soap*, struct __ns1__BillUser *, const char*, const char*);

inline int soap_read___ns1__BillUser(struct soap *soap, struct __ns1__BillUser *p)
{
	if (p)
	{	soap_default___ns1__BillUser(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__BillUser(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__BillUser(struct soap *soap, const char *URL, struct __ns1__BillUser *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__BillUser(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__BillUser(struct soap *soap, struct __ns1__BillUser *p)
{
	if (soap_read___ns1__BillUser(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__BMButtonSearch_DEFINED
#define SOAP_TYPE___ns1__BMButtonSearch_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__BMButtonSearch(struct soap*, struct __ns1__BMButtonSearch *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__BMButtonSearch(struct soap*, const struct __ns1__BMButtonSearch *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__BMButtonSearch(struct soap*, const char*, int, const struct __ns1__BMButtonSearch *, const char*);
SOAP_FMAC3 struct __ns1__BMButtonSearch * SOAP_FMAC4 soap_in___ns1__BMButtonSearch(struct soap*, const char*, struct __ns1__BMButtonSearch *, const char*);
SOAP_FMAC1 struct __ns1__BMButtonSearch * SOAP_FMAC2 soap_instantiate___ns1__BMButtonSearch(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__BMButtonSearch * soap_new___ns1__BMButtonSearch(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__BMButtonSearch(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__BMButtonSearch * soap_new_req___ns1__BMButtonSearch(
	struct soap *soap)
{
	struct __ns1__BMButtonSearch *_p = soap_new___ns1__BMButtonSearch(soap);
	if (_p)
	{	soap_default___ns1__BMButtonSearch(soap, _p);
	}
	return _p;
}

inline struct __ns1__BMButtonSearch * soap_new_set___ns1__BMButtonSearch(
	struct soap *soap,
	_ns1__BMButtonSearchReq *ns1__BMButtonSearchReq)
{
	struct __ns1__BMButtonSearch *_p = soap_new___ns1__BMButtonSearch(soap);
	if (_p)
	{	soap_default___ns1__BMButtonSearch(soap, _p);
		_p->ns1__BMButtonSearchReq = ns1__BMButtonSearchReq;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__BMButtonSearch(struct soap*, const struct __ns1__BMButtonSearch *, const char*, const char*);

inline int soap_write___ns1__BMButtonSearch(struct soap *soap, struct __ns1__BMButtonSearch const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__BMButtonSearch(soap, p), 0) || soap_put___ns1__BMButtonSearch(soap, p, "-ns1:BMButtonSearch", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__BMButtonSearch(struct soap *soap, const char *URL, struct __ns1__BMButtonSearch const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__BMButtonSearch(soap, p), 0) || soap_put___ns1__BMButtonSearch(soap, p, "-ns1:BMButtonSearch", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__BMButtonSearch(struct soap *soap, const char *URL, struct __ns1__BMButtonSearch const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__BMButtonSearch(soap, p), 0) || soap_put___ns1__BMButtonSearch(soap, p, "-ns1:BMButtonSearch", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__BMButtonSearch * SOAP_FMAC4 soap_get___ns1__BMButtonSearch(struct soap*, struct __ns1__BMButtonSearch *, const char*, const char*);

inline int soap_read___ns1__BMButtonSearch(struct soap *soap, struct __ns1__BMButtonSearch *p)
{
	if (p)
	{	soap_default___ns1__BMButtonSearch(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__BMButtonSearch(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__BMButtonSearch(struct soap *soap, const char *URL, struct __ns1__BMButtonSearch *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__BMButtonSearch(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__BMButtonSearch(struct soap *soap, struct __ns1__BMButtonSearch *p)
{
	if (soap_read___ns1__BMButtonSearch(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__BMManageButtonStatus_DEFINED
#define SOAP_TYPE___ns1__BMManageButtonStatus_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__BMManageButtonStatus(struct soap*, struct __ns1__BMManageButtonStatus *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__BMManageButtonStatus(struct soap*, const struct __ns1__BMManageButtonStatus *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__BMManageButtonStatus(struct soap*, const char*, int, const struct __ns1__BMManageButtonStatus *, const char*);
SOAP_FMAC3 struct __ns1__BMManageButtonStatus * SOAP_FMAC4 soap_in___ns1__BMManageButtonStatus(struct soap*, const char*, struct __ns1__BMManageButtonStatus *, const char*);
SOAP_FMAC1 struct __ns1__BMManageButtonStatus * SOAP_FMAC2 soap_instantiate___ns1__BMManageButtonStatus(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__BMManageButtonStatus * soap_new___ns1__BMManageButtonStatus(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__BMManageButtonStatus(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__BMManageButtonStatus * soap_new_req___ns1__BMManageButtonStatus(
	struct soap *soap)
{
	struct __ns1__BMManageButtonStatus *_p = soap_new___ns1__BMManageButtonStatus(soap);
	if (_p)
	{	soap_default___ns1__BMManageButtonStatus(soap, _p);
	}
	return _p;
}

inline struct __ns1__BMManageButtonStatus * soap_new_set___ns1__BMManageButtonStatus(
	struct soap *soap,
	_ns1__BMManageButtonStatusReq *ns1__BMManageButtonStatusReq)
{
	struct __ns1__BMManageButtonStatus *_p = soap_new___ns1__BMManageButtonStatus(soap);
	if (_p)
	{	soap_default___ns1__BMManageButtonStatus(soap, _p);
		_p->ns1__BMManageButtonStatusReq = ns1__BMManageButtonStatusReq;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__BMManageButtonStatus(struct soap*, const struct __ns1__BMManageButtonStatus *, const char*, const char*);

inline int soap_write___ns1__BMManageButtonStatus(struct soap *soap, struct __ns1__BMManageButtonStatus const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__BMManageButtonStatus(soap, p), 0) || soap_put___ns1__BMManageButtonStatus(soap, p, "-ns1:BMManageButtonStatus", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__BMManageButtonStatus(struct soap *soap, const char *URL, struct __ns1__BMManageButtonStatus const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__BMManageButtonStatus(soap, p), 0) || soap_put___ns1__BMManageButtonStatus(soap, p, "-ns1:BMManageButtonStatus", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__BMManageButtonStatus(struct soap *soap, const char *URL, struct __ns1__BMManageButtonStatus const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__BMManageButtonStatus(soap, p), 0) || soap_put___ns1__BMManageButtonStatus(soap, p, "-ns1:BMManageButtonStatus", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__BMManageButtonStatus * SOAP_FMAC4 soap_get___ns1__BMManageButtonStatus(struct soap*, struct __ns1__BMManageButtonStatus *, const char*, const char*);

inline int soap_read___ns1__BMManageButtonStatus(struct soap *soap, struct __ns1__BMManageButtonStatus *p)
{
	if (p)
	{	soap_default___ns1__BMManageButtonStatus(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__BMManageButtonStatus(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__BMManageButtonStatus(struct soap *soap, const char *URL, struct __ns1__BMManageButtonStatus *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__BMManageButtonStatus(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__BMManageButtonStatus(struct soap *soap, struct __ns1__BMManageButtonStatus *p)
{
	if (soap_read___ns1__BMManageButtonStatus(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__BMGetInventory_DEFINED
#define SOAP_TYPE___ns1__BMGetInventory_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__BMGetInventory(struct soap*, struct __ns1__BMGetInventory *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__BMGetInventory(struct soap*, const struct __ns1__BMGetInventory *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__BMGetInventory(struct soap*, const char*, int, const struct __ns1__BMGetInventory *, const char*);
SOAP_FMAC3 struct __ns1__BMGetInventory * SOAP_FMAC4 soap_in___ns1__BMGetInventory(struct soap*, const char*, struct __ns1__BMGetInventory *, const char*);
SOAP_FMAC1 struct __ns1__BMGetInventory * SOAP_FMAC2 soap_instantiate___ns1__BMGetInventory(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__BMGetInventory * soap_new___ns1__BMGetInventory(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__BMGetInventory(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__BMGetInventory * soap_new_req___ns1__BMGetInventory(
	struct soap *soap)
{
	struct __ns1__BMGetInventory *_p = soap_new___ns1__BMGetInventory(soap);
	if (_p)
	{	soap_default___ns1__BMGetInventory(soap, _p);
	}
	return _p;
}

inline struct __ns1__BMGetInventory * soap_new_set___ns1__BMGetInventory(
	struct soap *soap,
	_ns1__BMGetInventoryReq *ns1__BMGetInventoryReq)
{
	struct __ns1__BMGetInventory *_p = soap_new___ns1__BMGetInventory(soap);
	if (_p)
	{	soap_default___ns1__BMGetInventory(soap, _p);
		_p->ns1__BMGetInventoryReq = ns1__BMGetInventoryReq;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__BMGetInventory(struct soap*, const struct __ns1__BMGetInventory *, const char*, const char*);

inline int soap_write___ns1__BMGetInventory(struct soap *soap, struct __ns1__BMGetInventory const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__BMGetInventory(soap, p), 0) || soap_put___ns1__BMGetInventory(soap, p, "-ns1:BMGetInventory", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__BMGetInventory(struct soap *soap, const char *URL, struct __ns1__BMGetInventory const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__BMGetInventory(soap, p), 0) || soap_put___ns1__BMGetInventory(soap, p, "-ns1:BMGetInventory", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__BMGetInventory(struct soap *soap, const char *URL, struct __ns1__BMGetInventory const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__BMGetInventory(soap, p), 0) || soap_put___ns1__BMGetInventory(soap, p, "-ns1:BMGetInventory", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__BMGetInventory * SOAP_FMAC4 soap_get___ns1__BMGetInventory(struct soap*, struct __ns1__BMGetInventory *, const char*, const char*);

inline int soap_read___ns1__BMGetInventory(struct soap *soap, struct __ns1__BMGetInventory *p)
{
	if (p)
	{	soap_default___ns1__BMGetInventory(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__BMGetInventory(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__BMGetInventory(struct soap *soap, const char *URL, struct __ns1__BMGetInventory *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__BMGetInventory(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__BMGetInventory(struct soap *soap, struct __ns1__BMGetInventory *p)
{
	if (soap_read___ns1__BMGetInventory(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__BMGetButtonDetails_DEFINED
#define SOAP_TYPE___ns1__BMGetButtonDetails_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__BMGetButtonDetails(struct soap*, struct __ns1__BMGetButtonDetails *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__BMGetButtonDetails(struct soap*, const struct __ns1__BMGetButtonDetails *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__BMGetButtonDetails(struct soap*, const char*, int, const struct __ns1__BMGetButtonDetails *, const char*);
SOAP_FMAC3 struct __ns1__BMGetButtonDetails * SOAP_FMAC4 soap_in___ns1__BMGetButtonDetails(struct soap*, const char*, struct __ns1__BMGetButtonDetails *, const char*);
SOAP_FMAC1 struct __ns1__BMGetButtonDetails * SOAP_FMAC2 soap_instantiate___ns1__BMGetButtonDetails(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__BMGetButtonDetails * soap_new___ns1__BMGetButtonDetails(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__BMGetButtonDetails(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__BMGetButtonDetails * soap_new_req___ns1__BMGetButtonDetails(
	struct soap *soap)
{
	struct __ns1__BMGetButtonDetails *_p = soap_new___ns1__BMGetButtonDetails(soap);
	if (_p)
	{	soap_default___ns1__BMGetButtonDetails(soap, _p);
	}
	return _p;
}

inline struct __ns1__BMGetButtonDetails * soap_new_set___ns1__BMGetButtonDetails(
	struct soap *soap,
	_ns1__BMGetButtonDetailsReq *ns1__BMGetButtonDetailsReq)
{
	struct __ns1__BMGetButtonDetails *_p = soap_new___ns1__BMGetButtonDetails(soap);
	if (_p)
	{	soap_default___ns1__BMGetButtonDetails(soap, _p);
		_p->ns1__BMGetButtonDetailsReq = ns1__BMGetButtonDetailsReq;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__BMGetButtonDetails(struct soap*, const struct __ns1__BMGetButtonDetails *, const char*, const char*);

inline int soap_write___ns1__BMGetButtonDetails(struct soap *soap, struct __ns1__BMGetButtonDetails const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__BMGetButtonDetails(soap, p), 0) || soap_put___ns1__BMGetButtonDetails(soap, p, "-ns1:BMGetButtonDetails", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__BMGetButtonDetails(struct soap *soap, const char *URL, struct __ns1__BMGetButtonDetails const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__BMGetButtonDetails(soap, p), 0) || soap_put___ns1__BMGetButtonDetails(soap, p, "-ns1:BMGetButtonDetails", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__BMGetButtonDetails(struct soap *soap, const char *URL, struct __ns1__BMGetButtonDetails const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__BMGetButtonDetails(soap, p), 0) || soap_put___ns1__BMGetButtonDetails(soap, p, "-ns1:BMGetButtonDetails", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__BMGetButtonDetails * SOAP_FMAC4 soap_get___ns1__BMGetButtonDetails(struct soap*, struct __ns1__BMGetButtonDetails *, const char*, const char*);

inline int soap_read___ns1__BMGetButtonDetails(struct soap *soap, struct __ns1__BMGetButtonDetails *p)
{
	if (p)
	{	soap_default___ns1__BMGetButtonDetails(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__BMGetButtonDetails(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__BMGetButtonDetails(struct soap *soap, const char *URL, struct __ns1__BMGetButtonDetails *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__BMGetButtonDetails(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__BMGetButtonDetails(struct soap *soap, struct __ns1__BMGetButtonDetails *p)
{
	if (soap_read___ns1__BMGetButtonDetails(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__BMSetInventory_DEFINED
#define SOAP_TYPE___ns1__BMSetInventory_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__BMSetInventory(struct soap*, struct __ns1__BMSetInventory *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__BMSetInventory(struct soap*, const struct __ns1__BMSetInventory *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__BMSetInventory(struct soap*, const char*, int, const struct __ns1__BMSetInventory *, const char*);
SOAP_FMAC3 struct __ns1__BMSetInventory * SOAP_FMAC4 soap_in___ns1__BMSetInventory(struct soap*, const char*, struct __ns1__BMSetInventory *, const char*);
SOAP_FMAC1 struct __ns1__BMSetInventory * SOAP_FMAC2 soap_instantiate___ns1__BMSetInventory(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__BMSetInventory * soap_new___ns1__BMSetInventory(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__BMSetInventory(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__BMSetInventory * soap_new_req___ns1__BMSetInventory(
	struct soap *soap)
{
	struct __ns1__BMSetInventory *_p = soap_new___ns1__BMSetInventory(soap);
	if (_p)
	{	soap_default___ns1__BMSetInventory(soap, _p);
	}
	return _p;
}

inline struct __ns1__BMSetInventory * soap_new_set___ns1__BMSetInventory(
	struct soap *soap,
	_ns1__BMSetInventoryReq *ns1__BMSetInventoryReq)
{
	struct __ns1__BMSetInventory *_p = soap_new___ns1__BMSetInventory(soap);
	if (_p)
	{	soap_default___ns1__BMSetInventory(soap, _p);
		_p->ns1__BMSetInventoryReq = ns1__BMSetInventoryReq;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__BMSetInventory(struct soap*, const struct __ns1__BMSetInventory *, const char*, const char*);

inline int soap_write___ns1__BMSetInventory(struct soap *soap, struct __ns1__BMSetInventory const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__BMSetInventory(soap, p), 0) || soap_put___ns1__BMSetInventory(soap, p, "-ns1:BMSetInventory", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__BMSetInventory(struct soap *soap, const char *URL, struct __ns1__BMSetInventory const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__BMSetInventory(soap, p), 0) || soap_put___ns1__BMSetInventory(soap, p, "-ns1:BMSetInventory", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__BMSetInventory(struct soap *soap, const char *URL, struct __ns1__BMSetInventory const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__BMSetInventory(soap, p), 0) || soap_put___ns1__BMSetInventory(soap, p, "-ns1:BMSetInventory", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__BMSetInventory * SOAP_FMAC4 soap_get___ns1__BMSetInventory(struct soap*, struct __ns1__BMSetInventory *, const char*, const char*);

inline int soap_read___ns1__BMSetInventory(struct soap *soap, struct __ns1__BMSetInventory *p)
{
	if (p)
	{	soap_default___ns1__BMSetInventory(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__BMSetInventory(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__BMSetInventory(struct soap *soap, const char *URL, struct __ns1__BMSetInventory *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__BMSetInventory(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__BMSetInventory(struct soap *soap, struct __ns1__BMSetInventory *p)
{
	if (soap_read___ns1__BMSetInventory(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__BMUpdateButton_DEFINED
#define SOAP_TYPE___ns1__BMUpdateButton_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__BMUpdateButton(struct soap*, struct __ns1__BMUpdateButton *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__BMUpdateButton(struct soap*, const struct __ns1__BMUpdateButton *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__BMUpdateButton(struct soap*, const char*, int, const struct __ns1__BMUpdateButton *, const char*);
SOAP_FMAC3 struct __ns1__BMUpdateButton * SOAP_FMAC4 soap_in___ns1__BMUpdateButton(struct soap*, const char*, struct __ns1__BMUpdateButton *, const char*);
SOAP_FMAC1 struct __ns1__BMUpdateButton * SOAP_FMAC2 soap_instantiate___ns1__BMUpdateButton(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__BMUpdateButton * soap_new___ns1__BMUpdateButton(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__BMUpdateButton(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__BMUpdateButton * soap_new_req___ns1__BMUpdateButton(
	struct soap *soap)
{
	struct __ns1__BMUpdateButton *_p = soap_new___ns1__BMUpdateButton(soap);
	if (_p)
	{	soap_default___ns1__BMUpdateButton(soap, _p);
	}
	return _p;
}

inline struct __ns1__BMUpdateButton * soap_new_set___ns1__BMUpdateButton(
	struct soap *soap,
	_ns1__BMUpdateButtonReq *ns1__BMUpdateButtonReq)
{
	struct __ns1__BMUpdateButton *_p = soap_new___ns1__BMUpdateButton(soap);
	if (_p)
	{	soap_default___ns1__BMUpdateButton(soap, _p);
		_p->ns1__BMUpdateButtonReq = ns1__BMUpdateButtonReq;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__BMUpdateButton(struct soap*, const struct __ns1__BMUpdateButton *, const char*, const char*);

inline int soap_write___ns1__BMUpdateButton(struct soap *soap, struct __ns1__BMUpdateButton const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__BMUpdateButton(soap, p), 0) || soap_put___ns1__BMUpdateButton(soap, p, "-ns1:BMUpdateButton", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__BMUpdateButton(struct soap *soap, const char *URL, struct __ns1__BMUpdateButton const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__BMUpdateButton(soap, p), 0) || soap_put___ns1__BMUpdateButton(soap, p, "-ns1:BMUpdateButton", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__BMUpdateButton(struct soap *soap, const char *URL, struct __ns1__BMUpdateButton const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__BMUpdateButton(soap, p), 0) || soap_put___ns1__BMUpdateButton(soap, p, "-ns1:BMUpdateButton", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__BMUpdateButton * SOAP_FMAC4 soap_get___ns1__BMUpdateButton(struct soap*, struct __ns1__BMUpdateButton *, const char*, const char*);

inline int soap_read___ns1__BMUpdateButton(struct soap *soap, struct __ns1__BMUpdateButton *p)
{
	if (p)
	{	soap_default___ns1__BMUpdateButton(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__BMUpdateButton(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__BMUpdateButton(struct soap *soap, const char *URL, struct __ns1__BMUpdateButton *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__BMUpdateButton(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__BMUpdateButton(struct soap *soap, struct __ns1__BMUpdateButton *p)
{
	if (soap_read___ns1__BMUpdateButton(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__BMCreateButton_DEFINED
#define SOAP_TYPE___ns1__BMCreateButton_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__BMCreateButton(struct soap*, struct __ns1__BMCreateButton *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__BMCreateButton(struct soap*, const struct __ns1__BMCreateButton *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__BMCreateButton(struct soap*, const char*, int, const struct __ns1__BMCreateButton *, const char*);
SOAP_FMAC3 struct __ns1__BMCreateButton * SOAP_FMAC4 soap_in___ns1__BMCreateButton(struct soap*, const char*, struct __ns1__BMCreateButton *, const char*);
SOAP_FMAC1 struct __ns1__BMCreateButton * SOAP_FMAC2 soap_instantiate___ns1__BMCreateButton(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__BMCreateButton * soap_new___ns1__BMCreateButton(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__BMCreateButton(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__BMCreateButton * soap_new_req___ns1__BMCreateButton(
	struct soap *soap)
{
	struct __ns1__BMCreateButton *_p = soap_new___ns1__BMCreateButton(soap);
	if (_p)
	{	soap_default___ns1__BMCreateButton(soap, _p);
	}
	return _p;
}

inline struct __ns1__BMCreateButton * soap_new_set___ns1__BMCreateButton(
	struct soap *soap,
	_ns1__BMCreateButtonReq *ns1__BMCreateButtonReq)
{
	struct __ns1__BMCreateButton *_p = soap_new___ns1__BMCreateButton(soap);
	if (_p)
	{	soap_default___ns1__BMCreateButton(soap, _p);
		_p->ns1__BMCreateButtonReq = ns1__BMCreateButtonReq;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__BMCreateButton(struct soap*, const struct __ns1__BMCreateButton *, const char*, const char*);

inline int soap_write___ns1__BMCreateButton(struct soap *soap, struct __ns1__BMCreateButton const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__BMCreateButton(soap, p), 0) || soap_put___ns1__BMCreateButton(soap, p, "-ns1:BMCreateButton", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__BMCreateButton(struct soap *soap, const char *URL, struct __ns1__BMCreateButton const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__BMCreateButton(soap, p), 0) || soap_put___ns1__BMCreateButton(soap, p, "-ns1:BMCreateButton", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__BMCreateButton(struct soap *soap, const char *URL, struct __ns1__BMCreateButton const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__BMCreateButton(soap, p), 0) || soap_put___ns1__BMCreateButton(soap, p, "-ns1:BMCreateButton", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__BMCreateButton * SOAP_FMAC4 soap_get___ns1__BMCreateButton(struct soap*, struct __ns1__BMCreateButton *, const char*, const char*);

inline int soap_read___ns1__BMCreateButton(struct soap *soap, struct __ns1__BMCreateButton *p)
{
	if (p)
	{	soap_default___ns1__BMCreateButton(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__BMCreateButton(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__BMCreateButton(struct soap *soap, const char *URL, struct __ns1__BMCreateButton *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__BMCreateButton(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__BMCreateButton(struct soap *soap, struct __ns1__BMCreateButton *p)
{
	if (soap_read___ns1__BMCreateButton(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__GetTransactionDetails_DEFINED
#define SOAP_TYPE___ns1__GetTransactionDetails_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetTransactionDetails(struct soap*, struct __ns1__GetTransactionDetails *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetTransactionDetails(struct soap*, const struct __ns1__GetTransactionDetails *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetTransactionDetails(struct soap*, const char*, int, const struct __ns1__GetTransactionDetails *, const char*);
SOAP_FMAC3 struct __ns1__GetTransactionDetails * SOAP_FMAC4 soap_in___ns1__GetTransactionDetails(struct soap*, const char*, struct __ns1__GetTransactionDetails *, const char*);
SOAP_FMAC1 struct __ns1__GetTransactionDetails * SOAP_FMAC2 soap_instantiate___ns1__GetTransactionDetails(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__GetTransactionDetails * soap_new___ns1__GetTransactionDetails(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__GetTransactionDetails(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__GetTransactionDetails * soap_new_req___ns1__GetTransactionDetails(
	struct soap *soap)
{
	struct __ns1__GetTransactionDetails *_p = soap_new___ns1__GetTransactionDetails(soap);
	if (_p)
	{	soap_default___ns1__GetTransactionDetails(soap, _p);
	}
	return _p;
}

inline struct __ns1__GetTransactionDetails * soap_new_set___ns1__GetTransactionDetails(
	struct soap *soap,
	_ns1__GetTransactionDetailsReq *ns1__GetTransactionDetailsReq)
{
	struct __ns1__GetTransactionDetails *_p = soap_new___ns1__GetTransactionDetails(soap);
	if (_p)
	{	soap_default___ns1__GetTransactionDetails(soap, _p);
		_p->ns1__GetTransactionDetailsReq = ns1__GetTransactionDetailsReq;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetTransactionDetails(struct soap*, const struct __ns1__GetTransactionDetails *, const char*, const char*);

inline int soap_write___ns1__GetTransactionDetails(struct soap *soap, struct __ns1__GetTransactionDetails const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__GetTransactionDetails(soap, p), 0) || soap_put___ns1__GetTransactionDetails(soap, p, "-ns1:GetTransactionDetails", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__GetTransactionDetails(struct soap *soap, const char *URL, struct __ns1__GetTransactionDetails const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__GetTransactionDetails(soap, p), 0) || soap_put___ns1__GetTransactionDetails(soap, p, "-ns1:GetTransactionDetails", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__GetTransactionDetails(struct soap *soap, const char *URL, struct __ns1__GetTransactionDetails const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__GetTransactionDetails(soap, p), 0) || soap_put___ns1__GetTransactionDetails(soap, p, "-ns1:GetTransactionDetails", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__GetTransactionDetails * SOAP_FMAC4 soap_get___ns1__GetTransactionDetails(struct soap*, struct __ns1__GetTransactionDetails *, const char*, const char*);

inline int soap_read___ns1__GetTransactionDetails(struct soap *soap, struct __ns1__GetTransactionDetails *p)
{
	if (p)
	{	soap_default___ns1__GetTransactionDetails(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__GetTransactionDetails(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__GetTransactionDetails(struct soap *soap, const char *URL, struct __ns1__GetTransactionDetails *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__GetTransactionDetails(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__GetTransactionDetails(struct soap *soap, struct __ns1__GetTransactionDetails *p)
{
	if (soap_read___ns1__GetTransactionDetails(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__CancelRecoup_DEFINED
#define SOAP_TYPE___ns1__CancelRecoup_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__CancelRecoup(struct soap*, struct __ns1__CancelRecoup *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__CancelRecoup(struct soap*, const struct __ns1__CancelRecoup *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__CancelRecoup(struct soap*, const char*, int, const struct __ns1__CancelRecoup *, const char*);
SOAP_FMAC3 struct __ns1__CancelRecoup * SOAP_FMAC4 soap_in___ns1__CancelRecoup(struct soap*, const char*, struct __ns1__CancelRecoup *, const char*);
SOAP_FMAC1 struct __ns1__CancelRecoup * SOAP_FMAC2 soap_instantiate___ns1__CancelRecoup(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__CancelRecoup * soap_new___ns1__CancelRecoup(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__CancelRecoup(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__CancelRecoup * soap_new_req___ns1__CancelRecoup(
	struct soap *soap)
{
	struct __ns1__CancelRecoup *_p = soap_new___ns1__CancelRecoup(soap);
	if (_p)
	{	soap_default___ns1__CancelRecoup(soap, _p);
	}
	return _p;
}

inline struct __ns1__CancelRecoup * soap_new_set___ns1__CancelRecoup(
	struct soap *soap,
	_ns1__CancelRecoupReq *ns1__CancelRecoupReq)
{
	struct __ns1__CancelRecoup *_p = soap_new___ns1__CancelRecoup(soap);
	if (_p)
	{	soap_default___ns1__CancelRecoup(soap, _p);
		_p->ns1__CancelRecoupReq = ns1__CancelRecoupReq;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__CancelRecoup(struct soap*, const struct __ns1__CancelRecoup *, const char*, const char*);

inline int soap_write___ns1__CancelRecoup(struct soap *soap, struct __ns1__CancelRecoup const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__CancelRecoup(soap, p), 0) || soap_put___ns1__CancelRecoup(soap, p, "-ns1:CancelRecoup", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__CancelRecoup(struct soap *soap, const char *URL, struct __ns1__CancelRecoup const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__CancelRecoup(soap, p), 0) || soap_put___ns1__CancelRecoup(soap, p, "-ns1:CancelRecoup", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__CancelRecoup(struct soap *soap, const char *URL, struct __ns1__CancelRecoup const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__CancelRecoup(soap, p), 0) || soap_put___ns1__CancelRecoup(soap, p, "-ns1:CancelRecoup", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__CancelRecoup * SOAP_FMAC4 soap_get___ns1__CancelRecoup(struct soap*, struct __ns1__CancelRecoup *, const char*, const char*);

inline int soap_read___ns1__CancelRecoup(struct soap *soap, struct __ns1__CancelRecoup *p)
{
	if (p)
	{	soap_default___ns1__CancelRecoup(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__CancelRecoup(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__CancelRecoup(struct soap *soap, const char *URL, struct __ns1__CancelRecoup *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__CancelRecoup(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__CancelRecoup(struct soap *soap, struct __ns1__CancelRecoup *p)
{
	if (soap_read___ns1__CancelRecoup(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__CompleteRecoup_DEFINED
#define SOAP_TYPE___ns1__CompleteRecoup_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__CompleteRecoup(struct soap*, struct __ns1__CompleteRecoup *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__CompleteRecoup(struct soap*, const struct __ns1__CompleteRecoup *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__CompleteRecoup(struct soap*, const char*, int, const struct __ns1__CompleteRecoup *, const char*);
SOAP_FMAC3 struct __ns1__CompleteRecoup * SOAP_FMAC4 soap_in___ns1__CompleteRecoup(struct soap*, const char*, struct __ns1__CompleteRecoup *, const char*);
SOAP_FMAC1 struct __ns1__CompleteRecoup * SOAP_FMAC2 soap_instantiate___ns1__CompleteRecoup(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__CompleteRecoup * soap_new___ns1__CompleteRecoup(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__CompleteRecoup(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__CompleteRecoup * soap_new_req___ns1__CompleteRecoup(
	struct soap *soap)
{
	struct __ns1__CompleteRecoup *_p = soap_new___ns1__CompleteRecoup(soap);
	if (_p)
	{	soap_default___ns1__CompleteRecoup(soap, _p);
	}
	return _p;
}

inline struct __ns1__CompleteRecoup * soap_new_set___ns1__CompleteRecoup(
	struct soap *soap,
	_ns1__CompleteRecoupReq *ns1__CompleteRecoupReq)
{
	struct __ns1__CompleteRecoup *_p = soap_new___ns1__CompleteRecoup(soap);
	if (_p)
	{	soap_default___ns1__CompleteRecoup(soap, _p);
		_p->ns1__CompleteRecoupReq = ns1__CompleteRecoupReq;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__CompleteRecoup(struct soap*, const struct __ns1__CompleteRecoup *, const char*, const char*);

inline int soap_write___ns1__CompleteRecoup(struct soap *soap, struct __ns1__CompleteRecoup const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__CompleteRecoup(soap, p), 0) || soap_put___ns1__CompleteRecoup(soap, p, "-ns1:CompleteRecoup", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__CompleteRecoup(struct soap *soap, const char *URL, struct __ns1__CompleteRecoup const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__CompleteRecoup(soap, p), 0) || soap_put___ns1__CompleteRecoup(soap, p, "-ns1:CompleteRecoup", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__CompleteRecoup(struct soap *soap, const char *URL, struct __ns1__CompleteRecoup const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__CompleteRecoup(soap, p), 0) || soap_put___ns1__CompleteRecoup(soap, p, "-ns1:CompleteRecoup", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__CompleteRecoup * SOAP_FMAC4 soap_get___ns1__CompleteRecoup(struct soap*, struct __ns1__CompleteRecoup *, const char*, const char*);

inline int soap_read___ns1__CompleteRecoup(struct soap *soap, struct __ns1__CompleteRecoup *p)
{
	if (p)
	{	soap_default___ns1__CompleteRecoup(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__CompleteRecoup(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__CompleteRecoup(struct soap *soap, const char *URL, struct __ns1__CompleteRecoup *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__CompleteRecoup(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__CompleteRecoup(struct soap *soap, struct __ns1__CompleteRecoup *p)
{
	if (soap_read___ns1__CompleteRecoup(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__InitiateRecoup_DEFINED
#define SOAP_TYPE___ns1__InitiateRecoup_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__InitiateRecoup(struct soap*, struct __ns1__InitiateRecoup *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__InitiateRecoup(struct soap*, const struct __ns1__InitiateRecoup *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__InitiateRecoup(struct soap*, const char*, int, const struct __ns1__InitiateRecoup *, const char*);
SOAP_FMAC3 struct __ns1__InitiateRecoup * SOAP_FMAC4 soap_in___ns1__InitiateRecoup(struct soap*, const char*, struct __ns1__InitiateRecoup *, const char*);
SOAP_FMAC1 struct __ns1__InitiateRecoup * SOAP_FMAC2 soap_instantiate___ns1__InitiateRecoup(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__InitiateRecoup * soap_new___ns1__InitiateRecoup(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__InitiateRecoup(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__InitiateRecoup * soap_new_req___ns1__InitiateRecoup(
	struct soap *soap)
{
	struct __ns1__InitiateRecoup *_p = soap_new___ns1__InitiateRecoup(soap);
	if (_p)
	{	soap_default___ns1__InitiateRecoup(soap, _p);
	}
	return _p;
}

inline struct __ns1__InitiateRecoup * soap_new_set___ns1__InitiateRecoup(
	struct soap *soap,
	_ns1__InitiateRecoupReq *ns1__InitiateRecoupReq)
{
	struct __ns1__InitiateRecoup *_p = soap_new___ns1__InitiateRecoup(soap);
	if (_p)
	{	soap_default___ns1__InitiateRecoup(soap, _p);
		_p->ns1__InitiateRecoupReq = ns1__InitiateRecoupReq;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__InitiateRecoup(struct soap*, const struct __ns1__InitiateRecoup *, const char*, const char*);

inline int soap_write___ns1__InitiateRecoup(struct soap *soap, struct __ns1__InitiateRecoup const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__InitiateRecoup(soap, p), 0) || soap_put___ns1__InitiateRecoup(soap, p, "-ns1:InitiateRecoup", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__InitiateRecoup(struct soap *soap, const char *URL, struct __ns1__InitiateRecoup const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__InitiateRecoup(soap, p), 0) || soap_put___ns1__InitiateRecoup(soap, p, "-ns1:InitiateRecoup", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__InitiateRecoup(struct soap *soap, const char *URL, struct __ns1__InitiateRecoup const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__InitiateRecoup(soap, p), 0) || soap_put___ns1__InitiateRecoup(soap, p, "-ns1:InitiateRecoup", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__InitiateRecoup * SOAP_FMAC4 soap_get___ns1__InitiateRecoup(struct soap*, struct __ns1__InitiateRecoup *, const char*, const char*);

inline int soap_read___ns1__InitiateRecoup(struct soap *soap, struct __ns1__InitiateRecoup *p)
{
	if (p)
	{	soap_default___ns1__InitiateRecoup(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__InitiateRecoup(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__InitiateRecoup(struct soap *soap, const char *URL, struct __ns1__InitiateRecoup *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__InitiateRecoup(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__InitiateRecoup(struct soap *soap, struct __ns1__InitiateRecoup *p)
{
	if (soap_read___ns1__InitiateRecoup(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__RefundTransaction_DEFINED
#define SOAP_TYPE___ns1__RefundTransaction_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__RefundTransaction(struct soap*, struct __ns1__RefundTransaction *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__RefundTransaction(struct soap*, const struct __ns1__RefundTransaction *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__RefundTransaction(struct soap*, const char*, int, const struct __ns1__RefundTransaction *, const char*);
SOAP_FMAC3 struct __ns1__RefundTransaction * SOAP_FMAC4 soap_in___ns1__RefundTransaction(struct soap*, const char*, struct __ns1__RefundTransaction *, const char*);
SOAP_FMAC1 struct __ns1__RefundTransaction * SOAP_FMAC2 soap_instantiate___ns1__RefundTransaction(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__RefundTransaction * soap_new___ns1__RefundTransaction(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__RefundTransaction(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__RefundTransaction * soap_new_req___ns1__RefundTransaction(
	struct soap *soap)
{
	struct __ns1__RefundTransaction *_p = soap_new___ns1__RefundTransaction(soap);
	if (_p)
	{	soap_default___ns1__RefundTransaction(soap, _p);
	}
	return _p;
}

inline struct __ns1__RefundTransaction * soap_new_set___ns1__RefundTransaction(
	struct soap *soap,
	_ns1__RefundTransactionReq *ns1__RefundTransactionReq)
{
	struct __ns1__RefundTransaction *_p = soap_new___ns1__RefundTransaction(soap);
	if (_p)
	{	soap_default___ns1__RefundTransaction(soap, _p);
		_p->ns1__RefundTransactionReq = ns1__RefundTransactionReq;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__RefundTransaction(struct soap*, const struct __ns1__RefundTransaction *, const char*, const char*);

inline int soap_write___ns1__RefundTransaction(struct soap *soap, struct __ns1__RefundTransaction const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__RefundTransaction(soap, p), 0) || soap_put___ns1__RefundTransaction(soap, p, "-ns1:RefundTransaction", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__RefundTransaction(struct soap *soap, const char *URL, struct __ns1__RefundTransaction const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__RefundTransaction(soap, p), 0) || soap_put___ns1__RefundTransaction(soap, p, "-ns1:RefundTransaction", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__RefundTransaction(struct soap *soap, const char *URL, struct __ns1__RefundTransaction const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__RefundTransaction(soap, p), 0) || soap_put___ns1__RefundTransaction(soap, p, "-ns1:RefundTransaction", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__RefundTransaction * SOAP_FMAC4 soap_get___ns1__RefundTransaction(struct soap*, struct __ns1__RefundTransaction *, const char*, const char*);

inline int soap_read___ns1__RefundTransaction(struct soap *soap, struct __ns1__RefundTransaction *p)
{
	if (p)
	{	soap_default___ns1__RefundTransaction(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__RefundTransaction(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__RefundTransaction(struct soap *soap, const char *URL, struct __ns1__RefundTransaction *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__RefundTransaction(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__RefundTransaction(struct soap *soap, struct __ns1__RefundTransaction *p)
{
	if (soap_read___ns1__RefundTransaction(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Header_DEFINED
#define SOAP_TYPE_SOAP_ENV__Header_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Header(struct soap*, struct SOAP_ENV__Header *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Header(struct soap*, const struct SOAP_ENV__Header *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Header(struct soap*, const char*, int, const struct SOAP_ENV__Header *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_in_SOAP_ENV__Header(struct soap*, const char*, struct SOAP_ENV__Header *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Header * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Header(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Header * soap_new_SOAP_ENV__Header(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Header(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Header * soap_new_req_SOAP_ENV__Header(
	struct soap *soap)
{
	struct SOAP_ENV__Header *_p = soap_new_SOAP_ENV__Header(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Header(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Header * soap_new_set_SOAP_ENV__Header(
	struct soap *soap,
	ns3__CustomSecurityHeaderType *ns1__RequesterCredentials)
{
	struct SOAP_ENV__Header *_p = soap_new_SOAP_ENV__Header(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Header(soap, _p);
		_p->ns1__RequesterCredentials = ns1__RequesterCredentials;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Header(struct soap*, const struct SOAP_ENV__Header *, const char*, const char*);

inline int soap_write_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Header(soap, p), 0) || soap_put_SOAP_ENV__Header(soap, p, "SOAP-ENV:Header", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Header(struct soap *soap, const char *URL, struct SOAP_ENV__Header const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_SOAP_ENV__Header(soap, p), 0) || soap_put_SOAP_ENV__Header(soap, p, "SOAP-ENV:Header", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Header(struct soap *soap, const char *URL, struct SOAP_ENV__Header const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_SOAP_ENV__Header(soap, p), 0) || soap_put_SOAP_ENV__Header(soap, p, "SOAP-ENV:Header", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_get_SOAP_ENV__Header(struct soap*, struct SOAP_ENV__Header *, const char*, const char*);

inline int soap_read_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p)
{
	if (p)
	{	soap_default_SOAP_ENV__Header(soap, p);
		if (soap_begin_recv(soap) || soap_get_SOAP_ENV__Header(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Header(struct soap *soap, const char *URL, struct SOAP_ENV__Header *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_SOAP_ENV__Header(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p)
{
	if (soap_read_SOAP_ENV__Header(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#endif

#ifndef SOAP_TYPE__ns3__union_AccountSummaryType_DEFINED
#define SOAP_TYPE__ns3__union_AccountSummaryType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__ns3__union_AccountSummaryType(struct soap*, int, const union _ns3__union_AccountSummaryType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns3__union_AccountSummaryType(struct soap*, int, const union _ns3__union_AccountSummaryType *);
SOAP_FMAC3 union _ns3__union_AccountSummaryType * SOAP_FMAC4 soap_in__ns3__union_AccountSummaryType(struct soap*, int*, union _ns3__union_AccountSummaryType *);
#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Reason_DEFINED
#define SOAP_TYPE_PointerToSOAP_ENV__Reason_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Reason(struct soap*, const char *, int, struct SOAP_ENV__Reason *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Reason(struct soap*, const char*, struct SOAP_ENV__Reason **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *const*, const char*, const char*);
SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason **, const char*, const char*);
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Detail_DEFINED
#define SOAP_TYPE_PointerToSOAP_ENV__Detail_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Detail(struct soap*, const char *, int, struct SOAP_ENV__Detail *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Detail(struct soap*, const char*, struct SOAP_ENV__Detail **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *const*, const char*, const char*);
SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail **, const char*, const char*);
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Code_DEFINED
#define SOAP_TYPE_PointerToSOAP_ENV__Code_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Code(struct soap*, const char *, int, struct SOAP_ENV__Code *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Code(struct soap*, const char*, struct SOAP_ENV__Code **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *const*, const char*, const char*);
SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code **, const char*, const char*);
#endif

#endif

#ifndef SOAP_TYPE_PointerTo_ns1__ExternalRememberMeOptOutReq_DEFINED
#define SOAP_TYPE_PointerTo_ns1__ExternalRememberMeOptOutReq_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__ExternalRememberMeOptOutReq(struct soap*, _ns1__ExternalRememberMeOptOutReq *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__ExternalRememberMeOptOutReq(struct soap*, const char *, int, _ns1__ExternalRememberMeOptOutReq *const*, const char *);
SOAP_FMAC3 _ns1__ExternalRememberMeOptOutReq ** SOAP_FMAC4 soap_in_PointerTo_ns1__ExternalRememberMeOptOutReq(struct soap*, const char*, _ns1__ExternalRememberMeOptOutReq **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__ExternalRememberMeOptOutReq(struct soap*, _ns1__ExternalRememberMeOptOutReq *const*, const char*, const char*);
SOAP_FMAC3 _ns1__ExternalRememberMeOptOutReq ** SOAP_FMAC4 soap_get_PointerTo_ns1__ExternalRememberMeOptOutReq(struct soap*, _ns1__ExternalRememberMeOptOutReq **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__ReverseTransactionReq_DEFINED
#define SOAP_TYPE_PointerTo_ns1__ReverseTransactionReq_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__ReverseTransactionReq(struct soap*, _ns1__ReverseTransactionReq *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__ReverseTransactionReq(struct soap*, const char *, int, _ns1__ReverseTransactionReq *const*, const char *);
SOAP_FMAC3 _ns1__ReverseTransactionReq ** SOAP_FMAC4 soap_in_PointerTo_ns1__ReverseTransactionReq(struct soap*, const char*, _ns1__ReverseTransactionReq **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__ReverseTransactionReq(struct soap*, _ns1__ReverseTransactionReq *const*, const char*, const char*);
SOAP_FMAC3 _ns1__ReverseTransactionReq ** SOAP_FMAC4 soap_get_PointerTo_ns1__ReverseTransactionReq(struct soap*, _ns1__ReverseTransactionReq **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__DoNonReferencedCreditReq_DEFINED
#define SOAP_TYPE_PointerTo_ns1__DoNonReferencedCreditReq_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__DoNonReferencedCreditReq(struct soap*, _ns1__DoNonReferencedCreditReq *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__DoNonReferencedCreditReq(struct soap*, const char *, int, _ns1__DoNonReferencedCreditReq *const*, const char *);
SOAP_FMAC3 _ns1__DoNonReferencedCreditReq ** SOAP_FMAC4 soap_in_PointerTo_ns1__DoNonReferencedCreditReq(struct soap*, const char*, _ns1__DoNonReferencedCreditReq **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__DoNonReferencedCreditReq(struct soap*, _ns1__DoNonReferencedCreditReq *const*, const char*, const char*);
SOAP_FMAC3 _ns1__DoNonReferencedCreditReq ** SOAP_FMAC4 soap_get_PointerTo_ns1__DoNonReferencedCreditReq(struct soap*, _ns1__DoNonReferencedCreditReq **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__UpdateRecurringPaymentsProfileReq_DEFINED
#define SOAP_TYPE_PointerTo_ns1__UpdateRecurringPaymentsProfileReq_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__UpdateRecurringPaymentsProfileReq(struct soap*, _ns1__UpdateRecurringPaymentsProfileReq *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__UpdateRecurringPaymentsProfileReq(struct soap*, const char *, int, _ns1__UpdateRecurringPaymentsProfileReq *const*, const char *);
SOAP_FMAC3 _ns1__UpdateRecurringPaymentsProfileReq ** SOAP_FMAC4 soap_in_PointerTo_ns1__UpdateRecurringPaymentsProfileReq(struct soap*, const char*, _ns1__UpdateRecurringPaymentsProfileReq **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__UpdateRecurringPaymentsProfileReq(struct soap*, _ns1__UpdateRecurringPaymentsProfileReq *const*, const char*, const char*);
SOAP_FMAC3 _ns1__UpdateRecurringPaymentsProfileReq ** SOAP_FMAC4 soap_get_PointerTo_ns1__UpdateRecurringPaymentsProfileReq(struct soap*, _ns1__UpdateRecurringPaymentsProfileReq **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__BillOutstandingAmountReq_DEFINED
#define SOAP_TYPE_PointerTo_ns1__BillOutstandingAmountReq_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__BillOutstandingAmountReq(struct soap*, _ns1__BillOutstandingAmountReq *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__BillOutstandingAmountReq(struct soap*, const char *, int, _ns1__BillOutstandingAmountReq *const*, const char *);
SOAP_FMAC3 _ns1__BillOutstandingAmountReq ** SOAP_FMAC4 soap_in_PointerTo_ns1__BillOutstandingAmountReq(struct soap*, const char*, _ns1__BillOutstandingAmountReq **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__BillOutstandingAmountReq(struct soap*, _ns1__BillOutstandingAmountReq *const*, const char*, const char*);
SOAP_FMAC3 _ns1__BillOutstandingAmountReq ** SOAP_FMAC4 soap_get_PointerTo_ns1__BillOutstandingAmountReq(struct soap*, _ns1__BillOutstandingAmountReq **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__ManageRecurringPaymentsProfileStatusReq_DEFINED
#define SOAP_TYPE_PointerTo_ns1__ManageRecurringPaymentsProfileStatusReq_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__ManageRecurringPaymentsProfileStatusReq(struct soap*, _ns1__ManageRecurringPaymentsProfileStatusReq *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__ManageRecurringPaymentsProfileStatusReq(struct soap*, const char *, int, _ns1__ManageRecurringPaymentsProfileStatusReq *const*, const char *);
SOAP_FMAC3 _ns1__ManageRecurringPaymentsProfileStatusReq ** SOAP_FMAC4 soap_in_PointerTo_ns1__ManageRecurringPaymentsProfileStatusReq(struct soap*, const char*, _ns1__ManageRecurringPaymentsProfileStatusReq **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__ManageRecurringPaymentsProfileStatusReq(struct soap*, _ns1__ManageRecurringPaymentsProfileStatusReq *const*, const char*, const char*);
SOAP_FMAC3 _ns1__ManageRecurringPaymentsProfileStatusReq ** SOAP_FMAC4 soap_get_PointerTo_ns1__ManageRecurringPaymentsProfileStatusReq(struct soap*, _ns1__ManageRecurringPaymentsProfileStatusReq **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__GetRecurringPaymentsProfileDetailsReq_DEFINED
#define SOAP_TYPE_PointerTo_ns1__GetRecurringPaymentsProfileDetailsReq_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__GetRecurringPaymentsProfileDetailsReq(struct soap*, _ns1__GetRecurringPaymentsProfileDetailsReq *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__GetRecurringPaymentsProfileDetailsReq(struct soap*, const char *, int, _ns1__GetRecurringPaymentsProfileDetailsReq *const*, const char *);
SOAP_FMAC3 _ns1__GetRecurringPaymentsProfileDetailsReq ** SOAP_FMAC4 soap_in_PointerTo_ns1__GetRecurringPaymentsProfileDetailsReq(struct soap*, const char*, _ns1__GetRecurringPaymentsProfileDetailsReq **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__GetRecurringPaymentsProfileDetailsReq(struct soap*, _ns1__GetRecurringPaymentsProfileDetailsReq *const*, const char*, const char*);
SOAP_FMAC3 _ns1__GetRecurringPaymentsProfileDetailsReq ** SOAP_FMAC4 soap_get_PointerTo_ns1__GetRecurringPaymentsProfileDetailsReq(struct soap*, _ns1__GetRecurringPaymentsProfileDetailsReq **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__CreateRecurringPaymentsProfileReq_DEFINED
#define SOAP_TYPE_PointerTo_ns1__CreateRecurringPaymentsProfileReq_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__CreateRecurringPaymentsProfileReq(struct soap*, _ns1__CreateRecurringPaymentsProfileReq *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__CreateRecurringPaymentsProfileReq(struct soap*, const char *, int, _ns1__CreateRecurringPaymentsProfileReq *const*, const char *);
SOAP_FMAC3 _ns1__CreateRecurringPaymentsProfileReq ** SOAP_FMAC4 soap_in_PointerTo_ns1__CreateRecurringPaymentsProfileReq(struct soap*, const char*, _ns1__CreateRecurringPaymentsProfileReq **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__CreateRecurringPaymentsProfileReq(struct soap*, _ns1__CreateRecurringPaymentsProfileReq *const*, const char*, const char*);
SOAP_FMAC3 _ns1__CreateRecurringPaymentsProfileReq ** SOAP_FMAC4 soap_get_PointerTo_ns1__CreateRecurringPaymentsProfileReq(struct soap*, _ns1__CreateRecurringPaymentsProfileReq **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__DoReferenceTransactionReq_DEFINED
#define SOAP_TYPE_PointerTo_ns1__DoReferenceTransactionReq_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__DoReferenceTransactionReq(struct soap*, _ns1__DoReferenceTransactionReq *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__DoReferenceTransactionReq(struct soap*, const char *, int, _ns1__DoReferenceTransactionReq *const*, const char *);
SOAP_FMAC3 _ns1__DoReferenceTransactionReq ** SOAP_FMAC4 soap_in_PointerTo_ns1__DoReferenceTransactionReq(struct soap*, const char*, _ns1__DoReferenceTransactionReq **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__DoReferenceTransactionReq(struct soap*, _ns1__DoReferenceTransactionReq *const*, const char*, const char*);
SOAP_FMAC3 _ns1__DoReferenceTransactionReq ** SOAP_FMAC4 soap_get_PointerTo_ns1__DoReferenceTransactionReq(struct soap*, _ns1__DoReferenceTransactionReq **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__CreateBillingAgreementReq_DEFINED
#define SOAP_TYPE_PointerTo_ns1__CreateBillingAgreementReq_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__CreateBillingAgreementReq(struct soap*, _ns1__CreateBillingAgreementReq *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__CreateBillingAgreementReq(struct soap*, const char *, int, _ns1__CreateBillingAgreementReq *const*, const char *);
SOAP_FMAC3 _ns1__CreateBillingAgreementReq ** SOAP_FMAC4 soap_in_PointerTo_ns1__CreateBillingAgreementReq(struct soap*, const char*, _ns1__CreateBillingAgreementReq **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__CreateBillingAgreementReq(struct soap*, _ns1__CreateBillingAgreementReq *const*, const char*, const char*);
SOAP_FMAC3 _ns1__CreateBillingAgreementReq ** SOAP_FMAC4 soap_get_PointerTo_ns1__CreateBillingAgreementReq(struct soap*, _ns1__CreateBillingAgreementReq **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__GetBillingAgreementCustomerDetailsReq_DEFINED
#define SOAP_TYPE_PointerTo_ns1__GetBillingAgreementCustomerDetailsReq_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__GetBillingAgreementCustomerDetailsReq(struct soap*, _ns1__GetBillingAgreementCustomerDetailsReq *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__GetBillingAgreementCustomerDetailsReq(struct soap*, const char *, int, _ns1__GetBillingAgreementCustomerDetailsReq *const*, const char *);
SOAP_FMAC3 _ns1__GetBillingAgreementCustomerDetailsReq ** SOAP_FMAC4 soap_in_PointerTo_ns1__GetBillingAgreementCustomerDetailsReq(struct soap*, const char*, _ns1__GetBillingAgreementCustomerDetailsReq **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__GetBillingAgreementCustomerDetailsReq(struct soap*, _ns1__GetBillingAgreementCustomerDetailsReq *const*, const char*, const char*);
SOAP_FMAC3 _ns1__GetBillingAgreementCustomerDetailsReq ** SOAP_FMAC4 soap_get_PointerTo_ns1__GetBillingAgreementCustomerDetailsReq(struct soap*, _ns1__GetBillingAgreementCustomerDetailsReq **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__SetCustomerBillingAgreementReq_DEFINED
#define SOAP_TYPE_PointerTo_ns1__SetCustomerBillingAgreementReq_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__SetCustomerBillingAgreementReq(struct soap*, _ns1__SetCustomerBillingAgreementReq *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__SetCustomerBillingAgreementReq(struct soap*, const char *, int, _ns1__SetCustomerBillingAgreementReq *const*, const char *);
SOAP_FMAC3 _ns1__SetCustomerBillingAgreementReq ** SOAP_FMAC4 soap_in_PointerTo_ns1__SetCustomerBillingAgreementReq(struct soap*, const char*, _ns1__SetCustomerBillingAgreementReq **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__SetCustomerBillingAgreementReq(struct soap*, _ns1__SetCustomerBillingAgreementReq *const*, const char*, const char*);
SOAP_FMAC3 _ns1__SetCustomerBillingAgreementReq ** SOAP_FMAC4 soap_get_PointerTo_ns1__SetCustomerBillingAgreementReq(struct soap*, _ns1__SetCustomerBillingAgreementReq **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__DoUATPAuthorizationReq_DEFINED
#define SOAP_TYPE_PointerTo_ns1__DoUATPAuthorizationReq_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__DoUATPAuthorizationReq(struct soap*, _ns1__DoUATPAuthorizationReq *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__DoUATPAuthorizationReq(struct soap*, const char *, int, _ns1__DoUATPAuthorizationReq *const*, const char *);
SOAP_FMAC3 _ns1__DoUATPAuthorizationReq ** SOAP_FMAC4 soap_in_PointerTo_ns1__DoUATPAuthorizationReq(struct soap*, const char*, _ns1__DoUATPAuthorizationReq **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__DoUATPAuthorizationReq(struct soap*, _ns1__DoUATPAuthorizationReq *const*, const char*, const char*);
SOAP_FMAC3 _ns1__DoUATPAuthorizationReq ** SOAP_FMAC4 soap_get_PointerTo_ns1__DoUATPAuthorizationReq(struct soap*, _ns1__DoUATPAuthorizationReq **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__UpdateAuthorizationReq_DEFINED
#define SOAP_TYPE_PointerTo_ns1__UpdateAuthorizationReq_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__UpdateAuthorizationReq(struct soap*, _ns1__UpdateAuthorizationReq *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__UpdateAuthorizationReq(struct soap*, const char *, int, _ns1__UpdateAuthorizationReq *const*, const char *);
SOAP_FMAC3 _ns1__UpdateAuthorizationReq ** SOAP_FMAC4 soap_in_PointerTo_ns1__UpdateAuthorizationReq(struct soap*, const char*, _ns1__UpdateAuthorizationReq **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__UpdateAuthorizationReq(struct soap*, _ns1__UpdateAuthorizationReq *const*, const char*, const char*);
SOAP_FMAC3 _ns1__UpdateAuthorizationReq ** SOAP_FMAC4 soap_get_PointerTo_ns1__UpdateAuthorizationReq(struct soap*, _ns1__UpdateAuthorizationReq **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__DoAuthorizationReq_DEFINED
#define SOAP_TYPE_PointerTo_ns1__DoAuthorizationReq_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__DoAuthorizationReq(struct soap*, _ns1__DoAuthorizationReq *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__DoAuthorizationReq(struct soap*, const char *, int, _ns1__DoAuthorizationReq *const*, const char *);
SOAP_FMAC3 _ns1__DoAuthorizationReq ** SOAP_FMAC4 soap_in_PointerTo_ns1__DoAuthorizationReq(struct soap*, const char*, _ns1__DoAuthorizationReq **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__DoAuthorizationReq(struct soap*, _ns1__DoAuthorizationReq *const*, const char*, const char*);
SOAP_FMAC3 _ns1__DoAuthorizationReq ** SOAP_FMAC4 soap_get_PointerTo_ns1__DoAuthorizationReq(struct soap*, _ns1__DoAuthorizationReq **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__DoVoidReq_DEFINED
#define SOAP_TYPE_PointerTo_ns1__DoVoidReq_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__DoVoidReq(struct soap*, _ns1__DoVoidReq *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__DoVoidReq(struct soap*, const char *, int, _ns1__DoVoidReq *const*, const char *);
SOAP_FMAC3 _ns1__DoVoidReq ** SOAP_FMAC4 soap_in_PointerTo_ns1__DoVoidReq(struct soap*, const char*, _ns1__DoVoidReq **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__DoVoidReq(struct soap*, _ns1__DoVoidReq *const*, const char*, const char*);
SOAP_FMAC3 _ns1__DoVoidReq ** SOAP_FMAC4 soap_get_PointerTo_ns1__DoVoidReq(struct soap*, _ns1__DoVoidReq **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__DoReauthorizationReq_DEFINED
#define SOAP_TYPE_PointerTo_ns1__DoReauthorizationReq_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__DoReauthorizationReq(struct soap*, _ns1__DoReauthorizationReq *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__DoReauthorizationReq(struct soap*, const char *, int, _ns1__DoReauthorizationReq *const*, const char *);
SOAP_FMAC3 _ns1__DoReauthorizationReq ** SOAP_FMAC4 soap_in_PointerTo_ns1__DoReauthorizationReq(struct soap*, const char*, _ns1__DoReauthorizationReq **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__DoReauthorizationReq(struct soap*, _ns1__DoReauthorizationReq *const*, const char*, const char*);
SOAP_FMAC3 _ns1__DoReauthorizationReq ** SOAP_FMAC4 soap_get_PointerTo_ns1__DoReauthorizationReq(struct soap*, _ns1__DoReauthorizationReq **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__DoCaptureReq_DEFINED
#define SOAP_TYPE_PointerTo_ns1__DoCaptureReq_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__DoCaptureReq(struct soap*, _ns1__DoCaptureReq *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__DoCaptureReq(struct soap*, const char *, int, _ns1__DoCaptureReq *const*, const char *);
SOAP_FMAC3 _ns1__DoCaptureReq ** SOAP_FMAC4 soap_in_PointerTo_ns1__DoCaptureReq(struct soap*, const char*, _ns1__DoCaptureReq **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__DoCaptureReq(struct soap*, _ns1__DoCaptureReq *const*, const char*, const char*);
SOAP_FMAC3 _ns1__DoCaptureReq ** SOAP_FMAC4 soap_get_PointerTo_ns1__DoCaptureReq(struct soap*, _ns1__DoCaptureReq **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__DoCancelReq_DEFINED
#define SOAP_TYPE_PointerTo_ns1__DoCancelReq_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__DoCancelReq(struct soap*, _ns1__DoCancelReq *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__DoCancelReq(struct soap*, const char *, int, _ns1__DoCancelReq *const*, const char *);
SOAP_FMAC3 _ns1__DoCancelReq ** SOAP_FMAC4 soap_in_PointerTo_ns1__DoCancelReq(struct soap*, const char*, _ns1__DoCancelReq **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__DoCancelReq(struct soap*, _ns1__DoCancelReq *const*, const char*, const char*);
SOAP_FMAC3 _ns1__DoCancelReq ** SOAP_FMAC4 soap_get_PointerTo_ns1__DoCancelReq(struct soap*, _ns1__DoCancelReq **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__ManagePendingTransactionStatusReq_DEFINED
#define SOAP_TYPE_PointerTo_ns1__ManagePendingTransactionStatusReq_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__ManagePendingTransactionStatusReq(struct soap*, _ns1__ManagePendingTransactionStatusReq *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__ManagePendingTransactionStatusReq(struct soap*, const char *, int, _ns1__ManagePendingTransactionStatusReq *const*, const char *);
SOAP_FMAC3 _ns1__ManagePendingTransactionStatusReq ** SOAP_FMAC4 soap_in_PointerTo_ns1__ManagePendingTransactionStatusReq(struct soap*, const char*, _ns1__ManagePendingTransactionStatusReq **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__ManagePendingTransactionStatusReq(struct soap*, _ns1__ManagePendingTransactionStatusReq *const*, const char*, const char*);
SOAP_FMAC3 _ns1__ManagePendingTransactionStatusReq ** SOAP_FMAC4 soap_get_PointerTo_ns1__ManagePendingTransactionStatusReq(struct soap*, _ns1__ManagePendingTransactionStatusReq **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__DoDirectPaymentReq_DEFINED
#define SOAP_TYPE_PointerTo_ns1__DoDirectPaymentReq_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__DoDirectPaymentReq(struct soap*, _ns1__DoDirectPaymentReq *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__DoDirectPaymentReq(struct soap*, const char *, int, _ns1__DoDirectPaymentReq *const*, const char *);
SOAP_FMAC3 _ns1__DoDirectPaymentReq ** SOAP_FMAC4 soap_in_PointerTo_ns1__DoDirectPaymentReq(struct soap*, const char*, _ns1__DoDirectPaymentReq **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__DoDirectPaymentReq(struct soap*, _ns1__DoDirectPaymentReq *const*, const char*, const char*);
SOAP_FMAC3 _ns1__DoDirectPaymentReq ** SOAP_FMAC4 soap_get_PointerTo_ns1__DoDirectPaymentReq(struct soap*, _ns1__DoDirectPaymentReq **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__GetExpressCheckoutDetailsReq_DEFINED
#define SOAP_TYPE_PointerTo_ns1__GetExpressCheckoutDetailsReq_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__GetExpressCheckoutDetailsReq(struct soap*, _ns1__GetExpressCheckoutDetailsReq *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__GetExpressCheckoutDetailsReq(struct soap*, const char *, int, _ns1__GetExpressCheckoutDetailsReq *const*, const char *);
SOAP_FMAC3 _ns1__GetExpressCheckoutDetailsReq ** SOAP_FMAC4 soap_in_PointerTo_ns1__GetExpressCheckoutDetailsReq(struct soap*, const char*, _ns1__GetExpressCheckoutDetailsReq **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__GetExpressCheckoutDetailsReq(struct soap*, _ns1__GetExpressCheckoutDetailsReq *const*, const char*, const char*);
SOAP_FMAC3 _ns1__GetExpressCheckoutDetailsReq ** SOAP_FMAC4 soap_get_PointerTo_ns1__GetExpressCheckoutDetailsReq(struct soap*, _ns1__GetExpressCheckoutDetailsReq **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__ExecuteCheckoutOperationsReq_DEFINED
#define SOAP_TYPE_PointerTo_ns1__ExecuteCheckoutOperationsReq_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__ExecuteCheckoutOperationsReq(struct soap*, _ns1__ExecuteCheckoutOperationsReq *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__ExecuteCheckoutOperationsReq(struct soap*, const char *, int, _ns1__ExecuteCheckoutOperationsReq *const*, const char *);
SOAP_FMAC3 _ns1__ExecuteCheckoutOperationsReq ** SOAP_FMAC4 soap_in_PointerTo_ns1__ExecuteCheckoutOperationsReq(struct soap*, const char*, _ns1__ExecuteCheckoutOperationsReq **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__ExecuteCheckoutOperationsReq(struct soap*, _ns1__ExecuteCheckoutOperationsReq *const*, const char*, const char*);
SOAP_FMAC3 _ns1__ExecuteCheckoutOperationsReq ** SOAP_FMAC4 soap_get_PointerTo_ns1__ExecuteCheckoutOperationsReq(struct soap*, _ns1__ExecuteCheckoutOperationsReq **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__SetExpressCheckoutReq_DEFINED
#define SOAP_TYPE_PointerTo_ns1__SetExpressCheckoutReq_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__SetExpressCheckoutReq(struct soap*, _ns1__SetExpressCheckoutReq *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__SetExpressCheckoutReq(struct soap*, const char *, int, _ns1__SetExpressCheckoutReq *const*, const char *);
SOAP_FMAC3 _ns1__SetExpressCheckoutReq ** SOAP_FMAC4 soap_in_PointerTo_ns1__SetExpressCheckoutReq(struct soap*, const char*, _ns1__SetExpressCheckoutReq **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__SetExpressCheckoutReq(struct soap*, _ns1__SetExpressCheckoutReq *const*, const char*, const char*);
SOAP_FMAC3 _ns1__SetExpressCheckoutReq ** SOAP_FMAC4 soap_get_PointerTo_ns1__SetExpressCheckoutReq(struct soap*, _ns1__SetExpressCheckoutReq **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__GetIncentiveEvaluationReq_DEFINED
#define SOAP_TYPE_PointerTo_ns1__GetIncentiveEvaluationReq_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__GetIncentiveEvaluationReq(struct soap*, _ns1__GetIncentiveEvaluationReq *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__GetIncentiveEvaluationReq(struct soap*, const char *, int, _ns1__GetIncentiveEvaluationReq *const*, const char *);
SOAP_FMAC3 _ns1__GetIncentiveEvaluationReq ** SOAP_FMAC4 soap_in_PointerTo_ns1__GetIncentiveEvaluationReq(struct soap*, const char*, _ns1__GetIncentiveEvaluationReq **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__GetIncentiveEvaluationReq(struct soap*, _ns1__GetIncentiveEvaluationReq *const*, const char*, const char*);
SOAP_FMAC3 _ns1__GetIncentiveEvaluationReq ** SOAP_FMAC4 soap_get_PointerTo_ns1__GetIncentiveEvaluationReq(struct soap*, _ns1__GetIncentiveEvaluationReq **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__GetAccessPermissionDetailsReq_DEFINED
#define SOAP_TYPE_PointerTo_ns1__GetAccessPermissionDetailsReq_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__GetAccessPermissionDetailsReq(struct soap*, _ns1__GetAccessPermissionDetailsReq *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__GetAccessPermissionDetailsReq(struct soap*, const char *, int, _ns1__GetAccessPermissionDetailsReq *const*, const char *);
SOAP_FMAC3 _ns1__GetAccessPermissionDetailsReq ** SOAP_FMAC4 soap_in_PointerTo_ns1__GetAccessPermissionDetailsReq(struct soap*, const char*, _ns1__GetAccessPermissionDetailsReq **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__GetAccessPermissionDetailsReq(struct soap*, _ns1__GetAccessPermissionDetailsReq *const*, const char*, const char*);
SOAP_FMAC3 _ns1__GetAccessPermissionDetailsReq ** SOAP_FMAC4 soap_get_PointerTo_ns1__GetAccessPermissionDetailsReq(struct soap*, _ns1__GetAccessPermissionDetailsReq **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__UpdateAccessPermissionsReq_DEFINED
#define SOAP_TYPE_PointerTo_ns1__UpdateAccessPermissionsReq_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__UpdateAccessPermissionsReq(struct soap*, _ns1__UpdateAccessPermissionsReq *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__UpdateAccessPermissionsReq(struct soap*, const char *, int, _ns1__UpdateAccessPermissionsReq *const*, const char *);
SOAP_FMAC3 _ns1__UpdateAccessPermissionsReq ** SOAP_FMAC4 soap_in_PointerTo_ns1__UpdateAccessPermissionsReq(struct soap*, const char*, _ns1__UpdateAccessPermissionsReq **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__UpdateAccessPermissionsReq(struct soap*, _ns1__UpdateAccessPermissionsReq *const*, const char*, const char*);
SOAP_FMAC3 _ns1__UpdateAccessPermissionsReq ** SOAP_FMAC4 soap_get_PointerTo_ns1__UpdateAccessPermissionsReq(struct soap*, _ns1__UpdateAccessPermissionsReq **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__SetAccessPermissionsReq_DEFINED
#define SOAP_TYPE_PointerTo_ns1__SetAccessPermissionsReq_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__SetAccessPermissionsReq(struct soap*, _ns1__SetAccessPermissionsReq *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__SetAccessPermissionsReq(struct soap*, const char *, int, _ns1__SetAccessPermissionsReq *const*, const char *);
SOAP_FMAC3 _ns1__SetAccessPermissionsReq ** SOAP_FMAC4 soap_in_PointerTo_ns1__SetAccessPermissionsReq(struct soap*, const char*, _ns1__SetAccessPermissionsReq **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__SetAccessPermissionsReq(struct soap*, _ns1__SetAccessPermissionsReq *const*, const char*, const char*);
SOAP_FMAC3 _ns1__SetAccessPermissionsReq ** SOAP_FMAC4 soap_get_PointerTo_ns1__SetAccessPermissionsReq(struct soap*, _ns1__SetAccessPermissionsReq **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__GetAuthDetailsReq_DEFINED
#define SOAP_TYPE_PointerTo_ns1__GetAuthDetailsReq_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__GetAuthDetailsReq(struct soap*, _ns1__GetAuthDetailsReq *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__GetAuthDetailsReq(struct soap*, const char *, int, _ns1__GetAuthDetailsReq *const*, const char *);
SOAP_FMAC3 _ns1__GetAuthDetailsReq ** SOAP_FMAC4 soap_in_PointerTo_ns1__GetAuthDetailsReq(struct soap*, const char*, _ns1__GetAuthDetailsReq **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__GetAuthDetailsReq(struct soap*, _ns1__GetAuthDetailsReq *const*, const char*, const char*);
SOAP_FMAC3 _ns1__GetAuthDetailsReq ** SOAP_FMAC4 soap_get_PointerTo_ns1__GetAuthDetailsReq(struct soap*, _ns1__GetAuthDetailsReq **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__SetAuthFlowParamReq_DEFINED
#define SOAP_TYPE_PointerTo_ns1__SetAuthFlowParamReq_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__SetAuthFlowParamReq(struct soap*, _ns1__SetAuthFlowParamReq *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__SetAuthFlowParamReq(struct soap*, const char *, int, _ns1__SetAuthFlowParamReq *const*, const char *);
SOAP_FMAC3 _ns1__SetAuthFlowParamReq ** SOAP_FMAC4 soap_in_PointerTo_ns1__SetAuthFlowParamReq(struct soap*, const char*, _ns1__SetAuthFlowParamReq **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__SetAuthFlowParamReq(struct soap*, _ns1__SetAuthFlowParamReq *const*, const char*, const char*);
SOAP_FMAC3 _ns1__SetAuthFlowParamReq ** SOAP_FMAC4 soap_get_PointerTo_ns1__SetAuthFlowParamReq(struct soap*, _ns1__SetAuthFlowParamReq **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__DoUATPExpressCheckoutPaymentReq_DEFINED
#define SOAP_TYPE_PointerTo_ns1__DoUATPExpressCheckoutPaymentReq_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__DoUATPExpressCheckoutPaymentReq(struct soap*, _ns1__DoUATPExpressCheckoutPaymentReq *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__DoUATPExpressCheckoutPaymentReq(struct soap*, const char *, int, _ns1__DoUATPExpressCheckoutPaymentReq *const*, const char *);
SOAP_FMAC3 _ns1__DoUATPExpressCheckoutPaymentReq ** SOAP_FMAC4 soap_in_PointerTo_ns1__DoUATPExpressCheckoutPaymentReq(struct soap*, const char*, _ns1__DoUATPExpressCheckoutPaymentReq **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__DoUATPExpressCheckoutPaymentReq(struct soap*, _ns1__DoUATPExpressCheckoutPaymentReq *const*, const char*, const char*);
SOAP_FMAC3 _ns1__DoUATPExpressCheckoutPaymentReq ** SOAP_FMAC4 soap_get_PointerTo_ns1__DoUATPExpressCheckoutPaymentReq(struct soap*, _ns1__DoUATPExpressCheckoutPaymentReq **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__DoExpressCheckoutPaymentReq_DEFINED
#define SOAP_TYPE_PointerTo_ns1__DoExpressCheckoutPaymentReq_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__DoExpressCheckoutPaymentReq(struct soap*, _ns1__DoExpressCheckoutPaymentReq *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__DoExpressCheckoutPaymentReq(struct soap*, const char *, int, _ns1__DoExpressCheckoutPaymentReq *const*, const char *);
SOAP_FMAC3 _ns1__DoExpressCheckoutPaymentReq ** SOAP_FMAC4 soap_in_PointerTo_ns1__DoExpressCheckoutPaymentReq(struct soap*, const char*, _ns1__DoExpressCheckoutPaymentReq **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__DoExpressCheckoutPaymentReq(struct soap*, _ns1__DoExpressCheckoutPaymentReq *const*, const char*, const char*);
SOAP_FMAC3 _ns1__DoExpressCheckoutPaymentReq ** SOAP_FMAC4 soap_get_PointerTo_ns1__DoExpressCheckoutPaymentReq(struct soap*, _ns1__DoExpressCheckoutPaymentReq **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__GetPalDetailsReq_DEFINED
#define SOAP_TYPE_PointerTo_ns1__GetPalDetailsReq_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__GetPalDetailsReq(struct soap*, _ns1__GetPalDetailsReq *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__GetPalDetailsReq(struct soap*, const char *, int, _ns1__GetPalDetailsReq *const*, const char *);
SOAP_FMAC3 _ns1__GetPalDetailsReq ** SOAP_FMAC4 soap_in_PointerTo_ns1__GetPalDetailsReq(struct soap*, const char*, _ns1__GetPalDetailsReq **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__GetPalDetailsReq(struct soap*, _ns1__GetPalDetailsReq *const*, const char*, const char*);
SOAP_FMAC3 _ns1__GetPalDetailsReq ** SOAP_FMAC4 soap_get_PointerTo_ns1__GetPalDetailsReq(struct soap*, _ns1__GetPalDetailsReq **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__GetBalanceReq_DEFINED
#define SOAP_TYPE_PointerTo_ns1__GetBalanceReq_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__GetBalanceReq(struct soap*, _ns1__GetBalanceReq *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__GetBalanceReq(struct soap*, const char *, int, _ns1__GetBalanceReq *const*, const char *);
SOAP_FMAC3 _ns1__GetBalanceReq ** SOAP_FMAC4 soap_in_PointerTo_ns1__GetBalanceReq(struct soap*, const char*, _ns1__GetBalanceReq **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__GetBalanceReq(struct soap*, _ns1__GetBalanceReq *const*, const char*, const char*);
SOAP_FMAC3 _ns1__GetBalanceReq ** SOAP_FMAC4 soap_get_PointerTo_ns1__GetBalanceReq(struct soap*, _ns1__GetBalanceReq **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__DoMobileCheckoutPaymentReq_DEFINED
#define SOAP_TYPE_PointerTo_ns1__DoMobileCheckoutPaymentReq_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__DoMobileCheckoutPaymentReq(struct soap*, _ns1__DoMobileCheckoutPaymentReq *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__DoMobileCheckoutPaymentReq(struct soap*, const char *, int, _ns1__DoMobileCheckoutPaymentReq *const*, const char *);
SOAP_FMAC3 _ns1__DoMobileCheckoutPaymentReq ** SOAP_FMAC4 soap_in_PointerTo_ns1__DoMobileCheckoutPaymentReq(struct soap*, const char*, _ns1__DoMobileCheckoutPaymentReq **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__DoMobileCheckoutPaymentReq(struct soap*, _ns1__DoMobileCheckoutPaymentReq *const*, const char*, const char*);
SOAP_FMAC3 _ns1__DoMobileCheckoutPaymentReq ** SOAP_FMAC4 soap_get_PointerTo_ns1__DoMobileCheckoutPaymentReq(struct soap*, _ns1__DoMobileCheckoutPaymentReq **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__SetMobileCheckoutReq_DEFINED
#define SOAP_TYPE_PointerTo_ns1__SetMobileCheckoutReq_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__SetMobileCheckoutReq(struct soap*, _ns1__SetMobileCheckoutReq *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__SetMobileCheckoutReq(struct soap*, const char *, int, _ns1__SetMobileCheckoutReq *const*, const char *);
SOAP_FMAC3 _ns1__SetMobileCheckoutReq ** SOAP_FMAC4 soap_in_PointerTo_ns1__SetMobileCheckoutReq(struct soap*, const char*, _ns1__SetMobileCheckoutReq **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__SetMobileCheckoutReq(struct soap*, _ns1__SetMobileCheckoutReq *const*, const char*, const char*);
SOAP_FMAC3 _ns1__SetMobileCheckoutReq ** SOAP_FMAC4 soap_get_PointerTo_ns1__SetMobileCheckoutReq(struct soap*, _ns1__SetMobileCheckoutReq **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__GetMobileStatusReq_DEFINED
#define SOAP_TYPE_PointerTo_ns1__GetMobileStatusReq_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__GetMobileStatusReq(struct soap*, _ns1__GetMobileStatusReq *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__GetMobileStatusReq(struct soap*, const char *, int, _ns1__GetMobileStatusReq *const*, const char *);
SOAP_FMAC3 _ns1__GetMobileStatusReq ** SOAP_FMAC4 soap_in_PointerTo_ns1__GetMobileStatusReq(struct soap*, const char*, _ns1__GetMobileStatusReq **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__GetMobileStatusReq(struct soap*, _ns1__GetMobileStatusReq *const*, const char*, const char*);
SOAP_FMAC3 _ns1__GetMobileStatusReq ** SOAP_FMAC4 soap_get_PointerTo_ns1__GetMobileStatusReq(struct soap*, _ns1__GetMobileStatusReq **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__CreateMobilePaymentReq_DEFINED
#define SOAP_TYPE_PointerTo_ns1__CreateMobilePaymentReq_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__CreateMobilePaymentReq(struct soap*, _ns1__CreateMobilePaymentReq *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__CreateMobilePaymentReq(struct soap*, const char *, int, _ns1__CreateMobilePaymentReq *const*, const char *);
SOAP_FMAC3 _ns1__CreateMobilePaymentReq ** SOAP_FMAC4 soap_in_PointerTo_ns1__CreateMobilePaymentReq(struct soap*, const char*, _ns1__CreateMobilePaymentReq **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__CreateMobilePaymentReq(struct soap*, _ns1__CreateMobilePaymentReq *const*, const char*, const char*);
SOAP_FMAC3 _ns1__CreateMobilePaymentReq ** SOAP_FMAC4 soap_get_PointerTo_ns1__CreateMobilePaymentReq(struct soap*, _ns1__CreateMobilePaymentReq **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__GetBoardingDetailsReq_DEFINED
#define SOAP_TYPE_PointerTo_ns1__GetBoardingDetailsReq_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__GetBoardingDetailsReq(struct soap*, _ns1__GetBoardingDetailsReq *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__GetBoardingDetailsReq(struct soap*, const char *, int, _ns1__GetBoardingDetailsReq *const*, const char *);
SOAP_FMAC3 _ns1__GetBoardingDetailsReq ** SOAP_FMAC4 soap_in_PointerTo_ns1__GetBoardingDetailsReq(struct soap*, const char*, _ns1__GetBoardingDetailsReq **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__GetBoardingDetailsReq(struct soap*, _ns1__GetBoardingDetailsReq *const*, const char*, const char*);
SOAP_FMAC3 _ns1__GetBoardingDetailsReq ** SOAP_FMAC4 soap_get_PointerTo_ns1__GetBoardingDetailsReq(struct soap*, _ns1__GetBoardingDetailsReq **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__EnterBoardingReq_DEFINED
#define SOAP_TYPE_PointerTo_ns1__EnterBoardingReq_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__EnterBoardingReq(struct soap*, _ns1__EnterBoardingReq *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__EnterBoardingReq(struct soap*, const char *, int, _ns1__EnterBoardingReq *const*, const char *);
SOAP_FMAC3 _ns1__EnterBoardingReq ** SOAP_FMAC4 soap_in_PointerTo_ns1__EnterBoardingReq(struct soap*, const char*, _ns1__EnterBoardingReq **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__EnterBoardingReq(struct soap*, _ns1__EnterBoardingReq *const*, const char*, const char*);
SOAP_FMAC3 _ns1__EnterBoardingReq ** SOAP_FMAC4 soap_get_PointerTo_ns1__EnterBoardingReq(struct soap*, _ns1__EnterBoardingReq **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__AddressVerifyReq_DEFINED
#define SOAP_TYPE_PointerTo_ns1__AddressVerifyReq_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__AddressVerifyReq(struct soap*, _ns1__AddressVerifyReq *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__AddressVerifyReq(struct soap*, const char *, int, _ns1__AddressVerifyReq *const*, const char *);
SOAP_FMAC3 _ns1__AddressVerifyReq ** SOAP_FMAC4 soap_in_PointerTo_ns1__AddressVerifyReq(struct soap*, const char*, _ns1__AddressVerifyReq **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__AddressVerifyReq(struct soap*, _ns1__AddressVerifyReq *const*, const char*, const char*);
SOAP_FMAC3 _ns1__AddressVerifyReq ** SOAP_FMAC4 soap_get_PointerTo_ns1__AddressVerifyReq(struct soap*, _ns1__AddressVerifyReq **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__BillAgreementUpdateReq_DEFINED
#define SOAP_TYPE_PointerTo_ns1__BillAgreementUpdateReq_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__BillAgreementUpdateReq(struct soap*, _ns1__BillAgreementUpdateReq *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__BillAgreementUpdateReq(struct soap*, const char *, int, _ns1__BillAgreementUpdateReq *const*, const char *);
SOAP_FMAC3 _ns1__BillAgreementUpdateReq ** SOAP_FMAC4 soap_in_PointerTo_ns1__BillAgreementUpdateReq(struct soap*, const char*, _ns1__BillAgreementUpdateReq **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__BillAgreementUpdateReq(struct soap*, _ns1__BillAgreementUpdateReq *const*, const char*, const char*);
SOAP_FMAC3 _ns1__BillAgreementUpdateReq ** SOAP_FMAC4 soap_get_PointerTo_ns1__BillAgreementUpdateReq(struct soap*, _ns1__BillAgreementUpdateReq **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__MassPayReq_DEFINED
#define SOAP_TYPE_PointerTo_ns1__MassPayReq_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__MassPayReq(struct soap*, _ns1__MassPayReq *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__MassPayReq(struct soap*, const char *, int, _ns1__MassPayReq *const*, const char *);
SOAP_FMAC3 _ns1__MassPayReq ** SOAP_FMAC4 soap_in_PointerTo_ns1__MassPayReq(struct soap*, const char*, _ns1__MassPayReq **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__MassPayReq(struct soap*, _ns1__MassPayReq *const*, const char*, const char*);
SOAP_FMAC3 _ns1__MassPayReq ** SOAP_FMAC4 soap_get_PointerTo_ns1__MassPayReq(struct soap*, _ns1__MassPayReq **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__TransactionSearchReq_DEFINED
#define SOAP_TYPE_PointerTo_ns1__TransactionSearchReq_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__TransactionSearchReq(struct soap*, _ns1__TransactionSearchReq *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__TransactionSearchReq(struct soap*, const char *, int, _ns1__TransactionSearchReq *const*, const char *);
SOAP_FMAC3 _ns1__TransactionSearchReq ** SOAP_FMAC4 soap_in_PointerTo_ns1__TransactionSearchReq(struct soap*, const char*, _ns1__TransactionSearchReq **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__TransactionSearchReq(struct soap*, _ns1__TransactionSearchReq *const*, const char*, const char*);
SOAP_FMAC3 _ns1__TransactionSearchReq ** SOAP_FMAC4 soap_get_PointerTo_ns1__TransactionSearchReq(struct soap*, _ns1__TransactionSearchReq **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__BillUserReq_DEFINED
#define SOAP_TYPE_PointerTo_ns1__BillUserReq_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__BillUserReq(struct soap*, _ns1__BillUserReq *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__BillUserReq(struct soap*, const char *, int, _ns1__BillUserReq *const*, const char *);
SOAP_FMAC3 _ns1__BillUserReq ** SOAP_FMAC4 soap_in_PointerTo_ns1__BillUserReq(struct soap*, const char*, _ns1__BillUserReq **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__BillUserReq(struct soap*, _ns1__BillUserReq *const*, const char*, const char*);
SOAP_FMAC3 _ns1__BillUserReq ** SOAP_FMAC4 soap_get_PointerTo_ns1__BillUserReq(struct soap*, _ns1__BillUserReq **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__BMButtonSearchReq_DEFINED
#define SOAP_TYPE_PointerTo_ns1__BMButtonSearchReq_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__BMButtonSearchReq(struct soap*, _ns1__BMButtonSearchReq *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__BMButtonSearchReq(struct soap*, const char *, int, _ns1__BMButtonSearchReq *const*, const char *);
SOAP_FMAC3 _ns1__BMButtonSearchReq ** SOAP_FMAC4 soap_in_PointerTo_ns1__BMButtonSearchReq(struct soap*, const char*, _ns1__BMButtonSearchReq **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__BMButtonSearchReq(struct soap*, _ns1__BMButtonSearchReq *const*, const char*, const char*);
SOAP_FMAC3 _ns1__BMButtonSearchReq ** SOAP_FMAC4 soap_get_PointerTo_ns1__BMButtonSearchReq(struct soap*, _ns1__BMButtonSearchReq **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__BMManageButtonStatusReq_DEFINED
#define SOAP_TYPE_PointerTo_ns1__BMManageButtonStatusReq_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__BMManageButtonStatusReq(struct soap*, _ns1__BMManageButtonStatusReq *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__BMManageButtonStatusReq(struct soap*, const char *, int, _ns1__BMManageButtonStatusReq *const*, const char *);
SOAP_FMAC3 _ns1__BMManageButtonStatusReq ** SOAP_FMAC4 soap_in_PointerTo_ns1__BMManageButtonStatusReq(struct soap*, const char*, _ns1__BMManageButtonStatusReq **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__BMManageButtonStatusReq(struct soap*, _ns1__BMManageButtonStatusReq *const*, const char*, const char*);
SOAP_FMAC3 _ns1__BMManageButtonStatusReq ** SOAP_FMAC4 soap_get_PointerTo_ns1__BMManageButtonStatusReq(struct soap*, _ns1__BMManageButtonStatusReq **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__BMGetInventoryReq_DEFINED
#define SOAP_TYPE_PointerTo_ns1__BMGetInventoryReq_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__BMGetInventoryReq(struct soap*, _ns1__BMGetInventoryReq *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__BMGetInventoryReq(struct soap*, const char *, int, _ns1__BMGetInventoryReq *const*, const char *);
SOAP_FMAC3 _ns1__BMGetInventoryReq ** SOAP_FMAC4 soap_in_PointerTo_ns1__BMGetInventoryReq(struct soap*, const char*, _ns1__BMGetInventoryReq **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__BMGetInventoryReq(struct soap*, _ns1__BMGetInventoryReq *const*, const char*, const char*);
SOAP_FMAC3 _ns1__BMGetInventoryReq ** SOAP_FMAC4 soap_get_PointerTo_ns1__BMGetInventoryReq(struct soap*, _ns1__BMGetInventoryReq **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__BMGetButtonDetailsReq_DEFINED
#define SOAP_TYPE_PointerTo_ns1__BMGetButtonDetailsReq_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__BMGetButtonDetailsReq(struct soap*, _ns1__BMGetButtonDetailsReq *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__BMGetButtonDetailsReq(struct soap*, const char *, int, _ns1__BMGetButtonDetailsReq *const*, const char *);
SOAP_FMAC3 _ns1__BMGetButtonDetailsReq ** SOAP_FMAC4 soap_in_PointerTo_ns1__BMGetButtonDetailsReq(struct soap*, const char*, _ns1__BMGetButtonDetailsReq **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__BMGetButtonDetailsReq(struct soap*, _ns1__BMGetButtonDetailsReq *const*, const char*, const char*);
SOAP_FMAC3 _ns1__BMGetButtonDetailsReq ** SOAP_FMAC4 soap_get_PointerTo_ns1__BMGetButtonDetailsReq(struct soap*, _ns1__BMGetButtonDetailsReq **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__BMSetInventoryReq_DEFINED
#define SOAP_TYPE_PointerTo_ns1__BMSetInventoryReq_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__BMSetInventoryReq(struct soap*, _ns1__BMSetInventoryReq *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__BMSetInventoryReq(struct soap*, const char *, int, _ns1__BMSetInventoryReq *const*, const char *);
SOAP_FMAC3 _ns1__BMSetInventoryReq ** SOAP_FMAC4 soap_in_PointerTo_ns1__BMSetInventoryReq(struct soap*, const char*, _ns1__BMSetInventoryReq **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__BMSetInventoryReq(struct soap*, _ns1__BMSetInventoryReq *const*, const char*, const char*);
SOAP_FMAC3 _ns1__BMSetInventoryReq ** SOAP_FMAC4 soap_get_PointerTo_ns1__BMSetInventoryReq(struct soap*, _ns1__BMSetInventoryReq **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__BMUpdateButtonReq_DEFINED
#define SOAP_TYPE_PointerTo_ns1__BMUpdateButtonReq_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__BMUpdateButtonReq(struct soap*, _ns1__BMUpdateButtonReq *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__BMUpdateButtonReq(struct soap*, const char *, int, _ns1__BMUpdateButtonReq *const*, const char *);
SOAP_FMAC3 _ns1__BMUpdateButtonReq ** SOAP_FMAC4 soap_in_PointerTo_ns1__BMUpdateButtonReq(struct soap*, const char*, _ns1__BMUpdateButtonReq **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__BMUpdateButtonReq(struct soap*, _ns1__BMUpdateButtonReq *const*, const char*, const char*);
SOAP_FMAC3 _ns1__BMUpdateButtonReq ** SOAP_FMAC4 soap_get_PointerTo_ns1__BMUpdateButtonReq(struct soap*, _ns1__BMUpdateButtonReq **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__BMCreateButtonReq_DEFINED
#define SOAP_TYPE_PointerTo_ns1__BMCreateButtonReq_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__BMCreateButtonReq(struct soap*, _ns1__BMCreateButtonReq *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__BMCreateButtonReq(struct soap*, const char *, int, _ns1__BMCreateButtonReq *const*, const char *);
SOAP_FMAC3 _ns1__BMCreateButtonReq ** SOAP_FMAC4 soap_in_PointerTo_ns1__BMCreateButtonReq(struct soap*, const char*, _ns1__BMCreateButtonReq **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__BMCreateButtonReq(struct soap*, _ns1__BMCreateButtonReq *const*, const char*, const char*);
SOAP_FMAC3 _ns1__BMCreateButtonReq ** SOAP_FMAC4 soap_get_PointerTo_ns1__BMCreateButtonReq(struct soap*, _ns1__BMCreateButtonReq **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__GetTransactionDetailsReq_DEFINED
#define SOAP_TYPE_PointerTo_ns1__GetTransactionDetailsReq_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__GetTransactionDetailsReq(struct soap*, _ns1__GetTransactionDetailsReq *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__GetTransactionDetailsReq(struct soap*, const char *, int, _ns1__GetTransactionDetailsReq *const*, const char *);
SOAP_FMAC3 _ns1__GetTransactionDetailsReq ** SOAP_FMAC4 soap_in_PointerTo_ns1__GetTransactionDetailsReq(struct soap*, const char*, _ns1__GetTransactionDetailsReq **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__GetTransactionDetailsReq(struct soap*, _ns1__GetTransactionDetailsReq *const*, const char*, const char*);
SOAP_FMAC3 _ns1__GetTransactionDetailsReq ** SOAP_FMAC4 soap_get_PointerTo_ns1__GetTransactionDetailsReq(struct soap*, _ns1__GetTransactionDetailsReq **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__CancelRecoupReq_DEFINED
#define SOAP_TYPE_PointerTo_ns1__CancelRecoupReq_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__CancelRecoupReq(struct soap*, _ns1__CancelRecoupReq *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__CancelRecoupReq(struct soap*, const char *, int, _ns1__CancelRecoupReq *const*, const char *);
SOAP_FMAC3 _ns1__CancelRecoupReq ** SOAP_FMAC4 soap_in_PointerTo_ns1__CancelRecoupReq(struct soap*, const char*, _ns1__CancelRecoupReq **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__CancelRecoupReq(struct soap*, _ns1__CancelRecoupReq *const*, const char*, const char*);
SOAP_FMAC3 _ns1__CancelRecoupReq ** SOAP_FMAC4 soap_get_PointerTo_ns1__CancelRecoupReq(struct soap*, _ns1__CancelRecoupReq **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__CompleteRecoupReq_DEFINED
#define SOAP_TYPE_PointerTo_ns1__CompleteRecoupReq_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__CompleteRecoupReq(struct soap*, _ns1__CompleteRecoupReq *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__CompleteRecoupReq(struct soap*, const char *, int, _ns1__CompleteRecoupReq *const*, const char *);
SOAP_FMAC3 _ns1__CompleteRecoupReq ** SOAP_FMAC4 soap_in_PointerTo_ns1__CompleteRecoupReq(struct soap*, const char*, _ns1__CompleteRecoupReq **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__CompleteRecoupReq(struct soap*, _ns1__CompleteRecoupReq *const*, const char*, const char*);
SOAP_FMAC3 _ns1__CompleteRecoupReq ** SOAP_FMAC4 soap_get_PointerTo_ns1__CompleteRecoupReq(struct soap*, _ns1__CompleteRecoupReq **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__InitiateRecoupReq_DEFINED
#define SOAP_TYPE_PointerTo_ns1__InitiateRecoupReq_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__InitiateRecoupReq(struct soap*, _ns1__InitiateRecoupReq *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__InitiateRecoupReq(struct soap*, const char *, int, _ns1__InitiateRecoupReq *const*, const char *);
SOAP_FMAC3 _ns1__InitiateRecoupReq ** SOAP_FMAC4 soap_in_PointerTo_ns1__InitiateRecoupReq(struct soap*, const char*, _ns1__InitiateRecoupReq **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__InitiateRecoupReq(struct soap*, _ns1__InitiateRecoupReq *const*, const char*, const char*);
SOAP_FMAC3 _ns1__InitiateRecoupReq ** SOAP_FMAC4 soap_get_PointerTo_ns1__InitiateRecoupReq(struct soap*, _ns1__InitiateRecoupReq **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__RefundTransactionReq_DEFINED
#define SOAP_TYPE_PointerTo_ns1__RefundTransactionReq_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__RefundTransactionReq(struct soap*, _ns1__RefundTransactionReq *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__RefundTransactionReq(struct soap*, const char *, int, _ns1__RefundTransactionReq *const*, const char *);
SOAP_FMAC3 _ns1__RefundTransactionReq ** SOAP_FMAC4 soap_in_PointerTo_ns1__RefundTransactionReq(struct soap*, const char*, _ns1__RefundTransactionReq **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__RefundTransactionReq(struct soap*, _ns1__RefundTransactionReq *const*, const char*, const char*);
SOAP_FMAC3 _ns1__RefundTransactionReq ** SOAP_FMAC4 soap_get_PointerTo_ns1__RefundTransactionReq(struct soap*, _ns1__RefundTransactionReq **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__CustomSecurityHeaderType_DEFINED
#define SOAP_TYPE_PointerTons3__CustomSecurityHeaderType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__CustomSecurityHeaderType(struct soap*, ns3__CustomSecurityHeaderType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__CustomSecurityHeaderType(struct soap*, const char *, int, ns3__CustomSecurityHeaderType *const*, const char *);
SOAP_FMAC3 ns3__CustomSecurityHeaderType ** SOAP_FMAC4 soap_in_PointerTons3__CustomSecurityHeaderType(struct soap*, const char*, ns3__CustomSecurityHeaderType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__CustomSecurityHeaderType(struct soap*, ns3__CustomSecurityHeaderType *const*, const char*, const char*);
SOAP_FMAC3 ns3__CustomSecurityHeaderType ** SOAP_FMAC4 soap_get_PointerTons3__CustomSecurityHeaderType(struct soap*, ns3__CustomSecurityHeaderType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToxsd__token_DEFINED
#define SOAP_TYPE_PointerToxsd__token_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToxsd__token(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToxsd__token(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerToxsd__token(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToxsd__token(struct soap*, std::string *const*, const char*, const char*);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerToxsd__token(struct soap*, std::string **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__ReverseTransactionResponseDetailsType_DEFINED
#define SOAP_TYPE_PointerTons3__ReverseTransactionResponseDetailsType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__ReverseTransactionResponseDetailsType(struct soap*, ns3__ReverseTransactionResponseDetailsType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__ReverseTransactionResponseDetailsType(struct soap*, const char *, int, ns3__ReverseTransactionResponseDetailsType *const*, const char *);
SOAP_FMAC3 ns3__ReverseTransactionResponseDetailsType ** SOAP_FMAC4 soap_in_PointerTons3__ReverseTransactionResponseDetailsType(struct soap*, const char*, ns3__ReverseTransactionResponseDetailsType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__ReverseTransactionResponseDetailsType(struct soap*, ns3__ReverseTransactionResponseDetailsType *const*, const char*, const char*);
SOAP_FMAC3 ns3__ReverseTransactionResponseDetailsType ** SOAP_FMAC4 soap_get_PointerTons3__ReverseTransactionResponseDetailsType(struct soap*, ns3__ReverseTransactionResponseDetailsType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__ReverseTransactionRequestDetailsType_DEFINED
#define SOAP_TYPE_PointerTons3__ReverseTransactionRequestDetailsType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__ReverseTransactionRequestDetailsType(struct soap*, ns3__ReverseTransactionRequestDetailsType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__ReverseTransactionRequestDetailsType(struct soap*, const char *, int, ns3__ReverseTransactionRequestDetailsType *const*, const char *);
SOAP_FMAC3 ns3__ReverseTransactionRequestDetailsType ** SOAP_FMAC4 soap_in_PointerTons3__ReverseTransactionRequestDetailsType(struct soap*, const char*, ns3__ReverseTransactionRequestDetailsType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__ReverseTransactionRequestDetailsType(struct soap*, ns3__ReverseTransactionRequestDetailsType *const*, const char*, const char*);
SOAP_FMAC3 ns3__ReverseTransactionRequestDetailsType ** SOAP_FMAC4 soap_get_PointerTons3__ReverseTransactionRequestDetailsType(struct soap*, ns3__ReverseTransactionRequestDetailsType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__UpdateRecurringPaymentsProfileResponseDetailsType_DEFINED
#define SOAP_TYPE_PointerTons3__UpdateRecurringPaymentsProfileResponseDetailsType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__UpdateRecurringPaymentsProfileResponseDetailsType(struct soap*, ns3__UpdateRecurringPaymentsProfileResponseDetailsType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__UpdateRecurringPaymentsProfileResponseDetailsType(struct soap*, const char *, int, ns3__UpdateRecurringPaymentsProfileResponseDetailsType *const*, const char *);
SOAP_FMAC3 ns3__UpdateRecurringPaymentsProfileResponseDetailsType ** SOAP_FMAC4 soap_in_PointerTons3__UpdateRecurringPaymentsProfileResponseDetailsType(struct soap*, const char*, ns3__UpdateRecurringPaymentsProfileResponseDetailsType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__UpdateRecurringPaymentsProfileResponseDetailsType(struct soap*, ns3__UpdateRecurringPaymentsProfileResponseDetailsType *const*, const char*, const char*);
SOAP_FMAC3 ns3__UpdateRecurringPaymentsProfileResponseDetailsType ** SOAP_FMAC4 soap_get_PointerTons3__UpdateRecurringPaymentsProfileResponseDetailsType(struct soap*, ns3__UpdateRecurringPaymentsProfileResponseDetailsType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__UpdateRecurringPaymentsProfileRequestDetailsType_DEFINED
#define SOAP_TYPE_PointerTons3__UpdateRecurringPaymentsProfileRequestDetailsType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__UpdateRecurringPaymentsProfileRequestDetailsType(struct soap*, ns3__UpdateRecurringPaymentsProfileRequestDetailsType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__UpdateRecurringPaymentsProfileRequestDetailsType(struct soap*, const char *, int, ns3__UpdateRecurringPaymentsProfileRequestDetailsType *const*, const char *);
SOAP_FMAC3 ns3__UpdateRecurringPaymentsProfileRequestDetailsType ** SOAP_FMAC4 soap_in_PointerTons3__UpdateRecurringPaymentsProfileRequestDetailsType(struct soap*, const char*, ns3__UpdateRecurringPaymentsProfileRequestDetailsType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__UpdateRecurringPaymentsProfileRequestDetailsType(struct soap*, ns3__UpdateRecurringPaymentsProfileRequestDetailsType *const*, const char*, const char*);
SOAP_FMAC3 ns3__UpdateRecurringPaymentsProfileRequestDetailsType ** SOAP_FMAC4 soap_get_PointerTons3__UpdateRecurringPaymentsProfileRequestDetailsType(struct soap*, ns3__UpdateRecurringPaymentsProfileRequestDetailsType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__BillOutstandingAmountResponseDetailsType_DEFINED
#define SOAP_TYPE_PointerTons3__BillOutstandingAmountResponseDetailsType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__BillOutstandingAmountResponseDetailsType(struct soap*, ns3__BillOutstandingAmountResponseDetailsType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__BillOutstandingAmountResponseDetailsType(struct soap*, const char *, int, ns3__BillOutstandingAmountResponseDetailsType *const*, const char *);
SOAP_FMAC3 ns3__BillOutstandingAmountResponseDetailsType ** SOAP_FMAC4 soap_in_PointerTons3__BillOutstandingAmountResponseDetailsType(struct soap*, const char*, ns3__BillOutstandingAmountResponseDetailsType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__BillOutstandingAmountResponseDetailsType(struct soap*, ns3__BillOutstandingAmountResponseDetailsType *const*, const char*, const char*);
SOAP_FMAC3 ns3__BillOutstandingAmountResponseDetailsType ** SOAP_FMAC4 soap_get_PointerTons3__BillOutstandingAmountResponseDetailsType(struct soap*, ns3__BillOutstandingAmountResponseDetailsType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__BillOutstandingAmountRequestDetailsType_DEFINED
#define SOAP_TYPE_PointerTons3__BillOutstandingAmountRequestDetailsType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__BillOutstandingAmountRequestDetailsType(struct soap*, ns3__BillOutstandingAmountRequestDetailsType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__BillOutstandingAmountRequestDetailsType(struct soap*, const char *, int, ns3__BillOutstandingAmountRequestDetailsType *const*, const char *);
SOAP_FMAC3 ns3__BillOutstandingAmountRequestDetailsType ** SOAP_FMAC4 soap_in_PointerTons3__BillOutstandingAmountRequestDetailsType(struct soap*, const char*, ns3__BillOutstandingAmountRequestDetailsType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__BillOutstandingAmountRequestDetailsType(struct soap*, ns3__BillOutstandingAmountRequestDetailsType *const*, const char*, const char*);
SOAP_FMAC3 ns3__BillOutstandingAmountRequestDetailsType ** SOAP_FMAC4 soap_get_PointerTons3__BillOutstandingAmountRequestDetailsType(struct soap*, ns3__BillOutstandingAmountRequestDetailsType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__ManageRecurringPaymentsProfileStatusResponseDetailsType_DEFINED
#define SOAP_TYPE_PointerTons3__ManageRecurringPaymentsProfileStatusResponseDetailsType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__ManageRecurringPaymentsProfileStatusResponseDetailsType(struct soap*, ns3__ManageRecurringPaymentsProfileStatusResponseDetailsType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__ManageRecurringPaymentsProfileStatusResponseDetailsType(struct soap*, const char *, int, ns3__ManageRecurringPaymentsProfileStatusResponseDetailsType *const*, const char *);
SOAP_FMAC3 ns3__ManageRecurringPaymentsProfileStatusResponseDetailsType ** SOAP_FMAC4 soap_in_PointerTons3__ManageRecurringPaymentsProfileStatusResponseDetailsType(struct soap*, const char*, ns3__ManageRecurringPaymentsProfileStatusResponseDetailsType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__ManageRecurringPaymentsProfileStatusResponseDetailsType(struct soap*, ns3__ManageRecurringPaymentsProfileStatusResponseDetailsType *const*, const char*, const char*);
SOAP_FMAC3 ns3__ManageRecurringPaymentsProfileStatusResponseDetailsType ** SOAP_FMAC4 soap_get_PointerTons3__ManageRecurringPaymentsProfileStatusResponseDetailsType(struct soap*, ns3__ManageRecurringPaymentsProfileStatusResponseDetailsType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__ManageRecurringPaymentsProfileStatusRequestDetailsType_DEFINED
#define SOAP_TYPE_PointerTons3__ManageRecurringPaymentsProfileStatusRequestDetailsType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__ManageRecurringPaymentsProfileStatusRequestDetailsType(struct soap*, ns3__ManageRecurringPaymentsProfileStatusRequestDetailsType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__ManageRecurringPaymentsProfileStatusRequestDetailsType(struct soap*, const char *, int, ns3__ManageRecurringPaymentsProfileStatusRequestDetailsType *const*, const char *);
SOAP_FMAC3 ns3__ManageRecurringPaymentsProfileStatusRequestDetailsType ** SOAP_FMAC4 soap_in_PointerTons3__ManageRecurringPaymentsProfileStatusRequestDetailsType(struct soap*, const char*, ns3__ManageRecurringPaymentsProfileStatusRequestDetailsType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__ManageRecurringPaymentsProfileStatusRequestDetailsType(struct soap*, ns3__ManageRecurringPaymentsProfileStatusRequestDetailsType *const*, const char*, const char*);
SOAP_FMAC3 ns3__ManageRecurringPaymentsProfileStatusRequestDetailsType ** SOAP_FMAC4 soap_get_PointerTons3__ManageRecurringPaymentsProfileStatusRequestDetailsType(struct soap*, ns3__ManageRecurringPaymentsProfileStatusRequestDetailsType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__GetRecurringPaymentsProfileDetailsResponseDetailsType_DEFINED
#define SOAP_TYPE_PointerTons3__GetRecurringPaymentsProfileDetailsResponseDetailsType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__GetRecurringPaymentsProfileDetailsResponseDetailsType(struct soap*, ns3__GetRecurringPaymentsProfileDetailsResponseDetailsType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__GetRecurringPaymentsProfileDetailsResponseDetailsType(struct soap*, const char *, int, ns3__GetRecurringPaymentsProfileDetailsResponseDetailsType *const*, const char *);
SOAP_FMAC3 ns3__GetRecurringPaymentsProfileDetailsResponseDetailsType ** SOAP_FMAC4 soap_in_PointerTons3__GetRecurringPaymentsProfileDetailsResponseDetailsType(struct soap*, const char*, ns3__GetRecurringPaymentsProfileDetailsResponseDetailsType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__GetRecurringPaymentsProfileDetailsResponseDetailsType(struct soap*, ns3__GetRecurringPaymentsProfileDetailsResponseDetailsType *const*, const char*, const char*);
SOAP_FMAC3 ns3__GetRecurringPaymentsProfileDetailsResponseDetailsType ** SOAP_FMAC4 soap_get_PointerTons3__GetRecurringPaymentsProfileDetailsResponseDetailsType(struct soap*, ns3__GetRecurringPaymentsProfileDetailsResponseDetailsType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__CreateRecurringPaymentsProfileResponseDetailsType_DEFINED
#define SOAP_TYPE_PointerTons3__CreateRecurringPaymentsProfileResponseDetailsType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__CreateRecurringPaymentsProfileResponseDetailsType(struct soap*, ns3__CreateRecurringPaymentsProfileResponseDetailsType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__CreateRecurringPaymentsProfileResponseDetailsType(struct soap*, const char *, int, ns3__CreateRecurringPaymentsProfileResponseDetailsType *const*, const char *);
SOAP_FMAC3 ns3__CreateRecurringPaymentsProfileResponseDetailsType ** SOAP_FMAC4 soap_in_PointerTons3__CreateRecurringPaymentsProfileResponseDetailsType(struct soap*, const char*, ns3__CreateRecurringPaymentsProfileResponseDetailsType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__CreateRecurringPaymentsProfileResponseDetailsType(struct soap*, ns3__CreateRecurringPaymentsProfileResponseDetailsType *const*, const char*, const char*);
SOAP_FMAC3 ns3__CreateRecurringPaymentsProfileResponseDetailsType ** SOAP_FMAC4 soap_get_PointerTons3__CreateRecurringPaymentsProfileResponseDetailsType(struct soap*, ns3__CreateRecurringPaymentsProfileResponseDetailsType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__CreateRecurringPaymentsProfileRequestDetailsType_DEFINED
#define SOAP_TYPE_PointerTons3__CreateRecurringPaymentsProfileRequestDetailsType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__CreateRecurringPaymentsProfileRequestDetailsType(struct soap*, ns3__CreateRecurringPaymentsProfileRequestDetailsType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__CreateRecurringPaymentsProfileRequestDetailsType(struct soap*, const char *, int, ns3__CreateRecurringPaymentsProfileRequestDetailsType *const*, const char *);
SOAP_FMAC3 ns3__CreateRecurringPaymentsProfileRequestDetailsType ** SOAP_FMAC4 soap_in_PointerTons3__CreateRecurringPaymentsProfileRequestDetailsType(struct soap*, const char*, ns3__CreateRecurringPaymentsProfileRequestDetailsType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__CreateRecurringPaymentsProfileRequestDetailsType(struct soap*, ns3__CreateRecurringPaymentsProfileRequestDetailsType *const*, const char*, const char*);
SOAP_FMAC3 ns3__CreateRecurringPaymentsProfileRequestDetailsType ** SOAP_FMAC4 soap_get_PointerTons3__CreateRecurringPaymentsProfileRequestDetailsType(struct soap*, ns3__CreateRecurringPaymentsProfileRequestDetailsType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__DoNonReferencedCreditResponseDetailsType_DEFINED
#define SOAP_TYPE_PointerTons3__DoNonReferencedCreditResponseDetailsType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__DoNonReferencedCreditResponseDetailsType(struct soap*, ns3__DoNonReferencedCreditResponseDetailsType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__DoNonReferencedCreditResponseDetailsType(struct soap*, const char *, int, ns3__DoNonReferencedCreditResponseDetailsType *const*, const char *);
SOAP_FMAC3 ns3__DoNonReferencedCreditResponseDetailsType ** SOAP_FMAC4 soap_in_PointerTons3__DoNonReferencedCreditResponseDetailsType(struct soap*, const char*, ns3__DoNonReferencedCreditResponseDetailsType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__DoNonReferencedCreditResponseDetailsType(struct soap*, ns3__DoNonReferencedCreditResponseDetailsType *const*, const char*, const char*);
SOAP_FMAC3 ns3__DoNonReferencedCreditResponseDetailsType ** SOAP_FMAC4 soap_get_PointerTons3__DoNonReferencedCreditResponseDetailsType(struct soap*, ns3__DoNonReferencedCreditResponseDetailsType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__DoNonReferencedCreditRequestDetailsType_DEFINED
#define SOAP_TYPE_PointerTons3__DoNonReferencedCreditRequestDetailsType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__DoNonReferencedCreditRequestDetailsType(struct soap*, ns3__DoNonReferencedCreditRequestDetailsType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__DoNonReferencedCreditRequestDetailsType(struct soap*, const char *, int, ns3__DoNonReferencedCreditRequestDetailsType *const*, const char *);
SOAP_FMAC3 ns3__DoNonReferencedCreditRequestDetailsType ** SOAP_FMAC4 soap_in_PointerTons3__DoNonReferencedCreditRequestDetailsType(struct soap*, const char*, ns3__DoNonReferencedCreditRequestDetailsType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__DoNonReferencedCreditRequestDetailsType(struct soap*, ns3__DoNonReferencedCreditRequestDetailsType *const*, const char*, const char*);
SOAP_FMAC3 ns3__DoNonReferencedCreditRequestDetailsType ** SOAP_FMAC4 soap_get_PointerTons3__DoNonReferencedCreditRequestDetailsType(struct soap*, ns3__DoNonReferencedCreditRequestDetailsType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__DoReferenceTransactionResponseDetailsType_DEFINED
#define SOAP_TYPE_PointerTons3__DoReferenceTransactionResponseDetailsType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__DoReferenceTransactionResponseDetailsType(struct soap*, ns3__DoReferenceTransactionResponseDetailsType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__DoReferenceTransactionResponseDetailsType(struct soap*, const char *, int, ns3__DoReferenceTransactionResponseDetailsType *const*, const char *);
SOAP_FMAC3 ns3__DoReferenceTransactionResponseDetailsType ** SOAP_FMAC4 soap_in_PointerTons3__DoReferenceTransactionResponseDetailsType(struct soap*, const char*, ns3__DoReferenceTransactionResponseDetailsType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__DoReferenceTransactionResponseDetailsType(struct soap*, ns3__DoReferenceTransactionResponseDetailsType *const*, const char*, const char*);
SOAP_FMAC3 ns3__DoReferenceTransactionResponseDetailsType ** SOAP_FMAC4 soap_get_PointerTons3__DoReferenceTransactionResponseDetailsType(struct soap*, ns3__DoReferenceTransactionResponseDetailsType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__DoReferenceTransactionRequestDetailsType_DEFINED
#define SOAP_TYPE_PointerTons3__DoReferenceTransactionRequestDetailsType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__DoReferenceTransactionRequestDetailsType(struct soap*, ns3__DoReferenceTransactionRequestDetailsType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__DoReferenceTransactionRequestDetailsType(struct soap*, const char *, int, ns3__DoReferenceTransactionRequestDetailsType *const*, const char *);
SOAP_FMAC3 ns3__DoReferenceTransactionRequestDetailsType ** SOAP_FMAC4 soap_in_PointerTons3__DoReferenceTransactionRequestDetailsType(struct soap*, const char*, ns3__DoReferenceTransactionRequestDetailsType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__DoReferenceTransactionRequestDetailsType(struct soap*, ns3__DoReferenceTransactionRequestDetailsType *const*, const char*, const char*);
SOAP_FMAC3 ns3__DoReferenceTransactionRequestDetailsType ** SOAP_FMAC4 soap_get_PointerTons3__DoReferenceTransactionRequestDetailsType(struct soap*, ns3__DoReferenceTransactionRequestDetailsType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__GetBillingAgreementCustomerDetailsResponseDetailsType_DEFINED
#define SOAP_TYPE_PointerTons3__GetBillingAgreementCustomerDetailsResponseDetailsType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__GetBillingAgreementCustomerDetailsResponseDetailsType(struct soap*, ns3__GetBillingAgreementCustomerDetailsResponseDetailsType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__GetBillingAgreementCustomerDetailsResponseDetailsType(struct soap*, const char *, int, ns3__GetBillingAgreementCustomerDetailsResponseDetailsType *const*, const char *);
SOAP_FMAC3 ns3__GetBillingAgreementCustomerDetailsResponseDetailsType ** SOAP_FMAC4 soap_in_PointerTons3__GetBillingAgreementCustomerDetailsResponseDetailsType(struct soap*, const char*, ns3__GetBillingAgreementCustomerDetailsResponseDetailsType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__GetBillingAgreementCustomerDetailsResponseDetailsType(struct soap*, ns3__GetBillingAgreementCustomerDetailsResponseDetailsType *const*, const char*, const char*);
SOAP_FMAC3 ns3__GetBillingAgreementCustomerDetailsResponseDetailsType ** SOAP_FMAC4 soap_get_PointerTons3__GetBillingAgreementCustomerDetailsResponseDetailsType(struct soap*, ns3__GetBillingAgreementCustomerDetailsResponseDetailsType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__SetCustomerBillingAgreementRequestDetailsType_DEFINED
#define SOAP_TYPE_PointerTons3__SetCustomerBillingAgreementRequestDetailsType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__SetCustomerBillingAgreementRequestDetailsType(struct soap*, ns3__SetCustomerBillingAgreementRequestDetailsType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__SetCustomerBillingAgreementRequestDetailsType(struct soap*, const char *, int, ns3__SetCustomerBillingAgreementRequestDetailsType *const*, const char *);
SOAP_FMAC3 ns3__SetCustomerBillingAgreementRequestDetailsType ** SOAP_FMAC4 soap_in_PointerTons3__SetCustomerBillingAgreementRequestDetailsType(struct soap*, const char*, ns3__SetCustomerBillingAgreementRequestDetailsType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__SetCustomerBillingAgreementRequestDetailsType(struct soap*, ns3__SetCustomerBillingAgreementRequestDetailsType *const*, const char*, const char*);
SOAP_FMAC3 ns3__SetCustomerBillingAgreementRequestDetailsType ** SOAP_FMAC4 soap_get_PointerTons3__SetCustomerBillingAgreementRequestDetailsType(struct soap*, ns3__SetCustomerBillingAgreementRequestDetailsType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__DoMobileCheckoutPaymentResponseDetailsType_DEFINED
#define SOAP_TYPE_PointerTons3__DoMobileCheckoutPaymentResponseDetailsType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__DoMobileCheckoutPaymentResponseDetailsType(struct soap*, ns3__DoMobileCheckoutPaymentResponseDetailsType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__DoMobileCheckoutPaymentResponseDetailsType(struct soap*, const char *, int, ns3__DoMobileCheckoutPaymentResponseDetailsType *const*, const char *);
SOAP_FMAC3 ns3__DoMobileCheckoutPaymentResponseDetailsType ** SOAP_FMAC4 soap_in_PointerTons3__DoMobileCheckoutPaymentResponseDetailsType(struct soap*, const char*, ns3__DoMobileCheckoutPaymentResponseDetailsType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__DoMobileCheckoutPaymentResponseDetailsType(struct soap*, ns3__DoMobileCheckoutPaymentResponseDetailsType *const*, const char*, const char*);
SOAP_FMAC3 ns3__DoMobileCheckoutPaymentResponseDetailsType ** SOAP_FMAC4 soap_get_PointerTons3__DoMobileCheckoutPaymentResponseDetailsType(struct soap*, ns3__DoMobileCheckoutPaymentResponseDetailsType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__SetMobileCheckoutRequestDetailsType_DEFINED
#define SOAP_TYPE_PointerTons3__SetMobileCheckoutRequestDetailsType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__SetMobileCheckoutRequestDetailsType(struct soap*, ns3__SetMobileCheckoutRequestDetailsType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__SetMobileCheckoutRequestDetailsType(struct soap*, const char *, int, ns3__SetMobileCheckoutRequestDetailsType *const*, const char *);
SOAP_FMAC3 ns3__SetMobileCheckoutRequestDetailsType ** SOAP_FMAC4 soap_in_PointerTons3__SetMobileCheckoutRequestDetailsType(struct soap*, const char*, ns3__SetMobileCheckoutRequestDetailsType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__SetMobileCheckoutRequestDetailsType(struct soap*, ns3__SetMobileCheckoutRequestDetailsType *const*, const char*, const char*);
SOAP_FMAC3 ns3__SetMobileCheckoutRequestDetailsType ** SOAP_FMAC4 soap_get_PointerTons3__SetMobileCheckoutRequestDetailsType(struct soap*, ns3__SetMobileCheckoutRequestDetailsType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__GetMobileStatusRequestDetailsType_DEFINED
#define SOAP_TYPE_PointerTons3__GetMobileStatusRequestDetailsType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__GetMobileStatusRequestDetailsType(struct soap*, ns3__GetMobileStatusRequestDetailsType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__GetMobileStatusRequestDetailsType(struct soap*, const char *, int, ns3__GetMobileStatusRequestDetailsType *const*, const char *);
SOAP_FMAC3 ns3__GetMobileStatusRequestDetailsType ** SOAP_FMAC4 soap_in_PointerTons3__GetMobileStatusRequestDetailsType(struct soap*, const char*, ns3__GetMobileStatusRequestDetailsType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__GetMobileStatusRequestDetailsType(struct soap*, ns3__GetMobileStatusRequestDetailsType *const*, const char*, const char*);
SOAP_FMAC3 ns3__GetMobileStatusRequestDetailsType ** SOAP_FMAC4 soap_get_PointerTons3__GetMobileStatusRequestDetailsType(struct soap*, ns3__GetMobileStatusRequestDetailsType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__CreateMobilePaymentRequestDetailsType_DEFINED
#define SOAP_TYPE_PointerTons3__CreateMobilePaymentRequestDetailsType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__CreateMobilePaymentRequestDetailsType(struct soap*, ns3__CreateMobilePaymentRequestDetailsType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__CreateMobilePaymentRequestDetailsType(struct soap*, const char *, int, ns3__CreateMobilePaymentRequestDetailsType *const*, const char *);
SOAP_FMAC3 ns3__CreateMobilePaymentRequestDetailsType ** SOAP_FMAC4 soap_in_PointerTons3__CreateMobilePaymentRequestDetailsType(struct soap*, const char*, ns3__CreateMobilePaymentRequestDetailsType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__CreateMobilePaymentRequestDetailsType(struct soap*, ns3__CreateMobilePaymentRequestDetailsType *const*, const char*, const char*);
SOAP_FMAC3 ns3__CreateMobilePaymentRequestDetailsType ** SOAP_FMAC4 soap_get_PointerTons3__CreateMobilePaymentRequestDetailsType(struct soap*, ns3__CreateMobilePaymentRequestDetailsType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__UATPDetailsType_DEFINED
#define SOAP_TYPE_PointerTons3__UATPDetailsType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__UATPDetailsType(struct soap*, ns3__UATPDetailsType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__UATPDetailsType(struct soap*, const char *, int, ns3__UATPDetailsType *const*, const char *);
SOAP_FMAC3 ns3__UATPDetailsType ** SOAP_FMAC4 soap_in_PointerTons3__UATPDetailsType(struct soap*, const char*, ns3__UATPDetailsType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__UATPDetailsType(struct soap*, ns3__UATPDetailsType *const*, const char*, const char*);
SOAP_FMAC3 ns3__UATPDetailsType ** SOAP_FMAC4 soap_get_PointerTons3__UATPDetailsType(struct soap*, ns3__UATPDetailsType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__TransactionEntityType_DEFINED
#define SOAP_TYPE_PointerTons3__TransactionEntityType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__TransactionEntityType(struct soap*, enum ns3__TransactionEntityType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__TransactionEntityType(struct soap*, const char *, int, enum ns3__TransactionEntityType *const*, const char *);
SOAP_FMAC3 enum ns3__TransactionEntityType ** SOAP_FMAC4 soap_in_PointerTons3__TransactionEntityType(struct soap*, const char*, enum ns3__TransactionEntityType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__TransactionEntityType(struct soap*, enum ns3__TransactionEntityType *const*, const char*, const char*);
SOAP_FMAC3 enum ns3__TransactionEntityType ** SOAP_FMAC4 soap_get_PointerTons3__TransactionEntityType(struct soap*, enum ns3__TransactionEntityType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__AuthorizationInfoType_DEFINED
#define SOAP_TYPE_PointerTons3__AuthorizationInfoType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__AuthorizationInfoType(struct soap*, ns3__AuthorizationInfoType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__AuthorizationInfoType(struct soap*, const char *, int, ns3__AuthorizationInfoType *const*, const char *);
SOAP_FMAC3 ns3__AuthorizationInfoType ** SOAP_FMAC4 soap_in_PointerTons3__AuthorizationInfoType(struct soap*, const char*, ns3__AuthorizationInfoType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__AuthorizationInfoType(struct soap*, ns3__AuthorizationInfoType *const*, const char*, const char*);
SOAP_FMAC3 ns3__AuthorizationInfoType ** SOAP_FMAC4 soap_get_PointerTons3__AuthorizationInfoType(struct soap*, ns3__AuthorizationInfoType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__DoCaptureResponseDetailsType_DEFINED
#define SOAP_TYPE_PointerTons3__DoCaptureResponseDetailsType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__DoCaptureResponseDetailsType(struct soap*, ns3__DoCaptureResponseDetailsType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__DoCaptureResponseDetailsType(struct soap*, const char *, int, ns3__DoCaptureResponseDetailsType *const*, const char *);
SOAP_FMAC3 ns3__DoCaptureResponseDetailsType ** SOAP_FMAC4 soap_in_PointerTons3__DoCaptureResponseDetailsType(struct soap*, const char*, ns3__DoCaptureResponseDetailsType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__DoCaptureResponseDetailsType(struct soap*, ns3__DoCaptureResponseDetailsType *const*, const char*, const char*);
SOAP_FMAC3 ns3__DoCaptureResponseDetailsType ** SOAP_FMAC4 soap_get_PointerTons3__DoCaptureResponseDetailsType(struct soap*, ns3__DoCaptureResponseDetailsType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__DoDirectPaymentRequestDetailsType_DEFINED
#define SOAP_TYPE_PointerTons3__DoDirectPaymentRequestDetailsType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__DoDirectPaymentRequestDetailsType(struct soap*, ns3__DoDirectPaymentRequestDetailsType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__DoDirectPaymentRequestDetailsType(struct soap*, const char *, int, ns3__DoDirectPaymentRequestDetailsType *const*, const char *);
SOAP_FMAC3 ns3__DoDirectPaymentRequestDetailsType ** SOAP_FMAC4 soap_in_PointerTons3__DoDirectPaymentRequestDetailsType(struct soap*, const char*, ns3__DoDirectPaymentRequestDetailsType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__DoDirectPaymentRequestDetailsType(struct soap*, ns3__DoDirectPaymentRequestDetailsType *const*, const char*, const char*);
SOAP_FMAC3 ns3__DoDirectPaymentRequestDetailsType ** SOAP_FMAC4 soap_get_PointerTons3__DoDirectPaymentRequestDetailsType(struct soap*, ns3__DoDirectPaymentRequestDetailsType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__DoExpressCheckoutPaymentResponseDetailsType_DEFINED
#define SOAP_TYPE_PointerTons3__DoExpressCheckoutPaymentResponseDetailsType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__DoExpressCheckoutPaymentResponseDetailsType(struct soap*, ns3__DoExpressCheckoutPaymentResponseDetailsType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__DoExpressCheckoutPaymentResponseDetailsType(struct soap*, const char *, int, ns3__DoExpressCheckoutPaymentResponseDetailsType *const*, const char *);
SOAP_FMAC3 ns3__DoExpressCheckoutPaymentResponseDetailsType ** SOAP_FMAC4 soap_in_PointerTons3__DoExpressCheckoutPaymentResponseDetailsType(struct soap*, const char*, ns3__DoExpressCheckoutPaymentResponseDetailsType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__DoExpressCheckoutPaymentResponseDetailsType(struct soap*, ns3__DoExpressCheckoutPaymentResponseDetailsType *const*, const char*, const char*);
SOAP_FMAC3 ns3__DoExpressCheckoutPaymentResponseDetailsType ** SOAP_FMAC4 soap_get_PointerTons3__DoExpressCheckoutPaymentResponseDetailsType(struct soap*, ns3__DoExpressCheckoutPaymentResponseDetailsType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__DoExpressCheckoutPaymentRequestDetailsType_DEFINED
#define SOAP_TYPE_PointerTons3__DoExpressCheckoutPaymentRequestDetailsType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__DoExpressCheckoutPaymentRequestDetailsType(struct soap*, ns3__DoExpressCheckoutPaymentRequestDetailsType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__DoExpressCheckoutPaymentRequestDetailsType(struct soap*, const char *, int, ns3__DoExpressCheckoutPaymentRequestDetailsType *const*, const char *);
SOAP_FMAC3 ns3__DoExpressCheckoutPaymentRequestDetailsType ** SOAP_FMAC4 soap_in_PointerTons3__DoExpressCheckoutPaymentRequestDetailsType(struct soap*, const char*, ns3__DoExpressCheckoutPaymentRequestDetailsType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__DoExpressCheckoutPaymentRequestDetailsType(struct soap*, ns3__DoExpressCheckoutPaymentRequestDetailsType *const*, const char*, const char*);
SOAP_FMAC3 ns3__DoExpressCheckoutPaymentRequestDetailsType ** SOAP_FMAC4 soap_get_PointerTons3__DoExpressCheckoutPaymentRequestDetailsType(struct soap*, ns3__DoExpressCheckoutPaymentRequestDetailsType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__GetExpressCheckoutDetailsResponseDetailsType_DEFINED
#define SOAP_TYPE_PointerTons3__GetExpressCheckoutDetailsResponseDetailsType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__GetExpressCheckoutDetailsResponseDetailsType(struct soap*, ns3__GetExpressCheckoutDetailsResponseDetailsType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__GetExpressCheckoutDetailsResponseDetailsType(struct soap*, const char *, int, ns3__GetExpressCheckoutDetailsResponseDetailsType *const*, const char *);
SOAP_FMAC3 ns3__GetExpressCheckoutDetailsResponseDetailsType ** SOAP_FMAC4 soap_in_PointerTons3__GetExpressCheckoutDetailsResponseDetailsType(struct soap*, const char*, ns3__GetExpressCheckoutDetailsResponseDetailsType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__GetExpressCheckoutDetailsResponseDetailsType(struct soap*, ns3__GetExpressCheckoutDetailsResponseDetailsType *const*, const char*, const char*);
SOAP_FMAC3 ns3__GetExpressCheckoutDetailsResponseDetailsType ** SOAP_FMAC4 soap_get_PointerTons3__GetExpressCheckoutDetailsResponseDetailsType(struct soap*, ns3__GetExpressCheckoutDetailsResponseDetailsType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__ExecuteCheckoutOperationsResponseDetailsType_DEFINED
#define SOAP_TYPE_PointerTons3__ExecuteCheckoutOperationsResponseDetailsType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__ExecuteCheckoutOperationsResponseDetailsType(struct soap*, ns3__ExecuteCheckoutOperationsResponseDetailsType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__ExecuteCheckoutOperationsResponseDetailsType(struct soap*, const char *, int, ns3__ExecuteCheckoutOperationsResponseDetailsType *const*, const char *);
SOAP_FMAC3 ns3__ExecuteCheckoutOperationsResponseDetailsType ** SOAP_FMAC4 soap_in_PointerTons3__ExecuteCheckoutOperationsResponseDetailsType(struct soap*, const char*, ns3__ExecuteCheckoutOperationsResponseDetailsType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__ExecuteCheckoutOperationsResponseDetailsType(struct soap*, ns3__ExecuteCheckoutOperationsResponseDetailsType *const*, const char*, const char*);
SOAP_FMAC3 ns3__ExecuteCheckoutOperationsResponseDetailsType ** SOAP_FMAC4 soap_get_PointerTons3__ExecuteCheckoutOperationsResponseDetailsType(struct soap*, ns3__ExecuteCheckoutOperationsResponseDetailsType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__ExecuteCheckoutOperationsRequestDetailsType_DEFINED
#define SOAP_TYPE_PointerTons3__ExecuteCheckoutOperationsRequestDetailsType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__ExecuteCheckoutOperationsRequestDetailsType(struct soap*, ns3__ExecuteCheckoutOperationsRequestDetailsType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__ExecuteCheckoutOperationsRequestDetailsType(struct soap*, const char *, int, ns3__ExecuteCheckoutOperationsRequestDetailsType *const*, const char *);
SOAP_FMAC3 ns3__ExecuteCheckoutOperationsRequestDetailsType ** SOAP_FMAC4 soap_in_PointerTons3__ExecuteCheckoutOperationsRequestDetailsType(struct soap*, const char*, ns3__ExecuteCheckoutOperationsRequestDetailsType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__ExecuteCheckoutOperationsRequestDetailsType(struct soap*, ns3__ExecuteCheckoutOperationsRequestDetailsType *const*, const char*, const char*);
SOAP_FMAC3 ns3__ExecuteCheckoutOperationsRequestDetailsType ** SOAP_FMAC4 soap_get_PointerTons3__ExecuteCheckoutOperationsRequestDetailsType(struct soap*, ns3__ExecuteCheckoutOperationsRequestDetailsType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__SetExpressCheckoutRequestDetailsType_DEFINED
#define SOAP_TYPE_PointerTons3__SetExpressCheckoutRequestDetailsType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__SetExpressCheckoutRequestDetailsType(struct soap*, ns3__SetExpressCheckoutRequestDetailsType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__SetExpressCheckoutRequestDetailsType(struct soap*, const char *, int, ns3__SetExpressCheckoutRequestDetailsType *const*, const char *);
SOAP_FMAC3 ns3__SetExpressCheckoutRequestDetailsType ** SOAP_FMAC4 soap_in_PointerTons3__SetExpressCheckoutRequestDetailsType(struct soap*, const char*, ns3__SetExpressCheckoutRequestDetailsType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__SetExpressCheckoutRequestDetailsType(struct soap*, ns3__SetExpressCheckoutRequestDetailsType *const*, const char*, const char*);
SOAP_FMAC3 ns3__SetExpressCheckoutRequestDetailsType ** SOAP_FMAC4 soap_get_PointerTons3__SetExpressCheckoutRequestDetailsType(struct soap*, ns3__SetExpressCheckoutRequestDetailsType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__GetIncentiveEvaluationResponseDetailsType_DEFINED
#define SOAP_TYPE_PointerTons3__GetIncentiveEvaluationResponseDetailsType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__GetIncentiveEvaluationResponseDetailsType(struct soap*, ns3__GetIncentiveEvaluationResponseDetailsType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__GetIncentiveEvaluationResponseDetailsType(struct soap*, const char *, int, ns3__GetIncentiveEvaluationResponseDetailsType *const*, const char *);
SOAP_FMAC3 ns3__GetIncentiveEvaluationResponseDetailsType ** SOAP_FMAC4 soap_in_PointerTons3__GetIncentiveEvaluationResponseDetailsType(struct soap*, const char*, ns3__GetIncentiveEvaluationResponseDetailsType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__GetIncentiveEvaluationResponseDetailsType(struct soap*, ns3__GetIncentiveEvaluationResponseDetailsType *const*, const char*, const char*);
SOAP_FMAC3 ns3__GetIncentiveEvaluationResponseDetailsType ** SOAP_FMAC4 soap_get_PointerTons3__GetIncentiveEvaluationResponseDetailsType(struct soap*, ns3__GetIncentiveEvaluationResponseDetailsType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__GetIncentiveEvaluationRequestDetailsType_DEFINED
#define SOAP_TYPE_PointerTons3__GetIncentiveEvaluationRequestDetailsType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__GetIncentiveEvaluationRequestDetailsType(struct soap*, ns3__GetIncentiveEvaluationRequestDetailsType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__GetIncentiveEvaluationRequestDetailsType(struct soap*, const char *, int, ns3__GetIncentiveEvaluationRequestDetailsType *const*, const char *);
SOAP_FMAC3 ns3__GetIncentiveEvaluationRequestDetailsType ** SOAP_FMAC4 soap_in_PointerTons3__GetIncentiveEvaluationRequestDetailsType(struct soap*, const char*, ns3__GetIncentiveEvaluationRequestDetailsType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__GetIncentiveEvaluationRequestDetailsType(struct soap*, ns3__GetIncentiveEvaluationRequestDetailsType *const*, const char*, const char*);
SOAP_FMAC3 ns3__GetIncentiveEvaluationRequestDetailsType ** SOAP_FMAC4 soap_get_PointerTons3__GetIncentiveEvaluationRequestDetailsType(struct soap*, ns3__GetIncentiveEvaluationRequestDetailsType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__GetAccessPermissionDetailsResponseDetailsType_DEFINED
#define SOAP_TYPE_PointerTons3__GetAccessPermissionDetailsResponseDetailsType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__GetAccessPermissionDetailsResponseDetailsType(struct soap*, ns3__GetAccessPermissionDetailsResponseDetailsType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__GetAccessPermissionDetailsResponseDetailsType(struct soap*, const char *, int, ns3__GetAccessPermissionDetailsResponseDetailsType *const*, const char *);
SOAP_FMAC3 ns3__GetAccessPermissionDetailsResponseDetailsType ** SOAP_FMAC4 soap_in_PointerTons3__GetAccessPermissionDetailsResponseDetailsType(struct soap*, const char*, ns3__GetAccessPermissionDetailsResponseDetailsType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__GetAccessPermissionDetailsResponseDetailsType(struct soap*, ns3__GetAccessPermissionDetailsResponseDetailsType *const*, const char*, const char*);
SOAP_FMAC3 ns3__GetAccessPermissionDetailsResponseDetailsType ** SOAP_FMAC4 soap_get_PointerTons3__GetAccessPermissionDetailsResponseDetailsType(struct soap*, ns3__GetAccessPermissionDetailsResponseDetailsType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__SetAccessPermissionsRequestDetailsType_DEFINED
#define SOAP_TYPE_PointerTons3__SetAccessPermissionsRequestDetailsType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__SetAccessPermissionsRequestDetailsType(struct soap*, ns3__SetAccessPermissionsRequestDetailsType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__SetAccessPermissionsRequestDetailsType(struct soap*, const char *, int, ns3__SetAccessPermissionsRequestDetailsType *const*, const char *);
SOAP_FMAC3 ns3__SetAccessPermissionsRequestDetailsType ** SOAP_FMAC4 soap_in_PointerTons3__SetAccessPermissionsRequestDetailsType(struct soap*, const char*, ns3__SetAccessPermissionsRequestDetailsType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__SetAccessPermissionsRequestDetailsType(struct soap*, ns3__SetAccessPermissionsRequestDetailsType *const*, const char*, const char*);
SOAP_FMAC3 ns3__SetAccessPermissionsRequestDetailsType ** SOAP_FMAC4 soap_get_PointerTons3__SetAccessPermissionsRequestDetailsType(struct soap*, ns3__SetAccessPermissionsRequestDetailsType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__GetAuthDetailsResponseDetailsType_DEFINED
#define SOAP_TYPE_PointerTons3__GetAuthDetailsResponseDetailsType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__GetAuthDetailsResponseDetailsType(struct soap*, ns3__GetAuthDetailsResponseDetailsType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__GetAuthDetailsResponseDetailsType(struct soap*, const char *, int, ns3__GetAuthDetailsResponseDetailsType *const*, const char *);
SOAP_FMAC3 ns3__GetAuthDetailsResponseDetailsType ** SOAP_FMAC4 soap_in_PointerTons3__GetAuthDetailsResponseDetailsType(struct soap*, const char*, ns3__GetAuthDetailsResponseDetailsType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__GetAuthDetailsResponseDetailsType(struct soap*, ns3__GetAuthDetailsResponseDetailsType *const*, const char*, const char*);
SOAP_FMAC3 ns3__GetAuthDetailsResponseDetailsType ** SOAP_FMAC4 soap_get_PointerTons3__GetAuthDetailsResponseDetailsType(struct soap*, ns3__GetAuthDetailsResponseDetailsType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__SetAuthFlowParamRequestDetailsType_DEFINED
#define SOAP_TYPE_PointerTons3__SetAuthFlowParamRequestDetailsType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__SetAuthFlowParamRequestDetailsType(struct soap*, ns3__SetAuthFlowParamRequestDetailsType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__SetAuthFlowParamRequestDetailsType(struct soap*, const char *, int, ns3__SetAuthFlowParamRequestDetailsType *const*, const char *);
SOAP_FMAC3 ns3__SetAuthFlowParamRequestDetailsType ** SOAP_FMAC4 soap_in_PointerTons3__SetAuthFlowParamRequestDetailsType(struct soap*, const char*, ns3__SetAuthFlowParamRequestDetailsType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__SetAuthFlowParamRequestDetailsType(struct soap*, ns3__SetAuthFlowParamRequestDetailsType *const*, const char*, const char*);
SOAP_FMAC3 ns3__SetAuthFlowParamRequestDetailsType ** SOAP_FMAC4 soap_get_PointerTons3__SetAuthFlowParamRequestDetailsType(struct soap*, ns3__SetAuthFlowParamRequestDetailsType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__GetBoardingDetailsResponseDetailsType_DEFINED
#define SOAP_TYPE_PointerTons3__GetBoardingDetailsResponseDetailsType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__GetBoardingDetailsResponseDetailsType(struct soap*, ns3__GetBoardingDetailsResponseDetailsType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__GetBoardingDetailsResponseDetailsType(struct soap*, const char *, int, ns3__GetBoardingDetailsResponseDetailsType *const*, const char *);
SOAP_FMAC3 ns3__GetBoardingDetailsResponseDetailsType ** SOAP_FMAC4 soap_in_PointerTons3__GetBoardingDetailsResponseDetailsType(struct soap*, const char*, ns3__GetBoardingDetailsResponseDetailsType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__GetBoardingDetailsResponseDetailsType(struct soap*, ns3__GetBoardingDetailsResponseDetailsType *const*, const char*, const char*);
SOAP_FMAC3 ns3__GetBoardingDetailsResponseDetailsType ** SOAP_FMAC4 soap_get_PointerTons3__GetBoardingDetailsResponseDetailsType(struct soap*, ns3__GetBoardingDetailsResponseDetailsType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__EnterBoardingRequestDetailsType_DEFINED
#define SOAP_TYPE_PointerTons3__EnterBoardingRequestDetailsType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__EnterBoardingRequestDetailsType(struct soap*, ns3__EnterBoardingRequestDetailsType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__EnterBoardingRequestDetailsType(struct soap*, const char *, int, ns3__EnterBoardingRequestDetailsType *const*, const char *);
SOAP_FMAC3 ns3__EnterBoardingRequestDetailsType ** SOAP_FMAC4 soap_in_PointerTons3__EnterBoardingRequestDetailsType(struct soap*, const char*, ns3__EnterBoardingRequestDetailsType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__EnterBoardingRequestDetailsType(struct soap*, ns3__EnterBoardingRequestDetailsType *const*, const char*, const char*);
SOAP_FMAC3 ns3__EnterBoardingRequestDetailsType ** SOAP_FMAC4 soap_get_PointerTons3__EnterBoardingRequestDetailsType(struct soap*, ns3__EnterBoardingRequestDetailsType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__MatchStatusCodeType_DEFINED
#define SOAP_TYPE_PointerTons3__MatchStatusCodeType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__MatchStatusCodeType(struct soap*, enum ns3__MatchStatusCodeType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__MatchStatusCodeType(struct soap*, const char *, int, enum ns3__MatchStatusCodeType *const*, const char *);
SOAP_FMAC3 enum ns3__MatchStatusCodeType ** SOAP_FMAC4 soap_in_PointerTons3__MatchStatusCodeType(struct soap*, const char*, enum ns3__MatchStatusCodeType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__MatchStatusCodeType(struct soap*, enum ns3__MatchStatusCodeType *const*, const char*, const char*);
SOAP_FMAC3 enum ns3__MatchStatusCodeType ** SOAP_FMAC4 soap_get_PointerTons3__MatchStatusCodeType(struct soap*, enum ns3__MatchStatusCodeType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__BAUpdateResponseDetailsType_DEFINED
#define SOAP_TYPE_PointerTons3__BAUpdateResponseDetailsType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__BAUpdateResponseDetailsType(struct soap*, ns3__BAUpdateResponseDetailsType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__BAUpdateResponseDetailsType(struct soap*, const char *, int, ns3__BAUpdateResponseDetailsType *const*, const char *);
SOAP_FMAC3 ns3__BAUpdateResponseDetailsType ** SOAP_FMAC4 soap_in_PointerTons3__BAUpdateResponseDetailsType(struct soap*, const char*, ns3__BAUpdateResponseDetailsType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__BAUpdateResponseDetailsType(struct soap*, ns3__BAUpdateResponseDetailsType *const*, const char*, const char*);
SOAP_FMAC3 ns3__BAUpdateResponseDetailsType ** SOAP_FMAC4 soap_get_PointerTons3__BAUpdateResponseDetailsType(struct soap*, ns3__BAUpdateResponseDetailsType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__MerchantPullStatusCodeType_DEFINED
#define SOAP_TYPE_PointerTons3__MerchantPullStatusCodeType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__MerchantPullStatusCodeType(struct soap*, enum ns3__MerchantPullStatusCodeType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__MerchantPullStatusCodeType(struct soap*, const char *, int, enum ns3__MerchantPullStatusCodeType *const*, const char *);
SOAP_FMAC3 enum ns3__MerchantPullStatusCodeType ** SOAP_FMAC4 soap_in_PointerTons3__MerchantPullStatusCodeType(struct soap*, const char*, enum ns3__MerchantPullStatusCodeType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__MerchantPullStatusCodeType(struct soap*, enum ns3__MerchantPullStatusCodeType *const*, const char*, const char*);
SOAP_FMAC3 enum ns3__MerchantPullStatusCodeType ** SOAP_FMAC4 soap_get_PointerTons3__MerchantPullStatusCodeType(struct soap*, enum ns3__MerchantPullStatusCodeType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__MassPayRequestItemType_DEFINED
#define SOAP_TYPE_PointerTons1__MassPayRequestItemType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__MassPayRequestItemType(struct soap*, ns1__MassPayRequestItemType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__MassPayRequestItemType(struct soap*, const char *, int, ns1__MassPayRequestItemType *const*, const char *);
SOAP_FMAC3 ns1__MassPayRequestItemType ** SOAP_FMAC4 soap_in_PointerTons1__MassPayRequestItemType(struct soap*, const char*, ns1__MassPayRequestItemType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__MassPayRequestItemType(struct soap*, ns1__MassPayRequestItemType *const*, const char*, const char*);
SOAP_FMAC3 ns1__MassPayRequestItemType ** SOAP_FMAC4 soap_get_PointerTons1__MassPayRequestItemType(struct soap*, ns1__MassPayRequestItemType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__ReceiverInfoCodeType_DEFINED
#define SOAP_TYPE_PointerTons3__ReceiverInfoCodeType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__ReceiverInfoCodeType(struct soap*, enum ns3__ReceiverInfoCodeType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__ReceiverInfoCodeType(struct soap*, const char *, int, enum ns3__ReceiverInfoCodeType *const*, const char *);
SOAP_FMAC3 enum ns3__ReceiverInfoCodeType ** SOAP_FMAC4 soap_in_PointerTons3__ReceiverInfoCodeType(struct soap*, const char*, enum ns3__ReceiverInfoCodeType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__ReceiverInfoCodeType(struct soap*, enum ns3__ReceiverInfoCodeType *const*, const char*, const char*);
SOAP_FMAC3 enum ns3__ReceiverInfoCodeType ** SOAP_FMAC4 soap_get_PointerTons3__ReceiverInfoCodeType(struct soap*, enum ns3__ReceiverInfoCodeType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__PaymentTransactionSearchResultType_DEFINED
#define SOAP_TYPE_PointerTons3__PaymentTransactionSearchResultType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__PaymentTransactionSearchResultType(struct soap*, ns3__PaymentTransactionSearchResultType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__PaymentTransactionSearchResultType(struct soap*, const char *, int, ns3__PaymentTransactionSearchResultType *const*, const char *);
SOAP_FMAC3 ns3__PaymentTransactionSearchResultType ** SOAP_FMAC4 soap_in_PointerTons3__PaymentTransactionSearchResultType(struct soap*, const char*, ns3__PaymentTransactionSearchResultType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__PaymentTransactionSearchResultType(struct soap*, ns3__PaymentTransactionSearchResultType *const*, const char*, const char*);
SOAP_FMAC3 ns3__PaymentTransactionSearchResultType ** SOAP_FMAC4 soap_get_PointerTons3__PaymentTransactionSearchResultType(struct soap*, ns3__PaymentTransactionSearchResultType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__PaymentTransactionStatusCodeType_DEFINED
#define SOAP_TYPE_PointerTons3__PaymentTransactionStatusCodeType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__PaymentTransactionStatusCodeType(struct soap*, enum ns3__PaymentTransactionStatusCodeType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__PaymentTransactionStatusCodeType(struct soap*, const char *, int, enum ns3__PaymentTransactionStatusCodeType *const*, const char *);
SOAP_FMAC3 enum ns3__PaymentTransactionStatusCodeType ** SOAP_FMAC4 soap_in_PointerTons3__PaymentTransactionStatusCodeType(struct soap*, const char*, enum ns3__PaymentTransactionStatusCodeType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__PaymentTransactionStatusCodeType(struct soap*, enum ns3__PaymentTransactionStatusCodeType *const*, const char*, const char*);
SOAP_FMAC3 enum ns3__PaymentTransactionStatusCodeType ** SOAP_FMAC4 soap_get_PointerTons3__PaymentTransactionStatusCodeType(struct soap*, enum ns3__PaymentTransactionStatusCodeType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__PaymentTransactionClassCodeType_DEFINED
#define SOAP_TYPE_PointerTons3__PaymentTransactionClassCodeType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__PaymentTransactionClassCodeType(struct soap*, enum ns3__PaymentTransactionClassCodeType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__PaymentTransactionClassCodeType(struct soap*, const char *, int, enum ns3__PaymentTransactionClassCodeType *const*, const char *);
SOAP_FMAC3 enum ns3__PaymentTransactionClassCodeType ** SOAP_FMAC4 soap_in_PointerTons3__PaymentTransactionClassCodeType(struct soap*, const char*, enum ns3__PaymentTransactionClassCodeType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__PaymentTransactionClassCodeType(struct soap*, enum ns3__PaymentTransactionClassCodeType *const*, const char*, const char*);
SOAP_FMAC3 enum ns3__PaymentTransactionClassCodeType ** SOAP_FMAC4 soap_get_PointerTons3__PaymentTransactionClassCodeType(struct soap*, enum ns3__PaymentTransactionClassCodeType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__MerchantPullPaymentResponseType_DEFINED
#define SOAP_TYPE_PointerTons3__MerchantPullPaymentResponseType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__MerchantPullPaymentResponseType(struct soap*, ns3__MerchantPullPaymentResponseType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__MerchantPullPaymentResponseType(struct soap*, const char *, int, ns3__MerchantPullPaymentResponseType *const*, const char *);
SOAP_FMAC3 ns3__MerchantPullPaymentResponseType ** SOAP_FMAC4 soap_in_PointerTons3__MerchantPullPaymentResponseType(struct soap*, const char*, ns3__MerchantPullPaymentResponseType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__MerchantPullPaymentResponseType(struct soap*, ns3__MerchantPullPaymentResponseType *const*, const char*, const char*);
SOAP_FMAC3 ns3__MerchantPullPaymentResponseType ** SOAP_FMAC4 soap_get_PointerTons3__MerchantPullPaymentResponseType(struct soap*, ns3__MerchantPullPaymentResponseType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__MerchantPullPaymentType_DEFINED
#define SOAP_TYPE_PointerTons3__MerchantPullPaymentType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__MerchantPullPaymentType(struct soap*, ns3__MerchantPullPaymentType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__MerchantPullPaymentType(struct soap*, const char *, int, ns3__MerchantPullPaymentType *const*, const char *);
SOAP_FMAC3 ns3__MerchantPullPaymentType ** SOAP_FMAC4 soap_in_PointerTons3__MerchantPullPaymentType(struct soap*, const char*, ns3__MerchantPullPaymentType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__MerchantPullPaymentType(struct soap*, ns3__MerchantPullPaymentType *const*, const char*, const char*);
SOAP_FMAC3 ns3__MerchantPullPaymentType ** SOAP_FMAC4 soap_get_PointerTons3__MerchantPullPaymentType(struct soap*, ns3__MerchantPullPaymentType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__ThreeDSecureInfoType_DEFINED
#define SOAP_TYPE_PointerTons3__ThreeDSecureInfoType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__ThreeDSecureInfoType(struct soap*, ns3__ThreeDSecureInfoType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__ThreeDSecureInfoType(struct soap*, const char *, int, ns3__ThreeDSecureInfoType *const*, const char *);
SOAP_FMAC3 ns3__ThreeDSecureInfoType ** SOAP_FMAC4 soap_in_PointerTons3__ThreeDSecureInfoType(struct soap*, const char*, ns3__ThreeDSecureInfoType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__ThreeDSecureInfoType(struct soap*, ns3__ThreeDSecureInfoType *const*, const char*, const char*);
SOAP_FMAC3 ns3__ThreeDSecureInfoType ** SOAP_FMAC4 soap_get_PointerTons3__ThreeDSecureInfoType(struct soap*, ns3__ThreeDSecureInfoType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__PaymentTransactionType_DEFINED
#define SOAP_TYPE_PointerTons3__PaymentTransactionType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__PaymentTransactionType(struct soap*, ns3__PaymentTransactionType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__PaymentTransactionType(struct soap*, const char *, int, ns3__PaymentTransactionType *const*, const char *);
SOAP_FMAC3 ns3__PaymentTransactionType ** SOAP_FMAC4 soap_in_PointerTons3__PaymentTransactionType(struct soap*, const char*, ns3__PaymentTransactionType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__PaymentTransactionType(struct soap*, ns3__PaymentTransactionType *const*, const char*, const char*);
SOAP_FMAC3 ns3__PaymentTransactionType ** SOAP_FMAC4 soap_get_PointerTons3__PaymentTransactionType(struct soap*, ns3__PaymentTransactionType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons4__EnhancedCancelRecoupRequestDetailsType_DEFINED
#define SOAP_TYPE_PointerTons4__EnhancedCancelRecoupRequestDetailsType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons4__EnhancedCancelRecoupRequestDetailsType(struct soap*, ns4__EnhancedCancelRecoupRequestDetailsType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons4__EnhancedCancelRecoupRequestDetailsType(struct soap*, const char *, int, ns4__EnhancedCancelRecoupRequestDetailsType *const*, const char *);
SOAP_FMAC3 ns4__EnhancedCancelRecoupRequestDetailsType ** SOAP_FMAC4 soap_in_PointerTons4__EnhancedCancelRecoupRequestDetailsType(struct soap*, const char*, ns4__EnhancedCancelRecoupRequestDetailsType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons4__EnhancedCancelRecoupRequestDetailsType(struct soap*, ns4__EnhancedCancelRecoupRequestDetailsType *const*, const char*, const char*);
SOAP_FMAC3 ns4__EnhancedCancelRecoupRequestDetailsType ** SOAP_FMAC4 soap_get_PointerTons4__EnhancedCancelRecoupRequestDetailsType(struct soap*, ns4__EnhancedCancelRecoupRequestDetailsType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons4__EnhancedCompleteRecoupResponseDetailsType_DEFINED
#define SOAP_TYPE_PointerTons4__EnhancedCompleteRecoupResponseDetailsType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons4__EnhancedCompleteRecoupResponseDetailsType(struct soap*, ns4__EnhancedCompleteRecoupResponseDetailsType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons4__EnhancedCompleteRecoupResponseDetailsType(struct soap*, const char *, int, ns4__EnhancedCompleteRecoupResponseDetailsType *const*, const char *);
SOAP_FMAC3 ns4__EnhancedCompleteRecoupResponseDetailsType ** SOAP_FMAC4 soap_in_PointerTons4__EnhancedCompleteRecoupResponseDetailsType(struct soap*, const char*, ns4__EnhancedCompleteRecoupResponseDetailsType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons4__EnhancedCompleteRecoupResponseDetailsType(struct soap*, ns4__EnhancedCompleteRecoupResponseDetailsType *const*, const char*, const char*);
SOAP_FMAC3 ns4__EnhancedCompleteRecoupResponseDetailsType ** SOAP_FMAC4 soap_get_PointerTons4__EnhancedCompleteRecoupResponseDetailsType(struct soap*, ns4__EnhancedCompleteRecoupResponseDetailsType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons4__EnhancedCompleteRecoupRequestDetailsType_DEFINED
#define SOAP_TYPE_PointerTons4__EnhancedCompleteRecoupRequestDetailsType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons4__EnhancedCompleteRecoupRequestDetailsType(struct soap*, ns4__EnhancedCompleteRecoupRequestDetailsType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons4__EnhancedCompleteRecoupRequestDetailsType(struct soap*, const char *, int, ns4__EnhancedCompleteRecoupRequestDetailsType *const*, const char *);
SOAP_FMAC3 ns4__EnhancedCompleteRecoupRequestDetailsType ** SOAP_FMAC4 soap_in_PointerTons4__EnhancedCompleteRecoupRequestDetailsType(struct soap*, const char*, ns4__EnhancedCompleteRecoupRequestDetailsType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons4__EnhancedCompleteRecoupRequestDetailsType(struct soap*, ns4__EnhancedCompleteRecoupRequestDetailsType *const*, const char*, const char*);
SOAP_FMAC3 ns4__EnhancedCompleteRecoupRequestDetailsType ** SOAP_FMAC4 soap_get_PointerTons4__EnhancedCompleteRecoupRequestDetailsType(struct soap*, ns4__EnhancedCompleteRecoupRequestDetailsType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons4__EnhancedInitiateRecoupRequestDetailsType_DEFINED
#define SOAP_TYPE_PointerTons4__EnhancedInitiateRecoupRequestDetailsType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons4__EnhancedInitiateRecoupRequestDetailsType(struct soap*, ns4__EnhancedInitiateRecoupRequestDetailsType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons4__EnhancedInitiateRecoupRequestDetailsType(struct soap*, const char *, int, ns4__EnhancedInitiateRecoupRequestDetailsType *const*, const char *);
SOAP_FMAC3 ns4__EnhancedInitiateRecoupRequestDetailsType ** SOAP_FMAC4 soap_in_PointerTons4__EnhancedInitiateRecoupRequestDetailsType(struct soap*, const char*, ns4__EnhancedInitiateRecoupRequestDetailsType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons4__EnhancedInitiateRecoupRequestDetailsType(struct soap*, ns4__EnhancedInitiateRecoupRequestDetailsType *const*, const char*, const char*);
SOAP_FMAC3 ns4__EnhancedInitiateRecoupRequestDetailsType ** SOAP_FMAC4 soap_get_PointerTons4__EnhancedInitiateRecoupRequestDetailsType(struct soap*, ns4__EnhancedInitiateRecoupRequestDetailsType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__RefundInfoType_DEFINED
#define SOAP_TYPE_PointerTons3__RefundInfoType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__RefundInfoType(struct soap*, ns3__RefundInfoType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__RefundInfoType(struct soap*, const char *, int, ns3__RefundInfoType *const*, const char *);
SOAP_FMAC3 ns3__RefundInfoType ** SOAP_FMAC4 soap_in_PointerTons3__RefundInfoType(struct soap*, const char*, ns3__RefundInfoType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__RefundInfoType(struct soap*, ns3__RefundInfoType *const*, const char*, const char*);
SOAP_FMAC3 ns3__RefundInfoType ** SOAP_FMAC4 soap_get_PointerTons3__RefundInfoType(struct soap*, ns3__RefundInfoType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__MerchantStoreDetailsType_DEFINED
#define SOAP_TYPE_PointerTons3__MerchantStoreDetailsType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__MerchantStoreDetailsType(struct soap*, ns3__MerchantStoreDetailsType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__MerchantStoreDetailsType(struct soap*, const char *, int, ns3__MerchantStoreDetailsType *const*, const char *);
SOAP_FMAC3 ns3__MerchantStoreDetailsType ** SOAP_FMAC4 soap_in_PointerTons3__MerchantStoreDetailsType(struct soap*, const char*, ns3__MerchantStoreDetailsType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__MerchantStoreDetailsType(struct soap*, ns3__MerchantStoreDetailsType *const*, const char*, const char*);
SOAP_FMAC3 ns3__MerchantStoreDetailsType ** SOAP_FMAC4 soap_get_PointerTons3__MerchantStoreDetailsType(struct soap*, ns3__MerchantStoreDetailsType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__RefundType_DEFINED
#define SOAP_TYPE_PointerTons3__RefundType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__RefundType(struct soap*, enum ns3__RefundType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__RefundType(struct soap*, const char *, int, enum ns3__RefundType *const*, const char *);
SOAP_FMAC3 enum ns3__RefundType ** SOAP_FMAC4 soap_in_PointerTons3__RefundType(struct soap*, const char*, enum ns3__RefundType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__RefundType(struct soap*, enum ns3__RefundType *const*, const char*, const char*);
SOAP_FMAC3 enum ns3__RefundType ** SOAP_FMAC4 soap_get_PointerTons3__RefundType(struct soap*, enum ns3__RefundType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__ButtonSearchResultType_DEFINED
#define SOAP_TYPE_PointerTons3__ButtonSearchResultType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__ButtonSearchResultType(struct soap*, ns3__ButtonSearchResultType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__ButtonSearchResultType(struct soap*, const char *, int, ns3__ButtonSearchResultType *const*, const char *);
SOAP_FMAC3 ns3__ButtonSearchResultType ** SOAP_FMAC4 soap_in_PointerTons3__ButtonSearchResultType(struct soap*, const char*, ns3__ButtonSearchResultType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__ButtonSearchResultType(struct soap*, ns3__ButtonSearchResultType *const*, const char*, const char*);
SOAP_FMAC3 ns3__ButtonSearchResultType ** SOAP_FMAC4 soap_get_PointerTons3__ButtonSearchResultType(struct soap*, ns3__ButtonSearchResultType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__OptionTrackingDetailsType_DEFINED
#define SOAP_TYPE_PointerTons3__OptionTrackingDetailsType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__OptionTrackingDetailsType(struct soap*, ns3__OptionTrackingDetailsType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__OptionTrackingDetailsType(struct soap*, const char *, int, ns3__OptionTrackingDetailsType *const*, const char *);
SOAP_FMAC3 ns3__OptionTrackingDetailsType ** SOAP_FMAC4 soap_in_PointerTons3__OptionTrackingDetailsType(struct soap*, const char*, ns3__OptionTrackingDetailsType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__OptionTrackingDetailsType(struct soap*, ns3__OptionTrackingDetailsType *const*, const char*, const char*);
SOAP_FMAC3 ns3__OptionTrackingDetailsType ** SOAP_FMAC4 soap_get_PointerTons3__OptionTrackingDetailsType(struct soap*, ns3__OptionTrackingDetailsType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__ItemTrackingDetailsType_DEFINED
#define SOAP_TYPE_PointerTons3__ItemTrackingDetailsType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__ItemTrackingDetailsType(struct soap*, ns3__ItemTrackingDetailsType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__ItemTrackingDetailsType(struct soap*, const char *, int, ns3__ItemTrackingDetailsType *const*, const char *);
SOAP_FMAC3 ns3__ItemTrackingDetailsType ** SOAP_FMAC4 soap_in_PointerTons3__ItemTrackingDetailsType(struct soap*, const char*, ns3__ItemTrackingDetailsType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__ItemTrackingDetailsType(struct soap*, ns3__ItemTrackingDetailsType *const*, const char*, const char*);
SOAP_FMAC3 ns3__ItemTrackingDetailsType ** SOAP_FMAC4 soap_get_PointerTons3__ItemTrackingDetailsType(struct soap*, ns3__ItemTrackingDetailsType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__ButtonStatusType_DEFINED
#define SOAP_TYPE_PointerTons3__ButtonStatusType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__ButtonStatusType(struct soap*, enum ns3__ButtonStatusType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__ButtonStatusType(struct soap*, const char *, int, enum ns3__ButtonStatusType *const*, const char *);
SOAP_FMAC3 enum ns3__ButtonStatusType ** SOAP_FMAC4 soap_in_PointerTons3__ButtonStatusType(struct soap*, const char*, enum ns3__ButtonStatusType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__ButtonStatusType(struct soap*, enum ns3__ButtonStatusType *const*, const char*, const char*);
SOAP_FMAC3 enum ns3__ButtonStatusType ** SOAP_FMAC4 soap_get_PointerTons3__ButtonStatusType(struct soap*, enum ns3__ButtonStatusType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__SubscribeTextType_DEFINED
#define SOAP_TYPE_PointerTons3__SubscribeTextType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__SubscribeTextType(struct soap*, enum ns3__SubscribeTextType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__SubscribeTextType(struct soap*, const char *, int, enum ns3__SubscribeTextType *const*, const char *);
SOAP_FMAC3 enum ns3__SubscribeTextType ** SOAP_FMAC4 soap_in_PointerTons3__SubscribeTextType(struct soap*, const char*, enum ns3__SubscribeTextType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__SubscribeTextType(struct soap*, enum ns3__SubscribeTextType *const*, const char*, const char*);
SOAP_FMAC3 enum ns3__SubscribeTextType ** SOAP_FMAC4 soap_get_PointerTons3__SubscribeTextType(struct soap*, enum ns3__SubscribeTextType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__BuyNowTextType_DEFINED
#define SOAP_TYPE_PointerTons3__BuyNowTextType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__BuyNowTextType(struct soap*, enum ns3__BuyNowTextType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__BuyNowTextType(struct soap*, const char *, int, enum ns3__BuyNowTextType *const*, const char *);
SOAP_FMAC3 enum ns3__BuyNowTextType ** SOAP_FMAC4 soap_in_PointerTons3__BuyNowTextType(struct soap*, const char*, enum ns3__BuyNowTextType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__BuyNowTextType(struct soap*, enum ns3__BuyNowTextType *const*, const char*, const char*);
SOAP_FMAC3 enum ns3__BuyNowTextType ** SOAP_FMAC4 soap_get_PointerTons3__BuyNowTextType(struct soap*, enum ns3__BuyNowTextType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__ButtonImageType_DEFINED
#define SOAP_TYPE_PointerTons3__ButtonImageType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__ButtonImageType(struct soap*, enum ns3__ButtonImageType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__ButtonImageType(struct soap*, const char *, int, enum ns3__ButtonImageType *const*, const char *);
SOAP_FMAC3 enum ns3__ButtonImageType ** SOAP_FMAC4 soap_in_PointerTons3__ButtonImageType(struct soap*, const char*, enum ns3__ButtonImageType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__ButtonImageType(struct soap*, enum ns3__ButtonImageType *const*, const char*, const char*);
SOAP_FMAC3 enum ns3__ButtonImageType ** SOAP_FMAC4 soap_get_PointerTons3__ButtonImageType(struct soap*, enum ns3__ButtonImageType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__OptionDetailsType_DEFINED
#define SOAP_TYPE_PointerTons1__OptionDetailsType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__OptionDetailsType(struct soap*, ns1__OptionDetailsType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__OptionDetailsType(struct soap*, const char *, int, ns1__OptionDetailsType *const*, const char *);
SOAP_FMAC3 ns1__OptionDetailsType ** SOAP_FMAC4 soap_in_PointerTons1__OptionDetailsType(struct soap*, const char*, ns1__OptionDetailsType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__OptionDetailsType(struct soap*, ns1__OptionDetailsType *const*, const char*, const char*);
SOAP_FMAC3 ns1__OptionDetailsType ** SOAP_FMAC4 soap_get_PointerTons1__OptionDetailsType(struct soap*, ns1__OptionDetailsType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__ButtonSubTypeType_DEFINED
#define SOAP_TYPE_PointerTons3__ButtonSubTypeType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__ButtonSubTypeType(struct soap*, enum ns3__ButtonSubTypeType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__ButtonSubTypeType(struct soap*, const char *, int, enum ns3__ButtonSubTypeType *const*, const char *);
SOAP_FMAC3 enum ns3__ButtonSubTypeType ** SOAP_FMAC4 soap_in_PointerTons3__ButtonSubTypeType(struct soap*, const char*, enum ns3__ButtonSubTypeType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__ButtonSubTypeType(struct soap*, enum ns3__ButtonSubTypeType *const*, const char*, const char*);
SOAP_FMAC3 enum ns3__ButtonSubTypeType ** SOAP_FMAC4 soap_get_PointerTons3__ButtonSubTypeType(struct soap*, enum ns3__ButtonSubTypeType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__ButtonCodeType_DEFINED
#define SOAP_TYPE_PointerTons3__ButtonCodeType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__ButtonCodeType(struct soap*, enum ns3__ButtonCodeType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__ButtonCodeType(struct soap*, const char *, int, enum ns3__ButtonCodeType *const*, const char *);
SOAP_FMAC3 enum ns3__ButtonCodeType ** SOAP_FMAC4 soap_in_PointerTons3__ButtonCodeType(struct soap*, const char*, enum ns3__ButtonCodeType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__ButtonCodeType(struct soap*, enum ns3__ButtonCodeType *const*, const char*, const char*);
SOAP_FMAC3 enum ns3__ButtonCodeType ** SOAP_FMAC4 soap_get_PointerTons3__ButtonCodeType(struct soap*, enum ns3__ButtonCodeType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__ButtonTypeType_DEFINED
#define SOAP_TYPE_PointerTons3__ButtonTypeType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__ButtonTypeType(struct soap*, enum ns3__ButtonTypeType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__ButtonTypeType(struct soap*, const char *, int, enum ns3__ButtonTypeType *const*, const char *);
SOAP_FMAC3 enum ns3__ButtonTypeType ** SOAP_FMAC4 soap_in_PointerTons3__ButtonTypeType(struct soap*, const char*, enum ns3__ButtonTypeType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__ButtonTypeType(struct soap*, enum ns3__ButtonTypeType *const*, const char*, const char*);
SOAP_FMAC3 enum ns3__ButtonTypeType ** SOAP_FMAC4 soap_get_PointerTons3__ButtonTypeType(struct soap*, enum ns3__ButtonTypeType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__WalletItemType_DEFINED
#define SOAP_TYPE_PointerTons3__WalletItemType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__WalletItemType(struct soap*, enum ns3__WalletItemType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__WalletItemType(struct soap*, const char *, int, enum ns3__WalletItemType *const*, const char *);
SOAP_FMAC3 enum ns3__WalletItemType ** SOAP_FMAC4 soap_in_PointerTons3__WalletItemType(struct soap*, const char*, enum ns3__WalletItemType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__WalletItemType(struct soap*, enum ns3__WalletItemType *const*, const char*, const char*);
SOAP_FMAC3 enum ns3__WalletItemType ** SOAP_FMAC4 soap_get_PointerTons3__WalletItemType(struct soap*, enum ns3__WalletItemType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__TupleType_DEFINED
#define SOAP_TYPE_PointerTons3__TupleType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__TupleType(struct soap*, ns3__TupleType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__TupleType(struct soap*, const char *, int, ns3__TupleType *const*, const char *);
SOAP_FMAC3 ns3__TupleType ** SOAP_FMAC4 soap_in_PointerTons3__TupleType(struct soap*, const char*, ns3__TupleType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__TupleType(struct soap*, ns3__TupleType *const*, const char*, const char*);
SOAP_FMAC3 ns3__TupleType ** SOAP_FMAC4 soap_get_PointerTons3__TupleType(struct soap*, ns3__TupleType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__CoupleType_DEFINED
#define SOAP_TYPE_PointerTons3__CoupleType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__CoupleType(struct soap*, enum ns3__CoupleType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__CoupleType(struct soap*, const char *, int, enum ns3__CoupleType *const*, const char *);
SOAP_FMAC3 enum ns3__CoupleType ** SOAP_FMAC4 soap_in_PointerTons3__CoupleType(struct soap*, const char*, enum ns3__CoupleType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__CoupleType(struct soap*, enum ns3__CoupleType *const*, const char*, const char*);
SOAP_FMAC3 enum ns3__CoupleType ** SOAP_FMAC4 soap_get_PointerTons3__CoupleType(struct soap*, enum ns3__CoupleType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__PaymentStatusCodeType_DEFINED
#define SOAP_TYPE_PointerTons3__PaymentStatusCodeType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__PaymentStatusCodeType(struct soap*, enum ns3__PaymentStatusCodeType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__PaymentStatusCodeType(struct soap*, const char *, int, enum ns3__PaymentStatusCodeType *const*, const char *);
SOAP_FMAC3 enum ns3__PaymentStatusCodeType ** SOAP_FMAC4 soap_in_PointerTons3__PaymentStatusCodeType(struct soap*, const char*, enum ns3__PaymentStatusCodeType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__PaymentStatusCodeType(struct soap*, enum ns3__PaymentStatusCodeType *const*, const char*, const char*);
SOAP_FMAC3 enum ns3__PaymentStatusCodeType ** SOAP_FMAC4 soap_get_PointerTons3__PaymentStatusCodeType(struct soap*, enum ns3__PaymentStatusCodeType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__AdditionalFeeType_DEFINED
#define SOAP_TYPE_PointerTons3__AdditionalFeeType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__AdditionalFeeType(struct soap*, ns3__AdditionalFeeType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__AdditionalFeeType(struct soap*, const char *, int, ns3__AdditionalFeeType *const*, const char *);
SOAP_FMAC3 ns3__AdditionalFeeType ** SOAP_FMAC4 soap_in_PointerTons3__AdditionalFeeType(struct soap*, const char*, ns3__AdditionalFeeType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__AdditionalFeeType(struct soap*, ns3__AdditionalFeeType *const*, const char*, const char*);
SOAP_FMAC3 ns3__AdditionalFeeType ** SOAP_FMAC4 soap_get_PointerTons3__AdditionalFeeType(struct soap*, ns3__AdditionalFeeType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__DiscountType_DEFINED
#define SOAP_TYPE_PointerTons3__DiscountType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__DiscountType(struct soap*, ns3__DiscountType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__DiscountType(struct soap*, const char *, int, ns3__DiscountType *const*, const char *);
SOAP_FMAC3 ns3__DiscountType ** SOAP_FMAC4 soap_in_PointerTons3__DiscountType(struct soap*, const char*, ns3__DiscountType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__DiscountType(struct soap*, ns3__DiscountType *const*, const char*, const char*);
SOAP_FMAC3 ns3__DiscountType ** SOAP_FMAC4 soap_get_PointerTons3__DiscountType(struct soap*, ns3__DiscountType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__UnitOfMeasure_DEFINED
#define SOAP_TYPE_PointerTons3__UnitOfMeasure_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__UnitOfMeasure(struct soap*, enum ns3__UnitOfMeasure *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__UnitOfMeasure(struct soap*, const char *, int, enum ns3__UnitOfMeasure *const*, const char *);
SOAP_FMAC3 enum ns3__UnitOfMeasure ** SOAP_FMAC4 soap_in_PointerTons3__UnitOfMeasure(struct soap*, const char*, enum ns3__UnitOfMeasure **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__UnitOfMeasure(struct soap*, enum ns3__UnitOfMeasure *const*, const char*, const char*);
SOAP_FMAC3 enum ns3__UnitOfMeasure ** SOAP_FMAC4 soap_get_PointerTons3__UnitOfMeasure(struct soap*, enum ns3__UnitOfMeasure **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTodouble_DEFINED
#define SOAP_TYPE_PointerTodouble_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTodouble(struct soap*, double *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTodouble(struct soap*, const char *, int, double *const*, const char *);
SOAP_FMAC3 double ** SOAP_FMAC4 soap_in_PointerTodouble(struct soap*, const char*, double **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTodouble(struct soap*, double *const*, const char*, const char*);
SOAP_FMAC3 double ** SOAP_FMAC4 soap_get_PointerTodouble(struct soap*, double **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__RedeemedOfferType_DEFINED
#define SOAP_TYPE_PointerTons3__RedeemedOfferType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__RedeemedOfferType(struct soap*, enum ns3__RedeemedOfferType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__RedeemedOfferType(struct soap*, const char *, int, enum ns3__RedeemedOfferType *const*, const char *);
SOAP_FMAC3 enum ns3__RedeemedOfferType ** SOAP_FMAC4 soap_in_PointerTons3__RedeemedOfferType(struct soap*, const char*, enum ns3__RedeemedOfferType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__RedeemedOfferType(struct soap*, enum ns3__RedeemedOfferType *const*, const char*, const char*);
SOAP_FMAC3 enum ns3__RedeemedOfferType ** SOAP_FMAC4 soap_get_PointerTons3__RedeemedOfferType(struct soap*, enum ns3__RedeemedOfferType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__ExternalRememberMeOwnerDetailsType_DEFINED
#define SOAP_TYPE_PointerTons3__ExternalRememberMeOwnerDetailsType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__ExternalRememberMeOwnerDetailsType(struct soap*, ns3__ExternalRememberMeOwnerDetailsType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__ExternalRememberMeOwnerDetailsType(struct soap*, const char *, int, ns3__ExternalRememberMeOwnerDetailsType *const*, const char *);
SOAP_FMAC3 ns3__ExternalRememberMeOwnerDetailsType ** SOAP_FMAC4 soap_in_PointerTons3__ExternalRememberMeOwnerDetailsType(struct soap*, const char*, ns3__ExternalRememberMeOwnerDetailsType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__ExternalRememberMeOwnerDetailsType(struct soap*, ns3__ExternalRememberMeOwnerDetailsType *const*, const char*, const char*);
SOAP_FMAC3 ns3__ExternalRememberMeOwnerDetailsType ** SOAP_FMAC4 soap_get_PointerTons3__ExternalRememberMeOwnerDetailsType(struct soap*, ns3__ExternalRememberMeOwnerDetailsType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__FlightDetailsType_DEFINED
#define SOAP_TYPE_PointerTons3__FlightDetailsType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__FlightDetailsType(struct soap*, ns3__FlightDetailsType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__FlightDetailsType(struct soap*, const char *, int, ns3__FlightDetailsType *const*, const char *);
SOAP_FMAC3 ns3__FlightDetailsType ** SOAP_FMAC4 soap_in_PointerTons3__FlightDetailsType(struct soap*, const char*, ns3__FlightDetailsType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__FlightDetailsType(struct soap*, ns3__FlightDetailsType *const*, const char*, const char*);
SOAP_FMAC3 ns3__FlightDetailsType ** SOAP_FMAC4 soap_get_PointerTons3__FlightDetailsType(struct soap*, ns3__FlightDetailsType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__AirlineItineraryType_DEFINED
#define SOAP_TYPE_PointerTons3__AirlineItineraryType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__AirlineItineraryType(struct soap*, ns3__AirlineItineraryType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__AirlineItineraryType(struct soap*, const char *, int, ns3__AirlineItineraryType *const*, const char *);
SOAP_FMAC3 ns3__AirlineItineraryType ** SOAP_FMAC4 soap_in_PointerTons3__AirlineItineraryType(struct soap*, const char*, ns3__AirlineItineraryType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__AirlineItineraryType(struct soap*, ns3__AirlineItineraryType *const*, const char*, const char*);
SOAP_FMAC3 ns3__AirlineItineraryType ** SOAP_FMAC4 soap_get_PointerTons3__AirlineItineraryType(struct soap*, ns3__AirlineItineraryType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__RiskFilterListType_DEFINED
#define SOAP_TYPE_PointerTons3__RiskFilterListType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__RiskFilterListType(struct soap*, ns3__RiskFilterListType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__RiskFilterListType(struct soap*, const char *, int, ns3__RiskFilterListType *const*, const char *);
SOAP_FMAC3 ns3__RiskFilterListType ** SOAP_FMAC4 soap_in_PointerTons3__RiskFilterListType(struct soap*, const char*, ns3__RiskFilterListType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__RiskFilterListType(struct soap*, ns3__RiskFilterListType *const*, const char*, const char*);
SOAP_FMAC3 ns3__RiskFilterListType ** SOAP_FMAC4 soap_get_PointerTons3__RiskFilterListType(struct soap*, ns3__RiskFilterListType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__RiskFilterDetailsType_DEFINED
#define SOAP_TYPE_PointerTons3__RiskFilterDetailsType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__RiskFilterDetailsType(struct soap*, ns3__RiskFilterDetailsType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__RiskFilterDetailsType(struct soap*, const char *, int, ns3__RiskFilterDetailsType *const*, const char *);
SOAP_FMAC3 ns3__RiskFilterDetailsType ** SOAP_FMAC4 soap_in_PointerTons3__RiskFilterDetailsType(struct soap*, const char*, ns3__RiskFilterDetailsType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__RiskFilterDetailsType(struct soap*, ns3__RiskFilterDetailsType *const*, const char*, const char*);
SOAP_FMAC3 ns3__RiskFilterDetailsType ** SOAP_FMAC4 soap_get_PointerTons3__RiskFilterDetailsType(struct soap*, ns3__RiskFilterDetailsType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__BillingPeriodDetailsType_USCOREUpdate_DEFINED
#define SOAP_TYPE_PointerTons3__BillingPeriodDetailsType_USCOREUpdate_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__BillingPeriodDetailsType_USCOREUpdate(struct soap*, ns3__BillingPeriodDetailsType_USCOREUpdate *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__BillingPeriodDetailsType_USCOREUpdate(struct soap*, const char *, int, ns3__BillingPeriodDetailsType_USCOREUpdate *const*, const char *);
SOAP_FMAC3 ns3__BillingPeriodDetailsType_USCOREUpdate ** SOAP_FMAC4 soap_in_PointerTons3__BillingPeriodDetailsType_USCOREUpdate(struct soap*, const char*, ns3__BillingPeriodDetailsType_USCOREUpdate **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__BillingPeriodDetailsType_USCOREUpdate(struct soap*, ns3__BillingPeriodDetailsType_USCOREUpdate *const*, const char*, const char*);
SOAP_FMAC3 ns3__BillingPeriodDetailsType_USCOREUpdate ** SOAP_FMAC4 soap_get_PointerTons3__BillingPeriodDetailsType_USCOREUpdate(struct soap*, ns3__BillingPeriodDetailsType_USCOREUpdate **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__RecurringPaymentsSummaryType_DEFINED
#define SOAP_TYPE_PointerTons3__RecurringPaymentsSummaryType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__RecurringPaymentsSummaryType(struct soap*, ns3__RecurringPaymentsSummaryType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__RecurringPaymentsSummaryType(struct soap*, const char *, int, ns3__RecurringPaymentsSummaryType *const*, const char *);
SOAP_FMAC3 ns3__RecurringPaymentsSummaryType ** SOAP_FMAC4 soap_in_PointerTons3__RecurringPaymentsSummaryType(struct soap*, const char*, ns3__RecurringPaymentsSummaryType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__RecurringPaymentsSummaryType(struct soap*, ns3__RecurringPaymentsSummaryType *const*, const char*, const char*);
SOAP_FMAC3 ns3__RecurringPaymentsSummaryType ** SOAP_FMAC4 soap_get_PointerTons3__RecurringPaymentsSummaryType(struct soap*, ns3__RecurringPaymentsSummaryType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__RecurringPaymentsProfileStatusType_DEFINED
#define SOAP_TYPE_PointerTons3__RecurringPaymentsProfileStatusType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__RecurringPaymentsProfileStatusType(struct soap*, enum ns3__RecurringPaymentsProfileStatusType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__RecurringPaymentsProfileStatusType(struct soap*, const char *, int, enum ns3__RecurringPaymentsProfileStatusType *const*, const char *);
SOAP_FMAC3 enum ns3__RecurringPaymentsProfileStatusType ** SOAP_FMAC4 soap_in_PointerTons3__RecurringPaymentsProfileStatusType(struct soap*, const char*, enum ns3__RecurringPaymentsProfileStatusType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__RecurringPaymentsProfileStatusType(struct soap*, enum ns3__RecurringPaymentsProfileStatusType *const*, const char*, const char*);
SOAP_FMAC3 enum ns3__RecurringPaymentsProfileStatusType ** SOAP_FMAC4 soap_get_PointerTons3__RecurringPaymentsProfileStatusType(struct soap*, enum ns3__RecurringPaymentsProfileStatusType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__ScheduleDetailsType_DEFINED
#define SOAP_TYPE_PointerTons3__ScheduleDetailsType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__ScheduleDetailsType(struct soap*, ns3__ScheduleDetailsType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__ScheduleDetailsType(struct soap*, const char *, int, ns3__ScheduleDetailsType *const*, const char *);
SOAP_FMAC3 ns3__ScheduleDetailsType ** SOAP_FMAC4 soap_in_PointerTons3__ScheduleDetailsType(struct soap*, const char*, ns3__ScheduleDetailsType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__ScheduleDetailsType(struct soap*, ns3__ScheduleDetailsType *const*, const char*, const char*);
SOAP_FMAC3 ns3__ScheduleDetailsType ** SOAP_FMAC4 soap_get_PointerTons3__ScheduleDetailsType(struct soap*, ns3__ScheduleDetailsType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__RecurringPaymentsProfileDetailsType_DEFINED
#define SOAP_TYPE_PointerTons3__RecurringPaymentsProfileDetailsType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__RecurringPaymentsProfileDetailsType(struct soap*, ns3__RecurringPaymentsProfileDetailsType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__RecurringPaymentsProfileDetailsType(struct soap*, const char *, int, ns3__RecurringPaymentsProfileDetailsType *const*, const char *);
SOAP_FMAC3 ns3__RecurringPaymentsProfileDetailsType ** SOAP_FMAC4 soap_in_PointerTons3__RecurringPaymentsProfileDetailsType(struct soap*, const char*, ns3__RecurringPaymentsProfileDetailsType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__RecurringPaymentsProfileDetailsType(struct soap*, ns3__RecurringPaymentsProfileDetailsType *const*, const char*, const char*);
SOAP_FMAC3 ns3__RecurringPaymentsProfileDetailsType ** SOAP_FMAC4 soap_get_PointerTons3__RecurringPaymentsProfileDetailsType(struct soap*, ns3__RecurringPaymentsProfileDetailsType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__AutoBillType_DEFINED
#define SOAP_TYPE_PointerTons3__AutoBillType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__AutoBillType(struct soap*, enum ns3__AutoBillType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__AutoBillType(struct soap*, const char *, int, enum ns3__AutoBillType *const*, const char *);
SOAP_FMAC3 enum ns3__AutoBillType ** SOAP_FMAC4 soap_in_PointerTons3__AutoBillType(struct soap*, const char*, enum ns3__AutoBillType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__AutoBillType(struct soap*, enum ns3__AutoBillType *const*, const char*, const char*);
SOAP_FMAC3 enum ns3__AutoBillType ** SOAP_FMAC4 soap_get_PointerTons3__AutoBillType(struct soap*, enum ns3__AutoBillType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__ActivationDetailsType_DEFINED
#define SOAP_TYPE_PointerTons3__ActivationDetailsType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__ActivationDetailsType(struct soap*, ns3__ActivationDetailsType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__ActivationDetailsType(struct soap*, const char *, int, ns3__ActivationDetailsType *const*, const char *);
SOAP_FMAC3 ns3__ActivationDetailsType ** SOAP_FMAC4 soap_in_PointerTons3__ActivationDetailsType(struct soap*, const char*, ns3__ActivationDetailsType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__ActivationDetailsType(struct soap*, ns3__ActivationDetailsType *const*, const char*, const char*);
SOAP_FMAC3 ns3__ActivationDetailsType ** SOAP_FMAC4 soap_get_PointerTons3__ActivationDetailsType(struct soap*, ns3__ActivationDetailsType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__BillingPeriodDetailsType_DEFINED
#define SOAP_TYPE_PointerTons3__BillingPeriodDetailsType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__BillingPeriodDetailsType(struct soap*, ns3__BillingPeriodDetailsType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__BillingPeriodDetailsType(struct soap*, const char *, int, ns3__BillingPeriodDetailsType *const*, const char *);
SOAP_FMAC3 ns3__BillingPeriodDetailsType ** SOAP_FMAC4 soap_in_PointerTons3__BillingPeriodDetailsType(struct soap*, const char*, ns3__BillingPeriodDetailsType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__BillingPeriodDetailsType(struct soap*, ns3__BillingPeriodDetailsType *const*, const char*, const char*);
SOAP_FMAC3 ns3__BillingPeriodDetailsType ** SOAP_FMAC4 soap_get_PointerTons3__BillingPeriodDetailsType(struct soap*, ns3__BillingPeriodDetailsType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__FailedPaymentActionType_DEFINED
#define SOAP_TYPE_PointerTons3__FailedPaymentActionType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__FailedPaymentActionType(struct soap*, enum ns3__FailedPaymentActionType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__FailedPaymentActionType(struct soap*, const char *, int, enum ns3__FailedPaymentActionType *const*, const char *);
SOAP_FMAC3 enum ns3__FailedPaymentActionType ** SOAP_FMAC4 soap_in_PointerTons3__FailedPaymentActionType(struct soap*, const char*, enum ns3__FailedPaymentActionType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__FailedPaymentActionType(struct soap*, enum ns3__FailedPaymentActionType *const*, const char*, const char*);
SOAP_FMAC3 enum ns3__FailedPaymentActionType ** SOAP_FMAC4 soap_get_PointerTons3__FailedPaymentActionType(struct soap*, enum ns3__FailedPaymentActionType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__APICredentialsType_DEFINED
#define SOAP_TYPE_PointerTons3__APICredentialsType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__APICredentialsType(struct soap*, ns3__APICredentialsType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__APICredentialsType(struct soap*, const char *, int, ns3__APICredentialsType *const*, const char *);
SOAP_FMAC3 ns3__APICredentialsType ** SOAP_FMAC4 soap_in_PointerTons3__APICredentialsType(struct soap*, const char*, ns3__APICredentialsType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__APICredentialsType(struct soap*, ns3__APICredentialsType *const*, const char*, const char*);
SOAP_FMAC3 ns3__APICredentialsType ** SOAP_FMAC4 soap_get_PointerTons3__APICredentialsType(struct soap*, ns3__APICredentialsType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__UserWithdrawalLimitTypeType_DEFINED
#define SOAP_TYPE_PointerTons3__UserWithdrawalLimitTypeType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__UserWithdrawalLimitTypeType(struct soap*, enum ns3__UserWithdrawalLimitTypeType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__UserWithdrawalLimitTypeType(struct soap*, const char *, int, enum ns3__UserWithdrawalLimitTypeType *const*, const char *);
SOAP_FMAC3 enum ns3__UserWithdrawalLimitTypeType ** SOAP_FMAC4 soap_in_PointerTons3__UserWithdrawalLimitTypeType(struct soap*, const char*, enum ns3__UserWithdrawalLimitTypeType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__UserWithdrawalLimitTypeType(struct soap*, enum ns3__UserWithdrawalLimitTypeType *const*, const char*, const char*);
SOAP_FMAC3 enum ns3__UserWithdrawalLimitTypeType ** SOAP_FMAC4 soap_get_PointerTons3__UserWithdrawalLimitTypeType(struct soap*, enum ns3__UserWithdrawalLimitTypeType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__PercentageRevenueFromOnlineSalesType_DEFINED
#define SOAP_TYPE_PointerTons3__PercentageRevenueFromOnlineSalesType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__PercentageRevenueFromOnlineSalesType(struct soap*, enum ns3__PercentageRevenueFromOnlineSalesType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__PercentageRevenueFromOnlineSalesType(struct soap*, const char *, int, enum ns3__PercentageRevenueFromOnlineSalesType *const*, const char *);
SOAP_FMAC3 enum ns3__PercentageRevenueFromOnlineSalesType ** SOAP_FMAC4 soap_in_PointerTons3__PercentageRevenueFromOnlineSalesType(struct soap*, const char*, enum ns3__PercentageRevenueFromOnlineSalesType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__PercentageRevenueFromOnlineSalesType(struct soap*, enum ns3__PercentageRevenueFromOnlineSalesType *const*, const char*, const char*);
SOAP_FMAC3 enum ns3__PercentageRevenueFromOnlineSalesType ** SOAP_FMAC4 soap_get_PointerTons3__PercentageRevenueFromOnlineSalesType(struct soap*, enum ns3__PercentageRevenueFromOnlineSalesType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__SalesVenueType_DEFINED
#define SOAP_TYPE_PointerTons3__SalesVenueType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__SalesVenueType(struct soap*, enum ns3__SalesVenueType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__SalesVenueType(struct soap*, const char *, int, enum ns3__SalesVenueType *const*, const char *);
SOAP_FMAC3 enum ns3__SalesVenueType ** SOAP_FMAC4 soap_in_PointerTons3__SalesVenueType(struct soap*, const char*, enum ns3__SalesVenueType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__SalesVenueType(struct soap*, enum ns3__SalesVenueType *const*, const char*, const char*);
SOAP_FMAC3 enum ns3__SalesVenueType ** SOAP_FMAC4 soap_get_PointerTons3__SalesVenueType(struct soap*, enum ns3__SalesVenueType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__AverageMonthlyVolumeType_DEFINED
#define SOAP_TYPE_PointerTons3__AverageMonthlyVolumeType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__AverageMonthlyVolumeType(struct soap*, enum ns3__AverageMonthlyVolumeType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__AverageMonthlyVolumeType(struct soap*, const char *, int, enum ns3__AverageMonthlyVolumeType *const*, const char *);
SOAP_FMAC3 enum ns3__AverageMonthlyVolumeType ** SOAP_FMAC4 soap_in_PointerTons3__AverageMonthlyVolumeType(struct soap*, const char*, enum ns3__AverageMonthlyVolumeType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__AverageMonthlyVolumeType(struct soap*, enum ns3__AverageMonthlyVolumeType *const*, const char*, const char*);
SOAP_FMAC3 enum ns3__AverageMonthlyVolumeType ** SOAP_FMAC4 soap_get_PointerTons3__AverageMonthlyVolumeType(struct soap*, enum ns3__AverageMonthlyVolumeType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__AverageTransactionPriceType_DEFINED
#define SOAP_TYPE_PointerTons3__AverageTransactionPriceType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__AverageTransactionPriceType(struct soap*, enum ns3__AverageTransactionPriceType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__AverageTransactionPriceType(struct soap*, const char *, int, enum ns3__AverageTransactionPriceType *const*, const char *);
SOAP_FMAC3 enum ns3__AverageTransactionPriceType ** SOAP_FMAC4 soap_in_PointerTons3__AverageTransactionPriceType(struct soap*, const char*, enum ns3__AverageTransactionPriceType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__AverageTransactionPriceType(struct soap*, enum ns3__AverageTransactionPriceType *const*, const char*, const char*);
SOAP_FMAC3 enum ns3__AverageTransactionPriceType ** SOAP_FMAC4 soap_get_PointerTons3__AverageTransactionPriceType(struct soap*, enum ns3__AverageTransactionPriceType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__BusinessSubCategoryType_DEFINED
#define SOAP_TYPE_PointerTons3__BusinessSubCategoryType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__BusinessSubCategoryType(struct soap*, enum ns3__BusinessSubCategoryType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__BusinessSubCategoryType(struct soap*, const char *, int, enum ns3__BusinessSubCategoryType *const*, const char *);
SOAP_FMAC3 enum ns3__BusinessSubCategoryType ** SOAP_FMAC4 soap_in_PointerTons3__BusinessSubCategoryType(struct soap*, const char*, enum ns3__BusinessSubCategoryType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__BusinessSubCategoryType(struct soap*, enum ns3__BusinessSubCategoryType *const*, const char*, const char*);
SOAP_FMAC3 enum ns3__BusinessSubCategoryType ** SOAP_FMAC4 soap_get_PointerTons3__BusinessSubCategoryType(struct soap*, enum ns3__BusinessSubCategoryType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__BusinessCategoryType_DEFINED
#define SOAP_TYPE_PointerTons3__BusinessCategoryType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__BusinessCategoryType(struct soap*, enum ns3__BusinessCategoryType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__BusinessCategoryType(struct soap*, const char *, int, enum ns3__BusinessCategoryType *const*, const char *);
SOAP_FMAC3 enum ns3__BusinessCategoryType ** SOAP_FMAC4 soap_in_PointerTons3__BusinessCategoryType(struct soap*, const char*, enum ns3__BusinessCategoryType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__BusinessCategoryType(struct soap*, enum ns3__BusinessCategoryType *const*, const char*, const char*);
SOAP_FMAC3 enum ns3__BusinessCategoryType ** SOAP_FMAC4 soap_get_PointerTons3__BusinessCategoryType(struct soap*, enum ns3__BusinessCategoryType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__BusinessTypeType_DEFINED
#define SOAP_TYPE_PointerTons3__BusinessTypeType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__BusinessTypeType(struct soap*, enum ns3__BusinessTypeType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__BusinessTypeType(struct soap*, const char *, int, enum ns3__BusinessTypeType *const*, const char *);
SOAP_FMAC3 enum ns3__BusinessTypeType ** SOAP_FMAC4 soap_in_PointerTons3__BusinessTypeType(struct soap*, const char*, enum ns3__BusinessTypeType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__BusinessTypeType(struct soap*, enum ns3__BusinessTypeType *const*, const char*, const char*);
SOAP_FMAC3 enum ns3__BusinessTypeType ** SOAP_FMAC4 soap_get_PointerTons3__BusinessTypeType(struct soap*, enum ns3__BusinessTypeType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__BankAccountDetailsType_DEFINED
#define SOAP_TYPE_PointerTons3__BankAccountDetailsType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__BankAccountDetailsType(struct soap*, ns3__BankAccountDetailsType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__BankAccountDetailsType(struct soap*, const char *, int, ns3__BankAccountDetailsType *const*, const char *);
SOAP_FMAC3 ns3__BankAccountDetailsType ** SOAP_FMAC4 soap_in_PointerTons3__BankAccountDetailsType(struct soap*, const char*, ns3__BankAccountDetailsType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__BankAccountDetailsType(struct soap*, ns3__BankAccountDetailsType *const*, const char*, const char*);
SOAP_FMAC3 ns3__BankAccountDetailsType ** SOAP_FMAC4 soap_get_PointerTons3__BankAccountDetailsType(struct soap*, ns3__BankAccountDetailsType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__BusinessOwnerInfoType_DEFINED
#define SOAP_TYPE_PointerTons3__BusinessOwnerInfoType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__BusinessOwnerInfoType(struct soap*, ns3__BusinessOwnerInfoType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__BusinessOwnerInfoType(struct soap*, const char *, int, ns3__BusinessOwnerInfoType *const*, const char *);
SOAP_FMAC3 ns3__BusinessOwnerInfoType ** SOAP_FMAC4 soap_in_PointerTons3__BusinessOwnerInfoType(struct soap*, const char*, ns3__BusinessOwnerInfoType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__BusinessOwnerInfoType(struct soap*, ns3__BusinessOwnerInfoType *const*, const char*, const char*);
SOAP_FMAC3 ns3__BusinessOwnerInfoType ** SOAP_FMAC4 soap_get_PointerTons3__BusinessOwnerInfoType(struct soap*, ns3__BusinessOwnerInfoType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__BusinessInfoType_DEFINED
#define SOAP_TYPE_PointerTons3__BusinessInfoType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__BusinessInfoType(struct soap*, ns3__BusinessInfoType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__BusinessInfoType(struct soap*, const char *, int, ns3__BusinessInfoType *const*, const char *);
SOAP_FMAC3 ns3__BusinessInfoType ** SOAP_FMAC4 soap_in_PointerTons3__BusinessInfoType(struct soap*, const char*, ns3__BusinessInfoType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__BusinessInfoType(struct soap*, ns3__BusinessInfoType *const*, const char*, const char*);
SOAP_FMAC3 ns3__BusinessInfoType ** SOAP_FMAC4 soap_get_PointerTons3__BusinessInfoType(struct soap*, ns3__BusinessInfoType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__MarketingCategoryType_DEFINED
#define SOAP_TYPE_PointerTons3__MarketingCategoryType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__MarketingCategoryType(struct soap*, enum ns3__MarketingCategoryType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__MarketingCategoryType(struct soap*, const char *, int, enum ns3__MarketingCategoryType *const*, const char *);
SOAP_FMAC3 enum ns3__MarketingCategoryType ** SOAP_FMAC4 soap_in_PointerTons3__MarketingCategoryType(struct soap*, const char*, enum ns3__MarketingCategoryType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__MarketingCategoryType(struct soap*, enum ns3__MarketingCategoryType *const*, const char*, const char*);
SOAP_FMAC3 enum ns3__MarketingCategoryType ** SOAP_FMAC4 soap_get_PointerTons3__MarketingCategoryType(struct soap*, enum ns3__MarketingCategoryType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__SenderDetailsType_DEFINED
#define SOAP_TYPE_PointerTons3__SenderDetailsType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__SenderDetailsType(struct soap*, ns3__SenderDetailsType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__SenderDetailsType(struct soap*, const char *, int, ns3__SenderDetailsType *const*, const char *);
SOAP_FMAC3 ns3__SenderDetailsType ** SOAP_FMAC4 soap_in_PointerTons3__SenderDetailsType(struct soap*, const char*, ns3__SenderDetailsType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__SenderDetailsType(struct soap*, ns3__SenderDetailsType *const*, const char*, const char*);
SOAP_FMAC3 ns3__SenderDetailsType ** SOAP_FMAC4 soap_get_PointerTons3__SenderDetailsType(struct soap*, ns3__SenderDetailsType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__ReferenceCreditCardDetailsType_DEFINED
#define SOAP_TYPE_PointerTons3__ReferenceCreditCardDetailsType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__ReferenceCreditCardDetailsType(struct soap*, ns3__ReferenceCreditCardDetailsType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__ReferenceCreditCardDetailsType(struct soap*, const char *, int, ns3__ReferenceCreditCardDetailsType *const*, const char *);
SOAP_FMAC3 ns3__ReferenceCreditCardDetailsType ** SOAP_FMAC4 soap_in_PointerTons3__ReferenceCreditCardDetailsType(struct soap*, const char*, ns3__ReferenceCreditCardDetailsType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__ReferenceCreditCardDetailsType(struct soap*, ns3__ReferenceCreditCardDetailsType *const*, const char*, const char*);
SOAP_FMAC3 ns3__ReferenceCreditCardDetailsType ** SOAP_FMAC4 soap_get_PointerTons3__ReferenceCreditCardDetailsType(struct soap*, ns3__ReferenceCreditCardDetailsType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__DeviceDetailsType_DEFINED
#define SOAP_TYPE_PointerTons3__DeviceDetailsType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__DeviceDetailsType(struct soap*, ns3__DeviceDetailsType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__DeviceDetailsType(struct soap*, const char *, int, ns3__DeviceDetailsType *const*, const char *);
SOAP_FMAC3 ns3__DeviceDetailsType ** SOAP_FMAC4 soap_in_PointerTons3__DeviceDetailsType(struct soap*, const char*, ns3__DeviceDetailsType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__DeviceDetailsType(struct soap*, ns3__DeviceDetailsType *const*, const char*, const char*);
SOAP_FMAC3 ns3__DeviceDetailsType ** SOAP_FMAC4 soap_get_PointerTons3__DeviceDetailsType(struct soap*, ns3__DeviceDetailsType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__UserIdPasswordType_DEFINED
#define SOAP_TYPE_PointerTons3__UserIdPasswordType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__UserIdPasswordType(struct soap*, ns3__UserIdPasswordType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__UserIdPasswordType(struct soap*, const char *, int, ns3__UserIdPasswordType *const*, const char *);
SOAP_FMAC3 ns3__UserIdPasswordType ** SOAP_FMAC4 soap_in_PointerTons3__UserIdPasswordType(struct soap*, const char*, ns3__UserIdPasswordType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__UserIdPasswordType(struct soap*, ns3__UserIdPasswordType *const*, const char*, const char*);
SOAP_FMAC3 ns3__UserIdPasswordType ** SOAP_FMAC4 soap_get_PointerTons3__UserIdPasswordType(struct soap*, ns3__UserIdPasswordType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__CreditCardNumberTypeType_DEFINED
#define SOAP_TYPE_PointerTons3__CreditCardNumberTypeType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__CreditCardNumberTypeType(struct soap*, ns3__CreditCardNumberTypeType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__CreditCardNumberTypeType(struct soap*, const char *, int, ns3__CreditCardNumberTypeType *const*, const char *);
SOAP_FMAC3 ns3__CreditCardNumberTypeType ** SOAP_FMAC4 soap_in_PointerTons3__CreditCardNumberTypeType(struct soap*, const char*, ns3__CreditCardNumberTypeType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__CreditCardNumberTypeType(struct soap*, ns3__CreditCardNumberTypeType *const*, const char*, const char*);
SOAP_FMAC3 ns3__CreditCardNumberTypeType ** SOAP_FMAC4 soap_get_PointerTons3__CreditCardNumberTypeType(struct soap*, ns3__CreditCardNumberTypeType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__CreditCardTypeType_DEFINED
#define SOAP_TYPE_PointerTons3__CreditCardTypeType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__CreditCardTypeType(struct soap*, enum ns3__CreditCardTypeType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__CreditCardTypeType(struct soap*, const char *, int, enum ns3__CreditCardTypeType *const*, const char *);
SOAP_FMAC3 enum ns3__CreditCardTypeType ** SOAP_FMAC4 soap_in_PointerTons3__CreditCardTypeType(struct soap*, const char*, enum ns3__CreditCardTypeType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__CreditCardTypeType(struct soap*, enum ns3__CreditCardTypeType *const*, const char*, const char*);
SOAP_FMAC3 enum ns3__CreditCardTypeType ** SOAP_FMAC4 soap_get_PointerTons3__CreditCardTypeType(struct soap*, enum ns3__CreditCardTypeType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__ThreeDSecureResponseType_DEFINED
#define SOAP_TYPE_PointerTons3__ThreeDSecureResponseType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__ThreeDSecureResponseType(struct soap*, ns3__ThreeDSecureResponseType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__ThreeDSecureResponseType(struct soap*, const char *, int, ns3__ThreeDSecureResponseType *const*, const char *);
SOAP_FMAC3 ns3__ThreeDSecureResponseType ** SOAP_FMAC4 soap_in_PointerTons3__ThreeDSecureResponseType(struct soap*, const char*, ns3__ThreeDSecureResponseType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__ThreeDSecureResponseType(struct soap*, ns3__ThreeDSecureResponseType *const*, const char*, const char*);
SOAP_FMAC3 ns3__ThreeDSecureResponseType ** SOAP_FMAC4 soap_get_PointerTons3__ThreeDSecureResponseType(struct soap*, ns3__ThreeDSecureResponseType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__ThreeDSecureRequestType_DEFINED
#define SOAP_TYPE_PointerTons3__ThreeDSecureRequestType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__ThreeDSecureRequestType(struct soap*, ns3__ThreeDSecureRequestType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__ThreeDSecureRequestType(struct soap*, const char *, int, ns3__ThreeDSecureRequestType *const*, const char *);
SOAP_FMAC3 ns3__ThreeDSecureRequestType ** SOAP_FMAC4 soap_in_PointerTons3__ThreeDSecureRequestType(struct soap*, const char*, ns3__ThreeDSecureRequestType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__ThreeDSecureRequestType(struct soap*, ns3__ThreeDSecureRequestType *const*, const char*, const char*);
SOAP_FMAC3 ns3__ThreeDSecureRequestType ** SOAP_FMAC4 soap_get_PointerTons3__ThreeDSecureRequestType(struct soap*, ns3__ThreeDSecureRequestType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__IncentiveAppliedDetailsType_DEFINED
#define SOAP_TYPE_PointerTons3__IncentiveAppliedDetailsType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__IncentiveAppliedDetailsType(struct soap*, ns3__IncentiveAppliedDetailsType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__IncentiveAppliedDetailsType(struct soap*, const char *, int, ns3__IncentiveAppliedDetailsType *const*, const char *);
SOAP_FMAC3 ns3__IncentiveAppliedDetailsType ** SOAP_FMAC4 soap_in_PointerTons3__IncentiveAppliedDetailsType(struct soap*, const char*, ns3__IncentiveAppliedDetailsType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__IncentiveAppliedDetailsType(struct soap*, ns3__IncentiveAppliedDetailsType *const*, const char*, const char*);
SOAP_FMAC3 ns3__IncentiveAppliedDetailsType ** SOAP_FMAC4 soap_get_PointerTons3__IncentiveAppliedDetailsType(struct soap*, ns3__IncentiveAppliedDetailsType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__IncentiveAppliedStatusType_DEFINED
#define SOAP_TYPE_PointerTons3__IncentiveAppliedStatusType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__IncentiveAppliedStatusType(struct soap*, enum ns3__IncentiveAppliedStatusType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__IncentiveAppliedStatusType(struct soap*, const char *, int, enum ns3__IncentiveAppliedStatusType *const*, const char *);
SOAP_FMAC3 enum ns3__IncentiveAppliedStatusType ** SOAP_FMAC4 soap_in_PointerTons3__IncentiveAppliedStatusType(struct soap*, const char*, enum ns3__IncentiveAppliedStatusType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__IncentiveAppliedStatusType(struct soap*, enum ns3__IncentiveAppliedStatusType *const*, const char*, const char*);
SOAP_FMAC3 enum ns3__IncentiveAppliedStatusType ** SOAP_FMAC4 soap_get_PointerTons3__IncentiveAppliedStatusType(struct soap*, enum ns3__IncentiveAppliedStatusType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__IncentiveSiteAppliedOnType_DEFINED
#define SOAP_TYPE_PointerTons3__IncentiveSiteAppliedOnType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__IncentiveSiteAppliedOnType(struct soap*, enum ns3__IncentiveSiteAppliedOnType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__IncentiveSiteAppliedOnType(struct soap*, const char *, int, enum ns3__IncentiveSiteAppliedOnType *const*, const char *);
SOAP_FMAC3 enum ns3__IncentiveSiteAppliedOnType ** SOAP_FMAC4 soap_in_PointerTons3__IncentiveSiteAppliedOnType(struct soap*, const char*, enum ns3__IncentiveSiteAppliedOnType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__IncentiveSiteAppliedOnType(struct soap*, enum ns3__IncentiveSiteAppliedOnType *const*, const char*, const char*);
SOAP_FMAC3 enum ns3__IncentiveSiteAppliedOnType ** SOAP_FMAC4 soap_get_PointerTons3__IncentiveSiteAppliedOnType(struct soap*, enum ns3__IncentiveSiteAppliedOnType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__MerchantDataType_DEFINED
#define SOAP_TYPE_PointerTons3__MerchantDataType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__MerchantDataType(struct soap*, ns3__MerchantDataType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__MerchantDataType(struct soap*, const char *, int, ns3__MerchantDataType *const*, const char *);
SOAP_FMAC3 ns3__MerchantDataType ** SOAP_FMAC4 soap_in_PointerTons3__MerchantDataType(struct soap*, const char*, ns3__MerchantDataType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__MerchantDataType(struct soap*, ns3__MerchantDataType *const*, const char*, const char*);
SOAP_FMAC3 ns3__MerchantDataType ** SOAP_FMAC4 soap_get_PointerTons3__MerchantDataType(struct soap*, ns3__MerchantDataType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__DiscountInfoType_DEFINED
#define SOAP_TYPE_PointerTons3__DiscountInfoType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__DiscountInfoType(struct soap*, ns3__DiscountInfoType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__DiscountInfoType(struct soap*, const char *, int, ns3__DiscountInfoType *const*, const char *);
SOAP_FMAC3 ns3__DiscountInfoType ** SOAP_FMAC4 soap_in_PointerTons3__DiscountInfoType(struct soap*, const char*, ns3__DiscountInfoType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__DiscountInfoType(struct soap*, ns3__DiscountInfoType *const*, const char*, const char*);
SOAP_FMAC3 ns3__DiscountInfoType ** SOAP_FMAC4 soap_get_PointerTons3__DiscountInfoType(struct soap*, ns3__DiscountInfoType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__PaymentReasonType_DEFINED
#define SOAP_TYPE_PointerTons3__PaymentReasonType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__PaymentReasonType(struct soap*, enum ns3__PaymentReasonType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__PaymentReasonType(struct soap*, const char *, int, enum ns3__PaymentReasonType *const*, const char *);
SOAP_FMAC3 enum ns3__PaymentReasonType ** SOAP_FMAC4 soap_in_PointerTons3__PaymentReasonType(struct soap*, const char*, enum ns3__PaymentReasonType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__PaymentReasonType(struct soap*, enum ns3__PaymentReasonType *const*, const char*, const char*);
SOAP_FMAC3 enum ns3__PaymentReasonType ** SOAP_FMAC4 soap_get_PointerTons3__PaymentReasonType(struct soap*, enum ns3__PaymentReasonType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__RecurringFlagType_DEFINED
#define SOAP_TYPE_PointerTons3__RecurringFlagType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__RecurringFlagType(struct soap*, enum ns3__RecurringFlagType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__RecurringFlagType(struct soap*, const char *, int, enum ns3__RecurringFlagType *const*, const char *);
SOAP_FMAC3 enum ns3__RecurringFlagType ** SOAP_FMAC4 soap_in_PointerTons3__RecurringFlagType(struct soap*, const char*, enum ns3__RecurringFlagType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__RecurringFlagType(struct soap*, enum ns3__RecurringFlagType *const*, const char*, const char*);
SOAP_FMAC3 enum ns3__RecurringFlagType ** SOAP_FMAC4 soap_get_PointerTons3__RecurringFlagType(struct soap*, enum ns3__RecurringFlagType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons4__EnhancedPaymentDataType_DEFINED
#define SOAP_TYPE_PointerTons4__EnhancedPaymentDataType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons4__EnhancedPaymentDataType(struct soap*, ns4__EnhancedPaymentDataType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons4__EnhancedPaymentDataType(struct soap*, const char *, int, ns4__EnhancedPaymentDataType *const*, const char *);
SOAP_FMAC3 ns4__EnhancedPaymentDataType ** SOAP_FMAC4 soap_in_PointerTons4__EnhancedPaymentDataType(struct soap*, const char*, ns4__EnhancedPaymentDataType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons4__EnhancedPaymentDataType(struct soap*, ns4__EnhancedPaymentDataType *const*, const char*, const char*);
SOAP_FMAC3 ns4__EnhancedPaymentDataType ** SOAP_FMAC4 soap_get_PointerTons4__EnhancedPaymentDataType(struct soap*, ns4__EnhancedPaymentDataType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__AllowedPaymentMethodType_DEFINED
#define SOAP_TYPE_PointerTons3__AllowedPaymentMethodType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__AllowedPaymentMethodType(struct soap*, enum ns3__AllowedPaymentMethodType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__AllowedPaymentMethodType(struct soap*, const char *, int, enum ns3__AllowedPaymentMethodType *const*, const char *);
SOAP_FMAC3 enum ns3__AllowedPaymentMethodType ** SOAP_FMAC4 soap_in_PointerTons3__AllowedPaymentMethodType(struct soap*, const char*, enum ns3__AllowedPaymentMethodType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__AllowedPaymentMethodType(struct soap*, enum ns3__AllowedPaymentMethodType *const*, const char*, const char*);
SOAP_FMAC3 enum ns3__AllowedPaymentMethodType ** SOAP_FMAC4 soap_get_PointerTons3__AllowedPaymentMethodType(struct soap*, enum ns3__AllowedPaymentMethodType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__PaymentDetailsItemType_DEFINED
#define SOAP_TYPE_PointerTons3__PaymentDetailsItemType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__PaymentDetailsItemType(struct soap*, ns3__PaymentDetailsItemType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__PaymentDetailsItemType(struct soap*, const char *, int, ns3__PaymentDetailsItemType *const*, const char *);
SOAP_FMAC3 ns3__PaymentDetailsItemType ** SOAP_FMAC4 soap_in_PointerTons3__PaymentDetailsItemType(struct soap*, const char*, ns3__PaymentDetailsItemType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__PaymentDetailsItemType(struct soap*, ns3__PaymentDetailsItemType *const*, const char*, const char*);
SOAP_FMAC3 ns3__PaymentDetailsItemType ** SOAP_FMAC4 soap_get_PointerTons3__PaymentDetailsItemType(struct soap*, ns3__PaymentDetailsItemType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__LocationType_DEFINED
#define SOAP_TYPE_PointerTons3__LocationType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__LocationType(struct soap*, enum ns3__LocationType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__LocationType(struct soap*, const char *, int, enum ns3__LocationType *const*, const char *);
SOAP_FMAC3 enum ns3__LocationType ** SOAP_FMAC4 soap_in_PointerTons3__LocationType(struct soap*, const char*, enum ns3__LocationType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__LocationType(struct soap*, enum ns3__LocationType *const*, const char*, const char*);
SOAP_FMAC3 enum ns3__LocationType ** SOAP_FMAC4 soap_get_PointerTons3__LocationType(struct soap*, enum ns3__LocationType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__PaymentCategoryType_DEFINED
#define SOAP_TYPE_PointerTons3__PaymentCategoryType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__PaymentCategoryType(struct soap*, enum ns3__PaymentCategoryType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__PaymentCategoryType(struct soap*, const char *, int, enum ns3__PaymentCategoryType *const*, const char *);
SOAP_FMAC3 enum ns3__PaymentCategoryType ** SOAP_FMAC4 soap_in_PointerTons3__PaymentCategoryType(struct soap*, const char*, enum ns3__PaymentCategoryType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__PaymentCategoryType(struct soap*, enum ns3__PaymentCategoryType *const*, const char*, const char*);
SOAP_FMAC3 enum ns3__PaymentCategoryType ** SOAP_FMAC4 soap_get_PointerTons3__PaymentCategoryType(struct soap*, enum ns3__PaymentCategoryType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__AuctionInfoType_DEFINED
#define SOAP_TYPE_PointerTons3__AuctionInfoType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__AuctionInfoType(struct soap*, ns3__AuctionInfoType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__AuctionInfoType(struct soap*, const char *, int, ns3__AuctionInfoType *const*, const char *);
SOAP_FMAC3 ns3__AuctionInfoType ** SOAP_FMAC4 soap_in_PointerTons3__AuctionInfoType(struct soap*, const char*, ns3__AuctionInfoType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__AuctionInfoType(struct soap*, ns3__AuctionInfoType *const*, const char*, const char*);
SOAP_FMAC3 ns3__AuctionInfoType ** SOAP_FMAC4 soap_get_PointerTons3__AuctionInfoType(struct soap*, ns3__AuctionInfoType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__SubscriptionInfoType_DEFINED
#define SOAP_TYPE_PointerTons3__SubscriptionInfoType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__SubscriptionInfoType(struct soap*, ns3__SubscriptionInfoType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__SubscriptionInfoType(struct soap*, const char *, int, ns3__SubscriptionInfoType *const*, const char *);
SOAP_FMAC3 ns3__SubscriptionInfoType ** SOAP_FMAC4 soap_in_PointerTons3__SubscriptionInfoType(struct soap*, const char*, ns3__SubscriptionInfoType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__SubscriptionInfoType(struct soap*, ns3__SubscriptionInfoType *const*, const char*, const char*);
SOAP_FMAC3 ns3__SubscriptionInfoType ** SOAP_FMAC4 soap_get_PointerTons3__SubscriptionInfoType(struct soap*, ns3__SubscriptionInfoType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__PaymentItemType_DEFINED
#define SOAP_TYPE_PointerTons3__PaymentItemType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__PaymentItemType(struct soap*, ns3__PaymentItemType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__PaymentItemType(struct soap*, const char *, int, ns3__PaymentItemType *const*, const char *);
SOAP_FMAC3 ns3__PaymentItemType ** SOAP_FMAC4 soap_in_PointerTons3__PaymentItemType(struct soap*, const char*, ns3__PaymentItemType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__PaymentItemType(struct soap*, ns3__PaymentItemType *const*, const char*, const char*);
SOAP_FMAC3 ns3__PaymentItemType ** SOAP_FMAC4 soap_get_PointerTons3__PaymentItemType(struct soap*, ns3__PaymentItemType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__OptionType_DEFINED
#define SOAP_TYPE_PointerTons3__OptionType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__OptionType(struct soap*, ns3__OptionType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__OptionType(struct soap*, const char *, int, ns3__OptionType *const*, const char *);
SOAP_FMAC3 ns3__OptionType ** SOAP_FMAC4 soap_in_PointerTons3__OptionType(struct soap*, const char*, ns3__OptionType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__OptionType(struct soap*, ns3__OptionType *const*, const char*, const char*);
SOAP_FMAC3 ns3__OptionType ** SOAP_FMAC4 soap_get_PointerTons3__OptionType(struct soap*, ns3__OptionType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__InvoiceItemType_DEFINED
#define SOAP_TYPE_PointerTons3__InvoiceItemType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__InvoiceItemType(struct soap*, ns3__InvoiceItemType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__InvoiceItemType(struct soap*, const char *, int, ns3__InvoiceItemType *const*, const char *);
SOAP_FMAC3 ns3__InvoiceItemType ** SOAP_FMAC4 soap_in_PointerTons3__InvoiceItemType(struct soap*, const char*, ns3__InvoiceItemType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__InvoiceItemType(struct soap*, ns3__InvoiceItemType *const*, const char*, const char*);
SOAP_FMAC3 ns3__InvoiceItemType ** SOAP_FMAC4 soap_get_PointerTons3__InvoiceItemType(struct soap*, ns3__InvoiceItemType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__ItemCategoryType_DEFINED
#define SOAP_TYPE_PointerTons3__ItemCategoryType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__ItemCategoryType(struct soap*, enum ns3__ItemCategoryType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__ItemCategoryType(struct soap*, const char *, int, enum ns3__ItemCategoryType *const*, const char *);
SOAP_FMAC3 enum ns3__ItemCategoryType ** SOAP_FMAC4 soap_in_PointerTons3__ItemCategoryType(struct soap*, const char*, enum ns3__ItemCategoryType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__ItemCategoryType(struct soap*, enum ns3__ItemCategoryType *const*, const char*, const char*);
SOAP_FMAC3 enum ns3__ItemCategoryType ** SOAP_FMAC4 soap_get_PointerTons3__ItemCategoryType(struct soap*, enum ns3__ItemCategoryType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons4__EnhancedItemDataType_DEFINED
#define SOAP_TYPE_PointerTons4__EnhancedItemDataType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons4__EnhancedItemDataType(struct soap*, ns4__EnhancedItemDataType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons4__EnhancedItemDataType(struct soap*, const char *, int, ns4__EnhancedItemDataType *const*, const char *);
SOAP_FMAC3 ns4__EnhancedItemDataType ** SOAP_FMAC4 soap_in_PointerTons4__EnhancedItemDataType(struct soap*, const char*, ns4__EnhancedItemDataType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons4__EnhancedItemDataType(struct soap*, ns4__EnhancedItemDataType *const*, const char*, const char*);
SOAP_FMAC3 ns4__EnhancedItemDataType ** SOAP_FMAC4 soap_get_PointerTons4__EnhancedItemDataType(struct soap*, ns4__EnhancedItemDataType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__EbayItemPaymentDetailsItemType_DEFINED
#define SOAP_TYPE_PointerTons3__EbayItemPaymentDetailsItemType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__EbayItemPaymentDetailsItemType(struct soap*, ns3__EbayItemPaymentDetailsItemType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__EbayItemPaymentDetailsItemType(struct soap*, const char *, int, ns3__EbayItemPaymentDetailsItemType *const*, const char *);
SOAP_FMAC3 ns3__EbayItemPaymentDetailsItemType ** SOAP_FMAC4 soap_in_PointerTons3__EbayItemPaymentDetailsItemType(struct soap*, const char*, ns3__EbayItemPaymentDetailsItemType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__EbayItemPaymentDetailsItemType(struct soap*, ns3__EbayItemPaymentDetailsItemType *const*, const char*, const char*);
SOAP_FMAC3 ns3__EbayItemPaymentDetailsItemType ** SOAP_FMAC4 soap_get_PointerTons3__EbayItemPaymentDetailsItemType(struct soap*, ns3__EbayItemPaymentDetailsItemType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__SubscriptionTermsType_DEFINED
#define SOAP_TYPE_PointerTons3__SubscriptionTermsType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__SubscriptionTermsType(struct soap*, ns3__SubscriptionTermsType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__SubscriptionTermsType(struct soap*, const char *, int, ns3__SubscriptionTermsType *const*, const char *);
SOAP_FMAC3 ns3__SubscriptionTermsType ** SOAP_FMAC4 soap_in_PointerTons3__SubscriptionTermsType(struct soap*, const char*, ns3__SubscriptionTermsType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__SubscriptionTermsType(struct soap*, ns3__SubscriptionTermsType *const*, const char*, const char*);
SOAP_FMAC3 ns3__SubscriptionTermsType ** SOAP_FMAC4 soap_get_PointerTons3__SubscriptionTermsType(struct soap*, ns3__SubscriptionTermsType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__OfferDetailsType_DEFINED
#define SOAP_TYPE_PointerTons3__OfferDetailsType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__OfferDetailsType(struct soap*, ns3__OfferDetailsType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__OfferDetailsType(struct soap*, const char *, int, ns3__OfferDetailsType *const*, const char *);
SOAP_FMAC3 ns3__OfferDetailsType ** SOAP_FMAC4 soap_in_PointerTons3__OfferDetailsType(struct soap*, const char*, ns3__OfferDetailsType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__OfferDetailsType(struct soap*, ns3__OfferDetailsType *const*, const char*, const char*);
SOAP_FMAC3 ns3__OfferDetailsType ** SOAP_FMAC4 soap_get_PointerTons3__OfferDetailsType(struct soap*, ns3__OfferDetailsType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons4__EnhancedPaymentInfoType_DEFINED
#define SOAP_TYPE_PointerTons4__EnhancedPaymentInfoType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons4__EnhancedPaymentInfoType(struct soap*, ns4__EnhancedPaymentInfoType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons4__EnhancedPaymentInfoType(struct soap*, const char *, int, ns4__EnhancedPaymentInfoType *const*, const char *);
SOAP_FMAC3 ns4__EnhancedPaymentInfoType ** SOAP_FMAC4 soap_in_PointerTons4__EnhancedPaymentInfoType(struct soap*, const char*, ns4__EnhancedPaymentInfoType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons4__EnhancedPaymentInfoType(struct soap*, ns4__EnhancedPaymentInfoType *const*, const char*, const char*);
SOAP_FMAC3 ns4__EnhancedPaymentInfoType ** SOAP_FMAC4 soap_get_PointerTons4__EnhancedPaymentInfoType(struct soap*, ns4__EnhancedPaymentInfoType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__FMFDetailsType_DEFINED
#define SOAP_TYPE_PointerTons3__FMFDetailsType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__FMFDetailsType(struct soap*, ns3__FMFDetailsType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__FMFDetailsType(struct soap*, const char *, int, ns3__FMFDetailsType *const*, const char *);
SOAP_FMAC3 ns3__FMFDetailsType ** SOAP_FMAC4 soap_in_PointerTons3__FMFDetailsType(struct soap*, const char*, ns3__FMFDetailsType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__FMFDetailsType(struct soap*, ns3__FMFDetailsType *const*, const char*, const char*);
SOAP_FMAC3 ns3__FMFDetailsType ** SOAP_FMAC4 soap_get_PointerTons3__FMFDetailsType(struct soap*, ns3__FMFDetailsType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__SellerDetailsType_DEFINED
#define SOAP_TYPE_PointerTons3__SellerDetailsType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__SellerDetailsType(struct soap*, ns3__SellerDetailsType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__SellerDetailsType(struct soap*, const char *, int, ns3__SellerDetailsType *const*, const char *);
SOAP_FMAC3 ns3__SellerDetailsType ** SOAP_FMAC4 soap_in_PointerTons3__SellerDetailsType(struct soap*, const char*, ns3__SellerDetailsType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__SellerDetailsType(struct soap*, ns3__SellerDetailsType *const*, const char*, const char*);
SOAP_FMAC3 ns3__SellerDetailsType ** SOAP_FMAC4 soap_get_PointerTons3__SellerDetailsType(struct soap*, ns3__SellerDetailsType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__POSTransactionCodeType_DEFINED
#define SOAP_TYPE_PointerTons3__POSTransactionCodeType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__POSTransactionCodeType(struct soap*, enum ns3__POSTransactionCodeType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__POSTransactionCodeType(struct soap*, const char *, int, enum ns3__POSTransactionCodeType *const*, const char *);
SOAP_FMAC3 enum ns3__POSTransactionCodeType ** SOAP_FMAC4 soap_in_PointerTons3__POSTransactionCodeType(struct soap*, const char*, enum ns3__POSTransactionCodeType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__POSTransactionCodeType(struct soap*, enum ns3__POSTransactionCodeType *const*, const char*, const char*);
SOAP_FMAC3 enum ns3__POSTransactionCodeType ** SOAP_FMAC4 soap_get_PointerTons3__POSTransactionCodeType(struct soap*, enum ns3__POSTransactionCodeType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__ReversalReasonCodeType_DEFINED
#define SOAP_TYPE_PointerTons3__ReversalReasonCodeType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__ReversalReasonCodeType(struct soap*, enum ns3__ReversalReasonCodeType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__ReversalReasonCodeType(struct soap*, const char *, int, enum ns3__ReversalReasonCodeType *const*, const char *);
SOAP_FMAC3 enum ns3__ReversalReasonCodeType ** SOAP_FMAC4 soap_in_PointerTons3__ReversalReasonCodeType(struct soap*, const char*, enum ns3__ReversalReasonCodeType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__ReversalReasonCodeType(struct soap*, enum ns3__ReversalReasonCodeType *const*, const char*, const char*);
SOAP_FMAC3 enum ns3__ReversalReasonCodeType ** SOAP_FMAC4 soap_get_PointerTons3__ReversalReasonCodeType(struct soap*, enum ns3__ReversalReasonCodeType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__PendingStatusCodeType_DEFINED
#define SOAP_TYPE_PointerTons3__PendingStatusCodeType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__PendingStatusCodeType(struct soap*, enum ns3__PendingStatusCodeType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__PendingStatusCodeType(struct soap*, const char *, int, enum ns3__PendingStatusCodeType *const*, const char *);
SOAP_FMAC3 enum ns3__PendingStatusCodeType ** SOAP_FMAC4 soap_in_PointerTons3__PendingStatusCodeType(struct soap*, const char*, enum ns3__PendingStatusCodeType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__PendingStatusCodeType(struct soap*, enum ns3__PendingStatusCodeType *const*, const char*, const char*);
SOAP_FMAC3 enum ns3__PendingStatusCodeType ** SOAP_FMAC4 soap_get_PointerTons3__PendingStatusCodeType(struct soap*, enum ns3__PendingStatusCodeType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__RefundSourceCodeType_DEFINED
#define SOAP_TYPE_PointerTons3__RefundSourceCodeType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__RefundSourceCodeType(struct soap*, enum ns3__RefundSourceCodeType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__RefundSourceCodeType(struct soap*, const char *, int, enum ns3__RefundSourceCodeType *const*, const char *);
SOAP_FMAC3 enum ns3__RefundSourceCodeType ** SOAP_FMAC4 soap_in_PointerTons3__RefundSourceCodeType(struct soap*, const char*, enum ns3__RefundSourceCodeType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__RefundSourceCodeType(struct soap*, enum ns3__RefundSourceCodeType *const*, const char*, const char*);
SOAP_FMAC3 enum ns3__RefundSourceCodeType ** SOAP_FMAC4 soap_get_PointerTons3__RefundSourceCodeType(struct soap*, enum ns3__RefundSourceCodeType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__PaymentCodeType_DEFINED
#define SOAP_TYPE_PointerTons3__PaymentCodeType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__PaymentCodeType(struct soap*, enum ns3__PaymentCodeType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__PaymentCodeType(struct soap*, const char *, int, enum ns3__PaymentCodeType *const*, const char *);
SOAP_FMAC3 enum ns3__PaymentCodeType ** SOAP_FMAC4 soap_in_PointerTons3__PaymentCodeType(struct soap*, const char*, enum ns3__PaymentCodeType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__PaymentCodeType(struct soap*, enum ns3__PaymentCodeType *const*, const char*, const char*);
SOAP_FMAC3 enum ns3__PaymentCodeType ** SOAP_FMAC4 soap_get_PointerTons3__PaymentCodeType(struct soap*, enum ns3__PaymentCodeType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__TransactionId_DEFINED
#define SOAP_TYPE_PointerTons3__TransactionId_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__TransactionId(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__TransactionId(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerTons3__TransactionId(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__TransactionId(struct soap*, std::string *const*, const char*, const char*);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerTons3__TransactionId(struct soap*, std::string **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__BMLOfferInfoType_DEFINED
#define SOAP_TYPE_PointerTons3__BMLOfferInfoType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__BMLOfferInfoType(struct soap*, ns3__BMLOfferInfoType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__BMLOfferInfoType(struct soap*, const char *, int, ns3__BMLOfferInfoType *const*, const char *);
SOAP_FMAC3 ns3__BMLOfferInfoType ** SOAP_FMAC4 soap_in_PointerTons3__BMLOfferInfoType(struct soap*, const char*, ns3__BMLOfferInfoType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__BMLOfferInfoType(struct soap*, ns3__BMLOfferInfoType *const*, const char*, const char*);
SOAP_FMAC3 ns3__BMLOfferInfoType ** SOAP_FMAC4 soap_get_PointerTons3__BMLOfferInfoType(struct soap*, ns3__BMLOfferInfoType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons4__EnhancedPayerInfoType_DEFINED
#define SOAP_TYPE_PointerTons4__EnhancedPayerInfoType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons4__EnhancedPayerInfoType(struct soap*, ns4__EnhancedPayerInfoType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons4__EnhancedPayerInfoType(struct soap*, const char *, int, ns4__EnhancedPayerInfoType *const*, const char *);
SOAP_FMAC3 ns4__EnhancedPayerInfoType ** SOAP_FMAC4 soap_in_PointerTons4__EnhancedPayerInfoType(struct soap*, const char*, ns4__EnhancedPayerInfoType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons4__EnhancedPayerInfoType(struct soap*, ns4__EnhancedPayerInfoType *const*, const char*, const char*);
SOAP_FMAC3 ns4__EnhancedPayerInfoType ** SOAP_FMAC4 soap_get_PointerTons4__EnhancedPayerInfoType(struct soap*, ns4__EnhancedPayerInfoType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__TaxIdDetailsType_DEFINED
#define SOAP_TYPE_PointerTons3__TaxIdDetailsType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__TaxIdDetailsType(struct soap*, ns3__TaxIdDetailsType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__TaxIdDetailsType(struct soap*, const char *, int, ns3__TaxIdDetailsType *const*, const char *);
SOAP_FMAC3 ns3__TaxIdDetailsType ** SOAP_FMAC4 soap_in_PointerTons3__TaxIdDetailsType(struct soap*, const char*, ns3__TaxIdDetailsType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__TaxIdDetailsType(struct soap*, ns3__TaxIdDetailsType *const*, const char*, const char*);
SOAP_FMAC3 ns3__TaxIdDetailsType ** SOAP_FMAC4 soap_get_PointerTons3__TaxIdDetailsType(struct soap*, ns3__TaxIdDetailsType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__WalletItemsType_DEFINED
#define SOAP_TYPE_PointerTons3__WalletItemsType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__WalletItemsType(struct soap*, ns3__WalletItemsType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__WalletItemsType(struct soap*, const char *, int, ns3__WalletItemsType *const*, const char *);
SOAP_FMAC3 ns3__WalletItemsType ** SOAP_FMAC4 soap_in_PointerTons3__WalletItemsType(struct soap*, const char*, ns3__WalletItemsType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__WalletItemsType(struct soap*, ns3__WalletItemsType *const*, const char*, const char*);
SOAP_FMAC3 ns3__WalletItemsType ** SOAP_FMAC4 soap_get_PointerTons3__WalletItemsType(struct soap*, ns3__WalletItemsType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__PersonNameType_DEFINED
#define SOAP_TYPE_PointerTons3__PersonNameType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__PersonNameType(struct soap*, ns3__PersonNameType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__PersonNameType(struct soap*, const char *, int, ns3__PersonNameType *const*, const char *);
SOAP_FMAC3 ns3__PersonNameType ** SOAP_FMAC4 soap_in_PointerTons3__PersonNameType(struct soap*, const char*, ns3__PersonNameType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__PersonNameType(struct soap*, ns3__PersonNameType *const*, const char*, const char*);
SOAP_FMAC3 ns3__PersonNameType ** SOAP_FMAC4 soap_get_PointerTons3__PersonNameType(struct soap*, ns3__PersonNameType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__PayPalUserStatusCodeType_DEFINED
#define SOAP_TYPE_PointerTons3__PayPalUserStatusCodeType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__PayPalUserStatusCodeType(struct soap*, enum ns3__PayPalUserStatusCodeType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__PayPalUserStatusCodeType(struct soap*, const char *, int, enum ns3__PayPalUserStatusCodeType *const*, const char *);
SOAP_FMAC3 enum ns3__PayPalUserStatusCodeType ** SOAP_FMAC4 soap_in_PointerTons3__PayPalUserStatusCodeType(struct soap*, const char*, enum ns3__PayPalUserStatusCodeType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__PayPalUserStatusCodeType(struct soap*, enum ns3__PayPalUserStatusCodeType *const*, const char*, const char*);
SOAP_FMAC3 enum ns3__PayPalUserStatusCodeType ** SOAP_FMAC4 soap_get_PointerTons3__PayPalUserStatusCodeType(struct soap*, enum ns3__PayPalUserStatusCodeType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__OfferCouponInfoType_DEFINED
#define SOAP_TYPE_PointerTons3__OfferCouponInfoType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__OfferCouponInfoType(struct soap*, ns3__OfferCouponInfoType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__OfferCouponInfoType(struct soap*, const char *, int, ns3__OfferCouponInfoType *const*, const char *);
SOAP_FMAC3 ns3__OfferCouponInfoType ** SOAP_FMAC4 soap_in_PointerTons3__OfferCouponInfoType(struct soap*, const char*, ns3__OfferCouponInfoType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__OfferCouponInfoType(struct soap*, ns3__OfferCouponInfoType *const*, const char*, const char*);
SOAP_FMAC3 ns3__OfferCouponInfoType ** SOAP_FMAC4 soap_get_PointerTons3__OfferCouponInfoType(struct soap*, ns3__OfferCouponInfoType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__PaymentItemInfoType_DEFINED
#define SOAP_TYPE_PointerTons3__PaymentItemInfoType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__PaymentItemInfoType(struct soap*, ns3__PaymentItemInfoType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__PaymentItemInfoType(struct soap*, const char *, int, ns3__PaymentItemInfoType *const*, const char *);
SOAP_FMAC3 ns3__PaymentItemInfoType ** SOAP_FMAC4 soap_in_PointerTons3__PaymentItemInfoType(struct soap*, const char*, ns3__PaymentItemInfoType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__PaymentItemInfoType(struct soap*, ns3__PaymentItemInfoType *const*, const char*, const char*);
SOAP_FMAC3 ns3__PaymentItemInfoType ** SOAP_FMAC4 soap_get_PointerTons3__PaymentItemInfoType(struct soap*, ns3__PaymentItemInfoType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__ReceiverInfoType_DEFINED
#define SOAP_TYPE_PointerTons3__ReceiverInfoType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__ReceiverInfoType(struct soap*, ns3__ReceiverInfoType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__ReceiverInfoType(struct soap*, const char *, int, ns3__ReceiverInfoType *const*, const char *);
SOAP_FMAC3 ns3__ReceiverInfoType ** SOAP_FMAC4 soap_in_PointerTons3__ReceiverInfoType(struct soap*, const char*, ns3__ReceiverInfoType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__ReceiverInfoType(struct soap*, ns3__ReceiverInfoType *const*, const char*, const char*);
SOAP_FMAC3 ns3__ReceiverInfoType ** SOAP_FMAC4 soap_get_PointerTons3__ReceiverInfoType(struct soap*, ns3__ReceiverInfoType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__MerchantPullInfoType_DEFINED
#define SOAP_TYPE_PointerTons3__MerchantPullInfoType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__MerchantPullInfoType(struct soap*, ns3__MerchantPullInfoType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__MerchantPullInfoType(struct soap*, const char *, int, ns3__MerchantPullInfoType *const*, const char *);
SOAP_FMAC3 ns3__MerchantPullInfoType ** SOAP_FMAC4 soap_in_PointerTons3__MerchantPullInfoType(struct soap*, const char*, ns3__MerchantPullInfoType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__MerchantPullInfoType(struct soap*, ns3__MerchantPullInfoType *const*, const char*, const char*);
SOAP_FMAC3 ns3__MerchantPullInfoType ** SOAP_FMAC4 soap_get_PointerTons3__MerchantPullInfoType(struct soap*, ns3__MerchantPullInfoType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__PayeeInfoType_DEFINED
#define SOAP_TYPE_PointerTons3__PayeeInfoType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__PayeeInfoType(struct soap*, ns3__PayeeInfoType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__PayeeInfoType(struct soap*, const char *, int, ns3__PayeeInfoType *const*, const char *);
SOAP_FMAC3 ns3__PayeeInfoType ** SOAP_FMAC4 soap_in_PointerTons3__PayeeInfoType(struct soap*, const char*, ns3__PayeeInfoType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__PayeeInfoType(struct soap*, ns3__PayeeInfoType *const*, const char*, const char*);
SOAP_FMAC3 ns3__PayeeInfoType ** SOAP_FMAC4 soap_get_PointerTons3__PayeeInfoType(struct soap*, ns3__PayeeInfoType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__PhoneNumberType_DEFINED
#define SOAP_TYPE_PointerTons3__PhoneNumberType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__PhoneNumberType(struct soap*, ns3__PhoneNumberType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__PhoneNumberType(struct soap*, const char *, int, ns3__PhoneNumberType *const*, const char *);
SOAP_FMAC3 ns3__PhoneNumberType ** SOAP_FMAC4 soap_in_PointerTons3__PhoneNumberType(struct soap*, const char*, ns3__PhoneNumberType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__PhoneNumberType(struct soap*, ns3__PhoneNumberType *const*, const char*, const char*);
SOAP_FMAC3 ns3__PhoneNumberType ** SOAP_FMAC4 soap_get_PointerTons3__PhoneNumberType(struct soap*, ns3__PhoneNumberType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__CreditCardDetailsType_DEFINED
#define SOAP_TYPE_PointerTons3__CreditCardDetailsType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__CreditCardDetailsType(struct soap*, ns3__CreditCardDetailsType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__CreditCardDetailsType(struct soap*, const char *, int, ns3__CreditCardDetailsType *const*, const char *);
SOAP_FMAC3 ns3__CreditCardDetailsType ** SOAP_FMAC4 soap_in_PointerTons3__CreditCardDetailsType(struct soap*, const char*, ns3__CreditCardDetailsType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__CreditCardDetailsType(struct soap*, ns3__CreditCardDetailsType *const*, const char*, const char*);
SOAP_FMAC3 ns3__CreditCardDetailsType ** SOAP_FMAC4 soap_get_PointerTons3__CreditCardDetailsType(struct soap*, ns3__CreditCardDetailsType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__CoupledPaymentInfoType_DEFINED
#define SOAP_TYPE_PointerTons3__CoupledPaymentInfoType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__CoupledPaymentInfoType(struct soap*, ns3__CoupledPaymentInfoType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__CoupledPaymentInfoType(struct soap*, const char *, int, ns3__CoupledPaymentInfoType *const*, const char *);
SOAP_FMAC3 ns3__CoupledPaymentInfoType ** SOAP_FMAC4 soap_in_PointerTons3__CoupledPaymentInfoType(struct soap*, const char*, ns3__CoupledPaymentInfoType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__CoupledPaymentInfoType(struct soap*, ns3__CoupledPaymentInfoType *const*, const char*, const char*);
SOAP_FMAC3 ns3__CoupledPaymentInfoType ** SOAP_FMAC4 soap_get_PointerTons3__CoupledPaymentInfoType(struct soap*, ns3__CoupledPaymentInfoType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__EnhancedDataType_DEFINED
#define SOAP_TYPE_PointerTons3__EnhancedDataType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__EnhancedDataType(struct soap*, ns3__EnhancedDataType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__EnhancedDataType(struct soap*, const char *, int, ns3__EnhancedDataType *const*, const char *);
SOAP_FMAC3 ns3__EnhancedDataType ** SOAP_FMAC4 soap_in_PointerTons3__EnhancedDataType(struct soap*, const char*, ns3__EnhancedDataType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__EnhancedDataType(struct soap*, ns3__EnhancedDataType *const*, const char*, const char*);
SOAP_FMAC3 ns3__EnhancedDataType ** SOAP_FMAC4 soap_get_PointerTons3__EnhancedDataType(struct soap*, ns3__EnhancedDataType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__AuthorizationResponseType_DEFINED
#define SOAP_TYPE_PointerTons3__AuthorizationResponseType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__AuthorizationResponseType(struct soap*, ns3__AuthorizationResponseType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__AuthorizationResponseType(struct soap*, const char *, int, ns3__AuthorizationResponseType *const*, const char *);
SOAP_FMAC3 ns3__AuthorizationResponseType ** SOAP_FMAC4 soap_in_PointerTons3__AuthorizationResponseType(struct soap*, const char*, ns3__AuthorizationResponseType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__AuthorizationResponseType(struct soap*, ns3__AuthorizationResponseType *const*, const char*, const char*);
SOAP_FMAC3 ns3__AuthorizationResponseType ** SOAP_FMAC4 soap_get_PointerTons3__AuthorizationResponseType(struct soap*, ns3__AuthorizationResponseType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__SetDataResponseType_DEFINED
#define SOAP_TYPE_PointerTons3__SetDataResponseType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__SetDataResponseType(struct soap*, ns3__SetDataResponseType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__SetDataResponseType(struct soap*, const char *, int, ns3__SetDataResponseType *const*, const char *);
SOAP_FMAC3 ns3__SetDataResponseType ** SOAP_FMAC4 soap_in_PointerTons3__SetDataResponseType(struct soap*, const char*, ns3__SetDataResponseType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__SetDataResponseType(struct soap*, ns3__SetDataResponseType *const*, const char*, const char*);
SOAP_FMAC3 ns3__SetDataResponseType ** SOAP_FMAC4 soap_get_PointerTons3__SetDataResponseType(struct soap*, ns3__SetDataResponseType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__InstrumentDetailsType_DEFINED
#define SOAP_TYPE_PointerTons3__InstrumentDetailsType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__InstrumentDetailsType(struct soap*, ns3__InstrumentDetailsType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__InstrumentDetailsType(struct soap*, const char *, int, ns3__InstrumentDetailsType *const*, const char *);
SOAP_FMAC3 ns3__InstrumentDetailsType ** SOAP_FMAC4 soap_in_PointerTons3__InstrumentDetailsType(struct soap*, const char*, ns3__InstrumentDetailsType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__InstrumentDetailsType(struct soap*, ns3__InstrumentDetailsType *const*, const char*, const char*);
SOAP_FMAC3 ns3__InstrumentDetailsType ** SOAP_FMAC4 soap_get_PointerTons3__InstrumentDetailsType(struct soap*, ns3__InstrumentDetailsType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__PaymentInfoType_DEFINED
#define SOAP_TYPE_PointerTons3__PaymentInfoType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__PaymentInfoType(struct soap*, ns3__PaymentInfoType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__PaymentInfoType(struct soap*, const char *, int, ns3__PaymentInfoType *const*, const char *);
SOAP_FMAC3 ns3__PaymentInfoType ** SOAP_FMAC4 soap_in_PointerTons3__PaymentInfoType(struct soap*, const char*, ns3__PaymentInfoType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__PaymentInfoType(struct soap*, ns3__PaymentInfoType *const*, const char*, const char*);
SOAP_FMAC3 ns3__PaymentInfoType ** SOAP_FMAC4 soap_get_PointerTons3__PaymentInfoType(struct soap*, ns3__PaymentInfoType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__RefreshTokenStatusDetailsType_DEFINED
#define SOAP_TYPE_PointerTons3__RefreshTokenStatusDetailsType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__RefreshTokenStatusDetailsType(struct soap*, ns3__RefreshTokenStatusDetailsType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__RefreshTokenStatusDetailsType(struct soap*, const char *, int, ns3__RefreshTokenStatusDetailsType *const*, const char *);
SOAP_FMAC3 ns3__RefreshTokenStatusDetailsType ** SOAP_FMAC4 soap_in_PointerTons3__RefreshTokenStatusDetailsType(struct soap*, const char*, ns3__RefreshTokenStatusDetailsType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__RefreshTokenStatusDetailsType(struct soap*, ns3__RefreshTokenStatusDetailsType *const*, const char*, const char*);
SOAP_FMAC3 ns3__RefreshTokenStatusDetailsType ** SOAP_FMAC4 soap_get_PointerTons3__RefreshTokenStatusDetailsType(struct soap*, ns3__RefreshTokenStatusDetailsType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__ExternalRememberMeStatusDetailsType_DEFINED
#define SOAP_TYPE_PointerTons3__ExternalRememberMeStatusDetailsType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__ExternalRememberMeStatusDetailsType(struct soap*, ns3__ExternalRememberMeStatusDetailsType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__ExternalRememberMeStatusDetailsType(struct soap*, const char *, int, ns3__ExternalRememberMeStatusDetailsType *const*, const char *);
SOAP_FMAC3 ns3__ExternalRememberMeStatusDetailsType ** SOAP_FMAC4 soap_in_PointerTons3__ExternalRememberMeStatusDetailsType(struct soap*, const char*, ns3__ExternalRememberMeStatusDetailsType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__ExternalRememberMeStatusDetailsType(struct soap*, ns3__ExternalRememberMeStatusDetailsType *const*, const char*, const char*);
SOAP_FMAC3 ns3__ExternalRememberMeStatusDetailsType ** SOAP_FMAC4 soap_get_PointerTons3__ExternalRememberMeStatusDetailsType(struct soap*, ns3__ExternalRememberMeStatusDetailsType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__PaymentRequestInfoType_DEFINED
#define SOAP_TYPE_PointerTons3__PaymentRequestInfoType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__PaymentRequestInfoType(struct soap*, ns3__PaymentRequestInfoType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__PaymentRequestInfoType(struct soap*, const char *, int, ns3__PaymentRequestInfoType *const*, const char *);
SOAP_FMAC3 ns3__PaymentRequestInfoType ** SOAP_FMAC4 soap_in_PointerTons3__PaymentRequestInfoType(struct soap*, const char*, ns3__PaymentRequestInfoType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__PaymentRequestInfoType(struct soap*, ns3__PaymentRequestInfoType *const*, const char*, const char*);
SOAP_FMAC3 ns3__PaymentRequestInfoType ** SOAP_FMAC4 soap_get_PointerTons3__PaymentRequestInfoType(struct soap*, ns3__PaymentRequestInfoType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__IncentiveDetailsType_DEFINED
#define SOAP_TYPE_PointerTons3__IncentiveDetailsType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__IncentiveDetailsType(struct soap*, ns3__IncentiveDetailsType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__IncentiveDetailsType(struct soap*, const char *, int, ns3__IncentiveDetailsType *const*, const char *);
SOAP_FMAC3 ns3__IncentiveDetailsType ** SOAP_FMAC4 soap_in_PointerTons3__IncentiveDetailsType(struct soap*, const char*, ns3__IncentiveDetailsType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__IncentiveDetailsType(struct soap*, ns3__IncentiveDetailsType *const*, const char*, const char*);
SOAP_FMAC3 ns3__IncentiveDetailsType ** SOAP_FMAC4 soap_get_PointerTons3__IncentiveDetailsType(struct soap*, ns3__IncentiveDetailsType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__UserSelectedOptionType_DEFINED
#define SOAP_TYPE_PointerTons3__UserSelectedOptionType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__UserSelectedOptionType(struct soap*, ns3__UserSelectedOptionType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__UserSelectedOptionType(struct soap*, const char *, int, ns3__UserSelectedOptionType *const*, const char *);
SOAP_FMAC3 ns3__UserSelectedOptionType ** SOAP_FMAC4 soap_in_PointerTons3__UserSelectedOptionType(struct soap*, const char*, ns3__UserSelectedOptionType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__UserSelectedOptionType(struct soap*, ns3__UserSelectedOptionType *const*, const char*, const char*);
SOAP_FMAC3 ns3__UserSelectedOptionType ** SOAP_FMAC4 soap_get_PointerTons3__UserSelectedOptionType(struct soap*, ns3__UserSelectedOptionType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__PayerInfoType_DEFINED
#define SOAP_TYPE_PointerTons3__PayerInfoType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__PayerInfoType(struct soap*, ns3__PayerInfoType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__PayerInfoType(struct soap*, const char *, int, ns3__PayerInfoType *const*, const char *);
SOAP_FMAC3 ns3__PayerInfoType ** SOAP_FMAC4 soap_in_PointerTons3__PayerInfoType(struct soap*, const char*, ns3__PayerInfoType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__PayerInfoType(struct soap*, ns3__PayerInfoType *const*, const char*, const char*);
SOAP_FMAC3 ns3__PayerInfoType ** SOAP_FMAC4 soap_get_PointerTons3__PayerInfoType(struct soap*, ns3__PayerInfoType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__UserSelectedFundingSourceType_DEFINED
#define SOAP_TYPE_PointerTons3__UserSelectedFundingSourceType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__UserSelectedFundingSourceType(struct soap*, enum ns3__UserSelectedFundingSourceType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__UserSelectedFundingSourceType(struct soap*, const char *, int, enum ns3__UserSelectedFundingSourceType *const*, const char *);
SOAP_FMAC3 enum ns3__UserSelectedFundingSourceType ** SOAP_FMAC4 soap_in_PointerTons3__UserSelectedFundingSourceType(struct soap*, const char*, enum ns3__UserSelectedFundingSourceType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__UserSelectedFundingSourceType(struct soap*, enum ns3__UserSelectedFundingSourceType *const*, const char*, const char*);
SOAP_FMAC3 enum ns3__UserSelectedFundingSourceType ** SOAP_FMAC4 soap_get_PointerTons3__UserSelectedFundingSourceType(struct soap*, enum ns3__UserSelectedFundingSourceType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__IdentityTokenInfoType_DEFINED
#define SOAP_TYPE_PointerTons3__IdentityTokenInfoType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__IdentityTokenInfoType(struct soap*, ns3__IdentityTokenInfoType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__IdentityTokenInfoType(struct soap*, const char *, int, ns3__IdentityTokenInfoType *const*, const char *);
SOAP_FMAC3 ns3__IdentityTokenInfoType ** SOAP_FMAC4 soap_in_PointerTons3__IdentityTokenInfoType(struct soap*, const char*, ns3__IdentityTokenInfoType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__IdentityTokenInfoType(struct soap*, ns3__IdentityTokenInfoType *const*, const char*, const char*);
SOAP_FMAC3 ns3__IdentityTokenInfoType ** SOAP_FMAC4 soap_get_PointerTons3__IdentityTokenInfoType(struct soap*, ns3__IdentityTokenInfoType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__RememberMeIDInfoType_DEFINED
#define SOAP_TYPE_PointerTons3__RememberMeIDInfoType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__RememberMeIDInfoType(struct soap*, ns3__RememberMeIDInfoType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__RememberMeIDInfoType(struct soap*, const char *, int, ns3__RememberMeIDInfoType *const*, const char *);
SOAP_FMAC3 ns3__RememberMeIDInfoType ** SOAP_FMAC4 soap_in_PointerTons3__RememberMeIDInfoType(struct soap*, const char*, ns3__RememberMeIDInfoType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__RememberMeIDInfoType(struct soap*, ns3__RememberMeIDInfoType *const*, const char*, const char*);
SOAP_FMAC3 ns3__RememberMeIDInfoType ** SOAP_FMAC4 soap_get_PointerTons3__RememberMeIDInfoType(struct soap*, ns3__RememberMeIDInfoType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__MobileIDInfoType_DEFINED
#define SOAP_TYPE_PointerTons3__MobileIDInfoType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__MobileIDInfoType(struct soap*, ns3__MobileIDInfoType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__MobileIDInfoType(struct soap*, const char *, int, ns3__MobileIDInfoType *const*, const char *);
SOAP_FMAC3 ns3__MobileIDInfoType ** SOAP_FMAC4 soap_in_PointerTons3__MobileIDInfoType(struct soap*, const char*, ns3__MobileIDInfoType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__MobileIDInfoType(struct soap*, ns3__MobileIDInfoType *const*, const char*, const char*);
SOAP_FMAC3 ns3__MobileIDInfoType ** SOAP_FMAC4 soap_get_PointerTons3__MobileIDInfoType(struct soap*, ns3__MobileIDInfoType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__IdentificationInfoType_DEFINED
#define SOAP_TYPE_PointerTons3__IdentificationInfoType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__IdentificationInfoType(struct soap*, ns3__IdentificationInfoType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__IdentificationInfoType(struct soap*, const char *, int, ns3__IdentificationInfoType *const*, const char *);
SOAP_FMAC3 ns3__IdentificationInfoType ** SOAP_FMAC4 soap_in_PointerTons3__IdentificationInfoType(struct soap*, const char*, ns3__IdentificationInfoType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__IdentificationInfoType(struct soap*, ns3__IdentificationInfoType *const*, const char*, const char*);
SOAP_FMAC3 ns3__IdentificationInfoType ** SOAP_FMAC4 soap_get_PointerTons3__IdentificationInfoType(struct soap*, ns3__IdentificationInfoType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__MerchantPullPaymentCodeType_DEFINED
#define SOAP_TYPE_PointerTons3__MerchantPullPaymentCodeType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__MerchantPullPaymentCodeType(struct soap*, enum ns3__MerchantPullPaymentCodeType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__MerchantPullPaymentCodeType(struct soap*, const char *, int, enum ns3__MerchantPullPaymentCodeType *const*, const char *);
SOAP_FMAC3 enum ns3__MerchantPullPaymentCodeType ** SOAP_FMAC4 soap_in_PointerTons3__MerchantPullPaymentCodeType(struct soap*, const char*, enum ns3__MerchantPullPaymentCodeType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__MerchantPullPaymentCodeType(struct soap*, enum ns3__MerchantPullPaymentCodeType *const*, const char*, const char*);
SOAP_FMAC3 enum ns3__MerchantPullPaymentCodeType ** SOAP_FMAC4 soap_get_PointerTons3__MerchantPullPaymentCodeType(struct soap*, enum ns3__MerchantPullPaymentCodeType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__PaymentDirectivesType_DEFINED
#define SOAP_TYPE_PointerTons3__PaymentDirectivesType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__PaymentDirectivesType(struct soap*, ns3__PaymentDirectivesType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__PaymentDirectivesType(struct soap*, const char *, int, ns3__PaymentDirectivesType *const*, const char *);
SOAP_FMAC3 ns3__PaymentDirectivesType ** SOAP_FMAC4 soap_in_PointerTons3__PaymentDirectivesType(struct soap*, const char*, ns3__PaymentDirectivesType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__PaymentDirectivesType(struct soap*, ns3__PaymentDirectivesType *const*, const char*, const char*);
SOAP_FMAC3 ns3__PaymentDirectivesType ** SOAP_FMAC4 soap_get_PointerTons3__PaymentDirectivesType(struct soap*, ns3__PaymentDirectivesType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__OrderDetailsType_DEFINED
#define SOAP_TYPE_PointerTons3__OrderDetailsType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__OrderDetailsType(struct soap*, ns3__OrderDetailsType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__OrderDetailsType(struct soap*, const char *, int, ns3__OrderDetailsType *const*, const char *);
SOAP_FMAC3 ns3__OrderDetailsType ** SOAP_FMAC4 soap_in_PointerTons3__OrderDetailsType(struct soap*, const char*, ns3__OrderDetailsType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__OrderDetailsType(struct soap*, ns3__OrderDetailsType *const*, const char*, const char*);
SOAP_FMAC3 ns3__OrderDetailsType ** SOAP_FMAC4 soap_get_PointerTons3__OrderDetailsType(struct soap*, ns3__OrderDetailsType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__ApprovalSubTypeType_DEFINED
#define SOAP_TYPE_PointerTons3__ApprovalSubTypeType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__ApprovalSubTypeType(struct soap*, enum ns3__ApprovalSubTypeType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__ApprovalSubTypeType(struct soap*, const char *, int, enum ns3__ApprovalSubTypeType *const*, const char *);
SOAP_FMAC3 enum ns3__ApprovalSubTypeType ** SOAP_FMAC4 soap_in_PointerTons3__ApprovalSubTypeType(struct soap*, const char*, enum ns3__ApprovalSubTypeType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__ApprovalSubTypeType(struct soap*, enum ns3__ApprovalSubTypeType *const*, const char*, const char*);
SOAP_FMAC3 enum ns3__ApprovalSubTypeType ** SOAP_FMAC4 soap_get_PointerTons3__ApprovalSubTypeType(struct soap*, enum ns3__ApprovalSubTypeType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__UserChannelCodeType_DEFINED
#define SOAP_TYPE_PointerTons3__UserChannelCodeType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__UserChannelCodeType(struct soap*, enum ns3__UserChannelCodeType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__UserChannelCodeType(struct soap*, const char *, int, enum ns3__UserChannelCodeType *const*, const char *);
SOAP_FMAC3 enum ns3__UserChannelCodeType ** SOAP_FMAC4 soap_in_PointerTons3__UserChannelCodeType(struct soap*, const char*, enum ns3__UserChannelCodeType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__UserChannelCodeType(struct soap*, enum ns3__UserChannelCodeType *const*, const char*, const char*);
SOAP_FMAC3 enum ns3__UserChannelCodeType ** SOAP_FMAC4 soap_get_PointerTons3__UserChannelCodeType(struct soap*, enum ns3__UserChannelCodeType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__InfoSharingDirectivesType_DEFINED
#define SOAP_TYPE_PointerTons3__InfoSharingDirectivesType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__InfoSharingDirectivesType(struct soap*, ns3__InfoSharingDirectivesType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__InfoSharingDirectivesType(struct soap*, const char *, int, ns3__InfoSharingDirectivesType *const*, const char *);
SOAP_FMAC3 ns3__InfoSharingDirectivesType ** SOAP_FMAC4 soap_in_PointerTons3__InfoSharingDirectivesType(struct soap*, const char*, ns3__InfoSharingDirectivesType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__InfoSharingDirectivesType(struct soap*, ns3__InfoSharingDirectivesType *const*, const char*, const char*);
SOAP_FMAC3 ns3__InfoSharingDirectivesType ** SOAP_FMAC4 soap_get_PointerTons3__InfoSharingDirectivesType(struct soap*, ns3__InfoSharingDirectivesType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__BuyerDetailType_DEFINED
#define SOAP_TYPE_PointerTons3__BuyerDetailType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__BuyerDetailType(struct soap*, ns3__BuyerDetailType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__BuyerDetailType(struct soap*, const char *, int, ns3__BuyerDetailType *const*, const char *);
SOAP_FMAC3 ns3__BuyerDetailType ** SOAP_FMAC4 soap_in_PointerTons3__BuyerDetailType(struct soap*, const char*, ns3__BuyerDetailType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__BuyerDetailType(struct soap*, ns3__BuyerDetailType *const*, const char*, const char*);
SOAP_FMAC3 ns3__BuyerDetailType ** SOAP_FMAC4 soap_get_PointerTons3__BuyerDetailType(struct soap*, ns3__BuyerDetailType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__BillingApprovalDetailsType_DEFINED
#define SOAP_TYPE_PointerTons3__BillingApprovalDetailsType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__BillingApprovalDetailsType(struct soap*, ns3__BillingApprovalDetailsType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__BillingApprovalDetailsType(struct soap*, const char *, int, ns3__BillingApprovalDetailsType *const*, const char *);
SOAP_FMAC3 ns3__BillingApprovalDetailsType ** SOAP_FMAC4 soap_in_PointerTons3__BillingApprovalDetailsType(struct soap*, const char*, ns3__BillingApprovalDetailsType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__BillingApprovalDetailsType(struct soap*, ns3__BillingApprovalDetailsType *const*, const char*, const char*);
SOAP_FMAC3 ns3__BillingApprovalDetailsType ** SOAP_FMAC4 soap_get_PointerTons3__BillingApprovalDetailsType(struct soap*, ns3__BillingApprovalDetailsType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__AuthorizationRequestType_DEFINED
#define SOAP_TYPE_PointerTons3__AuthorizationRequestType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__AuthorizationRequestType(struct soap*, ns3__AuthorizationRequestType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__AuthorizationRequestType(struct soap*, const char *, int, ns3__AuthorizationRequestType *const*, const char *);
SOAP_FMAC3 ns3__AuthorizationRequestType ** SOAP_FMAC4 soap_in_PointerTons3__AuthorizationRequestType(struct soap*, const char*, ns3__AuthorizationRequestType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__AuthorizationRequestType(struct soap*, ns3__AuthorizationRequestType *const*, const char*, const char*);
SOAP_FMAC3 ns3__AuthorizationRequestType ** SOAP_FMAC4 soap_get_PointerTons3__AuthorizationRequestType(struct soap*, ns3__AuthorizationRequestType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__SetDataRequestType_DEFINED
#define SOAP_TYPE_PointerTons3__SetDataRequestType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__SetDataRequestType(struct soap*, ns3__SetDataRequestType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__SetDataRequestType(struct soap*, const char *, int, ns3__SetDataRequestType *const*, const char *);
SOAP_FMAC3 ns3__SetDataRequestType ** SOAP_FMAC4 soap_in_PointerTons3__SetDataRequestType(struct soap*, const char*, ns3__SetDataRequestType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__SetDataRequestType(struct soap*, ns3__SetDataRequestType *const*, const char*, const char*);
SOAP_FMAC3 ns3__SetDataRequestType ** SOAP_FMAC4 soap_get_PointerTons3__SetDataRequestType(struct soap*, ns3__SetDataRequestType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__CoupledBucketsType_DEFINED
#define SOAP_TYPE_PointerTons3__CoupledBucketsType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__CoupledBucketsType(struct soap*, ns3__CoupledBucketsType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__CoupledBucketsType(struct soap*, const char *, int, ns3__CoupledBucketsType *const*, const char *);
SOAP_FMAC3 ns3__CoupledBucketsType ** SOAP_FMAC4 soap_in_PointerTons3__CoupledBucketsType(struct soap*, const char*, ns3__CoupledBucketsType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__CoupledBucketsType(struct soap*, ns3__CoupledBucketsType *const*, const char*, const char*);
SOAP_FMAC3 ns3__CoupledBucketsType ** SOAP_FMAC4 soap_get_PointerTons3__CoupledBucketsType(struct soap*, ns3__CoupledBucketsType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__ExternalPartnerTrackingDetailsType_DEFINED
#define SOAP_TYPE_PointerTons3__ExternalPartnerTrackingDetailsType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__ExternalPartnerTrackingDetailsType(struct soap*, ns3__ExternalPartnerTrackingDetailsType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__ExternalPartnerTrackingDetailsType(struct soap*, const char *, int, ns3__ExternalPartnerTrackingDetailsType *const*, const char *);
SOAP_FMAC3 ns3__ExternalPartnerTrackingDetailsType ** SOAP_FMAC4 soap_in_PointerTons3__ExternalPartnerTrackingDetailsType(struct soap*, const char*, ns3__ExternalPartnerTrackingDetailsType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__ExternalPartnerTrackingDetailsType(struct soap*, ns3__ExternalPartnerTrackingDetailsType *const*, const char*, const char*);
SOAP_FMAC3 ns3__ExternalPartnerTrackingDetailsType ** SOAP_FMAC4 soap_get_PointerTons3__ExternalPartnerTrackingDetailsType(struct soap*, ns3__ExternalPartnerTrackingDetailsType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__DisplayControlDetailsType_DEFINED
#define SOAP_TYPE_PointerTons3__DisplayControlDetailsType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__DisplayControlDetailsType(struct soap*, ns3__DisplayControlDetailsType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__DisplayControlDetailsType(struct soap*, const char *, int, ns3__DisplayControlDetailsType *const*, const char *);
SOAP_FMAC3 ns3__DisplayControlDetailsType ** SOAP_FMAC4 soap_in_PointerTons3__DisplayControlDetailsType(struct soap*, const char*, ns3__DisplayControlDetailsType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__DisplayControlDetailsType(struct soap*, ns3__DisplayControlDetailsType *const*, const char*, const char*);
SOAP_FMAC3 ns3__DisplayControlDetailsType ** SOAP_FMAC4 soap_get_PointerTons3__DisplayControlDetailsType(struct soap*, ns3__DisplayControlDetailsType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__FlowControlDetailsType_DEFINED
#define SOAP_TYPE_PointerTons3__FlowControlDetailsType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__FlowControlDetailsType(struct soap*, ns3__FlowControlDetailsType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__FlowControlDetailsType(struct soap*, const char *, int, ns3__FlowControlDetailsType *const*, const char *);
SOAP_FMAC3 ns3__FlowControlDetailsType ** SOAP_FMAC4 soap_in_PointerTons3__FlowControlDetailsType(struct soap*, const char*, ns3__FlowControlDetailsType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__FlowControlDetailsType(struct soap*, ns3__FlowControlDetailsType *const*, const char*, const char*);
SOAP_FMAC3 ns3__FlowControlDetailsType ** SOAP_FMAC4 soap_get_PointerTons3__FlowControlDetailsType(struct soap*, ns3__FlowControlDetailsType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__ExternalRememberMeOptInDetailsType_DEFINED
#define SOAP_TYPE_PointerTons3__ExternalRememberMeOptInDetailsType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__ExternalRememberMeOptInDetailsType(struct soap*, ns3__ExternalRememberMeOptInDetailsType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__ExternalRememberMeOptInDetailsType(struct soap*, const char *, int, ns3__ExternalRememberMeOptInDetailsType *const*, const char *);
SOAP_FMAC3 ns3__ExternalRememberMeOptInDetailsType ** SOAP_FMAC4 soap_in_PointerTons3__ExternalRememberMeOptInDetailsType(struct soap*, const char*, ns3__ExternalRememberMeOptInDetailsType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__ExternalRememberMeOptInDetailsType(struct soap*, ns3__ExternalRememberMeOptInDetailsType *const*, const char*, const char*);
SOAP_FMAC3 ns3__ExternalRememberMeOptInDetailsType ** SOAP_FMAC4 soap_get_PointerTons3__ExternalRememberMeOptInDetailsType(struct soap*, ns3__ExternalRememberMeOptInDetailsType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__IncentiveInfoType_DEFINED
#define SOAP_TYPE_PointerTons3__IncentiveInfoType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__IncentiveInfoType(struct soap*, ns3__IncentiveInfoType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__IncentiveInfoType(struct soap*, const char *, int, ns3__IncentiveInfoType *const*, const char *);
SOAP_FMAC3 ns3__IncentiveInfoType ** SOAP_FMAC4 soap_in_PointerTons3__IncentiveInfoType(struct soap*, const char*, ns3__IncentiveInfoType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__IncentiveInfoType(struct soap*, ns3__IncentiveInfoType *const*, const char*, const char*);
SOAP_FMAC3 ns3__IncentiveInfoType ** SOAP_FMAC4 soap_get_PointerTons3__IncentiveInfoType(struct soap*, ns3__IncentiveInfoType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__TotalType_DEFINED
#define SOAP_TYPE_PointerTons3__TotalType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__TotalType(struct soap*, enum ns3__TotalType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__TotalType(struct soap*, const char *, int, enum ns3__TotalType *const*, const char *);
SOAP_FMAC3 enum ns3__TotalType ** SOAP_FMAC4 soap_in_PointerTons3__TotalType(struct soap*, const char*, enum ns3__TotalType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__TotalType(struct soap*, enum ns3__TotalType *const*, const char*, const char*);
SOAP_FMAC3 enum ns3__TotalType ** SOAP_FMAC4 soap_get_PointerTons3__TotalType(struct soap*, enum ns3__TotalType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__ShippingOptionType_DEFINED
#define SOAP_TYPE_PointerTons3__ShippingOptionType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__ShippingOptionType(struct soap*, ns3__ShippingOptionType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__ShippingOptionType(struct soap*, const char *, int, ns3__ShippingOptionType *const*, const char *);
SOAP_FMAC3 ns3__ShippingOptionType ** SOAP_FMAC4 soap_in_PointerTons3__ShippingOptionType(struct soap*, const char*, ns3__ShippingOptionType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__ShippingOptionType(struct soap*, ns3__ShippingOptionType *const*, const char*, const char*);
SOAP_FMAC3 ns3__ShippingOptionType ** SOAP_FMAC4 soap_get_PointerTons3__ShippingOptionType(struct soap*, ns3__ShippingOptionType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__PaymentDetailsType_DEFINED
#define SOAP_TYPE_PointerTons3__PaymentDetailsType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__PaymentDetailsType(struct soap*, ns3__PaymentDetailsType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__PaymentDetailsType(struct soap*, const char *, int, ns3__PaymentDetailsType *const*, const char *);
SOAP_FMAC3 ns3__PaymentDetailsType ** SOAP_FMAC4 soap_in_PointerTons3__PaymentDetailsType(struct soap*, const char*, ns3__PaymentDetailsType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__PaymentDetailsType(struct soap*, ns3__PaymentDetailsType *const*, const char*, const char*);
SOAP_FMAC3 ns3__PaymentDetailsType ** SOAP_FMAC4 soap_get_PointerTons3__PaymentDetailsType(struct soap*, ns3__PaymentDetailsType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__BuyerDetailsType_DEFINED
#define SOAP_TYPE_PointerTons3__BuyerDetailsType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__BuyerDetailsType(struct soap*, ns3__BuyerDetailsType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__BuyerDetailsType(struct soap*, const char *, int, ns3__BuyerDetailsType *const*, const char *);
SOAP_FMAC3 ns3__BuyerDetailsType ** SOAP_FMAC4 soap_in_PointerTons3__BuyerDetailsType(struct soap*, const char*, ns3__BuyerDetailsType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__BuyerDetailsType(struct soap*, ns3__BuyerDetailsType *const*, const char*, const char*);
SOAP_FMAC3 ns3__BuyerDetailsType ** SOAP_FMAC4 soap_get_PointerTons3__BuyerDetailsType(struct soap*, ns3__BuyerDetailsType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__OtherPaymentMethodDetailsType_DEFINED
#define SOAP_TYPE_PointerTons3__OtherPaymentMethodDetailsType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__OtherPaymentMethodDetailsType(struct soap*, ns3__OtherPaymentMethodDetailsType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__OtherPaymentMethodDetailsType(struct soap*, const char *, int, ns3__OtherPaymentMethodDetailsType *const*, const char *);
SOAP_FMAC3 ns3__OtherPaymentMethodDetailsType ** SOAP_FMAC4 soap_in_PointerTons3__OtherPaymentMethodDetailsType(struct soap*, const char*, ns3__OtherPaymentMethodDetailsType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__OtherPaymentMethodDetailsType(struct soap*, ns3__OtherPaymentMethodDetailsType *const*, const char*, const char*);
SOAP_FMAC3 ns3__OtherPaymentMethodDetailsType ** SOAP_FMAC4 soap_get_PointerTons3__OtherPaymentMethodDetailsType(struct soap*, ns3__OtherPaymentMethodDetailsType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons4__EnhancedCheckoutDataType_DEFINED
#define SOAP_TYPE_PointerTons4__EnhancedCheckoutDataType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons4__EnhancedCheckoutDataType(struct soap*, ns4__EnhancedCheckoutDataType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons4__EnhancedCheckoutDataType(struct soap*, const char *, int, ns4__EnhancedCheckoutDataType *const*, const char *);
SOAP_FMAC3 ns4__EnhancedCheckoutDataType ** SOAP_FMAC4 soap_in_PointerTons4__EnhancedCheckoutDataType(struct soap*, const char*, ns4__EnhancedCheckoutDataType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons4__EnhancedCheckoutDataType(struct soap*, ns4__EnhancedCheckoutDataType *const*, const char*, const char*);
SOAP_FMAC3 ns4__EnhancedCheckoutDataType ** SOAP_FMAC4 soap_get_PointerTons4__EnhancedCheckoutDataType(struct soap*, ns4__EnhancedCheckoutDataType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__FundingSourceDetailsType_DEFINED
#define SOAP_TYPE_PointerTons3__FundingSourceDetailsType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__FundingSourceDetailsType(struct soap*, ns3__FundingSourceDetailsType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__FundingSourceDetailsType(struct soap*, const char *, int, ns3__FundingSourceDetailsType *const*, const char *);
SOAP_FMAC3 ns3__FundingSourceDetailsType ** SOAP_FMAC4 soap_in_PointerTons3__FundingSourceDetailsType(struct soap*, const char*, ns3__FundingSourceDetailsType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__FundingSourceDetailsType(struct soap*, ns3__FundingSourceDetailsType *const*, const char*, const char*);
SOAP_FMAC3 ns3__FundingSourceDetailsType ** SOAP_FMAC4 soap_get_PointerTons3__FundingSourceDetailsType(struct soap*, ns3__FundingSourceDetailsType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__ProductCategoryType_DEFINED
#define SOAP_TYPE_PointerTons3__ProductCategoryType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__ProductCategoryType(struct soap*, enum ns3__ProductCategoryType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__ProductCategoryType(struct soap*, const char *, int, enum ns3__ProductCategoryType *const*, const char *);
SOAP_FMAC3 enum ns3__ProductCategoryType ** SOAP_FMAC4 soap_in_PointerTons3__ProductCategoryType(struct soap*, const char*, enum ns3__ProductCategoryType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__ProductCategoryType(struct soap*, enum ns3__ProductCategoryType *const*, const char*, const char*);
SOAP_FMAC3 enum ns3__ProductCategoryType ** SOAP_FMAC4 soap_get_PointerTons3__ProductCategoryType(struct soap*, enum ns3__ProductCategoryType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__BillingAgreementDetailsType_DEFINED
#define SOAP_TYPE_PointerTons3__BillingAgreementDetailsType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__BillingAgreementDetailsType(struct soap*, ns3__BillingAgreementDetailsType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__BillingAgreementDetailsType(struct soap*, const char *, int, ns3__BillingAgreementDetailsType *const*, const char *);
SOAP_FMAC3 ns3__BillingAgreementDetailsType ** SOAP_FMAC4 soap_in_PointerTons3__BillingAgreementDetailsType(struct soap*, const char*, ns3__BillingAgreementDetailsType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__BillingAgreementDetailsType(struct soap*, ns3__BillingAgreementDetailsType *const*, const char*, const char*);
SOAP_FMAC3 ns3__BillingAgreementDetailsType ** SOAP_FMAC4 soap_get_PointerTons3__BillingAgreementDetailsType(struct soap*, ns3__BillingAgreementDetailsType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__ChannelType_DEFINED
#define SOAP_TYPE_PointerTons3__ChannelType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__ChannelType(struct soap*, enum ns3__ChannelType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__ChannelType(struct soap*, const char *, int, enum ns3__ChannelType *const*, const char *);
SOAP_FMAC3 enum ns3__ChannelType ** SOAP_FMAC4 soap_in_PointerTons3__ChannelType(struct soap*, const char*, enum ns3__ChannelType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__ChannelType(struct soap*, enum ns3__ChannelType *const*, const char*, const char*);
SOAP_FMAC3 enum ns3__ChannelType ** SOAP_FMAC4 soap_get_PointerTons3__ChannelType(struct soap*, enum ns3__ChannelType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__LandingPageType_DEFINED
#define SOAP_TYPE_PointerTons3__LandingPageType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__LandingPageType(struct soap*, enum ns3__LandingPageType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__LandingPageType(struct soap*, const char *, int, enum ns3__LandingPageType *const*, const char *);
SOAP_FMAC3 enum ns3__LandingPageType ** SOAP_FMAC4 soap_in_PointerTons3__LandingPageType(struct soap*, const char*, enum ns3__LandingPageType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__LandingPageType(struct soap*, enum ns3__LandingPageType *const*, const char*, const char*);
SOAP_FMAC3 enum ns3__LandingPageType ** SOAP_FMAC4 soap_get_PointerTons3__LandingPageType(struct soap*, enum ns3__LandingPageType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__SolutionTypeType_DEFINED
#define SOAP_TYPE_PointerTons3__SolutionTypeType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__SolutionTypeType(struct soap*, enum ns3__SolutionTypeType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__SolutionTypeType(struct soap*, const char *, int, enum ns3__SolutionTypeType *const*, const char *);
SOAP_FMAC3 enum ns3__SolutionTypeType ** SOAP_FMAC4 soap_in_PointerTons3__SolutionTypeType(struct soap*, const char*, enum ns3__SolutionTypeType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__SolutionTypeType(struct soap*, enum ns3__SolutionTypeType *const*, const char*, const char*);
SOAP_FMAC3 enum ns3__SolutionTypeType ** SOAP_FMAC4 soap_get_PointerTons3__SolutionTypeType(struct soap*, enum ns3__SolutionTypeType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__PaymentActionCodeType_DEFINED
#define SOAP_TYPE_PointerTons3__PaymentActionCodeType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__PaymentActionCodeType(struct soap*, enum ns3__PaymentActionCodeType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__PaymentActionCodeType(struct soap*, const char *, int, enum ns3__PaymentActionCodeType *const*, const char *);
SOAP_FMAC3 enum ns3__PaymentActionCodeType ** SOAP_FMAC4 soap_in_PointerTons3__PaymentActionCodeType(struct soap*, const char*, enum ns3__PaymentActionCodeType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__PaymentActionCodeType(struct soap*, enum ns3__PaymentActionCodeType *const*, const char*, const char*);
SOAP_FMAC3 enum ns3__PaymentActionCodeType ** SOAP_FMAC4 soap_get_PointerTons3__PaymentActionCodeType(struct soap*, enum ns3__PaymentActionCodeType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__ExpressCheckoutTokenType_DEFINED
#define SOAP_TYPE_PointerTons3__ExpressCheckoutTokenType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__ExpressCheckoutTokenType(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__ExpressCheckoutTokenType(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerTons3__ExpressCheckoutTokenType(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__ExpressCheckoutTokenType(struct soap*, std::string *const*, const char*, const char*);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerTons3__ExpressCheckoutTokenType(struct soap*, std::string **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__IncentiveDetailType_DEFINED
#define SOAP_TYPE_PointerTons3__IncentiveDetailType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__IncentiveDetailType(struct soap*, ns3__IncentiveDetailType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__IncentiveDetailType(struct soap*, const char *, int, ns3__IncentiveDetailType *const*, const char *);
SOAP_FMAC3 ns3__IncentiveDetailType ** SOAP_FMAC4 soap_in_PointerTons3__IncentiveDetailType(struct soap*, const char*, ns3__IncentiveDetailType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__IncentiveDetailType(struct soap*, ns3__IncentiveDetailType *const*, const char*, const char*);
SOAP_FMAC3 ns3__IncentiveDetailType ** SOAP_FMAC4 soap_get_PointerTons3__IncentiveDetailType(struct soap*, ns3__IncentiveDetailType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__IncentiveRequestDetailsType_DEFINED
#define SOAP_TYPE_PointerTons3__IncentiveRequestDetailsType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__IncentiveRequestDetailsType(struct soap*, ns3__IncentiveRequestDetailsType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__IncentiveRequestDetailsType(struct soap*, const char *, int, ns3__IncentiveRequestDetailsType *const*, const char *);
SOAP_FMAC3 ns3__IncentiveRequestDetailsType ** SOAP_FMAC4 soap_in_PointerTons3__IncentiveRequestDetailsType(struct soap*, const char*, ns3__IncentiveRequestDetailsType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__IncentiveRequestDetailsType(struct soap*, ns3__IncentiveRequestDetailsType *const*, const char*, const char*);
SOAP_FMAC3 ns3__IncentiveRequestDetailsType ** SOAP_FMAC4 soap_get_PointerTons3__IncentiveRequestDetailsType(struct soap*, ns3__IncentiveRequestDetailsType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__IncentiveBucketType_DEFINED
#define SOAP_TYPE_PointerTons3__IncentiveBucketType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__IncentiveBucketType(struct soap*, ns3__IncentiveBucketType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__IncentiveBucketType(struct soap*, const char *, int, ns3__IncentiveBucketType *const*, const char *);
SOAP_FMAC3 ns3__IncentiveBucketType ** SOAP_FMAC4 soap_in_PointerTons3__IncentiveBucketType(struct soap*, const char*, ns3__IncentiveBucketType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__IncentiveBucketType(struct soap*, ns3__IncentiveBucketType *const*, const char*, const char*);
SOAP_FMAC3 ns3__IncentiveBucketType ** SOAP_FMAC4 soap_get_PointerTons3__IncentiveBucketType(struct soap*, ns3__IncentiveBucketType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__IncentiveApplyIndicationType_DEFINED
#define SOAP_TYPE_PointerTons3__IncentiveApplyIndicationType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__IncentiveApplyIndicationType(struct soap*, ns3__IncentiveApplyIndicationType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__IncentiveApplyIndicationType(struct soap*, const char *, int, ns3__IncentiveApplyIndicationType *const*, const char *);
SOAP_FMAC3 ns3__IncentiveApplyIndicationType ** SOAP_FMAC4 soap_in_PointerTons3__IncentiveApplyIndicationType(struct soap*, const char*, ns3__IncentiveApplyIndicationType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__IncentiveApplyIndicationType(struct soap*, ns3__IncentiveApplyIndicationType *const*, const char*, const char*);
SOAP_FMAC3 ns3__IncentiveApplyIndicationType ** SOAP_FMAC4 soap_get_PointerTons3__IncentiveApplyIndicationType(struct soap*, ns3__IncentiveApplyIndicationType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__IncentiveRequestDetailLevelCodeType_DEFINED
#define SOAP_TYPE_PointerTons3__IncentiveRequestDetailLevelCodeType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__IncentiveRequestDetailLevelCodeType(struct soap*, enum ns3__IncentiveRequestDetailLevelCodeType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__IncentiveRequestDetailLevelCodeType(struct soap*, const char *, int, enum ns3__IncentiveRequestDetailLevelCodeType *const*, const char *);
SOAP_FMAC3 enum ns3__IncentiveRequestDetailLevelCodeType ** SOAP_FMAC4 soap_in_PointerTons3__IncentiveRequestDetailLevelCodeType(struct soap*, const char*, enum ns3__IncentiveRequestDetailLevelCodeType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__IncentiveRequestDetailLevelCodeType(struct soap*, enum ns3__IncentiveRequestDetailLevelCodeType *const*, const char*, const char*);
SOAP_FMAC3 enum ns3__IncentiveRequestDetailLevelCodeType ** SOAP_FMAC4 soap_get_PointerTons3__IncentiveRequestDetailLevelCodeType(struct soap*, enum ns3__IncentiveRequestDetailLevelCodeType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__IncentiveRequestCodeType_DEFINED
#define SOAP_TYPE_PointerTons3__IncentiveRequestCodeType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__IncentiveRequestCodeType(struct soap*, enum ns3__IncentiveRequestCodeType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__IncentiveRequestCodeType(struct soap*, const char *, int, enum ns3__IncentiveRequestCodeType *const*, const char *);
SOAP_FMAC3 enum ns3__IncentiveRequestCodeType ** SOAP_FMAC4 soap_in_PointerTons3__IncentiveRequestCodeType(struct soap*, const char*, enum ns3__IncentiveRequestCodeType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__IncentiveRequestCodeType(struct soap*, enum ns3__IncentiveRequestCodeType *const*, const char*, const char*);
SOAP_FMAC3 enum ns3__IncentiveRequestCodeType ** SOAP_FMAC4 soap_get_PointerTons3__IncentiveRequestCodeType(struct soap*, enum ns3__IncentiveRequestCodeType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__IncentiveItemType_DEFINED
#define SOAP_TYPE_PointerTons3__IncentiveItemType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__IncentiveItemType(struct soap*, ns3__IncentiveItemType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__IncentiveItemType(struct soap*, const char *, int, ns3__IncentiveItemType *const*, const char *);
SOAP_FMAC3 ns3__IncentiveItemType ** SOAP_FMAC4 soap_in_PointerTons3__IncentiveItemType(struct soap*, const char*, ns3__IncentiveItemType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__IncentiveItemType(struct soap*, ns3__IncentiveItemType *const*, const char*, const char*);
SOAP_FMAC3 ns3__IncentiveItemType ** SOAP_FMAC4 soap_get_PointerTons3__IncentiveItemType(struct soap*, ns3__IncentiveItemType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToxsd__integer_DEFINED
#define SOAP_TYPE_PointerToxsd__integer_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToxsd__integer(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToxsd__integer(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerToxsd__integer(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToxsd__integer(struct soap*, std::string *const*, const char*, const char*);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerToxsd__integer(struct soap*, std::string **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__IncentiveAppliedToType_DEFINED
#define SOAP_TYPE_PointerTons3__IncentiveAppliedToType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__IncentiveAppliedToType(struct soap*, ns3__IncentiveAppliedToType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__IncentiveAppliedToType(struct soap*, const char *, int, ns3__IncentiveAppliedToType *const*, const char *);
SOAP_FMAC3 ns3__IncentiveAppliedToType ** SOAP_FMAC4 soap_in_PointerTons3__IncentiveAppliedToType(struct soap*, const char*, ns3__IncentiveAppliedToType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__IncentiveAppliedToType(struct soap*, ns3__IncentiveAppliedToType *const*, const char*, const char*);
SOAP_FMAC3 ns3__IncentiveAppliedToType ** SOAP_FMAC4 soap_get_PointerTons3__IncentiveAppliedToType(struct soap*, ns3__IncentiveAppliedToType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__IncentiveTypeCodeType_DEFINED
#define SOAP_TYPE_PointerTons3__IncentiveTypeCodeType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__IncentiveTypeCodeType(struct soap*, enum ns3__IncentiveTypeCodeType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__IncentiveTypeCodeType(struct soap*, const char *, int, enum ns3__IncentiveTypeCodeType *const*, const char *);
SOAP_FMAC3 enum ns3__IncentiveTypeCodeType ** SOAP_FMAC4 soap_in_PointerTons3__IncentiveTypeCodeType(struct soap*, const char*, enum ns3__IncentiveTypeCodeType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__IncentiveTypeCodeType(struct soap*, enum ns3__IncentiveTypeCodeType *const*, const char*, const char*);
SOAP_FMAC3 enum ns3__IncentiveTypeCodeType ** SOAP_FMAC4 soap_get_PointerTons3__IncentiveTypeCodeType(struct soap*, enum ns3__IncentiveTypeCodeType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__SuffixType_DEFINED
#define SOAP_TYPE_PointerTons3__SuffixType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__SuffixType(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__SuffixType(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerTons3__SuffixType(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__SuffixType(struct soap*, std::string *const*, const char*, const char*);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerTons3__SuffixType(struct soap*, std::string **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__NameType_DEFINED
#define SOAP_TYPE_PointerTons3__NameType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__NameType(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__NameType(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerTons3__NameType(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__NameType(struct soap*, std::string *const*, const char*, const char*);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerTons3__NameType(struct soap*, std::string **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__SalutationType_DEFINED
#define SOAP_TYPE_PointerTons3__SalutationType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__SalutationType(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__SalutationType(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerTons3__SalutationType(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__SalutationType(struct soap*, std::string *const*, const char*, const char*);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerTons3__SalutationType(struct soap*, std::string **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__AddressNormalizationStatusCodeType_DEFINED
#define SOAP_TYPE_PointerTons3__AddressNormalizationStatusCodeType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__AddressNormalizationStatusCodeType(struct soap*, enum ns3__AddressNormalizationStatusCodeType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__AddressNormalizationStatusCodeType(struct soap*, const char *, int, enum ns3__AddressNormalizationStatusCodeType *const*, const char *);
SOAP_FMAC3 enum ns3__AddressNormalizationStatusCodeType ** SOAP_FMAC4 soap_in_PointerTons3__AddressNormalizationStatusCodeType(struct soap*, const char*, enum ns3__AddressNormalizationStatusCodeType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__AddressNormalizationStatusCodeType(struct soap*, enum ns3__AddressNormalizationStatusCodeType *const*, const char*, const char*);
SOAP_FMAC3 enum ns3__AddressNormalizationStatusCodeType ** SOAP_FMAC4 soap_get_PointerTons3__AddressNormalizationStatusCodeType(struct soap*, enum ns3__AddressNormalizationStatusCodeType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__AddressStatusCodeType_DEFINED
#define SOAP_TYPE_PointerTons3__AddressStatusCodeType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__AddressStatusCodeType(struct soap*, enum ns3__AddressStatusCodeType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__AddressStatusCodeType(struct soap*, const char *, int, enum ns3__AddressStatusCodeType *const*, const char *);
SOAP_FMAC3 enum ns3__AddressStatusCodeType ** SOAP_FMAC4 soap_in_PointerTons3__AddressStatusCodeType(struct soap*, const char*, enum ns3__AddressStatusCodeType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__AddressStatusCodeType(struct soap*, enum ns3__AddressStatusCodeType *const*, const char*, const char*);
SOAP_FMAC3 enum ns3__AddressStatusCodeType ** SOAP_FMAC4 soap_get_PointerTons3__AddressStatusCodeType(struct soap*, enum ns3__AddressStatusCodeType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__AddressOwnerCodeType_DEFINED
#define SOAP_TYPE_PointerTons3__AddressOwnerCodeType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__AddressOwnerCodeType(struct soap*, enum ns3__AddressOwnerCodeType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__AddressOwnerCodeType(struct soap*, const char *, int, enum ns3__AddressOwnerCodeType *const*, const char *);
SOAP_FMAC3 enum ns3__AddressOwnerCodeType ** SOAP_FMAC4 soap_in_PointerTons3__AddressOwnerCodeType(struct soap*, const char*, enum ns3__AddressOwnerCodeType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__AddressOwnerCodeType(struct soap*, enum ns3__AddressOwnerCodeType *const*, const char*, const char*);
SOAP_FMAC3 enum ns3__AddressOwnerCodeType ** SOAP_FMAC4 soap_get_PointerTons3__AddressOwnerCodeType(struct soap*, enum ns3__AddressOwnerCodeType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__ErrorType_DEFINED
#define SOAP_TYPE_PointerTons3__ErrorType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__ErrorType(struct soap*, ns3__ErrorType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__ErrorType(struct soap*, const char *, int, ns3__ErrorType *const*, const char *);
SOAP_FMAC3 ns3__ErrorType ** SOAP_FMAC4 soap_in_PointerTons3__ErrorType(struct soap*, const char*, ns3__ErrorType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__ErrorType(struct soap*, ns3__ErrorType *const*, const char*, const char*);
SOAP_FMAC3 ns3__ErrorType ** SOAP_FMAC4 soap_get_PointerTons3__ErrorType(struct soap*, ns3__ErrorType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__ErrorParameterType_DEFINED
#define SOAP_TYPE_PointerTons3__ErrorParameterType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__ErrorParameterType(struct soap*, ns3__ErrorParameterType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__ErrorParameterType(struct soap*, const char *, int, ns3__ErrorParameterType *const*, const char *);
SOAP_FMAC3 ns3__ErrorParameterType ** SOAP_FMAC4 soap_in_PointerTons3__ErrorParameterType(struct soap*, const char*, ns3__ErrorParameterType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__ErrorParameterType(struct soap*, ns3__ErrorParameterType *const*, const char*, const char*);
SOAP_FMAC3 ns3__ErrorParameterType ** SOAP_FMAC4 soap_get_PointerTons3__ErrorParameterType(struct soap*, ns3__ErrorParameterType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__ModifyCodeType_DEFINED
#define SOAP_TYPE_PointerTons3__ModifyCodeType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__ModifyCodeType(struct soap*, enum ns3__ModifyCodeType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__ModifyCodeType(struct soap*, const char *, int, enum ns3__ModifyCodeType *const*, const char *);
SOAP_FMAC3 enum ns3__ModifyCodeType ** SOAP_FMAC4 soap_in_PointerTons3__ModifyCodeType(struct soap*, const char*, enum ns3__ModifyCodeType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__ModifyCodeType(struct soap*, enum ns3__ModifyCodeType *const*, const char*, const char*);
SOAP_FMAC3 enum ns3__ModifyCodeType ** SOAP_FMAC4 soap_get_PointerTons3__ModifyCodeType(struct soap*, enum ns3__ModifyCodeType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__SellerType_DEFINED
#define SOAP_TYPE_PointerTons3__SellerType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__SellerType(struct soap*, ns3__SellerType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__SellerType(struct soap*, const char *, int, ns3__SellerType *const*, const char *);
SOAP_FMAC3 ns3__SellerType ** SOAP_FMAC4 soap_in_PointerTons3__SellerType(struct soap*, const char*, ns3__SellerType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__SellerType(struct soap*, ns3__SellerType *const*, const char*, const char*);
SOAP_FMAC3 ns3__SellerType ** SOAP_FMAC4 soap_get_PointerTons3__SellerType(struct soap*, ns3__SellerType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__BuyerType_DEFINED
#define SOAP_TYPE_PointerTons3__BuyerType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__BuyerType(struct soap*, ns3__BuyerType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__BuyerType(struct soap*, const char *, int, ns3__BuyerType *const*, const char *);
SOAP_FMAC3 ns3__BuyerType ** SOAP_FMAC4 soap_in_PointerTons3__BuyerType(struct soap*, const char*, ns3__BuyerType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__BuyerType(struct soap*, ns3__BuyerType *const*, const char*, const char*);
SOAP_FMAC3 ns3__BuyerType ** SOAP_FMAC4 soap_get_PointerTons3__BuyerType(struct soap*, ns3__BuyerType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__VATStatusCodeType_DEFINED
#define SOAP_TYPE_PointerTons3__VATStatusCodeType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__VATStatusCodeType(struct soap*, enum ns3__VATStatusCodeType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__VATStatusCodeType(struct soap*, const char *, int, enum ns3__VATStatusCodeType *const*, const char *);
SOAP_FMAC3 enum ns3__VATStatusCodeType ** SOAP_FMAC4 soap_in_PointerTons3__VATStatusCodeType(struct soap*, const char*, enum ns3__VATStatusCodeType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__VATStatusCodeType(struct soap*, enum ns3__VATStatusCodeType *const*, const char*, const char*);
SOAP_FMAC3 enum ns3__VATStatusCodeType ** SOAP_FMAC4 soap_get_PointerTons3__VATStatusCodeType(struct soap*, enum ns3__VATStatusCodeType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__UserStatusCodeType_DEFINED
#define SOAP_TYPE_PointerTons3__UserStatusCodeType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__UserStatusCodeType(struct soap*, enum ns3__UserStatusCodeType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__UserStatusCodeType(struct soap*, const char *, int, enum ns3__UserStatusCodeType *const*, const char *);
SOAP_FMAC3 enum ns3__UserStatusCodeType ** SOAP_FMAC4 soap_in_PointerTons3__UserStatusCodeType(struct soap*, const char*, enum ns3__UserStatusCodeType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__UserStatusCodeType(struct soap*, enum ns3__UserStatusCodeType *const*, const char*, const char*);
SOAP_FMAC3 enum ns3__UserStatusCodeType ** SOAP_FMAC4 soap_get_PointerTons3__UserStatusCodeType(struct soap*, enum ns3__UserStatusCodeType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__FeedbackRatingStarCodeType_DEFINED
#define SOAP_TYPE_PointerTons3__FeedbackRatingStarCodeType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__FeedbackRatingStarCodeType(struct soap*, enum ns3__FeedbackRatingStarCodeType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__FeedbackRatingStarCodeType(struct soap*, const char *, int, enum ns3__FeedbackRatingStarCodeType *const*, const char *);
SOAP_FMAC3 enum ns3__FeedbackRatingStarCodeType ** SOAP_FMAC4 soap_in_PointerTons3__FeedbackRatingStarCodeType(struct soap*, const char*, enum ns3__FeedbackRatingStarCodeType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__FeedbackRatingStarCodeType(struct soap*, enum ns3__FeedbackRatingStarCodeType *const*, const char*, const char*);
SOAP_FMAC3 enum ns3__FeedbackRatingStarCodeType ** SOAP_FMAC4 soap_get_PointerTons3__FeedbackRatingStarCodeType(struct soap*, enum ns3__FeedbackRatingStarCodeType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__BuyerPaymentMethodCodeType_DEFINED
#define SOAP_TYPE_PointerTons3__BuyerPaymentMethodCodeType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__BuyerPaymentMethodCodeType(struct soap*, enum ns3__BuyerPaymentMethodCodeType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__BuyerPaymentMethodCodeType(struct soap*, const char *, int, enum ns3__BuyerPaymentMethodCodeType *const*, const char *);
SOAP_FMAC3 enum ns3__BuyerPaymentMethodCodeType ** SOAP_FMAC4 soap_in_PointerTons3__BuyerPaymentMethodCodeType(struct soap*, const char*, enum ns3__BuyerPaymentMethodCodeType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__BuyerPaymentMethodCodeType(struct soap*, enum ns3__BuyerPaymentMethodCodeType *const*, const char*, const char*);
SOAP_FMAC3 enum ns3__BuyerPaymentMethodCodeType ** SOAP_FMAC4 soap_get_PointerTons3__BuyerPaymentMethodCodeType(struct soap*, enum ns3__BuyerPaymentMethodCodeType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__PaymentMeansType_DEFINED
#define SOAP_TYPE_PointerTons3__PaymentMeansType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__PaymentMeansType(struct soap*, ns3__PaymentMeansType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__PaymentMeansType(struct soap*, const char *, int, ns3__PaymentMeansType *const*, const char *);
SOAP_FMAC3 ns3__PaymentMeansType ** SOAP_FMAC4 soap_in_PointerTons3__PaymentMeansType(struct soap*, const char*, ns3__PaymentMeansType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__PaymentMeansType(struct soap*, ns3__PaymentMeansType *const*, const char*, const char*);
SOAP_FMAC3 ns3__PaymentMeansType ** SOAP_FMAC4 soap_get_PointerTons3__PaymentMeansType(struct soap*, ns3__PaymentMeansType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToxsd__decimal_DEFINED
#define SOAP_TYPE_PointerToxsd__decimal_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToxsd__decimal(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToxsd__decimal(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerToxsd__decimal(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToxsd__decimal(struct soap*, std::string *const*, const char*, const char*);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerToxsd__decimal(struct soap*, std::string **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__TransactionStatusType_DEFINED
#define SOAP_TYPE_PointerTons3__TransactionStatusType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__TransactionStatusType(struct soap*, ns3__TransactionStatusType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__TransactionStatusType(struct soap*, const char *, int, ns3__TransactionStatusType *const*, const char *);
SOAP_FMAC3 ns3__TransactionStatusType ** SOAP_FMAC4 soap_in_PointerTons3__TransactionStatusType(struct soap*, const char*, ns3__TransactionStatusType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__TransactionStatusType(struct soap*, ns3__TransactionStatusType *const*, const char*, const char*);
SOAP_FMAC3 ns3__TransactionStatusType ** SOAP_FMAC4 soap_get_PointerTons3__TransactionStatusType(struct soap*, ns3__TransactionStatusType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__ItemType_DEFINED
#define SOAP_TYPE_PointerTons3__ItemType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__ItemType(struct soap*, ns3__ItemType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__ItemType(struct soap*, const char *, int, ns3__ItemType *const*, const char *);
SOAP_FMAC3 ns3__ItemType ** SOAP_FMAC4 soap_in_PointerTons3__ItemType(struct soap*, const char*, ns3__ItemType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__ItemType(struct soap*, ns3__ItemType *const*, const char*, const char*);
SOAP_FMAC3 ns3__ItemType ** SOAP_FMAC4 soap_get_PointerTons3__ItemType(struct soap*, ns3__ItemType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__DepositTypeCodeType_DEFINED
#define SOAP_TYPE_PointerTons3__DepositTypeCodeType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__DepositTypeCodeType(struct soap*, enum ns3__DepositTypeCodeType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__DepositTypeCodeType(struct soap*, const char *, int, enum ns3__DepositTypeCodeType *const*, const char *);
SOAP_FMAC3 enum ns3__DepositTypeCodeType ** SOAP_FMAC4 soap_in_PointerTons3__DepositTypeCodeType(struct soap*, const char*, enum ns3__DepositTypeCodeType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__DepositTypeCodeType(struct soap*, enum ns3__DepositTypeCodeType *const*, const char*, const char*);
SOAP_FMAC3 enum ns3__DepositTypeCodeType ** SOAP_FMAC4 soap_get_PointerTons3__DepositTypeCodeType(struct soap*, enum ns3__DepositTypeCodeType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__TransactionType_DEFINED
#define SOAP_TYPE_PointerTons3__TransactionType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__TransactionType(struct soap*, ns3__TransactionType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__TransactionType(struct soap*, const char *, int, ns3__TransactionType *const*, const char *);
SOAP_FMAC3 ns3__TransactionType ** SOAP_FMAC4 soap_in_PointerTons3__TransactionType(struct soap*, const char*, ns3__TransactionType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__TransactionType(struct soap*, ns3__TransactionType *const*, const char*, const char*);
SOAP_FMAC3 ns3__TransactionType ** SOAP_FMAC4 soap_get_PointerTons3__TransactionType(struct soap*, ns3__TransactionType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__VendorHostedPictureType_DEFINED
#define SOAP_TYPE_PointerTons3__VendorHostedPictureType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__VendorHostedPictureType(struct soap*, ns3__VendorHostedPictureType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__VendorHostedPictureType(struct soap*, const char *, int, ns3__VendorHostedPictureType *const*, const char *);
SOAP_FMAC3 ns3__VendorHostedPictureType ** SOAP_FMAC4 soap_in_PointerTons3__VendorHostedPictureType(struct soap*, const char*, ns3__VendorHostedPictureType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__VendorHostedPictureType(struct soap*, ns3__VendorHostedPictureType *const*, const char*, const char*);
SOAP_FMAC3 ns3__VendorHostedPictureType ** SOAP_FMAC4 soap_get_PointerTons3__VendorHostedPictureType(struct soap*, ns3__VendorHostedPictureType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__VATDetailsType_DEFINED
#define SOAP_TYPE_PointerTons3__VATDetailsType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__VATDetailsType(struct soap*, ns3__VATDetailsType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__VATDetailsType(struct soap*, const char *, int, ns3__VATDetailsType *const*, const char *);
SOAP_FMAC3 ns3__VATDetailsType ** SOAP_FMAC4 soap_in_PointerTons3__VATDetailsType(struct soap*, const char*, ns3__VATDetailsType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__VATDetailsType(struct soap*, ns3__VATDetailsType *const*, const char*, const char*);
SOAP_FMAC3 ns3__VATDetailsType ** SOAP_FMAC4 soap_get_PointerTons3__VATDetailsType(struct soap*, ns3__VATDetailsType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__UUIDType_DEFINED
#define SOAP_TYPE_PointerTons2__UUIDType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__UUIDType(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__UUIDType(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerTons2__UUIDType(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__UUIDType(struct soap*, std::string *const*, const char*, const char*);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerTons2__UUIDType(struct soap*, std::string **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToxsd__duration_DEFINED
#define SOAP_TYPE_PointerToxsd__duration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToxsd__duration(struct soap*, std::chrono::nanoseconds *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToxsd__duration(struct soap*, const char *, int, std::chrono::nanoseconds *const*, const char *);
SOAP_FMAC3 std::chrono::nanoseconds ** SOAP_FMAC4 soap_in_PointerToxsd__duration(struct soap*, const char*, std::chrono::nanoseconds **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToxsd__duration(struct soap*, std::chrono::nanoseconds *const*, const char*, const char*);
SOAP_FMAC3 std::chrono::nanoseconds ** SOAP_FMAC4 soap_get_PointerToxsd__duration(struct soap*, std::chrono::nanoseconds **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__StorefrontType_DEFINED
#define SOAP_TYPE_PointerTons3__StorefrontType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__StorefrontType(struct soap*, ns3__StorefrontType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__StorefrontType(struct soap*, const char *, int, ns3__StorefrontType *const*, const char *);
SOAP_FMAC3 ns3__StorefrontType ** SOAP_FMAC4 soap_in_PointerTons3__StorefrontType(struct soap*, const char*, ns3__StorefrontType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__StorefrontType(struct soap*, ns3__StorefrontType *const*, const char*, const char*);
SOAP_FMAC3 ns3__StorefrontType ** SOAP_FMAC4 soap_get_PointerTons3__StorefrontType(struct soap*, ns3__StorefrontType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__SiteCodeType_DEFINED
#define SOAP_TYPE_PointerTons3__SiteCodeType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__SiteCodeType(struct soap*, enum ns3__SiteCodeType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__SiteCodeType(struct soap*, const char *, int, enum ns3__SiteCodeType *const*, const char *);
SOAP_FMAC3 enum ns3__SiteCodeType ** SOAP_FMAC4 soap_in_PointerTons3__SiteCodeType(struct soap*, const char*, enum ns3__SiteCodeType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__SiteCodeType(struct soap*, enum ns3__SiteCodeType *const*, const char*, const char*);
SOAP_FMAC3 enum ns3__SiteCodeType ** SOAP_FMAC4 soap_get_PointerTons3__SiteCodeType(struct soap*, enum ns3__SiteCodeType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__ShippingTermsCodeType_DEFINED
#define SOAP_TYPE_PointerTons3__ShippingTermsCodeType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__ShippingTermsCodeType(struct soap*, enum ns3__ShippingTermsCodeType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__ShippingTermsCodeType(struct soap*, const char *, int, enum ns3__ShippingTermsCodeType *const*, const char *);
SOAP_FMAC3 enum ns3__ShippingTermsCodeType ** SOAP_FMAC4 soap_in_PointerTons3__ShippingTermsCodeType(struct soap*, const char*, enum ns3__ShippingTermsCodeType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__ShippingTermsCodeType(struct soap*, enum ns3__ShippingTermsCodeType *const*, const char*, const char*);
SOAP_FMAC3 enum ns3__ShippingTermsCodeType ** SOAP_FMAC4 soap_get_PointerTons3__ShippingTermsCodeType(struct soap*, enum ns3__ShippingTermsCodeType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__ShippingDetailsType_DEFINED
#define SOAP_TYPE_PointerTons3__ShippingDetailsType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__ShippingDetailsType(struct soap*, ns3__ShippingDetailsType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__ShippingDetailsType(struct soap*, const char *, int, ns3__ShippingDetailsType *const*, const char *);
SOAP_FMAC3 ns3__ShippingDetailsType ** SOAP_FMAC4 soap_in_PointerTons3__ShippingDetailsType(struct soap*, const char*, ns3__ShippingDetailsType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__ShippingDetailsType(struct soap*, ns3__ShippingDetailsType *const*, const char*, const char*);
SOAP_FMAC3 ns3__ShippingDetailsType ** SOAP_FMAC4 soap_get_PointerTons3__ShippingDetailsType(struct soap*, ns3__ShippingDetailsType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__ShippingOptionCodeType_DEFINED
#define SOAP_TYPE_PointerTons3__ShippingOptionCodeType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__ShippingOptionCodeType(struct soap*, enum ns3__ShippingOptionCodeType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__ShippingOptionCodeType(struct soap*, const char *, int, enum ns3__ShippingOptionCodeType *const*, const char *);
SOAP_FMAC3 enum ns3__ShippingOptionCodeType ** SOAP_FMAC4 soap_in_PointerTons3__ShippingOptionCodeType(struct soap*, const char*, enum ns3__ShippingOptionCodeType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__ShippingOptionCodeType(struct soap*, enum ns3__ShippingOptionCodeType *const*, const char*, const char*);
SOAP_FMAC3 enum ns3__ShippingOptionCodeType ** SOAP_FMAC4 soap_get_PointerTons3__ShippingOptionCodeType(struct soap*, enum ns3__ShippingOptionCodeType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__SellingStatusType_DEFINED
#define SOAP_TYPE_PointerTons3__SellingStatusType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__SellingStatusType(struct soap*, ns3__SellingStatusType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__SellingStatusType(struct soap*, const char *, int, ns3__SellingStatusType *const*, const char *);
SOAP_FMAC3 ns3__SellingStatusType ** SOAP_FMAC4 soap_in_PointerTons3__SellingStatusType(struct soap*, const char*, ns3__SellingStatusType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__SellingStatusType(struct soap*, ns3__SellingStatusType *const*, const char*, const char*);
SOAP_FMAC3 ns3__SellingStatusType ** SOAP_FMAC4 soap_get_PointerTons3__SellingStatusType(struct soap*, ns3__SellingStatusType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__SiteHostedPictureType_DEFINED
#define SOAP_TYPE_PointerTons3__SiteHostedPictureType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__SiteHostedPictureType(struct soap*, ns3__SiteHostedPictureType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__SiteHostedPictureType(struct soap*, const char *, int, ns3__SiteHostedPictureType *const*, const char *);
SOAP_FMAC3 ns3__SiteHostedPictureType ** SOAP_FMAC4 soap_in_PointerTons3__SiteHostedPictureType(struct soap*, const char*, ns3__SiteHostedPictureType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__SiteHostedPictureType(struct soap*, ns3__SiteHostedPictureType *const*, const char*, const char*);
SOAP_FMAC3 ns3__SiteHostedPictureType ** SOAP_FMAC4 soap_get_PointerTons3__SiteHostedPictureType(struct soap*, ns3__SiteHostedPictureType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__ReviseStatusType_DEFINED
#define SOAP_TYPE_PointerTons3__ReviseStatusType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__ReviseStatusType(struct soap*, ns3__ReviseStatusType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__ReviseStatusType(struct soap*, const char *, int, ns3__ReviseStatusType *const*, const char *);
SOAP_FMAC3 ns3__ReviseStatusType ** SOAP_FMAC4 soap_in_PointerTons3__ReviseStatusType(struct soap*, const char*, ns3__ReviseStatusType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__ReviseStatusType(struct soap*, ns3__ReviseStatusType *const*, const char*, const char*);
SOAP_FMAC3 ns3__ReviseStatusType ** SOAP_FMAC4 soap_get_PointerTons3__ReviseStatusType(struct soap*, ns3__ReviseStatusType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__CategoryType_DEFINED
#define SOAP_TYPE_PointerTons3__CategoryType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__CategoryType(struct soap*, ns3__CategoryType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__CategoryType(struct soap*, const char *, int, ns3__CategoryType *const*, const char *);
SOAP_FMAC3 ns3__CategoryType ** SOAP_FMAC4 soap_in_PointerTons3__CategoryType(struct soap*, const char*, ns3__CategoryType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__CategoryType(struct soap*, ns3__CategoryType *const*, const char*, const char*);
SOAP_FMAC3 ns3__CategoryType ** SOAP_FMAC4 soap_get_PointerTons3__CategoryType(struct soap*, ns3__CategoryType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__ListingDurationCodeType_DEFINED
#define SOAP_TYPE_PointerTons3__ListingDurationCodeType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__ListingDurationCodeType(struct soap*, enum ns3__ListingDurationCodeType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__ListingDurationCodeType(struct soap*, const char *, int, enum ns3__ListingDurationCodeType *const*, const char *);
SOAP_FMAC3 enum ns3__ListingDurationCodeType ** SOAP_FMAC4 soap_in_PointerTons3__ListingDurationCodeType(struct soap*, const char*, enum ns3__ListingDurationCodeType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__ListingDurationCodeType(struct soap*, enum ns3__ListingDurationCodeType *const*, const char*, const char*);
SOAP_FMAC3 enum ns3__ListingDurationCodeType ** SOAP_FMAC4 soap_get_PointerTons3__ListingDurationCodeType(struct soap*, enum ns3__ListingDurationCodeType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__ListingDesignerType_DEFINED
#define SOAP_TYPE_PointerTons3__ListingDesignerType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__ListingDesignerType(struct soap*, ns3__ListingDesignerType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__ListingDesignerType(struct soap*, const char *, int, ns3__ListingDesignerType *const*, const char *);
SOAP_FMAC3 ns3__ListingDesignerType ** SOAP_FMAC4 soap_in_PointerTons3__ListingDesignerType(struct soap*, const char*, ns3__ListingDesignerType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__ListingDesignerType(struct soap*, ns3__ListingDesignerType *const*, const char*, const char*);
SOAP_FMAC3 ns3__ListingDesignerType ** SOAP_FMAC4 soap_get_PointerTons3__ListingDesignerType(struct soap*, ns3__ListingDesignerType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__ListingDetailsType_DEFINED
#define SOAP_TYPE_PointerTons3__ListingDetailsType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__ListingDetailsType(struct soap*, ns3__ListingDetailsType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__ListingDetailsType(struct soap*, const char *, int, ns3__ListingDetailsType *const*, const char *);
SOAP_FMAC3 ns3__ListingDetailsType ** SOAP_FMAC4 soap_in_PointerTons3__ListingDetailsType(struct soap*, const char*, ns3__ListingDetailsType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__ListingDetailsType(struct soap*, ns3__ListingDetailsType *const*, const char*, const char*);
SOAP_FMAC3 ns3__ListingDetailsType ** SOAP_FMAC4 soap_get_PointerTons3__ListingDetailsType(struct soap*, ns3__ListingDetailsType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__HitCounterCodeType_DEFINED
#define SOAP_TYPE_PointerTons3__HitCounterCodeType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__HitCounterCodeType(struct soap*, enum ns3__HitCounterCodeType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__HitCounterCodeType(struct soap*, const char *, int, enum ns3__HitCounterCodeType *const*, const char *);
SOAP_FMAC3 enum ns3__HitCounterCodeType ** SOAP_FMAC4 soap_in_PointerTons3__HitCounterCodeType(struct soap*, const char*, enum ns3__HitCounterCodeType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__HitCounterCodeType(struct soap*, enum ns3__HitCounterCodeType *const*, const char*, const char*);
SOAP_FMAC3 enum ns3__HitCounterCodeType ** SOAP_FMAC4 soap_get_PointerTons3__HitCounterCodeType(struct soap*, enum ns3__HitCounterCodeType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__EscrowCodeType_DEFINED
#define SOAP_TYPE_PointerTons3__EscrowCodeType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__EscrowCodeType(struct soap*, enum ns3__EscrowCodeType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__EscrowCodeType(struct soap*, const char *, int, enum ns3__EscrowCodeType *const*, const char *);
SOAP_FMAC3 enum ns3__EscrowCodeType ** SOAP_FMAC4 soap_in_PointerTons3__EscrowCodeType(struct soap*, const char*, enum ns3__EscrowCodeType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__EscrowCodeType(struct soap*, enum ns3__EscrowCodeType *const*, const char*, const char*);
SOAP_FMAC3 enum ns3__EscrowCodeType ** SOAP_FMAC4 soap_get_PointerTons3__EscrowCodeType(struct soap*, enum ns3__EscrowCodeType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__CrossPromotionsType_DEFINED
#define SOAP_TYPE_PointerTons3__CrossPromotionsType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__CrossPromotionsType(struct soap*, ns3__CrossPromotionsType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__CrossPromotionsType(struct soap*, const char *, int, ns3__CrossPromotionsType *const*, const char *);
SOAP_FMAC3 ns3__CrossPromotionsType ** SOAP_FMAC4 soap_in_PointerTons3__CrossPromotionsType(struct soap*, const char*, ns3__CrossPromotionsType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__CrossPromotionsType(struct soap*, ns3__CrossPromotionsType *const*, const char*, const char*);
SOAP_FMAC3 ns3__CrossPromotionsType ** SOAP_FMAC4 soap_get_PointerTons3__CrossPromotionsType(struct soap*, ns3__CrossPromotionsType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__CountryCodeType_DEFINED
#define SOAP_TYPE_PointerTons3__CountryCodeType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__CountryCodeType(struct soap*, enum ns3__CountryCodeType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__CountryCodeType(struct soap*, const char *, int, enum ns3__CountryCodeType *const*, const char *);
SOAP_FMAC3 enum ns3__CountryCodeType ** SOAP_FMAC4 soap_in_PointerTons3__CountryCodeType(struct soap*, const char*, enum ns3__CountryCodeType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__CountryCodeType(struct soap*, enum ns3__CountryCodeType *const*, const char*, const char*);
SOAP_FMAC3 enum ns3__CountryCodeType ** SOAP_FMAC4 soap_get_PointerTons3__CountryCodeType(struct soap*, enum ns3__CountryCodeType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__CharityType_DEFINED
#define SOAP_TYPE_PointerTons3__CharityType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__CharityType(struct soap*, ns3__CharityType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__CharityType(struct soap*, const char *, int, ns3__CharityType *const*, const char *);
SOAP_FMAC3 ns3__CharityType ** SOAP_FMAC4 soap_in_PointerTons3__CharityType(struct soap*, const char*, ns3__CharityType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__CharityType(struct soap*, ns3__CharityType *const*, const char*, const char*);
SOAP_FMAC3 ns3__CharityType ** SOAP_FMAC4 soap_get_PointerTons3__CharityType(struct soap*, ns3__CharityType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__BuyerProtectionCodeType_DEFINED
#define SOAP_TYPE_PointerTons3__BuyerProtectionCodeType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__BuyerProtectionCodeType(struct soap*, enum ns3__BuyerProtectionCodeType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__BuyerProtectionCodeType(struct soap*, const char *, int, enum ns3__BuyerProtectionCodeType *const*, const char *);
SOAP_FMAC3 enum ns3__BuyerProtectionCodeType ** SOAP_FMAC4 soap_in_PointerTons3__BuyerProtectionCodeType(struct soap*, const char*, enum ns3__BuyerProtectionCodeType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__BuyerProtectionCodeType(struct soap*, enum ns3__BuyerProtectionCodeType *const*, const char*, const char*);
SOAP_FMAC3 enum ns3__BuyerProtectionCodeType ** SOAP_FMAC4 soap_get_PointerTons3__BuyerProtectionCodeType(struct soap*, enum ns3__BuyerProtectionCodeType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__ListOfAttributeSetType_DEFINED
#define SOAP_TYPE_PointerTons3__ListOfAttributeSetType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__ListOfAttributeSetType(struct soap*, ns3__ListOfAttributeSetType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__ListOfAttributeSetType(struct soap*, const char *, int, ns3__ListOfAttributeSetType *const*, const char *);
SOAP_FMAC3 ns3__ListOfAttributeSetType ** SOAP_FMAC4 soap_in_PointerTons3__ListOfAttributeSetType(struct soap*, const char*, ns3__ListOfAttributeSetType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__ListOfAttributeSetType(struct soap*, ns3__ListOfAttributeSetType *const*, const char*, const char*);
SOAP_FMAC3 ns3__ListOfAttributeSetType ** SOAP_FMAC4 soap_get_PointerTons3__ListOfAttributeSetType(struct soap*, ns3__ListOfAttributeSetType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTodateTime_DEFINED
#define SOAP_TYPE_PointerTodateTime_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTodateTime(struct soap*, time_t *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTodateTime(struct soap*, const char *, int, time_t *const*, const char *);
SOAP_FMAC3 time_t ** SOAP_FMAC4 soap_in_PointerTodateTime(struct soap*, const char*, time_t **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTodateTime(struct soap*, time_t *const*, const char*, const char*);
SOAP_FMAC3 time_t ** SOAP_FMAC4 soap_get_PointerTodateTime(struct soap*, time_t **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__ItemIDType_DEFINED
#define SOAP_TYPE_PointerTons3__ItemIDType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__ItemIDType(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__ItemIDType(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerTons3__ItemIDType(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__ItemIDType(struct soap*, std::string *const*, const char*, const char*);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerTons3__ItemIDType(struct soap*, std::string **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__UserType_DEFINED
#define SOAP_TYPE_PointerTons3__UserType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__UserType(struct soap*, ns3__UserType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__UserType(struct soap*, const char *, int, ns3__UserType *const*, const char *);
SOAP_FMAC3 ns3__UserType ** SOAP_FMAC4 soap_in_PointerTons3__UserType(struct soap*, const char*, ns3__UserType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__UserType(struct soap*, ns3__UserType *const*, const char*, const char*);
SOAP_FMAC3 ns3__UserType ** SOAP_FMAC4 soap_get_PointerTons3__UserType(struct soap*, ns3__UserType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__AttributeSetType_DEFINED
#define SOAP_TYPE_PointerTons3__AttributeSetType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__AttributeSetType(struct soap*, ns3__AttributeSetType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__AttributeSetType(struct soap*, const char *, int, ns3__AttributeSetType *const*, const char *);
SOAP_FMAC3 ns3__AttributeSetType ** SOAP_FMAC4 soap_in_PointerTons3__AttributeSetType(struct soap*, const char*, ns3__AttributeSetType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__AttributeSetType(struct soap*, ns3__AttributeSetType *const*, const char*, const char*);
SOAP_FMAC3 ns3__AttributeSetType ** SOAP_FMAC4 soap_get_PointerTons3__AttributeSetType(struct soap*, ns3__AttributeSetType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__AttributeType_DEFINED
#define SOAP_TYPE_PointerTons3__AttributeType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__AttributeType(struct soap*, ns3__AttributeType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__AttributeType(struct soap*, const char *, int, ns3__AttributeType *const*, const char *);
SOAP_FMAC3 ns3__AttributeType ** SOAP_FMAC4 soap_in_PointerTons3__AttributeType(struct soap*, const char*, ns3__AttributeType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__AttributeType(struct soap*, ns3__AttributeType *const*, const char*, const char*);
SOAP_FMAC3 ns3__AttributeType ** SOAP_FMAC4 soap_get_PointerTons3__AttributeType(struct soap*, ns3__AttributeType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__ValType_DEFINED
#define SOAP_TYPE_PointerTons3__ValType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__ValType(struct soap*, ns3__ValType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__ValType(struct soap*, const char *, int, ns3__ValType *const*, const char *);
SOAP_FMAC3 ns3__ValType ** SOAP_FMAC4 soap_in_PointerTons3__ValType(struct soap*, const char*, ns3__ValType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__ValType(struct soap*, ns3__ValType *const*, const char*, const char*);
SOAP_FMAC3 ns3__ValType ** SOAP_FMAC4 soap_get_PointerTons3__ValType(struct soap*, ns3__ValType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__GalleryTypeCodeType_DEFINED
#define SOAP_TYPE_PointerTons3__GalleryTypeCodeType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__GalleryTypeCodeType(struct soap*, enum ns3__GalleryTypeCodeType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__GalleryTypeCodeType(struct soap*, const char *, int, enum ns3__GalleryTypeCodeType *const*, const char *);
SOAP_FMAC3 enum ns3__GalleryTypeCodeType ** SOAP_FMAC4 soap_in_PointerTons3__GalleryTypeCodeType(struct soap*, const char*, enum ns3__GalleryTypeCodeType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__GalleryTypeCodeType(struct soap*, enum ns3__GalleryTypeCodeType *const*, const char*, const char*);
SOAP_FMAC3 enum ns3__GalleryTypeCodeType ** SOAP_FMAC4 soap_get_PointerTons3__GalleryTypeCodeType(struct soap*, enum ns3__GalleryTypeCodeType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__PhotoDisplayCodeType_DEFINED
#define SOAP_TYPE_PointerTons3__PhotoDisplayCodeType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__PhotoDisplayCodeType(struct soap*, enum ns3__PhotoDisplayCodeType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__PhotoDisplayCodeType(struct soap*, const char *, int, enum ns3__PhotoDisplayCodeType *const*, const char *);
SOAP_FMAC3 enum ns3__PhotoDisplayCodeType ** SOAP_FMAC4 soap_in_PointerTons3__PhotoDisplayCodeType(struct soap*, const char*, enum ns3__PhotoDisplayCodeType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__PhotoDisplayCodeType(struct soap*, enum ns3__PhotoDisplayCodeType *const*, const char*, const char*);
SOAP_FMAC3 enum ns3__PhotoDisplayCodeType ** SOAP_FMAC4 soap_get_PointerTons3__PhotoDisplayCodeType(struct soap*, enum ns3__PhotoDisplayCodeType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__SalesTaxType_DEFINED
#define SOAP_TYPE_PointerTons3__SalesTaxType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__SalesTaxType(struct soap*, ns3__SalesTaxType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__SalesTaxType(struct soap*, const char *, int, ns3__SalesTaxType *const*, const char *);
SOAP_FMAC3 ns3__SalesTaxType ** SOAP_FMAC4 soap_in_PointerTons3__SalesTaxType(struct soap*, const char*, ns3__SalesTaxType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__SalesTaxType(struct soap*, ns3__SalesTaxType *const*, const char*, const char*);
SOAP_FMAC3 ns3__SalesTaxType ** SOAP_FMAC4 soap_get_PointerTons3__SalesTaxType(struct soap*, ns3__SalesTaxType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__FlatShippingRateType_DEFINED
#define SOAP_TYPE_PointerTons3__FlatShippingRateType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__FlatShippingRateType(struct soap*, ns3__FlatShippingRateType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__FlatShippingRateType(struct soap*, const char *, int, ns3__FlatShippingRateType *const*, const char *);
SOAP_FMAC3 ns3__FlatShippingRateType ** SOAP_FMAC4 soap_in_PointerTons3__FlatShippingRateType(struct soap*, const char*, ns3__FlatShippingRateType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__FlatShippingRateType(struct soap*, ns3__FlatShippingRateType *const*, const char*, const char*);
SOAP_FMAC3 ns3__FlatShippingRateType ** SOAP_FMAC4 soap_get_PointerTons3__FlatShippingRateType(struct soap*, ns3__FlatShippingRateType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__CalculatedShippingRateType_DEFINED
#define SOAP_TYPE_PointerTons3__CalculatedShippingRateType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__CalculatedShippingRateType(struct soap*, ns3__CalculatedShippingRateType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__CalculatedShippingRateType(struct soap*, const char *, int, ns3__CalculatedShippingRateType *const*, const char *);
SOAP_FMAC3 ns3__CalculatedShippingRateType ** SOAP_FMAC4 soap_in_PointerTons3__CalculatedShippingRateType(struct soap*, const char*, ns3__CalculatedShippingRateType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__CalculatedShippingRateType(struct soap*, ns3__CalculatedShippingRateType *const*, const char*, const char*);
SOAP_FMAC3 ns3__CalculatedShippingRateType ** SOAP_FMAC4 soap_get_PointerTons3__CalculatedShippingRateType(struct soap*, ns3__CalculatedShippingRateType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTofloat_DEFINED
#define SOAP_TYPE_PointerTofloat_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTofloat(struct soap*, float *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTofloat(struct soap*, const char *, int, float *const*, const char *);
SOAP_FMAC3 float ** SOAP_FMAC4 soap_in_PointerTofloat(struct soap*, const char*, float **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTofloat(struct soap*, float *const*, const char*, const char*);
SOAP_FMAC3 float ** SOAP_FMAC4 soap_get_PointerTofloat(struct soap*, float **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__ShippingServiceCodeType_DEFINED
#define SOAP_TYPE_PointerTons3__ShippingServiceCodeType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__ShippingServiceCodeType(struct soap*, enum ns3__ShippingServiceCodeType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__ShippingServiceCodeType(struct soap*, const char *, int, enum ns3__ShippingServiceCodeType *const*, const char *);
SOAP_FMAC3 enum ns3__ShippingServiceCodeType ** SOAP_FMAC4 soap_in_PointerTons3__ShippingServiceCodeType(struct soap*, const char*, enum ns3__ShippingServiceCodeType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__ShippingServiceCodeType(struct soap*, enum ns3__ShippingServiceCodeType *const*, const char*, const char*);
SOAP_FMAC3 enum ns3__ShippingServiceCodeType ** SOAP_FMAC4 soap_get_PointerTons3__ShippingServiceCodeType(struct soap*, enum ns3__ShippingServiceCodeType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__MeasureType_DEFINED
#define SOAP_TYPE_PointerTons2__MeasureType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__MeasureType(struct soap*, ns2__MeasureType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__MeasureType(struct soap*, const char *, int, ns2__MeasureType *const*, const char *);
SOAP_FMAC3 ns2__MeasureType ** SOAP_FMAC4 soap_in_PointerTons2__MeasureType(struct soap*, const char*, ns2__MeasureType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__MeasureType(struct soap*, ns2__MeasureType *const*, const char*, const char*);
SOAP_FMAC3 ns2__MeasureType ** SOAP_FMAC4 soap_get_PointerTons2__MeasureType(struct soap*, ns2__MeasureType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__ShippingPackageCodeType_DEFINED
#define SOAP_TYPE_PointerTons3__ShippingPackageCodeType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__ShippingPackageCodeType(struct soap*, enum ns3__ShippingPackageCodeType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__ShippingPackageCodeType(struct soap*, const char *, int, enum ns3__ShippingPackageCodeType *const*, const char *);
SOAP_FMAC3 enum ns3__ShippingPackageCodeType ** SOAP_FMAC4 soap_in_PointerTons3__ShippingPackageCodeType(struct soap*, const char*, enum ns3__ShippingPackageCodeType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__ShippingPackageCodeType(struct soap*, enum ns3__ShippingPackageCodeType *const*, const char*, const char*);
SOAP_FMAC3 enum ns3__ShippingPackageCodeType ** SOAP_FMAC4 soap_get_PointerTons3__ShippingPackageCodeType(struct soap*, enum ns3__ShippingPackageCodeType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__ShippingCarrierDetailsType_DEFINED
#define SOAP_TYPE_PointerTons3__ShippingCarrierDetailsType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__ShippingCarrierDetailsType(struct soap*, ns3__ShippingCarrierDetailsType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__ShippingCarrierDetailsType(struct soap*, const char *, int, ns3__ShippingCarrierDetailsType *const*, const char *);
SOAP_FMAC3 ns3__ShippingCarrierDetailsType ** SOAP_FMAC4 soap_in_PointerTons3__ShippingCarrierDetailsType(struct soap*, const char*, ns3__ShippingCarrierDetailsType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__ShippingCarrierDetailsType(struct soap*, ns3__ShippingCarrierDetailsType *const*, const char*, const char*);
SOAP_FMAC3 ns3__ShippingCarrierDetailsType ** SOAP_FMAC4 soap_get_PointerTons3__ShippingCarrierDetailsType(struct soap*, ns3__ShippingCarrierDetailsType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTobool_DEFINED
#define SOAP_TYPE_PointerTobool_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTobool(struct soap*, bool *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTobool(struct soap*, const char *, int, bool *const*, const char *);
SOAP_FMAC3 bool ** SOAP_FMAC4 soap_in_PointerTobool(struct soap*, const char*, bool **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTobool(struct soap*, bool *const*, const char*, const char*);
SOAP_FMAC3 bool ** SOAP_FMAC4 soap_get_PointerTobool(struct soap*, bool **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__InsuranceOptionCodeType_DEFINED
#define SOAP_TYPE_PointerTons3__InsuranceOptionCodeType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__InsuranceOptionCodeType(struct soap*, enum ns3__InsuranceOptionCodeType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__InsuranceOptionCodeType(struct soap*, const char *, int, enum ns3__InsuranceOptionCodeType *const*, const char *);
SOAP_FMAC3 enum ns3__InsuranceOptionCodeType ** SOAP_FMAC4 soap_in_PointerTons3__InsuranceOptionCodeType(struct soap*, const char*, enum ns3__InsuranceOptionCodeType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__InsuranceOptionCodeType(struct soap*, enum ns3__InsuranceOptionCodeType *const*, const char*, const char*);
SOAP_FMAC3 enum ns3__InsuranceOptionCodeType ** SOAP_FMAC4 soap_get_PointerTons3__InsuranceOptionCodeType(struct soap*, enum ns3__InsuranceOptionCodeType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__FeeType_DEFINED
#define SOAP_TYPE_PointerTons3__FeeType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__FeeType(struct soap*, ns3__FeeType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__FeeType(struct soap*, const char *, int, ns3__FeeType *const*, const char *);
SOAP_FMAC3 ns3__FeeType ** SOAP_FMAC4 soap_in_PointerTons3__FeeType(struct soap*, const char*, ns3__FeeType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__FeeType(struct soap*, ns3__FeeType *const*, const char*, const char*);
SOAP_FMAC3 ns3__FeeType ** SOAP_FMAC4 soap_get_PointerTons3__FeeType(struct soap*, ns3__FeeType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToxsd__anyURI_DEFINED
#define SOAP_TYPE_PointerToxsd__anyURI_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToxsd__anyURI(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToxsd__anyURI(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerToxsd__anyURI(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToxsd__anyURI(struct soap*, std::string *const*, const char*, const char*);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerToxsd__anyURI(struct soap*, std::string **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__SchedulingInfoType_DEFINED
#define SOAP_TYPE_PointerTons3__SchedulingInfoType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__SchedulingInfoType(struct soap*, ns3__SchedulingInfoType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__SchedulingInfoType(struct soap*, const char *, int, ns3__SchedulingInfoType *const*, const char *);
SOAP_FMAC3 ns3__SchedulingInfoType ** SOAP_FMAC4 soap_in_PointerTons3__SchedulingInfoType(struct soap*, const char*, ns3__SchedulingInfoType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__SchedulingInfoType(struct soap*, ns3__SchedulingInfoType *const*, const char*, const char*);
SOAP_FMAC3 ns3__SchedulingInfoType ** SOAP_FMAC4 soap_get_PointerTons3__SchedulingInfoType(struct soap*, ns3__SchedulingInfoType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__CurrencyCodeType_DEFINED
#define SOAP_TYPE_PointerTons3__CurrencyCodeType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__CurrencyCodeType(struct soap*, enum ns3__CurrencyCodeType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__CurrencyCodeType(struct soap*, const char *, int, enum ns3__CurrencyCodeType *const*, const char *);
SOAP_FMAC3 enum ns3__CurrencyCodeType ** SOAP_FMAC4 soap_in_PointerTons3__CurrencyCodeType(struct soap*, const char*, enum ns3__CurrencyCodeType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__CurrencyCodeType(struct soap*, enum ns3__CurrencyCodeType *const*, const char*, const char*);
SOAP_FMAC3 enum ns3__CurrencyCodeType ** SOAP_FMAC4 soap_get_PointerTons3__CurrencyCodeType(struct soap*, enum ns3__CurrencyCodeType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__AddressType_DEFINED
#define SOAP_TYPE_PointerTons3__AddressType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__AddressType(struct soap*, ns3__AddressType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__AddressType(struct soap*, const char *, int, ns3__AddressType *const*, const char *);
SOAP_FMAC3 ns3__AddressType ** SOAP_FMAC4 soap_in_PointerTons3__AddressType(struct soap*, const char*, ns3__AddressType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__AddressType(struct soap*, ns3__AddressType *const*, const char*, const char*);
SOAP_FMAC3 ns3__AddressType ** SOAP_FMAC4 soap_get_PointerTons3__AddressType(struct soap*, ns3__AddressType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo__ns3__union_AccountSummaryType_DEFINED
#define SOAP_TYPE_PointerTo__ns3__union_AccountSummaryType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo__ns3__union_AccountSummaryType(struct soap*, __ns3__union_AccountSummaryType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo__ns3__union_AccountSummaryType(struct soap*, const char *, int, __ns3__union_AccountSummaryType *const*, const char *);
SOAP_FMAC3 __ns3__union_AccountSummaryType ** SOAP_FMAC4 soap_in_PointerTo__ns3__union_AccountSummaryType(struct soap*, const char*, __ns3__union_AccountSummaryType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo__ns3__union_AccountSummaryType(struct soap*, __ns3__union_AccountSummaryType *const*, const char*, const char*);
SOAP_FMAC3 __ns3__union_AccountSummaryType ** SOAP_FMAC4 soap_get_PointerTo__ns3__union_AccountSummaryType(struct soap*, __ns3__union_AccountSummaryType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTostd__vectorTemplateOfPointerTons3__AdditionalAccountType_DEFINED
#define SOAP_TYPE_PointerTostd__vectorTemplateOfPointerTons3__AdditionalAccountType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTostd__vectorTemplateOfPointerTons3__AdditionalAccountType(struct soap*, std::vector<ns3__AdditionalAccountType *> *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTostd__vectorTemplateOfPointerTons3__AdditionalAccountType(struct soap*, const char *, int, std::vector<ns3__AdditionalAccountType *> *const*, const char *);
SOAP_FMAC3 std::vector<ns3__AdditionalAccountType *> ** SOAP_FMAC4 soap_in_PointerTostd__vectorTemplateOfPointerTons3__AdditionalAccountType(struct soap*, const char*, std::vector<ns3__AdditionalAccountType *> **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTostd__vectorTemplateOfPointerTons3__AdditionalAccountType(struct soap*, std::vector<ns3__AdditionalAccountType *> *const*, const char*, const char*);
SOAP_FMAC3 std::vector<ns3__AdditionalAccountType *> ** SOAP_FMAC4 soap_get_PointerTostd__vectorTemplateOfPointerTons3__AdditionalAccountType(struct soap*, std::vector<ns3__AdditionalAccountType *> **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__AdditionalAccountType_DEFINED
#define SOAP_TYPE_PointerTons3__AdditionalAccountType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__AdditionalAccountType(struct soap*, ns3__AdditionalAccountType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__AdditionalAccountType(struct soap*, const char *, int, ns3__AdditionalAccountType *const*, const char *);
SOAP_FMAC3 ns3__AdditionalAccountType ** SOAP_FMAC4 soap_in_PointerTons3__AdditionalAccountType(struct soap*, const char*, ns3__AdditionalAccountType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__AdditionalAccountType(struct soap*, ns3__AdditionalAccountType *const*, const char*, const char*);
SOAP_FMAC3 ns3__AdditionalAccountType ** SOAP_FMAC4 soap_get_PointerTons3__AdditionalAccountType(struct soap*, ns3__AdditionalAccountType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__PromotedItemType_DEFINED
#define SOAP_TYPE_PointerTons3__PromotedItemType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__PromotedItemType(struct soap*, ns3__PromotedItemType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__PromotedItemType(struct soap*, const char *, int, ns3__PromotedItemType *const*, const char *);
SOAP_FMAC3 ns3__PromotedItemType ** SOAP_FMAC4 soap_in_PointerTons3__PromotedItemType(struct soap*, const char*, ns3__PromotedItemType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__PromotedItemType(struct soap*, ns3__PromotedItemType *const*, const char*, const char*);
SOAP_FMAC3 ns3__PromotedItemType ** SOAP_FMAC4 soap_get_PointerTons3__PromotedItemType(struct soap*, ns3__PromotedItemType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__ListingTypeCodeType_DEFINED
#define SOAP_TYPE_PointerTons3__ListingTypeCodeType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__ListingTypeCodeType(struct soap*, enum ns3__ListingTypeCodeType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__ListingTypeCodeType(struct soap*, const char *, int, enum ns3__ListingTypeCodeType *const*, const char *);
SOAP_FMAC3 enum ns3__ListingTypeCodeType ** SOAP_FMAC4 soap_in_PointerTons3__ListingTypeCodeType(struct soap*, const char*, enum ns3__ListingTypeCodeType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__ListingTypeCodeType(struct soap*, enum ns3__ListingTypeCodeType *const*, const char*, const char*);
SOAP_FMAC3 enum ns3__ListingTypeCodeType ** SOAP_FMAC4 soap_get_PointerTons3__ListingTypeCodeType(struct soap*, enum ns3__ListingTypeCodeType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__PromotionItemSelectionCodeType_DEFINED
#define SOAP_TYPE_PointerTons3__PromotionItemSelectionCodeType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__PromotionItemSelectionCodeType(struct soap*, enum ns3__PromotionItemSelectionCodeType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__PromotionItemSelectionCodeType(struct soap*, const char *, int, enum ns3__PromotionItemSelectionCodeType *const*, const char *);
SOAP_FMAC3 enum ns3__PromotionItemSelectionCodeType ** SOAP_FMAC4 soap_in_PointerTons3__PromotionItemSelectionCodeType(struct soap*, const char*, enum ns3__PromotionItemSelectionCodeType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__PromotionItemSelectionCodeType(struct soap*, enum ns3__PromotionItemSelectionCodeType *const*, const char*, const char*);
SOAP_FMAC3 enum ns3__PromotionItemSelectionCodeType ** SOAP_FMAC4 soap_get_PointerTons3__PromotionItemSelectionCodeType(struct soap*, enum ns3__PromotionItemSelectionCodeType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__PromotionItemPriceTypeCodeType_DEFINED
#define SOAP_TYPE_PointerTons3__PromotionItemPriceTypeCodeType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__PromotionItemPriceTypeCodeType(struct soap*, enum ns3__PromotionItemPriceTypeCodeType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__PromotionItemPriceTypeCodeType(struct soap*, const char *, int, enum ns3__PromotionItemPriceTypeCodeType *const*, const char *);
SOAP_FMAC3 enum ns3__PromotionItemPriceTypeCodeType ** SOAP_FMAC4 soap_in_PointerTons3__PromotionItemPriceTypeCodeType(struct soap*, const char*, enum ns3__PromotionItemPriceTypeCodeType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__PromotionItemPriceTypeCodeType(struct soap*, enum ns3__PromotionItemPriceTypeCodeType *const*, const char*, const char*);
SOAP_FMAC3 enum ns3__PromotionItemPriceTypeCodeType ** SOAP_FMAC4 soap_get_PointerTons3__PromotionItemPriceTypeCodeType(struct soap*, enum ns3__PromotionItemPriceTypeCodeType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__AmountType_DEFINED
#define SOAP_TYPE_PointerTons2__AmountType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__AmountType(struct soap*, ns2__AmountType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__AmountType(struct soap*, const char *, int, ns2__AmountType *const*, const char *);
SOAP_FMAC3 ns2__AmountType ** SOAP_FMAC4 soap_in_PointerTons2__AmountType(struct soap*, const char*, ns2__AmountType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__AmountType(struct soap*, ns2__AmountType *const*, const char*, const char*);
SOAP_FMAC3 ns2__AmountType ** SOAP_FMAC4 soap_get_PointerTons2__AmountType(struct soap*, ns2__AmountType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__ExternalRememberMeOptOutRequestType_DEFINED
#define SOAP_TYPE_PointerTons1__ExternalRememberMeOptOutRequestType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__ExternalRememberMeOptOutRequestType(struct soap*, ns1__ExternalRememberMeOptOutRequestType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__ExternalRememberMeOptOutRequestType(struct soap*, const char *, int, ns1__ExternalRememberMeOptOutRequestType *const*, const char *);
SOAP_FMAC3 ns1__ExternalRememberMeOptOutRequestType ** SOAP_FMAC4 soap_in_PointerTons1__ExternalRememberMeOptOutRequestType(struct soap*, const char*, ns1__ExternalRememberMeOptOutRequestType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__ExternalRememberMeOptOutRequestType(struct soap*, ns1__ExternalRememberMeOptOutRequestType *const*, const char*, const char*);
SOAP_FMAC3 ns1__ExternalRememberMeOptOutRequestType ** SOAP_FMAC4 soap_get_PointerTons1__ExternalRememberMeOptOutRequestType(struct soap*, ns1__ExternalRememberMeOptOutRequestType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__ReverseTransactionRequestType_DEFINED
#define SOAP_TYPE_PointerTons1__ReverseTransactionRequestType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__ReverseTransactionRequestType(struct soap*, ns1__ReverseTransactionRequestType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__ReverseTransactionRequestType(struct soap*, const char *, int, ns1__ReverseTransactionRequestType *const*, const char *);
SOAP_FMAC3 ns1__ReverseTransactionRequestType ** SOAP_FMAC4 soap_in_PointerTons1__ReverseTransactionRequestType(struct soap*, const char*, ns1__ReverseTransactionRequestType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__ReverseTransactionRequestType(struct soap*, ns1__ReverseTransactionRequestType *const*, const char*, const char*);
SOAP_FMAC3 ns1__ReverseTransactionRequestType ** SOAP_FMAC4 soap_get_PointerTons1__ReverseTransactionRequestType(struct soap*, ns1__ReverseTransactionRequestType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__GetPalDetailsRequestType_DEFINED
#define SOAP_TYPE_PointerTons1__GetPalDetailsRequestType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__GetPalDetailsRequestType(struct soap*, ns1__GetPalDetailsRequestType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__GetPalDetailsRequestType(struct soap*, const char *, int, ns1__GetPalDetailsRequestType *const*, const char *);
SOAP_FMAC3 ns1__GetPalDetailsRequestType ** SOAP_FMAC4 soap_in_PointerTons1__GetPalDetailsRequestType(struct soap*, const char*, ns1__GetPalDetailsRequestType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__GetPalDetailsRequestType(struct soap*, ns1__GetPalDetailsRequestType *const*, const char*, const char*);
SOAP_FMAC3 ns1__GetPalDetailsRequestType ** SOAP_FMAC4 soap_get_PointerTons1__GetPalDetailsRequestType(struct soap*, ns1__GetPalDetailsRequestType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__UpdateRecurringPaymentsProfileRequestType_DEFINED
#define SOAP_TYPE_PointerTons1__UpdateRecurringPaymentsProfileRequestType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__UpdateRecurringPaymentsProfileRequestType(struct soap*, ns1__UpdateRecurringPaymentsProfileRequestType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__UpdateRecurringPaymentsProfileRequestType(struct soap*, const char *, int, ns1__UpdateRecurringPaymentsProfileRequestType *const*, const char *);
SOAP_FMAC3 ns1__UpdateRecurringPaymentsProfileRequestType ** SOAP_FMAC4 soap_in_PointerTons1__UpdateRecurringPaymentsProfileRequestType(struct soap*, const char*, ns1__UpdateRecurringPaymentsProfileRequestType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__UpdateRecurringPaymentsProfileRequestType(struct soap*, ns1__UpdateRecurringPaymentsProfileRequestType *const*, const char*, const char*);
SOAP_FMAC3 ns1__UpdateRecurringPaymentsProfileRequestType ** SOAP_FMAC4 soap_get_PointerTons1__UpdateRecurringPaymentsProfileRequestType(struct soap*, ns1__UpdateRecurringPaymentsProfileRequestType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__BillOutstandingAmountRequestType_DEFINED
#define SOAP_TYPE_PointerTons1__BillOutstandingAmountRequestType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__BillOutstandingAmountRequestType(struct soap*, ns1__BillOutstandingAmountRequestType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__BillOutstandingAmountRequestType(struct soap*, const char *, int, ns1__BillOutstandingAmountRequestType *const*, const char *);
SOAP_FMAC3 ns1__BillOutstandingAmountRequestType ** SOAP_FMAC4 soap_in_PointerTons1__BillOutstandingAmountRequestType(struct soap*, const char*, ns1__BillOutstandingAmountRequestType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__BillOutstandingAmountRequestType(struct soap*, ns1__BillOutstandingAmountRequestType *const*, const char*, const char*);
SOAP_FMAC3 ns1__BillOutstandingAmountRequestType ** SOAP_FMAC4 soap_get_PointerTons1__BillOutstandingAmountRequestType(struct soap*, ns1__BillOutstandingAmountRequestType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__ManageRecurringPaymentsProfileStatusRequestType_DEFINED
#define SOAP_TYPE_PointerTons1__ManageRecurringPaymentsProfileStatusRequestType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__ManageRecurringPaymentsProfileStatusRequestType(struct soap*, ns1__ManageRecurringPaymentsProfileStatusRequestType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__ManageRecurringPaymentsProfileStatusRequestType(struct soap*, const char *, int, ns1__ManageRecurringPaymentsProfileStatusRequestType *const*, const char *);
SOAP_FMAC3 ns1__ManageRecurringPaymentsProfileStatusRequestType ** SOAP_FMAC4 soap_in_PointerTons1__ManageRecurringPaymentsProfileStatusRequestType(struct soap*, const char*, ns1__ManageRecurringPaymentsProfileStatusRequestType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__ManageRecurringPaymentsProfileStatusRequestType(struct soap*, ns1__ManageRecurringPaymentsProfileStatusRequestType *const*, const char*, const char*);
SOAP_FMAC3 ns1__ManageRecurringPaymentsProfileStatusRequestType ** SOAP_FMAC4 soap_get_PointerTons1__ManageRecurringPaymentsProfileStatusRequestType(struct soap*, ns1__ManageRecurringPaymentsProfileStatusRequestType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__GetRecurringPaymentsProfileDetailsRequestType_DEFINED
#define SOAP_TYPE_PointerTons1__GetRecurringPaymentsProfileDetailsRequestType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__GetRecurringPaymentsProfileDetailsRequestType(struct soap*, ns1__GetRecurringPaymentsProfileDetailsRequestType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__GetRecurringPaymentsProfileDetailsRequestType(struct soap*, const char *, int, ns1__GetRecurringPaymentsProfileDetailsRequestType *const*, const char *);
SOAP_FMAC3 ns1__GetRecurringPaymentsProfileDetailsRequestType ** SOAP_FMAC4 soap_in_PointerTons1__GetRecurringPaymentsProfileDetailsRequestType(struct soap*, const char*, ns1__GetRecurringPaymentsProfileDetailsRequestType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__GetRecurringPaymentsProfileDetailsRequestType(struct soap*, ns1__GetRecurringPaymentsProfileDetailsRequestType *const*, const char*, const char*);
SOAP_FMAC3 ns1__GetRecurringPaymentsProfileDetailsRequestType ** SOAP_FMAC4 soap_get_PointerTons1__GetRecurringPaymentsProfileDetailsRequestType(struct soap*, ns1__GetRecurringPaymentsProfileDetailsRequestType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__CreateRecurringPaymentsProfileRequestType_DEFINED
#define SOAP_TYPE_PointerTons1__CreateRecurringPaymentsProfileRequestType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__CreateRecurringPaymentsProfileRequestType(struct soap*, ns1__CreateRecurringPaymentsProfileRequestType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__CreateRecurringPaymentsProfileRequestType(struct soap*, const char *, int, ns1__CreateRecurringPaymentsProfileRequestType *const*, const char *);
SOAP_FMAC3 ns1__CreateRecurringPaymentsProfileRequestType ** SOAP_FMAC4 soap_in_PointerTons1__CreateRecurringPaymentsProfileRequestType(struct soap*, const char*, ns1__CreateRecurringPaymentsProfileRequestType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__CreateRecurringPaymentsProfileRequestType(struct soap*, ns1__CreateRecurringPaymentsProfileRequestType *const*, const char*, const char*);
SOAP_FMAC3 ns1__CreateRecurringPaymentsProfileRequestType ** SOAP_FMAC4 soap_get_PointerTons1__CreateRecurringPaymentsProfileRequestType(struct soap*, ns1__CreateRecurringPaymentsProfileRequestType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__DoNonReferencedCreditRequestType_DEFINED
#define SOAP_TYPE_PointerTons1__DoNonReferencedCreditRequestType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__DoNonReferencedCreditRequestType(struct soap*, ns1__DoNonReferencedCreditRequestType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__DoNonReferencedCreditRequestType(struct soap*, const char *, int, ns1__DoNonReferencedCreditRequestType *const*, const char *);
SOAP_FMAC3 ns1__DoNonReferencedCreditRequestType ** SOAP_FMAC4 soap_in_PointerTons1__DoNonReferencedCreditRequestType(struct soap*, const char*, ns1__DoNonReferencedCreditRequestType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__DoNonReferencedCreditRequestType(struct soap*, ns1__DoNonReferencedCreditRequestType *const*, const char*, const char*);
SOAP_FMAC3 ns1__DoNonReferencedCreditRequestType ** SOAP_FMAC4 soap_get_PointerTons1__DoNonReferencedCreditRequestType(struct soap*, ns1__DoNonReferencedCreditRequestType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__DoReferenceTransactionRequestType_DEFINED
#define SOAP_TYPE_PointerTons1__DoReferenceTransactionRequestType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__DoReferenceTransactionRequestType(struct soap*, ns1__DoReferenceTransactionRequestType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__DoReferenceTransactionRequestType(struct soap*, const char *, int, ns1__DoReferenceTransactionRequestType *const*, const char *);
SOAP_FMAC3 ns1__DoReferenceTransactionRequestType ** SOAP_FMAC4 soap_in_PointerTons1__DoReferenceTransactionRequestType(struct soap*, const char*, ns1__DoReferenceTransactionRequestType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__DoReferenceTransactionRequestType(struct soap*, ns1__DoReferenceTransactionRequestType *const*, const char*, const char*);
SOAP_FMAC3 ns1__DoReferenceTransactionRequestType ** SOAP_FMAC4 soap_get_PointerTons1__DoReferenceTransactionRequestType(struct soap*, ns1__DoReferenceTransactionRequestType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__CreateBillingAgreementRequestType_DEFINED
#define SOAP_TYPE_PointerTons1__CreateBillingAgreementRequestType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__CreateBillingAgreementRequestType(struct soap*, ns1__CreateBillingAgreementRequestType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__CreateBillingAgreementRequestType(struct soap*, const char *, int, ns1__CreateBillingAgreementRequestType *const*, const char *);
SOAP_FMAC3 ns1__CreateBillingAgreementRequestType ** SOAP_FMAC4 soap_in_PointerTons1__CreateBillingAgreementRequestType(struct soap*, const char*, ns1__CreateBillingAgreementRequestType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__CreateBillingAgreementRequestType(struct soap*, ns1__CreateBillingAgreementRequestType *const*, const char*, const char*);
SOAP_FMAC3 ns1__CreateBillingAgreementRequestType ** SOAP_FMAC4 soap_get_PointerTons1__CreateBillingAgreementRequestType(struct soap*, ns1__CreateBillingAgreementRequestType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__GetBillingAgreementCustomerDetailsRequestType_DEFINED
#define SOAP_TYPE_PointerTons1__GetBillingAgreementCustomerDetailsRequestType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__GetBillingAgreementCustomerDetailsRequestType(struct soap*, ns1__GetBillingAgreementCustomerDetailsRequestType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__GetBillingAgreementCustomerDetailsRequestType(struct soap*, const char *, int, ns1__GetBillingAgreementCustomerDetailsRequestType *const*, const char *);
SOAP_FMAC3 ns1__GetBillingAgreementCustomerDetailsRequestType ** SOAP_FMAC4 soap_in_PointerTons1__GetBillingAgreementCustomerDetailsRequestType(struct soap*, const char*, ns1__GetBillingAgreementCustomerDetailsRequestType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__GetBillingAgreementCustomerDetailsRequestType(struct soap*, ns1__GetBillingAgreementCustomerDetailsRequestType *const*, const char*, const char*);
SOAP_FMAC3 ns1__GetBillingAgreementCustomerDetailsRequestType ** SOAP_FMAC4 soap_get_PointerTons1__GetBillingAgreementCustomerDetailsRequestType(struct soap*, ns1__GetBillingAgreementCustomerDetailsRequestType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__SetCustomerBillingAgreementRequestType_DEFINED
#define SOAP_TYPE_PointerTons1__SetCustomerBillingAgreementRequestType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__SetCustomerBillingAgreementRequestType(struct soap*, ns1__SetCustomerBillingAgreementRequestType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__SetCustomerBillingAgreementRequestType(struct soap*, const char *, int, ns1__SetCustomerBillingAgreementRequestType *const*, const char *);
SOAP_FMAC3 ns1__SetCustomerBillingAgreementRequestType ** SOAP_FMAC4 soap_in_PointerTons1__SetCustomerBillingAgreementRequestType(struct soap*, const char*, ns1__SetCustomerBillingAgreementRequestType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__SetCustomerBillingAgreementRequestType(struct soap*, ns1__SetCustomerBillingAgreementRequestType *const*, const char*, const char*);
SOAP_FMAC3 ns1__SetCustomerBillingAgreementRequestType ** SOAP_FMAC4 soap_get_PointerTons1__SetCustomerBillingAgreementRequestType(struct soap*, ns1__SetCustomerBillingAgreementRequestType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__GetBalanceRequestType_DEFINED
#define SOAP_TYPE_PointerTons1__GetBalanceRequestType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__GetBalanceRequestType(struct soap*, ns1__GetBalanceRequestType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__GetBalanceRequestType(struct soap*, const char *, int, ns1__GetBalanceRequestType *const*, const char *);
SOAP_FMAC3 ns1__GetBalanceRequestType ** SOAP_FMAC4 soap_in_PointerTons1__GetBalanceRequestType(struct soap*, const char*, ns1__GetBalanceRequestType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__GetBalanceRequestType(struct soap*, ns1__GetBalanceRequestType *const*, const char*, const char*);
SOAP_FMAC3 ns1__GetBalanceRequestType ** SOAP_FMAC4 soap_get_PointerTons1__GetBalanceRequestType(struct soap*, ns1__GetBalanceRequestType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__DoMobileCheckoutPaymentRequestType_DEFINED
#define SOAP_TYPE_PointerTons1__DoMobileCheckoutPaymentRequestType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__DoMobileCheckoutPaymentRequestType(struct soap*, ns1__DoMobileCheckoutPaymentRequestType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__DoMobileCheckoutPaymentRequestType(struct soap*, const char *, int, ns1__DoMobileCheckoutPaymentRequestType *const*, const char *);
SOAP_FMAC3 ns1__DoMobileCheckoutPaymentRequestType ** SOAP_FMAC4 soap_in_PointerTons1__DoMobileCheckoutPaymentRequestType(struct soap*, const char*, ns1__DoMobileCheckoutPaymentRequestType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__DoMobileCheckoutPaymentRequestType(struct soap*, ns1__DoMobileCheckoutPaymentRequestType *const*, const char*, const char*);
SOAP_FMAC3 ns1__DoMobileCheckoutPaymentRequestType ** SOAP_FMAC4 soap_get_PointerTons1__DoMobileCheckoutPaymentRequestType(struct soap*, ns1__DoMobileCheckoutPaymentRequestType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__SetMobileCheckoutRequestType_DEFINED
#define SOAP_TYPE_PointerTons1__SetMobileCheckoutRequestType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__SetMobileCheckoutRequestType(struct soap*, ns1__SetMobileCheckoutRequestType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__SetMobileCheckoutRequestType(struct soap*, const char *, int, ns1__SetMobileCheckoutRequestType *const*, const char *);
SOAP_FMAC3 ns1__SetMobileCheckoutRequestType ** SOAP_FMAC4 soap_in_PointerTons1__SetMobileCheckoutRequestType(struct soap*, const char*, ns1__SetMobileCheckoutRequestType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__SetMobileCheckoutRequestType(struct soap*, ns1__SetMobileCheckoutRequestType *const*, const char*, const char*);
SOAP_FMAC3 ns1__SetMobileCheckoutRequestType ** SOAP_FMAC4 soap_get_PointerTons1__SetMobileCheckoutRequestType(struct soap*, ns1__SetMobileCheckoutRequestType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__GetMobileStatusRequestType_DEFINED
#define SOAP_TYPE_PointerTons1__GetMobileStatusRequestType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__GetMobileStatusRequestType(struct soap*, ns1__GetMobileStatusRequestType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__GetMobileStatusRequestType(struct soap*, const char *, int, ns1__GetMobileStatusRequestType *const*, const char *);
SOAP_FMAC3 ns1__GetMobileStatusRequestType ** SOAP_FMAC4 soap_in_PointerTons1__GetMobileStatusRequestType(struct soap*, const char*, ns1__GetMobileStatusRequestType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__GetMobileStatusRequestType(struct soap*, ns1__GetMobileStatusRequestType *const*, const char*, const char*);
SOAP_FMAC3 ns1__GetMobileStatusRequestType ** SOAP_FMAC4 soap_get_PointerTons1__GetMobileStatusRequestType(struct soap*, ns1__GetMobileStatusRequestType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__CreateMobilePaymentRequestType_DEFINED
#define SOAP_TYPE_PointerTons1__CreateMobilePaymentRequestType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__CreateMobilePaymentRequestType(struct soap*, ns1__CreateMobilePaymentRequestType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__CreateMobilePaymentRequestType(struct soap*, const char *, int, ns1__CreateMobilePaymentRequestType *const*, const char *);
SOAP_FMAC3 ns1__CreateMobilePaymentRequestType ** SOAP_FMAC4 soap_in_PointerTons1__CreateMobilePaymentRequestType(struct soap*, const char*, ns1__CreateMobilePaymentRequestType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__CreateMobilePaymentRequestType(struct soap*, ns1__CreateMobilePaymentRequestType *const*, const char*, const char*);
SOAP_FMAC3 ns1__CreateMobilePaymentRequestType ** SOAP_FMAC4 soap_get_PointerTons1__CreateMobilePaymentRequestType(struct soap*, ns1__CreateMobilePaymentRequestType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__DoUATPAuthorizationRequestType_DEFINED
#define SOAP_TYPE_PointerTons1__DoUATPAuthorizationRequestType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__DoUATPAuthorizationRequestType(struct soap*, ns1__DoUATPAuthorizationRequestType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__DoUATPAuthorizationRequestType(struct soap*, const char *, int, ns1__DoUATPAuthorizationRequestType *const*, const char *);
SOAP_FMAC3 ns1__DoUATPAuthorizationRequestType ** SOAP_FMAC4 soap_in_PointerTons1__DoUATPAuthorizationRequestType(struct soap*, const char*, ns1__DoUATPAuthorizationRequestType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__DoUATPAuthorizationRequestType(struct soap*, ns1__DoUATPAuthorizationRequestType *const*, const char*, const char*);
SOAP_FMAC3 ns1__DoUATPAuthorizationRequestType ** SOAP_FMAC4 soap_get_PointerTons1__DoUATPAuthorizationRequestType(struct soap*, ns1__DoUATPAuthorizationRequestType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__UpdateAuthorizationRequestType_DEFINED
#define SOAP_TYPE_PointerTons1__UpdateAuthorizationRequestType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__UpdateAuthorizationRequestType(struct soap*, ns1__UpdateAuthorizationRequestType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__UpdateAuthorizationRequestType(struct soap*, const char *, int, ns1__UpdateAuthorizationRequestType *const*, const char *);
SOAP_FMAC3 ns1__UpdateAuthorizationRequestType ** SOAP_FMAC4 soap_in_PointerTons1__UpdateAuthorizationRequestType(struct soap*, const char*, ns1__UpdateAuthorizationRequestType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__UpdateAuthorizationRequestType(struct soap*, ns1__UpdateAuthorizationRequestType *const*, const char*, const char*);
SOAP_FMAC3 ns1__UpdateAuthorizationRequestType ** SOAP_FMAC4 soap_get_PointerTons1__UpdateAuthorizationRequestType(struct soap*, ns1__UpdateAuthorizationRequestType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__DoAuthorizationRequestType_DEFINED
#define SOAP_TYPE_PointerTons1__DoAuthorizationRequestType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__DoAuthorizationRequestType(struct soap*, ns1__DoAuthorizationRequestType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__DoAuthorizationRequestType(struct soap*, const char *, int, ns1__DoAuthorizationRequestType *const*, const char *);
SOAP_FMAC3 ns1__DoAuthorizationRequestType ** SOAP_FMAC4 soap_in_PointerTons1__DoAuthorizationRequestType(struct soap*, const char*, ns1__DoAuthorizationRequestType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__DoAuthorizationRequestType(struct soap*, ns1__DoAuthorizationRequestType *const*, const char*, const char*);
SOAP_FMAC3 ns1__DoAuthorizationRequestType ** SOAP_FMAC4 soap_get_PointerTons1__DoAuthorizationRequestType(struct soap*, ns1__DoAuthorizationRequestType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__DoVoidRequestType_DEFINED
#define SOAP_TYPE_PointerTons1__DoVoidRequestType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__DoVoidRequestType(struct soap*, ns1__DoVoidRequestType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__DoVoidRequestType(struct soap*, const char *, int, ns1__DoVoidRequestType *const*, const char *);
SOAP_FMAC3 ns1__DoVoidRequestType ** SOAP_FMAC4 soap_in_PointerTons1__DoVoidRequestType(struct soap*, const char*, ns1__DoVoidRequestType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__DoVoidRequestType(struct soap*, ns1__DoVoidRequestType *const*, const char*, const char*);
SOAP_FMAC3 ns1__DoVoidRequestType ** SOAP_FMAC4 soap_get_PointerTons1__DoVoidRequestType(struct soap*, ns1__DoVoidRequestType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__DoReauthorizationRequestType_DEFINED
#define SOAP_TYPE_PointerTons1__DoReauthorizationRequestType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__DoReauthorizationRequestType(struct soap*, ns1__DoReauthorizationRequestType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__DoReauthorizationRequestType(struct soap*, const char *, int, ns1__DoReauthorizationRequestType *const*, const char *);
SOAP_FMAC3 ns1__DoReauthorizationRequestType ** SOAP_FMAC4 soap_in_PointerTons1__DoReauthorizationRequestType(struct soap*, const char*, ns1__DoReauthorizationRequestType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__DoReauthorizationRequestType(struct soap*, ns1__DoReauthorizationRequestType *const*, const char*, const char*);
SOAP_FMAC3 ns1__DoReauthorizationRequestType ** SOAP_FMAC4 soap_get_PointerTons1__DoReauthorizationRequestType(struct soap*, ns1__DoReauthorizationRequestType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__DoCaptureRequestType_DEFINED
#define SOAP_TYPE_PointerTons1__DoCaptureRequestType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__DoCaptureRequestType(struct soap*, ns1__DoCaptureRequestType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__DoCaptureRequestType(struct soap*, const char *, int, ns1__DoCaptureRequestType *const*, const char *);
SOAP_FMAC3 ns1__DoCaptureRequestType ** SOAP_FMAC4 soap_in_PointerTons1__DoCaptureRequestType(struct soap*, const char*, ns1__DoCaptureRequestType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__DoCaptureRequestType(struct soap*, ns1__DoCaptureRequestType *const*, const char*, const char*);
SOAP_FMAC3 ns1__DoCaptureRequestType ** SOAP_FMAC4 soap_get_PointerTons1__DoCaptureRequestType(struct soap*, ns1__DoCaptureRequestType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__DoCancelRequestType_DEFINED
#define SOAP_TYPE_PointerTons1__DoCancelRequestType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__DoCancelRequestType(struct soap*, ns1__DoCancelRequestType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__DoCancelRequestType(struct soap*, const char *, int, ns1__DoCancelRequestType *const*, const char *);
SOAP_FMAC3 ns1__DoCancelRequestType ** SOAP_FMAC4 soap_in_PointerTons1__DoCancelRequestType(struct soap*, const char*, ns1__DoCancelRequestType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__DoCancelRequestType(struct soap*, ns1__DoCancelRequestType *const*, const char*, const char*);
SOAP_FMAC3 ns1__DoCancelRequestType ** SOAP_FMAC4 soap_get_PointerTons1__DoCancelRequestType(struct soap*, ns1__DoCancelRequestType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__DoDirectPaymentRequestType_DEFINED
#define SOAP_TYPE_PointerTons1__DoDirectPaymentRequestType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__DoDirectPaymentRequestType(struct soap*, ns1__DoDirectPaymentRequestType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__DoDirectPaymentRequestType(struct soap*, const char *, int, ns1__DoDirectPaymentRequestType *const*, const char *);
SOAP_FMAC3 ns1__DoDirectPaymentRequestType ** SOAP_FMAC4 soap_in_PointerTons1__DoDirectPaymentRequestType(struct soap*, const char*, ns1__DoDirectPaymentRequestType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__DoDirectPaymentRequestType(struct soap*, ns1__DoDirectPaymentRequestType *const*, const char*, const char*);
SOAP_FMAC3 ns1__DoDirectPaymentRequestType ** SOAP_FMAC4 soap_get_PointerTons1__DoDirectPaymentRequestType(struct soap*, ns1__DoDirectPaymentRequestType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__ManagePendingTransactionStatusRequestType_DEFINED
#define SOAP_TYPE_PointerTons1__ManagePendingTransactionStatusRequestType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__ManagePendingTransactionStatusRequestType(struct soap*, ns1__ManagePendingTransactionStatusRequestType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__ManagePendingTransactionStatusRequestType(struct soap*, const char *, int, ns1__ManagePendingTransactionStatusRequestType *const*, const char *);
SOAP_FMAC3 ns1__ManagePendingTransactionStatusRequestType ** SOAP_FMAC4 soap_in_PointerTons1__ManagePendingTransactionStatusRequestType(struct soap*, const char*, ns1__ManagePendingTransactionStatusRequestType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__ManagePendingTransactionStatusRequestType(struct soap*, ns1__ManagePendingTransactionStatusRequestType *const*, const char*, const char*);
SOAP_FMAC3 ns1__ManagePendingTransactionStatusRequestType ** SOAP_FMAC4 soap_get_PointerTons1__ManagePendingTransactionStatusRequestType(struct soap*, ns1__ManagePendingTransactionStatusRequestType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__DoUATPExpressCheckoutPaymentRequestType_DEFINED
#define SOAP_TYPE_PointerTons1__DoUATPExpressCheckoutPaymentRequestType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__DoUATPExpressCheckoutPaymentRequestType(struct soap*, ns1__DoUATPExpressCheckoutPaymentRequestType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__DoUATPExpressCheckoutPaymentRequestType(struct soap*, const char *, int, ns1__DoUATPExpressCheckoutPaymentRequestType *const*, const char *);
SOAP_FMAC3 ns1__DoUATPExpressCheckoutPaymentRequestType ** SOAP_FMAC4 soap_in_PointerTons1__DoUATPExpressCheckoutPaymentRequestType(struct soap*, const char*, ns1__DoUATPExpressCheckoutPaymentRequestType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__DoUATPExpressCheckoutPaymentRequestType(struct soap*, ns1__DoUATPExpressCheckoutPaymentRequestType *const*, const char*, const char*);
SOAP_FMAC3 ns1__DoUATPExpressCheckoutPaymentRequestType ** SOAP_FMAC4 soap_get_PointerTons1__DoUATPExpressCheckoutPaymentRequestType(struct soap*, ns1__DoUATPExpressCheckoutPaymentRequestType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__DoExpressCheckoutPaymentRequestType_DEFINED
#define SOAP_TYPE_PointerTons1__DoExpressCheckoutPaymentRequestType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__DoExpressCheckoutPaymentRequestType(struct soap*, ns1__DoExpressCheckoutPaymentRequestType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__DoExpressCheckoutPaymentRequestType(struct soap*, const char *, int, ns1__DoExpressCheckoutPaymentRequestType *const*, const char *);
SOAP_FMAC3 ns1__DoExpressCheckoutPaymentRequestType ** SOAP_FMAC4 soap_in_PointerTons1__DoExpressCheckoutPaymentRequestType(struct soap*, const char*, ns1__DoExpressCheckoutPaymentRequestType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__DoExpressCheckoutPaymentRequestType(struct soap*, ns1__DoExpressCheckoutPaymentRequestType *const*, const char*, const char*);
SOAP_FMAC3 ns1__DoExpressCheckoutPaymentRequestType ** SOAP_FMAC4 soap_get_PointerTons1__DoExpressCheckoutPaymentRequestType(struct soap*, ns1__DoExpressCheckoutPaymentRequestType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__GetExpressCheckoutDetailsRequestType_DEFINED
#define SOAP_TYPE_PointerTons1__GetExpressCheckoutDetailsRequestType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__GetExpressCheckoutDetailsRequestType(struct soap*, ns1__GetExpressCheckoutDetailsRequestType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__GetExpressCheckoutDetailsRequestType(struct soap*, const char *, int, ns1__GetExpressCheckoutDetailsRequestType *const*, const char *);
SOAP_FMAC3 ns1__GetExpressCheckoutDetailsRequestType ** SOAP_FMAC4 soap_in_PointerTons1__GetExpressCheckoutDetailsRequestType(struct soap*, const char*, ns1__GetExpressCheckoutDetailsRequestType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__GetExpressCheckoutDetailsRequestType(struct soap*, ns1__GetExpressCheckoutDetailsRequestType *const*, const char*, const char*);
SOAP_FMAC3 ns1__GetExpressCheckoutDetailsRequestType ** SOAP_FMAC4 soap_get_PointerTons1__GetExpressCheckoutDetailsRequestType(struct soap*, ns1__GetExpressCheckoutDetailsRequestType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__ExecuteCheckoutOperationsRequestType_DEFINED
#define SOAP_TYPE_PointerTons1__ExecuteCheckoutOperationsRequestType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__ExecuteCheckoutOperationsRequestType(struct soap*, ns1__ExecuteCheckoutOperationsRequestType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__ExecuteCheckoutOperationsRequestType(struct soap*, const char *, int, ns1__ExecuteCheckoutOperationsRequestType *const*, const char *);
SOAP_FMAC3 ns1__ExecuteCheckoutOperationsRequestType ** SOAP_FMAC4 soap_in_PointerTons1__ExecuteCheckoutOperationsRequestType(struct soap*, const char*, ns1__ExecuteCheckoutOperationsRequestType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__ExecuteCheckoutOperationsRequestType(struct soap*, ns1__ExecuteCheckoutOperationsRequestType *const*, const char*, const char*);
SOAP_FMAC3 ns1__ExecuteCheckoutOperationsRequestType ** SOAP_FMAC4 soap_get_PointerTons1__ExecuteCheckoutOperationsRequestType(struct soap*, ns1__ExecuteCheckoutOperationsRequestType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__SetExpressCheckoutRequestType_DEFINED
#define SOAP_TYPE_PointerTons1__SetExpressCheckoutRequestType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__SetExpressCheckoutRequestType(struct soap*, ns1__SetExpressCheckoutRequestType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__SetExpressCheckoutRequestType(struct soap*, const char *, int, ns1__SetExpressCheckoutRequestType *const*, const char *);
SOAP_FMAC3 ns1__SetExpressCheckoutRequestType ** SOAP_FMAC4 soap_in_PointerTons1__SetExpressCheckoutRequestType(struct soap*, const char*, ns1__SetExpressCheckoutRequestType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__SetExpressCheckoutRequestType(struct soap*, ns1__SetExpressCheckoutRequestType *const*, const char*, const char*);
SOAP_FMAC3 ns1__SetExpressCheckoutRequestType ** SOAP_FMAC4 soap_get_PointerTons1__SetExpressCheckoutRequestType(struct soap*, ns1__SetExpressCheckoutRequestType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__GetIncentiveEvaluationRequestType_DEFINED
#define SOAP_TYPE_PointerTons1__GetIncentiveEvaluationRequestType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__GetIncentiveEvaluationRequestType(struct soap*, ns1__GetIncentiveEvaluationRequestType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__GetIncentiveEvaluationRequestType(struct soap*, const char *, int, ns1__GetIncentiveEvaluationRequestType *const*, const char *);
SOAP_FMAC3 ns1__GetIncentiveEvaluationRequestType ** SOAP_FMAC4 soap_in_PointerTons1__GetIncentiveEvaluationRequestType(struct soap*, const char*, ns1__GetIncentiveEvaluationRequestType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__GetIncentiveEvaluationRequestType(struct soap*, ns1__GetIncentiveEvaluationRequestType *const*, const char*, const char*);
SOAP_FMAC3 ns1__GetIncentiveEvaluationRequestType ** SOAP_FMAC4 soap_get_PointerTons1__GetIncentiveEvaluationRequestType(struct soap*, ns1__GetIncentiveEvaluationRequestType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__GetAccessPermissionDetailsRequestType_DEFINED
#define SOAP_TYPE_PointerTons1__GetAccessPermissionDetailsRequestType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__GetAccessPermissionDetailsRequestType(struct soap*, ns1__GetAccessPermissionDetailsRequestType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__GetAccessPermissionDetailsRequestType(struct soap*, const char *, int, ns1__GetAccessPermissionDetailsRequestType *const*, const char *);
SOAP_FMAC3 ns1__GetAccessPermissionDetailsRequestType ** SOAP_FMAC4 soap_in_PointerTons1__GetAccessPermissionDetailsRequestType(struct soap*, const char*, ns1__GetAccessPermissionDetailsRequestType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__GetAccessPermissionDetailsRequestType(struct soap*, ns1__GetAccessPermissionDetailsRequestType *const*, const char*, const char*);
SOAP_FMAC3 ns1__GetAccessPermissionDetailsRequestType ** SOAP_FMAC4 soap_get_PointerTons1__GetAccessPermissionDetailsRequestType(struct soap*, ns1__GetAccessPermissionDetailsRequestType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__UpdateAccessPermissionsRequestType_DEFINED
#define SOAP_TYPE_PointerTons1__UpdateAccessPermissionsRequestType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__UpdateAccessPermissionsRequestType(struct soap*, ns1__UpdateAccessPermissionsRequestType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__UpdateAccessPermissionsRequestType(struct soap*, const char *, int, ns1__UpdateAccessPermissionsRequestType *const*, const char *);
SOAP_FMAC3 ns1__UpdateAccessPermissionsRequestType ** SOAP_FMAC4 soap_in_PointerTons1__UpdateAccessPermissionsRequestType(struct soap*, const char*, ns1__UpdateAccessPermissionsRequestType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__UpdateAccessPermissionsRequestType(struct soap*, ns1__UpdateAccessPermissionsRequestType *const*, const char*, const char*);
SOAP_FMAC3 ns1__UpdateAccessPermissionsRequestType ** SOAP_FMAC4 soap_get_PointerTons1__UpdateAccessPermissionsRequestType(struct soap*, ns1__UpdateAccessPermissionsRequestType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__SetAccessPermissionsRequestType_DEFINED
#define SOAP_TYPE_PointerTons1__SetAccessPermissionsRequestType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__SetAccessPermissionsRequestType(struct soap*, ns1__SetAccessPermissionsRequestType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__SetAccessPermissionsRequestType(struct soap*, const char *, int, ns1__SetAccessPermissionsRequestType *const*, const char *);
SOAP_FMAC3 ns1__SetAccessPermissionsRequestType ** SOAP_FMAC4 soap_in_PointerTons1__SetAccessPermissionsRequestType(struct soap*, const char*, ns1__SetAccessPermissionsRequestType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__SetAccessPermissionsRequestType(struct soap*, ns1__SetAccessPermissionsRequestType *const*, const char*, const char*);
SOAP_FMAC3 ns1__SetAccessPermissionsRequestType ** SOAP_FMAC4 soap_get_PointerTons1__SetAccessPermissionsRequestType(struct soap*, ns1__SetAccessPermissionsRequestType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__GetAuthDetailsRequestType_DEFINED
#define SOAP_TYPE_PointerTons1__GetAuthDetailsRequestType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__GetAuthDetailsRequestType(struct soap*, ns1__GetAuthDetailsRequestType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__GetAuthDetailsRequestType(struct soap*, const char *, int, ns1__GetAuthDetailsRequestType *const*, const char *);
SOAP_FMAC3 ns1__GetAuthDetailsRequestType ** SOAP_FMAC4 soap_in_PointerTons1__GetAuthDetailsRequestType(struct soap*, const char*, ns1__GetAuthDetailsRequestType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__GetAuthDetailsRequestType(struct soap*, ns1__GetAuthDetailsRequestType *const*, const char*, const char*);
SOAP_FMAC3 ns1__GetAuthDetailsRequestType ** SOAP_FMAC4 soap_get_PointerTons1__GetAuthDetailsRequestType(struct soap*, ns1__GetAuthDetailsRequestType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__SetAuthFlowParamRequestType_DEFINED
#define SOAP_TYPE_PointerTons1__SetAuthFlowParamRequestType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__SetAuthFlowParamRequestType(struct soap*, ns1__SetAuthFlowParamRequestType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__SetAuthFlowParamRequestType(struct soap*, const char *, int, ns1__SetAuthFlowParamRequestType *const*, const char *);
SOAP_FMAC3 ns1__SetAuthFlowParamRequestType ** SOAP_FMAC4 soap_in_PointerTons1__SetAuthFlowParamRequestType(struct soap*, const char*, ns1__SetAuthFlowParamRequestType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__SetAuthFlowParamRequestType(struct soap*, ns1__SetAuthFlowParamRequestType *const*, const char*, const char*);
SOAP_FMAC3 ns1__SetAuthFlowParamRequestType ** SOAP_FMAC4 soap_get_PointerTons1__SetAuthFlowParamRequestType(struct soap*, ns1__SetAuthFlowParamRequestType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__GetBoardingDetailsRequestType_DEFINED
#define SOAP_TYPE_PointerTons1__GetBoardingDetailsRequestType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__GetBoardingDetailsRequestType(struct soap*, ns1__GetBoardingDetailsRequestType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__GetBoardingDetailsRequestType(struct soap*, const char *, int, ns1__GetBoardingDetailsRequestType *const*, const char *);
SOAP_FMAC3 ns1__GetBoardingDetailsRequestType ** SOAP_FMAC4 soap_in_PointerTons1__GetBoardingDetailsRequestType(struct soap*, const char*, ns1__GetBoardingDetailsRequestType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__GetBoardingDetailsRequestType(struct soap*, ns1__GetBoardingDetailsRequestType *const*, const char*, const char*);
SOAP_FMAC3 ns1__GetBoardingDetailsRequestType ** SOAP_FMAC4 soap_get_PointerTons1__GetBoardingDetailsRequestType(struct soap*, ns1__GetBoardingDetailsRequestType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__EnterBoardingRequestType_DEFINED
#define SOAP_TYPE_PointerTons1__EnterBoardingRequestType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__EnterBoardingRequestType(struct soap*, ns1__EnterBoardingRequestType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__EnterBoardingRequestType(struct soap*, const char *, int, ns1__EnterBoardingRequestType *const*, const char *);
SOAP_FMAC3 ns1__EnterBoardingRequestType ** SOAP_FMAC4 soap_in_PointerTons1__EnterBoardingRequestType(struct soap*, const char*, ns1__EnterBoardingRequestType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__EnterBoardingRequestType(struct soap*, ns1__EnterBoardingRequestType *const*, const char*, const char*);
SOAP_FMAC3 ns1__EnterBoardingRequestType ** SOAP_FMAC4 soap_get_PointerTons1__EnterBoardingRequestType(struct soap*, ns1__EnterBoardingRequestType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__AddressVerifyRequestType_DEFINED
#define SOAP_TYPE_PointerTons1__AddressVerifyRequestType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__AddressVerifyRequestType(struct soap*, ns1__AddressVerifyRequestType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__AddressVerifyRequestType(struct soap*, const char *, int, ns1__AddressVerifyRequestType *const*, const char *);
SOAP_FMAC3 ns1__AddressVerifyRequestType ** SOAP_FMAC4 soap_in_PointerTons1__AddressVerifyRequestType(struct soap*, const char*, ns1__AddressVerifyRequestType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__AddressVerifyRequestType(struct soap*, ns1__AddressVerifyRequestType *const*, const char*, const char*);
SOAP_FMAC3 ns1__AddressVerifyRequestType ** SOAP_FMAC4 soap_get_PointerTons1__AddressVerifyRequestType(struct soap*, ns1__AddressVerifyRequestType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__BAUpdateRequestType_DEFINED
#define SOAP_TYPE_PointerTons1__BAUpdateRequestType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__BAUpdateRequestType(struct soap*, ns1__BAUpdateRequestType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__BAUpdateRequestType(struct soap*, const char *, int, ns1__BAUpdateRequestType *const*, const char *);
SOAP_FMAC3 ns1__BAUpdateRequestType ** SOAP_FMAC4 soap_in_PointerTons1__BAUpdateRequestType(struct soap*, const char*, ns1__BAUpdateRequestType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__BAUpdateRequestType(struct soap*, ns1__BAUpdateRequestType *const*, const char*, const char*);
SOAP_FMAC3 ns1__BAUpdateRequestType ** SOAP_FMAC4 soap_get_PointerTons1__BAUpdateRequestType(struct soap*, ns1__BAUpdateRequestType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__MassPayRequestType_DEFINED
#define SOAP_TYPE_PointerTons1__MassPayRequestType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__MassPayRequestType(struct soap*, ns1__MassPayRequestType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__MassPayRequestType(struct soap*, const char *, int, ns1__MassPayRequestType *const*, const char *);
SOAP_FMAC3 ns1__MassPayRequestType ** SOAP_FMAC4 soap_in_PointerTons1__MassPayRequestType(struct soap*, const char*, ns1__MassPayRequestType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__MassPayRequestType(struct soap*, ns1__MassPayRequestType *const*, const char*, const char*);
SOAP_FMAC3 ns1__MassPayRequestType ** SOAP_FMAC4 soap_get_PointerTons1__MassPayRequestType(struct soap*, ns1__MassPayRequestType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__TransactionSearchRequestType_DEFINED
#define SOAP_TYPE_PointerTons1__TransactionSearchRequestType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__TransactionSearchRequestType(struct soap*, ns1__TransactionSearchRequestType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__TransactionSearchRequestType(struct soap*, const char *, int, ns1__TransactionSearchRequestType *const*, const char *);
SOAP_FMAC3 ns1__TransactionSearchRequestType ** SOAP_FMAC4 soap_in_PointerTons1__TransactionSearchRequestType(struct soap*, const char*, ns1__TransactionSearchRequestType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__TransactionSearchRequestType(struct soap*, ns1__TransactionSearchRequestType *const*, const char*, const char*);
SOAP_FMAC3 ns1__TransactionSearchRequestType ** SOAP_FMAC4 soap_get_PointerTons1__TransactionSearchRequestType(struct soap*, ns1__TransactionSearchRequestType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__BillUserRequestType_DEFINED
#define SOAP_TYPE_PointerTons1__BillUserRequestType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__BillUserRequestType(struct soap*, ns1__BillUserRequestType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__BillUserRequestType(struct soap*, const char *, int, ns1__BillUserRequestType *const*, const char *);
SOAP_FMAC3 ns1__BillUserRequestType ** SOAP_FMAC4 soap_in_PointerTons1__BillUserRequestType(struct soap*, const char*, ns1__BillUserRequestType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__BillUserRequestType(struct soap*, ns1__BillUserRequestType *const*, const char*, const char*);
SOAP_FMAC3 ns1__BillUserRequestType ** SOAP_FMAC4 soap_get_PointerTons1__BillUserRequestType(struct soap*, ns1__BillUserRequestType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__GetTransactionDetailsRequestType_DEFINED
#define SOAP_TYPE_PointerTons1__GetTransactionDetailsRequestType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__GetTransactionDetailsRequestType(struct soap*, ns1__GetTransactionDetailsRequestType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__GetTransactionDetailsRequestType(struct soap*, const char *, int, ns1__GetTransactionDetailsRequestType *const*, const char *);
SOAP_FMAC3 ns1__GetTransactionDetailsRequestType ** SOAP_FMAC4 soap_in_PointerTons1__GetTransactionDetailsRequestType(struct soap*, const char*, ns1__GetTransactionDetailsRequestType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__GetTransactionDetailsRequestType(struct soap*, ns1__GetTransactionDetailsRequestType *const*, const char*, const char*);
SOAP_FMAC3 ns1__GetTransactionDetailsRequestType ** SOAP_FMAC4 soap_get_PointerTons1__GetTransactionDetailsRequestType(struct soap*, ns1__GetTransactionDetailsRequestType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__CancelRecoupRequestType_DEFINED
#define SOAP_TYPE_PointerTons1__CancelRecoupRequestType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__CancelRecoupRequestType(struct soap*, ns1__CancelRecoupRequestType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__CancelRecoupRequestType(struct soap*, const char *, int, ns1__CancelRecoupRequestType *const*, const char *);
SOAP_FMAC3 ns1__CancelRecoupRequestType ** SOAP_FMAC4 soap_in_PointerTons1__CancelRecoupRequestType(struct soap*, const char*, ns1__CancelRecoupRequestType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__CancelRecoupRequestType(struct soap*, ns1__CancelRecoupRequestType *const*, const char*, const char*);
SOAP_FMAC3 ns1__CancelRecoupRequestType ** SOAP_FMAC4 soap_get_PointerTons1__CancelRecoupRequestType(struct soap*, ns1__CancelRecoupRequestType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__CompleteRecoupRequestType_DEFINED
#define SOAP_TYPE_PointerTons1__CompleteRecoupRequestType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__CompleteRecoupRequestType(struct soap*, ns1__CompleteRecoupRequestType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__CompleteRecoupRequestType(struct soap*, const char *, int, ns1__CompleteRecoupRequestType *const*, const char *);
SOAP_FMAC3 ns1__CompleteRecoupRequestType ** SOAP_FMAC4 soap_in_PointerTons1__CompleteRecoupRequestType(struct soap*, const char*, ns1__CompleteRecoupRequestType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__CompleteRecoupRequestType(struct soap*, ns1__CompleteRecoupRequestType *const*, const char*, const char*);
SOAP_FMAC3 ns1__CompleteRecoupRequestType ** SOAP_FMAC4 soap_get_PointerTons1__CompleteRecoupRequestType(struct soap*, ns1__CompleteRecoupRequestType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__InitiateRecoupRequestType_DEFINED
#define SOAP_TYPE_PointerTons1__InitiateRecoupRequestType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__InitiateRecoupRequestType(struct soap*, ns1__InitiateRecoupRequestType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__InitiateRecoupRequestType(struct soap*, const char *, int, ns1__InitiateRecoupRequestType *const*, const char *);
SOAP_FMAC3 ns1__InitiateRecoupRequestType ** SOAP_FMAC4 soap_in_PointerTons1__InitiateRecoupRequestType(struct soap*, const char*, ns1__InitiateRecoupRequestType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__InitiateRecoupRequestType(struct soap*, ns1__InitiateRecoupRequestType *const*, const char*, const char*);
SOAP_FMAC3 ns1__InitiateRecoupRequestType ** SOAP_FMAC4 soap_get_PointerTons1__InitiateRecoupRequestType(struct soap*, ns1__InitiateRecoupRequestType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__RefundTransactionRequestType_DEFINED
#define SOAP_TYPE_PointerTons1__RefundTransactionRequestType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__RefundTransactionRequestType(struct soap*, ns1__RefundTransactionRequestType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__RefundTransactionRequestType(struct soap*, const char *, int, ns1__RefundTransactionRequestType *const*, const char *);
SOAP_FMAC3 ns1__RefundTransactionRequestType ** SOAP_FMAC4 soap_in_PointerTons1__RefundTransactionRequestType(struct soap*, const char*, ns1__RefundTransactionRequestType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__RefundTransactionRequestType(struct soap*, ns1__RefundTransactionRequestType *const*, const char*, const char*);
SOAP_FMAC3 ns1__RefundTransactionRequestType ** SOAP_FMAC4 soap_get_PointerTons1__RefundTransactionRequestType(struct soap*, ns1__RefundTransactionRequestType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__BMButtonSearchRequestType_DEFINED
#define SOAP_TYPE_PointerTons1__BMButtonSearchRequestType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__BMButtonSearchRequestType(struct soap*, ns1__BMButtonSearchRequestType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__BMButtonSearchRequestType(struct soap*, const char *, int, ns1__BMButtonSearchRequestType *const*, const char *);
SOAP_FMAC3 ns1__BMButtonSearchRequestType ** SOAP_FMAC4 soap_in_PointerTons1__BMButtonSearchRequestType(struct soap*, const char*, ns1__BMButtonSearchRequestType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__BMButtonSearchRequestType(struct soap*, ns1__BMButtonSearchRequestType *const*, const char*, const char*);
SOAP_FMAC3 ns1__BMButtonSearchRequestType ** SOAP_FMAC4 soap_get_PointerTons1__BMButtonSearchRequestType(struct soap*, ns1__BMButtonSearchRequestType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__BMGetInventoryRequestType_DEFINED
#define SOAP_TYPE_PointerTons1__BMGetInventoryRequestType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__BMGetInventoryRequestType(struct soap*, ns1__BMGetInventoryRequestType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__BMGetInventoryRequestType(struct soap*, const char *, int, ns1__BMGetInventoryRequestType *const*, const char *);
SOAP_FMAC3 ns1__BMGetInventoryRequestType ** SOAP_FMAC4 soap_in_PointerTons1__BMGetInventoryRequestType(struct soap*, const char*, ns1__BMGetInventoryRequestType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__BMGetInventoryRequestType(struct soap*, ns1__BMGetInventoryRequestType *const*, const char*, const char*);
SOAP_FMAC3 ns1__BMGetInventoryRequestType ** SOAP_FMAC4 soap_get_PointerTons1__BMGetInventoryRequestType(struct soap*, ns1__BMGetInventoryRequestType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__BMSetInventoryRequestType_DEFINED
#define SOAP_TYPE_PointerTons1__BMSetInventoryRequestType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__BMSetInventoryRequestType(struct soap*, ns1__BMSetInventoryRequestType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__BMSetInventoryRequestType(struct soap*, const char *, int, ns1__BMSetInventoryRequestType *const*, const char *);
SOAP_FMAC3 ns1__BMSetInventoryRequestType ** SOAP_FMAC4 soap_in_PointerTons1__BMSetInventoryRequestType(struct soap*, const char*, ns1__BMSetInventoryRequestType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__BMSetInventoryRequestType(struct soap*, ns1__BMSetInventoryRequestType *const*, const char*, const char*);
SOAP_FMAC3 ns1__BMSetInventoryRequestType ** SOAP_FMAC4 soap_get_PointerTons1__BMSetInventoryRequestType(struct soap*, ns1__BMSetInventoryRequestType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__BMGetButtonDetailsRequestType_DEFINED
#define SOAP_TYPE_PointerTons1__BMGetButtonDetailsRequestType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__BMGetButtonDetailsRequestType(struct soap*, ns1__BMGetButtonDetailsRequestType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__BMGetButtonDetailsRequestType(struct soap*, const char *, int, ns1__BMGetButtonDetailsRequestType *const*, const char *);
SOAP_FMAC3 ns1__BMGetButtonDetailsRequestType ** SOAP_FMAC4 soap_in_PointerTons1__BMGetButtonDetailsRequestType(struct soap*, const char*, ns1__BMGetButtonDetailsRequestType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__BMGetButtonDetailsRequestType(struct soap*, ns1__BMGetButtonDetailsRequestType *const*, const char*, const char*);
SOAP_FMAC3 ns1__BMGetButtonDetailsRequestType ** SOAP_FMAC4 soap_get_PointerTons1__BMGetButtonDetailsRequestType(struct soap*, ns1__BMGetButtonDetailsRequestType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__BMManageButtonStatusRequestType_DEFINED
#define SOAP_TYPE_PointerTons1__BMManageButtonStatusRequestType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__BMManageButtonStatusRequestType(struct soap*, ns1__BMManageButtonStatusRequestType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__BMManageButtonStatusRequestType(struct soap*, const char *, int, ns1__BMManageButtonStatusRequestType *const*, const char *);
SOAP_FMAC3 ns1__BMManageButtonStatusRequestType ** SOAP_FMAC4 soap_in_PointerTons1__BMManageButtonStatusRequestType(struct soap*, const char*, ns1__BMManageButtonStatusRequestType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__BMManageButtonStatusRequestType(struct soap*, ns1__BMManageButtonStatusRequestType *const*, const char*, const char*);
SOAP_FMAC3 ns1__BMManageButtonStatusRequestType ** SOAP_FMAC4 soap_get_PointerTons1__BMManageButtonStatusRequestType(struct soap*, ns1__BMManageButtonStatusRequestType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__BMUpdateButtonRequestType_DEFINED
#define SOAP_TYPE_PointerTons1__BMUpdateButtonRequestType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__BMUpdateButtonRequestType(struct soap*, ns1__BMUpdateButtonRequestType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__BMUpdateButtonRequestType(struct soap*, const char *, int, ns1__BMUpdateButtonRequestType *const*, const char *);
SOAP_FMAC3 ns1__BMUpdateButtonRequestType ** SOAP_FMAC4 soap_in_PointerTons1__BMUpdateButtonRequestType(struct soap*, const char*, ns1__BMUpdateButtonRequestType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__BMUpdateButtonRequestType(struct soap*, ns1__BMUpdateButtonRequestType *const*, const char*, const char*);
SOAP_FMAC3 ns1__BMUpdateButtonRequestType ** SOAP_FMAC4 soap_get_PointerTons1__BMUpdateButtonRequestType(struct soap*, ns1__BMUpdateButtonRequestType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__BMCreateButtonRequestType_DEFINED
#define SOAP_TYPE_PointerTons1__BMCreateButtonRequestType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__BMCreateButtonRequestType(struct soap*, ns1__BMCreateButtonRequestType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__BMCreateButtonRequestType(struct soap*, const char *, int, ns1__BMCreateButtonRequestType *const*, const char *);
SOAP_FMAC3 ns1__BMCreateButtonRequestType ** SOAP_FMAC4 soap_in_PointerTons1__BMCreateButtonRequestType(struct soap*, const char*, ns1__BMCreateButtonRequestType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__BMCreateButtonRequestType(struct soap*, ns1__BMCreateButtonRequestType *const*, const char*, const char*);
SOAP_FMAC3 ns1__BMCreateButtonRequestType ** SOAP_FMAC4 soap_get_PointerTons1__BMCreateButtonRequestType(struct soap*, ns1__BMCreateButtonRequestType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__BasicAmountType_DEFINED
#define SOAP_TYPE_PointerTons2__BasicAmountType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__BasicAmountType(struct soap*, ns2__BasicAmountType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__BasicAmountType(struct soap*, const char *, int, ns2__BasicAmountType *const*, const char *);
SOAP_FMAC3 ns2__BasicAmountType ** SOAP_FMAC4 soap_in_PointerTons2__BasicAmountType(struct soap*, const char*, ns2__BasicAmountType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__BasicAmountType(struct soap*, ns2__BasicAmountType *const*, const char*, const char*);
SOAP_FMAC3 ns2__BasicAmountType ** SOAP_FMAC4 soap_get_PointerTons2__BasicAmountType(struct soap*, ns2__BasicAmountType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__UserIDType_DEFINED
#define SOAP_TYPE_PointerTons3__UserIDType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__UserIDType(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__UserIDType(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerTons3__UserIDType(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__UserIDType(struct soap*, std::string *const*, const char*, const char*);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerTons3__UserIDType(struct soap*, std::string **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__EmailAddressType_DEFINED
#define SOAP_TYPE_PointerTons3__EmailAddressType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__EmailAddressType(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__EmailAddressType(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerTons3__EmailAddressType(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__EmailAddressType(struct soap*, std::string *const*, const char*, const char*);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerTons3__EmailAddressType(struct soap*, std::string **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__OptionSelectionDetailsType_DEFINED
#define SOAP_TYPE_PointerTons1__OptionSelectionDetailsType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__OptionSelectionDetailsType(struct soap*, ns1__OptionSelectionDetailsType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__OptionSelectionDetailsType(struct soap*, const char *, int, ns1__OptionSelectionDetailsType *const*, const char *);
SOAP_FMAC3 ns1__OptionSelectionDetailsType ** SOAP_FMAC4 soap_in_PointerTons1__OptionSelectionDetailsType(struct soap*, const char*, ns1__OptionSelectionDetailsType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__OptionSelectionDetailsType(struct soap*, ns1__OptionSelectionDetailsType *const*, const char*, const char*);
SOAP_FMAC3 ns1__OptionSelectionDetailsType ** SOAP_FMAC4 soap_get_PointerTons1__OptionSelectionDetailsType(struct soap*, ns1__OptionSelectionDetailsType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__InstallmentDetailsType_DEFINED
#define SOAP_TYPE_PointerTons1__InstallmentDetailsType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__InstallmentDetailsType(struct soap*, ns1__InstallmentDetailsType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__InstallmentDetailsType(struct soap*, const char *, int, ns1__InstallmentDetailsType *const*, const char *);
SOAP_FMAC3 ns1__InstallmentDetailsType ** SOAP_FMAC4 soap_in_PointerTons1__InstallmentDetailsType(struct soap*, const char*, ns1__InstallmentDetailsType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__InstallmentDetailsType(struct soap*, ns1__InstallmentDetailsType *const*, const char*, const char*);
SOAP_FMAC3 ns1__InstallmentDetailsType ** SOAP_FMAC4 soap_get_PointerTons1__InstallmentDetailsType(struct soap*, ns1__InstallmentDetailsType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__OptionTypeListType_DEFINED
#define SOAP_TYPE_PointerTons3__OptionTypeListType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__OptionTypeListType(struct soap*, enum ns3__OptionTypeListType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__OptionTypeListType(struct soap*, const char *, int, enum ns3__OptionTypeListType *const*, const char *);
SOAP_FMAC3 enum ns3__OptionTypeListType ** SOAP_FMAC4 soap_in_PointerTons3__OptionTypeListType(struct soap*, const char*, enum ns3__OptionTypeListType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__OptionTypeListType(struct soap*, enum ns3__OptionTypeListType *const*, const char*, const char*);
SOAP_FMAC3 enum ns3__OptionTypeListType ** SOAP_FMAC4 soap_get_PointerTons3__OptionTypeListType(struct soap*, enum ns3__OptionTypeListType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTostd__string_DEFINED
#define SOAP_TYPE_PointerTostd__string_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTostd__string(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTostd__string(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerTostd__string(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTostd__string(struct soap*, std::string *const*, const char*, const char*);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerTostd__string(struct soap*, std::string **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToint_DEFINED
#define SOAP_TYPE_PointerToint_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToint(struct soap*, int *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToint(struct soap*, const char *, int, int *const*, const char *);
SOAP_FMAC3 int ** SOAP_FMAC4 soap_in_PointerToint(struct soap*, const char*, int **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToint(struct soap*, int *const*, const char*, const char*);
SOAP_FMAC3 int ** SOAP_FMAC4 soap_get_PointerToint(struct soap*, int **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__BillingPeriodType_DEFINED
#define SOAP_TYPE_PointerTons3__BillingPeriodType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__BillingPeriodType(struct soap*, enum ns3__BillingPeriodType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__BillingPeriodType(struct soap*, const char *, int, enum ns3__BillingPeriodType *const*, const char *);
SOAP_FMAC3 enum ns3__BillingPeriodType ** SOAP_FMAC4 soap_in_PointerTons3__BillingPeriodType(struct soap*, const char*, enum ns3__BillingPeriodType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__BillingPeriodType(struct soap*, enum ns3__BillingPeriodType *const*, const char*, const char*);
SOAP_FMAC3 enum ns3__BillingPeriodType ** SOAP_FMAC4 soap_get_PointerTons3__BillingPeriodType(struct soap*, enum ns3__BillingPeriodType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE__QName_DEFINED
#define SOAP_TYPE__QName_DEFINED

inline void soap_default__QName(struct soap *soap, char **a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT__QName
	*a = SOAP_DEFAULT__QName;
#else
	*a = (char *)0;
#endif
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__QName(struct soap*, char *const*);

#define soap__QName2s(soap, a) soap_QName2s(soap, (a))
SOAP_FMAC3 int SOAP_FMAC4 soap_out__QName(struct soap*, const char*, int, char*const*, const char*);

#define soap_s2_QName(soap, s, a) soap_s2QName((soap), (s), (char**)(a), 0, -1, NULL)
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in__QName(struct soap*, const char*, char **, const char*);

#define soap_instantiate__QName soap_instantiate_string


#define soap_new__QName soap_new_string

SOAP_FMAC3 int SOAP_FMAC4 soap_put__QName(struct soap*, char *const*, const char*, const char*);

inline int soap_write__QName(struct soap *soap, char *const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put__QName(soap, p, "QName", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT__QName(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put__QName(soap, p, "QName", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__QName(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put__QName(soap, p, "QName", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 char ** SOAP_FMAC4 soap_get__QName(struct soap*, char **, const char*, const char*);

inline int soap_read__QName(struct soap *soap, char **p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get__QName(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__QName(struct soap *soap, const char *URL, char **p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__QName(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv__QName(struct soap *soap, char **p)
{
	if (soap_read__QName(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__XML_DEFINED
#define SOAP_TYPE__XML_DEFINED
#endif

#ifndef SOAP_TYPE_string_DEFINED
#define SOAP_TYPE_string_DEFINED

inline void soap_default_string(struct soap *soap, char **a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_string
	*a = SOAP_DEFAULT_string;
#else
	*a = (char *)0;
#endif
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_string(struct soap*, char *const*);

#define soap_string2s(soap, a) (a)
SOAP_FMAC3 int SOAP_FMAC4 soap_out_string(struct soap*, const char*, int, char*const*, const char*);

#define soap_s2string(soap, s, a) soap_s2char((soap), (s), (char**)(a), 1, 0, -1, NULL)
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_string(struct soap*, const char*, char **, const char*);

SOAP_FMAC3 char * * SOAP_FMAC4 soap_new_string(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_string(struct soap*, char *const*, const char*, const char*);

inline int soap_write_string(struct soap *soap, char *const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_string(soap, p, "string", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_string(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_string(soap, p, "string", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_string(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_string(soap, p, "string", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_string(struct soap*, char **, const char*, const char*);

inline int soap_read_string(struct soap *soap, char **p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_string(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_string(struct soap *soap, const char *URL, char **p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_string(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_string(struct soap *soap, char **p)
{
	if (soap_read_string(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons2__BasicAmountType_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTons2__BasicAmountType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons2__BasicAmountType(struct soap*, std::vector<ns2__BasicAmountType *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons2__BasicAmountType(struct soap*, const std::vector<ns2__BasicAmountType *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons2__BasicAmountType(struct soap*, const char*, int, const std::vector<ns2__BasicAmountType *> *, const char*);
SOAP_FMAC3 std::vector<ns2__BasicAmountType *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons2__BasicAmountType(struct soap*, const char*, std::vector<ns2__BasicAmountType *> *, const char*);
SOAP_FMAC1 std::vector<ns2__BasicAmountType *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons2__BasicAmountType(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns2__BasicAmountType *>  * soap_new_std__vectorTemplateOfPointerTons2__BasicAmountType(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTons2__BasicAmountType(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons1__MassPayRequestItemType_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTons1__MassPayRequestItemType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons1__MassPayRequestItemType(struct soap*, std::vector<ns1__MassPayRequestItemType *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons1__MassPayRequestItemType(struct soap*, const std::vector<ns1__MassPayRequestItemType *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons1__MassPayRequestItemType(struct soap*, const char*, int, const std::vector<ns1__MassPayRequestItemType *> *, const char*);
SOAP_FMAC3 std::vector<ns1__MassPayRequestItemType *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons1__MassPayRequestItemType(struct soap*, const char*, std::vector<ns1__MassPayRequestItemType *> *, const char*);
SOAP_FMAC1 std::vector<ns1__MassPayRequestItemType *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons1__MassPayRequestItemType(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns1__MassPayRequestItemType *>  * soap_new_std__vectorTemplateOfPointerTons1__MassPayRequestItemType(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTons1__MassPayRequestItemType(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons3__PaymentTransactionSearchResultType_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTons3__PaymentTransactionSearchResultType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons3__PaymentTransactionSearchResultType(struct soap*, std::vector<ns3__PaymentTransactionSearchResultType *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons3__PaymentTransactionSearchResultType(struct soap*, const std::vector<ns3__PaymentTransactionSearchResultType *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons3__PaymentTransactionSearchResultType(struct soap*, const char*, int, const std::vector<ns3__PaymentTransactionSearchResultType *> *, const char*);
SOAP_FMAC3 std::vector<ns3__PaymentTransactionSearchResultType *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons3__PaymentTransactionSearchResultType(struct soap*, const char*, std::vector<ns3__PaymentTransactionSearchResultType *> *, const char*);
SOAP_FMAC1 std::vector<ns3__PaymentTransactionSearchResultType *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons3__PaymentTransactionSearchResultType(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns3__PaymentTransactionSearchResultType *>  * soap_new_std__vectorTemplateOfPointerTons3__PaymentTransactionSearchResultType(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTons3__PaymentTransactionSearchResultType(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons3__InvoiceItemType_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTons3__InvoiceItemType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons3__InvoiceItemType(struct soap*, std::vector<ns3__InvoiceItemType *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons3__InvoiceItemType(struct soap*, const std::vector<ns3__InvoiceItemType *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons3__InvoiceItemType(struct soap*, const char*, int, const std::vector<ns3__InvoiceItemType *> *, const char*);
SOAP_FMAC3 std::vector<ns3__InvoiceItemType *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons3__InvoiceItemType(struct soap*, const char*, std::vector<ns3__InvoiceItemType *> *, const char*);
SOAP_FMAC1 std::vector<ns3__InvoiceItemType *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons3__InvoiceItemType(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns3__InvoiceItemType *>  * soap_new_std__vectorTemplateOfPointerTons3__InvoiceItemType(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTons3__InvoiceItemType(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons3__ButtonSearchResultType_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTons3__ButtonSearchResultType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons3__ButtonSearchResultType(struct soap*, std::vector<ns3__ButtonSearchResultType *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons3__ButtonSearchResultType(struct soap*, const std::vector<ns3__ButtonSearchResultType *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons3__ButtonSearchResultType(struct soap*, const char*, int, const std::vector<ns3__ButtonSearchResultType *> *, const char*);
SOAP_FMAC3 std::vector<ns3__ButtonSearchResultType *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons3__ButtonSearchResultType(struct soap*, const char*, std::vector<ns3__ButtonSearchResultType *> *, const char*);
SOAP_FMAC1 std::vector<ns3__ButtonSearchResultType *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons3__ButtonSearchResultType(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns3__ButtonSearchResultType *>  * soap_new_std__vectorTemplateOfPointerTons3__ButtonSearchResultType(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTons3__ButtonSearchResultType(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons3__OptionTrackingDetailsType_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTons3__OptionTrackingDetailsType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons3__OptionTrackingDetailsType(struct soap*, std::vector<ns3__OptionTrackingDetailsType *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons3__OptionTrackingDetailsType(struct soap*, const std::vector<ns3__OptionTrackingDetailsType *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons3__OptionTrackingDetailsType(struct soap*, const char*, int, const std::vector<ns3__OptionTrackingDetailsType *> *, const char*);
SOAP_FMAC3 std::vector<ns3__OptionTrackingDetailsType *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons3__OptionTrackingDetailsType(struct soap*, const char*, std::vector<ns3__OptionTrackingDetailsType *> *, const char*);
SOAP_FMAC1 std::vector<ns3__OptionTrackingDetailsType *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons3__OptionTrackingDetailsType(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns3__OptionTrackingDetailsType *>  * soap_new_std__vectorTemplateOfPointerTons3__OptionTrackingDetailsType(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTons3__OptionTrackingDetailsType(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons1__OptionDetailsType_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTons1__OptionDetailsType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons1__OptionDetailsType(struct soap*, std::vector<ns1__OptionDetailsType *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons1__OptionDetailsType(struct soap*, const std::vector<ns1__OptionDetailsType *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons1__OptionDetailsType(struct soap*, const char*, int, const std::vector<ns1__OptionDetailsType *> *, const char*);
SOAP_FMAC3 std::vector<ns1__OptionDetailsType *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons1__OptionDetailsType(struct soap*, const char*, std::vector<ns1__OptionDetailsType *> *, const char*);
SOAP_FMAC1 std::vector<ns1__OptionDetailsType *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons1__OptionDetailsType(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns1__OptionDetailsType *>  * soap_new_std__vectorTemplateOfPointerTons1__OptionDetailsType(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTons1__OptionDetailsType(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons3__TupleType_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTons3__TupleType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons3__TupleType(struct soap*, std::vector<ns3__TupleType *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons3__TupleType(struct soap*, const std::vector<ns3__TupleType *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons3__TupleType(struct soap*, const char*, int, const std::vector<ns3__TupleType *> *, const char*);
SOAP_FMAC3 std::vector<ns3__TupleType *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons3__TupleType(struct soap*, const char*, std::vector<ns3__TupleType *> *, const char*);
SOAP_FMAC1 std::vector<ns3__TupleType *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons3__TupleType(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns3__TupleType *>  * soap_new_std__vectorTemplateOfPointerTons3__TupleType(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTons3__TupleType(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons3__AdditionalFeeType_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTons3__AdditionalFeeType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons3__AdditionalFeeType(struct soap*, std::vector<ns3__AdditionalFeeType *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons3__AdditionalFeeType(struct soap*, const std::vector<ns3__AdditionalFeeType *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons3__AdditionalFeeType(struct soap*, const char*, int, const std::vector<ns3__AdditionalFeeType *> *, const char*);
SOAP_FMAC3 std::vector<ns3__AdditionalFeeType *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons3__AdditionalFeeType(struct soap*, const char*, std::vector<ns3__AdditionalFeeType *> *, const char*);
SOAP_FMAC1 std::vector<ns3__AdditionalFeeType *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons3__AdditionalFeeType(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns3__AdditionalFeeType *>  * soap_new_std__vectorTemplateOfPointerTons3__AdditionalFeeType(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTons3__AdditionalFeeType(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons3__DiscountType_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTons3__DiscountType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons3__DiscountType(struct soap*, std::vector<ns3__DiscountType *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons3__DiscountType(struct soap*, const std::vector<ns3__DiscountType *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons3__DiscountType(struct soap*, const char*, int, const std::vector<ns3__DiscountType *> *, const char*);
SOAP_FMAC3 std::vector<ns3__DiscountType *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons3__DiscountType(struct soap*, const char*, std::vector<ns3__DiscountType *> *, const char*);
SOAP_FMAC1 std::vector<ns3__DiscountType *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons3__DiscountType(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns3__DiscountType *>  * soap_new_std__vectorTemplateOfPointerTons3__DiscountType(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTons3__DiscountType(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons3__FlightDetailsType_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTons3__FlightDetailsType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons3__FlightDetailsType(struct soap*, std::vector<ns3__FlightDetailsType *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons3__FlightDetailsType(struct soap*, const std::vector<ns3__FlightDetailsType *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons3__FlightDetailsType(struct soap*, const char*, int, const std::vector<ns3__FlightDetailsType *> *, const char*);
SOAP_FMAC3 std::vector<ns3__FlightDetailsType *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons3__FlightDetailsType(struct soap*, const char*, std::vector<ns3__FlightDetailsType *> *, const char*);
SOAP_FMAC1 std::vector<ns3__FlightDetailsType *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons3__FlightDetailsType(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns3__FlightDetailsType *>  * soap_new_std__vectorTemplateOfPointerTons3__FlightDetailsType(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTons3__FlightDetailsType(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons3__RiskFilterDetailsType_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTons3__RiskFilterDetailsType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons3__RiskFilterDetailsType(struct soap*, std::vector<ns3__RiskFilterDetailsType *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons3__RiskFilterDetailsType(struct soap*, const std::vector<ns3__RiskFilterDetailsType *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons3__RiskFilterDetailsType(struct soap*, const char*, int, const std::vector<ns3__RiskFilterDetailsType *> *, const char*);
SOAP_FMAC3 std::vector<ns3__RiskFilterDetailsType *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons3__RiskFilterDetailsType(struct soap*, const char*, std::vector<ns3__RiskFilterDetailsType *> *, const char*);
SOAP_FMAC1 std::vector<ns3__RiskFilterDetailsType *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons3__RiskFilterDetailsType(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns3__RiskFilterDetailsType *>  * soap_new_std__vectorTemplateOfPointerTons3__RiskFilterDetailsType(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTons3__RiskFilterDetailsType(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons3__IncentiveAppliedDetailsType_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTons3__IncentiveAppliedDetailsType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons3__IncentiveAppliedDetailsType(struct soap*, std::vector<ns3__IncentiveAppliedDetailsType *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons3__IncentiveAppliedDetailsType(struct soap*, const std::vector<ns3__IncentiveAppliedDetailsType *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons3__IncentiveAppliedDetailsType(struct soap*, const char*, int, const std::vector<ns3__IncentiveAppliedDetailsType *> *, const char*);
SOAP_FMAC3 std::vector<ns3__IncentiveAppliedDetailsType *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons3__IncentiveAppliedDetailsType(struct soap*, const char*, std::vector<ns3__IncentiveAppliedDetailsType *> *, const char*);
SOAP_FMAC1 std::vector<ns3__IncentiveAppliedDetailsType *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons3__IncentiveAppliedDetailsType(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns3__IncentiveAppliedDetailsType *>  * soap_new_std__vectorTemplateOfPointerTons3__IncentiveAppliedDetailsType(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTons3__IncentiveAppliedDetailsType(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons3__MerchantDataType_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTons3__MerchantDataType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons3__MerchantDataType(struct soap*, std::vector<ns3__MerchantDataType *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons3__MerchantDataType(struct soap*, const std::vector<ns3__MerchantDataType *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons3__MerchantDataType(struct soap*, const char*, int, const std::vector<ns3__MerchantDataType *> *, const char*);
SOAP_FMAC3 std::vector<ns3__MerchantDataType *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons3__MerchantDataType(struct soap*, const char*, std::vector<ns3__MerchantDataType *> *, const char*);
SOAP_FMAC1 std::vector<ns3__MerchantDataType *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons3__MerchantDataType(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns3__MerchantDataType *>  * soap_new_std__vectorTemplateOfPointerTons3__MerchantDataType(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTons3__MerchantDataType(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons3__DiscountInfoType_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTons3__DiscountInfoType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons3__DiscountInfoType(struct soap*, std::vector<ns3__DiscountInfoType *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons3__DiscountInfoType(struct soap*, const std::vector<ns3__DiscountInfoType *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons3__DiscountInfoType(struct soap*, const char*, int, const std::vector<ns3__DiscountInfoType *> *, const char*);
SOAP_FMAC3 std::vector<ns3__DiscountInfoType *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons3__DiscountInfoType(struct soap*, const char*, std::vector<ns3__DiscountInfoType *> *, const char*);
SOAP_FMAC1 std::vector<ns3__DiscountInfoType *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons3__DiscountInfoType(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns3__DiscountInfoType *>  * soap_new_std__vectorTemplateOfPointerTons3__DiscountInfoType(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTons3__DiscountInfoType(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons3__PaymentDetailsItemType_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTons3__PaymentDetailsItemType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons3__PaymentDetailsItemType(struct soap*, std::vector<ns3__PaymentDetailsItemType *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons3__PaymentDetailsItemType(struct soap*, const std::vector<ns3__PaymentDetailsItemType *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons3__PaymentDetailsItemType(struct soap*, const char*, int, const std::vector<ns3__PaymentDetailsItemType *> *, const char*);
SOAP_FMAC3 std::vector<ns3__PaymentDetailsItemType *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons3__PaymentDetailsItemType(struct soap*, const char*, std::vector<ns3__PaymentDetailsItemType *> *, const char*);
SOAP_FMAC1 std::vector<ns3__PaymentDetailsItemType *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons3__PaymentDetailsItemType(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns3__PaymentDetailsItemType *>  * soap_new_std__vectorTemplateOfPointerTons3__PaymentDetailsItemType(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTons3__PaymentDetailsItemType(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons3__PaymentItemType_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTons3__PaymentItemType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons3__PaymentItemType(struct soap*, std::vector<ns3__PaymentItemType *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons3__PaymentItemType(struct soap*, const std::vector<ns3__PaymentItemType *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons3__PaymentItemType(struct soap*, const char*, int, const std::vector<ns3__PaymentItemType *> *, const char*);
SOAP_FMAC3 std::vector<ns3__PaymentItemType *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons3__PaymentItemType(struct soap*, const char*, std::vector<ns3__PaymentItemType *> *, const char*);
SOAP_FMAC1 std::vector<ns3__PaymentItemType *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons3__PaymentItemType(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns3__PaymentItemType *>  * soap_new_std__vectorTemplateOfPointerTons3__PaymentItemType(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTons3__PaymentItemType(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons3__OptionType_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTons3__OptionType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons3__OptionType(struct soap*, std::vector<ns3__OptionType *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons3__OptionType(struct soap*, const std::vector<ns3__OptionType *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons3__OptionType(struct soap*, const char*, int, const std::vector<ns3__OptionType *> *, const char*);
SOAP_FMAC3 std::vector<ns3__OptionType *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons3__OptionType(struct soap*, const char*, std::vector<ns3__OptionType *> *, const char*);
SOAP_FMAC1 std::vector<ns3__OptionType *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons3__OptionType(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns3__OptionType *>  * soap_new_std__vectorTemplateOfPointerTons3__OptionType(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTons3__OptionType(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons3__SubscriptionTermsType_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTons3__SubscriptionTermsType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons3__SubscriptionTermsType(struct soap*, std::vector<ns3__SubscriptionTermsType *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons3__SubscriptionTermsType(struct soap*, const std::vector<ns3__SubscriptionTermsType *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons3__SubscriptionTermsType(struct soap*, const char*, int, const std::vector<ns3__SubscriptionTermsType *> *, const char*);
SOAP_FMAC3 std::vector<ns3__SubscriptionTermsType *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons3__SubscriptionTermsType(struct soap*, const char*, std::vector<ns3__SubscriptionTermsType *> *, const char*);
SOAP_FMAC1 std::vector<ns3__SubscriptionTermsType *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons3__SubscriptionTermsType(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns3__SubscriptionTermsType *>  * soap_new_std__vectorTemplateOfPointerTons3__SubscriptionTermsType(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTons3__SubscriptionTermsType(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons3__WalletItemsType_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTons3__WalletItemsType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons3__WalletItemsType(struct soap*, std::vector<ns3__WalletItemsType *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons3__WalletItemsType(struct soap*, const std::vector<ns3__WalletItemsType *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons3__WalletItemsType(struct soap*, const char*, int, const std::vector<ns3__WalletItemsType *> *, const char*);
SOAP_FMAC3 std::vector<ns3__WalletItemsType *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons3__WalletItemsType(struct soap*, const char*, std::vector<ns3__WalletItemsType *> *, const char*);
SOAP_FMAC1 std::vector<ns3__WalletItemsType *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons3__WalletItemsType(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns3__WalletItemsType *>  * soap_new_std__vectorTemplateOfPointerTons3__WalletItemsType(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTons3__WalletItemsType(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons3__CoupledPaymentInfoType_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTons3__CoupledPaymentInfoType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons3__CoupledPaymentInfoType(struct soap*, std::vector<ns3__CoupledPaymentInfoType *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons3__CoupledPaymentInfoType(struct soap*, const std::vector<ns3__CoupledPaymentInfoType *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons3__CoupledPaymentInfoType(struct soap*, const char*, int, const std::vector<ns3__CoupledPaymentInfoType *> *, const char*);
SOAP_FMAC3 std::vector<ns3__CoupledPaymentInfoType *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons3__CoupledPaymentInfoType(struct soap*, const char*, std::vector<ns3__CoupledPaymentInfoType *> *, const char*);
SOAP_FMAC1 std::vector<ns3__CoupledPaymentInfoType *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons3__CoupledPaymentInfoType(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns3__CoupledPaymentInfoType *>  * soap_new_std__vectorTemplateOfPointerTons3__CoupledPaymentInfoType(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTons3__CoupledPaymentInfoType(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons3__AddressType_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTons3__AddressType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons3__AddressType(struct soap*, std::vector<ns3__AddressType *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons3__AddressType(struct soap*, const std::vector<ns3__AddressType *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons3__AddressType(struct soap*, const char*, int, const std::vector<ns3__AddressType *> *, const char*);
SOAP_FMAC3 std::vector<ns3__AddressType *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons3__AddressType(struct soap*, const char*, std::vector<ns3__AddressType *> *, const char*);
SOAP_FMAC1 std::vector<ns3__AddressType *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons3__AddressType(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns3__AddressType *>  * soap_new_std__vectorTemplateOfPointerTons3__AddressType(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTons3__AddressType(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons3__PaymentInfoType_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTons3__PaymentInfoType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons3__PaymentInfoType(struct soap*, std::vector<ns3__PaymentInfoType *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons3__PaymentInfoType(struct soap*, const std::vector<ns3__PaymentInfoType *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons3__PaymentInfoType(struct soap*, const char*, int, const std::vector<ns3__PaymentInfoType *> *, const char*);
SOAP_FMAC3 std::vector<ns3__PaymentInfoType *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons3__PaymentInfoType(struct soap*, const char*, std::vector<ns3__PaymentInfoType *> *, const char*);
SOAP_FMAC1 std::vector<ns3__PaymentInfoType *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons3__PaymentInfoType(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns3__PaymentInfoType *>  * soap_new_std__vectorTemplateOfPointerTons3__PaymentInfoType(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTons3__PaymentInfoType(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons3__PaymentRequestInfoType_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTons3__PaymentRequestInfoType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons3__PaymentRequestInfoType(struct soap*, std::vector<ns3__PaymentRequestInfoType *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons3__PaymentRequestInfoType(struct soap*, const std::vector<ns3__PaymentRequestInfoType *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons3__PaymentRequestInfoType(struct soap*, const char*, int, const std::vector<ns3__PaymentRequestInfoType *> *, const char*);
SOAP_FMAC3 std::vector<ns3__PaymentRequestInfoType *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons3__PaymentRequestInfoType(struct soap*, const char*, std::vector<ns3__PaymentRequestInfoType *> *, const char*);
SOAP_FMAC1 std::vector<ns3__PaymentRequestInfoType *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons3__PaymentRequestInfoType(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns3__PaymentRequestInfoType *>  * soap_new_std__vectorTemplateOfPointerTons3__PaymentRequestInfoType(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTons3__PaymentRequestInfoType(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons3__IncentiveDetailsType_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTons3__IncentiveDetailsType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons3__IncentiveDetailsType(struct soap*, std::vector<ns3__IncentiveDetailsType *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons3__IncentiveDetailsType(struct soap*, const std::vector<ns3__IncentiveDetailsType *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons3__IncentiveDetailsType(struct soap*, const char*, int, const std::vector<ns3__IncentiveDetailsType *> *, const char*);
SOAP_FMAC3 std::vector<ns3__IncentiveDetailsType *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons3__IncentiveDetailsType(struct soap*, const char*, std::vector<ns3__IncentiveDetailsType *> *, const char*);
SOAP_FMAC1 std::vector<ns3__IncentiveDetailsType *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons3__IncentiveDetailsType(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns3__IncentiveDetailsType *>  * soap_new_std__vectorTemplateOfPointerTons3__IncentiveDetailsType(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTons3__IncentiveDetailsType(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons3__BillingApprovalDetailsType_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTons3__BillingApprovalDetailsType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons3__BillingApprovalDetailsType(struct soap*, std::vector<ns3__BillingApprovalDetailsType *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons3__BillingApprovalDetailsType(struct soap*, const std::vector<ns3__BillingApprovalDetailsType *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons3__BillingApprovalDetailsType(struct soap*, const char*, int, const std::vector<ns3__BillingApprovalDetailsType *> *, const char*);
SOAP_FMAC3 std::vector<ns3__BillingApprovalDetailsType *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons3__BillingApprovalDetailsType(struct soap*, const char*, std::vector<ns3__BillingApprovalDetailsType *> *, const char*);
SOAP_FMAC1 std::vector<ns3__BillingApprovalDetailsType *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons3__BillingApprovalDetailsType(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns3__BillingApprovalDetailsType *>  * soap_new_std__vectorTemplateOfPointerTons3__BillingApprovalDetailsType(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTons3__BillingApprovalDetailsType(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons3__CoupledBucketsType_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTons3__CoupledBucketsType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons3__CoupledBucketsType(struct soap*, std::vector<ns3__CoupledBucketsType *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons3__CoupledBucketsType(struct soap*, const std::vector<ns3__CoupledBucketsType *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons3__CoupledBucketsType(struct soap*, const char*, int, const std::vector<ns3__CoupledBucketsType *> *, const char*);
SOAP_FMAC3 std::vector<ns3__CoupledBucketsType *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons3__CoupledBucketsType(struct soap*, const char*, std::vector<ns3__CoupledBucketsType *> *, const char*);
SOAP_FMAC1 std::vector<ns3__CoupledBucketsType *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons3__CoupledBucketsType(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns3__CoupledBucketsType *>  * soap_new_std__vectorTemplateOfPointerTons3__CoupledBucketsType(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTons3__CoupledBucketsType(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons3__IncentiveInfoType_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTons3__IncentiveInfoType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons3__IncentiveInfoType(struct soap*, std::vector<ns3__IncentiveInfoType *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons3__IncentiveInfoType(struct soap*, const std::vector<ns3__IncentiveInfoType *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons3__IncentiveInfoType(struct soap*, const char*, int, const std::vector<ns3__IncentiveInfoType *> *, const char*);
SOAP_FMAC3 std::vector<ns3__IncentiveInfoType *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons3__IncentiveInfoType(struct soap*, const char*, std::vector<ns3__IncentiveInfoType *> *, const char*);
SOAP_FMAC1 std::vector<ns3__IncentiveInfoType *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons3__IncentiveInfoType(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns3__IncentiveInfoType *>  * soap_new_std__vectorTemplateOfPointerTons3__IncentiveInfoType(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTons3__IncentiveInfoType(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons3__ShippingOptionType_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTons3__ShippingOptionType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons3__ShippingOptionType(struct soap*, std::vector<ns3__ShippingOptionType *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons3__ShippingOptionType(struct soap*, const std::vector<ns3__ShippingOptionType *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons3__ShippingOptionType(struct soap*, const char*, int, const std::vector<ns3__ShippingOptionType *> *, const char*);
SOAP_FMAC3 std::vector<ns3__ShippingOptionType *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons3__ShippingOptionType(struct soap*, const char*, std::vector<ns3__ShippingOptionType *> *, const char*);
SOAP_FMAC1 std::vector<ns3__ShippingOptionType *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons3__ShippingOptionType(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns3__ShippingOptionType *>  * soap_new_std__vectorTemplateOfPointerTons3__ShippingOptionType(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTons3__ShippingOptionType(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons3__PaymentDetailsType_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTons3__PaymentDetailsType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons3__PaymentDetailsType(struct soap*, std::vector<ns3__PaymentDetailsType *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons3__PaymentDetailsType(struct soap*, const std::vector<ns3__PaymentDetailsType *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons3__PaymentDetailsType(struct soap*, const char*, int, const std::vector<ns3__PaymentDetailsType *> *, const char*);
SOAP_FMAC3 std::vector<ns3__PaymentDetailsType *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons3__PaymentDetailsType(struct soap*, const char*, std::vector<ns3__PaymentDetailsType *> *, const char*);
SOAP_FMAC1 std::vector<ns3__PaymentDetailsType *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons3__PaymentDetailsType(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns3__PaymentDetailsType *>  * soap_new_std__vectorTemplateOfPointerTons3__PaymentDetailsType(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTons3__PaymentDetailsType(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons3__OtherPaymentMethodDetailsType_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTons3__OtherPaymentMethodDetailsType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons3__OtherPaymentMethodDetailsType(struct soap*, std::vector<ns3__OtherPaymentMethodDetailsType *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons3__OtherPaymentMethodDetailsType(struct soap*, const std::vector<ns3__OtherPaymentMethodDetailsType *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons3__OtherPaymentMethodDetailsType(struct soap*, const char*, int, const std::vector<ns3__OtherPaymentMethodDetailsType *> *, const char*);
SOAP_FMAC3 std::vector<ns3__OtherPaymentMethodDetailsType *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons3__OtherPaymentMethodDetailsType(struct soap*, const char*, std::vector<ns3__OtherPaymentMethodDetailsType *> *, const char*);
SOAP_FMAC1 std::vector<ns3__OtherPaymentMethodDetailsType *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons3__OtherPaymentMethodDetailsType(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns3__OtherPaymentMethodDetailsType *>  * soap_new_std__vectorTemplateOfPointerTons3__OtherPaymentMethodDetailsType(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTons3__OtherPaymentMethodDetailsType(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons3__BillingAgreementDetailsType_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTons3__BillingAgreementDetailsType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons3__BillingAgreementDetailsType(struct soap*, std::vector<ns3__BillingAgreementDetailsType *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons3__BillingAgreementDetailsType(struct soap*, const std::vector<ns3__BillingAgreementDetailsType *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons3__BillingAgreementDetailsType(struct soap*, const char*, int, const std::vector<ns3__BillingAgreementDetailsType *> *, const char*);
SOAP_FMAC3 std::vector<ns3__BillingAgreementDetailsType *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons3__BillingAgreementDetailsType(struct soap*, const char*, std::vector<ns3__BillingAgreementDetailsType *> *, const char*);
SOAP_FMAC1 std::vector<ns3__BillingAgreementDetailsType *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons3__BillingAgreementDetailsType(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns3__BillingAgreementDetailsType *>  * soap_new_std__vectorTemplateOfPointerTons3__BillingAgreementDetailsType(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTons3__BillingAgreementDetailsType(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons3__IncentiveDetailType_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTons3__IncentiveDetailType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons3__IncentiveDetailType(struct soap*, std::vector<ns3__IncentiveDetailType *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons3__IncentiveDetailType(struct soap*, const std::vector<ns3__IncentiveDetailType *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons3__IncentiveDetailType(struct soap*, const char*, int, const std::vector<ns3__IncentiveDetailType *> *, const char*);
SOAP_FMAC3 std::vector<ns3__IncentiveDetailType *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons3__IncentiveDetailType(struct soap*, const char*, std::vector<ns3__IncentiveDetailType *> *, const char*);
SOAP_FMAC1 std::vector<ns3__IncentiveDetailType *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons3__IncentiveDetailType(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns3__IncentiveDetailType *>  * soap_new_std__vectorTemplateOfPointerTons3__IncentiveDetailType(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTons3__IncentiveDetailType(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons3__IncentiveBucketType_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTons3__IncentiveBucketType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons3__IncentiveBucketType(struct soap*, std::vector<ns3__IncentiveBucketType *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons3__IncentiveBucketType(struct soap*, const std::vector<ns3__IncentiveBucketType *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons3__IncentiveBucketType(struct soap*, const char*, int, const std::vector<ns3__IncentiveBucketType *> *, const char*);
SOAP_FMAC3 std::vector<ns3__IncentiveBucketType *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons3__IncentiveBucketType(struct soap*, const char*, std::vector<ns3__IncentiveBucketType *> *, const char*);
SOAP_FMAC1 std::vector<ns3__IncentiveBucketType *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons3__IncentiveBucketType(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns3__IncentiveBucketType *>  * soap_new_std__vectorTemplateOfPointerTons3__IncentiveBucketType(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTons3__IncentiveBucketType(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons3__IncentiveApplyIndicationType_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTons3__IncentiveApplyIndicationType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons3__IncentiveApplyIndicationType(struct soap*, std::vector<ns3__IncentiveApplyIndicationType *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons3__IncentiveApplyIndicationType(struct soap*, const std::vector<ns3__IncentiveApplyIndicationType *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons3__IncentiveApplyIndicationType(struct soap*, const char*, int, const std::vector<ns3__IncentiveApplyIndicationType *> *, const char*);
SOAP_FMAC3 std::vector<ns3__IncentiveApplyIndicationType *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons3__IncentiveApplyIndicationType(struct soap*, const char*, std::vector<ns3__IncentiveApplyIndicationType *> *, const char*);
SOAP_FMAC1 std::vector<ns3__IncentiveApplyIndicationType *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons3__IncentiveApplyIndicationType(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns3__IncentiveApplyIndicationType *>  * soap_new_std__vectorTemplateOfPointerTons3__IncentiveApplyIndicationType(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTons3__IncentiveApplyIndicationType(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons3__IncentiveItemType_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTons3__IncentiveItemType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons3__IncentiveItemType(struct soap*, std::vector<ns3__IncentiveItemType *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons3__IncentiveItemType(struct soap*, const std::vector<ns3__IncentiveItemType *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons3__IncentiveItemType(struct soap*, const char*, int, const std::vector<ns3__IncentiveItemType *> *, const char*);
SOAP_FMAC3 std::vector<ns3__IncentiveItemType *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons3__IncentiveItemType(struct soap*, const char*, std::vector<ns3__IncentiveItemType *> *, const char*);
SOAP_FMAC1 std::vector<ns3__IncentiveItemType *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons3__IncentiveItemType(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns3__IncentiveItemType *>  * soap_new_std__vectorTemplateOfPointerTons3__IncentiveItemType(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTons3__IncentiveItemType(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons3__IncentiveAppliedToType_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTons3__IncentiveAppliedToType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons3__IncentiveAppliedToType(struct soap*, std::vector<ns3__IncentiveAppliedToType *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons3__IncentiveAppliedToType(struct soap*, const std::vector<ns3__IncentiveAppliedToType *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons3__IncentiveAppliedToType(struct soap*, const char*, int, const std::vector<ns3__IncentiveAppliedToType *> *, const char*);
SOAP_FMAC3 std::vector<ns3__IncentiveAppliedToType *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons3__IncentiveAppliedToType(struct soap*, const char*, std::vector<ns3__IncentiveAppliedToType *> *, const char*);
SOAP_FMAC1 std::vector<ns3__IncentiveAppliedToType *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons3__IncentiveAppliedToType(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns3__IncentiveAppliedToType *>  * soap_new_std__vectorTemplateOfPointerTons3__IncentiveAppliedToType(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTons3__IncentiveAppliedToType(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons3__ErrorType_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTons3__ErrorType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons3__ErrorType(struct soap*, std::vector<ns3__ErrorType *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons3__ErrorType(struct soap*, const std::vector<ns3__ErrorType *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons3__ErrorType(struct soap*, const char*, int, const std::vector<ns3__ErrorType *> *, const char*);
SOAP_FMAC3 std::vector<ns3__ErrorType *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons3__ErrorType(struct soap*, const char*, std::vector<ns3__ErrorType *> *, const char*);
SOAP_FMAC1 std::vector<ns3__ErrorType *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons3__ErrorType(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns3__ErrorType *>  * soap_new_std__vectorTemplateOfPointerTons3__ErrorType(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTons3__ErrorType(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfns3__DetailLevelCodeType_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfns3__DetailLevelCodeType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfns3__DetailLevelCodeType(struct soap*, std::vector<enum ns3__DetailLevelCodeType> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfns3__DetailLevelCodeType(struct soap*, const std::vector<enum ns3__DetailLevelCodeType> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfns3__DetailLevelCodeType(struct soap*, const char*, int, const std::vector<enum ns3__DetailLevelCodeType> *, const char*);
SOAP_FMAC3 std::vector<enum ns3__DetailLevelCodeType> * SOAP_FMAC4 soap_in_std__vectorTemplateOfns3__DetailLevelCodeType(struct soap*, const char*, std::vector<enum ns3__DetailLevelCodeType> *, const char*);
SOAP_FMAC1 std::vector<enum ns3__DetailLevelCodeType>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfns3__DetailLevelCodeType(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<enum ns3__DetailLevelCodeType>  * soap_new_std__vectorTemplateOfns3__DetailLevelCodeType(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfns3__DetailLevelCodeType(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons3__ErrorParameterType_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTons3__ErrorParameterType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons3__ErrorParameterType(struct soap*, std::vector<ns3__ErrorParameterType *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons3__ErrorParameterType(struct soap*, const std::vector<ns3__ErrorParameterType *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons3__ErrorParameterType(struct soap*, const char*, int, const std::vector<ns3__ErrorParameterType *> *, const char*);
SOAP_FMAC3 std::vector<ns3__ErrorParameterType *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons3__ErrorParameterType(struct soap*, const char*, std::vector<ns3__ErrorParameterType *> *, const char*);
SOAP_FMAC1 std::vector<ns3__ErrorParameterType *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons3__ErrorParameterType(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns3__ErrorParameterType *>  * soap_new_std__vectorTemplateOfPointerTons3__ErrorParameterType(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTons3__ErrorParameterType(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons3__CategoryType_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTons3__CategoryType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons3__CategoryType(struct soap*, std::vector<ns3__CategoryType *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons3__CategoryType(struct soap*, const std::vector<ns3__CategoryType *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons3__CategoryType(struct soap*, const char*, int, const std::vector<ns3__CategoryType *> *, const char*);
SOAP_FMAC3 std::vector<ns3__CategoryType *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons3__CategoryType(struct soap*, const char*, std::vector<ns3__CategoryType *> *, const char*);
SOAP_FMAC1 std::vector<ns3__CategoryType *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons3__CategoryType(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns3__CategoryType *>  * soap_new_std__vectorTemplateOfPointerTons3__CategoryType(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTons3__CategoryType(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons3__ItemType_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTons3__ItemType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons3__ItemType(struct soap*, std::vector<ns3__ItemType *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons3__ItemType(struct soap*, const std::vector<ns3__ItemType *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons3__ItemType(struct soap*, const char*, int, const std::vector<ns3__ItemType *> *, const char*);
SOAP_FMAC3 std::vector<ns3__ItemType *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons3__ItemType(struct soap*, const char*, std::vector<ns3__ItemType *> *, const char*);
SOAP_FMAC1 std::vector<ns3__ItemType *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons3__ItemType(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns3__ItemType *>  * soap_new_std__vectorTemplateOfPointerTons3__ItemType(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTons3__ItemType(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons3__TransactionType_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTons3__TransactionType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons3__TransactionType(struct soap*, std::vector<ns3__TransactionType *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons3__TransactionType(struct soap*, const std::vector<ns3__TransactionType *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons3__TransactionType(struct soap*, const char*, int, const std::vector<ns3__TransactionType *> *, const char*);
SOAP_FMAC3 std::vector<ns3__TransactionType *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons3__TransactionType(struct soap*, const char*, std::vector<ns3__TransactionType *> *, const char*);
SOAP_FMAC1 std::vector<ns3__TransactionType *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons3__TransactionType(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns3__TransactionType *>  * soap_new_std__vectorTemplateOfPointerTons3__TransactionType(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTons3__TransactionType(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfns3__ShippingRegionCodeType_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfns3__ShippingRegionCodeType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfns3__ShippingRegionCodeType(struct soap*, std::vector<enum ns3__ShippingRegionCodeType> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfns3__ShippingRegionCodeType(struct soap*, const std::vector<enum ns3__ShippingRegionCodeType> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfns3__ShippingRegionCodeType(struct soap*, const char*, int, const std::vector<enum ns3__ShippingRegionCodeType> *, const char*);
SOAP_FMAC3 std::vector<enum ns3__ShippingRegionCodeType> * SOAP_FMAC4 soap_in_std__vectorTemplateOfns3__ShippingRegionCodeType(struct soap*, const char*, std::vector<enum ns3__ShippingRegionCodeType> *, const char*);
SOAP_FMAC1 std::vector<enum ns3__ShippingRegionCodeType>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfns3__ShippingRegionCodeType(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<enum ns3__ShippingRegionCodeType>  * soap_new_std__vectorTemplateOfns3__ShippingRegionCodeType(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfns3__ShippingRegionCodeType(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfns3__BuyerPaymentMethodCodeType_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfns3__BuyerPaymentMethodCodeType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfns3__BuyerPaymentMethodCodeType(struct soap*, std::vector<enum ns3__BuyerPaymentMethodCodeType> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfns3__BuyerPaymentMethodCodeType(struct soap*, const std::vector<enum ns3__BuyerPaymentMethodCodeType> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfns3__BuyerPaymentMethodCodeType(struct soap*, const char*, int, const std::vector<enum ns3__BuyerPaymentMethodCodeType> *, const char*);
SOAP_FMAC3 std::vector<enum ns3__BuyerPaymentMethodCodeType> * SOAP_FMAC4 soap_in_std__vectorTemplateOfns3__BuyerPaymentMethodCodeType(struct soap*, const char*, std::vector<enum ns3__BuyerPaymentMethodCodeType> *, const char*);
SOAP_FMAC1 std::vector<enum ns3__BuyerPaymentMethodCodeType>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfns3__BuyerPaymentMethodCodeType(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<enum ns3__BuyerPaymentMethodCodeType>  * soap_new_std__vectorTemplateOfns3__BuyerPaymentMethodCodeType(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfns3__BuyerPaymentMethodCodeType(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfns3__ListingEnhancementsCodeType_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfns3__ListingEnhancementsCodeType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfns3__ListingEnhancementsCodeType(struct soap*, std::vector<enum ns3__ListingEnhancementsCodeType> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfns3__ListingEnhancementsCodeType(struct soap*, const std::vector<enum ns3__ListingEnhancementsCodeType> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfns3__ListingEnhancementsCodeType(struct soap*, const char*, int, const std::vector<enum ns3__ListingEnhancementsCodeType> *, const char*);
SOAP_FMAC3 std::vector<enum ns3__ListingEnhancementsCodeType> * SOAP_FMAC4 soap_in_std__vectorTemplateOfns3__ListingEnhancementsCodeType(struct soap*, const char*, std::vector<enum ns3__ListingEnhancementsCodeType> *, const char*);
SOAP_FMAC1 std::vector<enum ns3__ListingEnhancementsCodeType>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfns3__ListingEnhancementsCodeType(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<enum ns3__ListingEnhancementsCodeType>  * soap_new_std__vectorTemplateOfns3__ListingEnhancementsCodeType(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfns3__ListingEnhancementsCodeType(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfns3__GiftServicesCodeType_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfns3__GiftServicesCodeType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfns3__GiftServicesCodeType(struct soap*, std::vector<enum ns3__GiftServicesCodeType> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfns3__GiftServicesCodeType(struct soap*, const std::vector<enum ns3__GiftServicesCodeType> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfns3__GiftServicesCodeType(struct soap*, const char*, int, const std::vector<enum ns3__GiftServicesCodeType> *, const char*);
SOAP_FMAC3 std::vector<enum ns3__GiftServicesCodeType> * SOAP_FMAC4 soap_in_std__vectorTemplateOfns3__GiftServicesCodeType(struct soap*, const char*, std::vector<enum ns3__GiftServicesCodeType> *, const char*);
SOAP_FMAC1 std::vector<enum ns3__GiftServicesCodeType>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfns3__GiftServicesCodeType(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<enum ns3__GiftServicesCodeType>  * soap_new_std__vectorTemplateOfns3__GiftServicesCodeType(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfns3__GiftServicesCodeType(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfstd__string_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfstd__string_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfstd__string(struct soap*, std::vector<std::string> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfstd__string(struct soap*, const std::vector<std::string> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfstd__string(struct soap*, const char*, int, const std::vector<std::string> *, const char*);
SOAP_FMAC3 std::vector<std::string> * SOAP_FMAC4 soap_in_std__vectorTemplateOfstd__string(struct soap*, const char*, std::vector<std::string> *, const char*);
SOAP_FMAC1 std::vector<std::string>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfstd__string(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<std::string>  * soap_new_std__vectorTemplateOfstd__string(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfstd__string(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons3__AttributeSetType_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTons3__AttributeSetType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons3__AttributeSetType(struct soap*, std::vector<ns3__AttributeSetType *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons3__AttributeSetType(struct soap*, const std::vector<ns3__AttributeSetType *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons3__AttributeSetType(struct soap*, const char*, int, const std::vector<ns3__AttributeSetType *> *, const char*);
SOAP_FMAC3 std::vector<ns3__AttributeSetType *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons3__AttributeSetType(struct soap*, const char*, std::vector<ns3__AttributeSetType *> *, const char*);
SOAP_FMAC1 std::vector<ns3__AttributeSetType *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons3__AttributeSetType(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns3__AttributeSetType *>  * soap_new_std__vectorTemplateOfPointerTons3__AttributeSetType(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTons3__AttributeSetType(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons3__AttributeType_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTons3__AttributeType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons3__AttributeType(struct soap*, std::vector<ns3__AttributeType *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons3__AttributeType(struct soap*, const std::vector<ns3__AttributeType *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons3__AttributeType(struct soap*, const char*, int, const std::vector<ns3__AttributeType *> *, const char*);
SOAP_FMAC3 std::vector<ns3__AttributeType *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons3__AttributeType(struct soap*, const char*, std::vector<ns3__AttributeType *> *, const char*);
SOAP_FMAC1 std::vector<ns3__AttributeType *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons3__AttributeType(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns3__AttributeType *>  * soap_new_std__vectorTemplateOfPointerTons3__AttributeType(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTons3__AttributeType(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons3__ValType_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTons3__ValType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons3__ValType(struct soap*, std::vector<ns3__ValType *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons3__ValType(struct soap*, const std::vector<ns3__ValType *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons3__ValType(struct soap*, const char*, int, const std::vector<ns3__ValType *> *, const char*);
SOAP_FMAC3 std::vector<ns3__ValType *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons3__ValType(struct soap*, const char*, std::vector<ns3__ValType *> *, const char*);
SOAP_FMAC1 std::vector<ns3__ValType *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons3__ValType(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns3__ValType *>  * soap_new_std__vectorTemplateOfPointerTons3__ValType(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTons3__ValType(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfxsd__anyURI_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfxsd__anyURI_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfxsd__anyURI(struct soap*, std::vector<std::string> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfxsd__anyURI(struct soap*, const std::vector<std::string> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfxsd__anyURI(struct soap*, const char*, int, const std::vector<std::string> *, const char*);
SOAP_FMAC3 std::vector<std::string> * SOAP_FMAC4 soap_in_std__vectorTemplateOfxsd__anyURI(struct soap*, const char*, std::vector<std::string> *, const char*);
SOAP_FMAC1 std::vector<std::string>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfxsd__anyURI(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<std::string>  * soap_new_std__vectorTemplateOfxsd__anyURI(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfxsd__anyURI(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons3__FlatShippingRateType_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTons3__FlatShippingRateType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons3__FlatShippingRateType(struct soap*, std::vector<ns3__FlatShippingRateType *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons3__FlatShippingRateType(struct soap*, const std::vector<ns3__FlatShippingRateType *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons3__FlatShippingRateType(struct soap*, const char*, int, const std::vector<ns3__FlatShippingRateType *> *, const char*);
SOAP_FMAC3 std::vector<ns3__FlatShippingRateType *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons3__FlatShippingRateType(struct soap*, const char*, std::vector<ns3__FlatShippingRateType *> *, const char*);
SOAP_FMAC1 std::vector<ns3__FlatShippingRateType *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons3__FlatShippingRateType(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns3__FlatShippingRateType *>  * soap_new_std__vectorTemplateOfPointerTons3__FlatShippingRateType(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTons3__FlatShippingRateType(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons3__ShippingCarrierDetailsType_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTons3__ShippingCarrierDetailsType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons3__ShippingCarrierDetailsType(struct soap*, std::vector<ns3__ShippingCarrierDetailsType *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons3__ShippingCarrierDetailsType(struct soap*, const std::vector<ns3__ShippingCarrierDetailsType *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons3__ShippingCarrierDetailsType(struct soap*, const char*, int, const std::vector<ns3__ShippingCarrierDetailsType *> *, const char*);
SOAP_FMAC3 std::vector<ns3__ShippingCarrierDetailsType *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons3__ShippingCarrierDetailsType(struct soap*, const char*, std::vector<ns3__ShippingCarrierDetailsType *> *, const char*);
SOAP_FMAC1 std::vector<ns3__ShippingCarrierDetailsType *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons3__ShippingCarrierDetailsType(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns3__ShippingCarrierDetailsType *>  * soap_new_std__vectorTemplateOfPointerTons3__ShippingCarrierDetailsType(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTons3__ShippingCarrierDetailsType(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons3__FeeType_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTons3__FeeType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons3__FeeType(struct soap*, std::vector<ns3__FeeType *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons3__FeeType(struct soap*, const std::vector<ns3__FeeType *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons3__FeeType(struct soap*, const char*, int, const std::vector<ns3__FeeType *> *, const char*);
SOAP_FMAC3 std::vector<ns3__FeeType *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons3__FeeType(struct soap*, const char*, std::vector<ns3__FeeType *> *, const char*);
SOAP_FMAC1 std::vector<ns3__FeeType *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons3__FeeType(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns3__FeeType *>  * soap_new_std__vectorTemplateOfPointerTons3__FeeType(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTons3__FeeType(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons3__AdditionalAccountType_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTons3__AdditionalAccountType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons3__AdditionalAccountType(struct soap*, std::vector<ns3__AdditionalAccountType *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons3__AdditionalAccountType(struct soap*, const std::vector<ns3__AdditionalAccountType *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons3__AdditionalAccountType(struct soap*, const char*, int, const std::vector<ns3__AdditionalAccountType *> *, const char*);
SOAP_FMAC3 std::vector<ns3__AdditionalAccountType *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons3__AdditionalAccountType(struct soap*, const char*, std::vector<ns3__AdditionalAccountType *> *, const char*);
SOAP_FMAC1 std::vector<ns3__AdditionalAccountType *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons3__AdditionalAccountType(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns3__AdditionalAccountType *>  * soap_new_std__vectorTemplateOfPointerTons3__AdditionalAccountType(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTons3__AdditionalAccountType(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons3__PromotedItemType_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTons3__PromotedItemType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons3__PromotedItemType(struct soap*, std::vector<ns3__PromotedItemType *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons3__PromotedItemType(struct soap*, const std::vector<ns3__PromotedItemType *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons3__PromotedItemType(struct soap*, const char*, int, const std::vector<ns3__PromotedItemType *> *, const char*);
SOAP_FMAC3 std::vector<ns3__PromotedItemType *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons3__PromotedItemType(struct soap*, const char*, std::vector<ns3__PromotedItemType *> *, const char*);
SOAP_FMAC1 std::vector<ns3__PromotedItemType *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons3__PromotedItemType(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns3__PromotedItemType *>  * soap_new_std__vectorTemplateOfPointerTons3__PromotedItemType(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTons3__PromotedItemType(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons1__OptionSelectionDetailsType_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTons1__OptionSelectionDetailsType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons1__OptionSelectionDetailsType(struct soap*, std::vector<ns1__OptionSelectionDetailsType *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons1__OptionSelectionDetailsType(struct soap*, const std::vector<ns1__OptionSelectionDetailsType *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons1__OptionSelectionDetailsType(struct soap*, const char*, int, const std::vector<ns1__OptionSelectionDetailsType *> *, const char*);
SOAP_FMAC3 std::vector<ns1__OptionSelectionDetailsType *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons1__OptionSelectionDetailsType(struct soap*, const char*, std::vector<ns1__OptionSelectionDetailsType *> *, const char*);
SOAP_FMAC1 std::vector<ns1__OptionSelectionDetailsType *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons1__OptionSelectionDetailsType(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns1__OptionSelectionDetailsType *>  * soap_new_std__vectorTemplateOfPointerTons1__OptionSelectionDetailsType(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTons1__OptionSelectionDetailsType(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons1__InstallmentDetailsType_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTons1__InstallmentDetailsType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons1__InstallmentDetailsType(struct soap*, std::vector<ns1__InstallmentDetailsType *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons1__InstallmentDetailsType(struct soap*, const std::vector<ns1__InstallmentDetailsType *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons1__InstallmentDetailsType(struct soap*, const char*, int, const std::vector<ns1__InstallmentDetailsType *> *, const char*);
SOAP_FMAC3 std::vector<ns1__InstallmentDetailsType *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons1__InstallmentDetailsType(struct soap*, const char*, std::vector<ns1__InstallmentDetailsType *> *, const char*);
SOAP_FMAC1 std::vector<ns1__InstallmentDetailsType *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons1__InstallmentDetailsType(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns1__InstallmentDetailsType *>  * soap_new_std__vectorTemplateOfPointerTons1__InstallmentDetailsType(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTons1__InstallmentDetailsType(soap, n, NULL, NULL, NULL);
}
#endif

#endif

/* End of soapH.h */
